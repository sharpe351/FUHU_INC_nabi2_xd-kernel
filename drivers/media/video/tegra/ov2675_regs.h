/*
 * ov2675_regs.h
 *
 * Register definitions for the OV2675 Sensor.
 *
 * Leverage MT9P012.h
 *
 * Copyright (C) 2008 Hewlett Packard.
 *
 * This file is licensed under the terms of the GNU General Public License
 * version 2. This program is licensed "as is" without any warranty of any
 * kind, whether express or implied.
 */

#ifndef OV2675_REGS_H
#define OV2675_REGS_H

#include <media/ov2675.h>
#include <media/sensor_yuv.h>

struct ov2675_reg {
	u16 addr;
	u16 val;
};

//#define OV2675_MIRROR_REG		0x3090
//#define OV2675_FLIP_REG			0x307C

/* White Balance settings */
static struct ov2675_reg wb_auto[] = {
  {0x3306, 0x00},	//0x3306 [1] =0 , MWB disable
	{SENSOR_TABLE_END, 0x00}          
};
static struct ov2675_reg wb_incandescent[] = {
  {0x3306, 0x02},	//60 3306  [1] =1
  {0x3337, 0x40},	//60 3337 40
  {0x3338, 0x41},	//60 3338 41
  {0x3339, 0x68},	//60 3339 68
	{SENSOR_TABLE_END, 0x00}          
};
static struct ov2675_reg wb_fluorescent[] = {
  {0x3306, 0x02},	//60 3306  [1] =1
  {0x3337, 0x48},	//60 3337 48     
  {0x3338, 0x40},	//60 3338 40     
  {0x3339, 0x5a},	//60 3339 5a     
	{SENSOR_TABLE_END, 0x00}          
};
static struct ov2675_reg wb_daylight[] = {
  {0x3306, 0x02},	//60 3306 [1] =1
  {0x3337, 0x5d},	//60 3337 5d    
  {0x3338, 0x40},	//60 3338 40    
  {0x3339, 0x46},	//60 3339 46    
	{SENSOR_TABLE_END, 0x00}          
};

static struct ov2675_reg wb_cloudy[] = {
  {0x3306, 0x02},	//60 3306  [1] =1
  {0x3337, 0x54},	//60 3337 54     
  {0x3338, 0x40},	//60 3338 40     
  {0x3339, 0x4e},	//60 3339 4e     
	{SENSOR_TABLE_END, 0x00}          
};

//&*&*&*cj1_20130312,mod ov provide brightness settings for exposure 
static struct ov2675_reg Exposure_2[] = {
//  {0x3018, 0xc8},	//60 3018 c8 
//  {0x3019, 0xb8},	//60 3019 b8 
//  {0x301a, 0xf7},	//60 301a f7 
	{0x3391, 0x04},
	{0x3390, 0x41},
	{0x339a, 0x20},

	{SENSOR_TABLE_END, 0x0000}
};

static struct ov2675_reg Exposure_1[] = {
//  {0x3018, 0xa8},	//60 3018 a8 
//  {0x3019, 0x98},	//60 3019 98 
//  {0x301a, 0xe5},	//60 301a e5 
	{0x3391, 0x04},
	{0x3390, 0x41},
	{0x339a, 0x10},
	{SENSOR_TABLE_END, 0x0000}
};

static struct ov2675_reg Exposure_0[] = {
//  {0x3018, 0x78},	//60 3018 78 
//  {0x3019, 0x68},	//60 3019 68 
//  {0x301a, 0xd4},	//60 301a d4 
	{0x3391, 0x00},
	{0x3390, 0x41},
	{0x339a, 0x00},

	{SENSOR_TABLE_END, 0x0000}
};

static struct ov2675_reg Exposure_Negative_1[] = {
//  {0x3018, 0x50},	//60 3018 50  
//  {0x3019, 0x40},	//60 3019 40  
//  {0x301a, 0x82},	//60 301a 82  
	{0x3391, 0x04},
	{0x3390, 0x49},
	{0x339a, 0x10},
	{SENSOR_TABLE_END, 0x0000}
};

static struct ov2675_reg Exposure_Negative_2[] = {
//  {0x3018, 0x40},	//60 3018 40  
//  {0x3019, 0x30},	//60 3019 30  
//  {0x301a, 0x71},	//60 301a 71  
	{0x3391, 0x04},
	{0x3390, 0x49},
	{0x339a, 0x20},
	{SENSOR_TABLE_END, 0x0000}
};
//&*&*&*cj2_20130312,mod ov provide brightness settings for exposure 

static struct ov2675_reg mirror_flip_off[] = {
  {0x3090, 0x33},	//60 307c  
//  {0x307c, 0x10},	//60 307c  
	{SENSOR_TABLE_END, 0x0000}
};
//static struct ov2675_reg mirror_on_flip_off[] = {
//  {0x3090, 0x3B},	//60 307c 
////  {0x307c, 0x10},	//60 307c 
//	{SENSOR_TABLE_END, 0x0000}
//};
//static struct ov2675_reg mirror_off_flip_on[] = {
//  {0x3090, 0x33},	//60 307c  
//  {0x307c, 0x11},	//60 307c  
//	{SENSOR_TABLE_END, 0x0000}
//};
//static struct ov2675_reg mirror_flip_on[] = {
//  {0x3090, 0x3B},	//60 307c  mirror
//  {0x307c, 0x11},	//60 307c  flip
//	{SENSOR_TABLE_END, 0x0000}
//};

static struct ov2675_reg exposure_release[] = {
  {0x3013, 0xf7},	//60 307c  
	{SENSOR_TABLE_END, 0x0000}
};

static struct ov2675_reg exposure_fixed[] = {
  {0x3013, 0xf0},	//60 307c  
//  {0x3013, 0xf2},	//60 307c  
	{SENSOR_TABLE_END, 0x0000}
};


static struct ov2675_reg initial_list[] = {
//for init

//@@ 1600x1200 YUV 15 FPS MIPI mode
//;2650 Rev1D reference setting 04092008
//;24MHz 		;5FPS
//;1600x1200	;YUV	output 
//;HREF		positive
//;Vsync		positive
//;AEC;		Auto;	0x3013[0]=1
//;AGC; 		Auto;	0x3013[2]=1	16x ceiling; 	0x3015[2:0]=011
//;Banding Filter;Auto;	0x3013[5]=1	
//;50/60 Auto detection	ON	0x3014[6]=1
//;Night mode 	off;	0x3014[3]=0
//;AWB; 		ON;	0x3300[5:4]=11
//;LC 		ON;	0x3300[3:2]=11	
//;UVadjust 	ON;	0x3301[6]=1
//;WBC 		ON;	0x3301[1:0]=11
//;UV average	ON;	0x3302[1:0]=01
//;Scaling	Off;	0x3302[4]=0
//;DNS 		Auto;	0x3306[2]=0  
//;Sharpness 	Auto; 	0x3306[3]=0


//;Soft Reset
	{0x3012, 0x80}, //60 3012 80 
//;Add some dealy or wait a few miliseconds after register reset
	{SENSOR_WAIT_MS,100},
	
//;IO & Clock & Analog Setup
	{0x308c, 0x80}, //60 308c 80
	{0x308d, 0x0e}, //60 308d 0e
	{0x360b, 0x00}, //60 360b 00
	{0x30b0, 0xff}, //60 30b0 ff
	{0x30b1, 0xff}, //60 30b1 ff
	{0x30b2, 0x24}, //60 30b2 24

	{0x300e, 0x34}, //60 300e 34
	{0x300f, 0xa6}, //60 300f a6
	{0x3010, 0x81}, //60 3010 81
	{0x3082, 0x01}, //60 3082 01
	{0x30f4, 0x01}, //60 30f4 01
	{0x3090, 0x33}, //60 3090 33
	{0x3091, 0xc0}, //60 3091 c0
	{0x30ac, 0x42}, //60 30ac 42

	{0x30d1, 0x08}, //60 30d1 08
	{0x30a8, 0x56}, //60 30a8 56
	{0x3015, 0x03}, //60 3015 03
	{0x3093, 0x00}, //60 3093 00
	{0x307e, 0xe5}, //60 307e e5
	{0x3079, 0x00}, //60 3079 00
	{0x30aa, 0x42}, //60 30aa 42
	{0x3017, 0x40}, //60 3017 40
	{0x30f3, 0x82}, //60 30f3 82
	{0x306a, 0x0c}, //60 306a 0c
	{0x306d, 0x00}, //60 306d 00
	{0x336a, 0x3c}, //60 336a 3c
	{0x3076, 0x6a}, //60 3076 6a
	{0x30d9, 0x8c}, //60 30d9 8c
	{0x3016, 0x82}, //60 3016 82
	{0x3601, 0x30}, //60 3601 30
	{0x304e, 0x88}, //60 304e 88
	{0x30f1, 0x82}, //60 30f1 82

	{0x3011, 0x02}, //60 3011 02

//;AEC/AGC
	{0x3013, 0xf7}, //60 3013 f7
	{0x301c, 0x13}, //60 301c 13
	{0x301d, 0x17}, //60 301d 17
	{0x3070, 0x3e}, //60 3070 3e
	{0x3072, 0x34}, //60 3072 34

//;D5060
	{0x30af, 0x00}, //60 30af 00
	{0x3048, 0x1f}, //60 3048 1f 
	{0x3049, 0x4e}, //60 3049 4e  
	{0x304a, 0x20}, //60 304a 20  
	{0x304f, 0x20}, //60 304f 20  
	{0x304b, 0x02}, //60 304b 02 
	{0x304c, 0x00}, //60 304c 00  
	{0x304d, 0x02}, //60 304d 02  
	{0x304f, 0x20}, //60 304f 20  
	{0x30a3, 0x10}, //60 30a3 10  
	{0x3013, 0xf7}, //60 3013 f7 
	{0x3014, 0x44}, //60 3014 44  
	{0x3071, 0x00}, //60 3071 00
//	{0x3070, 0x3e}, //60 3070 3e
	{0x3070, 0xba}, //60 3070 3e
	{0x3073, 0x00}, //60 3073 00
//	{0x3072, 0x34}, //60 3072 34
	{0x3072, 0x9a}, //60 3072 34
//	{0x301c, 0x12}, //60 301c 12
//	{0x301d, 0x16}, //60 301d 16 
	{0x301c, 0x01}, //60 301c 12
	{0x301d, 0x02}, //60 301d 16 
	{0x304d, 0x42}, //60 304d 42     
	{0x304a, 0x40}, //60 304a 40  
	{0x304f, 0x40}, //60 304f 40  
	{0x3095, 0x07}, //60 3095 07  
	{0x3096, 0x16}, //60 3096 16 
	{0x3097, 0x1d}, //60 3097 1d  

//;Window Setup
	{0x300e, 0x38}, //60 300e 38
	{0x3020, 0x01}, //60 3020 01
	{0x3021, 0x18}, //60 3021 18
	{0x3022, 0x00}, //60 3022 00
	{0x3023, 0x0a}, //60 3023 0a
	{0x3024, 0x06}, //60 3024 06
	{0x3025, 0x58}, //60 3025 58
	{0x3026, 0x04}, //60 3026 04
	{0x3027, 0xbc}, //60 3027 bc
	{0x3088, 0x06}, //60 3088 06
	{0x3089, 0x40}, //60 3089 40
	{0x308a, 0x04}, //60 308a 04
	{0x308b, 0xb0}, //60 308b b0
	{0x3316, 0x64}, //60 3316 64
	{0x3317, 0x4b}, //60 3317 4b
	{0x3318, 0x00}, //60 3318 00
	{0x331a, 0x64}, //60 331a 64
	{0x331b, 0x4b}, //60 331b 4b
	{0x331c, 0x00}, //60 331c 00
	{0x3100, 0x00}, //60 3100 00

////;AWB
//	{0x3320, 0xfa}, //60 3320 fa
//	{0x3321, 0x11}, //60 3321 11
//	{0x3322, 0x92}, //60 3322 92
//	{0x3323, 0x01}, //60 3323 01
//	{0x3324, 0x97}, //60 3324 97
//	{0x3325, 0x02}, //60 3325 02
//	{0x3326, 0xff}, //60 3326 ff
//	{0x3327, 0x0c}, //60 3327 0c
//	{0x3328, 0x10}, //60 3328 10 
//	{0x3329, 0x10}, //60 3329 10
//	{0x332a, 0x58}, //60 332a 58
//	{0x332b, 0x50}, //60 332b 50
//	{0x332c, 0xbe}, //60 332c be
//	{0x332d, 0xe1}, //60 332d e1
//	{0x332e, 0x43}, //60 332e 43
//	{0x332f, 0x36}, //60 332f 36
//	{0x3330, 0x4d}, //60 3330 4d
//	{0x3331, 0x44}, //60 3331 44
//	{0x3332, 0xf8}, //60 3332 f8
//	{0x3333, 0x0a}, //60 3333 0a
//	{0x3334, 0xf0}, //60 3334 f0
//	{0x3335, 0xf0}, //60 3335 f0
//	{0x3336, 0xf0}, //60 3336 f0
//	{0x3337, 0x40}, //60 3337 40
//	{0x3338, 0x40}, //60 3338 40
//	{0x3339, 0x40}, //60 3339 40
//	{0x333a, 0x00}, //60 333a 00
//	{0x333b, 0x00}, //60 333b 00 

////@@ AWB - new   2013.02.27++
//	{0x3320, 0xf8}, //60 3320 f8
//	{0x3321, 0x11}, //60 3321 11
//	{0x3322, 0x92}, //60 3322 92
//	{0x3323, 0x01}, //60 3323 01
//	{0x3324, 0x97}, //60 3324 97
//	{0x3325, 0x02}, //60 3325 02
//	{0x3326, 0xff}, //60 3326 ff
//	{0x3327, 0x0c}, //60 3327 0c
//	{0x3328, 0x10}, //60 3328 10 
//	{0x3329, 0x10}, //60 3329 10
//	{0x332a, 0x58}, //60 332a 58
//	{0x332b, 0x50}, //60 332b 50
//	{0x332c, 0xbe}, //60 332c be
//	{0x332d, 0xce}, //60 332d ce
//	{0x332e, 0x3f}, //60 332e 3f
//	{0x332f, 0x36}, //60 332f 36
//	{0x3330, 0x4d}, //60 3330 4d
//	{0x3331, 0x44}, //60 3331 44
//	{0x3332, 0xf0}, //60 3332 f0
//	{0x3333, 0x0a}, //60 3333 0a
//	{0x3334, 0xf0}, //60 3334 f0
//	{0x3335, 0xf0}, //60 3335 f0
//	{0x3336, 0xf0}, //60 3336 f0
//	{0x3337, 0x40}, //60 3337 40
//	{0x3338, 0x40}, //60 3338 40
//	{0x3339, 0x40}, //60 3339 40
//	{0x333a, 0x00}, //60 333a 00
//	{0x333b, 0x00}, //60 333b 00
////@@ AWB - new   2013.02.27--

////@@ AWB - new   2013.03.21++
//	{0x3320, 0xf8}, //60 3320 f8
//	{0x3321, 0x11}, //60 3321 11
//	{0x3322, 0x92}, //60 3322 92
//	{0x3323, 0x31}, //60 3323 31
//	{0x3324, 0x97}, //60 3324 97
//	{0x3325, 0x02}, //60 3325 02
//	{0x3326, 0xff}, //60 3326 ff
//	{0x3327, 0x0c}, //60 3327 0c
//	{0x3328, 0x0a}, //60 3328 0a
//	{0x3329, 0x13}, //60 3329 13
////	{0x332a, 0x52}, //60 332a 52
//	{0x332a, 0x62}, //60 332a 52 //20130322 for CWF
//	{0x332b, 0x50}, //60 332b 50
//	{0x332c, 0xbe}, //60 332c be
//	{0x332d, 0x9f}, //60 332d 9f
//	{0x332e, 0x32}, //60 332e 32
//	{0x332f, 0x2e}, //60 332f 2e
//	{0x3330, 0x4d}, //60 3330 4d
//	{0x3331, 0x45}, //60 3331 45
//	{0x3332, 0xf0}, //60 3332 f0
//	{0x3333, 0x0a}, //60 3333 0a
//	{0x3334, 0xf0}, //60 3334 f0
//	{0x3335, 0xf0}, //60 3335 f0
//	{0x3336, 0xf0}, //60 3336 f0
//	{0x3337, 0x40}, //60 3337 40
//	{0x3338, 0x40}, //60 3338 40
//	{0x3339, 0x40}, //60 3339 40
//	{0x333a, 0x00}, //60 333a 00
//	{0x333b, 0x00}, //60 333b 00
////@@ AWB - new   2013.03.21--

//@@ AWB - new   2013.05.30++
//New AWB - 01
	{0x3320, 0xf8}, //60 3320 f8
	{0x3321, 0x11}, //60 3321 11
	{0x3322, 0x92}, //60 3322 92
	{0x3323, 0x31}, //60 3323 31
	{0x3324, 0x97}, //60 3324 97
	{0x3325, 0x02}, //60 3325 2
	{0x3326, 0xff}, //60 3326 ff
	{0x3327, 0x0c}, //60 3327 c
	{0x3328, 0x18}, //60 3328 18
	{0x3329, 0x13}, //60 3329 13
	{0x332a, 0x62}, //60 332a 62
	{0x332b, 0x50}, //60 332b 50
	{0x332c, 0xbe}, //60 332c be
	{0x332d, 0x9f}, //60 332d 9f
	{0x332e, 0x32}, //60 332e 32
	{0x332f, 0x2e}, //60 332f 2e
	{0x3330, 0x56}, //60 3330 56
	{0x3331, 0x41}, //60 3331 41
	{0x3332, 0xf0}, //60 3332 f0
	{0x3333, 0x10}, //60 3333 10
	{0x3334, 0xf0}, //60 3334 f0
	{0x3335, 0xf0}, //60 3335 f0
	{0x3336, 0xf0}, //60 3336 f0
	{0x3337, 0x40}, //60 3337 40
	{0x3338, 0x40}, //60 3338 40
	{0x3339, 0x40}, //60 3339 40
	{0x333a, 0x00}, //60 333a 0
	{0x333b, 0x00}, //60 333b 0

//@@ AWB - new   2013.05.30--



////;Color Matrix
//	{0x3380, 0x28}, //60 3380 28  
//	{0x3381, 0x48}, //60 3381 48   
//	{0x3382, 0x10}, //60 3382 10  
//	{0x3383, 0x23}, //60 3383 23 
//	{0x3384, 0xc0}, //60 3384 c0
//	{0x3385, 0xe5}, //60 3385 e5   
//	{0x3386, 0xc2}, //60 3386 c2  
//	{0x3387, 0xb3}, //60 3387 b3  
//	{0x3388, 0x0e}, //60 3388 e  
//	{0x3389, 0x98}, //60 3389 98 
//	{0x338a, 0x01}, //60 338a 1 

//;Color Matrix - new 2013.03.21 ++
	{0x3380, 0x28}, //60 3380 28
	{0x3381, 0x48}, //60 3381 48
	{0x3382, 0x29}, //60 3382 29
	{0x3383, 0x39}, //60 3383 39
	{0x3384, 0xc6}, //60 3384 c6
	{0x3385, 0xff}, //60 3385 ff
	{0x3386, 0xd5}, //60 3386 d5
	{0x3387, 0xc5}, //60 3387 c5
	{0x3388, 0x0f}, //60 3388 0f
	{0x3389, 0x98}, //60 3389 98
	{0x338a, 0x01}, //60 338a 01
//;Color Matrix - new 2013.03.21 --

//;Gamma
	{0x3340, 0x0e}, //60 3340 0e
	{0x3341, 0x1a}, //60 3341 1a
	{0x3342, 0x31}, //60 3342 31
	{0x3343, 0x45}, //60 3343 45
	{0x3344, 0x5a}, //60 3344 5a
	{0x3345, 0x69}, //60 3345 69
	{0x3346, 0x75}, //60 3346 75
	{0x3347, 0x7e}, //60 3347 7e
	{0x3348, 0x88}, //60 3348 88
	{0x3349, 0x96}, //60 3349 96
	{0x334a, 0xa3}, //60 334a a3
	{0x334b, 0xaf}, //60 334b af
	{0x334c, 0xc4}, //60 334c c4
	{0x334d, 0xd7}, //60 334d d7
	{0x334e, 0xe8}, //60 334e e8
	{0x334f, 0x20}, //60 334f 20

////;Lens correction
//	{0x3350, 0x32}, //60 3350 32
//	{0x3351, 0x25}, //60 3351 25  
//	{0x3352, 0x80}, //60 3352 80  
//	{0x3353, 0x1e}, //60 3353 1e  
//	{0x3354, 0x00}, //60 3354 00  
//	{0x3355, 0x85}, //60 3355 85  
//	{0x3356, 0x32}, //60 3356 32   
//	{0x3357, 0x25}, //60 3357 25   
//	{0x3358, 0x80}, //60 3358 80   
//	{0x3359, 0x1b}, //60 3359 1b   
//	{0x335a, 0x00}, //60 335a 00  
//	{0x335b, 0x85}, //60 335b 85   
//	{0x335c, 0x32}, //60 335c 32   
//	{0x335d, 0x25}, //60 335d 25   
//	{0x335e, 0x80}, //60 335e 80   
//	{0x335f, 0x1b}, //60 335f 1b   
//	{0x3360, 0x00}, //60 3360 00  
//	{0x3361, 0x85}, //60 3361 85   
//	{0x3363, 0x70}, //60 3363 70   
//	{0x3364, 0x7f}, //60 3364 7f   
//	{0x3365, 0x00}, //60 3365 00  
//	{0x3366, 0x00}, //60 3366 00  

////@@ Lens correction - 01	2013.02.27++
//	{0x3350, 0x32}, //60 3350 32      ;R
//	{0x3351, 0x25}, //60 3351 25
//	{0x3352, 0x80}, //60 3352 80
//	{0x3353, 0x1e}, //60 3353 1e
//	{0x3354, 0x00}, //60 3354 00
//	{0x3355, 0x85}, //60 3355 85
//	{0x3356, 0x32}, //60 3356 32      ;G
//	{0x3357, 0x25}, //60 3357 25
//	{0x3358, 0x80}, //60 3358 80
//	{0x3359, 0x1b}, //60 3359 1b
//	{0x335a, 0x00}, //60 335a 00
//	{0x335b, 0x85}, //60 335b 85
//	{0x335c, 0x31}, //60 335c 31;32 ;B
//	{0x335d, 0x24}, //60 335d 24;25
//	{0x335e, 0x80}, //60 335e 80
//	{0x335f, 0x1b}, //60 335f 1b
//	{0x3360, 0x00}, //60 3360 00
//	{0x3361, 0x85}, //60 3361 85
//	{0x3363, 0x70}, //60 3363 70
//	{0x3364, 0x7f}, //60 3364 7f
//	{0x3365, 0x00}, //60 3365 00
//	{0x3366, 0x00}, //60 3366 00
////@@ Lens correction - 01	2013.02.27--


//@@ Lens correction - 01	2013.03.21++
	{0x3350, 0x32}, //60 3350 32   ;R
	{0x3351, 0x25}, //60 3351 25
	{0x3352, 0x80}, //60 3352 80
	{0x3353, 0x22}, //60 3353 22;
	{0x3354, 0x00}, //60 3354 00
	{0x3355, 0x85}, //60 3355 85
	{0x3356, 0x32}, //60 3356 32   ;G
	{0x3357, 0x25}, //60 3357 25
	{0x3358, 0x80}, //60 3358 80
	{0x3359, 0x21}, //60 3359 21
	{0x335a, 0x00}, //60 335a 00
	{0x335b, 0x85}, //60 335b 85
	{0x335c, 0x31}, //60 335c 31
	{0x335d, 0x24}, //60 335d 24
	{0x335e, 0x80}, //60 335e 80
	{0x335f, 0x1c}, //60 335f 1c
	{0x3360, 0x00}, //60 3360 00
	{0x3361, 0x85}, //60 3361 85
//	{0x3363, 0x70}, //60 3363 70
//	{0x3364, 0x7f}, //60 3364 7f
	{0x3363, 0x01}, //60 3363 70		//20130530 for len issue (flash). 
	{0x3364, 0x03}, //60 3364 7f		//20130530 for len issue (flash).
	{0x3365, 0x00}, //60 3365 00
	{0x3366, 0x00}, //60 3366 00
//@@ Lens correction - 01	2013.03.21--

//;UVadjust
	{0x3301, 0xff}, //60 3301 ff
	{0x338B, 0x11}, //60 338B 11
	{0x338c, 0x10}, //60 338c 10
	{0x338d, 0x40}, //60 338d 40

//;Sharpness/De-noise
	{0x3370, 0xd0}, //60 3370 d0
	{0x3371, 0x00}, //60 3371 00
	{0x3372, 0x00}, //60 3372 00
	{0x3373, 0x40}, //60 3373 40
	{0x3374, 0x10}, //60 3374 10
	{0x3375, 0x10}, //60 3375 10
	{0x3376, 0x04}, //60 3376 04
	{0x3377, 0x00}, //60 3377 00
	{0x3378, 0x04}, //60 3378 04
	{0x3379, 0x80}, //60 3379 80

//;BLC
	{0x3069, 0x84}, //60 3069 84
	{0x307c, 0x10}, //60 307c 10
	{0x3087, 0x02}, //60 3087 02

//;Other functions
	{0x3300, 0xfc}, //60 3300 fc
	{0x3302, 0x01}, //60 3302 01
//	{0x3400, 0x00}, //60 3400 00
	{0x3400, 0x02}, //sam
	{0x3606, 0x20}, //60 3606 20
	{0x3601, 0x30}, //60 3601 30
	{0x300e, 0x34}, //60 300e 34
	{0x30f3, 0x83}, //60 30f3 83
	{0x304e, 0x88}, //60 304e 88

//;MIPI
	{0x363b, 0x01}, //60 363b 01
	{0x309e, 0x08}, //60 309e 08
	{0x3606, 0x00}, //60 3606 00
//	{0x3630, 0x31}, //60 3630 31
	{0x3630, 0x35}, //sam


//	{0x3086, 0x0f}, //sam
//	{0x3086, 0x00}, //sam

	{0x304e, 0x04}, //60 304e 04; [7] DVP_CLK_snr
	{0x363b, 0x01}, //60 363b 01; disable cd
	{0x309e, 0x08}, //60 309e 08; disable lp_rx
	{0x3606, 0x00}, //60 3606 00; disable dvp
	{0x3084, 0x01}, //60 3084 01; scale_div_man_en
	{0x3010, 0x82}, //60 3010 82; scale_div_man
	{0x3011, 0x03}, //60 3011 03; sys_div /4
//	{0x3010, 0x81}, //sam
//	{0x3011, 0x01}, //sam
	{0x3634, 0x26}, //60 3634 26;
//	{0x363c, 0x22}, //sam
//	{0x3640, 0x09}, //60 3640 09

//	{0x300e, 0x34}, //60 300e 34;
	{0x3011, 0x00}, //60 3011 00;
	{0x3010, 0x80}, //60 3010 80;  


	{0x3086, 0x0F}, //60 3086 0f  ;sleep on
	{0x3086, 0x00}, //60 3086 00  ;sleep off

//# 99 1600 1200
//# 98 0 0

	{SENSOR_TABLE_END, 0x00}
          
};     

static struct ov2675_reg SVGA_list[] = {

//@@ OV2675 UXGA to SVGA
//99 800 600
//98 0 0
//100 97 800 600
	{0x300e, 0x34},	//60 300e 34	//PLL Control 1
	{0x3011, 0x00},	//60 3011 00	//Clock Rate Control
	{0x3012, 0x10},	//60 3012 10	//Format Control
	{0x302A, 0x02},	//60 302A 02	//VTS[15:8]
	{0x302B, 0x6a},	//60 302B 6a	//VTS[7:0]
	{0x306F, 0x14},	//60 306f 14	//BLCF
               
	{0x3020, 0x01},	//60 3020 01	//HS[15:8]
	{0x3021, 0x18},	//60 3021 18	//HS[7:0]
	{0x3022, 0x00},	//60 3022 00	//VS[15:8]
	{0x3023, 0x06},	//60 3023 06	//VS[7:0]
	{0x3024, 0x06},	//60 3024 06	//HW[15:8]
	{0x3025, 0x58},	//60 3025 58	//HW[7:0]
	{0x3026, 0x02},	//60 3026 02	//VH[15:8]
	{0x3027, 0x61},	//60 3027 61	//VH[7:0]	
	{0x3088, 0x03},	//60 3088 03	//ISP_XOUT[15:8]
	{0x3089, 0x20},	//60 3089 20	//ISP_XOUT[7:0]
	{0x308a, 0x02},	//60 308a 02	//ISP_YOUT[15:8]
	{0x308b, 0x58},	//60 308b 58	//ISP_YOUT[7:0]
	
	{0x3316, 0x64},	//60 3316 64	//Scale_IH[10:4] Scale horizontal input size high bits
	{0x3317, 0x25},	//60 3317 25	//Scale_IV[10:4] Scale vertical input size high bits
	{0x3318, 0x80},	//60 3318 80	//Scale_IV[3:0],Scale_IH[3:0]
	{0x3319, 0x08},	//60 3319 08	//Offset_scale_IV[3:0],Offset_scale_IH[3:0]
	{0x331a, 0x64},	//60 331a 64	//OH[10:4] Horizontal output size high bits
	{0x331b, 0x4b},	//60 331b 4b	//OV[10:4] Vertiacal output size high bits
	{0x331c, 0x00},	//60 331c 00	//OV[3:0],OH[3:0]
	{0x331d, 0x38},	//60 331d 38	//Offset_scale_OV[3:0],Offset_scale_OH[3:0]
	{0x3302, 0x11},	//60 3302 11	//ISP_CTRL_2, bit[4]=Scale_en, bit[0]=UV_avg_en
		
	{SENSOR_TABLE_END, 0x00}
          
};     

static struct ov2675_reg UXVGA_list[] = {
//@@ OV2675 SVGA to UXGA
//99 1600 1200
//98 0 0
	{0x300e, 0x34},	//60 300e 34	//PLL Control 1                                               
	{0x3011, 0x00},	//60 3011 00  //Clock Rate Control                                          
	{0x3012, 0x00},	//60 3012 00  //Format Control                                              
	{0x302A, 0x04},	//60 302A 04  //VTS[15:8]                                                   
	{0x302B, 0xd4},	//60 302B d4  //VTS[7:0]                                                    
	{0x306f, 0x54},	//60 306f 54  //BLCF                                                        
                                                                                              
	{0x3020, 0x01},	//60 3020 01  //HS[15:8]                                                    
	{0x3021, 0x18},	//60 3021 18  //HS[7:0]                                                     
	{0x3022, 0x00},	//60 3022 00  //VS[15:8]                                                    
	{0x3023, 0x0a},	//60 3023 0a  //VS[7:0]                                                     
	{0x3024, 0x06},	//60 3024 06  //HW[15:8]                                                    
	{0x3025, 0x58},	//60 3025 58  //HW[7:0]                                                     
	{0x3026, 0x04},	//60 3026 04  //VH[15:8]                                                    
	{0x3027, 0xbc},	//60 3027 bc  //VH[7:0]	                                                    
	{0x3088, 0x06},	//60 3088 06  //ISP_XOUT[15:8]                                              
	{0x3089, 0x40},	//60 3089 40  //ISP_XOUT[7:0]                                               
	{0x308a, 0x04},	//60 308a 04  //ISP_YOUT[15:8]                                              
	{0x308b, 0xb0},	//60 308b b0  //ISP_YOUT[7:0]                                               
	                                                                                            
	{0x3316, 0x64},	//60 3316 64  //Scale_IH[10:4] Scale horizontal input size high bits        
	{0x3317, 0x4b},	//60 3317 4b  //Scale_IV[10:4] Scale vertical input size high bits          
	{0x3318, 0x00},	//60 3318 00  //Scale_IV[3:0],Scale_IH[3:0]                                 
	{0x3319, 0x2c},	//60 3319 2c  //Offset_scale_IV[3:0],Offset_scale_IH[3:0]                   
	{0x331a, 0x64},	//60 331a 64  //OH[10:4] Horizontal output size high bits                   
	{0x331b, 0x4b},	//60 331b 4b  //OV[10:4] Vertiacal output size high bits                    
	{0x331c, 0x00},	//60 331c 00  //OV[3:0],OH[3:0]                                             
	{0x331d, 0x4c},	//60 331d 4c  //Offset_scale_OV[3:0],Offset_scale_OH[3:0]                   
	{0x3302, 0x01},	//60 3302 01	//ISP_CTRL_2, bit[4]=Scale_en, bit[0]=UV_avg_en
	
	{SENSOR_TABLE_END, 0x00}
          
};     

static struct ov2675_reg video_list[] = {
//for video	
//Scale form UXGA
//@@ 1280x720
	{0x300e, 0x34},	//60 300e 34	//PLL Control 1                                               
	{0x3011, 0x00},	//60 3011 00  //Clock Rate Control                                          
	{0x3012, 0x00},	//60 3012 00  //Format Control                                              
	{0x302A, 0x04},	//60 302A 04  //VTS[15:8]                                                   
	{0x302B, 0xd4},	//60 302B d4  //VTS[7:0]                                                    
	{0x306f, 0x54},	//60 306f 54  //BLCF                                                        
                                                                                              
	{0x3020, 0x01},	//60 3020 01  //HS[15:8]                                                    
	{0x3021, 0x18},	//60 3021 18  //HS[7:0]                                                     
	{0x3022, 0x00},	//60 3022 00  //VS[15:8]                                                    
	{0x3023, 0x96},	//60 3023 0a  //VS[7:0]                                                     
	{0x3024, 0x06},	//60 3024 06  //HW[15:8]                                                    
	{0x3025, 0x58},	//60 3025 58  //HW[7:0]                                                     
	{0x3026, 0x04},	//60 3026 04  //VH[15:8]                                                    
	{0x3027, 0xbc},	//60 3027 bc  //VH[7:0]	                                                    
	{0x3088, 0x05},	//60 3088 06  //ISP_XOUT[15:8]                                              
	{0x3089, 0x00},	//60 3089 40  //ISP_XOUT[7:0]                                               
	{0x308a, 0x02},	//60 308a 04  //ISP_YOUT[15:8]                                              
	{0x308b, 0xd0},	//60 308b b0  //ISP_YOUT[7:0]                                               
	                                                                                            
	{0x3316, 0x64},	//60 3316 64  //Scale_IH[10:4] Scale horizontal input size high bits        
	{0x3317, 0x38},	//60 3317 4b  //Scale_IV[10:4] Scale vertical input size high bits          
	{0x3318, 0x40},	//60 3318 00  //Scale_IV[3:0],Scale_IH[3:0]                                 
	{0x3319, 0x2c},	//60 3319 2c  //Offset_scale_IV[3:0],Offset_scale_IH[3:0]                   
	{0x331a, 0x50},	//60 331a 64  //OH[10:4] Horizontal output size high bits                   
	{0x331b, 0x2d},	//60 331b 4b  //OV[10:4] Vertiacal output size high bits                    
	{0x331c, 0x00},	//60 331c 00  //OV[3:0],OH[3:0]                                             
	{0x331d, 0x4c},	//60 331d 4c  //Offset_scale_OV[3:0],Offset_scale_OH[3:0]                   
	{0x3302, 0x10},	//60 3302 01	//ISP_CTRL_2, bit[4]=Scale_en, bit[0]=UV_avg_en
	
	{SENSOR_TABLE_END, 0x00}
          
};     


#endif /* ifndef OV2675_REGS_H */
