cscope 15 $HOME/Desktop/PATCH-debug/bcmdhd -q 0000017408 0001864873
	@aiutils.c

27 
	~<bcm_cfg.h
>

28 
	~<ty≥defs.h
>

29 
	~<bcmdefs.h
>

30 
	~<o¶.h
>

31 
	~<bcmutûs.h
>

32 
	~<siutûs.h
>

33 
	~<hndsoc.h
>

34 
	~<sbchùc.h
>

35 
	~<pcicfg.h
>

37 
	~"siutûs_¥iv.h
"

39 
	#BCM47162_DMP
(Ë(0)

	)

40 
	#BCM5357_DMP
(Ë(0)

	)

41 
	#ªm≠_c‹eid
(
sih
, 
c‹eid
Ë(c‹eid)

	)

42 
	#ªm≠_c‹îev
(
sih
, 
c‹îev
Ë(c‹îev)

	)

46 
uöt32


47 
	$gë_îom_ít
(
si_t
 *
sih
, 
uöt32
 **
îom±r
, uöt32 
mask
, uöt32 
m©ch
)

49 
uöt32
 
ít
;

50 
uöt
 
öv
 = 0, 
nom
 = 0;

52 
TRUE
) {

53 
ít
 = 
	`R_REG
(
	`si_osh
(
sih
), *
îom±r
);

54 (*
îom±r
)++;

56 i‡(
mask
 == 0)

59 i‡((
ít
 & 
ER_VALID
) == 0) {

60 
öv
++;

64 i‡(
ít
 =(
ER_END
 | 
ER_VALID
))

67 i‡((
ít
 & 
mask
Ë=
m©ch
)

70 
nom
++;

73 
	`SI_VMSG
(("%s: Rëu∫ögÉ¡ 0x%08x\n", 
__FUNCTION__
, 
ít
));

74 i‡(
öv
 + 
nom
) {

75 
	`SI_VMSG
(("á·î %d invÆidánd %dÇ⁄-m©chögÉ¡rõs\n", 
öv
, 
nom
));

77  
ít
;

78 
	}
}

80 
uöt32


81 
	$gë_asd
(
si_t
 *
sih
, 
uöt32
 **
îom±r
, 
uöt
 
•
, uöà
ad
, uöà
°
, uöt32 *
addæ
, uöt32 *
addrh
,

82 
uöt32
 *
sizñ
, uöt32 *
sizeh
)

84 
uöt32
 
asd
, 
sz
, 
szd
;

86 
asd
 = 
	`gë_îom_ít
(
sih
, 
îom±r
, 
ER_VALID
, ER_VALID);

87 i‡(((
asd
 & 
ER_TAG1
Ë!
ER_ADD
) ||

88 (((
asd
 & 
AD_SP_MASK
Ë>> 
AD_SP_SHIFT
Ë!
•
) ||

89 ((
asd
 & 
AD_ST_MASK
Ë!
°
)) {

91 (*
îom±r
)--;

94 *
addæ
 = 
asd
 & 
AD_ADDR_MASK
;

95 i‡(
asd
 & 
AD_AG32
)

96 *
addrh
 = 
	`gë_îom_ít
(
sih
, 
îom±r
, 0, 0);

98 *
addrh
 = 0;

99 *
sizeh
 = 0;

100 
sz
 = 
asd
 & 
AD_SZ_MASK
;

101 i‡(
sz
 =
AD_SZ_SZD
) {

102 
szd
 = 
	`gë_îom_ít
(
sih
, 
îom±r
, 0, 0);

103 *
sizñ
 = 
szd
 & 
SD_SZ_MASK
;

104 i‡(
szd
 & 
SD_SG32
)

105 *
sizeh
 = 
	`gë_îom_ít
(
sih
, 
îom±r
, 0, 0);

107 *
sizñ
 = 
AD_SZ_BASE
 << (
sz
 >> 
AD_SZ_SHIFT
);

109 
	`SI_VMSG
((" SP %d,ád %d: st = %d, 0x%08x_0x%08x @ 0x%08x_0x%08x\n",

110 
•
, 
ad
, 
°
, *
sizeh
, *
sizñ
, *
addrh
, *
addæ
));

112  
asd
;

113 
	}
}

116 
	$ai_hwfixup
(
si_öfo_t
 *
sii
)

118 
	}
}

123 
	$ai_sˇn
(
si_t
 *
sih
, *
ªgs
, 
uöt
 
devid
)

125 
si_öfo_t
 *
sii
 = 
	`SI_INFO
(
sih
);

126 
chù¸egs_t
 *
cc
 = (chù¸egs_à*)
ªgs
;

127 
uöt32
 
îomba£
, *
îom±r
, *
îomlim
;

129 
îomba£
 = 
	`R_REG
(
sii
->
osh
, &
cc
->
îom±r
);

131 
	`BUSTYPE
(
sih
->
bu°y≥
)) {

132 
SI_BUS
:

133 
îom±r
 = (
uöt32
 *)
	`REG_MAP
(
îomba£
, 
SI_CORE_SIZE
);

136 
PCI_BUS
:

138 
sii
->
curwøp
 = (*)((
uöçå
)
ªgs
 + 
SI_CORE_SIZE
);

141 
	`OSL_PCI_WRITE_CONFIG
(
sii
->
osh
, 
PCI_BAR0_WIN
, 4, 
îomba£
);

142 
îom±r
 = 
ªgs
;

145 
SPI_BUS
:

146 
SDIO_BUS
:

147 
îom±r
 = (
uöt32
 *)(
uöçå
)
îomba£
;

150 
PCMCIA_BUS
:

152 
	`SI_ERROR
(("D⁄'àknow howÅÿdÿAXIÉnumîti⁄ o¿bu†%d\n", 
sih
->
bu°y≥
));

153 
	`ASSERT
(0);

156 
îomlim
 = 
îom±r
 + (
ER_REMAPCONTROL
 / (
uöt32
));

158 
	`SI_VMSG
(("ai_scan:Ñegs = 0x%p,Érombase = 0x%08x,Éromptr = 0x%p,Éromlim = 0x%p\n",

159 
ªgs
, 
îomba£
, 
îom±r
, 
îomlim
));

160 
îom±r
 < 
îomlim
) {

161 
uöt32
 
cü
, 
cib
, 
cid
, 
mfg
, 
¸ev
, 
nmw
, 
nsw
, 
nmp
, 
n•
;

162 
uöt32
 
mpd
, 
asd
, 
addæ
, 
addrh
, 
sizñ
, 
sizeh
;

163 
uöt
 
i
, 
j
, 
idx
;

164 
boﬁ
 
br
;

166 
br
 = 
FALSE
;

169 
cü
 = 
	`gë_îom_ít
(
sih
, &
îom±r
, 
ER_TAG
, 
ER_CI
);

170 i‡(
cü
 =(
ER_END
 | 
ER_VALID
)) {

171 
	`SI_VMSG
(("Found END o‡îomá·î %d c‹es\n", 
sii
->
numc‹es
));

172 
	`ai_hwfixup
(
sii
);

176 
cib
 = 
	`gë_îom_ít
(
sih
, &
îom±r
, 0, 0);

178 i‡((
cib
 & 
ER_TAG
Ë!
ER_CI
) {

179 
	`SI_ERROR
(("CIAÇot followed by CIB\n"));

180 
îr‹
;

183 
cid
 = (
cü
 & 
CIA_CID_MASK
Ë>> 
CIA_CID_SHIFT
;

184 
mfg
 = (
cü
 & 
CIA_MFG_MASK
Ë>> 
CIA_MFG_SHIFT
;

185 
¸ev
 = (
cib
 & 
CIB_REV_MASK
Ë>> 
CIB_REV_SHIFT
;

186 
nmw
 = (
cib
 & 
CIB_NMW_MASK
Ë>> 
CIB_NMW_SHIFT
;

187 
nsw
 = (
cib
 & 
CIB_NSW_MASK
Ë>> 
CIB_NSW_SHIFT
;

188 
nmp
 = (
cib
 & 
CIB_NMP_MASK
Ë>> 
CIB_NMP_SHIFT
;

189 
n•
 = (
cib
 & 
CIB_NSP_MASK
Ë>> 
CIB_NSP_SHIFT
;

191 #ifde‡
BCMDBG_SI


192 
	`SI_VMSG
(("Found component 0x%04x/0x%04xÑev %dátÉromáddr 0x%p, withÇmw = %d, "

194 
mfg
, 
cid
, 
¸ev
, 
îom±r
 - 1, 
nmw
, 
nsw
, 
nmp
, 
n•
));

196 
	`BCM_REFERENCE
(
¸ev
);

199 i‡(((
mfg
 =
MFGID_ARM
Ë&& (
cid
 =
DEF_AI_COMP
)Ë|| (
n•
 == 0))

201 i‡((
nmw
 + 
nsw
 == 0)) {

203 i‡(
cid
 =
OOB_ROUTER_CORE_ID
) {

204 
asd
 = 
	`gë_asd
(
sih
, &
îom±r
, 0, 0, 
AD_ST_SLAVE
,

205 &
addæ
, &
addrh
, &
sizñ
, &
sizeh
);

206 i‡(
asd
 != 0) {

207 
sii
->
oob_rouãr
 = 
addæ
;

210 i‡(
cid
 !
GMAC_COMMON_4706_CORE_ID
)

214 
idx
 = 
sii
->
numc‹es
;

216 
sii
->
cü
[
idx
] = cia;

217 
sii
->
cib
[
idx
] = cib;

218 
sii
->
c‹eid
[
idx
] = 
	`ªm≠_c‹eid
(
sih
, 
cid
);

220 
i
 = 0; i < 
nmp
; i++) {

221 
mpd
 = 
	`gë_îom_ít
(
sih
, &
îom±r
, 
ER_VALID
, ER_VALID);

222 i‡((
mpd
 & 
ER_TAG
Ë!
ER_MP
) {

223 
	`SI_ERROR
(("NŸÉnough MPÉ¡rõ†f‹ comp⁄íà0x%x\n", 
cid
));

224 
îr‹
;

226 
	`SI_VMSG
((" Ma°îÖ‹à%d, mp: %d id: %d\n", 
i
,

227 (
mpd
 & 
MPD_MP_MASK
Ë>> 
MPD_MP_SHIFT
,

228 (
mpd
 & 
MPD_MUI_MASK
Ë>> 
MPD_MUI_SHIFT
));

234 
asd
 = 
	`gë_asd
(
sih
, &
îom±r
, 0, 0, 
AD_ST_SLAVE
, &
addæ
, &
addrh
, &
sizñ
, &
sizeh
);

235 i‡(
asd
 == 0) {

238 
asd
 = 
	`gë_asd
(
sih
, &
îom±r
, 0, 0, 
AD_ST_BRIDGE
, &
addæ
, &
addrh
,

239 &
sizñ
, &
sizeh
);

240 i‡(
asd
 != 0)

241 
br
 = 
TRUE
;

243 i‡(
br
 =
TRUE
) {

246 i‡((
addrh
 !0Ë|| (
sizeh
 != 0) ||

247 (
sizñ
 !
SI_CORE_SIZE
)) {

248 
	`SI_ERROR
(("addrh = 0x%x\t sizeh = 0x%x\t size1 ="

249 "0x%x\n", 
addrh
, 
sizeh
, 
sizñ
));

250 
	`SI_ERROR
(("First Slave ASD for"

252 "(0x%08x)\n", 
cid
, 
asd
));

253 
îr‹
;

258 
sii
->
c‹esba
[
idx
] = 
addæ
;

259 
sii
->
c‹esba_size
[
idx
] = 
sizñ
;

261 
j
 = 1;

263 
asd
 = 
	`gë_asd
(
sih
, &
îom±r
, 0, 
j
, 
AD_ST_SLAVE
, &
addæ
, &
addrh
,

264 &
sizñ
, &
sizeh
);

265 i‡((
asd
 !0Ë&& (
j
 =1Ë&& (
sizñ
 =
SI_CORE_SIZE
)) {

266 
sii
->
c‹esba2
[
idx
] = 
addæ
;

267 
sii
->
c‹esba2_size
[
idx
] = 
sizñ
;

269 
j
++;

270 } 
asd
 != 0);

273 
i
 = 1; i < 
n•
; i++) {

274 
j
 = 0;

276 
asd
 = 
	`gë_asd
(
sih
, &
îom±r
, 
i
, 
j
, 
AD_ST_SLAVE
, &
addæ
, &
addrh
,

277 &
sizñ
, &
sizeh
);

279 i‡(
asd
 == 0)

281 
j
++;

283 i‡(
j
 == 0) {

284 
	`SI_ERROR
((" SP %d ha†nÿaddªs†des¸ùt‹s\n", 
i
));

285 
îr‹
;

290 
i
 = 0; i < 
nmw
; i++) {

291 
asd
 = 
	`gë_asd
(
sih
, &
îom±r
, 
i
, 0, 
AD_ST_MWRAP
, &
addæ
, &
addrh
,

292 &
sizñ
, &
sizeh
);

293 i‡(
asd
 == 0) {

294 
	`SI_ERROR
(("Missög des¸ùt‹ f‹ MW %d\n", 
i
));

295 
îr‹
;

297 i‡((
sizeh
 !0Ë|| (
sizñ
 !
SI_CORE_SIZE
)) {

298 
	`SI_ERROR
(("Ma°î wøµî %d i†nŸ 4KB\n", 
i
));

299 
îr‹
;

301 i‡(
i
 == 0)

302 
sii
->
wøpba
[
idx
] = 
addæ
;

306 
i
 = 0; i < 
nsw
; i++) {

307 
uöt
 
fwp
 = (
n•
 == 1) ? 0 : 1;

308 
asd
 = 
	`gë_asd
(
sih
, &
îom±r
, 
fwp
 + 
i
, 0, 
AD_ST_SWRAP
, &
addæ
, &
addrh
,

309 &
sizñ
, &
sizeh
);

310 i‡(
asd
 == 0) {

311 
	`SI_ERROR
(("Missög des¸ùt‹ f‹ SW %d\n", 
i
));

312 
îr‹
;

314 i‡((
sizeh
 !0Ë|| (
sizñ
 !
SI_CORE_SIZE
)) {

315 
	`SI_ERROR
(("Sœvêwøµî %d i†nŸ 4KB\n", 
i
));

316 
îr‹
;

318 i‡((
nmw
 =0Ë&& (
i
 == 0))

319 
sii
->
wøpba
[
idx
] = 
addæ
;

324 i‡(
br
)

328 
sii
->
numc‹es
++;

331 
	`SI_ERROR
(("ReachedÉnd ofÉrom without finding END"));

333 
îr‹
:

334 
sii
->
numc‹es
 = 0;

336 
	}
}

342 
	$ai_£tc‹eidx
(
si_t
 *
sih
, 
uöt
 
c‹eidx
)

344 
si_öfo_t
 *
sii
 = 
	`SI_INFO
(
sih
);

345 
uöt32
 
addr
, 
wøp
;

346 *
ªgs
;

348 i‡(
c‹eidx
 >
	`MIN
(
sii
->
numc‹es
, 
SI_MAXCORES
))

349  (
NULL
);

351 
addr
 = 
sii
->
c‹esba
[
c‹eidx
];

352 
wøp
 = 
sii
->
wøpba
[
c‹eidx
];

358 
	`ASSERT
((
sii
->
öå£«bÀd_‚
 =
NULL
Ë|| !(*(sii)->öå£«bÀd_‚)((sii)->
öå_¨g
));

360 
	`BUSTYPE
(
sih
->
bu°y≥
)) {

361 
SI_BUS
:

363 i‡(!
sii
->
ªgs
[
c‹eidx
]) {

364 
sii
->
ªgs
[
c‹eidx
] = 
	`REG_MAP
(
addr
, 
SI_CORE_SIZE
);

365 
	`ASSERT
(
	`GOODREGS
(
sii
->
ªgs
[
c‹eidx
]));

367 
sii
->
curm≠
 = 
ªgs
 = sii->ªgs[
c‹eidx
];

368 i‡(!
sii
->
wøµîs
[
c‹eidx
]) {

369 
sii
->
wøµîs
[
c‹eidx
] = 
	`REG_MAP
(
wøp
, 
SI_CORE_SIZE
);

370 
	`ASSERT
(
	`GOODREGS
(
sii
->
wøµîs
[
c‹eidx
]));

372 
sii
->
curwøp
 = sii->
wøµîs
[
c‹eidx
];

376 
SPI_BUS
:

377 
SDIO_BUS
:

378 
sii
->
curm≠
 = 
ªgs
 = (*)((
uöçå
)
addr
);

379 
sii
->
curwøp
 = (*)((
uöçå
)
wøp
);

382 
PCMCIA_BUS
:

384 
	`ASSERT
(0);

385 
ªgs
 = 
NULL
;

389 
sii
->
curm≠
 = 
ªgs
;

390 
sii
->
curidx
 = 
c‹eidx
;

392  
ªgs
;

393 
	}
}

396 
	$ai_c‹óddr•a˚X
(
si_t
 *
sih
, 
uöt
 
asidx
, 
uöt32
 *
addr
, uöt32 *
size
)

398 
si_öfo_t
 *
sii
 = 
	`SI_INFO
(
sih
);

399 
chù¸egs_t
 *
cc
 = 
NULL
;

400 
uöt32
 
îomba£
, *
îom±r
, *
îomlim
;

401 
uöt
 
i
, 
j
, 
cidx
;

402 
uöt32
 
cü
, 
cib
, 
nmp
, 
n•
;

403 
uöt32
 
asd
, 
addæ
, 
addrh
, 
sizñ
, 
sizeh
;

405 
i
 = 0; i < 
sii
->
numc‹es
; i++) {

406 i‡(
sii
->
c‹eid
[
i
] =
CC_CORE_ID
) {

407 
cc
 = (
chù¸egs_t
 *)
sii
->
ªgs
[
i
];

411 i‡(
cc
 =
NULL
)

412 
îr‹
;

414 
îomba£
 = 
	`R_REG
(
sii
->
osh
, &
cc
->
îom±r
);

415 
îom±r
 = (
uöt32
 *)
	`REG_MAP
(
îomba£
, 
SI_CORE_SIZE
);

416 
îomlim
 = 
îom±r
 + (
ER_REMAPCONTROL
 / (
uöt32
));

418 
cidx
 = 
sii
->
curidx
;

419 
cü
 = 
sii
->cü[
cidx
];

420 
cib
 = 
sii
->cib[
cidx
];

422 
nmp
 = (
cib
 & 
CIB_NMP_MASK
Ë>> 
CIB_NMP_SHIFT
;

423 
n•
 = (
cib
 & 
CIB_NSP_MASK
Ë>> 
CIB_NSP_SHIFT
;

426 
îom±r
 < 
îomlim
) {

427 i‡((
	`gë_îom_ít
(
sih
, &
îom±r
, 
ER_TAG
, 
ER_CI
Ë=
cü
) &&

428 (
	`gë_îom_ít
(
sih
, &
îom±r
, 0, 0Ë=
cib
)) {

434 
i
 = 0; i < 
nmp
; i++)

435 
	`gë_îom_ít
(
sih
, &
îom±r
, 
ER_VALID
, ER_VALID);

438 
asd
 = 
	`gë_asd
(
sih
, &
îom±r
, 0, 0, 
AD_ST_SLAVE
, &
addæ
, &
addrh
, &
sizñ
, &
sizeh
);

439 i‡(
asd
 == 0) {

441 
asd
 = 
	`gë_asd
(
sih
, &
îom±r
, 0, 0, 
AD_ST_BRIDGE
, &
addæ
, &
addrh
,

442 &
sizñ
, &
sizeh
);

445 
j
 = 1;

447 
asd
 = 
	`gë_asd
(
sih
, &
îom±r
, 0, 
j
, 
AD_ST_SLAVE
, &
addæ
, &
addrh
,

448 &
sizñ
, &
sizeh
);

449 
j
++;

450 } 
asd
 != 0);

453 
i
 = 1; i < 
n•
; i++) {

454 
j
 = 0;

456 
asd
 = 
	`gë_asd
(
sih
, &
îom±r
, 
i
, 
j
, 
AD_ST_SLAVE
, &
addæ
, &
addrh
,

457 &
sizñ
, &
sizeh
);

458 i‡(
asd
 == 0)

461 i‡(!
asidx
--) {

462 *
addr
 = 
addæ
;

463 *
size
 = 
sizñ
;

466 
j
++;

469 i‡(
j
 == 0) {

470 
	`SI_ERROR
((" SP %d ha†nÿaddªs†des¸ùt‹s\n", 
i
));

475 
îr‹
:

476 *
size
 = 0;

478 
	}
}

482 
	$ai_numaddr•a˚s
(
si_t
 *
sih
)

485 
	}
}

488 
uöt32


489 
	$ai_addr•a˚
(
si_t
 *
sih
, 
uöt
 
asidx
)

491 
si_öfo_t
 *
sii
;

492 
uöt
 
cidx
;

494 
sii
 = 
	`SI_INFO
(
sih
);

495 
cidx
 = 
sii
->
curidx
;

497 i‡(
asidx
 == 0)

498  
sii
->
c‹esba
[
cidx
];

499 i‡(
asidx
 == 1)

500  
sii
->
c‹esba2
[
cidx
];

502 
	`SI_ERROR
(("%s: NeedÅoÖarseÅheÉromágainÅo findáddr space %d\n",

503 
__FUNCTION__
, 
asidx
));

506 
	}
}

509 
uöt32


510 
	$ai_addr•a˚size
(
si_t
 *
sih
, 
uöt
 
asidx
)

512 
si_öfo_t
 *
sii
;

513 
uöt
 
cidx
;

515 
sii
 = 
	`SI_INFO
(
sih
);

516 
cidx
 = 
sii
->
curidx
;

518 i‡(
asidx
 == 0)

519  
sii
->
c‹esba_size
[
cidx
];

520 i‡(
asidx
 == 1)

521  
sii
->
c‹esba2_size
[
cidx
];

523 
	`SI_ERROR
(("%s: NeedÅoÖarseÅheÉromágainÅo findáddr space %d\n",

524 
__FUNCTION__
, 
asidx
));

527 
	}
}

529 
uöt


530 
	$ai_Êag
(
si_t
 *
sih
)

532 
si_öfo_t
 *
sii
;

533 
aidmp_t
 *
ai
;

535 
sii
 = 
	`SI_INFO
(
sih
);

536 i‡(
	`BCM47162_DMP
()) {

537 
	`SI_ERROR
(("%s: Aâem±ögÅÿªad MIPS DMPÑegi°î†⁄ 47162a0", 
__FUNCTION__
));

538  
sii
->
curidx
;

540 i‡(
	`BCM5357_DMP
()) {

541 
	`SI_ERROR
(("%s: Aâem±ögÅÿªad USB20H DMPÑegi°î†⁄ 5357b0\n", 
__FUNCTION__
));

542  
sii
->
curidx
;

544 
ai
 = 
sii
->
curwøp
;

546  (
	`R_REG
(
sii
->
osh
, &
ai
->
oob£louè30
) & 0x1f);

547 
	}
}

550 
	$ai_£töt
(
si_t
 *
sih
, 
siÊag
)

552 
	}
}

554 
uöt


555 
	$ai_wøp_ªg
(
si_t
 *
sih
, 
uöt32
 
off£t
, uöt32 
mask
, uöt32 
vÆ
)

557 
si_öfo_t
 *
sii
 = 
	`SI_INFO
(
sih
);

558 
uöt32
 *
m≠
 = (uöt32 *Ë
sii
->
curwøp
;

560 i‡(
mask
 || 
vÆ
) {

561 
uöt32
 
w
 = 
	`R_REG
(
sii
->
osh
, 
m≠
+(
off£t
/4));

562 
w
 &~
mask
;

563 
w
 |
vÆ
;

564 
	`W_REG
(
sii
->
osh
, 
m≠
+(
off£t
/4), 
vÆ
);

567  (
	`R_REG
(
sii
->
osh
, 
m≠
+(
off£t
/4)));

568 
	}
}

570 
uöt


571 
	$ai_c‹evíd‹
(
si_t
 *
sih
)

573 
si_öfo_t
 *
sii
;

574 
uöt32
 
cü
;

576 
sii
 = 
	`SI_INFO
(
sih
);

577 
cü
 = 
sii
->cü[sii->
curidx
];

578  ((
cü
 & 
CIA_MFG_MASK
Ë>> 
CIA_MFG_SHIFT
);

579 
	}
}

581 
uöt


582 
	$ai_c‹îev
(
si_t
 *
sih
)

584 
si_öfo_t
 *
sii
;

585 
uöt32
 
cib
;

587 
sii
 = 
	`SI_INFO
(
sih
);

588 
cib
 = 
sii
->cib[sii->
curidx
];

589  
	`ªm≠_c‹îev
(
sih
, (
cib
 & 
CIB_REV_MASK
Ë>> 
CIB_REV_SHIFT
);

590 
	}
}

592 
boﬁ


593 
	$ai_isc‹eup
(
si_t
 *
sih
)

595 
si_öfo_t
 *
sii
;

596 
aidmp_t
 *
ai
;

598 
sii
 = 
	`SI_INFO
(
sih
);

599 
ai
 = 
sii
->
curwøp
;

601  (((
	`R_REG
(
sii
->
osh
, &
ai
->
io˘æ
Ë& (
SICF_FGC
 | 
SICF_CLOCK_EN
)) == SICF_CLOCK_EN) &&

602 ((
	`R_REG
(
sii
->
osh
, &
ai
->
ª£t˘æ
Ë& 
AIRC_RESET
) == 0));

603 
	}
}

614 
uöt


615 
	$ai_c‹îeg
(
si_t
 *
sih
, 
uöt
 
c‹eidx
, uöà
ªgoff
, uöà
mask
, uöà
vÆ
)

617 
uöt
 
‹igidx
 = 0;

618 
uöt32
 *
r
 = 
NULL
;

619 
uöt
 
w
;

620 
uöt
 
öå_vÆ
 = 0;

621 
boﬁ
 
Á°
 = 
FALSE
;

622 
si_öfo_t
 *
sii
;

624 
sii
 = 
	`SI_INFO
(
sih
);

626 
	`ASSERT
(
	`GOODIDX
(
c‹eidx
));

627 
	`ASSERT
(
ªgoff
 < 
SI_CORE_SIZE
);

628 
	`ASSERT
((
vÆ
 & ~
mask
) == 0);

630 i‡(
c‹eidx
 >
SI_MAXCORES
)

633 i‡(
	`BUSTYPE
(
sih
->
bu°y≥
Ë=
SI_BUS
) {

635 
Á°
 = 
TRUE
;

637 i‡(!
sii
->
ªgs
[
c‹eidx
]) {

638 
sii
->
ªgs
[
c‹eidx
] = 
	`REG_MAP
(sii->
c‹esba
[coreidx],

639 
SI_CORE_SIZE
);

640 
	`ASSERT
(
	`GOODREGS
(
sii
->
ªgs
[
c‹eidx
]));

642 
r
 = (
uöt32
 *)((
uch¨
 *)
sii
->
ªgs
[
c‹eidx
] + 
ªgoff
);

643 } i‡(
	`BUSTYPE
(
sih
->
bu°y≥
Ë=
PCI_BUS
) {

646 i‡((
sii
->
c‹eid
[
c‹eidx
] =
CC_CORE_ID
Ë&& 
	`SI_FAST
(sii)) {

649 
Á°
 = 
TRUE
;

650 
r
 = (
uöt32
 *)((*)
sii
->
curm≠
 + 
PCI_16KB0_CCREGS_OFFSET
 + 
ªgoff
);

651 } i‡(
sii
->
pub
.
busc‹eidx
 =
c‹eidx
) {

655 
Á°
 = 
TRUE
;

656 i‡(
	`SI_FAST
(
sii
))

657 
r
 = (
uöt32
 *)((*)
sii
->
curm≠
 +

658 
PCI_16KB0_PCIREGS_OFFSET
 + 
ªgoff
);

660 
r
 = (
uöt32
 *)((*)
sii
->
curm≠
 +

661 ((
ªgoff
 >
SBCONFIGOFF
) ?

662 
PCI_BAR0_PCISBR_OFFSET
 : 
PCI_BAR0_PCIREGS_OFFSET
) +

663 
ªgoff
);

667 i‡(!
Á°
) {

668 
	`INTR_OFF
(
sii
, 
öå_vÆ
);

671 
‹igidx
 = 
	`si_c‹eidx
(&
sii
->
pub
);

674 
r
 = (
uöt32
*Ë((
uch¨
*Ë
	`ai_£tc‹eidx
(&
sii
->
pub
, 
c‹eidx
Ë+ 
ªgoff
);

676 
	`ASSERT
(
r
 !
NULL
);

679 i‡(
mask
 || 
vÆ
) {

680 
w
 = (
	`R_REG
(
sii
->
osh
, 
r
Ë& ~
mask
Ë| 
vÆ
;

681 
	`W_REG
(
sii
->
osh
, 
r
, 
w
);

685 
w
 = 
	`R_REG
(
sii
->
osh
, 
r
);

687 i‡(!
Á°
) {

689 i‡(
‹igidx
 !
c‹eidx
)

690 
	`ai_£tc‹eidx
(&
sii
->
pub
, 
‹igidx
);

692 
	`INTR_RESTORE
(
sii
, 
öå_vÆ
);

695  (
w
);

696 
	}
}

699 
	$ai_c‹e_dißbÀ
(
si_t
 *
sih
, 
uöt32
 
bôs
)

701 
si_öfo_t
 *
sii
;

702 vﬁ©ûê
uöt32
 
dummy
;

703 
uöt32
 
°©us
;

704 
aidmp_t
 *
ai
;

706 
sii
 = 
	`SI_INFO
(
sih
);

708 
	`ASSERT
(
	`GOODREGS
(
sii
->
curwøp
));

709 
ai
 = 
sii
->
curwøp
;

712 i‡(
	`R_REG
(
sii
->
osh
, &
ai
->
ª£t˘æ
Ë& 
AIRC_RESET
)

716 
	`SPINWAIT
(((
°©us
 = 
	`R_REG
(
sii
->
osh
, &
ai
->
ª£t°©us
)) != 0), 300);

719 i‡(
°©us
 != 0) {

722 
	`SPINWAIT
(((
°©us
 = 
	`R_REG
(
sii
->
osh
, &
ai
->
ª£t°©us
)) != 0), 10000);

727 
	`W_REG
(
sii
->
osh
, &
ai
->
io˘æ
, 
bôs
);

728 
dummy
 = 
	`R_REG
(
sii
->
osh
, &
ai
->
io˘æ
);

729 
	`BCM_REFERENCE
(
dummy
);

730 
	`OSL_DELAY
(10);

732 
	`W_REG
(
sii
->
osh
, &
ai
->
ª£t˘æ
, 
AIRC_RESET
);

733 
dummy
 = 
	`R_REG
(
sii
->
osh
, &
ai
->
ª£t˘æ
);

734 
	`BCM_REFERENCE
(
dummy
);

735 
	`OSL_DELAY
(1);

736 
	}
}

744 
	$ai_c‹e_ª£t
(
si_t
 *
sih
, 
uöt32
 
bôs
, uöt32 
ª£tbôs
)

746 
si_öfo_t
 *
sii
;

747 
aidmp_t
 *
ai
;

748 vﬁ©ûê
uöt32
 
dummy
;

750 
sii
 = 
	`SI_INFO
(
sih
);

751 
	`ASSERT
(
	`GOODREGS
(
sii
->
curwøp
));

752 
ai
 = 
sii
->
curwøp
;

757 
	`ai_c‹e_dißbÀ
(
sih
, (
bôs
 | 
ª£tbôs
));

762 
	`W_REG
(
sii
->
osh
, &
ai
->
io˘æ
, (
bôs
 | 
SICF_FGC
 | 
SICF_CLOCK_EN
));

763 
dummy
 = 
	`R_REG
(
sii
->
osh
, &
ai
->
io˘æ
);

764 
	`BCM_REFERENCE
(
dummy
);

766 
	`W_REG
(
sii
->
osh
, &
ai
->
ª£t˘æ
, 0);

767 
dummy
 = 
	`R_REG
(
sii
->
osh
, &
ai
->
ª£t˘æ
);

768 
	`BCM_REFERENCE
(
dummy
);

769 
	`OSL_DELAY
(1);

771 
	`W_REG
(
sii
->
osh
, &
ai
->
io˘æ
, (
bôs
 | 
SICF_CLOCK_EN
));

772 
dummy
 = 
	`R_REG
(
sii
->
osh
, &
ai
->
io˘æ
);

773 
	`BCM_REFERENCE
(
dummy
);

774 
	`OSL_DELAY
(1);

775 
	}
}

778 
	$ai_c‹e_cÊags_wo
(
si_t
 *
sih
, 
uöt32
 
mask
, uöt32 
vÆ
)

780 
si_öfo_t
 *
sii
;

781 
aidmp_t
 *
ai
;

782 
uöt32
 
w
;

784 
sii
 = 
	`SI_INFO
(
sih
);

786 i‡(
	`BCM47162_DMP
()) {

787 
	`SI_ERROR
(("%s: Accessing MIPS DMPÑegister (ioctrl) on 47162a0",

788 
__FUNCTION__
));

791 i‡(
	`BCM5357_DMP
()) {

792 
	`SI_ERROR
(("%s: Accessing USB20H DMPÑegister (ioctrl) on 5357\n",

793 
__FUNCTION__
));

797 
	`ASSERT
(
	`GOODREGS
(
sii
->
curwøp
));

798 
ai
 = 
sii
->
curwøp
;

800 
	`ASSERT
((
vÆ
 & ~
mask
) == 0);

802 i‡(
mask
 || 
vÆ
) {

803 
w
 = ((
	`R_REG
(
sii
->
osh
, &
ai
->
io˘æ
Ë& ~
mask
Ë| 
vÆ
);

804 
	`W_REG
(
sii
->
osh
, &
ai
->
io˘æ
, 
w
);

806 
	}
}

808 
uöt32


809 
	$ai_c‹e_cÊags
(
si_t
 *
sih
, 
uöt32
 
mask
, uöt32 
vÆ
)

811 
si_öfo_t
 *
sii
;

812 
aidmp_t
 *
ai
;

813 
uöt32
 
w
;

815 
sii
 = 
	`SI_INFO
(
sih
);

816 i‡(
	`BCM47162_DMP
()) {

817 
	`SI_ERROR
(("%s: Accessing MIPS DMPÑegister (ioctrl) on 47162a0",

818 
__FUNCTION__
));

821 i‡(
	`BCM5357_DMP
()) {

822 
	`SI_ERROR
(("%s: Accessing USB20H DMPÑegister (ioctrl) on 5357\n",

823 
__FUNCTION__
));

827 
	`ASSERT
(
	`GOODREGS
(
sii
->
curwøp
));

828 
ai
 = 
sii
->
curwøp
;

830 
	`ASSERT
((
vÆ
 & ~
mask
) == 0);

832 i‡(
mask
 || 
vÆ
) {

833 
w
 = ((
	`R_REG
(
sii
->
osh
, &
ai
->
io˘æ
Ë& ~
mask
Ë| 
vÆ
);

834 
	`W_REG
(
sii
->
osh
, &
ai
->
io˘æ
, 
w
);

837  
	`R_REG
(
sii
->
osh
, &
ai
->
io˘æ
);

838 
	}
}

840 
uöt32


841 
	$ai_c‹e_sÊags
(
si_t
 *
sih
, 
uöt32
 
mask
, uöt32 
vÆ
)

843 
si_öfo_t
 *
sii
;

844 
aidmp_t
 *
ai
;

845 
uöt32
 
w
;

847 
sii
 = 
	`SI_INFO
(
sih
);

848 i‡(
	`BCM47162_DMP
()) {

849 
	`SI_ERROR
(("%s: Accessing MIPS DMPÑegister (iostatus) on 47162a0",

850 
__FUNCTION__
));

853 i‡(
	`BCM5357_DMP
()) {

854 
	`SI_ERROR
(("%s: Accessing USB20H DMPÑegister (iostatus) on 5357\n",

855 
__FUNCTION__
));

859 
	`ASSERT
(
	`GOODREGS
(
sii
->
curwøp
));

860 
ai
 = 
sii
->
curwøp
;

862 
	`ASSERT
((
vÆ
 & ~
mask
) == 0);

863 
	`ASSERT
((
mask
 & ~
SISF_CORE_BITS
) == 0);

865 i‡(
mask
 || 
vÆ
) {

866 
w
 = ((
	`R_REG
(
sii
->
osh
, &
ai
->
io°©us
Ë& ~
mask
Ë| 
vÆ
);

867 
	`W_REG
(
sii
->
osh
, &
ai
->
io°©us
, 
w
);

870  
	`R_REG
(
sii
->
osh
, &
ai
->
io°©us
);

871 
	}
}

	@bcmevent.c

26 
	~<ty≥defs.h
>

27 
	~<bcmutûs.h
>

28 
	~<¥Ÿo/ëhî√t.h
>

29 
	~<¥Ÿo/bcmëh.h
>

30 
	~<¥Ÿo/bcmevít.h
>

32 #i‡
WLC_E_LAST
 != 107

36 c⁄° 
bcmevít_«me_t
 
	gbcmevít_«mes
[] = {

37 { 
WLC_E_SET_SSID
, "SET_SSID" },

38 { 
WLC_E_JOIN
, "JOIN" },

39 { 
WLC_E_START
, "START" },

40 { 
WLC_E_AUTH
, "AUTH" },

41 { 
WLC_E_AUTH_IND
, "AUTH_IND" },

42 { 
WLC_E_DEAUTH
, "DEAUTH" },

43 { 
WLC_E_DEAUTH_IND
, "DEAUTH_IND" },

44 { 
WLC_E_ASSOC
, "ASSOC" },

45 { 
WLC_E_ASSOC_IND
, "ASSOC_IND" },

46 { 
WLC_E_REASSOC
, "REASSOC" },

47 { 
WLC_E_REASSOC_IND
, "REASSOC_IND" },

48 { 
WLC_E_DISASSOC
, "DISASSOC" },

49 { 
WLC_E_DISASSOC_IND
, "DISASSOC_IND" },

50 { 
WLC_E_QUIET_START
, "START_QUIET" },

51 { 
WLC_E_QUIET_END
, "END_QUIET" },

52 { 
WLC_E_BEACON_RX
, "BEACON_RX" },

53 { 
WLC_E_LINK
, "LINK" },

54 { 
WLC_E_MIC_ERROR
, "MIC_ERROR" },

55 { 
WLC_E_NDIS_LINK
, "NDIS_LINK" },

56 { 
WLC_E_ROAM
, "ROAM" },

57 { 
WLC_E_TXFAIL
, "TXFAIL" },

58 { 
WLC_E_PMKID_CACHE
, "PMKID_CACHE" },

59 { 
WLC_E_RETROGRADE_TSF
, "RETROGRADE_TSF" },

60 { 
WLC_E_PRUNE
, "PRUNE" },

61 { 
WLC_E_AUTOAUTH
, "AUTOAUTH" },

62 { 
WLC_E_EAPOL_MSG
, "EAPOL_MSG" },

63 { 
WLC_E_SCAN_COMPLETE
, "SCAN_COMPLETE" },

64 { 
WLC_E_ADDTS_IND
, "ADDTS_IND" },

65 { 
WLC_E_DELTS_IND
, "DELTS_IND" },

66 { 
WLC_E_BCNSENT_IND
, "BCNSENT_IND" },

67 { 
WLC_E_BCNRX_MSG
, "BCNRX_MSG" },

68 { 
WLC_E_BCNLOST_MSG
, "BCNLOST_IND" },

69 { 
WLC_E_ROAM_PREP
, "ROAM_PREP" },

70 { 
WLC_E_PFN_NET_FOUND
, "PFNFOUND_IND" },

71 { 
WLC_E_PFN_NET_LOST
, "PFNLOST_IND" },

72 #i‡
deföed
(
IBSS_PEER_DISCOVERY_EVENT
)

73 { 
WLC_E_IBSS_ASSOC
, "IBSS_ASSOC" },

75 { 
WLC_E_RADIO
, "RADIO" },

76 { 
WLC_E_PSM_WATCHDOG
, "PSM_WATCHDOG" },

77 { 
WLC_E_PROBREQ_MSG
, "PROBE_REQ_MSG" },

78 { 
WLC_E_SCAN_CONFIRM_IND
, "SCAN_CONFIRM_IND" },

79 { 
WLC_E_PSK_SUP
, "PSK_SUP" },

80 { 
WLC_E_COUNTRY_CODE_CHANGED
, "CNTRYCODE_IND" },

81 { 
WLC_E_EXCEEDED_MEDIUM_TIME
, "EXCEEDED_MEDIUM_TIME" },

82 { 
WLC_E_ICV_ERROR
, "ICV_ERROR" },

83 { 
WLC_E_UNICAST_DECODE_ERROR
, "UNICAST_DECODE_ERROR" },

84 { 
WLC_E_MULTICAST_DECODE_ERROR
, "MULTICAST_DECODE_ERROR" },

85 { 
WLC_E_TRACE
, "TRACE" },

86 #ifde‡
WLBTAMP


87 { 
WLC_E_BTA_HCI_EVENT
, "BTA_HCI_EVENT" },

89 { 
WLC_E_IF
, "IF" },

90 #ifde‡
WLP2P


91 { 
WLC_E_P2P_DISC_LISTEN_COMPLETE
, "WLC_E_P2P_DISC_LISTEN_COMPLETE" },

93 { 
WLC_E_RSSI
, "RSSI" },

94 { 
WLC_E_PFN_SCAN_COMPLETE
, "SCAN_COMPLETE" },

95 { 
WLC_E_EXTLOG_MSG
, "EXTERNAL LOG MESSAGE" },

96 #ifde‡
WIFI_ACT_FRAME


97 { 
WLC_E_ACTION_FRAME
, "ACTION_FRAME" },

98 { 
WLC_E_ACTION_FRAME_RX
, "ACTION_FRAME_RX" },

99 { 
WLC_E_ACTION_FRAME_COMPLETE
, "ACTION_FRAME_COMPLETE" },

101 #i‡0 && (
NDISVER
 >= 0x0620)

102 { 
WLC_E_PRE_ASSOC_IND
, "ASSOC_RECV" },

103 { 
WLC_E_PRE_REASSOC_IND
, "REASSOC_RECV" },

104 { 
WLC_E_CHANNEL_ADOPTED
, "CHANNEL_ADOPTED" },

105 { 
WLC_E_AP_STARTED
, "AP_STARTED" },

106 { 
WLC_E_DFS_AP_STOP
, "DFS_AP_STOP" },

107 { 
WLC_E_DFS_AP_RESUME
, "DFS_AP_RESUME" },

108 { 
WLC_E_ASSOC_IND_NDIS
, "ASSOC_IND_NDIS"},

109 { 
WLC_E_REASSOC_IND_NDIS
, "REASSOC_IND_NDIS"},

110 { 
WLC_E_ACTION_FRAME_RX_NDIS
, "WLC_E_ACTION_FRAME_RX_NDIS" },

111 { 
WLC_E_AUTH_REQ
, "WLC_E_AUTH_REQ" },

113 { 
WLC_E_ESCAN_RESULT
, "WLC_E_ESCAN_RESULT" },

114 { 
WLC_E_ACTION_FRAME_OFF_CHAN_COMPLETE
, "WLC_E_AF_OFF_CHAN_COMPLETE" },

115 #ifde‡
WLP2P


116 { 
WLC_E_PROBRESP_MSG
, "PROBE_RESP_MSG" },

117 { 
WLC_E_P2P_PROBREQ_MSG
, "P2P PROBE_REQ_MSG" },

119 #ifde‡
PROP_TXSTATUS


120 { 
WLC_E_FIFO_CREDIT_MAP
, "FIFO_CREDIT_MAP" },

122 { 
WLC_E_WAKE_EVENT
, "WAKE_EVENT" },

123 { 
WLC_E_DCS_REQUEST
, "DCS_REQUEST" },

124 { 
WLC_E_RM_COMPLETE
, "RM_COMPLETE" },

125 #ifde‡
WLMEDIA_HTSF


126 { 
WLC_E_HTSFSYNC
, "HTSF_SYNC_EVENT" },

128 { 
WLC_E_OVERLAY_REQ
, "OVERLAY_REQ_EVENT" },

129 { 
WLC_E_CSA_COMPLETE_IND
, "WLC_E_CSA_COMPLETE_IND"},

130 { 
WLC_E_EXCESS_PM_WAKE_EVENT
, "EXCESS_PM_WAKE_EVENT" },

131 { 
WLC_E_PFN_SCAN_NONE
, "PFN_SCAN_NONE" },

132 { 
WLC_E_PFN_SCAN_ALLGONE
, "PFN_SCAN_ALLGONE" },

133 #ifde‡
SOFTAP


134 { 
WLC_E_GTK_PLUMBED
, "GTK_PLUMBED" },

136 { 
WLC_E_ASSOC_REQ_IE
, "ASSOC_REQ_IE" },

137 { 
WLC_E_ASSOC_RESP_IE
, "ASSOC_RESP_IE" },

138 { 
WLC_E_ACTION_FRAME_RX_NDIS
, "WLC_E_ACTION_FRAME_RX_NDIS" },

139 #ifde‡
WLTDLS


140 { 
WLC_E_TDLS_PEER_EVENT
, "TDLS_PEER_EVENT" },

142 { 
WLC_E_SERVICE_FOUND
, "SERVICE_FOUND" },

143 { 
WLC_E_P2PO_ADD_DEVICE
, "P2PO_DEV_FOUND" },

144 { 
WLC_E_P2PO_DEL_DEVICE
, "P2PO_DEV_LOST" },

147 c⁄° 
	gbcmevít_«mes_size
 = 
ARRAYSIZE
(
bcmevít_«mes
);

	@bcmsdh.c

34 
	~<ty≥defs.h
>

35 
	~<bcmdevs.h
>

36 
	~<bcmídün.h
>

37 
	~<bcmutûs.h
>

38 
	~<hndsoc.h
>

39 
	~<siutûs.h
>

40 
	~<o¶.h
>

42 
	~<bcmsdh.h
>

43 
	~<bcmsdbus.h
>

44 
	~<sbsdio.h
>

46 
	~<sdio.h
>

48 
	#SDIOH_API_ACCESS_RETRY_LIMIT
 2

	)

49 c⁄° 
uöt
 
	gbcmsdh_msgÀvñ
 = 
BCMSDH_ERROR_VAL
;

54 
	sbcmsdh_öfo


56 
boﬁ
 
	möô_suc˚ss
;

57 *
	msdioh
;

58 
uöt32
 
	mvídevid
;

59 
o¶_t
 *
	mosh
;

60 
boﬁ
 
	mªgÁû
;

61 
uöt32
 
	msbwad
;

64 
bcmsdh_öfo_t
 * 
	gl_bcmsdh
 = 
NULL
;

66 #i‡
deföed
(
OOB_INTR_ONLY
Ë&& deföed(
HW_OOB
)

68 
sdioh_íabÀ_hw_oob_öå
(*
sdioh
, 
boﬁ
 
íabÀ
);

71 
	$bcmsdh_íabÀ_hw_oob_öå
(
bcmsdh_öfo_t
 *
sdh
, 
boﬁ
 
íabÀ
)

73 
	`sdioh_íabÀ_hw_oob_öå
(
sdh
->
sdioh
, 
íabÀ
);

74 
	}
}

86 
bcmsdh_öfo_t
 *

87 
	$bcmsdh_©èch
(
o¶_t
 *
osh
, *
cfghdl
, **
ªgsva
, 
uöt
 
úq
)

89 
bcmsdh_öfo_t
 *
bcmsdh
;

91 i‡((
bcmsdh
 = (
bcmsdh_öfo_t
 *)
	`MALLOC
(
osh
, (bcmsdh_öfo_t))Ë=
NULL
) {

92 
	`BCMSDH_ERROR
(("bcmsdh_©èch: ouào‡mem‹y, mÆlo˚d %d byãs\n", 
	`MALLOCED
(
osh
)));

93  
NULL
;

95 
	`bzîo
((*)
bcmsdh
, (
bcmsdh_öfo_t
));

98 
l_bcmsdh
 = 
bcmsdh
;

100 i‡(!(
bcmsdh
->
sdioh
 = 
	`sdioh_©èch
(
osh
, 
cfghdl
, 
úq
))) {

101 
	`bcmsdh_dëach
(
osh
, 
bcmsdh
);

102  
NULL
;

105 
bcmsdh
->
osh
 = osh;

106 
bcmsdh
->
öô_suc˚ss
 = 
TRUE
;

108 *
ªgsva
 = (
uöt32
 *)
SI_ENUM_BASE
;

111 
bcmsdh
->
sbwad
 = 
SI_ENUM_BASE
;

112  
bcmsdh
;

113 
	}
}

116 
	$bcmsdh_dëach
(
o¶_t
 *
osh
, *
sdh
)

118 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

120 i‡(
bcmsdh
 !
NULL
) {

121 i‡(
bcmsdh
->
sdioh
) {

122 
	`sdioh_dëach
(
osh
, 
bcmsdh
->
sdioh
);

123 
bcmsdh
->
sdioh
 = 
NULL
;

125 
	`MFREE
(
osh
, 
bcmsdh
, (
bcmsdh_öfo_t
));

128 
l_bcmsdh
 = 
NULL
;

130 
	}
}

133 
	$bcmsdh_iov¨_›
(*
sdh
, c⁄° *
«me
,

134 *
∑øms
, 
∂í
, *
¨g
, 
Àn
, 
boﬁ
 
£t
)

136 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

137  
	`sdioh_iov¨_›
(
bcmsdh
->
sdioh
, 
«me
, 
∑øms
, 
∂í
, 
¨g
, 
Àn
, 
£t
);

138 
	}
}

140 
boﬁ


141 
	$bcmsdh_öå_quîy
(*
sdh
)

143 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

144 
SDIOH_API_RC
 
°©us
;

145 
boﬁ
 
⁄
;

147 
	`ASSERT
(
bcmsdh
);

148 
°©us
 = 
	`sdioh_öãºu±_quîy
(
bcmsdh
->
sdioh
, &
⁄
);

149 i‡(
	`SDIOH_API_SUCCESS
(
°©us
))

150  
FALSE
;

152  
⁄
;

153 
	}
}

156 
	$bcmsdh_öå_íabÀ
(*
sdh
)

158 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

159 
SDIOH_API_RC
 
°©us
;

160 
	`ASSERT
(
bcmsdh
);

162 
°©us
 = 
	`sdioh_öãºu±_£t
(
bcmsdh
->
sdioh
, 
TRUE
);

163  (
	`SDIOH_API_SUCCESS
(
°©us
Ë? 0 : 
BCME_ERROR
);

164 
	}
}

167 
	$bcmsdh_öå_dißbÀ
(*
sdh
)

169 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

170 
SDIOH_API_RC
 
°©us
;

171 
	`ASSERT
(
bcmsdh
);

173 
°©us
 = 
	`sdioh_öãºu±_£t
(
bcmsdh
->
sdioh
, 
FALSE
);

174  (
	`SDIOH_API_SUCCESS
(
°©us
Ë? 0 : 
BCME_ERROR
);

175 
	}
}

178 
	$bcmsdh_öå_ªg
(*
sdh
, 
bcmsdh_cb_‚_t
 
‚
, *
¨gh
)

180 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

181 
SDIOH_API_RC
 
°©us
;

182 
	`ASSERT
(
bcmsdh
);

184 
°©us
 = 
	`sdioh_öãºu±_ªgi°î
(
bcmsdh
->
sdioh
, 
‚
, 
¨gh
);

185  (
	`SDIOH_API_SUCCESS
(
°©us
Ë? 0 : 
BCME_ERROR
);

186 
	}
}

189 
	$bcmsdh_öå_dîeg
(*
sdh
)

191 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

192 
SDIOH_API_RC
 
°©us
;

193 
	`ASSERT
(
bcmsdh
);

195 
°©us
 = 
	`sdioh_öãºu±_dîegi°î
(
bcmsdh
->
sdioh
);

196  (
	`SDIOH_API_SUCCESS
(
°©us
Ë? 0 : 
BCME_ERROR
);

197 
	}
}

199 #i‡
deföed
(
DHD_DEBUG
)

200 
boﬁ


201 
	$bcmsdh_öå_≥ndög
(*
sdh
)

203 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

205 
	`ASSERT
(
sdh
);

206  
	`sdioh_öãºu±_≥ndög
(
bcmsdh
->
sdioh
);

207 
	}
}

212 
	$bcmsdh_devªmove_ªg
(*
sdh
, 
bcmsdh_cb_‚_t
 
‚
, *
¨gh
)

214 
	`ASSERT
(
sdh
);

217  
BCME_UNSUPPORTED
;

218 
	}
}

228 
uöt8


229 
	$bcmsdh_cfg_ªad
(*
sdh
, 
uöt
 
‚c_num
, 
uöt32
 
addr
, *
îr
)

231 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

232 
SDIOH_API_RC
 
°©us
;

233 #ifde‡
SDIOH_API_ACCESS_RETRY_LIMIT


234 
öt32
 
ªåy
 = 0;

236 
uöt8
 
d©a
 = 0;

238 i‡(!
bcmsdh
)

239 
bcmsdh
 = 
l_bcmsdh
;

241 
	`ASSERT
(
bcmsdh
->
öô_suc˚ss
);

243 #ifde‡
SDIOH_API_ACCESS_RETRY_LIMIT


245 i‡(
ªåy
)

246 
	`OSL_DELAY
(1000);

248 
°©us
 = 
	`sdioh_cfg_ªad
(
bcmsdh
->
sdioh
, 
‚c_num
, 
addr
, (
uöt8
 *)&
d©a
);

249 #ifde‡
SDIOH_API_ACCESS_RETRY_LIMIT


250 } !
	`SDIOH_API_SUCCESS
(
°©us
Ë&& (
ªåy
++ < 
SDIOH_API_ACCESS_RETRY_LIMIT
));

252 i‡(
îr
)

253 *
îr
 = (
	`SDIOH_API_SUCCESS
(
°©us
Ë? 0 : 
BCME_SDIO_ERROR
);

255 
	`BCMSDH_INFO
(("%s:fu¿%d,ádd∏0x%x, uöt8d©®0x%x\n", 
__FUNCTION__
,

256 
‚c_num
, 
addr
, 
d©a
));

258  
d©a
;

259 
	}
}

262 
	$bcmsdh_cfg_wrôe
(*
sdh
, 
uöt
 
‚c_num
, 
uöt32
 
addr
, 
uöt8
 
d©a
, *
îr
)

264 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

265 
SDIOH_API_RC
 
°©us
;

266 #ifde‡
SDIOH_API_ACCESS_RETRY_LIMIT


267 
öt32
 
ªåy
 = 0;

270 i‡(!
bcmsdh
)

271 
bcmsdh
 = 
l_bcmsdh
;

273 
	`ASSERT
(
bcmsdh
->
öô_suc˚ss
);

275 #ifde‡
SDIOH_API_ACCESS_RETRY_LIMIT


277 i‡(
ªåy
)

278 
	`OSL_DELAY
(1000);

280 
°©us
 = 
	`sdioh_cfg_wrôe
(
bcmsdh
->
sdioh
, 
‚c_num
, 
addr
, (
uöt8
 *)&
d©a
);

281 #ifde‡
SDIOH_API_ACCESS_RETRY_LIMIT


282 } !
	`SDIOH_API_SUCCESS
(
°©us
Ë&& (
ªåy
++ < 
SDIOH_API_ACCESS_RETRY_LIMIT
));

284 i‡(
îr
)

285 *
îr
 = 
	`SDIOH_API_SUCCESS
(
°©us
Ë? 0 : 
BCME_SDIO_ERROR
;

287 
	`BCMSDH_INFO
(("%s:fu¿%d,ádd∏0x%x, uöt8d©®0x%x\n", 
__FUNCTION__
,

288 
‚c_num
, 
addr
, 
d©a
));

289 
	}
}

291 
uöt32


292 
	$bcmsdh_cfg_ªad_w‹d
(*
sdh
, 
uöt
 
‚c_num
, 
uöt32
 
addr
, *
îr
)

294 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

295 
SDIOH_API_RC
 
°©us
;

296 
uöt32
 
d©a
 = 0;

298 i‡(!
bcmsdh
)

299 
bcmsdh
 = 
l_bcmsdh
;

301 
	`ASSERT
(
bcmsdh
->
öô_suc˚ss
);

303 
°©us
 = 
	`sdioh_ªque°_w‹d
(
bcmsdh
->
sdioh
, 
SDIOH_CMD_TYPE_NORMAL
, 
SDIOH_READ
, 
‚c_num
,

304 
addr
, &
d©a
, 4);

306 i‡(
îr
)

307 *
îr
 = (
	`SDIOH_API_SUCCESS
(
°©us
Ë? 0 : 
BCME_SDIO_ERROR
);

309 
	`BCMSDH_INFO
(("%s:fu¿%d,ádd∏0x%x, uöt32d©®0x%x\n", 
__FUNCTION__
,

310 
‚c_num
, 
addr
, 
d©a
));

312  
d©a
;

313 
	}
}

316 
	$bcmsdh_cfg_wrôe_w‹d
(*
sdh
, 
uöt
 
‚c_num
, 
uöt32
 
addr
, uöt32 
d©a
, *
îr
)

318 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

319 
SDIOH_API_RC
 
°©us
;

321 i‡(!
bcmsdh
)

322 
bcmsdh
 = 
l_bcmsdh
;

324 
	`ASSERT
(
bcmsdh
->
öô_suc˚ss
);

326 
°©us
 = 
	`sdioh_ªque°_w‹d
(
bcmsdh
->
sdioh
, 
SDIOH_CMD_TYPE_NORMAL
, 
SDIOH_WRITE
, 
‚c_num
,

327 
addr
, &
d©a
, 4);

329 i‡(
îr
)

330 *
îr
 = (
	`SDIOH_API_SUCCESS
(
°©us
Ë? 0 : 
BCME_SDIO_ERROR
);

332 
	`BCMSDH_INFO
(("%s:fu¿%d,ádd∏0x%x, uöt32d©®0x%x\n", 
__FUNCTION__
, 
‚c_num
,

333 
addr
, 
d©a
));

334 
	}
}

338 
	$bcmsdh_cis_ªad
(*
sdh
, 
uöt
 
func
, 
uöt8
 *
cis
, uöà
Àngth
)

340 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

341 
SDIOH_API_RC
 
°©us
;

343 
uöt8
 *
tmp_buf
, *
tmp_±r
;

344 
uöt8
 *
±r
;

345 
boﬁ
 
ascii
 = 
func
 & ~0xf;

346 
func
 &= 0x7;

348 i‡(!
bcmsdh
)

349 
bcmsdh
 = 
l_bcmsdh
;

351 
	`ASSERT
(
bcmsdh
->
öô_suc˚ss
);

352 
	`ASSERT
(
cis
);

353 
	`ASSERT
(
Àngth
 <
SBSDIO_CIS_SIZE_LIMIT
);

355 
°©us
 = 
	`sdioh_cis_ªad
(
bcmsdh
->
sdioh
, 
func
, 
cis
, 
Àngth
);

357 i‡(
ascii
) {

359 i‡((
tmp_buf
 = (
uöt8
 *)
	`MALLOC
(
bcmsdh
->
osh
, 
Àngth
)Ë=
NULL
) {

360 
	`BCMSDH_ERROR
(("%s: ouào‡mem‹y\n", 
__FUNCTION__
));

361  
BCME_NOMEM
;

363 
	`bc›y
(
cis
, 
tmp_buf
, 
Àngth
);

364 
tmp_±r
 = 
tmp_buf
, 
±r
 = 
cis
;Öå < (ci†+ 
Àngth
 - 4);Åmp_ptr++) {

365 
±r
 +
	`¢¥ötf
((*Ìå, (
cis
 + 
Àngth
 -Ötr - 4),

366 "%.2x ", *
tmp_±r
 & 0xff);

367 i‡((((
tmp_±r
 - 
tmp_buf
) + 1) & 0xf) == 0)

368 
±r
 +
	`¢¥ötf
((*Ìå, (
cis
 + 
Àngth
 -Ötr -4), "\n");

370 
	`MFREE
(
bcmsdh
->
osh
, 
tmp_buf
, 
Àngth
);

373  (
	`SDIOH_API_SUCCESS
(
°©us
Ë? 0 : 
BCME_ERROR
);

374 
	}
}

378 
	$bcmsdhsdio_£t_sbaddr_wödow
(*
sdh
, 
uöt32
 
addªss
, 
boﬁ
 
f‹˚_£t
)

380 
îr
 = 0;

381 
uöt
 
b¨0
 = 
addªss
 & ~
SBSDIO_SB_OFT_ADDR_MASK
;

382 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

384 i‡(
b¨0
 !
bcmsdh
->
sbwad
 || 
f‹˚_£t
) {

385 
	`bcmsdh_cfg_wrôe
(
bcmsdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_SBADDRLOW
,

386 (
addªss
 >> 8Ë& 
SBSDIO_SBADDRLOW_MASK
, &
îr
);

387 i‡(!
îr
)

388 
	`bcmsdh_cfg_wrôe
(
bcmsdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_SBADDRMID
,

389 (
addªss
 >> 16Ë& 
SBSDIO_SBADDRMID_MASK
, &
îr
);

390 i‡(!
îr
)

391 
	`bcmsdh_cfg_wrôe
(
bcmsdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_SBADDRHIGH
,

392 (
addªss
 >> 24Ë& 
SBSDIO_SBADDRHIGH_MASK
, &
îr
);

394 i‡(!
îr
)

395 
bcmsdh
->
sbwad
 = 
b¨0
;

398 
bcmsdh
->
sbwad
 = 0;

402  
îr
;

403 
	}
}

405 
uöt32


406 
	$bcmsdh_ªg_ªad
(*
sdh
, 
uöt32
 
addr
, 
uöt
 
size
)

408 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

409 
SDIOH_API_RC
 
°©us
;

410 
uöt32
 
w‹d
 = 0;

412 
	`BCMSDH_INFO
(("%s:fu¿1,ádd∏0x%x, ", 
__FUNCTION__
, 
addr
));

414 i‡(!
bcmsdh
)

415 
bcmsdh
 = 
l_bcmsdh
;

417 
	`ASSERT
(
bcmsdh
->
öô_suc˚ss
);

419 i‡(
	`bcmsdhsdio_£t_sbaddr_wödow
(
bcmsdh
, 
addr
, 
FALSE
))

422 
addr
 &
SBSDIO_SB_OFT_ADDR_MASK
;

423 i‡(
size
 == 4)

424 
addr
 |
SBSDIO_SB_ACCESS_2_4B_FLAG
;

426 
°©us
 = 
	`sdioh_ªque°_w‹d
(
bcmsdh
->
sdioh
, 
SDIOH_CMD_TYPE_NORMAL
,

427 
SDIOH_READ
, 
SDIO_FUNC_1
, 
addr
, &
w‹d
, 
size
);

429 
bcmsdh
->
ªgÁû
 = !(
	`SDIOH_API_SUCCESS
(
°©us
));

431 
	`BCMSDH_INFO
(("uöt32d©®0x%x\n", 
w‹d
));

434 i‡(
	`SDIOH_API_SUCCESS
(
°©us
)) {

435 
size
) {

436 (
uöt8
):

437  (
w‹d
 & 0xff);

438 (
uöt16
):

439  (
w‹d
 & 0xffff);

440 (
uöt32
):

441  
w‹d
;

443 
bcmsdh
->
ªgÁû
 = 
TRUE
;

449 
	`BCMSDH_ERROR
(("%s:Éº‹Ñódögádd∏0x%04x sizê%d\n", 
__FUNCTION__
, 
addr
, 
size
));

451 
	}
}

453 
uöt32


454 
	$bcmsdh_ªg_wrôe
(*
sdh
, 
uöt32
 
addr
, 
uöt
 
size
, uöt32 
d©a
)

456 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

457 
SDIOH_API_RC
 
°©us
;

458 
îr
 = 0;

460 
	`BCMSDH_INFO
(("%s:fun = 1,áddr = 0x%x, uint%ddata = 0x%x\n",

461 
__FUNCTION__
, 
addr
, 
size
*8, 
d©a
));

463 i‡(!
bcmsdh
)

464 
bcmsdh
 = 
l_bcmsdh
;

466 
	`ASSERT
(
bcmsdh
->
öô_suc˚ss
);

468 i‡((
îr
 = 
	`bcmsdhsdio_£t_sbaddr_wödow
(
bcmsdh
, 
addr
, 
FALSE
)))

469  
îr
;

471 
addr
 &
SBSDIO_SB_OFT_ADDR_MASK
;

472 i‡(
size
 == 4)

473 
addr
 |
SBSDIO_SB_ACCESS_2_4B_FLAG
;

474 
°©us
 = 
	`sdioh_ªque°_w‹d
(
bcmsdh
->
sdioh
, 
SDIOH_CMD_TYPE_NORMAL
, 
SDIOH_WRITE
, 
SDIO_FUNC_1
,

475 
addr
, &
d©a
, 
size
);

476 
bcmsdh
->
ªgÁû
 = !(
	`SDIOH_API_SUCCESS
(
°©us
));

478 i‡(
	`SDIOH_API_SUCCESS
(
°©us
))

481 
	`BCMSDH_ERROR
(("%s:Érror writing 0x%08xÅoáddr 0x%04x size %d\n",

482 
__FUNCTION__
, 
d©a
, 
addr
, 
size
));

484 
	}
}

486 
boﬁ


487 
	$bcmsdh_ªgÁû
(*
sdh
)

489  ((
bcmsdh_öfo_t
 *)
sdh
)->
ªgÁû
;

490 
	}
}

493 
	$bcmsdh_ªcv_buf
(*
sdh
, 
uöt32
 
addr
, 
uöt
 
‚
, uöà
Êags
,

494 
uöt8
 *
buf
, 
uöt
 
nbyãs
, *
pkt
,

495 
bcmsdh_cm∂t_‚_t
 
com∂ëe_‚
, *
h™dÀ
)

497 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

498 
SDIOH_API_RC
 
°©us
;

499 
uöt
 
ö¸_fix
;

500 
uöt
 
width
;

501 
îr
 = 0;

503 
	`ASSERT
(
bcmsdh
);

504 
	`ASSERT
(
bcmsdh
->
öô_suc˚ss
);

506 
	`BCMSDH_INFO
(("%s:fun = %d,áddr = 0x%x, size = %d\n",

507 
__FUNCTION__
, 
‚
, 
addr
, 
nbyãs
));

510 
	`ASSERT
(!(
Êags
 & 
SDIO_REQ_ASYNC
));

511 i‡(
Êags
 & 
SDIO_REQ_ASYNC
)

512  
BCME_UNSUPPORTED
;

514 i‡((
îr
 = 
	`bcmsdhsdio_£t_sbaddr_wödow
(
bcmsdh
, 
addr
, 
FALSE
)))

515  
îr
;

517 
addr
 &
SBSDIO_SB_OFT_ADDR_MASK
;

519 
ö¸_fix
 = (
Êags
 & 
SDIO_REQ_FIXED
Ë? 
SDIOH_DATA_FIX
 : 
SDIOH_DATA_INC
;

520 
width
 = (
Êags
 & 
SDIO_REQ_4BYTE
) ? 4 : 2;

521 i‡(
width
 == 4)

522 
addr
 |
SBSDIO_SB_ACCESS_2_4B_FLAG
;

524 
°©us
 = 
	`sdioh_ªque°_buf„r
(
bcmsdh
->
sdioh
, 
SDIOH_DATA_PIO
, 
ö¸_fix
,

525 
SDIOH_READ
, 
‚
, 
addr
, 
width
, 
nbyãs
, 
buf
, 
pkt
);

527  (
	`SDIOH_API_SUCCESS
(
°©us
Ë? 0 : 
BCME_SDIO_ERROR
);

528 
	}
}

531 
	$bcmsdh_£nd_buf
(*
sdh
, 
uöt32
 
addr
, 
uöt
 
‚
, uöà
Êags
,

532 
uöt8
 *
buf
, 
uöt
 
nbyãs
, *
pkt
,

533 
bcmsdh_cm∂t_‚_t
 
com∂ëe_‚
, *
h™dÀ
)

535 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

536 
SDIOH_API_RC
 
°©us
;

537 
uöt
 
ö¸_fix
;

538 
uöt
 
width
;

539 
îr
 = 0;

541 
	`ASSERT
(
bcmsdh
);

542 
	`ASSERT
(
bcmsdh
->
öô_suc˚ss
);

544 
	`BCMSDH_INFO
(("%s:fun = %d,áddr = 0x%x, size = %d\n",

545 
__FUNCTION__
, 
‚
, 
addr
, 
nbyãs
));

548 
	`ASSERT
(!(
Êags
 & 
SDIO_REQ_ASYNC
));

549 i‡(
Êags
 & 
SDIO_REQ_ASYNC
)

550  
BCME_UNSUPPORTED
;

552 i‡((
îr
 = 
	`bcmsdhsdio_£t_sbaddr_wödow
(
bcmsdh
, 
addr
, 
FALSE
)))

553  
îr
;

555 
addr
 &
SBSDIO_SB_OFT_ADDR_MASK
;

557 
ö¸_fix
 = (
Êags
 & 
SDIO_REQ_FIXED
Ë? 
SDIOH_DATA_FIX
 : 
SDIOH_DATA_INC
;

558 
width
 = (
Êags
 & 
SDIO_REQ_4BYTE
) ? 4 : 2;

559 i‡(
width
 == 4)

560 
addr
 |
SBSDIO_SB_ACCESS_2_4B_FLAG
;

562 
°©us
 = 
	`sdioh_ªque°_buf„r
(
bcmsdh
->
sdioh
, 
SDIOH_DATA_PIO
, 
ö¸_fix
,

563 
SDIOH_WRITE
, 
‚
, 
addr
, 
width
, 
nbyãs
, 
buf
, 
pkt
);

565  (
	`SDIOH_API_SUCCESS
(
°©us
Ë? 0 : 
BCME_ERROR
);

566 
	}
}

569 
	$bcmsdh_rwd©a
(*
sdh
, 
uöt
 
rw
, 
uöt32
 
addr
, 
uöt8
 *
buf
, uöà
nbyãs
)

571 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

572 
SDIOH_API_RC
 
°©us
;

574 
	`ASSERT
(
bcmsdh
);

575 
	`ASSERT
(
bcmsdh
->
öô_suc˚ss
);

576 
	`ASSERT
((
addr
 & 
SBSDIO_SBWINDOW_MASK
) == 0);

578 
addr
 &
SBSDIO_SB_OFT_ADDR_MASK
;

579 
addr
 |
SBSDIO_SB_ACCESS_2_4B_FLAG
;

581 
°©us
 = 
	`sdioh_ªque°_buf„r
(
bcmsdh
->
sdioh
, 
SDIOH_DATA_PIO
, 
SDIOH_DATA_INC
,

582 (
rw
 ? 
SDIOH_WRITE
 : 
SDIOH_READ
), 
SDIO_FUNC_1
,

583 
addr
, 4, 
nbyãs
, 
buf
, 
NULL
);

585  (
	`SDIOH_API_SUCCESS
(
°©us
Ë? 0 : 
BCME_ERROR
);

586 
	}
}

589 
	$bcmsdh_ab‹t
(*
sdh
, 
uöt
 
‚
)

591 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

593  
	`sdioh_ab‹t
(
bcmsdh
->
sdioh
, 
‚
);

594 
	}
}

597 
	$bcmsdh_°¨t
(*
sdh
, 
°age
)

599 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

601  
	`sdioh_°¨t
(
bcmsdh
->
sdioh
, 
°age
);

602 
	}
}

605 
	$bcmsdh_°›
(*
sdh
)

607 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

609  
	`sdioh_°›
(
bcmsdh
->
sdioh
);

610 
	}
}

613 
	$bcmsdh_waôlock‰ì
(*
sdh
)

615 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

616 i‡(!
bcmsdh
)

617 
bcmsdh
 = 
l_bcmsdh
;

619  
	`sdioh_waôlock‰ì
(
bcmsdh
->
sdioh
);

620 
	}
}

624 
	$bcmsdh_quîy_devi˚
(*
sdh
)

626 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

627 
bcmsdh
->
vídevid
 = (
VENDOR_BROADCOM
 << 16) | 0;

628  (
bcmsdh
->
vídevid
);

629 
	}
}

631 
uöt


632 
	$bcmsdh_quîy_io‚um
(*
sdh
)

634 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

636 i‡(!
bcmsdh
)

637 
bcmsdh
 = 
l_bcmsdh
;

639  (
	`sdioh_quîy_io‚um
(
bcmsdh
->
sdioh
));

640 
	}
}

643 
	$bcmsdh_ª£t
(
bcmsdh_öfo_t
 *
sdh
)

645 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

647  
	`sdioh_sdio_ª£t
(
bcmsdh
->
sdioh
);

648 
	}
}

650 *
	$bcmsdh_gë_sdioh
(
bcmsdh_öfo_t
 *
sdh
)

652 
	`ASSERT
(
sdh
);

653  
sdh
->
sdioh
;

654 
	}
}

657 
uöt32


658 
	$bcmsdh_gë_d°©us
(*
sdh
)

661 
	}
}

662 
uöt32


663 
	$bcmsdh_cur_sbwad
(*
sdh
)

665 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

667 i‡(!
bcmsdh
)

668 
bcmsdh
 = 
l_bcmsdh
;

670  (
bcmsdh
->
sbwad
);

671 
	}
}

674 
	$bcmsdh_chùöfo
(*
sdh
, 
uöt32
 
chù
, uöt32 
chùªv
)

677 
	}
}

681 
	$bcmsdh_¶ìp
(*
sdh
, 
boﬁ
 
íab
)

683 #ifde‡
SDIOH_SLEEP_ENABLED


684 
bcmsdh_öfo_t
 *
p
 = (bcmsdh_öfo_à*)
sdh
;

685 
sdioh_öfo_t
 *
sd
 = (sdioh_öfo_à*)(
p
->
sdioh
);

687  
	`sdioh_¶ìp
(
sd
, 
íab
);

689  
BCME_UNSUPPORTED
;

691 
	}
}

694 
	$bcmsdh_gpio_öô
(*
sdh
)

696 
bcmsdh_öfo_t
 *
p
 = (bcmsdh_öfo_à*)
sdh
;

697 
sdioh_öfo_t
 *
sd
 = (sdioh_öfo_à*)(
p
->
sdioh
);

699  
	`sdioh_gpio_öô
(
sd
);

700 
	}
}

702 
boﬁ


703 
	$bcmsdh_gpioö
(*
sdh
, 
uöt32
 
gpio
)

705 
bcmsdh_öfo_t
 *
p
 = (bcmsdh_öfo_à*)
sdh
;

706 
sdioh_öfo_t
 *
sd
 = (sdioh_öfo_à*)(
p
->
sdioh
);

708  
	`sdioh_gpioö
(
sd
, 
gpio
);

709 
	}
}

712 
	$bcmsdh_gpioouãn
(*
sdh
, 
uöt32
 
gpio
)

714 
bcmsdh_öfo_t
 *
p
 = (bcmsdh_öfo_à*)
sdh
;

715 
sdioh_öfo_t
 *
sd
 = (sdioh_öfo_à*)(
p
->
sdioh
);

717  
	`sdioh_gpioouãn
(
sd
, 
gpio
);

718 
	}
}

721 
	$bcmsdh_gpioout
(*
sdh
, 
uöt32
 
gpio
, 
boﬁ
 
íab
)

723 
bcmsdh_öfo_t
 *
p
 = (bcmsdh_öfo_à*)
sdh
;

724 
sdioh_öfo_t
 *
sd
 = (sdioh_öfo_à*)(
p
->
sdioh
);

726  
	`sdioh_gpioout
(
sd
, 
gpio
, 
íab
);

727 
	}
}

729 #ifde‡
BCMSDIOH_TXGLOM


731 
	$bcmsdh_glom_po°
(*
sdh
, 
uöt8
 *
‰ame
, 
uöt
 
Àn
)

733 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

734 
	`sdioh_glom_po°
(
bcmsdh
->
sdioh
, 
‰ame
, 
Àn
);

735 
	}
}

738 
	$bcmsdh_glom_˛ór
(*
sdh
)

740 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

741 
	`sdioh_glom_˛ór
(
bcmsdh
->
sdioh
);

742 
	}
}

744 
uöt


745 
	$bcmsdh_£t_mode
(*
sdh
, 
uöt
 
mode
)

747 
bcmsdh_öfo_t
 *
bcmsdh
 = (bcmsdh_öfo_à*)
sdh
;

748  (
	`sdioh_£t_mode
(
bcmsdh
->
sdioh
, 
mode
));

749 
	}
}

751 
boﬁ


752 
	$bcmsdh_glom_íabÀd
()

754  (
	`sdioh_glom_íabÀd
());

755 
	}
}

	@bcmsdh_linux.c

31 
	#__UNDEF_NO_VERSION__


	)

33 
	~<ty≥defs.h
>

34 
	~<löuxvî.h
>

36 
	~<löux/pci.h
>

37 
	~<löux/com∂ëi⁄.h
>

39 
	~<o¶.h
>

40 
	~<pcicfg.h
>

41 
	~<bcmdefs.h
>

42 
	~<bcmdevs.h
>

44 #i‡
deföed
(
OOB_INTR_ONLY
)

45 
	~<löux/úq.h
>

46 
dhdsdio_i§
(* 
¨gs
);

47 
	~<bcmutûs.h
>

48 
	~<dngl_°©s.h
>

49 
	~<dhd.h
>

56 
bcmsdh_hc
 
	tbcmsdh_hc_t
;

58 
	sbcmsdh_hc
 {

59 
bcmsdh_hc_t
 *
	m√xt
;

60 #ifde‡
BCMPLATFORM_BUS


61 
devi˚
 *
	mdev
;

63 
pci_dev
 *
	mdev
;

65 
o¶_t
 *
	mosh
;

66 *
	mªgs
;

67 
bcmsdh_öfo_t
 *
	msdh
;

68 *
	mch
;

69 
	moob_úq
;

70 
	moob_Êags
;

71 
boﬁ
 
	moob_úq_ªgi°îed
;

72 
boﬁ
 
	moob_úq_íabÀ_Êag
;

73 #i‡
deföed
(
OOB_INTR_ONLY
)

74 
•ölock_t
 
	múq_lock
;

77 
bcmsdh_hc_t
 *
	gsdhcöfo
 = 
NULL
;

80 
bcmsdh_drivî_t
 
	gdrvöfo
 = {
NULL
, NULL};

83 
	#SDLX_MSG
(
x
)

	)

88 
boﬁ


89 
	$bcmsdh_chùm©ch
(
uöt16
 
víd‹
, uöt16 
devi˚
)

93 #ifde‡
BCMSDIOH_STD


95 i‡(
víd‹
 =
VENDOR_SI_IMAGE
) {

96  (
TRUE
);

99 i‡(
devi˚
 =
BCM27XX_SDIOH_ID
 && 
víd‹
 =
VENDOR_BROADCOM
) {

100  (
TRUE
);

103 i‡(
devi˚
 =
SDIOH_FPGA_ID
 && 
víd‹
 =
VENDOR_BROADCOM
) {

104  (
TRUE
);

107 i‡(
devi˚
 =
PCIXX21_SDIOH_ID
 && 
víd‹
 =
VENDOR_TI
) {

108  (
TRUE
);

110 i‡(
devi˚
 =
PCIXX21_SDIOH0_ID
 && 
víd‹
 =
VENDOR_TI
) {

111  (
TRUE
);

114 i‡(
devi˚
 =
R5C822_SDIOH_ID
 && 
víd‹
 =
VENDOR_RICOH
) {

115  (
TRUE
);

118 i‡(
devi˚
 =
JMICRON_SDIOH_ID
 && 
víd‹
 =
VENDOR_JMICRON
) {

119  (
TRUE
);

123 #ifde‡
BCMSDIOH_SPI


125 i‡(
devi˚
 =
SPIH_FPGA_ID
 && 
víd‹
 =
VENDOR_BROADCOM
) {

126 
	`¥ötf
("Found PCI SPI Host Controller\n");

127  (
TRUE
);

132  (
FALSE
);

133 
	}
}

135 #i‡
deföed
(
BCMPLATFORM_BUS
)

136 #i‡
deföed
(
BCMLXSDMMC
)

138 
bcmsdh_¥obe
(
devi˚
 *
dev
);

139 
bcmsdh_ªmove
(
devi˚
 *
dev
);

141 
EXPORT_SYMBOL
(
bcmsdh_¥obe
);

142 
EXPORT_SYMBOL
(
bcmsdh_ªmove
);

146 
__devöô
 
bcmsdh_¥obe
(
devi˚
 *
dev
);

147 
__devexô
 
bcmsdh_ªmove
(
devi˚
 *
dev
);

150 #i‡!
deföed
(
BCMLXSDMMC
)

153 
	$bcmsdh_¥obe
(
devi˚
 *
dev
)

155 
o¶_t
 *
osh
 = 
NULL
;

156 
bcmsdh_hc_t
 *
sdhc
 = 
NULL
;

157 
ul⁄g
 
ªgs
 = 0;

158 
bcmsdh_öfo_t
 *
sdh
 = 
NULL
;

159 #i‡!
	`deföed
(
BCMLXSDMMC
Ë&& deföed(
BCMPLATFORM_BUS
)

160 
∂©f‹m_devi˚
 *
pdev
;

161 
ªsour˚
 *
r
;

163 
úq
 = 0;

164 
uöt32
 
vídevid
;

165 
úq_Êags
 = 0;

167 #i‡!
	`deföed
(
BCMLXSDMMC
Ë&& deföed(
BCMPLATFORM_BUS
)

168 
pdev
 = 
	`to_∂©f‹m_devi˚
(
dev
);

169 
r
 = 
	`∂©f‹m_gë_ªsour˚
(
pdev
, 
IORESOURCE_MEM
, 0);

170 
úq
 = 
	`∂©f‹m_gë_úq
(
pdev
, 0);

171 i‡(!
r
 || 
úq
 =
NO_IRQ
)

172  -
ENXIO
;

175 #i‡
	`deföed
(
OOB_INTR_ONLY
)

176 #ifde‡
HW_OOB


177 
úq_Êags
 =

178 
IORESOURCE_IRQ
 | 
IORESOURCE_IRQ_HIGHLEVEL
 | 
IORESOURCE_IRQ_SHAREABLE
;

180 
úq_Êags
 = 
IRQF_TRIGGER_FALLING
;

184 
úq
 = 
	`dhd_cu°omî_oob_úq_m≠
(&
úq_Êags
);

185 #if 
	`deföed
(
CONFIG_ARCH_RHEA
Ë|| deföed(
CONFIG_ARCH_CAPRI
)

187 
úq_Êags
 |
IRQF_NO_SUSPEND
;

189 i‡(
úq
 < 0) {

190 
	`SDLX_MSG
(("%s: Ho° irq i†nŸ deföed\n", 
__FUNCTION__
));

195 i‡(!(
osh
 = 
	`o¶_©èch
(
dev
, 
PCI_BUS
, 
FALSE
))) {

196 
	`SDLX_MSG
(("%s: o¶_©èch faûed\n", 
__FUNCTION__
));

197 
îr
;

199 i‡(!(
sdhc
 = 
	`MALLOC
(
osh
, (
bcmsdh_hc_t
)))) {

200 
	`SDLX_MSG
(("%s: out of memory,állocated %d bytes\n",

201 
__FUNCTION__
,

202 
	`MALLOCED
(
osh
)));

203 
îr
;

205 
	`bzîo
(
sdhc
, (
bcmsdh_hc_t
));

206 
sdhc
->
osh
 = osh;

208 
sdhc
->
dev
 = (*)dev;

210 #i‡
	`deföed
(
BCMLXSDMMC
)

211 i‡(!(
sdh
 = 
	`bcmsdh_©èch
(
osh
, (*)0,

212 (**)&
ªgs
, 
úq
))) {

213 
	`SDLX_MSG
(("%s: bcmsdh_©èch faûed\n", 
__FUNCTION__
));

214 
îr
;

217 i‡(!(
sdh
 = 
	`bcmsdh_©èch
(
osh
, (*)
r
->
°¨t
,

218 (**)&
ªgs
, 
úq
))) {

219 
	`SDLX_MSG
(("%s: bcmsdh_©èch faûed\n", 
__FUNCTION__
));

220 
îr
;

223 
sdhc
->
sdh
 = sdh;

224 
sdhc
->
oob_úq
 = 
úq
;

225 
sdhc
->
oob_Êags
 = 
úq_Êags
;

226 
sdhc
->
oob_úq_ªgi°îed
 = 
FALSE
;

227 
sdhc
->
oob_úq_íabÀ_Êag
 = 
FALSE
;

228 #i‡
	`deföed
(
OOB_INTR_ONLY
)

229 
	`•ö_lock_öô
(&
sdhc
->
úq_lock
);

233 
sdhc
->
√xt
 = 
sdhcöfo
;

234 
sdhcöfo
 = 
sdhc
;

238 
vídevid
 = 
	`bcmsdh_quîy_devi˚
(
sdh
);

240 i‡(!(
sdhc
->
ch
 = 
drvöfo
.
	`©èch
((
vídevid
 >> 16),

241 (
vídevid
 & 0xFFFF), 0, 0, 0, 0,

242 (*)
ªgs
, 
NULL
, 
sdh
))) {

243 
	`SDLX_MSG
(("%s: devi˚áâach faûed\n", 
__FUNCTION__
));

244 
îr
;

250 
îr
:

251 i‡(
sdhc
) {

252 i‡(
sdhc
->
sdh
)

253 
	`bcmsdh_dëach
(
sdhc
->
osh
, sdhc->
sdh
);

254 
	`MFREE
(
osh
, 
sdhc
, (
bcmsdh_hc_t
));

256 i‡(
osh
)

257 
	`o¶_dëach
(
osh
);

258  -
ENODEV
;

259 
	}
}

261 #i‡!
deföed
(
BCMLXSDMMC
)

264 
	$bcmsdh_ªmove
(
devi˚
 *
dev
)

266 
bcmsdh_hc_t
 *
sdhc
, *
¥ev
;

267 
o¶_t
 *
osh
;

269 
sdhc
 = 
sdhcöfo
;

270 
drvöfo
.
	`dëach
(
sdhc
->
ch
);

271 
	`bcmsdh_dëach
(
sdhc
->
osh
, sdhc->
sdh
);

274 
sdhc
 = 
sdhcöfo
, 
¥ev
 = 
NULL
; sdhc; sdh¯sdhc->
√xt
) {

275 i‡(
sdhc
->
dev
 == (*)dev) {

276 i‡(
¥ev
)

277 
¥ev
->
√xt
 = 
sdhc
->next;

279 
sdhcöfo
 = 
NULL
;

282 
¥ev
 = 
sdhc
;

284 i‡(!
sdhc
) {

285 
	`SDLX_MSG
(("%s: faûed\n", 
__FUNCTION__
));

290 
osh
 = 
sdhc
->osh;

291 
	`MFREE
(
osh
, 
sdhc
, (
bcmsdh_hc_t
));

292 
	`o¶_dëach
(
osh
);

294 #i‡!
	`deföed
(
BCMLXSDMMC
Ë|| deföed(
OOB_INTR_ONLY
)

295 
	`dev_£t_drvd©a
(
dev
, 
NULL
);

299 
	}
}

303 #i‡!
deföed
(
BCMLXSDMMC
)

305 
__devöô
 
bcmsdh_pci_¥obe
(
pci_dev
 *
pdev
, c⁄° 
pci_devi˚_id
 *
ít
);

306 
__devexô
 
bcmsdh_pci_ªmove
(
pci_dev
 *
pdev
);

311 
pci_devi˚_id
 
	gbcmsdh_pci_devid
[] 
	g__devöôd©a
 = {

312 { 
víd‹
: 
PCI_ANY_ID
,

313 
devi˚
: 
PCI_ANY_ID
,

314 
subvíd‹
: 
PCI_ANY_ID
,

315 
subdevi˚
: 
PCI_ANY_ID
,

316 
˛ass
: 0,

317 
˛ass_mask
: 0,

318 
drivî_d©a
: 0,

322 
MODULE_DEVICE_TABLE
(
pci
, 
bcmsdh_pci_devid
);

327 
pci_drivî
 
	gbcmsdh_pci_drivî
 = {

328 
node
: {},

329 
«me
: "bcmsdh",

330 
id_èbÀ
: 
bcmsdh_pci_devid
,

331 
¥obe
: 
bcmsdh_pci_¥obe
,

332 
ªmove
: 
bcmsdh_pci_ªmove
,

333 #i‡(
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2, 6, 0))

334 
ßve_°©e
: 
NULL
,

336 
su•íd
: 
NULL
,

337 
ªsume
: 
NULL
,

341 
uöt
 
sd_pci_¶Ÿ
;

350 
moduÀ_∑øm
(
sd_pci_¶Ÿ
, 
uöt
, 0);

359 
__devöô


360 
	$bcmsdh_pci_¥obe
(
pci_dev
 *
pdev
, c⁄° 
pci_devi˚_id
 *
ít
)

362 
o¶_t
 *
osh
 = 
NULL
;

363 
bcmsdh_hc_t
 *
sdhc
 = 
NULL
;

364 
ul⁄g
 
ªgs
;

365 
bcmsdh_öfo_t
 *
sdh
 = 
NULL
;

366 
rc
;

368 i‡(
sd_pci_¶Ÿ
 != 0xFFFFffff) {

369 i‡(
pdev
->
bus
->
numbî
 !(
sd_pci_¶Ÿ
>>16) ||

370 
	`PCI_SLOT
(
pdev
->
dev‚
Ë!(
sd_pci_¶Ÿ
&0xffff)) {

371 
	`SDLX_MSG
(("%s: %s: bus %X, slot %X, vend %X, dev %X\n",

372 
__FUNCTION__
,

373 
	`bcmsdh_chùm©ch
(
pdev
->
víd‹
,Ödev->
devi˚
)

376 
pdev
->
bus
->
numbî
, 
	`PCI_SLOT
’dev->
dev‚
),Ödev->
víd‹
,

377 
pdev
->
devi˚
));

378  -
ENODEV
;

380 
	`SDLX_MSG
(("%s: %s: bus %X, slot %X, vendor %X, device %X (good PCIÜocation)\n",

381 
__FUNCTION__
,

382 
	`bcmsdh_chùm©ch
(
pdev
->
víd‹
,Ödev->
devi˚
)

385 
pdev
->
bus
->
numbî
, 
	`PCI_SLOT
’dev->
dev‚
),Ödev->
víd‹
,Ödev->
devi˚
));

388 i‡((
pdev
->
víd‹
 =
VENDOR_TI
Ë&& (’dev->
devi˚
 =
PCIXX21_FLASHMEDIA_ID
) ||

389 (
pdev
->
devi˚
 =
PCIXX21_FLASHMEDIA0_ID
))) {

390 
uöt32
 
c⁄fig_ªg
;

392 
	`SDLX_MSG
(("%s: Dißblög TI FœshMedü C⁄åﬁÀr.\n", 
__FUNCTION__
));

393 i‡(!(
osh
 = 
	`o¶_©èch
(
pdev
, 
PCI_BUS
, 
FALSE
))) {

394 
	`SDLX_MSG
(("%s: o¶_©èch faûed\n", 
__FUNCTION__
));

395 
îr
;

398 
c⁄fig_ªg
 = 
	`OSL_PCI_READ_CONFIG
(
osh
, 0x4c, 4);

406 
c⁄fig_ªg
 |= 0x02;

407 
	`OSL_PCI_WRITE_CONFIG
(
osh
, 0x4c, 4, 
c⁄fig_ªg
);

408 
	`o¶_dëach
(
osh
);

412 i‡(!
	`bcmsdh_chùm©ch
(
pdev
->
víd‹
,Ödev->
devi˚
)) {

413  -
ENODEV
;

417 
	`SDLX_MSG
(("%s: FoundÖossible SDIO Host Controller: bus %d slot %d func %d irq %d\n",

418 
__FUNCTION__
,

419 
pdev
->
bus
->
numbî
, 
	`PCI_SLOT
’dev->
dev‚
),

420 
	`PCI_FUNC
(
pdev
->
dev‚
),Ödev->
úq
));

427 i‡(!(
osh
 = 
	`o¶_©èch
(
pdev
, 
PCI_BUS
, 
FALSE
))) {

428 
	`SDLX_MSG
(("%s: o¶_©èch faûed\n", 
__FUNCTION__
));

429 
îr
;

431 i‡(!(
sdhc
 = 
	`MALLOC
(
osh
, (
bcmsdh_hc_t
)))) {

432 
	`SDLX_MSG
(("%s: out of memory,állocated %d bytes\n",

433 
__FUNCTION__
,

434 
	`MALLOCED
(
osh
)));

435 
îr
;

437 
	`bzîo
(
sdhc
, (
bcmsdh_hc_t
));

438 
sdhc
->
osh
 = osh;

440 
sdhc
->
dev
 = 
pdev
;

443 
	`pci_£t_ma°î
(
pdev
);

444 
rc
 = 
	`pci_íabÀ_devi˚
(
pdev
);

445 i‡(
rc
) {

446 
	`SDLX_MSG
(("%s: C™nŸÉ«bÀ PCI devi˚\n", 
__FUNCTION__
));

447 
îr
;

449 i‡(!(
sdh
 = 
	`bcmsdh_©èch
(
osh
, (*)(
uöçå
)
	`pci_ªsour˚_°¨t
(
pdev
, 0),

450 (**)&
ªgs
, 
pdev
->
úq
))) {

451 
	`SDLX_MSG
(("%s: bcmsdh_©èch faûed\n", 
__FUNCTION__
));

452 
îr
;

455 
sdhc
->
sdh
 = sdh;

458 i‡(!(
sdhc
->
ch
 = 
drvöfo
.
	`©èch
(
VENDOR_BROADCOM
,

459 
	`bcmsdh_quîy_devi˚
(
sdh
) & 0xFFFF, 0, 0, 0, 0,

460 (*)
ªgs
, 
NULL
, 
sdh
))) {

461 
	`SDLX_MSG
(("%s: devi˚áâach faûed\n", 
__FUNCTION__
));

462 
îr
;

466 
sdhc
->
√xt
 = 
sdhcöfo
;

467 
sdhcöfo
 = 
sdhc
;

472 
îr
:

473 i‡(
sdhc
) {

474 i‡(
sdhc
->
sdh
)

475 
	`bcmsdh_dëach
(
sdhc
->
osh
, sdhc->
sdh
);

476 
	`MFREE
(
osh
, 
sdhc
, (
bcmsdh_hc_t
));

478 i‡(
osh
)

479 
	`o¶_dëach
(
osh
);

480  -
ENODEV
;

481 
	}
}

487 
__devexô


488 
	$bcmsdh_pci_ªmove
(
pci_dev
 *
pdev
)

490 
bcmsdh_hc_t
 *
sdhc
, *
¥ev
;

491 
o¶_t
 *
osh
;

494 
sdhc
 = 
sdhcöfo
, 
¥ev
 = 
NULL
; sdhc; sdh¯sdhc->
√xt
) {

495 i‡(
sdhc
->
dev
 =
pdev
) {

496 i‡(
¥ev
)

497 
¥ev
->
√xt
 = 
sdhc
->next;

499 
sdhcöfo
 = 
NULL
;

502 
¥ev
 = 
sdhc
;

504 i‡(!
sdhc
)

507 
drvöfo
.
	`dëach
(
sdhc
->
ch
);

509 
	`bcmsdh_dëach
(
sdhc
->
osh
, sdhc->
sdh
);

512 
osh
 = 
sdhc
->osh;

513 
	`MFREE
(
osh
, 
sdhc
, (
bcmsdh_hc_t
));

514 
	`o¶_dëach
(
osh
);

515 
	}
}

519 
sdio_fun˘i⁄_öô
();

521 
sdio_func_ªg_nŸify
(* 
£m≠h‹e
);

522 
sdio_func_uƒeg_nŸify
();

524 #i‡
deföed
(
BCMLXSDMMC
)

525 
	$bcmsdh_ªg_sdio_nŸify
(* 
£m≠h‹e
)

527  
	`sdio_func_ªg_nŸify
(
£m≠h‹e
);

528 
	}
}

530 
	$bcmsdh_uƒeg_sdio_nŸify
()

532 
	`sdio_func_uƒeg_nŸify
();

533 
	}
}

537 
	$bcmsdh_ªgi°î
(
bcmsdh_drivî_t
 *
drivî
)

539 
îr‹
 = 0;

541 
drvöfo
 = *
drivî
;

543 #i‡
	`deföed
(
BCMPLATFORM_BUS
)

544 
	`SDLX_MSG
(("Linux Kernel SDIO/MMC Driver\n"));

545 
îr‹
 = 
	`sdio_fun˘i⁄_öô
();

546  
îr‹
;

549 #i‡!
	`deföed
(
BCMPLATFORM_BUS
Ë&& !deföed(
BCMLXSDMMC
)

550 #i‡(
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2, 6, 0))

551 i‡(!(
îr‹
 = 
	`pci_moduÀ_öô
(&
bcmsdh_pci_drivî
)))

554 i‡(!(
îr‹
 = 
	`pci_ªgi°î_drivî
(&
bcmsdh_pci_drivî
)))

558 
	`SDLX_MSG
(("%s:Öci_moduÀ_öô faûed 0x%x\n", 
__FUNCTION__
, 
îr‹
));

561  
îr‹
;

562 
	}
}

564 
sdio_fun˘i⁄_˛ónup
();

567 
	$bcmsdh_uƒegi°î
()

569 #i‡(
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2, 6, 0))

570 i‡(
bcmsdh_pci_drivî
.
node
.
√xt
)

573 #i‡
	`deföed
(
BCMLXSDMMC
)

574 
	`sdio_fun˘i⁄_˛ónup
();

577 #i‡!
	`deföed
(
BCMPLATFORM_BUS
Ë&& !deföed(
BCMLXSDMMC
)

578 
	`pci_uƒegi°î_drivî
(&
bcmsdh_pci_drivî
);

580 
	}
}

582 #i‡
deföed
(
OOB_INTR_ONLY
)

583 
	$bcmsdh_oob_öå_£t
(
boﬁ
 
íabÀ
)

585 
boﬁ
 
cur°©e
 = 1;

586 
Êags
;

588 
	`•ö_lock_úqßve
(&
sdhcöfo
->
úq_lock
, 
Êags
);

589 i‡(
cur°©e
 !
íabÀ
) {

590 i‡(
íabÀ
)

591 
	`íabÀ_úq
(
sdhcöfo
->
oob_úq
);

593 
	`dißbÀ_úq_nosync
(
sdhcöfo
->
oob_úq
);

594 
cur°©e
 = 
íabÀ
;

596 
	`•ö_u∆ock_úqª°‹e
(&
sdhcöfo
->
úq_lock
, 
Êags
);

597 
	}
}

599 
úqªtu∫_t
 
	$wœn_oob_úq
(
úq
, *
dev_id
)

601 
dhd_pub_t
 *
dhdp
;

603 
dhdp
 = (
dhd_pub_t
 *)
	`dev_gë_drvd©a
(
sdhcöfo
->
dev
);

605 
	`bcmsdh_oob_öå_£t
(0);

607 i‡(
dhdp
 =
NULL
) {

608 
	`SDLX_MSG
(("Out of band GPIO interrupt fired wayÅooÉarly\n"));

609  
IRQ_HANDLED
;

612 
	`dhdsdio_i§
((*)
dhdp
->
bus
);

614  
IRQ_HANDLED
;

615 
	}
}

617 
	$bcmsdh_ªgi°î_oob_öå
(* 
dhdp
)

619 
îr‹
 = 0;

621 
	`SDLX_MSG
(("%†E¡î \n", 
__FUNCTION__
));

625 
	`dev_£t_drvd©a
(
sdhcöfo
->
dev
, 
dhdp
);

627 i‡(!
sdhcöfo
->
oob_úq_ªgi°îed
) {

628 
	`SDLX_MSG
(("%†IRQ=%d Ty≥=%X \n", 
__FUNCTION__
,

629 ()
sdhcöfo
->
oob_úq
, ()sdhcöfo->
oob_Êags
));

631 
îr‹
 = 
	`ªque°_úq
(
sdhcöfo
->
oob_úq
, 
wœn_oob_úq
, sdhcöfo->
oob_Êags
,

632 "bcmsdh_sdmmc", 
NULL
);

633 i‡(
îr‹
)

634  -
ENODEV
;

636 #i‡
	`deföed
(
CONFIG_ARCH_RHEA
Ë|| deföed(
CONFIG_ARCH_CAPRI
)

637 i‡(
	`devi˚_may_wakeup
(
sdhcöfo
->
dev
)) {

639 
îr‹
 = 
	`íabÀ_úq_wake
(
sdhcöfo
->
oob_úq
);

640 #i‡
	`deföed
(
CONFIG_ARCH_RHEA
Ë|| deföed(
CONFIG_ARCH_CAPRI
)

643 i‡(
îr‹
)

644 
	`SDLX_MSG
(("%†íabÀ_úq_wakêîr‹=%d \n", 
__FUNCTION__
, 
îr‹
));

645 
sdhcöfo
->
oob_úq_ªgi°îed
 = 
TRUE
;

646 
sdhcöfo
->
oob_úq_íabÀ_Êag
 = 
TRUE
;

650 
	}
}

652 
	$bcmsdh_£t_úq
(
Êag
)

654 i‡(
sdhcöfo
->
oob_úq_ªgi°îed
 && sdhcöfo->
oob_úq_íabÀ_Êag
 !
Êag
) {

655 
	`SDLX_MSG
(("%†Fœg = %d", 
__FUNCTION__
, 
Êag
));

656 
sdhcöfo
->
oob_úq_íabÀ_Êag
 = 
Êag
;

657 i‡(
Êag
) {

658 
	`íabÀ_úq
(
sdhcöfo
->
oob_úq
);

659 #i‡
	`deföed
(
CONFIG_ARCH_RHEA
Ë|| deföed(
CONFIG_ARCH_CAPRI
)

660 i‡(
	`devi˚_may_wakeup
(
sdhcöfo
->
dev
))

662 
	`íabÀ_úq_wake
(
sdhcöfo
->
oob_úq
);

664 #i‡
	`deföed
(
CONFIG_ARCH_RHEA
Ë|| deföed(
CONFIG_ARCH_CAPRI
)

665 i‡(
	`devi˚_may_wakeup
(
sdhcöfo
->
dev
))

667 
	`dißbÀ_úq_wake
(
sdhcöfo
->
oob_úq
);

668 
	`dißbÀ_úq
(
sdhcöfo
->
oob_úq
);

671 
	}
}

673 
	$bcmsdh_uƒegi°î_oob_öå
()

675 
	`SDLX_MSG
(("%s: E¡î\n", 
__FUNCTION__
));

677 i‡(
sdhcöfo
->
oob_úq_ªgi°îed
 =
TRUE
) {

678 
	`bcmsdh_£t_úq
(
FALSE
);

679 
	`‰ì_úq
(
sdhcöfo
->
oob_úq
, 
NULL
);

680 
sdhcöfo
->
oob_úq_ªgi°îed
 = 
FALSE
;

682 
	}
}

685 #i‡
deföed
(
BCMLXSDMMC
)

686 *
	$bcmsdh_gë_drvd©a
()

688 i‡(!
sdhcöfo
)

689  
NULL
;

690  
	`dev_gë_drvd©a
(
sdhcöfo
->
dev
);

691 
	}
}

696 
uöt
 
sd_msgÀvñ
;

697 
moduÀ_∑øm
(
sd_msgÀvñ
, 
uöt
, 0);

699 
uöt
 
sd_powî
;

700 
moduÀ_∑øm
(
sd_powî
, 
uöt
, 0);

702 
uöt
 
sd_˛ock
;

703 
moduÀ_∑øm
(
sd_˛ock
, 
uöt
, 0);

705 
uöt
 
sd_divis‹
;

706 
moduÀ_∑øm
(
sd_divis‹
, 
uöt
, 0);

708 
uöt
 
sd_sdmode
;

709 
moduÀ_∑øm
(
sd_sdmode
, 
uöt
, 0);

711 
uöt
 
sd_hiok
;

712 
moduÀ_∑øm
(
sd_hiok
, 
uöt
, 0);

714 
uöt
 
sd_f2_blocksize
;

715 
moduÀ_∑øm
(
sd_f2_blocksize
, , 0);

717 #ifde‡
BCMSDIOH_STD


718 
sd_uhsimode
;

719 
moduÀ_∑øm
(
sd_uhsimode
, , 0);

722 #ifde‡
BCMSDIOH_TXGLOM


723 
uöt
 
sd_txglom
;

724 
moduÀ_∑øm
(
sd_txglom
, 
uöt
, 0);

727 #ifde‡
BCMSDH_MODULE


728 
EXPORT_SYMBOL
(
bcmsdh_©èch
);

729 
EXPORT_SYMBOL
(
bcmsdh_dëach
);

730 
EXPORT_SYMBOL
(
bcmsdh_öå_quîy
);

731 
EXPORT_SYMBOL
(
bcmsdh_öå_íabÀ
);

732 
EXPORT_SYMBOL
(
bcmsdh_öå_dißbÀ
);

733 
EXPORT_SYMBOL
(
bcmsdh_öå_ªg
);

734 
EXPORT_SYMBOL
(
bcmsdh_öå_dîeg
);

736 #i‡
deföed
(
DHD_DEBUG
)

737 
EXPORT_SYMBOL
(
bcmsdh_öå_≥ndög
);

740 
EXPORT_SYMBOL
(
bcmsdh_devªmove_ªg
);

741 
EXPORT_SYMBOL
(
bcmsdh_cfg_ªad
);

742 
EXPORT_SYMBOL
(
bcmsdh_cfg_wrôe
);

743 
EXPORT_SYMBOL
(
bcmsdh_cis_ªad
);

744 
EXPORT_SYMBOL
(
bcmsdh_ªg_ªad
);

745 
EXPORT_SYMBOL
(
bcmsdh_ªg_wrôe
);

746 
EXPORT_SYMBOL
(
bcmsdh_ªgÁû
);

747 
EXPORT_SYMBOL
(
bcmsdh_£nd_buf
);

748 
EXPORT_SYMBOL
(
bcmsdh_ªcv_buf
);

750 
EXPORT_SYMBOL
(
bcmsdh_rwd©a
);

751 
EXPORT_SYMBOL
(
bcmsdh_ab‹t
);

752 
EXPORT_SYMBOL
(
bcmsdh_quîy_devi˚
);

753 
EXPORT_SYMBOL
(
bcmsdh_quîy_io‚um
);

754 
EXPORT_SYMBOL
(
bcmsdh_iov¨_›
);

755 
EXPORT_SYMBOL
(
bcmsdh_ªgi°î
);

756 
EXPORT_SYMBOL
(
bcmsdh_uƒegi°î
);

757 
EXPORT_SYMBOL
(
bcmsdh_chùm©ch
);

758 
EXPORT_SYMBOL
(
bcmsdh_ª£t
);

759 
EXPORT_SYMBOL
(
bcmsdh_waôlock‰ì
);

761 
EXPORT_SYMBOL
(
bcmsdh_gë_d°©us
);

762 
EXPORT_SYMBOL
(
bcmsdh_cfg_ªad_w‹d
);

763 
EXPORT_SYMBOL
(
bcmsdh_cfg_wrôe_w‹d
);

764 
EXPORT_SYMBOL
(
bcmsdh_cur_sbwad
);

765 
EXPORT_SYMBOL
(
bcmsdh_chùöfo
);

	@bcmsdh_sdmmc.c

26 
	~<ty≥defs.h
>

28 
	~<bcmdevs.h
>

29 
	~<bcmídün.h
>

30 
	~<bcmutûs.h
>

31 
	~<o¶.h
>

32 
	~<sdio.h
>

33 
	~<sdioh.h
>

34 
	~<bcmsdbus.h
>

35 
	~<sdiov¨.h
>

37 
	~<löux/mmc/c‹e.h
>

38 
	~<löux/mmc/ˇrd.h
>

39 
	~<löux/mmc/sdio_func.h
>

40 
	~<löux/mmc/sdio_ids.h
>

42 
	~<dngl_°©s.h
>

43 
	~<dhd.h
>

45 #i‡(
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 27)Ë&& 
deföed
(
CONFIG_PM_SLEEP
)

46 
	~<löux/su•íd.h
>

47 vﬁ©ûê
boﬁ
 
dhd_mmc_su•íd
;

49 
	~"bcmsdh_sdmmc.h
"

51 #i‚de‡
BCMSDH_MODULE


52 
sdio_fun˘i⁄_öô
();

53 
sdio_fun˘i⁄_˛ónup
();

56 #i‡!
deföed
(
OOB_INTR_ONLY
)

57 
IRQH™dÀr
(
sdio_func
 *
func
);

58 
IRQH™dÀrF2
(
sdio_func
 *
func
);

60 
sdioh_sdmmc_gë_cißddr
(
sdioh_öfo_t
 *
sd
, 
uöt32
 
ªgaddr
);

61 
sdio_ª£t_comm
(
mmc_ˇrd
 *
ˇrd
);

63 
PBCMSDH_SDMMC_INSTANCE
 
gIn°™˚
;

65 
	#DEFAULT_SDIO_F2_BLKSIZE
 512

	)

66 #i‚de‡
CUSTOM_SDIO_F2_BLKSIZE


67 
	#CUSTOM_SDIO_F2_BLKSIZE
 
DEFAULT_SDIO_F2_BLKSIZE


	)

70 
uöt
 
	gsd_sdmode
 = 
SDIOH_MODE_SD4
;

71 
uöt
 
	gsd_f2_blocksize
 = 
CUSTOM_SDIO_F2_BLKSIZE
;

72 
uöt
 
	gsd_divis‹
 = 2;

74 
uöt
 
	gsd_powî
 = 1;

75 
uöt
 
	gsd_˛ock
 = 1;

76 
uöt
 
	gsd_hiok
 = 
FALSE
;

77 
uöt
 
	gsd_msgÀvñ
 = 0x01;

78 
uöt
 
	gsd_u£_dma
 = 
TRUE
;

79 
DHD_PM_RESUME_WAIT_INIT
(
sdioh_ªque°_byã_waô
);

80 
DHD_PM_RESUME_WAIT_INIT
(
sdioh_ªque°_w‹d_waô
);

81 
DHD_PM_RESUME_WAIT_INIT
(
sdioh_ªque°_∑ckë_waô
);

82 
DHD_PM_RESUME_WAIT_INIT
(
sdioh_ªque°_buf„r_waô
);

84 
	#DMA_ALIGN_MASK
 0x03

	)

85 
	#MMC_SDIO_ABORT_RETRY_LIMIT
 5

	)

87 
sdioh_sdmmc_ˇrd_ªgªad
(
sdioh_öfo_t
 *
sd
, 
func
, 
uöt32
 
ªgaddr
, 
ªgsize
, uöt32 *
d©a
);

90 
	$sdioh_sdmmc_ˇrd_íabÀfuncs
(
sdioh_öfo_t
 *
sd
)

92 
îr_ªt
;

93 
uöt32
 
fbøddr
;

94 
uöt8
 
func
;

96 
	`sd_åa˚
(("%s\n", 
__FUNCTION__
));

99 
sd
->
com_cis_±r
 = 
	`sdioh_sdmmc_gë_cißddr
(sd, 
SDIOD_CCCR_CISPTR_0
);

100 
sd
->
func_cis_±r
[0] = sd->
com_cis_±r
;

101 
	`sd_öfo
(("%s: C¨d'†Comm⁄ CIS På = 0x%x\n", 
__FUNCTION__
, 
sd
->
com_cis_±r
));

104 
fbøddr
 = 
SDIOD_FBR_STARTADDR
, 
func
 = 1;

105 
func
 <
sd
->
num_funcs
; func++, 
fbøddr
 +
SDIOD_FBR_SIZE
) {

106 
sd
->
func_cis_±r
[
func
] = 
	`sdioh_sdmmc_gë_cißddr
(sd, 
SDIOD_FBR_CISPTR_0
 + 
fbøddr
);

107 
	`sd_öfo
(("%s: Function %d CIS Ptr = 0x%x\n",

108 
__FUNCTION__
, 
func
, 
sd
->
func_cis_±r
[func]));

111 
sd
->
func_cis_±r
[0] = sd->
com_cis_±r
;

112 
	`sd_öfo
(("%s: C¨d'†Comm⁄ CIS På = 0x%x\n", 
__FUNCTION__
, 
sd
->
com_cis_±r
));

115 
	`sdio_˛aim_ho°
(
gIn°™˚
->
func
[1]);

116 
îr_ªt
 = 
	`sdio_íabÀ_func
(
gIn°™˚
->
func
[1]);

117 
	`sdio_ªÀa£_ho°
(
gIn°™˚
->
func
[1]);

118 i‡(
îr_ªt
) {

119 
	`sd_îr
(("bcmsdh_sdmmc: FaûedÅÿíabÀ F1 Eº: 0x%08x", 
îr_ªt
));

122  
FALSE
;

123 
	}
}

128 
sdioh_öfo_t
 *

129 
	$sdioh_©èch
(
o¶_t
 *
osh
, *
b¨0
, 
uöt
 
úq
)

131 
sdioh_öfo_t
 *
sd
;

132 
îr_ªt
;

134 
	`sd_åa˚
(("%s\n", 
__FUNCTION__
));

136 i‡(
gIn°™˚
 =
NULL
) {

137 
	`sd_îr
(("%s: SDIO Devi˚ÇŸÖª£¡\n", 
__FUNCTION__
));

138  
NULL
;

141 i‡((
sd
 = (
sdioh_öfo_t
 *)
	`MALLOC
(
osh
, (sdioh_öfo_t))Ë=
NULL
) {

142 
	`sd_îr
(("sdioh_©èch: ouào‡mem‹y, mÆlo˚d %d byãs\n", 
	`MALLOCED
(
osh
)));

143  
NULL
;

145 
	`bzîo
((*)
sd
, (
sdioh_öfo_t
));

146 
sd
->
osh
 = osh;

147 i‡(
	`sdioh_sdmmc_osöô
(
sd
) != 0) {

148 
	`sd_îr
(("%s:sdioh_sdmmc_osöô(ËÁûed\n", 
__FUNCTION__
));

149 
	`MFREE
(
sd
->
osh
, sd, (
sdioh_öfo_t
));

150  
NULL
;

153 
sd
->
num_funcs
 = 2;

154 
sd
->
sd_blockmode
 = 
TRUE
;

155 
sd
->
u£_˛õ¡_öts
 = 
TRUE
;

156 
sd
->
˛õ¡_block_size
[0] = 64;

157 
sd
->
u£_rxchaö
 = 
FALSE
;

159 
gIn°™˚
->
sd
 = sd;

162 i‡(
gIn°™˚
->
func
[1]) {

163 
	`sdio_˛aim_ho°
(
gIn°™˚
->
func
[1]);

165 
sd
->
˛õ¡_block_size
[1] = 64;

166 
îr_ªt
 = 
	`sdio_£t_block_size
(
gIn°™˚
->
func
[1], 64);

167 i‡(
îr_ªt
) {

168 
	`sd_îr
(("bcmsdh_sdmmc: FailedÅo set F1 blocksize\n"));

172 
	`sdio_ªÀa£_ho°
(
gIn°™˚
->
func
[1]);

174 
	`sd_îr
(("%s:gIn°™˚->func[1] i†nuŒ\n", 
__FUNCTION__
));

175 
	`MFREE
(
sd
->
osh
, sd, (
sdioh_öfo_t
));

176  
NULL
;

179 i‡(
gIn°™˚
->
func
[2]) {

181 
	`sdio_˛aim_ho°
(
gIn°™˚
->
func
[2]);

183 
sd
->
˛õ¡_block_size
[2] = 
sd_f2_blocksize
;

184 
îr_ªt
 = 
	`sdio_£t_block_size
(
gIn°™˚
->
func
[2], 
sd_f2_blocksize
);

185 i‡(
îr_ªt
) {

186 
	`sd_îr
(("bcmsdh_sdmmc: FailedÅo set F2 blocksizeÅo %d\n",

187 
sd_f2_blocksize
));

191 
	`sdio_ªÀa£_ho°
(
gIn°™˚
->
func
[2]);

193 
	`sd_îr
(("%s:gIn°™˚->func[2] i†nuŒ\n", 
__FUNCTION__
));

194 
	`MFREE
(
sd
->
osh
, sd, (
sdioh_öfo_t
));

195  
NULL
;

198 
	`sdioh_sdmmc_ˇrd_íabÀfuncs
(
sd
);

200 
	`sd_åa˚
(("%s: D⁄e\n", 
__FUNCTION__
));

201  
sd
;

202 
	}
}

205 
SDIOH_API_RC


206 
	$sdioh_dëach
(
o¶_t
 *
osh
, 
sdioh_öfo_t
 *
sd
)

208 
	`sd_åa˚
(("%s\n", 
__FUNCTION__
));

210 i‡(
sd
) {

213 
	`sdio_˛aim_ho°
(
gIn°™˚
->
func
[2]);

214 
	`sdio_dißbÀ_func
(
gIn°™˚
->
func
[2]);

215 
	`sdio_ªÀa£_ho°
(
gIn°™˚
->
func
[2]);

218 i‡(
gIn°™˚
->
func
[1]) {

219 
	`sdio_˛aim_ho°
(
gIn°™˚
->
func
[1]);

220 
	`sdio_dißbÀ_func
(
gIn°™˚
->
func
[1]);

221 
	`sdio_ªÀa£_ho°
(
gIn°™˚
->
func
[1]);

224 
gIn°™˚
->
func
[1] = 
NULL
;

225 
gIn°™˚
->
func
[2] = 
NULL
;

228 
	`sdioh_sdmmc_os‰ì
(
sd
);

230 
	`MFREE
(
sd
->
osh
, sd, (
sdioh_öfo_t
));

232  
SDIOH_API_RC_SUCCESS
;

233 
	}
}

235 #i‡
deföed
(
OOB_INTR_ONLY
Ë&& deföed(
HW_OOB
)

237 
SDIOH_API_RC


238 
	$sdioh_íabÀ_func_öå
()

240 
uöt8
 
ªg
;

241 
îr
;

243 i‡(
gIn°™˚
->
func
[0]) {

244 
	`sdio_˛aim_ho°
(
gIn°™˚
->
func
[0]);

246 
ªg
 = 
	`sdio_ªadb
(
gIn°™˚
->
func
[0], 
SDIOD_CCCR_INTEN
, &
îr
);

247 i‡(
îr
) {

248 
	`sd_îr
(("%s:Éº‹ f‹Ñód SDIO_CCCR_IENx : 0x%x\n", 
__FUNCTION__
, 
îr
));

249 
	`sdio_ªÀa£_ho°
(
gIn°™˚
->
func
[0]);

250  
SDIOH_API_RC_FAIL
;

254 
ªg
 |(
INTR_CTL_FUNC1_EN
 | 
INTR_CTL_FUNC2_EN
 | 
INTR_CTL_MASTER_EN
);

256 
	`sdio_wrôeb
(
gIn°™˚
->
func
[0], 
ªg
, 
SDIOD_CCCR_INTEN
, &
îr
);

257 
	`sdio_ªÀa£_ho°
(
gIn°™˚
->
func
[0]);

259 i‡(
îr
) {

260 
	`sd_îr
(("%s:Éº‹ f‹ wrôêSDIO_CCCR_IENx : 0x%x\n", 
__FUNCTION__
, 
îr
));

261  
SDIOH_API_RC_FAIL
;

265  
SDIOH_API_RC_SUCCESS
;

266 
	}
}

268 
SDIOH_API_RC


269 
	$sdioh_dißbÀ_func_öå
()

271 
uöt8
 
ªg
;

272 
îr
;

274 i‡(
gIn°™˚
->
func
[0]) {

275 
	`sdio_˛aim_ho°
(
gIn°™˚
->
func
[0]);

276 
ªg
 = 
	`sdio_ªadb
(
gIn°™˚
->
func
[0], 
SDIOD_CCCR_INTEN
, &
îr
);

277 i‡(
îr
) {

278 
	`sd_îr
(("%s:Éº‹ f‹Ñód SDIO_CCCR_IENx : 0x%x\n", 
__FUNCTION__
, 
îr
));

279 
	`sdio_ªÀa£_ho°
(
gIn°™˚
->
func
[0]);

280  
SDIOH_API_RC_FAIL
;

283 
ªg
 &~(
INTR_CTL_FUNC1_EN
 | 
INTR_CTL_FUNC2_EN
);

285 i‡(!(
ªg
 & 0xFE))

286 
ªg
 = 0;

287 
	`sdio_wrôeb
(
gIn°™˚
->
func
[0], 
ªg
, 
SDIOD_CCCR_INTEN
, &
îr
);

289 
	`sdio_ªÀa£_ho°
(
gIn°™˚
->
func
[0]);

290 i‡(
îr
) {

291 
	`sd_îr
(("%s:Éº‹ f‹ wrôêSDIO_CCCR_IENx : 0x%x\n", 
__FUNCTION__
, 
îr
));

292  
SDIOH_API_RC_FAIL
;

295  
SDIOH_API_RC_SUCCESS
;

296 
	}
}

300 
SDIOH_API_RC


301 
	$sdioh_öãºu±_ªgi°î
(
sdioh_öfo_t
 *
sd
, 
sdioh_cb_‚_t
 
‚
, *
¨gh
)

303 
	`sd_åa˚
(("%s: E¡îög\n", 
__FUNCTION__
));

304 i‡(
‚
 =
NULL
) {

305 
	`sd_îr
(("%s: i¡îru± h™dÀ∏i†NULL,ÇŸÑegi°îög\n", 
__FUNCTION__
));

306  
SDIOH_API_RC_FAIL
;

308 #i‡!
	`deföed
(
OOB_INTR_ONLY
)

309 
sd
->
öå_h™dÀr
 = 
‚
;

310 
sd
->
öå_h™dÀr_¨g
 = 
¨gh
;

311 
sd
->
öå_h™dÀr_vÆid
 = 
TRUE
;

314 i‡(
gIn°™˚
->
func
[2]) {

315 
	`sdio_˛aim_ho°
(
gIn°™˚
->
func
[2]);

316 
	`sdio_˛aim_úq
(
gIn°™˚
->
func
[2], 
IRQH™dÀrF2
);

317 
	`sdio_ªÀa£_ho°
(
gIn°™˚
->
func
[2]);

320 i‡(
gIn°™˚
->
func
[1]) {

321 
	`sdio_˛aim_ho°
(
gIn°™˚
->
func
[1]);

322 
	`sdio_˛aim_úq
(
gIn°™˚
->
func
[1], 
IRQH™dÀr
);

323 
	`sdio_ªÀa£_ho°
(
gIn°™˚
->
func
[1]);

325 #ñi‡
	`deföed
(
HW_OOB
)

326 
	`sdioh_íabÀ_func_öå
();

329  
SDIOH_API_RC_SUCCESS
;

330 
	}
}

332 
SDIOH_API_RC


333 
	$sdioh_öãºu±_dîegi°î
(
sdioh_öfo_t
 *
sd
)

335 
	`sd_åa˚
(("%s: E¡îög\n", 
__FUNCTION__
));

337 #i‡!
	`deföed
(
OOB_INTR_ONLY
)

338 i‡(
gIn°™˚
->
func
[1]) {

340 
	`sdio_˛aim_ho°
(
gIn°™˚
->
func
[1]);

341 
	`sdio_ªÀa£_úq
(
gIn°™˚
->
func
[1]);

342 
	`sdio_ªÀa£_ho°
(
gIn°™˚
->
func
[1]);

345 i‡(
gIn°™˚
->
func
[2]) {

347 
	`sdio_˛aim_ho°
(
gIn°™˚
->
func
[2]);

348 
	`sdio_ªÀa£_úq
(
gIn°™˚
->
func
[2]);

350 
	`sdio_ªÀa£_ho°
(
gIn°™˚
->
func
[2]);

353 
sd
->
öå_h™dÀr_vÆid
 = 
FALSE
;

354 
sd
->
öå_h™dÀr
 = 
NULL
;

355 
sd
->
öå_h™dÀr_¨g
 = 
NULL
;

356 #ñi‡
	`deföed
(
HW_OOB
)

357 
	`sdioh_dißbÀ_func_öå
();

359  
SDIOH_API_RC_SUCCESS
;

360 
	}
}

362 
SDIOH_API_RC


363 
	$sdioh_öãºu±_quîy
(
sdioh_öfo_t
 *
sd
, 
boﬁ
 *
⁄off
)

365 
	`sd_åa˚
(("%s: E¡îög\n", 
__FUNCTION__
));

366 *
⁄off
 = 
sd
->
˛õ¡_öå_íabÀd
;

367  
SDIOH_API_RC_SUCCESS
;

368 
	}
}

370 #i‡
deföed
(
DHD_DEBUG
)

371 
boﬁ


372 
	$sdioh_öãºu±_≥ndög
(
sdioh_öfo_t
 *
sd
)

375 
	}
}

378 
uöt


379 
	$sdioh_quîy_io‚um
(
sdioh_öfo_t
 *
sd
)

381  
sd
->
num_funcs
;

382 
	}
}

386 
IOV_MSGLEVEL
 = 1,

387 
IOV_BLOCKMODE
,

388 
IOV_BLOCKSIZE
,

389 
IOV_DMA
,

390 
IOV_USEINTS
,

391 
IOV_NUMINTS
,

392 
IOV_NUMLOCALINTS
,

393 
IOV_HOSTREG
,

394 
IOV_DEVREG
,

395 
IOV_DIVISOR
,

396 
IOV_SDMODE
,

397 
IOV_HISPEED
,

398 
IOV_HCIREGS
,

399 
IOV_POWER
,

400 
IOV_CLOCK
,

401 
IOV_RXCHAIN


404 c⁄° 
bcm_iov¨_t
 
	gsdioh_iov¨s
[] = {

405 {"sd_msgÀvñ", 
IOV_MSGLEVEL
, 0, 
IOVT_UINT32
, 0 },

406 {"sd_blockmode", 
IOV_BLOCKMODE
, 0, 
IOVT_BOOL
, 0 },

407 {"sd_blocksize", 
IOV_BLOCKSIZE
, 0, 
IOVT_UINT32
, 0 },

408 {"sd_dma", 
IOV_DMA
, 0, 
IOVT_BOOL
, 0 },

409 {"sd_öts", 
IOV_USEINTS
, 0, 
IOVT_BOOL
, 0 },

410 {"sd_numöts", 
IOV_NUMINTS
, 0, 
IOVT_UINT32
, 0 },

411 {"sd_numloˇlöts", 
IOV_NUMLOCALINTS
, 0, 
IOVT_UINT32
, 0 },

412 {"sd_ho°ªg", 
IOV_HOSTREG
, 0, 
IOVT_BUFFER
, (
sdªg_t
) },

413 {"sd_devªg", 
IOV_DEVREG
, 0, 
IOVT_BUFFER
, (
sdªg_t
) },

414 {"sd_divis‹", 
IOV_DIVISOR
, 0, 
IOVT_UINT32
, 0 },

415 {"sd_powî", 
IOV_POWER
, 0, 
IOVT_UINT32
, 0 },

416 {"sd_˛ock", 
IOV_CLOCK
, 0, 
IOVT_UINT32
, 0 },

417 {"sd_mode", 
IOV_SDMODE
, 0, 
IOVT_UINT32
, 100},

418 {"sd_high•ìd", 
IOV_HISPEED
, 0, 
IOVT_UINT32
, 0 },

419 {"sd_rxchaö", 
IOV_RXCHAIN
, 0, 
IOVT_BOOL
, 0 },

420 {
NULL
, 0, 0, 0, 0 }

424 
	$sdioh_iov¨_›
(
sdioh_öfo_t
 *
si
, c⁄° *
«me
,

425 *
∑øms
, 
∂í
, *
¨g
, 
Àn
, 
boﬁ
 
£t
)

427 c⁄° 
bcm_iov¨_t
 *
vi
 = 
NULL
;

428 
bcmîr‹
 = 0;

429 
vÆ_size
;

430 
öt32
 
öt_vÆ
 = 0;

431 
boﬁ
 
boﬁ_vÆ
;

432 
uöt32
 
a˘i⁄id
;

434 
	`ASSERT
(
«me
);

435 
	`ASSERT
(
Àn
 >= 0);

438 
	`ASSERT
(
£t
 || (
¨g
 && 
Àn
));

439 
	`ASSERT
(!
£t
 || (!
∑øms
 && !
∂í
));

441 
	`sd_åa˚
(("%s: E¡î (%†%s)\n", 
__FUNCTION__
, (
£t
 ? "£t" : "gë"), 
«me
));

443 i‡((
vi
 = 
	`bcm_iov¨_lookup
(
sdioh_iov¨s
, 
«me
)Ë=
NULL
) {

444 
bcmîr‹
 = 
BCME_UNSUPPORTED
;

445 
exô
;

448 i‡((
bcmîr‹
 = 
	`bcm_iov¨_Àncheck
(
vi
, 
¨g
, 
Àn
, 
£t
)) != 0)

449 
exô
;

452 i‡(
∑øms
 =
NULL
) {

453 
∑øms
 = 
¨g
;

454 
∂í
 = 
Àn
;

457 i‡(
vi
->
ty≥
 =
IOVT_VOID
)

458 
vÆ_size
 = 0;

459 i‡(
vi
->
ty≥
 =
IOVT_BUFFER
)

460 
vÆ_size
 = 
Àn
;

462 
vÆ_size
 = ();

464 i‡(
∂í
 >()(
öt_vÆ
))

465 
	`bc›y
(
∑øms
, &
öt_vÆ
, (int_val));

467 
boﬁ_vÆ
 = (
öt_vÆ
 !0Ë? 
TRUE
 : 
FALSE
;

468 
	`BCM_REFERENCE
(
boﬁ_vÆ
);

470 
a˘i⁄id
 = 
£t
 ? 
	`IOV_SVAL
(
vi
->
v¨id
Ë: 
	`IOV_GVAL
(vi->varid);

471 
a˘i⁄id
) {

472 
	`IOV_GVAL
(
IOV_MSGLEVEL
):

473 
öt_vÆ
 = (
öt32
)
sd_msgÀvñ
;

474 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

477 
	`IOV_SVAL
(
IOV_MSGLEVEL
):

478 
sd_msgÀvñ
 = 
öt_vÆ
;

481 
	`IOV_GVAL
(
IOV_BLOCKMODE
):

482 
öt_vÆ
 = (
öt32
)
si
->
sd_blockmode
;

483 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

486 
	`IOV_SVAL
(
IOV_BLOCKMODE
):

487 
si
->
sd_blockmode
 = (
boﬁ
)
öt_vÆ
;

491 
	`IOV_GVAL
(
IOV_BLOCKSIZE
):

492 i‡((
uöt32
)
öt_vÆ
 > 
si
->
num_funcs
) {

493 
bcmîr‹
 = 
BCME_BADARG
;

496 
öt_vÆ
 = (
öt32
)
si
->
˛õ¡_block_size
[int_val];

497 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

500 
	`IOV_SVAL
(
IOV_BLOCKSIZE
):

502 
uöt
 
func
 = ((
uöt32
)
öt_vÆ
 >> 16);

503 
uöt
 
blksize
 = (
uöt16
)
öt_vÆ
;

504 
uöt
 
maxsize
;

506 i‡(
func
 > 
si
->
num_funcs
) {

507 
bcmîr‹
 = 
BCME_BADARG
;

511 
func
) {

512 0: 
maxsize
 = 32; ;

513 1: 
maxsize
 = 
BLOCK_SIZE_4318
; ;

514 2: 
maxsize
 = 
BLOCK_SIZE_4328
; ;

515 : 
maxsize
 = 0;

517 i‡(
blksize
 > 
maxsize
) {

518 
bcmîr‹
 = 
BCME_BADARG
;

521 i‡(!
blksize
) {

522 
blksize
 = 
maxsize
;

526 
si
->
˛õ¡_block_size
[
func
] = 
blksize
;

531 
	`IOV_GVAL
(
IOV_RXCHAIN
):

532 
öt_vÆ
 = (
öt32
)
si
->
u£_rxchaö
;

533 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

536 
	`IOV_GVAL
(
IOV_DMA
):

537 
öt_vÆ
 = (
öt32
)
si
->
sd_u£_dma
;

538 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

541 
	`IOV_SVAL
(
IOV_DMA
):

542 
si
->
sd_u£_dma
 = (
boﬁ
)
öt_vÆ
;

545 
	`IOV_GVAL
(
IOV_USEINTS
):

546 
öt_vÆ
 = (
öt32
)
si
->
u£_˛õ¡_öts
;

547 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

550 
	`IOV_SVAL
(
IOV_USEINTS
):

551 
si
->
u£_˛õ¡_öts
 = (
boﬁ
)
öt_vÆ
;

552 i‡(
si
->
u£_˛õ¡_öts
)

553 
si
->
ötmask
 |
CLIENT_INTR
;

555 
si
->
ötmask
 &~
CLIENT_INTR
;

559 
	`IOV_GVAL
(
IOV_DIVISOR
):

560 
öt_vÆ
 = (
uöt32
)
sd_divis‹
;

561 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

564 
	`IOV_SVAL
(
IOV_DIVISOR
):

565 
sd_divis‹
 = 
öt_vÆ
;

568 
	`IOV_GVAL
(
IOV_POWER
):

569 
öt_vÆ
 = (
uöt32
)
sd_powî
;

570 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

573 
	`IOV_SVAL
(
IOV_POWER
):

574 
sd_powî
 = 
öt_vÆ
;

577 
	`IOV_GVAL
(
IOV_CLOCK
):

578 
öt_vÆ
 = (
uöt32
)
sd_˛ock
;

579 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

582 
	`IOV_SVAL
(
IOV_CLOCK
):

583 
sd_˛ock
 = 
öt_vÆ
;

586 
	`IOV_GVAL
(
IOV_SDMODE
):

587 
öt_vÆ
 = (
uöt32
)
sd_sdmode
;

588 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

591 
	`IOV_SVAL
(
IOV_SDMODE
):

592 
sd_sdmode
 = 
öt_vÆ
;

595 
	`IOV_GVAL
(
IOV_HISPEED
):

596 
öt_vÆ
 = (
uöt32
)
sd_hiok
;

597 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

600 
	`IOV_SVAL
(
IOV_HISPEED
):

601 
sd_hiok
 = 
öt_vÆ
;

604 
	`IOV_GVAL
(
IOV_NUMINTS
):

605 
öt_vÆ
 = (
öt32
)
si
->
öåcou¡
;

606 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

609 
	`IOV_GVAL
(
IOV_NUMLOCALINTS
):

610 
öt_vÆ
 = (
öt32
)0;

611 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

614 
	`IOV_GVAL
(
IOV_HOSTREG
):

616 
sdªg_t
 *
sd_±r
 = (sdªg_à*)
∑øms
;

618 i‡(
sd_±r
->
off£t
 < 
SD_SysAddr
 || sd_±r->off£à> 
SD_MaxCurC≠
) {

619 
	`sd_îr
(("%s: bad off£à0x%x\n", 
__FUNCTION__
, 
sd_±r
->
off£t
));

620 
bcmîr‹
 = 
BCME_BADARG
;

624 
	`sd_åa˚
(("%s:Ñªg%dáàoff£à%d\n", 
__FUNCTION__
,

625 (
sd_±r
->
off£t
 & 1) ? 8 : ((sd_ptr->offset & 2) ? 16 : 32),

626 
sd_±r
->
off£t
));

627 i‡(
sd_±r
->
off£t
 & 1)

628 
öt_vÆ
 = 8;

629 i‡(
sd_±r
->
off£t
 & 2)

630 
öt_vÆ
 = 16;

632 
öt_vÆ
 = 32;

634 
	`bc›y
(&
öt_vÆ
, 
¨g
, (int_val));

638 
	`IOV_SVAL
(
IOV_HOSTREG
):

640 
sdªg_t
 *
sd_±r
 = (sdªg_à*)
∑øms
;

642 i‡(
sd_±r
->
off£t
 < 
SD_SysAddr
 || sd_±r->off£à> 
SD_MaxCurC≠
) {

643 
	`sd_îr
(("%s: bad off£à0x%x\n", 
__FUNCTION__
, 
sd_±r
->
off£t
));

644 
bcmîr‹
 = 
BCME_BADARG
;

648 
	`sd_åa˚
(("%s: wªg%d vÆuê0x%08xáàoff£à%d\n", 
__FUNCTION__
, 
sd_±r
->
vÆue
,

649 (
sd_±r
->
off£t
 & 1) ? 8 : ((sd_ptr->offset & 2) ? 16 : 32),

650 
sd_±r
->
off£t
));

654 
	`IOV_GVAL
(
IOV_DEVREG
):

656 
sdªg_t
 *
sd_±r
 = (sdªg_à*)
∑øms
;

657 
uöt8
 
d©a
 = 0;

659 i‡(
	`sdioh_cfg_ªad
(
si
, 
sd_±r
->
func
, sd_±r->
off£t
, &
d©a
)) {

660 
bcmîr‹
 = 
BCME_SDIO_ERROR
;

664 
öt_vÆ
 = ()
d©a
;

665 
	`bc›y
(&
öt_vÆ
, 
¨g
, (int_val));

669 
	`IOV_SVAL
(
IOV_DEVREG
):

671 
sdªg_t
 *
sd_±r
 = (sdªg_à*)
∑øms
;

672 
uöt8
 
d©a
 = (uöt8)
sd_±r
->
vÆue
;

674 i‡(
	`sdioh_cfg_wrôe
(
si
, 
sd_±r
->
func
, sd_±r->
off£t
, &
d©a
)) {

675 
bcmîr‹
 = 
BCME_SDIO_ERROR
;

682 
bcmîr‹
 = 
BCME_UNSUPPORTED
;

685 
exô
:

687  
bcmîr‹
;

688 
	}
}

690 #i‡
deföed
(
OOB_INTR_ONLY
Ë&& deföed(
HW_OOB
)

692 
SDIOH_API_RC


693 
	$sdioh_íabÀ_hw_oob_öå
(
sdioh_öfo_t
 *
sd
, 
boﬁ
 
íabÀ
)

695 
SDIOH_API_RC
 
°©us
;

696 
uöt8
 
d©a
;

698 i‡(
íabÀ
)

699 
d©a
 = 
SDIO_SEPINT_MASK
 | 
SDIO_SEPINT_OE
 | 
SDIO_SEPINT_ACT_HI
;

701 
d©a
 = 
SDIO_SEPINT_ACT_HI
;

703 
°©us
 = 
	`sdioh_ªque°_byã
(
sd
, 
SDIOH_WRITE
, 0, 
SDIOD_CCCR_BRCM_SEPINT
, &
d©a
);

704  
°©us
;

705 
	}
}

708 
SDIOH_API_RC


709 
	$sdioh_cfg_ªad
(
sdioh_öfo_t
 *
sd
, 
uöt
 
‚c_num
, 
uöt32
 
addr
, 
uöt8
 *
d©a
)

711 
SDIOH_API_RC
 
°©us
;

713 
°©us
 = 
	`sdioh_ªque°_byã
(
sd
, 
SDIOH_READ
, 
‚c_num
, 
addr
, 
d©a
);

714  
°©us
;

715 
	}
}

717 
SDIOH_API_RC


718 
	$sdioh_cfg_wrôe
(
sdioh_öfo_t
 *
sd
, 
uöt
 
‚c_num
, 
uöt32
 
addr
, 
uöt8
 *
d©a
)

721 
SDIOH_API_RC
 
°©us
;

722 
°©us
 = 
	`sdioh_ªque°_byã
(
sd
, 
SDIOH_WRITE
, 
‚c_num
, 
addr
, 
d©a
);

723  
°©us
;

724 
	}
}

727 
	$sdioh_sdmmc_gë_cißddr
(
sdioh_öfo_t
 *
sd
, 
uöt32
 
ªgaddr
)

730 
i
;

731 
uöt32
 
s¸©ch
, 
ªgd©a
;

732 
uöt8
 *
±r
 = (uöt8 *)&
s¸©ch
;

733 
i
 = 0; i < 3; i++) {

734 i‡((
	`sdioh_sdmmc_ˇrd_ªgªad
 (
sd
, 0, 
ªgaddr
, 1, &
ªgd©a
)Ë!
SUCCESS
)

735 
	`sd_îr
(("%s: C™'àªad!\n", 
__FUNCTION__
));

737 *
±r
++ = (
uöt8
Ë
ªgd©a
;

738 
ªgaddr
++;

742 
s¸©ch
 = 
	`…oh32
(scratch);

743 
s¸©ch
 &= 0x0001FFFF;

744  (
s¸©ch
);

745 
	}
}

747 
SDIOH_API_RC


748 
	$sdioh_cis_ªad
(
sdioh_öfo_t
 *
sd
, 
uöt
 
func
, 
uöt8
 *
cisd
, 
uöt32
 
Àngth
)

750 
uöt32
 
cou¡
;

751 
off£t
;

752 
uöt32
 
foo
;

753 
uöt8
 *
cis
 = 
cisd
;

755 
	`sd_åa˚
(("%s: Fun¯%d\n", 
__FUNCTION__
, 
func
));

757 i‡(!
sd
->
func_cis_±r
[
func
]) {

758 
	`bzîo
(
cis
, 
Àngth
);

759 
	`sd_îr
(("%s:Çÿfunc_cis_±r[%d]\n", 
__FUNCTION__
, 
func
));

760  
SDIOH_API_RC_FAIL
;

763 
	`sd_îr
(("%s: func_cis_±r[%d]=0x%04x\n", 
__FUNCTION__
, 
func
, 
sd
->
func_cis_±r
[func]));

765 
cou¡
 = 0; cou¡ < 
Àngth
; count++) {

766 
off£t
 = 
sd
->
func_cis_±r
[
func
] + 
cou¡
;

767 i‡(
	`sdioh_sdmmc_ˇrd_ªgªad
 (
sd
, 0, 
off£t
, 1, &
foo
) < 0) {

768 
	`sd_îr
(("%s:Ñegªad faûed: C™'àªad CIS\n", 
__FUNCTION__
));

769  
SDIOH_API_RC_FAIL
;

772 *
cis
 = (
uöt8
)(
foo
 & 0xff);

773 
cis
++;

776  
SDIOH_API_RC_SUCCESS
;

777 
	}
}

779 
SDIOH_API_RC


780 
	$sdioh_ªque°_byã
(
sdioh_öfo_t
 *
sd
, 
uöt
 
rw
, uöà
func
, uöà
ªgaddr
, 
uöt8
 *
byã
)

782 
îr_ªt
;

783 #i‡
	`deföed
(
MMC_SDIO_ABORT
)

784 
sdio_ab‹t_ªåy
 = 
MMC_SDIO_ABORT_RETRY_LIMIT
;

786 
	`sd_öfo
(("%s:Ñw=%d, func=%d,áddr=0x%05x\n", 
__FUNCTION__
, 
rw
, 
func
, 
ªgaddr
));

788 
	`DHD_PM_RESUME_WAIT
(
sdioh_ªque°_byã_waô
);

789 
	`DHD_PM_RESUME_RETURN_ERROR
(
SDIOH_API_RC_FAIL
);

790 if(
rw
) {

791 i‡(
func
 == 0) {

795 i‡(
ªgaddr
 =
SDIOD_CCCR_IOEN
) {

796 i‡(
gIn°™˚
->
func
[2]) {

797 
	`sdio_˛aim_ho°
(
gIn°™˚
->
func
[2]);

798 i‡(*
byã
 & 
SDIO_FUNC_ENABLE_2
) {

800 
îr_ªt
 = 
	`sdio_íabÀ_func
(
gIn°™˚
->
func
[2]);

801 i‡(
îr_ªt
) {

802 
	`sd_îr
(("bcmsdh_sdmmc:Énable F2 failed:%d",

803 
îr_ªt
));

807 
îr_ªt
 = 
	`sdio_dißbÀ_func
(
gIn°™˚
->
func
[2]);

808 i‡(
îr_ªt
) {

809 
	`sd_îr
(("bcmsdh_sdmmc: Disab F2 failed:%d",

810 
îr_ªt
));

813 
	`sdio_ªÀa£_ho°
(
gIn°™˚
->
func
[2]);

816 #i‡
	`deföed
(
MMC_SDIO_ABORT
)

818 i‡(
ªgaddr
 =
SDIOD_CCCR_IOABORT
) {

823 
sdio_ab‹t_ªåy
--) {

824 i‡(
gIn°™˚
->
func
[func]) {

825 
	`sdio_˛aim_ho°
(
gIn°™˚
->
func
[func]);

831 
	`sdio_wrôeb
(
gIn°™˚
->
func
[func],

832 *
byã
, 
ªgaddr
, &
îr_ªt
);

833 
	`sdio_ªÀa£_ho°
(
gIn°™˚
->
func
[func]);

835 i‡(!
îr_ªt
)

840 i‡(
ªgaddr
 < 0xF0) {

841 
	`sd_îr
(("bcmsdh_sdmmc: F0 Wr:0x%02x: wrôêdißŒowed\n", 
ªgaddr
));

844 i‡(
gIn°™˚
->
func
[func]) {

845 
	`sdio_˛aim_ho°
(
gIn°™˚
->
func
[func]);

846 
	`sdio_f0_wrôeb
(
gIn°™˚
->
func
[func],

847 *
byã
, 
ªgaddr
, &
îr_ªt
);

848 
	`sdio_ªÀa£_ho°
(
gIn°™˚
->
func
[func]);

853 i‡(
gIn°™˚
->
func
[func]) {

854 
	`sdio_˛aim_ho°
(
gIn°™˚
->
func
[func]);

855 
	`sdio_wrôeb
(
gIn°™˚
->
func
[func], *
byã
, 
ªgaddr
, &
îr_ªt
);

856 
	`sdio_ªÀa£_ho°
(
gIn°™˚
->
func
[func]);

861 i‡(
gIn°™˚
->
func
[func]) {

862 
	`sdio_˛aim_ho°
(
gIn°™˚
->
func
[func]);

863 i‡(
func
 == 0) {

864 *
byã
 = 
	`sdio_f0_ªadb
(
gIn°™˚
->
func
[func], 
ªgaddr
, &
îr_ªt
);

866 *
byã
 = 
	`sdio_ªadb
(
gIn°™˚
->
func
[func], 
ªgaddr
, &
îr_ªt
);

868 
	`sdio_ªÀa£_ho°
(
gIn°™˚
->
func
[func]);

872 i‡(
îr_ªt
) {

873 
	`sd_îr
(("bcmsdh_sdmmc: FailedÅo %s byte F%d:@0x%05x=%02x, Err: %d\n",

874 
rw
 ? "Wrôe" : "Ród", 
func
, 
ªgaddr
, *
byã
, 
îr_ªt
));

877  ((
îr_ªt
 =0Ë? 
SDIOH_API_RC_SUCCESS
 : 
SDIOH_API_RC_FAIL
);

878 
	}
}

880 
SDIOH_API_RC


881 
	$sdioh_ªque°_w‹d
(
sdioh_öfo_t
 *
sd
, 
uöt
 
cmd_ty≥
, uöà
rw
, uöà
func
, uöà
addr
,

882 
uöt32
 *
w‹d
, 
uöt
 
nbyãs
)

884 
îr_ªt
 = 
SDIOH_API_RC_FAIL
;

885 #i‡
	`deföed
(
MMC_SDIO_ABORT
)

886 
sdio_ab‹t_ªåy
 = 
MMC_SDIO_ABORT_RETRY_LIMIT
;

889 i‡(
func
 == 0) {

890 
	`sd_îr
(("%s: O∆y CMD52áŒowedÅÿF0.\n", 
__FUNCTION__
));

891  
SDIOH_API_RC_FAIL
;

894 
	`sd_öfo
(("%s: cmd_type=%d,Ñw=%d, func=%d,áddr=0x%05x,Çbytes=%d\n",

895 
__FUNCTION__
, 
cmd_ty≥
, 
rw
, 
func
, 
addr
, 
nbyãs
));

897 
	`DHD_PM_RESUME_WAIT
(
sdioh_ªque°_w‹d_waô
);

898 
	`DHD_PM_RESUME_RETURN_ERROR
(
SDIOH_API_RC_FAIL
);

900 
	`sdio_˛aim_ho°
(
gIn°™˚
->
func
[func]);

902 if(
rw
) {

903 i‡(
nbyãs
 == 4) {

904 
	`sdio_wrôñ
(
gIn°™˚
->
func
[func], *
w‹d
, 
addr
, &
îr_ªt
);

905 } i‡(
nbyãs
 == 2) {

906 
	`sdio_wrôew
(
gIn°™˚
->
func
[func], (*
w‹d
 & 0xFFFF), 
addr
, &
îr_ªt
);

908 
	`sd_îr
(("%s: InvÆidÇbyãs: %d\n", 
__FUNCTION__
, 
nbyãs
));

911 i‡(
nbyãs
 == 4) {

912 *
w‹d
 = 
	`sdio_ªadl
(
gIn°™˚
->
func
[func], 
addr
, &
îr_ªt
);

913 } i‡(
nbyãs
 == 2) {

914 *
w‹d
 = 
	`sdio_ªadw
(
gIn°™˚
->
func
[func], 
addr
, &
îr_ªt
) & 0xFFFF;

916 
	`sd_îr
(("%s: InvÆidÇbyãs: %d\n", 
__FUNCTION__
, 
nbyãs
));

921 
	`sdio_ªÀa£_ho°
(
gIn°™˚
->
func
[func]);

923 i‡(
îr_ªt
) {

924 #i‡
	`deföed
(
MMC_SDIO_ABORT
)

926 
sdio_ab‹t_ªåy
--) {

927 i‡(
gIn°™˚
->
func
[0]) {

928 
	`sdio_˛aim_ho°
(
gIn°™˚
->
func
[0]);

934 
	`sdio_wrôeb
(
gIn°™˚
->
func
[0],

935 
func
, 
SDIOD_CCCR_IOABORT
, &
îr_ªt
);

936 
	`sdio_ªÀa£_ho°
(
gIn°™˚
->
func
[0]);

938 i‡(!
îr_ªt
)

941 i‡(
îr_ªt
)

944 
	`sd_îr
(("bcmsdh_sdmmc: FailedÅo %s word, Err: 0x%08x\n",

945 
rw
 ? "Wrôe" : "Ród", 
îr_ªt
));

949  ((
îr_ªt
 =0Ë? 
SDIOH_API_RC_SUCCESS
 : 
SDIOH_API_RC_FAIL
);

950 
	}
}

952 
SDIOH_API_RC


953 
	$sdioh_ªque°_∑ckë
(
sdioh_öfo_t
 *
sd
, 
uöt
 
fix_öc
, uöà
wrôe
, uöà
func
,

954 
uöt
 
addr
, *
pkt
)

956 
boﬁ
 
fifo
 = (
fix_öc
 =
SDIOH_DATA_FIX
);

957 
uöt32
 
SGCou¡
 = 0;

958 
îr_ªt
 = 0;

959 *
≤ext
, *
µªv
;

960 
uöt
 
âl_Àn
, 
dma_Àn
, 
l·_Àn
, 
x‰ed_Àn
, 
pkt_Àn
;

961 
uöt
 
blk_num
;

962 
blk_size
;

963 
mmc_ªque°
 
mmc_ªq
;

964 
mmc_comm™d
 
mmc_cmd
;

965 
mmc_d©a
 
mmc_d©
;

967 
	`sd_åa˚
(("%s: E¡î\n", 
__FUNCTION__
));

969 
	`ASSERT
(
pkt
);

970 
	`DHD_PM_RESUME_WAIT
(
sdioh_ªque°_∑ckë_waô
);

971 
	`DHD_PM_RESUME_RETURN_ERROR
(
SDIOH_API_RC_FAIL
);

973 
âl_Àn
 = 
x‰ed_Àn
 = 0;

975 
≤ext
 = 
pkt
;Ö√xt;Ö√xà
	`PKTNEXT
(
sd
->
osh
,Önext))

976 
âl_Àn
 +
	`PKTLEN
(
sd
->
osh
, 
≤ext
);

978 
blk_size
 = 
sd
->
˛õ¡_block_size
[
func
];

979 i‡(!
sd
->
u£_rxchaö
 || 
âl_Àn
 <
blk_size
) {

980 
blk_num
 = 0;

981 
dma_Àn
 = 0;

983 
blk_num
 = 
âl_Àn
 / 
blk_size
;

984 
dma_Àn
 = 
blk_num
 * 
blk_size
;

986 
l·_Àn
 = 
âl_Àn
 - 
dma_Àn
;

988 
	`sd_åa˚
(("%s: %s %dBÅo func%d:%08x, %d blks with DMA, %dBÜeftover\n",

989 
__FUNCTION__
, 
wrôe
 ? "W" : "R",

990 
âl_Àn
, 
func
, 
addr
, 
blk_num
, 
l·_Àn
));

992 i‡(0 !
dma_Àn
) {

993 
	`mem£t
(&
mmc_ªq
, 0, (
mmc_ªque°
));

994 
	`mem£t
(&
mmc_cmd
, 0, (
mmc_comm™d
));

995 
	`mem£t
(&
mmc_d©
, 0, (
mmc_d©a
));

998 
µªv
 = 
pkt
;

999 
≤ext
 = 
pkt
;

1000 
≤ext
 && 
dma_Àn
;

1001 
≤ext
 = 
	`PKTNEXT
(
sd
->
osh
,Önext)) {

1002 
pkt_Àn
 = 
	`PKTLEN
(
sd
->
osh
, 
≤ext
);

1004 i‡(
dma_Àn
 > 
pkt_Àn
)

1005 
dma_Àn
 -
pkt_Àn
;

1007 
pkt_Àn
 = 
x‰ed_Àn
 = 
dma_Àn
;

1008 
dma_Àn
 = 0;

1009 
pkt
 = 
≤ext
;

1012 
	`sg_£t_buf
(&
sd
->
sg_li°
[
SGCou¡
++],

1013 (
uöt8
*)
	`PKTDATA
(
sd
->
osh
, 
≤ext
),

1014 
pkt_Àn
);

1016 i‡(
SGCou¡
 >
SDIOH_SDMMC_MAX_SG_ENTRIES
) {

1017 
	`sd_îr
(("%s: sgÜistÉntriesÉxceedÜimit\n",

1018 
__FUNCTION__
));

1019  (
SDIOH_API_RC_FAIL
);

1023 
mmc_d©
.
sg
 = 
sd
->
sg_li°
;

1024 
mmc_d©
.
sg_Àn
 = 
SGCou¡
;

1025 
mmc_d©
.
blksz
 = 
blk_size
;

1026 
mmc_d©
.
blocks
 = 
blk_num
;

1027 
mmc_d©
.
Êags
 = 
wrôe
 ? 
MMC_DATA_WRITE
 : 
MMC_DATA_READ
;

1029 
mmc_cmd
.
›code
 = 53;

1030 
mmc_cmd
.
¨g
 = 
wrôe
 ? 1<<31 : 0;

1031 
mmc_cmd
.
¨g
 |(
func
 & 0x7) << 28;

1032 
mmc_cmd
.
¨g
 |= 1<<27;

1033 
mmc_cmd
.
¨g
 |
fifo
 ? 0 : 1<<26;

1034 
mmc_cmd
.
¨g
 |(
addr
 & 0x1FFFF) << 9;

1035 
mmc_cmd
.
¨g
 |
blk_num
 & 0x1FF;

1036 
mmc_cmd
.
Êags
 = 
MMC_RSP_SPI_R5
 | 
MMC_RSP_R5
 | 
MMC_CMD_ADTC
;

1038 
mmc_ªq
.
cmd
 = &
mmc_cmd
;

1039 
mmc_ªq
.
d©a
 = &
mmc_d©
;

1041 
	`sdio_˛aim_ho°
(
gIn°™˚
->
func
[func]);

1042 
	`mmc_£t_d©a_timeout
(&
mmc_d©
, 
gIn°™˚
->
func
[func]->
ˇrd
);

1043 
	`mmc_waô_f‹_ªq
(
gIn°™˚
->
func
[func]->
ˇrd
->
ho°
, &
mmc_ªq
);

1044 
	`sdio_ªÀa£_ho°
(
gIn°™˚
->
func
[func]);

1046 
îr_ªt
 = 
mmc_cmd
.
îr‹
? mmc_cmd.îr‹ : 
mmc_d©
.error;

1047 i‡(0 !
îr_ªt
) {

1048 
	`sd_îr
(("%s:CMD53 %s failed with code %d\n",

1049 
__FUNCTION__
,

1050 
wrôe
 ? "write" : "read",

1051 
îr_ªt
));

1052 
	`sd_îr
(("%s:DisablingÑxchainánd fire it with PIO\n",

1053 
__FUNCTION__
));

1054 
sd
->
u£_rxchaö
 = 
FALSE
;

1055 
pkt
 = 
µªv
;

1056 
l·_Àn
 = 
âl_Àn
;

1057 } i‡(!
fifo
) {

1058 
addr
 =ádd∏+ 
âl_Àn
 - 
l·_Àn
 - 
dma_Àn
;

1063 i‡(0 !
l·_Àn
) {

1065 
	`sdio_˛aim_ho°
(
gIn°™˚
->
func
[func]);

1066 
≤ext
 = 
pkt
;Ö√xt;Ö√xà
	`PKTNEXT
(
sd
->
osh
,Önext)) {

1067 
uöt8
 *
buf
 = (uöt8*)
	`PKTDATA
(
sd
->
osh
, 
≤ext
) +

1068 
x‰ed_Àn
;

1069 
pkt_Àn
 = 
	`PKTLEN
(
sd
->
osh
, 
≤ext
);

1070 i‡(0 !
x‰ed_Àn
) {

1071 
pkt_Àn
 -
x‰ed_Àn
;

1072 
x‰ed_Àn
 = 0;

1079 i‡(
wrôe
 =0 || 
pkt_Àn
 < 32)

1080 
pkt_Àn
 = (pkt_len + 3) & 0xFFFFFFFC;

1081 i‡(
pkt_Àn
 % 
blk_size
)

1082 
pkt_Àn
 +
blk_size
 - (pkt_len % blk_size);

1084 #ifde‡
CONFIG_MMC_MSM7X00A


1085 i‡((
pkt_Àn
 % 64) == 32) {

1086 
	`sd_åa˚
(("%s: Roundög u∞TXÖackë +=32\n", 
__FUNCTION__
));

1087 
pkt_Àn
 += 32;

1091 i‡((
wrôe
Ë&& (!
fifo
))

1092 
îr_ªt
 = 
	`sdio_mem˝y_toio
(

1093 
gIn°™˚
->
func
[func],

1094 
addr
, 
buf
, 
pkt_Àn
);

1095 i‡(
wrôe
)

1096 
îr_ªt
 = 
	`sdio_mem˝y_toio
(

1097 
gIn°™˚
->
func
[func],

1098 
addr
, 
buf
, 
pkt_Àn
);

1099 i‡(
fifo
)

1100 
îr_ªt
 = 
	`sdio_ªadsb
(

1101 
gIn°™˚
->
func
[func],

1102 
buf
, 
addr
, 
pkt_Àn
);

1104 
îr_ªt
 = 
	`sdio_mem˝y_‰omio
(

1105 
gIn°™˚
->
func
[func],

1106 
buf
, 
addr
, 
pkt_Àn
);

1108 i‡(
îr_ªt
)

1109 
	`sd_îr
(("%s: %s FAILED %p[%d],áddr=0x%05x,Ökt_len=%d, ERR=%d\n",

1110 
__FUNCTION__
,

1111 (
wrôe
) ? "TX" : "RX",

1112 
≤ext
, 
SGCou¡
, 
addr
, 
pkt_Àn
, 
îr_ªt
));

1114 
	`sd_åa˚
(("%s: %s xfr'd %p[%d],áddr=0x%05x,Üen=%d\n",

1115 
__FUNCTION__
,

1116 (
wrôe
) ? "TX" : "RX",

1117 
≤ext
, 
SGCou¡
, 
addr
, 
pkt_Àn
));

1119 i‡(!
fifo
)

1120 
addr
 +
pkt_Àn
;

1121 
SGCou¡
 ++;

1123 
	`sdio_ªÀa£_ho°
(
gIn°™˚
->
func
[func]);

1126 
	`sd_åa˚
(("%s: Exô\n", 
__FUNCTION__
));

1127  ((
îr_ªt
 =0Ë? 
SDIOH_API_RC_SUCCESS
 : 
SDIOH_API_RC_FAIL
);

1128 
	}
}

1142 
SDIOH_API_RC


1143 
	$sdioh_ªque°_buf„r
(
sdioh_öfo_t
 *
sd
, 
uöt
 
pio_dma
, uöà
fix_öc
, uöà
wrôe
, uöà
func
,

1144 
uöt
 
addr
, uöà
ªg_width
, uöà
buÊí_u
, 
uöt8
 *
buf„r
, *
pkt
)

1146 
SDIOH_API_RC
 
Sètus
;

1147 *
mypkt
 = 
NULL
;

1149 
	`sd_åa˚
(("%s: E¡î\n", 
__FUNCTION__
));

1151 
	`DHD_PM_RESUME_WAIT
(
sdioh_ªque°_buf„r_waô
);

1152 
	`DHD_PM_RESUME_RETURN_ERROR
(
SDIOH_API_RC_FAIL
);

1154 i‡(
pkt
 =
NULL
) {

1155 
	`sd_d©a
(("%s: CreatingÇew %s Packet,Üen=%d\n",

1156 
__FUNCTION__
, 
wrôe
 ? "TX" : "RX", 
buÊí_u
));

1157 #ifde‡
CONFIG_DHD_USE_STATIC_BUF


1158 i‡(!(
mypkt
 = 
	`PKTGET_STATIC
(
sd
->
osh
, 
buÊí_u
, 
wrôe
 ? 
TRUE
 : 
FALSE
))) {

1160 i‡(!(
mypkt
 = 
	`PKTGET
(
sd
->
osh
, 
buÊí_u
, 
wrôe
 ? 
TRUE
 : 
FALSE
))) {

1162 
	`sd_îr
(("%s: PKTGET failed:Üen %d\n",

1163 
__FUNCTION__
, 
buÊí_u
));

1164  
SDIOH_API_RC_FAIL
;

1168 i‡(
wrôe
) {

1169 
	`bc›y
(
buf„r
, 
	`PKTDATA
(
sd
->
osh
, 
mypkt
), 
buÊí_u
);

1172 
Sètus
 = 
	`sdioh_ªque°_∑ckë
(
sd
, 
fix_öc
, 
wrôe
, 
func
, 
addr
, 
mypkt
);

1175 i‡(!
wrôe
) {

1176 
	`bc›y
(
	`PKTDATA
(
sd
->
osh
, 
mypkt
), 
buf„r
, 
buÊí_u
);

1178 #ifde‡
CONFIG_DHD_USE_STATIC_BUF


1179 
	`PKTFREE_STATIC
(
sd
->
osh
, 
mypkt
, 
wrôe
 ? 
TRUE
 : 
FALSE
);

1181 
	`PKTFREE
(
sd
->
osh
, 
mypkt
, 
wrôe
 ? 
TRUE
 : 
FALSE
);

1183 } i‡(((
uöt32
)(
	`PKTDATA
(
sd
->
osh
, 
pkt
)Ë& 
DMA_ALIGN_MASK
) != 0) {

1187 
	`ASSERT
(
	`PKTNEXT
(
sd
->
osh
, 
pkt
Ë=
NULL
);

1189 
	`sd_d©a
(("%s: Creatingáligned %s Packet,Üen=%d\n",

1190 
__FUNCTION__
, 
wrôe
 ? "TX" : "RX", 
	`PKTLEN
(
sd
->
osh
, 
pkt
)));

1191 #ifde‡
CONFIG_DHD_USE_STATIC_BUF


1192 i‡(!(
mypkt
 = 
	`PKTGET_STATIC
(
sd
->
osh
, 
	`PKTLEN
(sd->osh, 
pkt
), 
wrôe
 ? 
TRUE
 : 
FALSE
))) {

1194 i‡(!(
mypkt
 = 
	`PKTGET
(
sd
->
osh
, 
	`PKTLEN
(sd->osh, 
pkt
), 
wrôe
 ? 
TRUE
 : 
FALSE
))) {

1196 
	`sd_îr
(("%s: PKTGET failed:Üen %d\n",

1197 
__FUNCTION__
, 
	`PKTLEN
(
sd
->
osh
, 
pkt
)));

1198  
SDIOH_API_RC_FAIL
;

1202 i‡(
wrôe
) {

1203 
	`bc›y
(
	`PKTDATA
(
sd
->
osh
, 
pkt
),

1204 
	`PKTDATA
(
sd
->
osh
, 
mypkt
),

1205 
	`PKTLEN
(
sd
->
osh
, 
pkt
));

1208 
Sètus
 = 
	`sdioh_ªque°_∑ckë
(
sd
, 
fix_öc
, 
wrôe
, 
func
, 
addr
, 
mypkt
);

1211 i‡(!
wrôe
) {

1212 
	`bc›y
(
	`PKTDATA
(
sd
->
osh
, 
mypkt
),

1213 
	`PKTDATA
(
sd
->
osh
, 
pkt
),

1214 
	`PKTLEN
(
sd
->
osh
, 
mypkt
));

1216 #ifde‡
CONFIG_DHD_USE_STATIC_BUF


1217 
	`PKTFREE_STATIC
(
sd
->
osh
, 
mypkt
, 
wrôe
 ? 
TRUE
 : 
FALSE
);

1219 
	`PKTFREE
(
sd
->
osh
, 
mypkt
, 
wrôe
 ? 
TRUE
 : 
FALSE
);

1222 
	`sd_d©a
(("%s: Aligned %s Packet, direct DMA\n",

1223 
__FUNCTION__
, 
wrôe
 ? "Tx" : "Rx"));

1224 
Sètus
 = 
	`sdioh_ªque°_∑ckë
(
sd
, 
fix_öc
, 
wrôe
, 
func
, 
addr
, 
pkt
);

1227  (
Sètus
);

1228 
	}
}

1232 
	$sdioh_ab‹t
(
sdioh_öfo_t
 *
sd
, 
uöt
 
func
)

1234 #i‡
	`deföed
(
MMC_SDIO_ABORT
)

1235 
t_func
 = (Ë
func
;

1237 
	`sd_åa˚
(("%s: E¡î\n", 
__FUNCTION__
));

1239 #i‡
	`deföed
(
MMC_SDIO_ABORT
)

1241 
	`sdioh_ªque°_byã
(
sd
, 
SD_IO_OP_WRITE
, 
SDIO_FUNC_0
, 
SDIOD_CCCR_IOABORT
, &
t_func
);

1244 
	`sd_åa˚
(("%s: Exô\n", 
__FUNCTION__
));

1245  
SDIOH_API_RC_SUCCESS
;

1246 
	}
}

1249 
	$sdioh_sdio_ª£t
(
sdioh_öfo_t
 *
si
)

1251 
	`sd_åa˚
(("%s: E¡î\n", 
__FUNCTION__
));

1252 
	`sd_åa˚
(("%s: Exô\n", 
__FUNCTION__
));

1253  
SDIOH_API_RC_SUCCESS
;

1254 
	}
}

1258 
	$sdioh_sdmmc_devöå_off
(
sdioh_öfo_t
 *
sd
)

1260 
	`sd_åa˚
(("%s: %d\n", 
__FUNCTION__
, 
sd
->
u£_˛õ¡_öts
));

1261 
sd
->
ötmask
 &~
CLIENT_INTR
;

1262 
	}
}

1266 
	$sdioh_sdmmc_devöå_⁄
(
sdioh_öfo_t
 *
sd
)

1268 
	`sd_åa˚
(("%s: %d\n", 
__FUNCTION__
, 
sd
->
u£_˛õ¡_öts
));

1269 
sd
->
ötmask
 |
CLIENT_INTR
;

1270 
	}
}

1274 
	$sdioh_sdmmc_ˇrd_ªgªad
(
sdioh_öfo_t
 *
sd
, 
func
, 
uöt32
 
ªgaddr
, 
ªgsize
, uöt32 *
d©a
)

1277 i‡((
func
 =0Ë|| (
ªgsize
 == 1)) {

1278 
uöt8
 
ãmp
 = 0;

1280 
	`sdioh_ªque°_byã
(
sd
, 
SDIOH_READ
, 
func
, 
ªgaddr
, &
ãmp
);

1281 *
d©a
 = 
ãmp
;

1282 *
d©a
 &= 0xff;

1283 
	`sd_d©a
(("%s: byteÑead data=0x%02x\n",

1284 
__FUNCTION__
, *
d©a
));

1286 
	`sdioh_ªque°_w‹d
(
sd
, 0, 
SDIOH_READ
, 
func
, 
ªgaddr
, 
d©a
, 
ªgsize
);

1287 i‡(
ªgsize
 == 2)

1288 *
d©a
 &= 0xffff;

1290 
	`sd_d©a
(("%s: wordÑead data=0x%08x\n",

1291 
__FUNCTION__
, *
d©a
));

1294  
SUCCESS
;

1295 
	}
}

1297 #i‡!
deföed
(
OOB_INTR_ONLY
)

1299 
	$IRQH™dÀr
(
sdio_func
 *
func
)

1301 
sdioh_öfo_t
 *
sd
;

1303 
	`sd_åa˚
(("bcmsdh_sdmmc: ***IRQHandler\n"));

1304 
sd
 = 
gIn°™˚
->sd;

1306 
	`ASSERT
(
sd
 !
NULL
);

1307 
	`sdio_ªÀa£_ho°
(
gIn°™˚
->
func
[0]);

1309 i‡(
sd
->
u£_˛õ¡_öts
) {

1310 
sd
->
öåcou¡
++;

1311 
	`ASSERT
(
sd
->
öå_h™dÀr
);

1312 
	`ASSERT
(
sd
->
öå_h™dÀr_¨g
);

1313 (
sd
->
öå_h™dÀr
)(sd->
öå_h™dÀr_¨g
);

1315 
	`sd_îr
(("bcmsdh_sdmmc: ***IRQHandler\n"));

1317 
	`sd_îr
(("%s: NotÑeady for intr:Énabled %d, handler %p\n",

1318 
__FUNCTION__
, 
sd
->
˛õ¡_öå_íabÀd
, sd->
öå_h™dÀr
));

1321 
	`sdio_˛aim_ho°
(
gIn°™˚
->
func
[0]);

1322 
	}
}

1325 
	$IRQH™dÀrF2
(
sdio_func
 *
func
)

1327 
sdioh_öfo_t
 *
sd
;

1329 
	`sd_åa˚
(("bcmsdh_sdmmc: ***IRQHandlerF2\n"));

1331 
sd
 = 
gIn°™˚
->sd;

1333 
	`ASSERT
(
sd
 !
NULL
);

1334 
	`BCM_REFERENCE
(
sd
);

1335 
	}
}

1338 #ifde‡
NOTUSED


1341 
	$sdioh_sdmmc_ˇrd_ªgwrôe
(
sdioh_öfo_t
 *
sd
, 
func
, 
uöt32
 
ªgaddr
, 
ªgsize
, uöt32 
d©a
)

1344 i‡((
func
 =0Ë|| (
ªgsize
 == 1)) {

1345 
uöt8
 
ãmp
;

1347 
ãmp
 = 
d©a
 & 0xff;

1348 
	`sdioh_ªque°_byã
(
sd
, 
SDIOH_READ
, 
func
, 
ªgaddr
, &
ãmp
);

1349 
	`sd_d©a
(("%s: byte write data=0x%02x\n",

1350 
__FUNCTION__
, 
d©a
));

1352 i‡(
ªgsize
 == 2)

1353 
d©a
 &= 0xffff;

1355 
	`sdioh_ªque°_w‹d
(
sd
, 0, 
SDIOH_READ
, 
func
, 
ªgaddr
, &
d©a
, 
ªgsize
);

1357 
	`sd_d©a
(("%s: word write data=0x%08x\n",

1358 
__FUNCTION__
, 
d©a
));

1361  
SUCCESS
;

1362 
	}
}

1366 
	$sdioh_°¨t
(
sdioh_öfo_t
 *
si
, 
°age
)

1368 
ªt
;

1369 
sdioh_öfo_t
 *
sd
 = 
gIn°™˚
->sd;

1371 i‡(!
sd
)  (0);

1377 i‡(
gIn°™˚
->
func
[0]) {

1378 i‡(
°age
 == 0) {

1388 i‡((
ªt
 = 
	`sdio_ª£t_comm
(
gIn°™˚
->
func
[0]->
ˇrd
))) {

1389 
	`sd_îr
(("%†Faûed,Éº‹ = %d\n", 
__FUNCTION__
, 
ªt
));

1390  
ªt
;

1393 
sd
->
num_funcs
 = 2;

1394 
sd
->
sd_blockmode
 = 
TRUE
;

1395 
sd
->
u£_˛õ¡_öts
 = 
TRUE
;

1396 
sd
->
˛õ¡_block_size
[0] = 64;

1398 i‡(
gIn°™˚
->
func
[1]) {

1400 
	`sdio_˛aim_ho°
(
gIn°™˚
->
func
[1]);

1402 
sd
->
˛õ¡_block_size
[1] = 64;

1403 i‡(
	`sdio_£t_block_size
(
gIn°™˚
->
func
[1], 64)) {

1404 
	`sd_îr
(("bcmsdh_sdmmc: FailedÅo set F1 blocksize\n"));

1408 
	`sdio_ªÀa£_ho°
(
gIn°™˚
->
func
[1]);

1411 i‡(
gIn°™˚
->
func
[2]) {

1413 
	`sdio_˛aim_ho°
(
gIn°™˚
->
func
[2]);

1415 
sd
->
˛õ¡_block_size
[2] = 
sd_f2_blocksize
;

1416 i‡(
	`sdio_£t_block_size
(
gIn°™˚
->
func
[2],

1417 
sd_f2_blocksize
)) {

1418 
	`sd_îr
(("bcmsdh_sdmmc: FailedÅo set F2 "

1419 "blocksizêtÿ%d\n", 
sd_f2_blocksize
));

1423 
	`sdio_ªÀa£_ho°
(
gIn°™˚
->
func
[2]);

1426 
	`sdioh_sdmmc_ˇrd_íabÀfuncs
(
sd
);

1429 #i‡!
	`deföed
(
OOB_INTR_ONLY
)

1430 
	`sdio_˛aim_ho°
(
gIn°™˚
->
func
[0]);

1431 i‡(
gIn°™˚
->
func
[2])

1432 
	`sdio_˛aim_úq
(
gIn°™˚
->
func
[2], 
IRQH™dÀrF2
);

1433 i‡(
gIn°™˚
->
func
[1])

1434 
	`sdio_˛aim_úq
(
gIn°™˚
->
func
[1], 
IRQH™dÀr
);

1435 
	`sdio_ªÀa£_ho°
(
gIn°™˚
->
func
[0]);

1437 #i‡
	`deföed
(
HW_OOB
)

1438 
	`sdioh_íabÀ_func_öå
();

1440 
	`bcmsdh_oob_öå_£t
(
TRUE
);

1445 
	`sd_îr
(("%†Faûed\n", 
__FUNCTION__
));

1448 
	}
}

1451 
	$sdioh_°›
(
sdioh_öfo_t
 *
si
)

1459 i‡(
gIn°™˚
->
func
[0]) {

1460 #i‡!
	`deföed
(
OOB_INTR_ONLY
)

1461 
	`sdio_˛aim_ho°
(
gIn°™˚
->
func
[0]);

1462 i‡(
gIn°™˚
->
func
[1])

1463 
	`sdio_ªÀa£_úq
(
gIn°™˚
->
func
[1]);

1464 i‡(
gIn°™˚
->
func
[2])

1465 
	`sdio_ªÀa£_úq
(
gIn°™˚
->
func
[2]);

1466 
	`sdio_ªÀa£_ho°
(
gIn°™˚
->
func
[0]);

1468 #i‡
	`deföed
(
HW_OOB
)

1469 
	`sdioh_dißbÀ_func_öå
();

1471 
	`bcmsdh_oob_öå_£t
(
FALSE
);

1475 
	`sd_îr
(("%†Faûed\n", 
__FUNCTION__
));

1477 
	}
}

1480 
	$sdioh_waôlock‰ì
(
sdioh_öfo_t
 *
sd
)

1483 
	}
}

1486 
SDIOH_API_RC


1487 
	$sdioh_gpioouãn
(
sdioh_öfo_t
 *
sd
, 
uöt32
 
gpio
)

1489  
SDIOH_API_RC_FAIL
;

1490 
	}
}

1492 
SDIOH_API_RC


1493 
	$sdioh_gpioout
(
sdioh_öfo_t
 *
sd
, 
uöt32
 
gpio
, 
boﬁ
 
íab
)

1495  
SDIOH_API_RC_FAIL
;

1496 
	}
}

1498 
boﬁ


1499 
	$sdioh_gpioö
(
sdioh_öfo_t
 *
sd
, 
uöt32
 
gpio
)

1501  
FALSE
;

1502 
	}
}

1504 
SDIOH_API_RC


1505 
	$sdioh_gpio_öô
(
sdioh_öfo_t
 *
sd
)

1507  
SDIOH_API_RC_FAIL
;

1508 
	}
}

	@bcmsdh_sdmmc_linux.c

27 
	~<ty≥defs.h
>

28 
	~<bcmutûs.h
>

29 
	~<sdio.h
>

30 
	~<bcmsdbus.h
>

31 
	~<sdiov¨.h
>

33 
	~<löux/sched.h
>

35 
	~<löux/mmc/c‹e.h
>

36 
	~<löux/mmc/ˇrd.h
>

37 
	~<löux/mmc/sdio_func.h
>

38 
	~<löux/mmc/sdio_ids.h
>

40 #i‡!
deföed
(
SDIO_VENDOR_ID_BROADCOM
)

41 
	#SDIO_VENDOR_ID_BROADCOM
 0x02d0

	)

44 
	#SDIO_DEVICE_ID_BROADCOM_DEFAULT
 0x0000

	)

46 #i‡!
deföed
(
SDIO_DEVICE_ID_BROADCOM_4325_SDGWB
)

47 
	#SDIO_DEVICE_ID_BROADCOM_4325_SDGWB
 0x0492

	)

49 #i‡!
deföed
(
SDIO_DEVICE_ID_BROADCOM_4325
)

50 
	#SDIO_DEVICE_ID_BROADCOM_4325
 0x0493

	)

52 #i‡!
deföed
(
SDIO_DEVICE_ID_BROADCOM_4329
)

53 
	#SDIO_DEVICE_ID_BROADCOM_4329
 0x4329

	)

55 #i‡!
deföed
(
SDIO_DEVICE_ID_BROADCOM_4319
)

56 
	#SDIO_DEVICE_ID_BROADCOM_4319
 0x4319

	)

58 #i‡!
deföed
(
SDIO_DEVICE_ID_BROADCOM_4330
)

59 
	#SDIO_DEVICE_ID_BROADCOM_4330
 0x4330

	)

61 #i‡!
deföed
(
SDIO_DEVICE_ID_BROADCOM_4334
)

62 
	#SDIO_DEVICE_ID_BROADCOM_4334
 0x4334

	)

64 #i‡!
deföed
(
SDIO_DEVICE_ID_BROADCOM_4324
)

65 
	#SDIO_DEVICE_ID_BROADCOM_4324
 0x4324

	)

67 #i‡!
deföed
(
SDIO_DEVICE_ID_BROADCOM_43239
)

68 
	#SDIO_DEVICE_ID_BROADCOM_43239
 43239

	)

72 
	~<bcmsdh_sdmmc.h
>

74 
	~<dhd_dbg.h
>

76 #ifde‡
WL_CFG80211


77 
wl_cfg80211_£t_∑ª¡_dev
(*
dev
);

80 
sdioh_sdmmc_devöå_off
(
sdioh_öfo_t
 *
sd
);

81 
sdioh_sdmmc_devöå_⁄
(
sdioh_öfo_t
 *
sd
);

82 
dhd_os_check_wakñock
(*
dhdp
);

83 
dhd_os_check_if_up
(*
dhdp
);

84 *
bcmsdh_gë_drvd©a
();

86 
sdio_fun˘i⁄_öô
();

87 
sdio_fun˘i⁄_˛ónup
();

89 
	#DESCRIPTION
 "bcmsdh_sdmm¯Drivî"

	)

90 
	#AUTHOR
 "Brﬂdcom C‹p‹©i⁄"

	)

93 
	g˛ockovîride
 = 0;

95 
moduÀ_∑øm
(
˛ockovîride
, , 0644);

96 
MODULE_PARM_DESC
(
˛ockovîride
, "SDIO card clock override");

98 
PBCMSDH_SDMMC_INSTANCE
 
	ggIn°™˚
;

101 
	#BCMSDH_SDMMC_MAX_DEVICES
 1

	)

103 
bcmsdh_¥obe
(
devi˚
 *
dev
);

104 
bcmsdh_ªmove
(
devi˚
 *
dev
);

105 vﬁ©ûê
boﬁ
 
dhd_mmc_su•íd
;

107 
	$bcmsdh_sdmmc_¥obe
(
sdio_func
 *
func
,

108 c⁄° 
sdio_devi˚_id
 *
id
)

110 
ªt
 = 0;

111 
sdio_func
 
sdio_func_0
;

113 i‡(
func
) {

114 
	`sd_åa˚
(("bcmsdh_sdmmc: %†E¡î\n", 
__FUNCTION__
));

115 
	`sd_åa˚
(("sdio_bcmsdh: func->˛ass=%x\n", 
func
->
˛ass
));

116 
	`sd_åa˚
(("sdio_víd‹: 0x%04x\n", 
func
->
víd‹
));

117 
	`sd_åa˚
(("sdio_devi˚: 0x%04x\n", 
func
->
devi˚
));

118 
	`sd_åa˚
(("Fun˘i⁄#: 0x%04x\n", 
func
->
num
));

120 i‡(
func
->
num
 == 1) {

121 
sdio_func_0
.
num
 = 0;

122 
sdio_func_0
.
ˇrd
 = 
func
->card;

123 
gIn°™˚
->
func
[0] = &
sdio_func_0
;

124 if(
func
->
devi˚
 == 0x4) {

125 
gIn°™˚
->
func
[2] = 
NULL
;

126 
	`sd_åa˚
(("NIC found, calling bcmsdh_probe...\n"));

127 
ªt
 = 
	`bcmsdh_¥obe
(&
func
->
dev
);

131 
gIn°™˚
->
func
[func->
num
] = func;

133 i‡(
func
->
num
 == 2) {

134 #ifde‡
WL_CFG80211


135 
	`wl_cfg80211_£t_∑ª¡_dev
(&
func
->
dev
);

137 
	`sd_åa˚
(("F2 found, calling bcmsdh_probe...\n"));

138 
ªt
 = 
	`bcmsdh_¥obe
(&
func
->
dev
);

141 
ªt
 = -
ENODEV
;

144  
ªt
;

145 
	}
}

147 
	$bcmsdh_sdmmc_ªmove
(
sdio_func
 *
func
)

149 i‡(
func
) {

150 
	`sd_åa˚
(("bcmsdh_sdmmc: %†E¡î\n", 
__FUNCTION__
));

151 
	`sd_öfo
(("sdio_bcmsdh: func->˛ass=%x\n", 
func
->
˛ass
));

152 
	`sd_öfo
(("sdio_víd‹: 0x%04x\n", 
func
->
víd‹
));

153 
	`sd_öfo
(("sdio_devi˚: 0x%04x\n", 
func
->
devi˚
));

154 
	`sd_öfo
(("Fun˘i⁄#: 0x%04x\n", 
func
->
num
));

156 i‡(
gIn°™˚
->
func
[2]) {

157 
	`sd_åa˚
(("F2 found, calling bcmsdh_remove...\n"));

158 
	`bcmsdh_ªmove
(&
func
->
dev
);

159 
gIn°™˚
->
func
[2] = 
NULL
;

161 i‡(
func
->
num
 == 1) {

162 
	`sdio_˛aim_ho°
(
func
);

163 
	`sdio_dißbÀ_func
(
func
);

164 
	`sdio_ªÀa£_ho°
(
func
);

165 
gIn°™˚
->
func
[1] = 
NULL
;

168 
	}
}

171 c⁄° 
sdio_devi˚_id
 
	gbcmsdh_sdmmc_ids
[] = {

172 { 
SDIO_DEVICE
(
SDIO_VENDOR_ID_BROADCOM
, 
SDIO_DEVICE_ID_BROADCOM_DEFAULT
) },

173 { 
SDIO_DEVICE
(
SDIO_VENDOR_ID_BROADCOM
, 
SDIO_DEVICE_ID_BROADCOM_4325_SDGWB
) },

174 { 
SDIO_DEVICE
(
SDIO_VENDOR_ID_BROADCOM
, 
SDIO_DEVICE_ID_BROADCOM_4325
) },

175 { 
SDIO_DEVICE
(
SDIO_VENDOR_ID_BROADCOM
, 
SDIO_DEVICE_ID_BROADCOM_4329
) },

176 { 
SDIO_DEVICE
(
SDIO_VENDOR_ID_BROADCOM
, 
SDIO_DEVICE_ID_BROADCOM_4319
) },

177 { 
SDIO_DEVICE
(
SDIO_VENDOR_ID_BROADCOM
, 
SDIO_DEVICE_ID_BROADCOM_4330
) },

178 { 
SDIO_DEVICE
(
SDIO_VENDOR_ID_BROADCOM
, 
SDIO_DEVICE_ID_BROADCOM_4334
) },

179 { 
SDIO_DEVICE
(
SDIO_VENDOR_ID_BROADCOM
, 
SDIO_DEVICE_ID_BROADCOM_4324
) },

180 { 
SDIO_DEVICE
(
SDIO_VENDOR_ID_BROADCOM
, 
SDIO_DEVICE_ID_BROADCOM_43239
) },

181 { 
SDIO_DEVICE_CLASS
(
SDIO_CLASS_NONE
) },

185 
MODULE_DEVICE_TABLE
(
sdio
, 
bcmsdh_sdmmc_ids
);

187 #i‡(
LINUX_VERSION_CODE
 > 
KERNEL_VERSION
(2, 6, 39)Ë&& 
deföed
(
CONFIG_PM
)

188 
	$bcmsdh_sdmmc_su•íd
(
devi˚
 *
pdev
)

190 
sdio_func
 *
func
 = 
	`dev_to_sdio_func
(
pdev
);

191 
mmc_pm_Êag_t
 
sdio_Êags
;

192 
ªt
;

194 i‡(
func
->
num
 != 2)

197 
	`sd_åa˚_hw4
(("%†E¡î\n", 
__FUNCTION__
));

199 i‡(
	`dhd_os_check_wakñock
(
	`bcmsdh_gë_drvd©a
()))

200  -
EBUSY
;

202 
sdio_Êags
 = 
	`sdio_gë_ho°_pm_ˇps
(
func
);

204 i‡(!(
sdio_Êags
 & 
MMC_PM_KEEP_POWER
)) {

205 
	`sd_îr
(("%s: c™'àkì∞powî whûêho° i†su•íded\n", 
__FUNCTION__
));

206  -
EINVAL
;

210 
ªt
 = 
	`sdio_£t_ho°_pm_Êags
(
func
, 
MMC_PM_KEEP_POWER
);

211 i‡(
ªt
) {

212 
	`sd_îr
(("%s:Éº‹ whûêåyögÅÿkì∞powî\n", 
__FUNCTION__
));

213  
ªt
;

216 #i‡
	`deföed
(
OOB_INTR_ONLY
)

217 
	`bcmsdh_oob_öå_£t
(0);

219 
dhd_mmc_su•íd
 = 
TRUE
;

220 
	`smp_mb
();

223 
	}
}

225 
	$bcmsdh_sdmmc_ªsume
(
devi˚
 *
pdev
)

227 #i‡
	`deföed
(
OOB_INTR_ONLY
)

228 
sdio_func
 *
func
 = 
	`dev_to_sdio_func
(
pdev
);

230 
	`sd_åa˚_hw4
(("%†E¡î\n", 
__FUNCTION__
));

232 
dhd_mmc_su•íd
 = 
FALSE
;

233 #i‡
	`deföed
(
OOB_INTR_ONLY
)

234 i‡((
func
->
num
 =2Ë&& 
	`dhd_os_check_if_up
(
	`bcmsdh_gë_drvd©a
()))

235 
	`bcmsdh_oob_öå_£t
(1);

237 
	`smp_mb
();

239 
	}
}

241 c⁄° 
dev_pm_›s
 
	gbcmsdh_sdmmc_pm_›s
 = {

242 .
su•íd
 = 
bcmsdh_sdmmc_su•íd
,

243 .
	gªsume
 = 
bcmsdh_sdmmc_ªsume
,

247 #i‡
deföed
(
BCMLXSDMMC
)

248 
£m≠h‹e
 *
	gnŸify_£m≠h‹e
 = 
NULL
;

250 
	$dummy_¥obe
(
sdio_func
 *
func
,

251 c⁄° 
sdio_devi˚_id
 *
id
)

253 i‡(
nŸify_£m≠h‹e
)

254 
	`up
(
nŸify_£m≠h‹e
);

256 
	}
}

258 
	$dummy_ªmove
(
sdio_func
 *
func
)

260 
	}
}

262 
sdio_drivî
 
	gdummy_sdmmc_drivî
 = {

263 .
¥obe
 = 
dummy_¥obe
,

264 .
	gªmove
 = 
dummy_ªmove
,

265 .
	g«me
 = "dummy_sdmmc",

266 .
	gid_èbÀ
 = 
bcmsdh_sdmmc_ids
,

269 
	$sdio_func_ªg_nŸify
(* 
£m≠h‹e
)

271 
nŸify_£m≠h‹e
 = 
£m≠h‹e
;

272  
	`sdio_ªgi°î_drivî
(&
dummy_sdmmc_drivî
);

273 
	}
}

275 
	$sdio_func_uƒeg_nŸify
()

277 
	`sdio_uƒegi°î_drivî
(&
dummy_sdmmc_drivî
);

278 
	}
}

282 
sdio_drivî
 
	gbcmsdh_sdmmc_drivî
 = {

283 .
¥obe
 = 
bcmsdh_sdmmc_¥obe
,

284 .
	gªmove
 = 
bcmsdh_sdmmc_ªmove
,

285 .
	g«me
 = "bcmsdh_sdmmc",

286 .
	gid_èbÀ
 = 
bcmsdh_sdmmc_ids
,

287 #i‡!
deföed
(
CONFIG_ARCH_RHEA
Ë|| !deföed(
CONFIG_ARCH_CAPRI
)

288 #i‡(
LINUX_VERSION_CODE
 > 
KERNEL_VERSION
(2, 6, 39)Ë&& 
deföed
(
CONFIG_PM
)

289 .
	gdrv
 = {

290 .
pm
 = &
bcmsdh_sdmmc_pm_›s
,

296 
	ssdos_öfo
 {

297 
sdioh_öfo_t
 *
	msd
;

298 
•ölock_t
 
	mlock
;

303 
	$sdioh_sdmmc_osöô
(
sdioh_öfo_t
 *
sd
)

305 
sdos_öfo
 *
sdos
;

307 i‡(!
sd
)

308  
BCME_BADARG
;

310 
sdos
 = (
sdos_öfo
*)
	`MALLOC
(
sd
->
osh
, (sdos_info));

311 
sd
->
sdos_öfo
 = (*)
sdos
;

312 i‡(
sdos
 =
NULL
)

313  
BCME_NOMEM
;

315 
sdos
->
sd
 = sd;

316 
	`•ö_lock_öô
(&
sdos
->
lock
);

317  
BCME_OK
;

318 
	}
}

321 
	$sdioh_sdmmc_os‰ì
(
sdioh_öfo_t
 *
sd
)

323 
sdos_öfo
 *
sdos
;

324 
	`ASSERT
(
sd
 && sd->
sdos_öfo
);

326 
sdos
 = (
sdos_öfo
 *)
sd
->sdos_info;

327 
	`MFREE
(
sd
->
osh
, 
sdos
, (
sdos_öfo
));

328 
	}
}

331 
SDIOH_API_RC


332 
	$sdioh_öãºu±_£t
(
sdioh_öfo_t
 *
sd
, 
boﬁ
 
íabÀ
)

334 
ul⁄g
 
Êags
;

335 
sdos_öfo
 *
sdos
;

337 i‡(!
sd
)

338  
BCME_BADARG
;

340 
	`sd_åa˚
(("%s: %s\n", 
__FUNCTION__
, 
íabÀ
 ? "Enabling" : "Disabling"));

342 
sdos
 = (
sdos_öfo
 *)
sd
->sdos_info;

343 
	`ASSERT
(
sdos
);

345 #i‡!
	`deföed
(
OOB_INTR_ONLY
)

346 i‡(
íabÀ
 && !(
sd
->
öå_h™dÀr
 && sd->
öå_h™dÀr_¨g
)) {

347 
	`sd_îr
(("%s:Çÿh™dÀ∏ªgi°îed, wû»nŸÉ«bÀ\n", 
__FUNCTION__
));

348  
SDIOH_API_RC_FAIL
;

353 
	`•ö_lock_úqßve
(&
sdos
->
lock
, 
Êags
);

355 
sd
->
˛õ¡_öå_íabÀd
 = 
íabÀ
;

356 i‡(
íabÀ
) {

357 
	`sdioh_sdmmc_devöå_⁄
(
sd
);

359 
	`sdioh_sdmmc_devöå_off
(
sd
);

362 
	`•ö_u∆ock_úqª°‹e
(&
sdos
->
lock
, 
Êags
);

364  
SDIOH_API_RC_SUCCESS
;

365 
	}
}

368 #ifde‡
BCMSDH_MODULE


369 
__öô


370 
	$bcmsdh_moduÀ_öô
()

372 
îr‹
 = 0;

373 
îr‹
 = 
	`sdio_fun˘i⁄_öô
();

374  
îr‹
;

375 
	}
}

377 
__exô


378 
	$bcmsdh_moduÀ_˛ónup
()

380 
	`sdio_fun˘i⁄_˛ónup
();

381 
	}
}

383 
moduÀ_öô
(
bcmsdh_moduÀ_öô
);

384 
moduÀ_exô
(
bcmsdh_moduÀ_˛ónup
);

386 
MODULE_LICENSE
("GPL v2");

387 
MODULE_DESCRIPTION
(
DESCRIPTION
);

388 
MODULE_AUTHOR
(
AUTHOR
);

394 
	$sdio_fun˘i⁄_öô
()

396 
îr‹
 = 0;

397 
	`sd_åa˚
(("bcmsdh_sdmmc: %†E¡î\n", 
__FUNCTION__
));

399 
gIn°™˚
 = 
	`kzÆloc
((
BCMSDH_SDMMC_INSTANCE
), 
GFP_KERNEL
);

400 i‡(!
gIn°™˚
)

401  -
ENOMEM
;

403 
îr‹
 = 
	`sdio_ªgi°î_drivî
(&
bcmsdh_sdmmc_drivî
);

404 i‡(
îr‹
 && 
gIn°™˚
) {

405 
	`k‰ì
(
gIn°™˚
);

406 
gIn°™˚
 = 0;

409  
îr‹
;

410 
	}
}

415 
bcmsdh_ªmove
(
devi˚
 *
dev
);

416 
	$sdio_fun˘i⁄_˛ónup
()

418 
	`sd_åa˚
(("%†E¡î\n", 
__FUNCTION__
));

421 
	`sdio_uƒegi°î_drivî
(&
bcmsdh_sdmmc_drivî
);

423 i‡(
gIn°™˚
)

424 
	`k‰ì
(
gIn°™˚
);

425 
	}
}

	@bcmutils.c

26 
	~<bcm_cfg.h
>

27 
	~<ty≥defs.h
>

28 
	~<bcmdefs.h
>

29 
	~<°d¨g.h
>

30 #ifde‡
BCMDRIVER


32 
	~<o¶.h
>

33 
	~<bcmutûs.h
>

37 
	~<°dio.h
>

38 
	~<°rög.h
>

39 
	~<bcmutûs.h
>

41 #i‡
deföed
(
BCMEXTSUP
)

42 
	~<bcm_o¶.h
>

48 
	~<bcmídün.h
>

49 
	~<bcmdevs.h
>

50 
	~<¥Ÿo/ëhî√t.h
>

51 
	~<¥Ÿo/vœn.h
>

52 
	~<¥Ÿo/bcmù.h
>

53 
	~<¥Ÿo/802.1d.h
>

54 
	~<¥Ÿo/802.11.h
>

55 *
	g_bcmutûs_dummy_‚
 = 
NULL
;

58 #ifde‡
BCMDRIVER


63 
uöt


64 
	$pktc›y
(
o¶_t
 *
osh
, *
p
, 
uöt
 
off£t
, 
Àn
, 
uch¨
 *
buf
)

66 
uöt
 
n
, 
ªt
 = 0;

68 i‡(
Àn
 < 0)

69 
Àn
 = 4096;

72 ; 
p
 && 
off£t
;Ö = 
	`PKTNEXT
(
osh
,Ö)) {

73 i‡(
off£t
 < (
uöt
)
	`PKTLEN
(
osh
, 
p
))

75 
off£t
 -
	`PKTLEN
(
osh
, 
p
);

78 i‡(!
p
)

82 ; 
p
 && 
Àn
;Ö = 
	`PKTNEXT
(
osh
,Ö)) {

83 
n
 = 
	`MIN
((
uöt
)
	`PKTLEN
(
osh
, 
p
Ë- 
off£t
, (uöt)
Àn
);

84 
	`bc›y
(
	`PKTDATA
(
osh
, 
p
Ë+ 
off£t
, 
buf
, 
n
);

85 
buf
 +
n
;

86 
Àn
 -
n
;

87 
ªt
 +
n
;

88 
off£t
 = 0;

91  
ªt
;

92 
	}
}

95 
uöt


96 
	$pkt‰ombuf
(
o¶_t
 *
osh
, *
p
, 
uöt
 
off£t
, 
Àn
, 
uch¨
 *
buf
)

98 
uöt
 
n
, 
ªt
 = 0;

101 ; 
p
 && 
off£t
;Ö = 
	`PKTNEXT
(
osh
,Ö)) {

102 i‡(
off£t
 < (
uöt
)
	`PKTLEN
(
osh
, 
p
))

104 
off£t
 -
	`PKTLEN
(
osh
, 
p
);

107 i‡(!
p
)

111 ; 
p
 && 
Àn
;Ö = 
	`PKTNEXT
(
osh
,Ö)) {

112 
n
 = 
	`MIN
((
uöt
)
	`PKTLEN
(
osh
, 
p
Ë- 
off£t
, (uöt)
Àn
);

113 
	`bc›y
(
buf
, 
	`PKTDATA
(
osh
, 
p
Ë+ 
off£t
, 
n
);

114 
buf
 +
n
;

115 
Àn
 -
n
;

116 
ªt
 +
n
;

117 
off£t
 = 0;

120  
ªt
;

121 
	}
}

126 
uöt
 
BCMFASTPATH


127 
	$pkâŸÀn
(
o¶_t
 *
osh
, *
p
)

129 
uöt
 
tŸÆ
;

130 
Àn
;

132 
tŸÆ
 = 0;

133 ; 
p
;Ö = 
	`PKTNEXT
(
osh
,Ö)) {

134 
Àn
 = 
	`PKTLEN
(
osh
, 
p
);

135 
tŸÆ
 +
Àn
;

138  (
tŸÆ
);

139 
	}
}

143 
	$pkéa°
(
o¶_t
 *
osh
, *
p
)

145 ; 
	`PKTNEXT
(
osh
, 
p
);Ö = PKTNEXT(osh,Ö))

148  (
p
);

149 
	}
}

152 
uöt
 
BCMFASTPATH


153 
	$pkt£g˙t
(
o¶_t
 *
osh
, *
p
)

155 
uöt
 
˙t
;

157 
˙t
 = 0; 
p
;Ö = 
	`PKTNEXT
(
osh
,Ö))

158 
˙t
++;

160  
˙t
;

161 
	}
}

165 
uöt
 
BCMFASTPATH


166 
	$pkt£g˙t_w¨
(
o¶_t
 *
osh
, *
p
)

168 
uöt
 
˙t
;

169 
uöt8
 *
pktd©a
;

170 
uöt
 
Àn
, 
ªmaö
, 
Æign64
;

172 
˙t
 = 0; 
p
;Ö = 
	`PKTNEXT
(
osh
,Ö)) {

173 
˙t
++;

174 
Àn
 = 
	`PKTLEN
(
osh
, 
p
);

175 i‡(
Àn
 > 128) {

176 
pktd©a
 = (
uöt8
 *)
	`PKTDATA
(
osh
, 
p
);

178 i‡(((
uöçå
)
pktd©a
 & ~0x7ffË!((uöçå)’ktd©a+
Àn
) & ~0x7ff))

179 
˙t
++;

181 
Æign64
 = (
uöt
)((
uöçå
)
pktd©a
 & 0x3f);

182 
Æign64
 = (64 -álign64) & 0x3f;

183 
Àn
 -
Æign64
;

185 
ªmaö
 = 
Àn
 % 128;

186 i‡(
ªmaö
 > 0 &&Ñemain <= 4)

187 
˙t
++;

191  
˙t
;

192 
	}
}

194 
uöt8
 * 
BCMFASTPATH


195 
	$pktoff£t
(
o¶_t
 *
osh
, *
p
, 
uöt
 
off£t
)

197 
uöt
 
tŸÆ
 = 
	`pkâŸÀn
(
osh
, 
p
);

198 
uöt
 
pkt_off
 = 0, 
Àn
 = 0;

199 
uöt8
 *
pd©a
 = (uöt8 *Ë
	`PKTDATA
(
osh
, 
p
);

201 i‡(
off£t
 > 
tŸÆ
)

202  
NULL
;

204 ; 
p
;Ö = 
	`PKTNEXT
(
osh
,Ö)) {

205 
pd©a
 = (
uöt8
 *Ë
	`PKTDATA
(
osh
, 
p
);

206 
pkt_off
 = 
off£t
 - 
Àn
;

207 
Àn
 +
	`PKTLEN
(
osh
, 
p
);

208 i‡(
Àn
 > 
off£t
)

211  (
uöt8
*Ë(
pd©a
+
pkt_off
);

212 
	}
}

218 * 
BCMFASTPATH


219 
	$pktq_≥nq
(
pktq
 *
pq
, 
¥ec
, *
p
)

221 
pktq_¥ec
 *
q
;

223 
	`ASSERT
(
¥ec
 >0 &&Öª¯< 
pq
->
num_¥ec
);

224 
	`ASSERT
(
	`PKTLINK
(
p
Ë=
NULL
);

226 
	`ASSERT
(!
	`pktq_fuŒ
(
pq
));

227 
	`ASSERT
(!
	`pktq_pfuŒ
(
pq
, 
¥ec
));

229 
q
 = &
pq
->q[
¥ec
];

231 i‡(
q
->
hód
)

232 
	`PKTSETLINK
(
q
->
èû
, 
p
);

234 
q
->
hód
 = 
p
;

236 
q
->
èû
 = 
p
;

237 
q
->
Àn
++;

239 
pq
->
Àn
++;

241 i‡(
pq
->
hi_¥ec
 < 
¥ec
)

242 
pq
->
hi_¥ec
 = (
uöt8
)
¥ec
;

244  
p
;

245 
	}
}

247 * 
BCMFASTPATH


248 
	$pktq_≥nq_hód
(
pktq
 *
pq
, 
¥ec
, *
p
)

250 
pktq_¥ec
 *
q
;

252 
	`ASSERT
(
¥ec
 >0 &&Öª¯< 
pq
->
num_¥ec
);

253 
	`ASSERT
(
	`PKTLINK
(
p
Ë=
NULL
);

255 
	`ASSERT
(!
	`pktq_fuŒ
(
pq
));

256 
	`ASSERT
(!
	`pktq_pfuŒ
(
pq
, 
¥ec
));

258 
q
 = &
pq
->q[
¥ec
];

260 i‡(
q
->
hód
 =
NULL
)

261 
q
->
èû
 = 
p
;

263 
	`PKTSETLINK
(
p
, 
q
->
hód
);

264 
q
->
hód
 = 
p
;

265 
q
->
Àn
++;

267 
pq
->
Àn
++;

269 i‡(
pq
->
hi_¥ec
 < 
¥ec
)

270 
pq
->
hi_¥ec
 = (
uöt8
)
¥ec
;

272  
p
;

273 
	}
}

275 * 
BCMFASTPATH


276 
	$pktq_pdeq
(
pktq
 *
pq
, 
¥ec
)

278 
pktq_¥ec
 *
q
;

279 *
p
;

281 
	`ASSERT
(
¥ec
 >0 &&Öª¯< 
pq
->
num_¥ec
);

283 
q
 = &
pq
->q[
¥ec
];

285 i‡((
p
 = 
q
->
hód
Ë=
NULL
)

286  
NULL
;

288 i‡((
q
->
hód
 = 
	`PKTLINK
(
p
)Ë=
NULL
)

289 
q
->
èû
 = 
NULL
;

291 
q
->
Àn
--;

293 
pq
->
Àn
--;

295 
	`PKTSETLINK
(
p
, 
NULL
);

297  
p
;

298 
	}
}

300 * 
BCMFASTPATH


301 
	$pktq_pdeq_¥ev
(
pktq
 *
pq
, 
¥ec
, *
¥ev_p
)

303 
pktq_¥ec
 *
q
;

304 *
p
;

306 
	`ASSERT
(
¥ec
 >0 &&Öª¯< 
pq
->
num_¥ec
);

308 
q
 = &
pq
->q[
¥ec
];

310 i‡(
¥ev_p
 =
NULL
)

311  
NULL
;

313 i‡((
p
 = 
	`PKTLINK
(
¥ev_p
)Ë=
NULL
)

314  
NULL
;

316 
q
->
Àn
--;

318 
pq
->
Àn
--;

320 
	`PKTSETLINK
(
¥ev_p
, 
	`PKTLINK
(
p
));

321 
	`PKTSETLINK
(
p
, 
NULL
);

323  
p
;

324 
	}
}

326 * 
BCMFASTPATH


327 
	$pktq_pdeq_èû
(
pktq
 *
pq
, 
¥ec
)

329 
pktq_¥ec
 *
q
;

330 *
p
, *
¥ev
;

332 
	`ASSERT
(
¥ec
 >0 &&Öª¯< 
pq
->
num_¥ec
);

334 
q
 = &
pq
->q[
¥ec
];

336 i‡((
p
 = 
q
->
hód
Ë=
NULL
)

337  
NULL
;

339 
¥ev
 = 
NULL
; 
p
 !
q
->
èû
;Ö = 
	`PKTLINK
(p))

340 
¥ev
 = 
p
;

342 i‡(
¥ev
)

343 
	`PKTSETLINK
(
¥ev
, 
NULL
);

345 
q
->
hód
 = 
NULL
;

347 
q
->
èû
 = 
¥ev
;

348 
q
->
Àn
--;

350 
pq
->
Àn
--;

352  
p
;

353 
	}
}

356 
	$pktq_pÊush
(
o¶_t
 *
osh
, 
pktq
 *
pq
, 
¥ec
, 
boﬁ
 
dú
, 
iÂkt_cb_t
 
‚
, 
¨g
)

358 
pktq_¥ec
 *
q
;

359 *
p
, *
¥ev
 = 
NULL
;

361 
q
 = &
pq
->q[
¥ec
];

362 
p
 = 
q
->
hód
;

363 
p
) {

364 i‡(
‚
 =
NULL
 || (*‚)(
p
, 
¨g
)) {

365 
boﬁ
 
hód
 = (
p
 =
q
->head);

366 i‡(
hód
)

367 
q
->
hód
 = 
	`PKTLINK
(
p
);

369 
	`PKTSETLINK
(
¥ev
, 
	`PKTLINK
(
p
));

370 
	`PKTSETLINK
(
p
, 
NULL
);

371 
	`PKTFREE
(
osh
, 
p
, 
dú
);

372 
q
->
Àn
--;

373 
pq
->
Àn
--;

374 
p
 = (
hód
 ? 
q
->hód : 
	`PKTLINK
(
¥ev
));

376 
¥ev
 = 
p
;

377 
p
 = 
	`PKTLINK
(p);

381 i‡(
q
->
hód
 =
NULL
) {

382 
	`ASSERT
(
q
->
Àn
 == 0);

383 
q
->
èû
 = 
NULL
;

385 
	}
}

387 
boﬁ
 
BCMFASTPATH


388 
	$pktq_pdñ
(
pktq
 *
pq
, *
pktbuf
, 
¥ec
)

390 
pktq_¥ec
 *
q
;

391 *
p
;

393 
	`ASSERT
(
¥ec
 >0 &&Öª¯< 
pq
->
num_¥ec
);

395 i‡(!
pktbuf
)

396  
FALSE
;

398 
q
 = &
pq
->q[
¥ec
];

400 i‡(
q
->
hód
 =
pktbuf
) {

401 i‡((
q
->
hód
 = 
	`PKTLINK
(
pktbuf
)Ë=
NULL
)

402 
q
->
èû
 = 
NULL
;

404 
p
 = 
q
->
hód
;Ö && 
	`PKTLINK
’Ë!
pktbuf
;Ö = PKTLINK(p))

406 i‡(
p
 =
NULL
)

407  
FALSE
;

409 
	`PKTSETLINK
(
p
, 
	`PKTLINK
(
pktbuf
));

410 i‡(
q
->
èû
 =
pktbuf
)

411 
q
->
èû
 = 
p
;

414 
q
->
Àn
--;

415 
pq
->
Àn
--;

416 
	`PKTSETLINK
(
pktbuf
, 
NULL
);

417  
TRUE
;

418 
	}
}

421 
	$pktq_öô
(
pktq
 *
pq
, 
num_¥ec
, 
max_Àn
)

423 
¥ec
;

425 
	`ASSERT
(
num_¥ec
 > 0 &&Çum_¥e¯<
PKTQ_MAX_PREC
);

428 
	`bzîo
(
pq
, 
	`OFFSETOF
(
pktq
, 
q
Ë+ ((
pktq_¥ec
Ë* 
num_¥ec
));

430 
pq
->
num_¥ec
 = (
uöt16
)num_prec;

432 
pq
->
max
 = (
uöt16
)
max_Àn
;

434 
¥ec
 = 0;Öª¯< 
num_¥ec
;Örec++)

435 
pq
->
q
[
¥ec
].
max
 =Öq->max;

436 
	}
}

439 
	$pktq_£t_max_∂í
(
pktq
 *
pq
, 
¥ec
, 
max_Àn
)

441 
	`ASSERT
(
¥ec
 >0 &&Öª¯< 
pq
->
num_¥ec
);

443 i‡(
¥ec
 < 
pq
->
num_¥ec
)

444 
pq
->
q
[
¥ec
].
max
 = (
uöt16
)
max_Àn
;

445 
	}
}

447 * 
BCMFASTPATH


448 
	$pktq_deq
(
pktq
 *
pq
, *
¥ec_out
)

450 
pktq_¥ec
 *
q
;

451 *
p
;

452 
¥ec
;

454 i‡(
pq
->
Àn
 == 0)

455  
NULL
;

457 (
¥ec
 = 
pq
->
hi_¥ec
Ë> 0 &&Öq->
q
[¥ec].
hód
 =
NULL
)

458 
pq
->
hi_¥ec
--;

460 
q
 = &
pq
->q[
¥ec
];

462 i‡((
p
 = 
q
->
hód
Ë=
NULL
)

463  
NULL
;

465 i‡((
q
->
hód
 = 
	`PKTLINK
(
p
)Ë=
NULL
)

466 
q
->
èû
 = 
NULL
;

468 
q
->
Àn
--;

470 
pq
->
Àn
--;

472 i‡(
¥ec_out
)

473 *
¥ec_out
 = 
¥ec
;

475 
	`PKTSETLINK
(
p
, 
NULL
);

477  
p
;

478 
	}
}

480 * 
BCMFASTPATH


481 
	$pktq_deq_èû
(
pktq
 *
pq
, *
¥ec_out
)

483 
pktq_¥ec
 *
q
;

484 *
p
, *
¥ev
;

485 
¥ec
;

487 i‡(
pq
->
Àn
 == 0)

488  
NULL
;

490 
¥ec
 = 0;Öª¯< 
pq
->
hi_¥ec
;Örec++)

491 i‡(
pq
->
q
[
¥ec
].
hód
)

494 
q
 = &
pq
->q[
¥ec
];

496 i‡((
p
 = 
q
->
hód
Ë=
NULL
)

497  
NULL
;

499 
¥ev
 = 
NULL
; 
p
 !
q
->
èû
;Ö = 
	`PKTLINK
(p))

500 
¥ev
 = 
p
;

502 i‡(
¥ev
)

503 
	`PKTSETLINK
(
¥ev
, 
NULL
);

505 
q
->
hód
 = 
NULL
;

507 
q
->
èû
 = 
¥ev
;

508 
q
->
Àn
--;

510 
pq
->
Àn
--;

512 i‡(
¥ec_out
)

513 *
¥ec_out
 = 
¥ec
;

515 
	`PKTSETLINK
(
p
, 
NULL
);

517  
p
;

518 
	}
}

521 
	$pktq_≥ek
(
pktq
 *
pq
, *
¥ec_out
)

523 
¥ec
;

525 i‡(
pq
->
Àn
 == 0)

526  
NULL
;

528 (
¥ec
 = 
pq
->
hi_¥ec
Ë> 0 &&Öq->
q
[¥ec].
hód
 =
NULL
)

529 
pq
->
hi_¥ec
--;

531 i‡(
¥ec_out
)

532 *
¥ec_out
 = 
¥ec
;

534  (
pq
->
q
[
¥ec
].
hód
);

535 
	}
}

538 
	$pktq_≥ek_èû
(
pktq
 *
pq
, *
¥ec_out
)

540 
¥ec
;

542 i‡(
pq
->
Àn
 == 0)

543  
NULL
;

545 
¥ec
 = 0;Öª¯< 
pq
->
hi_¥ec
;Örec++)

546 i‡(
pq
->
q
[
¥ec
].
hód
)

549 i‡(
¥ec_out
)

550 *
¥ec_out
 = 
¥ec
;

552  (
pq
->
q
[
¥ec
].
èû
);

553 
	}
}

556 
	$pktq_Êush
(
o¶_t
 *
osh
, 
pktq
 *
pq
, 
boﬁ
 
dú
, 
iÂkt_cb_t
 
‚
, 
¨g
)

558 
¥ec
;

563 i‡(
pq
->
Àn
 == 0) {

567 
¥ec
 = 0;Öª¯< 
pq
->
num_¥ec
;Örec++)

568 
	`pktq_pÊush
(
osh
, 
pq
, 
¥ec
, 
dú
, 
‚
, 
¨g
);

569 i‡(
‚
 =
NULL
)

570 
	`ASSERT
(
pq
->
Àn
 == 0);

571 
	}
}

575 
	$pktq_mÀn
(
pktq
 *
pq
, 
uöt
 
¥ec_bmp
)

577 
¥ec
, 
Àn
;

579 
Àn
 = 0;

581 
¥ec
 = 0;Öª¯<
pq
->
hi_¥ec
;Örec++)

582 i‡(
¥ec_bmp
 & (1 << 
¥ec
))

583 
Àn
 +
pq
->
q
[
¥ec
].len;

585  
Àn
;

586 
	}
}

589 * 
BCMFASTPATH


590 
	$pktq_m≥ek
(
pktq
 *
pq
, 
uöt
 
¥ec_bmp
, *
¥ec_out
)

592 
pktq_¥ec
 *
q
;

593 *
p
;

594 
¥ec
;

596 i‡(
pq
->
Àn
 == 0)

598  
NULL
;

600 (
¥ec
 = 
pq
->
hi_¥ec
Ë> 0 &&Öq->
q
[¥ec].
hód
 =
NULL
)

601 
pq
->
hi_¥ec
--;

603 (
¥ec_bmp
 & (1 << 
¥ec
)Ë=0 || 
pq
->
q
[¥ec].
hód
 =
NULL
)

604 i‡(
¥ec
-- == 0)

605  
NULL
;

607 
q
 = &
pq
->q[
¥ec
];

609 i‡((
p
 = 
q
->
hód
Ë=
NULL
)

610  
NULL
;

612 i‡(
¥ec_out
)

613 *
¥ec_out
 = 
¥ec
;

615  
p
;

616 
	}
}

618 * 
BCMFASTPATH


619 
	$pktq_mdeq
(
pktq
 *
pq
, 
uöt
 
¥ec_bmp
, *
¥ec_out
)

621 
pktq_¥ec
 *
q
;

622 *
p
;

623 
¥ec
;

625 i‡(
pq
->
Àn
 == 0)

626  
NULL
;

628 (
¥ec
 = 
pq
->
hi_¥ec
Ë> 0 &&Öq->
q
[¥ec].
hód
 =
NULL
)

629 
pq
->
hi_¥ec
--;

631 (
pq
->
q
[
¥ec
].
hód
 =
NULL
Ë|| ((
¥ec_bmp
 & (1 <<Örec)) == 0))

632 i‡(
¥ec
-- == 0)

633  
NULL
;

635 
q
 = &
pq
->q[
¥ec
];

637 i‡((
p
 = 
q
->
hód
Ë=
NULL
)

638  
NULL
;

640 i‡((
q
->
hód
 = 
	`PKTLINK
(
p
)Ë=
NULL
)

641 
q
->
èû
 = 
NULL
;

643 
q
->
Àn
--;

645 i‡(
¥ec_out
)

646 *
¥ec_out
 = 
¥ec
;

648 
pq
->
Àn
--;

650 
	`PKTSETLINK
(
p
, 
NULL
);

652  
p
;

653 
	}
}

657 c⁄° 
	gbcm_˘y≥
[] = {

659 
_BCM_C
,_BCM_C,_BCM_C,_BCM_C,_BCM_C,_BCM_C,_BCM_C,_BCM_C,

660 
_BCM_C
, _BCM_C|
_BCM_S
, _BCM_C|_BCM_S, _BCM_C|_BCM_S, _BCM_C|_BCM_S, _BCM_C|_BCM_S, _BCM_C,

661 
_BCM_C
,

662 
_BCM_C
,_BCM_C,_BCM_C,_BCM_C,_BCM_C,_BCM_C,_BCM_C,_BCM_C,

663 
_BCM_C
,_BCM_C,_BCM_C,_BCM_C,_BCM_C,_BCM_C,_BCM_C,_BCM_C,

664 
_BCM_S
|
_BCM_SP
,
_BCM_P
,_BCM_P,_BCM_P,_BCM_P,_BCM_P,_BCM_P,_BCM_P,

665 
_BCM_P
,_BCM_P,_BCM_P,_BCM_P,_BCM_P,_BCM_P,_BCM_P,_BCM_P,

666 
_BCM_D
,_BCM_D,_BCM_D,_BCM_D,_BCM_D,_BCM_D,_BCM_D,_BCM_D,

667 
_BCM_D
,_BCM_D,
_BCM_P
,_BCM_P,_BCM_P,_BCM_P,_BCM_P,_BCM_P,

668 
_BCM_P
, 
_BCM_U
|
_BCM_X
, _BCM_U|_BCM_X, _BCM_U|_BCM_X, _BCM_U|_BCM_X, _BCM_U|_BCM_X,

669 
_BCM_U
|
_BCM_X
, _BCM_U,

670 
_BCM_U
,_BCM_U,_BCM_U,_BCM_U,_BCM_U,_BCM_U,_BCM_U,_BCM_U,

671 
_BCM_U
,_BCM_U,_BCM_U,_BCM_U,_BCM_U,_BCM_U,_BCM_U,_BCM_U,

672 
_BCM_U
,_BCM_U,_BCM_U,
_BCM_P
,_BCM_P,_BCM_P,_BCM_P,_BCM_P,

673 
_BCM_P
, 
_BCM_L
|
_BCM_X
, _BCM_L|_BCM_X, _BCM_L|_BCM_X, _BCM_L|_BCM_X, _BCM_L|_BCM_X,

674 
_BCM_L
|
_BCM_X
, _BCM_L,

675 
_BCM_L
,_BCM_L,_BCM_L,_BCM_L,_BCM_L,_BCM_L,_BCM_L,_BCM_L,

676 
_BCM_L
,_BCM_L,_BCM_L,_BCM_L,_BCM_L,_BCM_L,_BCM_L,_BCM_L,

677 
_BCM_L
,_BCM_L,_BCM_L,
_BCM_P
,_BCM_P,_BCM_P,_BCM_P,
_BCM_C
,

680 
_BCM_S
|
_BCM_SP
, 
_BCM_P
, _BCM_P, _BCM_P, _BCM_P, _BCM_P, _BCM_P, _BCM_P, _BCM_P, _BCM_P,

681 
_BCM_P
, _BCM_P, _BCM_P, _BCM_P, _BCM_P, _BCM_P,

682 
_BCM_P
, _BCM_P, _BCM_P, _BCM_P, _BCM_P, _BCM_P, _BCM_P, _BCM_P, _BCM_P, _BCM_P, _BCM_P,

683 
_BCM_P
, _BCM_P, _BCM_P, _BCM_P, _BCM_P,

684 
_BCM_U
, _BCM_U, _BCM_U, _BCM_U, _BCM_U, _BCM_U, _BCM_U, _BCM_U, _BCM_U, _BCM_U, _BCM_U,

685 
_BCM_U
, _BCM_U, _BCM_U, _BCM_U, _BCM_U,

686 
_BCM_U
, _BCM_U, _BCM_U, _BCM_U, _BCM_U, _BCM_U, _BCM_U, 
_BCM_P
, _BCM_U, _BCM_U, _BCM_U,

687 
_BCM_U
, _BCM_U, _BCM_U, _BCM_U, 
_BCM_L
,

688 
_BCM_L
, _BCM_L, _BCM_L, _BCM_L, _BCM_L, _BCM_L, _BCM_L, _BCM_L, _BCM_L, _BCM_L, _BCM_L,

689 
_BCM_L
, _BCM_L, _BCM_L, _BCM_L, _BCM_L,

690 
_BCM_L
, _BCM_L, _BCM_L, _BCM_L, _BCM_L, _BCM_L, _BCM_L, 
_BCM_P
, _BCM_L, _BCM_L, _BCM_L,

691 
_BCM_L
, _BCM_L, _BCM_L, _BCM_L, _BCM_L

694 
ul⁄g


695 
	$bcm_°πoul
(c⁄° *
˝
, **
ídp
, 
uöt
 
ba£
)

697 
ul⁄g
 
ªsu…
, 
œ°_ªsu…
 = 0, 
vÆue
;

698 
boﬁ
 
möus
;

700 
möus
 = 
FALSE
;

702 
	`bcm_is•a˚
(*
˝
))

703 
˝
++;

705 i‡(
˝
[0] == '+')

706 
˝
++;

707 i‡(
˝
[0] == '-') {

708 
möus
 = 
TRUE
;

709 
˝
++;

712 i‡(
ba£
 == 0) {

713 i‡(
˝
[0] == '0') {

714 i‡((
˝
[1] == 'x') || (cp[1] == 'X')) {

715 
ba£
 = 16;

716 
˝
 = &cp[2];

718 
ba£
 = 8;

719 
˝
 = &cp[1];

722 
ba£
 = 10;

723 } i‡(
ba£
 =16 && (
˝
[0] == '0') && ((cp[1] == 'x') || (cp[1] == 'X'))) {

724 
˝
 = &cp[2];

727 
ªsu…
 = 0;

729 
	`bcm_isxdigô
(*
˝
) &&

730 (
vÆue
 = 
	`bcm_isdigô
(*
˝
Ë? *˝-'0' : 
	`bcm_touµî
(*˝)-'A'+10Ë< 
ba£
) {

731 
ªsu…
 =Ñesu…*
ba£
 + 
vÆue
;

733 i‡(
ªsu…
 < 
œ°_ªsu…
 && !
möus
)

734  (
ul⁄g
)-1;

735 
œ°_ªsu…
 = 
ªsu…
;

736 
˝
++;

739 i‡(
möus
)

740 
ªsu…
 = (
ul⁄g
)(-()result);

742 i‡(
ídp
)

743 *
ídp
 = 
	`DISCARD_QUAL
(
˝
, );

745  (
ªsu…
);

746 
	}
}

749 
	$bcm_©oi
(c⁄° *
s
)

751  ()
	`bcm_°πoul
(
s
, 
NULL
, 10);

752 
	}
}

756 
	$bcm°r°r
(c⁄° *
hay°ack
, c⁄° *
√edÀ
)

758 
Àn
, 
∆í
;

759 
i
;

761 i‡((
hay°ack
 =
NULL
Ë|| (
√edÀ
 == NULL))

762  
	`DISCARD_QUAL
(
hay°ack
, );

764 
∆í
 = 
	`°æí
(
√edÀ
);

765 
Àn
 = 
	`°æí
(
hay°ack
Ë- 
∆í
 + 1;

767 
i
 = 0; i < 
Àn
; i++)

768 i‡(
	`memcmp
(
√edÀ
, &
hay°ack
[
i
], 
∆í
) == 0)

769  
	`DISCARD_QUAL
(&
hay°ack
[
i
], );

770  (
NULL
);

771 
	}
}

774 
	$bcm°rˇt
(*
de°
, c⁄° *
§c
)

776 *
p
;

778 
p
 = 
de°
 + 
	`°æí
(dest);

780 (*
p
++ = *
§c
++) != '\0')

783  (
de°
);

784 
	}
}

787 
	$bcm°∫ˇt
(*
de°
, c⁄° *
§c
, 
uöt
 
size
)

789 *
ídp
;

790 *
p
;

792 
p
 = 
de°
 + 
	`°æí
(dest);

793 
ídp
 = 
p
 + 
size
;

795 
p
 !
ídp
 && (*p++ = *
§c
++) != '\0')

798  (
de°
);

799 
	}
}

822 
	$bcm°πok
(**
°rög
, c⁄° *
dñimôîs
, *
tokdñim
)

824 *
°r
;

825 
m≠
[8];

826 
cou¡
;

827 *
√xtokí
;

829 i‡(
tokdñim
 !
NULL
) {

831 *
tokdñim
 = '\0';

835 
cou¡
 = 0; count < 8; count++) {

836 
m≠
[
cou¡
] = 0;

841 
m≠
[*
dñimôîs
 >> 5] |= (1 << (*delimiters & 31));

843 *
dñimôîs
++);

845 
°r
 = (*)*
°rög
;

851 ((
m≠
[*
°r
 >> 5] & (1 << (*str & 31))) && *str) || (*str == ' ')) {

852 
°r
++;

855 
√xtokí
 = (*)
°r
;

860 ; *
°r
; str++) {

861 i‡(
m≠
[*
°r
 >> 5] & (1 << (*str & 31))) {

862 i‡(
tokdñim
 !
NULL
) {

863 *
tokdñim
 = *
°r
;

866 *
°r
++ = '\0';

871 *
°rög
 = (*)
°r
;

874 i‡(
√xtokí
 =(*Ë
°r
) {

875  
NULL
;

878  
√xtokí
;

880 
	}
}

883 
	#xToLowî
(
C
) \

884 ((
C
 >'A' && C <'Z'Ë? ()(()C - ()'A' + ()'a'Ë: C)

	)

900 
	$bcm°ricmp
(c⁄° *
s1
, c⁄° *
s2
)

902 
dc
, 
sc
;

904 *
s2
 && *
s1
) {

905 
dc
 = 
	`xToLowî
(*
s1
);

906 
sc
 = 
	`xToLowî
(*
s2
);

907 i‡(
dc
 < 
sc
)  -1;

908 i‡(
dc
 > 
sc
)  1;

909 
s1
++;

910 
s2
++;

913 i‡(*
s1
 && !*
s2
)  1;

914 i‡(!*
s1
 && *
s2
)  -1;

916 
	}
}

934 
	$bcm°∫icmp
(c⁄° * 
s1
, c⁄° * 
s2
, 
˙t
)

936 
dc
, 
sc
;

938 *
s2
 && *
s1
 && 
˙t
) {

939 
dc
 = 
	`xToLowî
(*
s1
);

940 
sc
 = 
	`xToLowî
(*
s2
);

941 i‡(
dc
 < 
sc
)  -1;

942 i‡(
dc
 > 
sc
)  1;

943 
s1
++;

944 
s2
++;

945 
˙t
--;

948 i‡(!
˙t
)  0;

949 i‡(*
s1
 && !*
s2
)  1;

950 i‡(!*
s1
 && *
s2
)  -1;

952 
	}
}

956 
	$bcm_ëhî_©€
(c⁄° *
p
, 
ëhî_addr
 *
ó
)

958 
i
 = 0;

959 *
ï
;

962 
ó
->
o˘ë
[
i
++] = (Ë
	`bcm_°πoul
(
p
, &
ï
, 16);

963 
p
 = 
ï
;

964 i‡(!*
p
++ || 
i
 == 6)

968  (
i
 == 6);

969 
	}
}

972 #i‡
deföed
(
CONFIG_USBRNDIS_RETAIL
Ë|| deföed(
NDIS_MINIPORT_DRIVER
)

977 
ul⁄g


978 
	$wch¨2ascii
(*
abuf
, 
ush‹t
 *
wbuf
, ush‹à
wbuÊí
, 
ul⁄g
 
abuÊí
)

980 
ul⁄g
 
c›y˘
 = 1;

981 
ush‹t
 
i
;

983 i‡(
abuÊí
 == 0)

987 
wbuÊí
 /(
ush‹t
);

989 
i
 = 0; i < 
wbuÊí
; ++i) {

990 i‡(--
abuÊí
 == 0)

992 *
abuf
++ = (Ë*
wbuf
++;

993 ++
c›y˘
;

995 *
abuf
 = '\0';

997  
c›y˘
;

998 
	}
}

1002 
	$bcm_ëhî_¡ﬂ
(c⁄° 
ëhî_addr
 *
ó
, *
buf
)

1004 c⁄° 
hex
[] =

1009 c⁄° 
uöt8
 *
o˘ë
 = 
ó
->octet;

1010 *
p
 = 
buf
;

1011 
i
;

1013 
i
 = 0; i < 6; i++, 
o˘ë
++) {

1014 *
p
++ = 
hex
[(*
o˘ë
 >> 4) & 0xf];

1015 *
p
++ = 
hex
[*
o˘ë
 & 0xf];

1016 *
p
++ = ':';

1019 *(
p
-1) = '\0';

1021  (
buf
);

1022 
	}
}

1025 
	$bcm_ù_¡ﬂ
(
ùv4_addr
 *
ü
, *
buf
)

1027 
	`¢¥ötf
(
buf
, 16, "%d.%d.%d.%d",

1028 
ü
->
addr
[0], ia->addr[1], ia->addr[2], ia->addr[3]);

1029  (
buf
);

1030 
	}
}

1032 #ifde‡
BCMDRIVER


1035 
	$bcm_mdñay
(
uöt
 
ms
)

1037 
uöt
 
i
;

1039 
i
 = 0; i < 
ms
; i++) {

1040 
	`OSL_DELAY
(1000);

1042 
	}
}

1048 #i‡
deföed
(
DHD_DEBUG
)

1051 
	$¥pkt
(c⁄° *
msg
, 
o¶_t
 *
osh
, *
p0
)

1053 *
p
;

1055 i‡(
msg
 && (msg[0] != '\0'))

1056 
	`¥ötf
("%s:\n", 
msg
);

1058 
p
 = 
p0
;Ö;Ö = 
	`PKTNEXT
(
osh
,Ö))

1059 
	`¥hex
(
NULL
, 
	`PKTDATA
(
osh
, 
p
), 
	`PKTLEN
(osh,Ö));

1060 
	}
}

1067 
uöt
 
BCMFASTPATH


1068 
	$pkt£çrio
(*
pkt
, 
boﬁ
 
upd©e_vèg
)

1070 
ëhî_hódî
 *
eh
;

1071 
ëhîvœn_hódî
 *
evh
;

1072 
uöt8
 *
pktd©a
;

1073 
¥i‹ôy
 = 0;

1074 
rc
 = 0;

1076 
pktd©a
 = (
uöt8
 *)
	`PKTDATA
(
NULL
, 
pkt
);

1077 
	`ASSERT
(
	`ISALIGNED
((
uöçå
)
pktd©a
, (
uöt16
)));

1079 
eh
 = (
ëhî_hódî
 *Ë
pktd©a
;

1081 i‡(
	`¡oh16
(
eh
->
ëhî_ty≥
Ë=
ETHER_TYPE_8021Q
) {

1082 
uöt16
 
vœn_èg
;

1083 
vœn_¥io
, 
ds˝_¥io
 = 0;

1085 
evh
 = (
ëhîvœn_hódî
 *)
eh
;

1087 
vœn_èg
 = 
	`¡oh16
(
evh
->vlan_tag);

1088 
vœn_¥io
 = (Ë(
vœn_èg
 >> 
VLAN_PRI_SHIFT
Ë& 
VLAN_PRI_MASK
;

1090 i‡(
	`¡oh16
(
evh
->
ëhî_ty≥
Ë=
ETHER_TYPE_IP
) {

1091 
uöt8
 *
ù_body
 = 
pktd©a
 + (
ëhîvœn_hódî
);

1092 
uöt8
 
tos_tc
 = 
	`IP_TOS46
(
ù_body
);

1093 
ds˝_¥io
 = ()(
tos_tc
 >> 
IPV4_TOS_PREC_SHIFT
);

1097 i‡(
ds˝_¥io
 != 0) {

1098 
¥i‹ôy
 = 
ds˝_¥io
;

1099 
rc
 |
PKTPRIO_VDSCP
;

1101 
¥i‹ôy
 = 
vœn_¥io
;

1102 
rc
 |
PKTPRIO_VLAN
;

1111 i‡(
upd©e_vèg
 && (
¥i‹ôy
 !
vœn_¥io
)) {

1112 
vœn_èg
 &~(
VLAN_PRI_MASK
 << 
VLAN_PRI_SHIFT
);

1113 
vœn_èg
 |(
uöt16
)
¥i‹ôy
 << 
VLAN_PRI_SHIFT
;

1114 
evh
->
vœn_èg
 = 
	`ht⁄16
(vlan_tag);

1115 
rc
 |
PKTPRIO_UPD
;

1117 } i‡(
	`¡oh16
(
eh
->
ëhî_ty≥
Ë=
ETHER_TYPE_IP
) {

1118 
uöt8
 *
ù_body
 = 
pktd©a
 + (
ëhî_hódî
);

1119 
uöt8
 
tos_tc
 = 
	`IP_TOS46
(
ù_body
);

1120 
¥i‹ôy
 = ()(
tos_tc
 >> 
IPV4_TOS_PREC_SHIFT
);

1121 
rc
 |
PKTPRIO_DSCP
;

1124 
	`ASSERT
(
¥i‹ôy
 >0 &&Öri‹ôy <
MAXPRIO
);

1125 
	`PKTSETPRIO
(
pkt
, 
¥i‹ôy
);

1126  (
rc
 | 
¥i‹ôy
);

1127 
	}
}

1130 
	gbcm_unde„º°r
[32];

1131 c⁄° *
	gbcmîr‹°πabÀ
[] = 
BCMERRSTRINGTABLE
;

1135 
	$bcmîr‹°r
(
bcmîr‹
)

1138 
	`ASSERT
(
	`ABS
(
BCME_LAST
Ë=(
	`ARRAYSIZE
(
bcmîr‹°πabÀ
) - 1));

1140 i‡(
bcmîr‹
 > 0 || bcmîr‹ < 
BCME_LAST
) {

1141 
	`¢¥ötf
(
bcm_unde„º°r
, (bcm_unde„º°r), "UndeföedÉº‹ %d", 
bcmîr‹
);

1142  
bcm_unde„º°r
;

1145 
	`ASSERT
(
	`°æí
(
bcmîr‹°πabÀ
[-
bcmîr‹
]Ë< 
BCME_STRLEN
);

1147  
bcmîr‹°πabÀ
[-
bcmîr‹
];

1148 
	}
}

1153 c⁄° 
bcm_iov¨_t
*

1154 
	$bcm_iov¨_lookup
(c⁄° 
bcm_iov¨_t
 *
èbÀ
, c⁄° *
«me
)

1156 c⁄° 
bcm_iov¨_t
 *
vi
;

1157 c⁄° *
lookup_«me
;

1160 
lookup_«me
 = 
	`°ºchr
(
«me
, ':');

1161 i‡(
lookup_«me
 !
NULL
)

1162 
lookup_«me
++;

1164 
lookup_«me
 = 
«me
;

1166 
	`ASSERT
(
èbÀ
 !
NULL
);

1168 
vi
 = 
èbÀ
; vi->
«me
; vi++) {

1169 i‡(!
	`°rcmp
(
vi
->
«me
, 
lookup_«me
))

1170  
vi
;

1174  
NULL
;

1175 
	}
}

1178 
	$bcm_iov¨_Àncheck
(c⁄° 
bcm_iov¨_t
 *
vi
, *
¨g
, 
Àn
, 
boﬁ
 
£t
)

1180 
bcmîr‹
 = 0;

1183 
vi
->
ty≥
) {

1184 
IOVT_BOOL
:

1185 
IOVT_INT8
:

1186 
IOVT_INT16
:

1187 
IOVT_INT32
:

1188 
IOVT_UINT8
:

1189 
IOVT_UINT16
:

1190 
IOVT_UINT32
:

1192 i‡(
Àn
 < ()()) {

1193 
bcmîr‹
 = 
BCME_BUFTOOSHORT
;

1197 
IOVT_BUFFER
:

1199 i‡(
Àn
 < 
vi
->
möÀn
) {

1200 
bcmîr‹
 = 
BCME_BUFTOOSHORT
;

1204 
IOVT_VOID
:

1205 i‡(!
£t
) {

1207 
bcmîr‹
 = 
BCME_UNSUPPORTED
;

1208 } i‡(
Àn
) {

1210 
bcmîr‹
 = 
BCME_BUFTOOLONG
;

1216 
	`ASSERT
(0);

1217 
bcmîr‹
 = 
BCME_UNSUPPORTED
;

1220  
bcmîr‹
;

1221 
	}
}

1248 c⁄° 
uöt8
 
	g¸c8_èbÀ
[256] = {

1283 
	#CRC_INNER_LOOP
(
n
, 
c
, 
x
) \

1284 (
c
Ë((cË>> 8Ë^ 
¸c
##
n
##
_èbÀ
[((cË^ (
x
)Ë& 0xff]

	)

1286 
uöt8


1287 
	$hnd¸c8
(

1288 
uöt8
 *
pd©a
,

1289 
uöt
 
nbyãs
,

1290 
uöt8
 
¸c


1296 
nbyãs
-- > 0)

1297 
¸c
 = 
¸c8_èbÀ
[(¸¯^ *
pd©a
++) & 0xff];

1299  
¸c
;

1300 
	}
}

1324 c⁄° 
uöt16
 
	g¸c16_èbÀ
[256] = {

1359 
uöt16


1360 
	$hnd¸c16
(

1361 
uöt8
 *
pd©a
,

1362 
uöt
 
nbyãs
,

1363 
uöt16
 
¸c


1366 
nbyãs
-- > 0)

1367 
	`CRC_INNER_LOOP
(16, 
¸c
, *
pd©a
++);

1368  
¸c
;

1369 
	}
}

1371 c⁄° 
uöt32
 
	g¸c32_èbÀ
[256] = {

1442 
uöt32


1443 
	$hnd¸c32
(
uöt8
 *
pd©a
, 
uöt
 
nbyãs
, 
uöt32
 
¸c
)

1445 
uöt8
 *
≥nd
;

1446 
≥nd
 = 
pd©a
 + 
nbyãs
;

1447 
pd©a
 < 
≥nd
)

1448 
	`CRC_INNER_LOOP
(32, 
¸c
, *
pd©a
++);

1450  
¸c
;

1451 
	}
}

1453 #ifde‡
nŸdef


1454 
	#CLEN
 1499

	)

1455 
	#CBUFSIZ
 (
CLEN
+4)

	)

1456 
	#CNBUFS
 5

	)

1459 
	$ã°¸c32
()

1461 
uöt
 
j
, 
k
, 
l
;

1462 
uöt8
 *
buf
;

1463 
uöt
 
Àn
[
CNBUFS
];

1464 
uöt32
 
¸¸
;

1465 
uöt32
 
¸c32tv
[
CNBUFS
] =

1468 
	`ASSERT
((
buf
 = 
	`MALLOC
(
CBUFSIZ
*
CNBUFS
)Ë!
NULL
);

1471 
l
 = 0;Ü <= 4;Ü++) {

1472 
j
 = 0; j < 
CNBUFS
; j++) {

1473 
Àn
[
j
] = 
CLEN
;

1474 
k
 = 0; k < 
Àn
[
j
]; k++)

1475 *(
buf
 + 
j
*
CBUFSIZ
 + (
k
+
l
)) = (j+k) & 0xff;

1478 
j
 = 0; j < 
CNBUFS
; j++) {

1479 
¸¸
 = 
	`¸c32
(
buf
 + 
j
*
CBUFSIZ
 + 
l
, 
Àn
[j], 
CRC32_INIT_VALUE
);

1480 
	`ASSERT
(
¸¸
 =
¸c32tv
[
j
]);

1484 
	`MFREE
(
buf
, 
CBUFSIZ
*
CNBUFS
);

1486 
	}
}

1497 
bcm_év_t
 *

1498 
	$bcm_√xt_év
(
bcm_év_t
 *
ñt
, *
buÊí
)

1500 
Àn
;

1503 i‡(!
	`bcm_vÆid_év
(
ñt
, *
buÊí
))

1504  
NULL
;

1507 
Àn
 = 
ñt
->len;

1508 
ñt
 = (
bcm_év_t
*)”…->
d©a
 + 
Àn
);

1509 *
buÊí
 -(
TLV_HDR_LEN
 + 
Àn
);

1512 i‡(!
	`bcm_vÆid_év
(
ñt
, *
buÊí
))

1513  
NULL
;

1515  
ñt
;

1516 
	}
}

1523 
bcm_év_t
 *

1524 
	$bcm_∑r£_évs
(*
buf
, 
buÊí
, 
uöt
 
key
)

1526 
bcm_év_t
 *
ñt
;

1527 
tŸÀn
;

1529 
ñt
 = (
bcm_év_t
*)
buf
;

1530 
tŸÀn
 = 
buÊí
;

1533 
tŸÀn
 >
TLV_HDR_LEN
) {

1534 
Àn
 = 
ñt
->len;

1537 i‡((
ñt
->
id
 =
key
) &&

1538 (
tŸÀn
 >(
Àn
 + 
TLV_HDR_LEN
)))

1539  (
ñt
);

1541 
ñt
 = (
bcm_év_t
*)((
uöt8
*Î… + (
Àn
 + 
TLV_HDR_LEN
));

1542 
tŸÀn
 -(
Àn
 + 
TLV_HDR_LEN
);

1545  
NULL
;

1546 
	}
}

1554 
bcm_év_t
 *

1555 
	$bcm_∑r£_‹dîed_évs
(*
buf
, 
buÊí
, 
uöt
 
key
)

1557 
bcm_év_t
 *
ñt
;

1558 
tŸÀn
;

1560 
ñt
 = (
bcm_év_t
*)
buf
;

1561 
tŸÀn
 = 
buÊí
;

1564 
tŸÀn
 >
TLV_HDR_LEN
) {

1565 
uöt
 
id
 = 
ñt
->id;

1566 
Àn
 = 
ñt
->len;

1569 i‡(
id
 > 
key
)

1570  (
NULL
);

1573 i‡((
id
 =
key
) &&

1574 (
tŸÀn
 >(
Àn
 + 
TLV_HDR_LEN
)))

1575  (
ñt
);

1577 
ñt
 = (
bcm_év_t
*)((
uöt8
*Î… + (
Àn
 + 
TLV_HDR_LEN
));

1578 
tŸÀn
 -(
Àn
 + 
TLV_HDR_LEN
);

1580  
NULL
;

1581 
	}
}

1583 #i‡
deföed
(
WLMSG_PRHDRS
Ë|| deföed(
WLMSG_PRPKT
Ë|| deföed(
WLMSG_ASSOC
) || \

1584 
	$deföed
(
DHD_DEBUG
)

1586 
	$bcm_f‹m©_Êags
(c⁄° 
bcm_bô_desc_t
 *
bd
, 
uöt32
 
Êags
, * 
buf
, 
Àn
)

1588 
i
;

1589 * 
p
 = 
buf
;

1590 
hex°r
[16];

1591 
¶í
 = 0, 
∆í
 = 0;

1592 
uöt32
 
bô
;

1593 c⁄° * 
«me
;

1595 i‡(
Àn
 < 2 || !
buf
)

1598 
buf
[0] = '\0';

1600 
i
 = 0; 
Êags
 != 0; i++) {

1601 
bô
 = 
bd
[
i
].bit;

1602 
«me
 = 
bd
[
i
].name;

1603 i‡(
bô
 =0 && 
Êags
 != 0) {

1605 
	`¢¥ötf
(
hex°r
, 16, "0x%X", 
Êags
);

1606 
«me
 = 
hex°r
;

1607 
Êags
 = 0;

1608 } i‡((
Êags
 & 
bô
) == 0)

1610 
Êags
 &~
bô
;

1611 
∆í
 = 
	`°æí
(
«me
);

1612 
¶í
 +
∆í
;

1614 i‡(
Êags
 != 0)

1615 
¶í
 += 1;

1617 i‡(
Àn
 <
¶í
)

1620 
	`°∫˝y
(
p
, 
«me
, 
∆í
 + 1);

1621 
p
 +
∆í
;

1623 i‡(
Êags
 != 0)

1624 
p
 +
	`¢¥ötf
(p, 2, " ");

1628 i‡(
Êags
 != 0) {

1629 i‡(
Àn
 < 2)

1630 
p
 -2 - 
Àn
;

1631 
p
 +
	`¢¥ötf
(p, 2, ">");

1634  ()(
p
 - 
buf
);

1635 
	}
}

1639 
	$bcm_f‹m©_hex
(*
°r
, c⁄° *
byãs
, 
Àn
)

1641 
i
;

1642 *
p
 = 
°r
;

1643 c⁄° 
uöt8
 *
§c
 = (c⁄° uöt8*)
byãs
;

1645 
i
 = 0; i < 
Àn
; i++) {

1646 
p
 +
	`¢¥ötf
’, 3, "%02X", *
§c
);

1647 
§c
++;

1649  ()(
p
 - 
°r
);

1650 
	}
}

1655 
	$¥hex
(c⁄° *
msg
, 
uch¨
 *
buf
, 
uöt
 
nbyãs
)

1657 
löe
[128], *
p
;

1658 
Àn
 = (
löe
);

1659 
nch¨
;

1660 
uöt
 
i
;

1662 i‡(
msg
 && (msg[0] != '\0'))

1663 
	`¥ötf
("%s:\n", 
msg
);

1665 
p
 = 
löe
;

1666 
i
 = 0; i < 
nbyãs
; i++) {

1667 i‡(
i
 % 16 == 0) {

1668 
nch¨
 = 
	`¢¥ötf
(
p
, 
Àn
, " %04d: ", 
i
);

1669 
p
 +
nch¨
;

1670 
Àn
 -
nch¨
;

1672 i‡(
Àn
 > 0) {

1673 
nch¨
 = 
	`¢¥ötf
(
p
, 
Àn
, "%02x ", 
buf
[
i
]);

1674 
p
 +
nch¨
;

1675 
Àn
 -
nch¨
;

1678 i‡(
i
 % 16 == 15) {

1679 
	`¥ötf
("%s\n", 
löe
);

1680 
p
 = 
löe
;

1681 
Àn
 = (
löe
);

1686 i‡(
p
 !
löe
)

1687 
	`¥ötf
("%s\n", 
löe
);

1688 
	}
}

1690 c⁄° *
	g¸y±o_Ægo_«mes
[] = {

1706 
	$bcm_¸y±o_Ægo_«me
(
uöt
 
Ægo
)

1708  (
Ægo
 < 
	`ARRAYSIZE
(
¸y±o_Ægo_«mes
)) ? crypto_algo_names[algo] : "ERR";

1709 
	}
}

1713 
	$bcm_chù«me
(
uöt
 
chùid
, *
buf
, uöà
Àn
)

1715 c⁄° *
fmt
;

1717 
fmt
 = ((
chùid
 > 0xa000) || (chipid < 0x4000)) ? "%d" : "%x";

1718 
	`¢¥ötf
(
buf
, 
Àn
, 
fmt
, 
chùid
);

1719  
buf
;

1720 
	}
}

1724 
	$bcm_bªv_°r
(
uöt32
 
bªv
, *
buf
)

1726 i‡(
bªv
 < 0x100)

1727 
	`¢¥ötf
(
buf
, 8, "%d.%d", (
bªv
 & 0xf0) >> 4, brev & 0xf);

1729 
	`¢¥ötf
(
buf
, 8, "%c%03x", ((
bªv
 & 0xf000) == 0x1000) ? 'P' : 'A', brev & 0xfff);

1731  (
buf
);

1732 
	}
}

1734 
	#BUFSIZE_TODUMP_ATONCE
 512

	)

1738 
	$¥ötbig
(*
buf
)

1740 
uöt
 
Àn
, 
max_Àn
;

1741 
c
;

1743 
Àn
 = 
	`°æí
(
buf
);

1745 
max_Àn
 = 
BUFSIZE_TODUMP_ATONCE
;

1747 
Àn
 > 
max_Àn
) {

1748 
c
 = 
buf
[
max_Àn
];

1749 
buf
[
max_Àn
] = '\0';

1750 
	`¥ötf
("%s", 
buf
);

1751 
buf
[
max_Àn
] = 
c
;

1753 
buf
 +
max_Àn
;

1754 
Àn
 -
max_Àn
;

1757 
	`¥ötf
("%s\n", 
buf
);

1759 
	}
}

1762 
uöt


1763 
	$bcmdumpfõlds
(
bcmué_rdªg_πn
 
ªad_πn
, *
¨g0
, 
uöt
 
¨g1
, 
fõlddesc
 *
fõlddesc_¨øy
,

1764 *
buf
, 
uöt32
 
bufsize
)

1766 
uöt
 
fûÀd_Àn
;

1767 
Àn
;

1768 
fõlddesc
 *
cur_±r
;

1770 
fûÀd_Àn
 = 0;

1771 
cur_±r
 = 
fõlddesc_¨øy
;

1773 
bufsize
 > 1) {

1774 i‡(
cur_±r
->
«móndfmt
 =
NULL
)

1776 
Àn
 = 
	`¢¥ötf
(
buf
, 
bufsize
, 
cur_±r
->
«móndfmt
,

1777 
	`ªad_πn
(
¨g0
, 
¨g1
, 
cur_±r
->
off£t
));

1779 i‡(
Àn
 < 0 || (
uöt32
Óí >
bufsize
)

1780 
Àn
 = 
bufsize
 - 1;

1781 
buf
 +
Àn
;

1782 
bufsize
 -
Àn
;

1783 
fûÀd_Àn
 +
Àn
;

1784 
cur_±r
++;

1786  
fûÀd_Àn
;

1787 
	}
}

1789 
uöt


1790 
	$bcm_mkiov¨
(*
«me
, *
d©a
, 
uöt
 
d©Æí
, *
buf
, uöà
buÊí
)

1792 
uöt
 
Àn
;

1794 
Àn
 = 
	`°æí
(
«me
) + 1;

1796 i‡((
Àn
 + 
d©Æí
Ë> 
buÊí
)

1799 
	`°∫˝y
(
buf
, 
«me
, 
buÊí
);

1802 
	`mem˝y
(&
buf
[
Àn
], 
d©a
, 
d©Æí
);

1803 
Àn
 +
d©Æí
;

1805  
Àn
;

1806 
	}
}

1814 
	#QDBM_OFFSET
 153

	)

1815 
	#QDBM_TABLE_LEN
 40

	)

1820 
	#QDBM_TABLE_LOW_BOUND
 6493

	)

1826 
	#QDBM_TABLE_HIGH_BOUND
 64938

	)

1828 c⁄° 
uöt16
 
	gnqdBm_to_mW_m≠
[
QDBM_TABLE_LEN
] = {

1837 
uöt16


1838 
	$bcm_qdbm_to_mw
(
uöt8
 
qdbm
)

1840 
uöt
 
Á˘‹
 = 1;

1841 
idx
 = 
qdbm
 - 
QDBM_OFFSET
;

1843 i‡(
idx
 >
QDBM_TABLE_LEN
) {

1851 
idx
 < 0) {

1852 
idx
 += 40;

1853 
Á˘‹
 *= 10;

1859  ((
nqdBm_to_mW_m≠
[
idx
] + 
Á˘‹
/2) / factor);

1860 
	}
}

1862 
uöt8


1863 
	$bcm_mw_to_qdbm
(
uöt16
 
mw
)

1865 
uöt8
 
qdbm
;

1866 
off£t
;

1867 
uöt
 
mw_uöt
 = 
mw
;

1868 
uöt
 
bound¨y
;

1871 i‡(
mw_uöt
 <= 1)

1874 
off£t
 = 
QDBM_OFFSET
;

1877 
mw_uöt
 < 
QDBM_TABLE_LOW_BOUND
) {

1878 
mw_uöt
 *= 10;

1879 
off£t
 -= 40;

1882 
qdbm
 = 0; qdbm < 
QDBM_TABLE_LEN
-1; qdbm++) {

1883 
bound¨y
 = 
nqdBm_to_mW_m≠
[
qdbm
] + (nqdBm_to_mW_map[qdbm+1] -

1884 
nqdBm_to_mW_m≠
[
qdbm
])/2;

1885 i‡(
mw_uöt
 < 
bound¨y
) ;

1888 
qdbm
 +(
uöt8
)
off£t
;

1890  (
qdbm
);

1891 
	}
}

1894 
uöt


1895 
	$bcm_bôcou¡
(
uöt8
 *
bôm≠
, 
uöt
 
Àngth
)

1897 
uöt
 
bôcou¡
 = 0, 
i
;

1898 
uöt8
 
tmp
;

1899 
i
 = 0; i < 
Àngth
; i++) {

1900 
tmp
 = 
bôm≠
[
i
];

1901 
tmp
) {

1902 
bôcou¡
++;

1903 
tmp
 &= (tmp - 1);

1906  
bôcou¡
;

1907 
	}
}

1909 #ifde‡
BCMDRIVER


1913 
	$bcm_böô
(
bcm°rbuf
 *
b
, *
buf
, 
uöt
 
size
)

1915 
b
->
‹igsize
 = b->
size
 = size;

1916 
b
->
‹igbuf
 = b->
buf
 = buf;

1917 
	}
}

1921 
	$bcm_b¥ötf
(
bcm°rbuf
 *
b
, c⁄° *
fmt
, ...)

1923 
va_li°
 
≠
;

1924 
r
;

1926 
	`va_°¨t
(
≠
, 
fmt
);

1928 
r
 = 
	`v¢¥ötf
(
b
->
buf
, b->
size
, 
fmt
, 
≠
);

1937 i‡((
r
 =-1Ë|| (∏>()
b
->
size
)) {

1938 
b
->
size
 = 0;

1940 
b
->
size
 -
r
;

1941 
b
->
buf
 +
r
;

1944 
	`va_íd
(
≠
);

1946  
r
;

1947 
	}
}

1950 
	$bcm_b¥hex
(
bcm°rbuf
 *
b
, c⁄° *
msg
, 
boﬁ
 
√wlöe
, 
uöt8
 *
buf
, 
Àn
)

1952 
i
;

1954 i‡(
msg
 !
NULL
 && msg[0] != '\0')

1955 
	`bcm_b¥ötf
(
b
, "%s", 
msg
);

1956 
i
 = 0; i < 
Àn
; i ++)

1957 
	`bcm_b¥ötf
(
b
, "%02X", 
buf
[
i
]);

1958 i‡(
√wlöe
)

1959 
	`bcm_b¥ötf
(
b
, "\n");

1960 
	}
}

1963 
	$bcm_öc_byãs
(
uch¨
 *
num
, 
num_byãs
, 
uöt8
 
amou¡
)

1965 
i
;

1967 
i
 = 0; i < 
num_byãs
; i++) {

1968 
num
[
i
] +
amou¡
;

1969 i‡(
num
[
i
] >
amou¡
)

1971 
amou¡
 = 1;

1973 
	}
}

1976 
	$bcm_cmp_byãs
(c⁄° 
uch¨
 *
¨g1
, c⁄° uch¨ *
¨g2
, 
uöt8
 
nbyãs
)

1978 
i
;

1980 
i
 = 
nbyãs
 - 1; i >= 0; i--) {

1981 i‡(
¨g1
[
i
] !
¨g2
[i])

1982  (
¨g1
[
i
] - 
¨g2
[i]);

1985 
	}
}

1988 
	$bcm_¥öt_byãs
(c⁄° *
«me
, c⁄° 
uch¨
 *
d©a
, 
Àn
)

1990 
i
;

1991 
≥r_löe
 = 0;

1993 
	`¥ötf
("%s: %d \n", 
«me
 ?Çamê: "", 
Àn
);

1994 
i
 = 0; i < 
Àn
; i++) {

1995 
	`¥ötf
("%02x ", *
d©a
++);

1996 
≥r_löe
++;

1997 i‡(
≥r_löe
 == 16) {

1998 
≥r_löe
 = 0;

1999 
	`¥ötf
("\n");

2002 
	`¥ötf
("\n");

2003 
	}
}

2004 #i‡
deföed
(
WLTINYDUMP
Ë|| deföed(
WLMSG_INFORM
Ë|| deföed(
WLMSG_ASSOC
) || \

2005 
deföed
(
WLMSG_PRPKT
Ë|| 
	$deföed
(
WLMSG_WSEC
)

2006 
	#SSID_FMT_BUF_LEN
 ((4 * 
DOT11_MAX_SSID_LEN
Ë+ 1)

	)

2009 
	$bcm_f‹m©_ssid
(* 
buf
, c⁄° 
uch¨
 
ssid
[], 
uöt
 
ssid_Àn
)

2011 
uöt
 
i
, 
c
;

2012 *
p
 = 
buf
;

2013 *
ídp
 = 
buf
 + 
SSID_FMT_BUF_LEN
;

2015 i‡(
ssid_Àn
 > 
DOT11_MAX_SSID_LEN
) ssid_len = DOT11_MAX_SSID_LEN;

2017 
i
 = 0; i < 
ssid_Àn
; i++) {

2018 
c
 = (
uöt
)
ssid
[
i
];

2019 i‡(
c
 == '\\') {

2020 *
p
++ = '\\';

2021 *
p
++ = '\\';

2022 } i‡(
	`bcm_i•röt
((
uch¨
)
c
)) {

2023 *
p
++ = ()
c
;

2025 
p
 +
	`¢¥ötf
’, (
ídp
 -Ö), "\\x%02X", 
c
);

2028 *
p
 = '\0';

2029 
	`ASSERT
(
p
 < 
ídp
);

2031  ()(
p
 - 
buf
);

2032 
	}
}

2045 
	$¥o˚ss_nvøm_v¨s
(*
v¨buf
, 
Àn
)

2047 *
dp
;

2048 
boﬁ
 
födNewlöe
;

2049 
cﬁumn
;

2050 
buf_Àn
, 
n
;

2051 
∑d
 = 0;

2053 
dp
 = 
v¨buf
;

2055 
födNewlöe
 = 
FALSE
;

2056 
cﬁumn
 = 0;

2058 
n
 = 0;Ç < 
Àn
;Ç++) {

2059 i‡(
v¨buf
[
n
] == '\r')

2061 i‡(
födNewlöe
 && 
v¨buf
[
n
] != '\n')

2063 
födNewlöe
 = 
FALSE
;

2064 i‡(
v¨buf
[
n
] == '#') {

2065 
födNewlöe
 = 
TRUE
;

2068 i‡(
v¨buf
[
n
] == '\n') {

2069 i‡(
cﬁumn
 == 0)

2071 *
dp
++ = 0;

2072 
cﬁumn
 = 0;

2075 *
dp
++ = 
v¨buf
[
n
];

2076 
cﬁumn
++;

2078 
buf_Àn
 = ()(
dp
 - 
v¨buf
);

2079 i‡(
buf_Àn
 % 4) {

2080 
∑d
 = 4 - 
buf_Àn
 % 4;

2081 i‡(
∑d
 && (
buf_Àn
 +Öad <
Àn
)) {

2082 
buf_Àn
 +
∑d
;

2086 
dp
 < 
v¨buf
 + 
n
)

2087 *
dp
++ = 0;

2089  
buf_Àn
;

2090 
	}
}

	@bcmwifi_channels.c

28 
	~<bcm_cfg.h
>

29 
	~<ty≥defs.h
>

31 #ifde‡
BCMDRIVER


32 
	~<o¶.h
>

33 
	~<bcmutûs.h
>

34 
	#°πoul
(
≈å
, 
íd±r
, 
ba£
Ë
	`bcm_°πoul
(“±r), (íd±r), (ba£))

	)

35 
	#tﬁowî
(
c
Ë(
	`bcm_isuµî
((c)Ë? ((cË+ 'a' - 'A'Ë: (c))

	)

37 
	~<°dio.h
>

38 
	~<°dlib.h
>

39 
	~<˘y≥.h
>

40 #i‚de‡
ASSERT


41 
	#ASSERT
(
exp
)

	)

45 #ifde‡
_bcmwifi_c_


47 
	~<bcmwifi.h
>

49 
	~<bcmwifi_ch™√ls.h
>

52 #i‡
deföed
(
WIN32
Ë&& (deföed(
BCMDLL
Ë|| deföed(
WLMDLL
))

53 
	~<bcm°dlib.h
>

56 #i‚de‡
D11AC_IOTYPES


92 
	$wf_ch•ec_¡ﬂ
(
ch™•ec_t
 
ch•ec
, *
buf
)

94 c⁄° *
b™d
, *
bw
, *
sb
;

95 
uöt
 
ch™√l
;

97 
b™d
 = "";

98 
bw
 = "";

99 
sb
 = "";

100 
ch™√l
 = 
	`CHSPEC_CHANNEL
(
ch•ec
);

102 i‡((
	`CHSPEC_IS2G
(
ch•ec
Ë&& 
ch™√l
 > 
CH_MAX_2G_CHANNEL
) ||

103 (
	`CHSPEC_IS5G
(
ch•ec
Ë&& 
ch™√l
 <
CH_MAX_2G_CHANNEL
))

104 
b™d
 = (
	`CHSPEC_IS2G
(
ch•ec
)) ? "b" : "a";

105 i‡(
	`CHSPEC_IS40
(
ch•ec
)) {

106 i‡(
	`CHSPEC_SB_UPPER
(
ch•ec
)) {

107 
sb
 = "u";

108 
ch™√l
 +
CH_10MHZ_APART
;

110 
sb
 = "l";

111 
ch™√l
 -
CH_10MHZ_APART
;

113 } i‡(
	`CHSPEC_IS10
(
ch•ec
)) {

114 
bw
 = "n";

118 
	`¢¥ötf
(
buf
, 6, "%d%s%s%s", 
ch™√l
, 
b™d
, 
bw
, 
sb
);

119  (
buf
);

120 
	}
}

125 
ch™•ec_t


126 
	$wf_ch•ec_©⁄
(c⁄° *
a
)

128 *
ídp
 = 
NULL
;

129 
uöt
 
ch™√l
, 
b™d
, 
bw
, 
˘l_sb
;

130 
c
;

132 
ch™√l
 = 
	`°πoul
(
a
, &
ídp
, 10);

135 i‡(
ídp
 =
a
)

138 i‡(
ch™√l
 > 
MAXCHANNEL
)

141 
b™d
 = ((
ch™√l
 <
CH_MAX_2G_CHANNEL
Ë? 
WL_CHANSPEC_BAND_2G
 : 
WL_CHANSPEC_BAND_5G
);

142 
bw
 = 
WL_CHANSPEC_BW_20
;

143 
˘l_sb
 = 
WL_CHANSPEC_CTL_SB_NONE
;

145 
a
 = 
ídp
;

147 
c
 = 
	`tﬁowî
(
a
[0]);

148 i‡(
c
 == '\0')

149 
d⁄e
;

152 i‡(
c
 == 'a' || c == 'b') {

153 
b™d
 = (
c
 ='a'Ë? 
WL_CHANSPEC_BAND_5G
 : 
WL_CHANSPEC_BAND_2G
;

154 
a
++;

155 
c
 = 
	`tﬁowî
(
a
[0]);

156 i‡(
c
 == '\0')

157 
d⁄e
;

161 i‡(
c
 == 'n') {

162 
bw
 = 
WL_CHANSPEC_BW_10
;

163 } i‡(
c
 == 'l') {

164 
bw
 = 
WL_CHANSPEC_BW_40
;

165 
˘l_sb
 = 
WL_CHANSPEC_CTL_SB_LOWER
;

167 i‡(
ch™√l
 <(
MAXCHANNEL
 - 
CH_20MHZ_APART
))

168 
ch™√l
 +
CH_10MHZ_APART
;

171 } i‡(
c
 == 'u') {

172 
bw
 = 
WL_CHANSPEC_BW_40
;

173 
˘l_sb
 = 
WL_CHANSPEC_CTL_SB_UPPER
;

175 i‡(
ch™√l
 > 
CH_20MHZ_APART
)

176 
ch™√l
 -
CH_10MHZ_APART
;

183 
d⁄e
:

184  (
ch™√l
 | 
b™d
 | 
bw
 | 
˘l_sb
);

185 
	}
}

193 
boﬁ


194 
	$wf_ch•ec_mÆf‹med
(
ch™•ec_t
 
ch™•ec
)

197 i‡(!
	`CHSPEC_IS5G
(
ch™•ec
Ë&& !
	`CHSPEC_IS2G
(chanspec))

198  
TRUE
;

200 i‡(!
	`CHSPEC_IS40
(
ch™•ec
Ë&& !
	`CHSPEC_IS20
(chanspec))

201  
TRUE
;

204 i‡(
	`CHSPEC_IS20
(
ch™•ec
)) {

205 i‡(!
	`CHSPEC_SB_NONE
(
ch™•ec
))

206  
TRUE
;

208 i‡(!
	`CHSPEC_SB_UPPER
(
ch™•ec
Ë&& !
	`CHSPEC_SB_LOWER
(chanspec))

209  
TRUE
;

212  
FALSE
;

213 
	}
}

220 
uöt8


221 
	$wf_ch•ec_˘lch™
(
ch™•ec_t
 
ch•ec
)

223 
uöt8
 
˘l_ch™
;

226 i‡(
	`CHSPEC_CTL_SB
(
ch•ec
Ë=
WL_CHANSPEC_CTL_SB_NONE
) {

227  
	`CHSPEC_CHANNEL
(
ch•ec
);

230 
	`ASSERT
(
	`CHSPEC_BW
(
ch•ec
Ë=
WL_CHANSPEC_BW_40
);

234 i‡(
	`CHSPEC_CTL_SB
(
ch•ec
Ë=
WL_CHANSPEC_CTL_SB_UPPER
) {

236 
˘l_ch™
 = 
	`UPPER_20_SB
(
	`CHSPEC_CHANNEL
(
ch•ec
));

238 
	`ASSERT
(
	`CHSPEC_CTL_SB
(
ch•ec
Ë=
WL_CHANSPEC_CTL_SB_LOWER
);

240 
˘l_ch™
 = 
	`LOWER_20_SB
(
	`CHSPEC_CHANNEL
(
ch•ec
));

244  
˘l_ch™
;

245 
	}
}

247 
ch™•ec_t


248 
	$wf_ch•ec_˘lch•ec
(
ch™•ec_t
 
ch•ec
)

250 
ch™•ec_t
 
˘l_ch•ec
 = 0;

251 
uöt8
 
ch™√l
;

253 
	`ASSERT
(!
	`wf_ch•ec_mÆf‹med
(
ch•ec
));

256 i‡(
	`CHSPEC_CTL_SB
(
ch•ec
Ë=
WL_CHANSPEC_CTL_SB_NONE
) {

257  
ch•ec
;

259 i‡(
	`CHSPEC_CTL_SB
(
ch•ec
Ë=
WL_CHANSPEC_CTL_SB_UPPER
) {

260 
ch™√l
 = 
	`UPPER_20_SB
(
	`CHSPEC_CHANNEL
(
ch•ec
));

262 
ch™√l
 = 
	`LOWER_20_SB
(
	`CHSPEC_CHANNEL
(
ch•ec
));

264 
˘l_ch•ec
 = 
ch™√l
 | 
WL_CHANSPEC_BW_20
 | 
WL_CHANSPEC_CTL_SB_NONE
;

265 
˘l_ch•ec
 |
	`CHSPEC_BAND
(
ch•ec
);

267  
˘l_ch•ec
;

268 
	}
}

340 c⁄° *
	gwf_ch•ec_bw_°r
[] =

352 c⁄° 
uöt8
 
	gwf_ch•ec_bw_mhz
[] =

355 
	#WF_NUM_BW
 \

356 ((
wf_ch•ec_bw_mhz
)/(
uöt8
))

	)

359 c⁄° 
uöt8
 
	gwf_5g_40m_ch™s
[] =

361 
	#WF_NUM_5G_40M_CHANS
 \

362 ((
wf_5g_40m_ch™s
)/(
uöt8
))

	)

365 c⁄° 
uöt8
 
	gwf_5g_80m_ch™s
[] =

367 
	#WF_NUM_5G_80M_CHANS
 \

368 ((
wf_5g_80m_ch™s
)/(
uöt8
))

	)

371 c⁄° 
uöt8
 
	gwf_5g_160m_ch™s
[] =

373 
	#WF_NUM_5G_160M_CHANS
 \

374 ((
wf_5g_160m_ch™s
)/(
uöt8
))

	)

378 
uöt


379 
	$bw_ch•ec_to_mhz
(
ch™•ec_t
 
ch•ec
)

381 
uöt
 
bw
;

383 
bw
 = (
ch•ec
 & 
WL_CHANSPEC_BW_MASK
Ë>> 
WL_CHANSPEC_BW_SHIFT
;

384  (
bw
 >
WF_NUM_BW
 ? 0 : 
wf_ch•ec_bw_mhz
[bw]);

385 
	}
}

390 
uöt8


391 
	$˚¡î_ch™_to_edge
(
uöt
 
bw
)

397  (
uöt8
)(((
bw
 - 20) / 2) / 5);

398 
	}
}

403 
uöt8


404 
	$ch™√l_low_edge
(
uöt
 
˚¡î_ch
, uöà
bw
)

406  (
uöt8
)(
˚¡î_ch
 - 
	`˚¡î_ch™_to_edge
(
bw
));

407 
	}
}

413 
	$ch™√l_to_sb
(
uöt
 
˚¡î_ch
, uöà
˘l_ch
, uöà
bw
)

415 
uöt
 
lowe°
 = 
	`ch™√l_low_edge
(
˚¡î_ch
, 
bw
);

416 
uöt
 
sb
;

418 i‡((
˘l_ch
 - 
lowe°
) % 4) {

423 
sb
 = ((
˘l_ch
 - 
lowe°
) / 4);

426 i‡(
sb
 >(
bw
 / 20)) {

431  
sb
;

432 
	}
}

435 
uöt8


436 
	$ch™√l_to_˘l_ch™
(
uöt
 
˚¡î_ch
, uöà
bw
, uöà
sb
)

438  (
uöt8
)(
	`ch™√l_low_edge
(
˚¡î_ch
, 
bw
Ë+ 
sb
 * 4);

439 
	}
}

445 
	$ch™√l_80mhz_to_id
(
uöt
 
ch
)

447 
uöt
 
i
;

448 
i
 = 0; i < 
WF_NUM_5G_80M_CHANS
; i ++) {

449 i‡(
ch
 =
wf_5g_80m_ch™s
[
i
])

450  
i
;

454 
	}
}

462 
	$wf_ch•ec_¡ﬂ
(
ch™•ec_t
 
ch•ec
, *
buf
)

464 c⁄° *
b™d
;

465 
uöt
 
˘l_ch™
;

467 i‡(
	`wf_ch•ec_mÆf‹med
(
ch•ec
))

468  
NULL
;

470 
b™d
 = "";

473 i‡((
	`CHSPEC_IS2G
(
ch•ec
Ë&& 
	`CHSPEC_CHANNEL
(ch•ecË> 
CH_MAX_2G_CHANNEL
) ||

474 (
	`CHSPEC_IS5G
(
ch•ec
Ë&& 
	`CHSPEC_CHANNEL
(ch•ecË<
CH_MAX_2G_CHANNEL
))

475 
b™d
 = (
	`CHSPEC_IS2G
(
ch•ec
)) ? "2g" : "5g";

478 
˘l_ch™
 = 
	`wf_ch•ec_˘lch™
(
ch•ec
);

481 i‡(
	`CHSPEC_IS20
(
ch•ec
)) {

482 
	`¢¥ötf
(
buf
, 
CHANSPEC_STR_LEN
, "%s%d", 
b™d
, 
˘l_ch™
);

483 } i‡(!
	`CHSPEC_IS8080
(
ch•ec
)) {

484 c⁄° *
bw
;

485 c⁄° *
sb
 = "";

487 
bw
 = 
wf_ch•ec_bw_°r
[(
ch•ec
 & 
WL_CHANSPEC_BW_MASK
Ë>> 
WL_CHANSPEC_BW_SHIFT
];

489 #ifde‡
CHANSPEC_NEW_40MHZ_FORMAT


491 i‡(
	`CHSPEC_IS40
(
ch•ec
Ë&& 
	`CHSPEC_IS2G
(chspec)) {

492 
sb
 = 
	`CHSPEC_SB_UPPER
(
ch•ec
) ? "u" : "l";

495 
	`¢¥ötf
(
buf
, 
CHANSPEC_STR_LEN
, "%s%d/%s%s", 
b™d
, 
˘l_ch™
, 
bw
, 
sb
);

498 i‡(
	`CHSPEC_IS40
(
ch•ec
)) {

499 
sb
 = 
	`CHSPEC_SB_UPPER
(
ch•ec
) ? "u" : "l";

500 
	`¢¥ötf
(
buf
, 
CHANSPEC_STR_LEN
, "%s%d%s", 
b™d
, 
˘l_ch™
, 
sb
);

502 
	`¢¥ötf
(
buf
, 
CHANSPEC_STR_LEN
, "%s%d/%s", 
b™d
, 
˘l_ch™
, 
bw
);

508 
uöt
 
ch™1
 = (
ch•ec
 & 
WL_CHANSPEC_CHAN1_MASK
Ë>> 
WL_CHANSPEC_CHAN1_SHIFT
;

509 
uöt
 
ch™2
 = (
ch•ec
 & 
WL_CHANSPEC_CHAN2_MASK
Ë>> 
WL_CHANSPEC_CHAN2_SHIFT
;

512 
ch™1
 = (ch™1 < 
WF_NUM_5G_80M_CHANS
Ë? 
wf_5g_80m_ch™s
[chan1] : 0;

513 
ch™2
 = (ch™2 < 
WF_NUM_5G_80M_CHANS
Ë? 
wf_5g_80m_ch™s
[chan2] : 0;

516 
	`¢¥ötf
(
buf
, 
CHANSPEC_STR_LEN
, "%d/80+80/%d-%d", 
˘l_ch™
, 
ch™1
, 
ch™2
);

519  (
buf
);

520 
	}
}

523 
	$ªad_uöt
(c⁄° **
p
, *
num
)

525 
vÆ
;

526 *
ídp
 = 
NULL
;

528 
vÆ
 = 
	`°πoul
(*
p
, &
ídp
, 10);

530 i‡(
ídp
 =*
p
)

534 *
p
 = 
ídp
;

536 *
num
 = ()
vÆ
;

539 
	}
}

544 
ch™•ec_t


545 
	$wf_ch•ec_©⁄
(c⁄° *
a
)

547 
ch™•ec_t
 
ch•ec
;

548 
uöt
 
ch•ec_ch
, 
ch•ec_b™d
, 
bw
, 
ch•ec_bw
, 
ch•ec_sb
;

549 
uöt
 
num
, 
˘l_ch
;

550 
uöt
 
ch1
, 
ch2
;

551 
c
, 
sb_ul
 = '\0';

552 
i
;

554 
bw
 = 20;

555 
ch•ec_sb
 = 0;

556 
ch•ec_ch
 = 
ch1
 = 
ch2
 = 0;

559 i‡(!
	`ªad_uöt
(&
a
, &
num
))

563 
c
 = 
	`tﬁowî
(
a
[0]);

564 i‡(
c
 == 'g') {

565 
a
 ++;

568 i‡(
num
 == 2)

569 
ch•ec_b™d
 = 
WL_CHANSPEC_BAND_2G
;

570 i‡(
num
 == 5)

571 
ch•ec_b™d
 = 
WL_CHANSPEC_BAND_5G
;

576 i‡(!
	`ªad_uöt
(&
a
, &
˘l_ch
))

579 
c
 = 
	`tﬁowî
(
a
[0]);

583 
˘l_ch
 = 
num
;

584 
ch•ec_b™d
 = ((
˘l_ch
 <
CH_MAX_2G_CHANNEL
) ?

585 
WL_CHANSPEC_BAND_2G
 : 
WL_CHANSPEC_BAND_5G
);

588 i‡(
c
 == '\0') {

590 
ch•ec_bw
 = 
WL_CHANSPEC_BW_20
;

591 
d⁄e_ªad
;

594 
a
 ++;

597 i‡(
c
 == 'u' || c == 'l') {

598 
sb_ul
 = 
c
;

599 
ch•ec_bw
 = 
WL_CHANSPEC_BW_40
;

600 
d⁄e_ªad
;

604 i‡(
c
 != '/')

608 i‡(!
	`ªad_uöt
(&
a
, &
bw
))

612 i‡(
bw
 == 20) {

613 
ch•ec_bw
 = 
WL_CHANSPEC_BW_20
;

614 } i‡(
bw
 == 40) {

615 
ch•ec_bw
 = 
WL_CHANSPEC_BW_40
;

616 } i‡(
bw
 == 80) {

617 
ch•ec_bw
 = 
WL_CHANSPEC_BW_80
;

618 } i‡(
bw
 == 160) {

619 
ch•ec_bw
 = 
WL_CHANSPEC_BW_160
;

629 
c
 = 
	`tﬁowî
(
a
[0]);

632 i‡(
ch•ec_b™d
 =
WL_CHANSPEC_BAND_2G
 && 
bw
 == 40) {

633 i‡(
c
 == 'u' || c == 'l') {

634 
a
 ++;

635 
sb_ul
 = 
c
;

636 
d⁄e_ªad
;

641 i‡(
c
 == '+') {

643 c⁄° *
∂us80
 = "80/";

648 
ch•ec_bw
 = 
WL_CHANSPEC_BW_8080
;

650 
a
 ++;

653 
i
 = 0; i < 3; i++) {

654 i‡(*
a
++ !*
∂us80
++) {

660 i‡(!
	`ªad_uöt
(&
a
, &
ch1
))

664 i‡(
a
[0] != '-')

666 
a
 ++;

669 i‡(!
	`ªad_uöt
(&
a
, &
ch2
))

673 
d⁄e_ªad
:

675 
a
[0] == ' ') {

676 
a
 ++;

680 i‡(
a
[0] != '\0')

693 i‡(
sb_ul
 != '\0') {

694 i‡(
sb_ul
 == 'l') {

695 
ch•ec_ch
 = 
	`UPPER_20_SB
(
˘l_ch
);

696 
ch•ec_sb
 = 
WL_CHANSPEC_CTL_SB_LLL
;

697 } i‡(
sb_ul
 == 'u') {

698 
ch•ec_ch
 = 
	`LOWER_20_SB
(
˘l_ch
);

699 
ch•ec_sb
 = 
WL_CHANSPEC_CTL_SB_LLU
;

703 i‡(
ch•ec_bw
 =
WL_CHANSPEC_BW_20
) {

704 
ch•ec_ch
 = 
˘l_ch
;

705 
ch•ec_sb
 = 0;

710 i‡(
ch•ec_bw
 !
WL_CHANSPEC_BW_8080
) {

712 c⁄° 
uöt8
 *
˚¡î_ch
 = 
NULL
;

713 
num_ch
 = 0;

714 
sb
 = -1;

716 i‡(
ch•ec_bw
 =
WL_CHANSPEC_BW_40
) {

717 
˚¡î_ch
 = 
wf_5g_40m_ch™s
;

718 
num_ch
 = 
WF_NUM_5G_40M_CHANS
;

719 } i‡(
ch•ec_bw
 =
WL_CHANSPEC_BW_80
) {

720 
˚¡î_ch
 = 
wf_5g_80m_ch™s
;

721 
num_ch
 = 
WF_NUM_5G_80M_CHANS
;

722 } i‡(
ch•ec_bw
 =
WL_CHANSPEC_BW_160
) {

723 
˚¡î_ch
 = 
wf_5g_160m_ch™s
;

724 
num_ch
 = 
WF_NUM_5G_160M_CHANS
;

729 
i
 = 0; i < 
num_ch
; i ++) {

730 
sb
 = 
	`ch™√l_to_sb
(
˚¡î_ch
[
i
], 
˘l_ch
, 
bw
);

731 i‡(
sb
 >= 0) {

732 
ch•ec_ch
 = 
˚¡î_ch
[
i
];

733 
ch•ec_sb
 = 
sb
 << 
WL_CHANSPEC_CTL_SB_SHIFT
;

739 i‡(
sb
 < 0) {

745 
ch1_id
 = 0, 
ch2_id
 = 0;

746 
sb
;

748 
ch1_id
 = 
	`ch™√l_80mhz_to_id
(
ch1
);

749 
ch2_id
 = 
	`ch™√l_80mhz_to_id
(
ch2
);

752 i‡(
ch1
 >
ch2
 || 
ch1_id
 < 0 || 
ch2_id
 < 0)

756 
ch•ec_ch
 = (((
uöt16
)
ch1_id
 << 
WL_CHANSPEC_CHAN1_SHIFT
) |

757 ((
uöt16
)
ch2_id
 << 
WL_CHANSPEC_CHAN2_SHIFT
));

762 
sb
 = 
	`ch™√l_to_sb
(
ch1
, 
˘l_ch
, 
bw
);

763 i‡(
sb
 < 0) {

765 
sb
 = 
	`ch™√l_to_sb
(
ch2
, 
˘l_ch
, 
bw
);

766 i‡(
sb
 < 0) {

773 
sb
 += 4;

776 
ch•ec_sb
 = 
sb
 << 
WL_CHANSPEC_CTL_SB_SHIFT
;

779 
ch•ec
 = (
ch•ec_ch
 | 
ch•ec_b™d
 | 
ch•ec_bw
 | 
ch•ec_sb
);

781 i‡(
	`wf_ch•ec_mÆf‹med
(
ch•ec
))

784  
ch•ec
;

785 
	}
}

793 
boﬁ


794 
	$wf_ch•ec_mÆf‹med
(
ch™•ec_t
 
ch™•ec
)

796 
uöt
 
ch•ec_bw
 = 
	`CHSPEC_BW
(
ch™•ec
);

797 
uöt
 
ch•ec_ch
 = 
	`CHSPEC_CHANNEL
(
ch™•ec
);

800 i‡(
	`CHSPEC_IS2G
(
ch™•ec
)) {

802 i‡(
ch•ec_bw
 !
WL_CHANSPEC_BW_20
 &&

803 
ch•ec_bw
 !
WL_CHANSPEC_BW_40
) {

804  
TRUE
;

806 } i‡(
	`CHSPEC_IS5G
(
ch™•ec
)) {

807 i‡(
ch•ec_bw
 =
WL_CHANSPEC_BW_8080
) {

808 
uöt
 
ch1_id
, 
ch2_id
;

811 
ch1_id
 = 
	`CHSPEC_CHAN1
(
ch™•ec
);

812 
ch2_id
 = 
	`CHSPEC_CHAN2
(
ch™•ec
);

813 i‡(
ch1_id
 >
WF_NUM_5G_80M_CHANS
 || 
ch2_id
 >= WF_NUM_5G_80M_CHANS)

814  
TRUE
;

817 i‡(
ch2_id
 <
ch1_id
)

818  
TRUE
;

819 } i‡(
ch•ec_bw
 =
WL_CHANSPEC_BW_20
 || ch•ec_bw =
WL_CHANSPEC_BW_40
 ||

820 
ch•ec_bw
 =
WL_CHANSPEC_BW_80
 || ch•ec_bw =
WL_CHANSPEC_BW_160
) {

822 i‡(
ch•ec_ch
 > 
MAXCHANNEL
) {

823  
TRUE
;

827  
TRUE
;

831  
TRUE
;

835 i‡(
ch•ec_bw
 =
WL_CHANSPEC_BW_20
) {

836 i‡(
	`CHSPEC_CTL_SB
(
ch™•ec
Ë!
WL_CHANSPEC_CTL_SB_LLL
)

837  
TRUE
;

838 } i‡(
ch•ec_bw
 =
WL_CHANSPEC_BW_40
) {

839 i‡(
	`CHSPEC_CTL_SB
(
ch™•ec
Ë> 
WL_CHANSPEC_CTL_SB_LLU
)

840  
TRUE
;

841 } i‡(
ch•ec_bw
 =
WL_CHANSPEC_BW_80
) {

842 i‡(
	`CHSPEC_CTL_SB
(
ch™•ec
Ë> 
WL_CHANSPEC_CTL_SB_LUU
)

843  
TRUE
;

846  
FALSE
;

847 
	}
}

853 
boﬁ


854 
	$wf_ch•ec_vÆid
(
ch™•ec_t
 
ch™•ec
)

856 
uöt
 
ch•ec_bw
 = 
	`CHSPEC_BW
(
ch™•ec
);

857 
uöt
 
ch•ec_ch
 = 
	`CHSPEC_CHANNEL
(
ch™•ec
);

859 i‡(
	`wf_ch•ec_mÆf‹med
(
ch™•ec
))

860  
FALSE
;

862 i‡(
	`CHSPEC_IS2G
(
ch™•ec
)) {

864 i‡(
ch•ec_bw
 =
WL_CHANSPEC_BW_20
) {

865 i‡(
ch•ec_ch
 >= 1 && chspec_ch <= 14)

866  
TRUE
;

867 } i‡(
ch•ec_bw
 =
WL_CHANSPEC_BW_40
) {

868 i‡(
ch•ec_ch
 >= 3 && chspec_ch <= 11)

869  
TRUE
;

871 } i‡(
	`CHSPEC_IS5G
(
ch™•ec
)) {

872 i‡(
ch•ec_bw
 =
WL_CHANSPEC_BW_8080
) {

873 
uöt16
 
ch1
, 
ch2
;

875 
ch1
 = 
wf_5g_80m_ch™s
[
	`CHSPEC_CHAN1
(
ch™•ec
)];

876 
ch2
 = 
wf_5g_80m_ch™s
[
	`CHSPEC_CHAN2
(
ch™•ec
)];

881 i‡(
ch2
 > 
ch1
 + 
CH_80MHZ_APART
)

882  
TRUE
;

884 c⁄° 
uöt8
 *
˚¡î_ch
;

885 
uöt
 
num_ch
, 
i
;

887 i‡(
ch•ec_bw
 =
WL_CHANSPEC_BW_20
 || ch•ec_bw =
WL_CHANSPEC_BW_40
) {

888 
˚¡î_ch
 = 
wf_5g_40m_ch™s
;

889 
num_ch
 = 
WF_NUM_5G_40M_CHANS
;

890 } i‡(
ch•ec_bw
 =
WL_CHANSPEC_BW_80
) {

891 
˚¡î_ch
 = 
wf_5g_80m_ch™s
;

892 
num_ch
 = 
WF_NUM_5G_80M_CHANS
;

893 } i‡(
ch•ec_bw
 =
WL_CHANSPEC_BW_160
) {

894 
˚¡î_ch
 = 
wf_5g_160m_ch™s
;

895 
num_ch
 = 
WF_NUM_5G_160M_CHANS
;

898  
FALSE
;

902 i‡(
ch•ec_bw
 =
WL_CHANSPEC_BW_20
) {

907 
i
 = 0; i < 
num_ch
; i ++) {

908 i‡(
ch•ec_ch
 =(
uöt
)
	`LOWER_20_SB
(
˚¡î_ch
[
i
]) ||

909 
ch•ec_ch
 =(
uöt
)
	`UPPER_20_SB
(
˚¡î_ch
[
i
]))

913 i‡(
i
 =
num_ch
) {

915 i‡(
ch•ec_ch
 == 34 || chspec_ch == 38 ||

916 
ch•ec_ch
 == 42 || chspec_ch == 46)

917 
i
 = 0;

921 
i
 = 0; i < 
num_ch
; i ++) {

922 i‡(
ch•ec_ch
 =
˚¡î_ch
[
i
])

927 i‡(
i
 < 
num_ch
) {

929  
TRUE
;

934  
FALSE
;

935 
	}
}

942 
uöt8


943 
	$wf_ch•ec_˘lch™
(
ch™•ec_t
 
ch•ec
)

945 
uöt
 
˚¡î_ch™
;

946 
uöt
 
bw_mhz
;

947 
uöt
 
sb
;

949 
	`ASSERT
(!
	`wf_ch•ec_mÆf‹med
(
ch•ec
));

952 i‡(
	`CHSPEC_IS20
(
ch•ec
)) {

953  
	`CHSPEC_CHANNEL
(
ch•ec
);

955 
sb
 = 
	`CHSPEC_CTL_SB
(
ch•ec
Ë>> 
WL_CHANSPEC_CTL_SB_SHIFT
;

957 i‡(
	`CHSPEC_IS8080
(
ch•ec
)) {

958 
bw_mhz
 = 80;

960 i‡(
sb
 < 4) {

961 
˚¡î_ch™
 = 
	`CHSPEC_CHAN1
(
ch•ec
);

964 
˚¡î_ch™
 = 
	`CHSPEC_CHAN2
(
ch•ec
);

965 
sb
 -= 4;

969 
˚¡î_ch™
 = 
wf_5g_80m_ch™s
[center_chan];

972 
bw_mhz
 = 
	`bw_ch•ec_to_mhz
(
ch•ec
);

973 
˚¡î_ch™
 = 
	`CHSPEC_CHANNEL
(
ch•ec
Ë>> 
WL_CHANSPEC_CHAN_SHIFT
;

976  (
	`ch™√l_to_˘l_ch™
(
˚¡î_ch™
, 
bw_mhz
, 
sb
));

978 
	}
}

983 
ch™•ec_t


984 
	$wf_ch•ec_˘lch•ec
(
ch™•ec_t
 
ch•ec
)

986 
ch™•ec_t
 
˘l_ch•ec
 = 
ch•ec
;

987 
uöt8
 
˘l_ch™
;

989 
	`ASSERT
(!
	`wf_ch•ec_mÆf‹med
(
ch•ec
));

992 i‡(!
	`CHSPEC_IS20
(
ch•ec
)) {

993 
˘l_ch™
 = 
	`wf_ch•ec_˘lch™
(
ch•ec
);

994 
˘l_ch•ec
 = 
˘l_ch™
 | 
WL_CHANSPEC_BW_20
;

995 
˘l_ch•ec
 |
	`CHSPEC_BAND
(
ch•ec
);

997  
˘l_ch•ec
;

998 
	}
}

1003 
uöt16


1004 
	$wf_ch™√l2ch•ec
(
uöt
 
˘l_ch
, uöà
bw
)

1006 
uöt16
 
ch•ec
;

1007 c⁄° 
uöt8
 *
˚¡î_ch
 = 
NULL
;

1008 
num_ch
 = 0;

1009 
sb
 = -1;

1010 
i
 = 0;

1012 
ch•ec
 = ((
˘l_ch
 <
CH_MAX_2G_CHANNEL
Ë? 
WL_CHANSPEC_BAND_2G
 : 
WL_CHANSPEC_BAND_5G
);

1014 
ch•ec
 |
bw
;

1016 i‡(
bw
 =
WL_CHANSPEC_BW_40
) {

1017 
˚¡î_ch
 = 
wf_5g_40m_ch™s
;

1018 
num_ch
 = 
WF_NUM_5G_40M_CHANS
;

1019 
bw
 = 40;

1020 } i‡(
bw
 =
WL_CHANSPEC_BW_80
) {

1021 
˚¡î_ch
 = 
wf_5g_80m_ch™s
;

1022 
num_ch
 = 
WF_NUM_5G_80M_CHANS
;

1023 
bw
 = 80;

1024 } i‡(
bw
 =
WL_CHANSPEC_BW_160
) {

1025 
˚¡î_ch
 = 
wf_5g_160m_ch™s
;

1026 
num_ch
 = 
WF_NUM_5G_160M_CHANS
;

1027 
bw
 = 160;

1028 } i‡(
bw
 =
WL_CHANSPEC_BW_20
) {

1029 
ch•ec
 |
˘l_ch
;

1030  
ch•ec
;

1035 
i
 = 0; i < 
num_ch
; i ++) {

1036 
sb
 = 
	`ch™√l_to_sb
(
˚¡î_ch
[
i
], 
˘l_ch
, 
bw
);

1037 i‡(
sb
 >= 0) {

1038 
ch•ec
 |
˚¡î_ch
[
i
];

1039 
ch•ec
 |(
sb
 << 
WL_CHANSPEC_CTL_SB_SHIFT
);

1045 i‡(
sb
 < 0) {

1049  
ch•ec
;

1050 
	}
}

1058 
ch™•ec_t
 
	$wf_ch•ec_¥im¨y40_ch•ec
(
ch™•ec_t
 
ch•ec
)

1060 
ch™•ec_t
 
ch•ec40
 = 
ch•ec
;

1061 
uöt
 
˚¡î_ch™
;

1062 
uöt
 
sb
;

1064 
	`ASSERT
(!
	`wf_ch•ec_mÆf‹med
(
ch•ec
));

1066 i‡(
	`CHSPEC_IS80
(
ch•ec
)) {

1067 
˚¡î_ch™
 = 
	`CHSPEC_CHANNEL
(
ch•ec
);

1068 
sb
 = 
	`CHSPEC_CTL_SB
(
ch•ec
);

1070 i‡(
sb
 =
WL_CHANSPEC_CTL_SB_UL
) {

1072 
sb
 = 
WL_CHANSPEC_CTL_SB_L
;

1073 
˚¡î_ch™
 +
CH_20MHZ_APART
;

1074 } i‡(
sb
 =
WL_CHANSPEC_CTL_SB_UU
) {

1076 
sb
 = 
WL_CHANSPEC_CTL_SB_U
;

1077 
˚¡î_ch™
 +
CH_20MHZ_APART
;

1081 
˚¡î_ch™
 -
CH_20MHZ_APART
;

1085 
ch•ec40
 = (
WL_CHANSPEC_BAND_5G
 | 
WL_CHANSPEC_BW_40
 |

1086 
sb
 | 
˚¡î_ch™
);

1089  
ch•ec40
;

1090 
	}
}

1112 
	$wf_mhz2ch™√l
(
uöt
 
‰eq
, uöà
°¨t_Á˘‹
)

1114 
ch
 = -1;

1115 
uöt
 
ba£
;

1116 
off£t
;

1119 i‡(
°¨t_Á˘‹
 == 0) {

1120 i‡(
‰eq
 >= 2400 && freq <= 2500)

1121 
°¨t_Á˘‹
 = 
WF_CHAN_FACTOR_2_4_G
;

1122 i‡(
‰eq
 >= 5000 && freq <= 6000)

1123 
°¨t_Á˘‹
 = 
WF_CHAN_FACTOR_5_G
;

1126 i‡(
‰eq
 =2484 && 
°¨t_Á˘‹
 =
WF_CHAN_FACTOR_2_4_G
)

1129 
ba£
 = 
°¨t_Á˘‹
 / 2;

1132 i‡((
‰eq
 < 
ba£
) || (freq > base + 1000))

1135 
off£t
 = 
‰eq
 - 
ba£
;

1136 
ch
 = 
off£t
 / 5;

1139 i‡(
off£t
 !(
ch
 * 5))

1143 i‡(
°¨t_Á˘‹
 =
WF_CHAN_FACTOR_2_4_G
 && (
ch
 < 1 || ch > 13))

1146  
ch
;

1147 
	}
}

1166 
	$wf_ch™√l2mhz
(
uöt
 
ch
, uöà
°¨t_Á˘‹
)

1168 
‰eq
;

1170 i‡((
°¨t_Á˘‹
 =
WF_CHAN_FACTOR_2_4_G
 && (
ch
 < 1 || ch > 14)) ||

1171 (
ch
 > 200))

1172 
‰eq
 = -1;

1173 i‡((
°¨t_Á˘‹
 =
WF_CHAN_FACTOR_2_4_G
Ë&& (
ch
 == 14))

1174 
‰eq
 = 2484;

1176 
‰eq
 = 
ch
 * 5 + 
°¨t_Á˘‹
 / 2;

1178  
‰eq
;

1179 
	}
}

	@dhd.h

34 #i‚de‡
_dhd_h_


35 
	#_dhd_h_


	)

37 
	~<löux/öô.h
>

38 
	~<löux/kî√l.h
>

39 
	~<löux/¶ab.h
>

40 
	~<löux/skbuff.h
>

41 
	~<löux/√tdevi˚.h
>

42 
	~<löux/ëhîdevi˚.h
>

43 
	~<löux/øndom.h
>

44 
	~<löux/•ölock.h
>

45 
	~<löux/ëhtoﬁ.h
>

46 
	~<asm/uac˚ss.h
>

47 
	~<asm/u«lig√d.h
>

48 #i‡(
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 27)Ë&& 
deföed
(
CONFIG_HAS_WAKELOCK
)

49 
	~<löux/wakñock.h
>

52 
	gèsk_°ru˘
;

53 
	gsched_∑øm
;

54 
£tScheduÀr
(
èsk_°ru˘
 *
p
, 
pﬁicy
, 
sched_∑øm
 *
∑øm
);

56 
	#ALL_INTERFACES
 0xff

	)

58 
	~<wlio˘l.h
>

59 
	~<wlfc_¥Ÿo.h
>

64 
	gdhd_bus
;

65 
	gdhd_¥Ÿ
;

66 
	gdhd_öfo
;

69 
	edhd_bus_°©e
 {

70 
	mDHD_BUS_DOWN
,

71 
	mDHD_BUS_LOAD
,

72 
	mDHD_BUS_DATA


75 
	edhd_›_Êags
 {

77 
	mDHD_FLAG_STA_MODE
 = 
BIT
(0),

78 
	mDHD_FLAG_HOSTAP_MODE
 = 
BIT
(1),

79 
	mDHD_FLAG_P2P_MODE
 = 
BIT
(2),

81 
	mDHD_FLAG_CONCURR_SINGLE_CHAN_MODE
 = (
DHD_FLAG_STA_MODE
 | 
DHD_FLAG_P2P_MODE
),

82 
	mDHD_FLAG_CONCURR_MULTI_CHAN_MODE
 = 
BIT
(4),

84 
	mDHD_FLAG_P2P_GC_MODE
 = 
BIT
(5),

85 
	mDHD_FLAG_P2P_GO_MODE
 = 
BIT
(6),

86 
	mDHD_FLAG_MBSS_MODE
 = 
BIT
(7)

89 
	#MANUFACTRING_FW
 "WLTEST"

	)

92 #i‚de‡
MAX_CNTL_TIMEOUT


93 
	#MAX_CNTL_TIMEOUT
 2

	)

96 
	#DHD_SCAN_ASSOC_ACTIVE_TIME
 40

	)

97 
	#DHD_SCAN_UNASSOC_ACTIVE_TIME
 80

	)

98 
	#DHD_SCAN_PASSIVE_TIME
 130

	)

100 #i‚de‡
POWERUP_MAX_RETRY


101 
	#POWERUP_MAX_RETRY
 3

	)

103 #i‚de‡
POWERUP_WAIT_MS


104 
	#POWERUP_WAIT_MS
 2000

	)

107 
	edhd_bus_wake_°©e
 {

108 
	mWAKE_LOCK_OFF
,

109 
	mWAKE_LOCK_PRIV
,

110 
	mWAKE_LOCK_DPC
,

111 
	mWAKE_LOCK_IOCTL
,

112 
	mWAKE_LOCK_DOWNLOAD
,

113 
	mWAKE_LOCK_TMOUT
,

114 
	mWAKE_LOCK_WATCHDOG
,

115 
	mWAKE_LOCK_LINK_DOWN_TMOUT
,

116 
	mWAKE_LOCK_PNO_FIND_TMOUT
,

117 
	mWAKE_LOCK_SOFTAP_SET
,

118 
	mWAKE_LOCK_SOFTAP_STOP
,

119 
	mWAKE_LOCK_SOFTAP_START
,

120 
	mWAKE_LOCK_SOFTAP_THREAD
,

121 
	mWAKE_LOCK_MAX


124 
	edhd_¥óŒoc_ödex
 {

125 
	mDHD_PREALLOC_PROT
 = 0,

126 
	mDHD_PREALLOC_RXBUF
,

127 
	mDHD_PREALLOC_DATABUF
,

128 #i‡
deföed
(
STATIC_WL_PRIV_STRUCT
)

129 
	mDHD_PREALLOC_OSL_BUF
,

130 
	mDHD_PREALLOC_WIPHY_ESCAN0
 = 5,

132 
	mDHD_PREALLOC_OSL_BUF


137 
	mDHD_IF_NONE
 = 0,

138 
	mDHD_IF_ADD
,

139 
	mDHD_IF_DEL
,

140 
	mDHD_IF_CHANGE
,

141 
	mDHD_IF_DELETING


142 } 
	tdhd_if_°©e_t
;

145 #i‡
deföed
(
CONFIG_DHD_USE_STATIC_BUF
)

147 
uöt8
* 
dhd_os_¥óŒoc
(*
osh
, 
£˘i⁄
, 
uöt
 
size
);

148 
dhd_os_¥e‰ì
(*
osh
, *
addr
, 
uöt
 
size
);

149 
	#DHD_OS_PREALLOC
(
osh
, 
£˘i⁄
, 
size
Ë
	`dhd_os_¥óŒoc
(osh, se˘i⁄, size)

	)

150 
	#DHD_OS_PREFREE
(
osh
, 
addr
, 
size
Ë
	`dhd_os_¥e‰ì
(osh,áddr, size)

	)

154 
	#DHD_OS_PREALLOC
(
osh
, 
£˘i⁄
, 
size
Ë
	`MALLOC
(osh, size)

	)

155 
	#DHD_OS_PREFREE
(
osh
, 
addr
, 
size
Ë
	`MFREE
(osh,áddr, size)

	)

160 #i‚de‡
DHD_SDALIGN


161 
	#DHD_SDALIGN
 32

	)

166 
	sª‹dî_öfo
 {

167 **
	mp
;

168 
uöt8
 
	mÊow_id
;

169 
uöt8
 
	mcur_idx
;

170 
uöt8
 
	mexp_idx
;

171 
uöt8
 
	mmax_idx
;

172 
uöt8
 
	m≥nd_pkts
;

173 } 
	tª‹dî_öfo_t
;

176 
	sdhd_pub
 {

178 
o¶_t
 *
	mosh
;

179 
dhd_bus
 *
	mbus
;

180 
dhd_¥Ÿ
 *
	m¥Ÿ
;

181 
dhd_öfo
 *
	möfo
;

184 
boﬁ
 
	mup
;

185 
boﬁ
 
	mtxoff
;

186 
boﬁ
 
	md⁄gÀ_ª£t
;

187 
dhd_bus_°©e
 
	mbus°©e
;

188 
uöt
 
	mhdæí
;

189 
uöt
 
	mmax˘l
;

190 
uöt
 
	mrxsz
;

191 
uöt8
 
	mwme_dp
;

194 
boﬁ
 
	miswl
;

195 
ul⁄g
 
	mdrv_vîsi⁄
;

196 
ëhî_addr
 
	mmac
;

197 
dngl_°©s_t
 
	md°©s
;

200 
ul⁄g
 
	mtx_∑ckës
;

201 
ul⁄g
 
	mtx_mu…iˇ°
;

202 
ul⁄g
 
	mtx_îr‹s
;

203 
ul⁄g
 
	mtx_˘Õkts
;

204 
ul⁄g
 
	mtx_˘Àºs
;

205 
ul⁄g
 
	mrx_∑ckës
;

206 
ul⁄g
 
	mrx_mu…iˇ°
;

207 
ul⁄g
 
	mrx_îr‹s
;

208 
ul⁄g
 
	mrx_˘Õkts
;

209 
ul⁄g
 
	mrx_˘Àºs
;

210 
ul⁄g
 
	mrx_dr›≥d
;

211 
ul⁄g
 
	mrx_Êushed
;

212 
ul⁄g
 
	mwd_dpc_sched
;

214 
ul⁄g
 
	mrx_ªadahód_˙t
;

215 
ul⁄g
 
	mtx_ªÆloc
;

216 
ul⁄g
 
	mfc_∑ckës
;

219 
	mbcmîr‹
;

220 
uöt
 
	mtick˙t
;

223 
	md⁄gÀ_îr‹
;

225 
uöt8
 
	mcou¡ry_code
[
WLC_CNTRY_BUF_SZ
];

228 
	msu•íd_dißbÀ_Êag
;

229 
	mö_su•íd
;

230 #ifde‡
PNO_SUPPORT


231 
	m≤o_íabÀ
;

232 
	m≤o_su•íd
;

237 
	msu•íd_b˙_li_dtim
;

238 #ifde‡
PKT_FILTER_SUPPORT


239 
	móæy_su•íded
;

240 
	mdh˝_ö_¥ogªss
;

244 * 
	mpktfûãr
[100];

245 
	mpktfûãr_cou¡
;

247 
wl_cou¡ry_t
 
	mdhd_c•ec
;

248 
	mevítmask
[
WL_EVENTING_MASK_LEN
];

249 
	m›_mode
;

257 #i‡(
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 25)) && 1

258 
muãx
 
	mwl_°¨t_°›_lock
;

259 
muãx
 
	mwl_so·≠_lock
;

262 #ifde‡
WLBTAMP


263 
uöt16
 
	mmaxd©ablks
;

265 #ifde‡
PROP_TXSTATUS


266 
	mwlfc_íabÀd
;

267 * 
	mwlfc_°©e
;

269 
boﬁ
 
	md⁄gÀ_isﬁ©i⁄
;

270 
boﬁ
 
	md⁄gÀ_å≠_occuªd
;

271 
	mh™g_was_£¡
;

272 
	mrx˙t_timeout
;

273 
	mtx˙t_timeout
;

274 #ifde‡
WLMEDIA_HTSF


275 
uöt8
 
	mhtsfdly°©_sz
;

277 
ª‹dî_öfo
 *
	mª‹dî_bufs
[
WLHOST_REORDERDATA_MAXFLOWS
];

278 #i‡
deföed
(
ARP_OFFLOAD_SUPPORT
)

279 
uöt32
 
	m¨p_vîsi⁄
;

281 } 
	tdhd_pub_t
;

284 #i‡(
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 27)Ë&& 
deföed
(
CONFIG_PM_SLEEP
)

286 
	#DHD_PM_RESUME_WAIT_INIT
(
a
Ë
	`DECLARE_WAIT_QUEUE_HEAD
◊);

	)

287 
	#_DHD_PM_RESUME_WAIT
(
a
, 
b
) do {\

288 
ªåy
 = 0; \

289 
	`SMP_RD_BARRIER_DEPENDS
(); \

290 
dhd_mmc_su•íd
 && 
ªåy
++ !
b
) { \

291 
	`SMP_RD_BARRIER_DEPENDS
(); \

292 
	`waô_evít_öãºu±ibÀ_timeout
(
a
, !
dhd_mmc_su•íd
, 1); \

294 } 0)

	)

295 
	#DHD_PM_RESUME_WAIT
(
a
Ë
	`_DHD_PM_RESUME_WAIT
◊, 200)

	)

296 
	#DHD_PM_RESUME_WAIT_FOREVER
(
a
Ë
	`_DHD_PM_RESUME_WAIT
◊, ~0)

	)

297 
	#DHD_PM_RESUME_RETURN_ERROR
(
a
Ëdÿ{ i‡(
dhd_mmc_su•íd
Ëá; } 0)

	)

298 
	#DHD_PM_RESUME_RETURN
 dÿ{ i‡(
dhd_mmc_su•íd
Ë; } 0)

	)

300 
	#DHD_SPINWAIT_SLEEP_INIT
(
a
Ë
	`DECLARE_WAIT_QUEUE_HEAD
◊);

	)

301 
	#SPINWAIT_SLEEP
(
a
, 
exp
, 
us
) do { \

302 
uöt
 
cou¡down
 = (
us
) + 9999; \

303 (
exp
Ë&& (
cou¡down
 >= 10000)) { \

304 
	`waô_evít_öãºu±ibÀ_timeout
(
a
, 
FALSE
, 1); \

305 
cou¡down
 -= 10000; \

307 } 0)

	)

311 
	#DHD_PM_RESUME_WAIT_INIT
(
a
)

	)

312 
	#DHD_PM_RESUME_WAIT
(
a
)

	)

313 
	#DHD_PM_RESUME_WAIT_FOREVER
(
a
)

	)

314 
	#DHD_PM_RESUME_RETURN_ERROR
(
a
)

	)

315 
	#DHD_PM_RESUME_RETURN


	)

317 
	#DHD_SPINWAIT_SLEEP_INIT
(
a
)

	)

318 
	#SPINWAIT_SLEEP
(
a
, 
exp
, 
us
) do { \

319 
uöt
 
cou¡down
 = (
us
) + 9; \

320 (
exp
Ë&& (
cou¡down
 >= 10)) { \

321 
	`OSL_DELAY
(10); \

322 
cou¡down
 -= 10; \

324 } 0)

	)

327 #i‚de‡
DHDTHREAD


328 #unde‡
SPINWAIT_SLEEP


329 
	#SPINWAIT_SLEEP
(
a
, 
exp
, 
us
Ë
	`SPINWAIT
”xp, us)

	)

331 
	#DHD_IF_VIF
 0x01

	)

333 
dhd_os_•ö_lock
(
dhd_pub_t
 *
pub
);

334 
dhd_os_•ö_u∆ock
(
dhd_pub_t
 *
pub
, 
Êags
);

337 
dhd_os_wake_lock
(
dhd_pub_t
 *
pub
);

338 
dhd_os_wake_u∆ock
(
dhd_pub_t
 *
pub
);

339 
dhd_os_wake_lock_timeout
(
dhd_pub_t
 *
pub
);

340 
dhd_os_wake_lock_rx_timeout_íabÀ
(
dhd_pub_t
 *
pub
, 
vÆ
);

341 
dhd_os_wake_lock_˘æ_timeout_íabÀ
(
dhd_pub_t
 *
pub
, 
vÆ
);

342 
dhd_os_wd_wake_lock
(
dhd_pub_t
 *
pub
);

343 
dhd_os_wd_wake_u∆ock
(
dhd_pub_t
 *
pub
);

345 
ölöe
 
	$MUTEX_LOCK_SOFTAP_SET_INIT
(
dhd_pub_t
 * 
dhdp
)

347 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 25)) && 1

348 
	`muãx_öô
(&
dhdp
->
wl_so·≠_lock
);

350 
	}
}

352 
ölöe
 
	$MUTEX_LOCK_SOFTAP_SET
(
dhd_pub_t
 * 
dhdp
)

354 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 25)) && 1

355 
	`muãx_lock
(&
dhdp
->
wl_so·≠_lock
);

357 
	}
}

359 
ölöe
 
	$MUTEX_UNLOCK_SOFTAP_SET
(
dhd_pub_t
 * 
dhdp
)

361 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 25)) && 1

362 
	`muãx_u∆ock
(&
dhdp
->
wl_so·≠_lock
);

364 
	}
}

366 
	#DHD_OS_WAKE_LOCK
(
pub
Ë
	`dhd_os_wake_lock
’ub)

	)

367 
	#DHD_OS_WAKE_UNLOCK
(
pub
Ë
	`dhd_os_wake_u∆ock
’ub)

	)

368 
	#DHD_OS_WD_WAKE_LOCK
(
pub
Ë
	`dhd_os_wd_wake_lock
’ub)

	)

369 
	#DHD_OS_WD_WAKE_UNLOCK
(
pub
Ë
	`dhd_os_wd_wake_u∆ock
’ub)

	)

370 
	#DHD_OS_WAKE_LOCK_TIMEOUT
(
pub
Ë
	`dhd_os_wake_lock_timeout
’ub)

	)

371 
	#DHD_OS_WAKE_LOCK_RX_TIMEOUT_ENABLE
(
pub
, 
vÆ
) \

372 
	`dhd_os_wake_lock_rx_timeout_íabÀ
(
pub
, 
vÆ
)

	)

373 
	#DHD_OS_WAKE_LOCK_CTRL_TIMEOUT_ENABLE
(
pub
, 
vÆ
) \

374 
	`dhd_os_wake_lock_˘æ_timeout_íabÀ
(
pub
, 
vÆ
)

	)

375 
	#DHD_PACKET_TIMEOUT_MS
 1000

	)

376 
	#DHD_EVENT_TIMEOUT_MS
 1500

	)

382 
dhd_√t_if_lock
(
√t_devi˚
 *
dev
);

383 
dhd_√t_if_u∆ock
(
√t_devi˚
 *
dev
);

385 #i‡(
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 25)) && 1

386 
muãx
 
_dhd_sdio_muãx_lock_
;

389 
	sdhd_if_evít
 {

390 
uöt8
 
	mifidx
;

391 
uöt8
 
	ma˘i⁄
;

392 
uöt8
 
	mÊags
;

393 
uöt8
 
	mbssidx
;

394 
uöt8
 
	mis_AP
;

395 } 
	tdhd_if_evít_t
;

397 
	edhd_©èch_°©es


399 
	mDHD_ATTACH_STATE_INIT
 = 0x0,

400 
	mDHD_ATTACH_STATE_NET_ALLOC
 = 0x1,

401 
	mDHD_ATTACH_STATE_DHD_ALLOC
 = 0x2,

402 
	mDHD_ATTACH_STATE_ADD_IF
 = 0x4,

403 
	mDHD_ATTACH_STATE_PROT_ATTACH
 = 0x8,

404 
	mDHD_ATTACH_STATE_WL_ATTACH
 = 0x10,

405 
	mDHD_ATTACH_STATE_THREADS_CREATED
 = 0x20,

406 
	mDHD_ATTACH_STATE_WAKELOCKS_INIT
 = 0x40,

407 
	mDHD_ATTACH_STATE_CFG80211
 = 0x80,

408 
	mDHD_ATTACH_STATE_EARLYSUSPEND_DONE
 = 0x100,

409 
	mDHD_ATTACH_STATE_DONE
 = 0x200

410 } 
	tdhd_©èch_°©es_t
;

413 
	#DHD_PID_KT_INVALID
 -1

	)

415 
	#DHD_PID_KT_TL_INVALID
 -2

	)

422 
o¶_t
 *
dhd_o¶_©èch
(*
pdev
, 
uöt
 
bu°y≥
);

423 
dhd_o¶_dëach
(
o¶_t
 *
osh
);

430 
dhd_pub_t
 *
dhd_©èch
(
o¶_t
 *
osh
, 
dhd_bus
 *
bus
, 
uöt
 
bus_hdæí
);

431 #i‡
deföed
(
WLP2P
Ë&& deföed(
WL_CFG80211
)

433 
dhd_©èch_p2p
(
dhd_pub_t
 *);

434 
dhd_dëach_p2p
(
dhd_pub_t
 *);

436 
dhd_√t_©èch
(
dhd_pub_t
 *
dhdp
, 
idx
);

439 
dhd_dëach
(
dhd_pub_t
 *
dhdp
);

440 
dhd_‰ì
(
dhd_pub_t
 *
dhdp
);

443 
dhd_txÊowc⁄åﬁ
(
dhd_pub_t
 *
dhdp
, 
ifidx
, 
boﬁ
 
⁄
);

445 
boﬁ
 
dhd_¥ec_íq
(
dhd_pub_t
 *
dhdp
, 
pktq
 *
q
, *
pkt
, 
¥ec
);

448 
dhd_rx_‰ame
(
dhd_pub_t
 *
dhdp
, 
ifidx
, *
rxp
, 
numpkt
, 
uöt8
 
ch™
);

451 *
dhd_i‚ame
(
dhd_pub_t
 *
dhdp
, 
idx
);

454 
dhd_sched_dpc
(
dhd_pub_t
 *
dhdp
);

457 
dhd_txcom∂ëe
(
dhd_pub_t
 *
dhdp
, *
txp
, 
boﬁ
 
suc˚ss
);

460 
dhd_os_¥Ÿo_block
(
dhd_pub_t
 * 
pub
);

461 
dhd_os_¥Ÿo_unblock
(
dhd_pub_t
 * 
pub
);

462 
dhd_os_io˘l_ª•_waô
(
dhd_pub_t
 * 
pub
, 
uöt
 * 
c⁄dôi⁄
, 
boﬁ
 * 
≥ndög
);

463 
dhd_os_io˘l_ª•_wake
(
dhd_pub_t
 * 
pub
);

464 
dhd_os_gë_io˘l_ª•_timeout
();

465 
dhd_os_£t_io˘l_ª•_timeout
(
timeout_m£c
);

466 * 
dhd_os_›í_image
(* 
fûíame
);

467 
dhd_os_gë_image_block
(* 
buf
, 
Àn
, * 
image
);

468 
dhd_os_˛o£_image
(* 
image
);

469 
dhd_os_wd_timî
(*
bus
, 
uöt
 
wdtick
);

470 
dhd_os_sdlock
(
dhd_pub_t
 * 
pub
);

471 
dhd_os_sdu∆ock
(
dhd_pub_t
 * 
pub
);

472 
dhd_os_sdlock_txq
(
dhd_pub_t
 * 
pub
);

473 
dhd_os_sdu∆ock_txq
(
dhd_pub_t
 * 
pub
);

474 
dhd_os_sdlock_rxq
(
dhd_pub_t
 * 
pub
);

475 
dhd_os_sdu∆ock_rxq
(
dhd_pub_t
 * 
pub
);

476 
dhd_os_sdlock_¢dup_rxq
(
dhd_pub_t
 * 
pub
);

477 
dhd_cu°omî_gpio_wœn_˘æ
(
⁄off
);

478 
dhd_cu°om_gë_mac_addªss
(*
buf
);

479 
dhd_os_sdu∆ock_¢dup_rxq
(
dhd_pub_t
 * 
pub
);

480 
dhd_os_sdlock_evítq
(
dhd_pub_t
 * 
pub
);

481 
dhd_os_sdu∆ock_evítq
(
dhd_pub_t
 * 
pub
);

482 
boﬁ
 
dhd_os_check_h™g
(
dhd_pub_t
 *
dhdp
, 
ifidx
, 
ªt
);

483 
dhd_os_£nd_h™g_mesßge
(
dhd_pub_t
 *
dhdp
);

484 
dhd_£t_vîsi⁄_öfo
(
dhd_pub_t
 *
pub
, *
fw
);

486 #ifde‡
PNO_SUPPORT


487 
dhd_≤o_íabÀ
(
dhd_pub_t
 *
dhd
, 
p‚_íabÀd
);

488 
dhd_≤o_˛ón
(
dhd_pub_t
 *
dhd
);

489 
dhd_≤o_£t
(
dhd_pub_t
 *
dhd
, 
wlc_ssid_t
* 
ssids_loˇl
, 
nssid
,

490 
ush‹t
 
sˇn_‰
, 
≤o_ª≥©
, 
≤o_‰eq_expo_max
);

491 
dhd_≤o_gë_°©us
(
dhd_pub_t
 *
dhd
);

492 
dhd_dev_≤o_ª£t
(
√t_devi˚
 *
dev
);

493 
dhd_dev_≤o_£t
(
√t_devi˚
 *
dev
, 
wlc_ssid_t
* 
ssids_loˇl
,

494 
nssid
, 
ush‹t
 
sˇn_‰
, 
≤o_ª≥©
, 
≤o_‰eq_expo_max
);

495 
dhd_dev_≤o_íabÀ
(
√t_devi˚
 *
dev
, 
p‚_íabÀd
);

496 
dhd_dev_gë_≤o_°©us
(
√t_devi˚
 *
dev
);

499 #ifde‡
PKT_FILTER_SUPPORT


500 
	#DHD_UNICAST_FILTER_NUM
 0

	)

501 
	#DHD_BROADCAST_FILTER_NUM
 1

	)

502 
	#DHD_MULTICAST4_FILTER_NUM
 2

	)

503 
	#DHD_MULTICAST6_FILTER_NUM
 3

	)

504 
	#DHD_MDNS_FILTER_NUM
 4

	)

505 
dhd_os_íabÀ_∑ckë_fûãr
(
dhd_pub_t
 *
dhdp
, 
vÆ
);

506 
dhd_íabÀ_∑ckë_fûãr
(
vÆue
, 
dhd_pub_t
 *
dhd
);

507 
√t_os_íabÀ_∑ckë_fûãr
(
√t_devi˚
 *
dev
, 
vÆ
);

508 
√t_os_rxfûãr_add_ªmove
(
√t_devi˚
 *
dev
, 
vÆ
, 
num
);

511 
dhd_gë_su•íd_b˙_li_dtim
(
dhd_pub_t
 *
dhd
);

512 
boﬁ
 
dhd_suµ‹t_°a_mode
(
dhd_pub_t
 *
dhd
);

514 #ifde‡
DHD_DEBUG


515 
wrôe_to_fûe
(
dhd_pub_t
 *
dhd
, 
uöt8
 *
buf
, 
size
);

517 #i‡
deföed
(
OOB_INTR_ONLY
)

518 
dhd_cu°omî_oob_úq_m≠
(*
úq_Êags_±r
);

520 
dhd_os_sdtxlock
(
dhd_pub_t
 * 
pub
);

521 
dhd_os_sdtxu∆ock
(
dhd_pub_t
 * 
pub
);

524 
uöt32
 
	mlimô
;

525 
uöt32
 
	mö¸emít
;

526 
uöt32
 
	mñ≠£d
;

527 
uöt32
 
	mtick
;

528 } 
	tdhd_timeout_t
;

530 
dhd_timeout_°¨t
(
dhd_timeout_t
 *
tmo
, 
uöt
 
u£c
);

531 
dhd_timeout_expúed
(
dhd_timeout_t
 *
tmo
);

533 
dhd_i‚ame2idx
(
dhd_öfo
 *
dhd
, *
«me
);

534 
dhd_√t2idx
(
dhd_öfo
 *
dhd
, 
√t_devi˚
 *
√t
);

535 
√t_devi˚
 * 
dhd_idx2√t
(*
pub
, 
ifidx
);

536 
√t_os_£nd_h™g_mesßge
(
√t_devi˚
 *
dev
);

537 
wl_ho°_evít
(
dhd_pub_t
 *
dhd_pub
, *
idx
, *
pktd©a
,

538 
wl_evít_msg_t
 *, **
d©a_±r
);

539 
wl_evít_to_ho°_‹dî
(
wl_evít_msg_t
 * 
evt
);

541 
dhd_wl_io˘l
(
dhd_pub_t
 *
dhd_pub
, 
ifödex
, 
wl_io˘l_t
 *
ioc
, *
buf
, 
Àn
);

542 
dhd_wl_io˘l_cmd
(
dhd_pub_t
 *
dhd_pub
, 
cmd
, *
¨g
, 
Àn
, 
uöt8
 
£t
,

543 
ifödex
);

545 
dhd_comm⁄_öô
(
o¶_t
 *
osh
);

547 
dhd_do_drivî_öô
(
√t_devi˚
 *
√t
);

548 
dhd_add_if
(
dhd_öfo
 *
dhd
, 
ifidx
, *
h™dÀ
,

549 *
«me
, 
uöt8
 *
mac_addr
, 
uöt32
 
Êags
, uöt8 
bssidx
);

550 
dhd_dñ_if
(
dhd_öfo
 *
dhd
, 
ifidx
);

552 
dhd_vif_add
(
dhd_öfo
 *
dhd
, 
ifidx
, * 
«me
);

553 
dhd_vif_dñ
(
dhd_öfo
 *
dhd
, 
ifidx
);

555 
dhd_evít
(
dhd_öfo
 *
dhd
, *
evpkt
, 
evÀn
, 
ifidx
);

556 
dhd_vif_£ndup
(
dhd_öfo
 *
dhd
, 
ifidx
, 
uch¨
 *
˝
, 
Àn
);

560 
dhd_£ndpkt
(
dhd_pub_t
 *
dhdp
, 
ifidx
, *
pkt
);

563 
dhd_£ndup_evít_comm⁄
(
dhd_pub_t
 *
dhdp
, 
wl_evít_msg_t
 *
evít
, *
d©a
);

565 
dhd_£ndup_evít
(
dhd_pub_t
 *
dhdp
, 
wl_evít_msg_t
 *
evít
, *
d©a
);

566 
dhd_bus_devª£t
(
dhd_pub_t
 *
dhdp
, 
uöt8
 
Êag
);

567 
uöt
 
dhd_bus_°©us
(
dhd_pub_t
 *
dhdp
);

568 
dhd_bus_°¨t
(
dhd_pub_t
 *
dhdp
);

569 
dhd_bus_membyãs
(
dhd_pub_t
 *
dhdp
, 
boﬁ
 
£t
, 
uöt32
 
addªss
, 
uöt8
 *
d©a
, 
uöt
 
size
);

570 
dhd_¥öt_buf
(*
pbuf
, 
Àn
, 
byãs_≥r_löe
);

571 
boﬁ
 
dhd_is_assocüãd
(
dhd_pub_t
 *
dhd
, *
bss_buf
, *
ªtvÆ
);

572 
uöt
 
dhd_bus_chù_id
(
dhd_pub_t
 *
dhdp
);

573 
uöt
 
dhd_bus_chùªv_id
(
dhd_pub_t
 *
dhdp
);

574 
uöt
 
dhd_bus_chùpkg_id
(
dhd_pub_t
 *
dhdp
);

576 #i‡
deföed
(
KEEP_ALIVE
)

577 
dhd_kìp_Æive_⁄off
(
dhd_pub_t
 *
dhd
);

580 
boﬁ
 
dhd_is_c⁄cuºít_mode
(
dhd_pub_t
 *
dhd
);

582 
	ecu°_gpio_modes
 {

583 
	mWLAN_RESET_ON
,

584 
	mWLAN_RESET_OFF
,

585 
	mWLAN_POWER_ON
,

586 
	mWLAN_POWER_OFF


587 } 
	tcu°_gpio_modes_t
;

589 
wl_iw_isˇn_£t_sˇn_brﬂdˇ°_¥ï
(
√t_devi˚
 *
dev
, 
uöt
 
Êag
);

590 
wl_iw_£nd_¥iv_evít
(
√t_devi˚
 *
dev
, *
Êag
);

596 
uöt
 
dhd_w©chdog_ms
;

598 #i‡
deföed
(
DHD_DEBUG
)

600 
uöt
 
dhd_c⁄sﬁe_ms
;

601 
uöt
 
wl_msg_Àvñ
;

604 
uöt
 
dhd_¶∑uto
;

607 
uöt
 
dhd_öå
;

610 
uöt
 
dhd_pﬁl
;

613 
uöt
 
dhd_¨p_mode
;

616 
uöt
 
dhd_¨p_íabÀ
;

619 
uöt
 
dhd_pkt_fûãr_íabÀ
;

622 
uöt
 
dhd_pkt_fûãr_öô
;

625 
uöt
 
dhd_ma°î_mode
;

628 
uöt
 
dhd_rﬂm_dißbÀ
;

631 
uöt
 
dhd_ødio_up
;

634 
dhd_idÀtime
;

635 #ifde‡
DHD_USE_IDLECOUNT


636 
	#DHD_IDLETIME_TICKS
 5

	)

638 
	#DHD_IDLETIME_TICKS
 1

	)

642 
uöt
 
dhd_sdiod_drive_°ªngth
;

645 
uöt
 
dhd_f‹˚_tx_queueög
;

647 
	#DEFAULT_KEEP_ALIVE_VALUE
 55000

	)

648 #i‚de‡
CUSTOM_KEEP_ALIVE_SETTING


649 
	#CUSTOM_KEEP_ALIVE_SETTING
 
DEFAULT_KEEP_ALIVE_VALUE


	)

652 
	#NULL_PKT_STR
 "nuŒ_pkt"

	)

655 
	#DEFAULT_GLOM_VALUE
 -1

	)

656 #i‚de‡
CUSTOM_GLOM_SETTING


657 
	#CUSTOM_GLOM_SETTING
 
DEFAULT_GLOM_VALUE


	)

661 
	#DEFAULT_ROAM_TRIGGER_VALUE
 -75

	)

662 
	#DEFAULT_ROAM_TRIGGER_SETTING
 -1

	)

663 #i‚de‡
CUSTOM_ROAM_TRIGGER_SETTING


664 
	#CUSTOM_ROAM_TRIGGER_SETTING
 
DEFAULT_ROAM_TRIGGER_VALUE


	)

668 
	#DEFAULT_ROAM_DELTA_VALUE
 10

	)

669 
	#DEFAULT_ROAM_DELTA_SETTING
 -1

	)

670 #i‚de‡
CUSTOM_ROAM_DELTA_SETTING


671 
	#CUSTOM_ROAM_DELTA_SETTING
 
DEFAULT_ROAM_DELTA_VALUE


	)

677 
	#DEFAULT_PNO_EVENT_LOCK_xTIME
 2

	)

678 #i‚de‡
CUSTOM_PNO_EVENT_LOCK_xTIME


679 
	#CUSTOM_PNO_EVENT_LOCK_xTIME
 
DEFAULT_PNO_EVENT_LOCK_xTIME


	)

683 
	#DEFAULT_DHP_DPC_PRIO
 1

	)

684 #i‚de‡
CUSTOM_DPC_PRIO_SETTING


685 
	#CUSTOM_DPC_PRIO_SETTING
 
DEFAULT_DHP_DPC_PRIO


	)

688 
	#DEFAULT_SUSPEND_BCN_LI_DTIM
 3

	)

689 #i‚de‡
CUSTOM_SUSPEND_BCN_LI_DTIM


690 
	#CUSTOM_SUSPEND_BCN_LI_DTIM
 
DEFAULT_SUSPEND_BCN_LI_DTIM


	)

693 #ifde‡
SDTEST


695 
uöt
 
dhd_pktgí
;

698 
uöt
 
dhd_pktgí_Àn
;

699 
	#MAX_PKTGEN_LEN
 1800

	)

704 
	#MOD_PARAM_PATHLEN
 2048

	)

705 
fw_∑th
[
MOD_PARAM_PATHLEN
];

706 
nv_∑th
[
MOD_PARAM_PATHLEN
];

708 
	#MOD_PARAM_INFOLEN
 512

	)

710 #ifde‡
SOFTAP


711 
fw_∑th2
[
MOD_PARAM_PATHLEN
];

715 
uöt
 
dhd_dow∆ﬂd_fw_⁄_drivîlﬂd
;

719 
	#DHD_MAX_IFS
 16

	)

720 
	#DHD_DEL_IF
 -0xe

	)

721 
	#DHD_BAD_IF
 -0xf

	)

722 
	#WL_AUTO_ROAM_TRIGGER
 -75

	)

725 #ifde‡
PROP_TXSTATUS


727 
	sdhd_pkâag
 {

741 
uöt16
 
	mif_Êags
;

745 
uöt8
 
	md°n_ëhî
[
ETHER_ADDR_LEN
];

749 
uöt32
 
	mhtod_èg
;

753 * 
	m°uff
;

754 
uöt32
 
	mthög1
;

755 
uöt32
 
	mthög2
;

756 } 
	msd
;

758 * 
	mbus
;

759 * 
	murb
;

760 } 
	musb
;

761 } 
	mbus_•ecific
;

762 } 
	tdhd_pkâag_t
;

764 
	#DHD_PKTTAG_SET_H2DTAG
(
èg
, 
h2dvÆue
Ë((
dhd_pkâag_t
*)—ag))->
htod_èg
 = (h2dvÆue)

	)

765 
	#DHD_PKTTAG_H2DTAG
(
èg
Ë(((
dhd_pkâag_t
*)—ag))->
htod_èg
)

	)

767 
	#DHD_PKTTAG_IFMASK
 0xf

	)

768 
	#DHD_PKTTAG_IFTYPE_MASK
 0x1

	)

769 
	#DHD_PKTTAG_IFTYPE_SHIFT
 7

	)

770 
	#DHD_PKTTAG_FIFO_MASK
 0x7

	)

771 
	#DHD_PKTTAG_FIFO_SHIFT
 4

	)

773 
	#DHD_PKTTAG_SIGNALONLY_MASK
 0x1

	)

774 
	#DHD_PKTTAG_SIGNALONLY_SHIFT
 10

	)

776 
	#DHD_PKTTAG_ONETIMEPKTRQST_MASK
 0x1

	)

777 
	#DHD_PKTTAG_ONETIMEPKTRQST_SHIFT
 11

	)

779 
	#DHD_PKTTAG_PKTDIR_MASK
 0x1

	)

780 
	#DHD_PKTTAG_PKTDIR_SHIFT
 9

	)

782 
	#DHD_PKTTAG_CREDITCHECK_MASK
 0x1

	)

783 
	#DHD_PKTTAG_CREDITCHECK_SHIFT
 8

	)

785 
	#DHD_PKTTAG_INVALID_FIFOID
 0x7

	)

787 
	#DHD_PKTTAG_SETFIFO
(
èg
, 
fifo
Ë((
dhd_pkâag_t
*)—ag))->
if_Êags
 = \

788 (((
dhd_pkâag_t
*)(
èg
))->
if_Êags
 & ~(
DHD_PKTTAG_FIFO_MASK
 << 
DHD_PKTTAG_FIFO_SHIFT
)) | \

789 (((
fifo
Ë& 
DHD_PKTTAG_FIFO_MASK
Ë<< 
DHD_PKTTAG_FIFO_SHIFT
)

	)

790 
	#DHD_PKTTAG_FIFO
(
èg
Ë((((
dhd_pkâag_t
*)—ag))->
if_Êags
 >> \

791 
DHD_PKTTAG_FIFO_SHIFT
Ë& 
DHD_PKTTAG_FIFO_MASK
)

	)

793 
	#DHD_PKTTAG_SETIF
(
èg
, Ë((
dhd_pkâag_t
*)—ag))->
if_Êags
 = \

794 (((
dhd_pkâag_t
*)(
èg
))->
if_Êags
 & ~
DHD_PKTTAG_IFMASK
Ë| ((Ë& DHD_PKTTAG_IFMASK)

	)

795 
	#DHD_PKTTAG_IF
(
èg
Ë(((
dhd_pkâag_t
*)—ag))->
if_Êags
 & 
DHD_PKTTAG_IFMASK
)

	)

797 
	#DHD_PKTTAG_SETIFTYPE
(
èg
, 
isAP
Ë((
dhd_pkâag_t
*)—ag))->
if_Êags
 = \

798 (((
dhd_pkâag_t
*)(
èg
))->
if_Êags
 & \

799 ~(
DHD_PKTTAG_IFTYPE_MASK
 << 
DHD_PKTTAG_IFTYPE_SHIFT
)) | \

800 (((
isAP
Ë& 
DHD_PKTTAG_IFTYPE_MASK
Ë<< 
DHD_PKTTAG_IFTYPE_SHIFT
)

	)

801 
	#DHD_PKTTAG_IFTYPE
(
èg
Ë((((
dhd_pkâag_t
*)—ag))->
if_Êags
 >> \

802 
DHD_PKTTAG_IFTYPE_SHIFT
Ë& 
DHD_PKTTAG_IFTYPE_MASK
)

	)

804 
	#DHD_PKTTAG_SETCREDITCHECK
(
èg
, 
check
Ë((
dhd_pkâag_t
*)—ag))->
if_Êags
 = \

805 (((
dhd_pkâag_t
*)(
èg
))->
if_Êags
 & \

806 ~(
DHD_PKTTAG_CREDITCHECK_MASK
 << 
DHD_PKTTAG_CREDITCHECK_SHIFT
)) | \

807 (((
check
Ë& 
DHD_PKTTAG_CREDITCHECK_MASK
Ë<< 
DHD_PKTTAG_CREDITCHECK_SHIFT
)

	)

808 
	#DHD_PKTTAG_CREDITCHECK
(
èg
Ë((((
dhd_pkâag_t
*)—ag))->
if_Êags
 >> \

809 
DHD_PKTTAG_CREDITCHECK_SHIFT
Ë& 
DHD_PKTTAG_CREDITCHECK_MASK
)

	)

811 
	#DHD_PKTTAG_SETPKTDIR
(
èg
, 
dú
Ë((
dhd_pkâag_t
*)—ag))->
if_Êags
 = \

812 (((
dhd_pkâag_t
*)(
èg
))->
if_Êags
 & \

813 ~(
DHD_PKTTAG_PKTDIR_MASK
 << 
DHD_PKTTAG_PKTDIR_SHIFT
)) | \

814 (((
dú
Ë& 
DHD_PKTTAG_PKTDIR_MASK
Ë<< 
DHD_PKTTAG_PKTDIR_SHIFT
)

	)

815 
	#DHD_PKTTAG_PKTDIR
(
èg
Ë((((
dhd_pkâag_t
*)—ag))->
if_Êags
 >> \

816 
DHD_PKTTAG_PKTDIR_SHIFT
Ë& 
DHD_PKTTAG_PKTDIR_MASK
)

	)

818 
	#DHD_PKTTAG_SETSIGNALONLY
(
èg
, 
sig«l⁄ly
Ë((
dhd_pkâag_t
*)—ag))->
if_Êags
 = \

819 (((
dhd_pkâag_t
*)(
èg
))->
if_Êags
 & \

820 ~(
DHD_PKTTAG_SIGNALONLY_MASK
 << 
DHD_PKTTAG_SIGNALONLY_SHIFT
)) | \

821 (((
sig«l⁄ly
Ë& 
DHD_PKTTAG_SIGNALONLY_MASK
Ë<< 
DHD_PKTTAG_SIGNALONLY_SHIFT
)

	)

822 
	#DHD_PKTTAG_SIGNALONLY
(
èg
Ë((((
dhd_pkâag_t
*)—ag))->
if_Êags
 >> \

823 
DHD_PKTTAG_SIGNALONLY_SHIFT
Ë& 
DHD_PKTTAG_SIGNALONLY_MASK
)

	)

825 
	#DHD_PKTTAG_SETONETIMEPKTRQST
(
èg
Ë((
dhd_pkâag_t
*)—ag))->
if_Êags
 = \

826 (((
dhd_pkâag_t
*)(
èg
))->
if_Êags
 & \

827 ~(
DHD_PKTTAG_ONETIMEPKTRQST_MASK
 << 
DHD_PKTTAG_ONETIMEPKTRQST_SHIFT
)) | \

828 (1 << 
DHD_PKTTAG_ONETIMEPKTRQST_SHIFT
)

	)

829 
	#DHD_PKTTAG_ONETIMEPKTRQST
(
èg
Ë((((
dhd_pkâag_t
*)—ag))->
if_Êags
 >> \

830 
DHD_PKTTAG_ONETIMEPKTRQST_SHIFT
Ë& 
DHD_PKTTAG_ONETIMEPKTRQST_MASK
)

	)

832 
	#DHD_PKTTAG_SETDSTN
(
èg
, 
d°n_MAC_ó
Ë
	`mem˝y
(((
dhd_pkâag_t
*)(—ag)))->
d°n_ëhî
, \

833 (
d°n_MAC_ó
), 
ETHER_ADDR_LEN
)

	)

834 
	#DHD_PKTTAG_DSTN
(
èg
Ë((
dhd_pkâag_t
*)—ag))->
d°n_ëhî


	)

836 (*
	tf_commôpkt_t
)(* 
	t˘x
, * 
	tp
);

838 #ifde‡
PROP_TXSTATUS_DEBUG


839 
	#DHD_WLFC_CTRINC_MAC_CLOSE
(
íåy
Ëdÿ{ (íåy)->
˛o£d_˘
++; 
	}
} 0)

	)

840 
	#DHD_WLFC_CTRINC_MAC_OPEN
(
íåy
Ëdÿ{ (íåy)->
›íed_˘
++; } 0)

	)

842 
	#DHD_WLFC_CTRINC_MAC_CLOSE
(
íåy
Ëdÿ{} 0)

	)

843 
	#DHD_WLFC_CTRINC_MAC_OPEN
(
íåy
Ëdÿ{} 0)

	)

848 
dhd_waô_f‹_evít
(
dhd_pub_t
 *
dhd
, 
boﬁ
 *
lockv¨
);

849 
dhd_waô_evít_wakeup
(
dhd_pub_t
*
dhd
);

851 
	#IFLOCK_INIT
(
lock
Ë*lock = 0

	)

852 
	#IFLOCK
(
lock
Ë
	`I¡îlockedCom∑ªExch™ge
((lock), 1, 0)) \

853 
	`NdisSèŒExecuti⁄
(1);

	)

854 
	#IFUNLOCK
(
lock
Ë
	`I¡îlockedExch™ge
(÷ock), 0)

	)

855 
	#IFLOCK_FREE
(
lock
)

	)

857 #ifde‡
PNO_SUPPORT


858 
dhd_≤o_íabÀ
(
dhd_pub_t
 *
dhd
, 
p‚_íabÀd
);

859 
dhd_≤€«bÀ
(
dhd_pub_t
 *
dhd
, 
p‚_íabÀd
);

860 
dhd_≤o_˛ón
(
dhd_pub_t
 *
dhd
);

861 
dhd_≤o_£t
(
dhd_pub_t
 *
dhd
, 
wlc_ssid_t
* 
ssids_loˇl
, 
nssid
,

862 
ush‹t
 
sˇn_‰
, 
≤o_ª≥©
, 
≤o_‰eq_expo_max
);

863 
dhd_≤o_gë_°©us
(
dhd_pub_t
 *
dhd
);

864 
dhd_≤o_£t_add
(
dhd_pub_t
 *
dhd
, 
wl_p‚_t
 *
√töfo
, 
nssid
, 
ush‹t
 
sˇn_‰
,

865 
ush‹t
 
¶owsˇn_‰
, 
uöt8
 
≤o_ª≥©
, uöt8 
≤o_‰eq_expo_max
, 
öt16
 
Êags
);

866 
dhd_≤o_cfg
(
dhd_pub_t
 *
dhd
, 
wl_p‚_cfg_t
 *
pcfg
);

867 
dhd_≤o_su•íd
(
dhd_pub_t
 *
dhd
, 
p‚_su•íd
);

869 #ifde‡
ARP_OFFLOAD_SUPPORT


870 
	#MAX_IPV4_ENTRIES
 8

	)

871 
dhd_¨p_ofÊﬂd_£t
(
dhd_pub_t
 * 
dhd
, 
¨p_mode
);

872 
dhd_¨p_ofÊﬂd_íabÀ
(
dhd_pub_t
 * 
dhd
, 
¨p_íabÀ
);

875 
dhd_a€_ho°ù_˛r
(
dhd_pub_t
 *
dhd
, 
idx
);

876 
dhd_a€_¨p_˛r
(
dhd_pub_t
 *
dhd
, 
idx
);

877 
dhd_¨p_gë_¨p_ho°ù_èbÀ
(
dhd_pub_t
 *
dhd
, *
buf
, 
buÊí
, 
idx
);

878 
dhd_¨p_ofÊﬂd_add_ù
(
dhd_pub_t
 *
dhd
, 
uöt32
 
ùaddr
, 
idx
);

	@dhd_bta.c

26 #i‚de‡
WLBTAMP


30 
	~<ty≥defs.h
>

31 
	~<o¶.h
>

32 
	~<bcmcdc.h
>

33 
	~<bcmutûs.h
>

34 
	~<bcmídün.h
>

35 
	~<¥Ÿo/802.11.h
>

36 
	~<¥Ÿo/802.11_bè.h
>

37 
	~<¥Ÿo/bt_amp_hci.h
>

38 
	~<dngl_°©s.h
>

39 
	~<dhd.h
>

40 
	~<dhd_bus.h
>

41 
	~<dhd_¥Ÿo.h
>

42 
	~<dhdio˘l.h
>

43 
	~<dhd_dbg.h
>

45 
	~<dhd_bè.h
>

48 #ifde‡
SEND_HCI_CMD_VIA_IOCTL


49 
	#BTA_HCI_CMD_MAX_LEN
 
HCI_CMD_PREAMBLE_SIZE
 + 
HCI_CMD_DATA_SIZE


	)

53 
	$dhd_bè_docmd
(
dhd_pub_t
 *
pub
, *
cmd_buf
, 
uöt
 
cmd_Àn
)

55 
amp_hci_cmd_t
 *
cmd
 = (amp_hci_cmd_à*)
cmd_buf
;

56 
uöt8
 
buf
[
BTA_HCI_CMD_MAX_LEN
 + 16];

57 
uöt
 
Àn
 = (
buf
);

58 
wl_io˘l_t
 
ioc
;

60 i‡(
cmd_Àn
 < 
HCI_CMD_PREAMBLE_SIZE
)

61  
BCME_BADLEN
;

63 i‡((
uöt
)
cmd
->
∂í
 + 
HCI_CMD_PREAMBLE_SIZE
 > 
cmd_Àn
)

64  
BCME_BADLEN
;

66 
Àn
 = 
	`bcm_mkiov¨
("HCI_cmd",

67 (*)
cmd
, (
uöt
)cmd->
∂í
 + 
HCI_CMD_PREAMBLE_SIZE
, (*)
buf
, 
Àn
);

70 
	`mem£t
(&
ioc
, 0, (ioc));

72 
ioc
.
cmd
 = 
WLC_SET_VAR
;

73 
ioc
.
buf
 = buf;

74 
ioc
.
Àn
 =Üen;

75 
ioc
.
£t
 = 
TRUE
;

77  
	`dhd_wl_io˘l
(
pub
, &
ioc
, ioc.
buf
, ioc.
Àn
);

78 
	}
}

82 
	$dhd_bè_Êush_hcid©a
(
dhd_pub_t
 *
pub
, 
uöt16
 
Œh
)

84 
¥ec
;

85 
pktq
 *
q
;

86 
uöt
 
cou¡
 = 0;

88 
q
 = 
	`dhd_bus_txq
(
pub
->
bus
);

89 i‡(
q
 =
NULL
)

92 
	`DHD_BTA
(("dhd: flushög HCI ACL d©®f‹Üogiˇ»lök %u...\n", 
Œh
));

94 
	`dhd_os_sdlock_txq
(
pub
);

97 
	`PKTQ_PREC_ITER
(
q
, 
¥ec
) {

98 *
hód_pkt
 = 
NULL
;

100 
	`pktq_µìk
(
q
, 
¥ec
Ë!
hód_pkt
) {

101 *
pkt
 = 
	`pktq_pdeq
(
q
, 
¥ec
);

102 
ifidx
;

104 
	`PKTPULL
(
pub
->
osh
, 
pkt
, 
	`dhd_bus_hdæí
’ub->
bus
));

105 
	`dhd_¥Ÿ_hdΩuŒ
(
pub
, &
ifidx
, 
pkt
, 
NULL
, NULL);

107 i‡(
	`PKTLEN
(
pub
->
osh
, 
pkt
Ë>
RFC1042_HDR_LEN
) {

108 
ëhî_hódî
 *
eh
 =

109 (
ëhî_hódî
 *)
	`PKTDATA
(
pub
->
osh
, 
pkt
);

111 i‡(
	`¡oh16
(
eh
->
ëhî_ty≥
Ë< 
ETHER_TYPE_MIN
) {

112 
dŸ11_Œc_¢≠_hódî
 *
lsh
 =

113 (
dŸ11_Œc_¢≠_hódî
 *)&
eh
[1];

115 i‡(
	`bcmp
(
lsh
, 
BT_SIG_SNAP_MPROT
,

116 
DOT11_LLC_SNAP_HDR_LEN
 - 2) == 0 &&

117 
	`¡oh16
(
lsh
->
ty≥
Ë=
BTA_PROT_L2CAP
) {

118 
amp_hci_ACL_d©a_t
 *
ACL_d©a
 =

119 (
amp_hci_ACL_d©a_t
 *)&
lsh
[1];

120 
uöt16
 
h™dÀ
 = 
	`…oh16
(
ACL_d©a
->handle);

122 i‡(
	`HCI_ACL_DATA_HANDLE
(
h™dÀ
Ë=
Œh
) {

123 
	`PKTFREE
(
pub
->
osh
, 
pkt
, 
TRUE
);

124 
cou¡
 ++;

131 
	`dhd_¥Ÿ_hdΩush
(
pub
, 
ifidx
, 
pkt
);

132 
	`PKTPUSH
(
pub
->
osh
, 
pkt
, 
	`dhd_bus_hdæí
’ub->
bus
));

134 i‡(
hód_pkt
 =
NULL
)

135 
hód_pkt
 = 
pkt
;

136 
	`pktq_≥nq
(
q
, 
¥ec
, 
pkt
);

140 
	`dhd_os_sdu∆ock_txq
(
pub
);

142 
	`DHD_BTA
(("dhd: flushed %uÖackë(sËf‹Üogiˇ»lök %u...\n", 
cou¡
, 
Œh
));

143 
	}
}

151 
	$_dhd_bè_docmd
(
dhd_pub_t
 *
pub
, 
amp_hci_cmd_t
 *
cmd
)

153 
°©us
 = 0;

155 
	`…oh16_ua
((
uöt8
 *)&
cmd
->
›code
)) {

156 
HCI_Enh™˚d_Flush
: {

157 
eÊush_cmd_∑rms_t
 *
cmd∑rms
 = (eÊush_cmd_∑rms_à*)
cmd
->
∑rms
;

158 
	`dhd_bè_Êush_hcid©a
(
pub
, 
	`…oh16_ua
(
cmd∑rms
->
Œh
));

165  
°©us
;

166 
	}
}

170 
	$dhd_bè_docmd
(
dhd_pub_t
 *
pub
, *
cmd_buf
, 
uöt
 
cmd_Àn
)

172 
amp_hci_cmd_t
 *
cmd
 = (amp_hci_cmd_à*)
cmd_buf
;

173 
ëhî_hódî
 *
eh
;

174 
dŸ11_Œc_¢≠_hódî
 *
lsh
;

175 
o¶_t
 *
osh
 = 
pub
->osh;

176 
uöt
 
Àn
;

177 *
p
;

178 
°©us
;

180 i‡(
cmd_Àn
 < 
HCI_CMD_PREAMBLE_SIZE
) {

181 
	`DHD_ERROR
(("dhd_bè_docmd: sh‹àcomm™d, cmd_À¿%u\n", 
cmd_Àn
));

182  
BCME_BADLEN
;

185 i‡((
Àn
 = (
uöt
)
cmd
->
∂í
 + 
HCI_CMD_PREAMBLE_SIZE
Ë> 
cmd_Àn
) {

186 
	`DHD_ERROR
(("dhd_bta_docmd: malformed command,Üen %u cmd_len %u\n",

187 
Àn
, 
cmd_Àn
));

191 
p
 = 
	`PKTGET
(
osh
, 
pub
->
hdæí
 + 
RFC1042_HDR_LEN
 + 
Àn
, 
TRUE
);

192 i‡(
p
 =
NULL
) {

193 
	`DHD_ERROR
(("dhd_bta_docmd: out of memory\n"));

194  
BCME_NOMEM
;

199 i‡((
°©us
 = 
	`_dhd_bè_docmd
(
pub
, 
cmd
)) > 0)

201 i‡(
°©us
 < 0)

202  
°©us
;

205 
	`PKTPULL
(
osh
, 
p
, 
pub
->
hdæí
 + 
RFC1042_HDR_LEN
);

206 
	`bc›y
(
cmd
, 
	`PKTDATA
(
osh
, 
p
), 
Àn
);

209 
	`PKTPUSH
(
osh
, 
p
, 
RFC1042_HDR_LEN
);

210 
eh
 = (
ëhî_hódî
 *)
	`PKTDATA
(
osh
, 
p
);

211 
	`bzîo
(
eh
->
ëhî_dho°
, 
ETHER_ADDR_LEN
);

212 
	`ETHER_SET_LOCALADDR
(
eh
->
ëhî_dho°
);

213 
	`bc›y
(&
pub
->
mac
, 
eh
->
ëhî_sho°
, 
ETHER_ADDR_LEN
);

214 
eh
->
ëhî_ty≥
 = 
	`ht⁄16
(
Àn
 + 
DOT11_LLC_SNAP_HDR_LEN
);

215 
lsh
 = (
dŸ11_Œc_¢≠_hódî
 *)&
eh
[1];

216 
	`bc›y
(
BT_SIG_SNAP_MPROT
, 
lsh
, 
DOT11_LLC_SNAP_HDR_LEN
 - 2);

217 
lsh
->
ty≥
 = 0;

219  
	`dhd_£ndpkt
(
pub
, 0, 
p
);

220 
	}
}

225 
	$dhd_bè_tx_hcid©a
(
dhd_pub_t
 *
pub
, *
d©a_buf
, 
uöt
 
d©a_Àn
)

227 
amp_hci_ACL_d©a_t
 *
d©a
 = (amp_hci_ACL_d©a_à*)
d©a_buf
;

228 
ëhî_hódî
 *
eh
;

229 
dŸ11_Œc_¢≠_hódî
 *
lsh
;

230 
o¶_t
 *
osh
 = 
pub
->osh;

231 
uöt
 
Àn
;

232 *
p
;

234 i‡(
d©a_Àn
 < 
HCI_ACL_DATA_PREAMBLE_SIZE
) {

235 
	`DHD_ERROR
(("dhd_bè_tx_hcid©a: sh‹àd©a_buf, d©a_À¿%u\n", 
d©a_Àn
));

236  
BCME_BADLEN
;

239 i‡((
Àn
 = (
uöt
)
	`…oh16
(
d©a
->
dÀn
Ë+ 
HCI_ACL_DATA_PREAMBLE_SIZE
Ë> 
d©a_Àn
) {

240 
	`DHD_ERROR
(("dhd_bta_tx_hcidata: malformed hci data,Üen %u data_len %u\n",

241 
Àn
, 
d©a_Àn
));

245 
p
 = 
	`PKTGET
(
osh
, 
pub
->
hdæí
 + 
RFC1042_HDR_LEN
 + 
Àn
, 
TRUE
);

246 i‡(
p
 =
NULL
) {

247 
	`DHD_ERROR
(("dhd_bta_tx_hcidata: out of memory\n"));

248  
BCME_NOMEM
;

253 
	`PKTPULL
(
osh
, 
p
, 
pub
->
hdæí
 + 
RFC1042_HDR_LEN
);

254 
	`bc›y
(
d©a
, 
	`PKTDATA
(
osh
, 
p
), 
Àn
);

257 
	`PKTPUSH
(
osh
, 
p
, 
RFC1042_HDR_LEN
);

258 
eh
 = (
ëhî_hódî
 *)
	`PKTDATA
(
osh
, 
p
);

259 
	`bzîo
(
eh
->
ëhî_dho°
, 
ETHER_ADDR_LEN
);

260 
	`bc›y
(&
pub
->
mac
, 
eh
->
ëhî_sho°
, 
ETHER_ADDR_LEN
);

261 
eh
->
ëhî_ty≥
 = 
	`ht⁄16
(
Àn
 + 
DOT11_LLC_SNAP_HDR_LEN
);

262 
lsh
 = (
dŸ11_Œc_¢≠_hódî
 *)&
eh
[1];

263 
	`bc›y
(
BT_SIG_SNAP_MPROT
, 
lsh
, 
DOT11_LLC_SNAP_HDR_LEN
 - 2);

264 
lsh
->
ty≥
 = 
	`HTON16
(
BTA_PROT_L2CAP
);

266  
	`dhd_£ndpkt
(
pub
, 0, 
p
);

267 
	}
}

271 
	$dhd_bè_tx_hcid©a_com∂ëe
(
dhd_pub_t
 *
dhdp
, *
txp
, 
boﬁ
 
suc˚ss
)

273 
uöt8
 *
pktd©a
 = (uöt8 *)
	`PKTDATA
(
dhdp
->
osh
, 
txp
);

274 
amp_hci_ACL_d©a_t
 *
ACL_d©a
 = (amp_hci_ACL_d©a_à*)(
pktd©a
 + 
RFC1042_HDR_LEN
);

275 
uöt16
 
h™dÀ
 = 
	`…oh16
(
ACL_d©a
->handle);

276 
uöt16
 
Œh
 = 
	`HCI_ACL_DATA_HANDLE
(
h™dÀ
);

278 
wl_evít_msg_t
 
evít
;

279 
uöt8
 
d©a
[
HCI_EVT_PREAMBLE_SIZE
 + (
num_com∂ëed_d©a_blocks_evt_∑rms_t
)];

280 
amp_hci_evít_t
 *
evt
;

281 
num_com∂ëed_d©a_blocks_evt_∑rms_t
 *
∑rms
;

283 
uöt16
 
Àn
 = 
HCI_EVT_PREAMBLE_SIZE
 + (
num_com∂ëed_d©a_blocks_evt_∑rms_t
);

286 
	`mem£t
(&
evít
, 0, (event));

287 
evít
.
vîsi⁄
 = 
	`ht⁄16
(
BCM_EVENT_MSG_VERSION
);

288 
evít
.
evít_ty≥
 = 
	`ht⁄32
(
WLC_E_BTA_HCI_EVENT
);

289 
evít
.
°©us
 = 0;

290 
evít
.
ªas⁄
 = 0;

291 
evít
.
auth_ty≥
 = 0;

292 
evít
.
d©Æí
 = 
	`ht⁄32
(
Àn
);

293 
evít
.
Êags
 = 0;

296 
evt
 = (
amp_hci_evít_t
 *)
d©a
;

297 
evt
->
ecode
 = 
HCI_Numbî_of_Com∂ëed_D©a_Blocks
;

298 
evt
->
∂í
 = (
num_com∂ëed_d©a_blocks_evt_∑rms_t
);

300 
∑rms
 = (
num_com∂ëed_d©a_blocks_evt_∑rms_t
 *)
evt
->parms;

301 
	`htﬁ16_ua_°‹e
(
dhdp
->
maxd©ablks
, (
uöt8
 *)&
∑rms
->
num_blocks
);

302 
∑rms
->
num_h™dÀs
 = 1;

303 
	`htﬁ16_ua_°‹e
(
Œh
, (
uöt8
 *)&
∑rms
->
com∂ëed
[0].
h™dÀ
);

304 
∑rms
->
com∂ëed
[0].
pkts
 = 1;

305 
∑rms
->
com∂ëed
[0].
blocks
 = 1;

307 
	`dhd_£ndup_evít_comm⁄
(
dhdp
, &
evít
, 
d©a
);

308 
	}
}

312 
	$dhd_bè_d€vt
(
dhd_pub_t
 *
dhdp
, *
d©a_buf
, 
uöt
 
d©a_Àn
)

314 
amp_hci_evít_t
 *
evt
 = (amp_hci_evít_à*)
d©a_buf
;

316 
evt
->
ecode
) {

317 
HCI_Comm™d_Com∂ëe
: {

318 
cmd_com∂ëe_∑rms_t
 *
∑rms
 = (cmd_com∂ëe_∑rms_à*)
evt
->parms;

319 
	`…oh16_ua
((
uöt8
 *)&
∑rms
->
›code
)) {

320 
HCI_Ród_D©a_Block_Size
: {

321 
ªad_d©a_block_size_evt_∑rms_t
 *
∑rms2
 =

322 (
ªad_d©a_block_size_evt_∑rms_t
 *)
∑rms
->parms;

323 
dhdp
->
maxd©ablks
 = 
	`…oh16_ua
((
uöt8
 *)&
∑rms2
->
d©a_block_num
);

330 
HCI_Flush_Occuºed
: {

331 
Êush_occuºed_evt_∑rms_t
 *
evt_∑rms
 = (Êush_occuºed_evt_∑rms_à*)
evt
->
∑rms
;

332 
	`dhd_bè_Êush_hcid©a
(
dhdp
, 
	`…oh16_ua
((
uöt8
 *)&
evt_∑rms
->
h™dÀ
));

338 
	}
}

	@dhd_bta.h

26 #i‚de‡
__dhd_bè_h__


27 
	#__dhd_bè_h__


	)

29 
	gdhd_pub
;

31 
dhd_bè_docmd
(
dhd_pub
 *
pub
, *
cmd_buf
, 
uöt
 
cmd_Àn
);

33 
dhd_bè_d€vt
(
dhd_pub
 *
pub
, *
d©a_buf
, 
uöt
 
d©a_Àn
);

35 
dhd_bè_tx_hcid©a
(
dhd_pub
 *
pub
, *
d©a_buf
, 
uöt
 
d©a_Àn
);

36 
dhd_bè_tx_hcid©a_com∂ëe
(
dhd_pub
 *
dhdp
, *
txp
, 
boﬁ
 
suc˚ss
);

	@dhd_bus.h

30 #i‚de‡
_dhd_bus_h_


31 
	#_dhd_bus_h_


	)

38 
dhd_bus_ªgi°î
();

39 
dhd_bus_uƒegi°î
();

42 
boﬁ
 
dhd_bus_dow∆ﬂd_fúmw¨e
(
dhd_bus
 *
bus
, 
o¶_t
 *
osh
,

43 *
fw_∑th
, *
nv_∑th
);

46 
dhd_bus_°›
(
dhd_bus
 *
bus
, 
boﬁ
 
íf‹˚_muãx
);

49 
dhd_bus_öô
(
dhd_pub_t
 *
dhdp
, 
boﬁ
 
íf‹˚_muãx
);

52 
dhd_bus_gëidÀtime
(
dhd_pub_t
 *
dhdp
, *
idÀtime
);

55 
dhd_bus_£tidÀtime
(
dhd_pub_t
 *
dhdp
, 
idÀ_time
);

58 
dhd_bus_txd©a
(
dhd_bus
 *
bus
, *
txp
);

63 
dhd_bus_tx˘l
(
dhd_bus
 *
bus
, 
uch¨
 *
msg
, 
uöt
 
msgÀn
);

64 
dhd_bus_rx˘l
(
dhd_bus
 *
bus
, 
uch¨
 *
msg
, 
uöt
 
msgÀn
);

67 
boﬁ
 
dhd_bus_w©chdog
(
dhd_pub_t
 *
dhd
);

68 
dhd_dißbÀ_öå
(
dhd_pub_t
 *
dhd
);

70 #i‡
deföed
(
DHD_DEBUG
)

72 
dhd_bus_c⁄sﬁe_ö
(
dhd_pub_t
 *
dhd
, 
uch¨
 *
msg
, 
uöt
 
msgÀn
);

76 
boﬁ
 
dhd_bus_dpc
(
dhd_bus
 *
bus
);

77 
dhd_bus_i§
(
boﬁ
 * 
I¡îru±Recognized
, boﬁ * 
QueueMöù‹tH™dÀI¡îru±
, *
¨g
);

81 
dhd_bus_iov¨_›
(
dhd_pub_t
 *
dhdp
, c⁄° *
«me
,

82 *
∑øms
, 
∂í
, *
¨g
, 
Àn
, 
boﬁ
 
£t
);

85 
dhd_bus_dump
(
dhd_pub_t
 *
dhdp
, 
bcm°rbuf
 *
°rbuf
);

88 
dhd_bus_˛órcou¡s
(
dhd_pub_t
 *
dhdp
);

91 
uöt
 
dhd_bus_chù
(
dhd_bus
 *
bus
);

94 
dhd_bus_£t_nvøm_∑øms
(
dhd_bus
 * 
bus
, c⁄° *
nvøm_∑øms
);

96 *
dhd_bus_pub
(
dhd_bus
 *
bus
);

97 *
dhd_bus_txq
(
dhd_bus
 *
bus
);

98 
uöt
 
dhd_bus_hdæí
(
dhd_bus
 *
bus
);

101 
	#DHD_SET_BUS_STATE_DOWN
(
_bus
) do { \

102 (
_bus
)->
dhd
->
bus°©e
 = 
DHD_BUS_DOWN
; \

103 } 0)

	)

106 
dhd_bus_ªg_sdio_nŸify
(* 
£m≠h‹e
);

107 
dhd_bus_uƒeg_sdio_nŸify
();

109 
dhd_txglom_íabÀ
(
dhd_pub_t
 *
dhdp
, 
boﬁ
 
íabÀ
);

	@dhd_cdc.c

31 
	~<ty≥defs.h
>

32 
	~<o¶.h
>

34 
	~<bcmutûs.h
>

35 
	~<bcmcdc.h
>

36 
	~<bcmídün.h
>

38 
	~<dngl_°©s.h
>

39 
	~<dhd.h
>

40 
	~<dhd_¥Ÿo.h
>

41 
	~<dhd_bus.h
>

42 
	~<dhd_dbg.h
>

45 #ifde‡
PROP_TXSTATUS


46 
	~<wlfc_¥Ÿo.h
>

47 
	~<dhd_wlfc.h
>

51 
	#RETRIES
 2

	)

52 
	#BUS_HEADER_LEN
 (24+
DHD_SDALIGN
Ë

	)

56 
	#ROUND_UP_MARGIN
 2048

	)

60 
	#BUS_RETRIES
 1

	)

62 #ifde‡
PROP_TXSTATUS


63 
	sdhd_wlfc_commô_öfo
 {

64 
uöt8
 
	m√eds_hdr
;

65 
uöt8
 
	mac_fifo_¸edô_•ít
;

66 
ewlfc_∑ckë_°©e_t
 
	mpkt_ty≥
;

67 
wlfc_mac_des¸ùt‹_t
* 
	mmac_íåy
;

68 * 
	mp
;

69 } 
	tdhd_wlfc_commô_öfo_t
;

73 
	sdhd_¥Ÿ
 {

74 
uöt16
 
	mªqid
;

75 
uöt8
 
	m≥ndög
;

76 
uöt32
 
	mœ°cmd
;

77 
uöt8
 
	mbus_hódî
[
BUS_HEADER_LEN
];

78 
cdc_io˘l_t
 
	mmsg
;

79 
	mbuf
[
WLC_IOCTL_MAXLEN
 + 
ROUND_UP_MARGIN
];

80 } 
	tdhd_¥Ÿ_t
;

84 
	$dhdcdc_msg
(
dhd_pub_t
 *
dhd
)

86 
îr
 = 0;

87 
dhd_¥Ÿ_t
 *
¥Ÿ
 = 
dhd
->prot;

88 
Àn
 = 
	`…oh32
(
¥Ÿ
->
msg
.ÀnË+ (
cdc_io˘l_t
);

90 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

92 
	`DHD_OS_WAKE_LOCK
(
dhd
);

98 i‡(
Àn
 > 
CDC_MAX_MSG_SIZE
)

99 
Àn
 = 
CDC_MAX_MSG_SIZE
;

102 
îr
 = 
	`dhd_bus_tx˘l
(
dhd
->
bus
, (
uch¨
*)&
¥Ÿ
->
msg
, 
Àn
);

104 
	`DHD_OS_WAKE_UNLOCK
(
dhd
);

105  
îr
;

106 
	}
}

109 
	$dhdcdc_cm∂t
(
dhd_pub_t
 *
dhd
, 
uöt32
 
id
, uöt32 
Àn
)

111 
ªt
;

112 
cdc_Àn
 = 
Àn
 + (
cdc_io˘l_t
);

113 
dhd_¥Ÿ_t
 *
¥Ÿ
 = 
dhd
->prot;

115 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

119 
ªt
 = 
	`dhd_bus_rx˘l
(
dhd
->
bus
, (
uch¨
*)&
¥Ÿ
->
msg
, 
cdc_Àn
);

120 i‡(
ªt
 < 0)

122 } 
	`CDC_IOC_ID
(
	`…oh32
(
¥Ÿ
->
msg
.
Êags
)Ë!
id
);

125  
ªt
;

126 
	}
}

129 
	$dhdcdc_quîy_io˘l
(
dhd_pub_t
 *
dhd
, 
ifidx
, 
uöt
 
cmd
, *
buf
, uöà
Àn
, 
uöt8
 
a˘i⁄
)

131 
dhd_¥Ÿ_t
 *
¥Ÿ
 = 
dhd
->prot;

132 
cdc_io˘l_t
 *
msg
 = &
¥Ÿ
->msg;

133 *
öfo
;

134 
ªt
 = 0, 
ªåõs
 = 0;

135 
uöt32
 
id
, 
Êags
 = 0;

137 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

138 
	`DHD_CTL
(("%s: cmd %dÜí %d\n", 
__FUNCTION__
, 
cmd
, 
Àn
));

142 i‡(
cmd
 =
WLC_GET_VAR
 && 
buf
)

144 i‡(!
	`°rcmp
((*)
buf
, "bcmerrorstr"))

146 
	`°∫˝y
((*)
buf
, 
	`bcmîr‹°r
(
dhd
->
d⁄gÀ_îr‹
), 
BCME_STRLEN
);

147 
d⁄e
;

149 i‡(!
	`°rcmp
((*)
buf
, "bcmerror"))

151 *(*)
buf
 = 
dhd
->
d⁄gÀ_îr‹
;

152 
d⁄e
;

156 
	`mem£t
(
msg
, 0, (
cdc_io˘l_t
));

158 
msg
->
cmd
 = 
	`htﬁ32
(cmd);

159 
msg
->
Àn
 = 
	`htﬁ32
(len);

160 
msg
->
Êags
 = (++
¥Ÿ
->
ªqid
 << 
CDCF_IOC_ID_SHIFT
);

161 
	`CDC_SET_IF_IDX
(
msg
, 
ifidx
);

163 
a˘i⁄
 &
WL_IOCTL_ACTION_MASK
;

164 
msg
->
Êags
 |(
a˘i⁄
 << 
CDCF_IOC_ACTION_SHIFT
);

165 
msg
->
Êags
 = 
	`htﬁ32
(msg->flags);

167 i‡(
buf
)

168 
	`mem˝y
(
¥Ÿ
->
buf
, buf, 
Àn
);

170 i‡((
ªt
 = 
	`dhdcdc_msg
(
dhd
)) < 0) {

171 i‡(!
dhd
->
h™g_was_£¡
)

172 
	`DHD_ERROR
(("dhdcdc_quîy_io˘l: dhdcdc_msg faûed w/°©u†%d\n", 
ªt
));

173 
d⁄e
;

176 
ªåy
:

178 i‡((
ªt
 = 
	`dhdcdc_cm∂t
(
dhd
, 
¥Ÿ
->
ªqid
, 
Àn
)) < 0)

179 
d⁄e
;

181 
Êags
 = 
	`…oh32
(
msg
->flags);

182 
id
 = (
Êags
 & 
CDCF_IOC_ID_MASK
Ë>> 
CDCF_IOC_ID_SHIFT
;

184 i‡((
id
 < 
¥Ÿ
->
ªqid
Ë&& (++
ªåõs
 < 
RETRIES
))

185 
ªåy
;

186 i‡(
id
 !
¥Ÿ
->
ªqid
) {

187 
	`DHD_ERROR
(("%s: %s: unexpectedÑequest id %d (expected %d)\n",

188 
	`dhd_i‚ame
(
dhd
, 
ifidx
), 
__FUNCTION__
, 
id
, 
¥Ÿ
->
ªqid
));

189 
ªt
 = -
EINVAL
;

190 
d⁄e
;

194 
öfo
 = (*)&
msg
[1];

197 i‡(
buf
)

199 i‡(
ªt
 < ()
Àn
)

200 
Àn
 = 
ªt
;

201 
	`mem˝y
(
buf
, 
öfo
, 
Àn
);

205 i‡(
Êags
 & 
CDCF_IOC_ERROR
)

207 
ªt
 = 
	`…oh32
(
msg
->
°©us
);

209 
dhd
->
d⁄gÀ_îr‹
 = 
ªt
;

212 
d⁄e
:

213  
ªt
;

214 
	}
}

218 
	$dhdcdc_£t_io˘l
(
dhd_pub_t
 *
dhd
, 
ifidx
, 
uöt
 
cmd
, *
buf
, uöà
Àn
, 
uöt8
 
a˘i⁄
)

220 
dhd_¥Ÿ_t
 *
¥Ÿ
 = 
dhd
->prot;

221 
cdc_io˘l_t
 *
msg
 = &
¥Ÿ
->msg;

222 
ªt
 = 0;

223 
uöt32
 
Êags
, 
id
;

225 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

226 
	`DHD_CTL
(("%s: cmd %dÜí %d\n", 
__FUNCTION__
, 
cmd
, 
Àn
));

228 i‡(
dhd
->
bus°©e
 =
DHD_BUS_DOWN
) {

229 
	`DHD_ERROR
(("%†: bu†i†down. wêhavênŸhögÅÿdo\n", 
__FUNCTION__
));

230  -
EIO
;

234 i‡(
dhd
->
h™g_was_£¡
) {

235 
	`DHD_ERROR
(("%s: HANG was sent upÉarlier. NotÅalkingÅoÅhe chip\n",

236 
__FUNCTION__
));

237  -
EIO
;

241 
	`mem£t
(
msg
, 0, (
cdc_io˘l_t
));

243 
msg
->
cmd
 = 
	`htﬁ32
(cmd);

244 
msg
->
Àn
 = 
	`htﬁ32
(len);

245 
msg
->
Êags
 = (++
¥Ÿ
->
ªqid
 << 
CDCF_IOC_ID_SHIFT
);

246 
	`CDC_SET_IF_IDX
(
msg
, 
ifidx
);

248 
a˘i⁄
 &
WL_IOCTL_ACTION_MASK
;

249 
msg
->
Êags
 |(
a˘i⁄
 << 
CDCF_IOC_ACTION_SHIFT
Ë| 
CDCF_IOC_SET
;

250 
msg
->
Êags
 = 
	`htﬁ32
(msg->flags);

252 i‡(
buf
)

253 
	`mem˝y
(
¥Ÿ
->
buf
, buf, 
Àn
);

255 i‡((
ªt
 = 
	`dhdcdc_msg
(
dhd
)) < 0) {

256 
	`DHD_ERROR
(("%s: dhdcdc_msg faûed w/°©u†%d\n", 
__FUNCTION__
, 
ªt
));

257 
d⁄e
;

260 i‡((
ªt
 = 
	`dhdcdc_cm∂t
(
dhd
, 
¥Ÿ
->
ªqid
, 
Àn
)) < 0)

261 
d⁄e
;

263 
Êags
 = 
	`…oh32
(
msg
->flags);

264 
id
 = (
Êags
 & 
CDCF_IOC_ID_MASK
Ë>> 
CDCF_IOC_ID_SHIFT
;

266 i‡(
id
 !
¥Ÿ
->
ªqid
) {

267 
	`DHD_ERROR
(("%s: %s: unexpectedÑequest id %d (expected %d)\n",

268 
	`dhd_i‚ame
(
dhd
, 
ifidx
), 
__FUNCTION__
, 
id
, 
¥Ÿ
->
ªqid
));

269 
ªt
 = -
EINVAL
;

270 
d⁄e
;

274 i‡(
Êags
 & 
CDCF_IOC_ERROR
)

276 
ªt
 = 
	`…oh32
(
msg
->
°©us
);

278 
dhd
->
d⁄gÀ_îr‹
 = 
ªt
;

281 
d⁄e
:

282  
ªt
;

283 
	}
}

287 
	$dhd_¥Ÿ_io˘l
(
dhd_pub_t
 *
dhd
, 
ifidx
, 
wl_io˘l_t
 * 
ioc
, * 
buf
, 
Àn
)

289 
dhd_¥Ÿ_t
 *
¥Ÿ
 = 
dhd
->prot;

290 
ªt
 = -1;

291 
uöt8
 
a˘i⁄
;

292 #i‡
	`deföed
(
NDIS630
)

293 
boﬁ
 
acquúed
 = 
FALSE
;

296 i‡((
dhd
->
bus°©e
 =
DHD_BUS_DOWN
Ë|| dhd->
h™g_was_£¡
) {

297 
	`DHD_ERROR
(("%†: bu†i†down. wêhavênŸhögÅÿdo\n", 
__FUNCTION__
));

298 
d⁄e
;

300 #i‡
	`deföed
(
NDIS630
)

301 i‡(
	`dhd_os_¥Ÿo_block
(
dhd
))

303 
acquúed
 = 
TRUE
;

308 
ªt
 = -1;

309  
ªt
;

313 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

315 
	`ASSERT
(
Àn
 <
WLC_IOCTL_MAXLEN
);

317 i‡(
Àn
 > 
WLC_IOCTL_MAXLEN
)

318 
d⁄e
;

320 i‡(
¥Ÿ
->
≥ndög
 =
TRUE
) {

321 
	`DHD_ERROR
(("CDCÖacket isÖending!!!! cmd=0x%x (%lu)Üastcmd=0x%x (%lu)\n",

322 
ioc
->
cmd
, ()ioc->cmd, 
¥Ÿ
->
œ°cmd
,

323 ()
¥Ÿ
->
œ°cmd
));

324 i‡((
ioc
->
cmd
 =
WLC_SET_VAR
Ë|| (ioc->cmd =
WLC_GET_VAR
)) {

325 
	`DHD_TRACE
(("iov¨ cmd=%s\n", (*)
buf
));

327 
d⁄e
;

330 
¥Ÿ
->
≥ndög
 = 
TRUE
;

331 
¥Ÿ
->
œ°cmd
 = 
ioc
->
cmd
;

332 
a˘i⁄
 = 
ioc
->
£t
;

333 i‡(
a˘i⁄
 & 
WL_IOCTL_ACTION_SET
)

334 
ªt
 = 
	`dhdcdc_£t_io˘l
(
dhd
, 
ifidx
, 
ioc
->
cmd
, 
buf
, 
Àn
, 
a˘i⁄
);

336 
ªt
 = 
	`dhdcdc_quîy_io˘l
(
dhd
, 
ifidx
, 
ioc
->
cmd
, 
buf
, 
Àn
, 
a˘i⁄
);

337 i‡(
ªt
 > 0)

338 
ioc
->
u£d
 = 
ªt
 - (
cdc_io˘l_t
);

342 i‡(
ªt
 >= 0)

343 
ªt
 = 0;

345 
cdc_io˘l_t
 *
msg
 = &
¥Ÿ
->msg;

346 
ioc
->
√eded
 = 
	`…oh32
(
msg
->
Àn
);

350 i‡((!
ªt
Ë&& (
ioc
->
cmd
 =
WLC_SET_VAR
Ë&& (!
	`°rcmp
(
buf
, "wme_dp"))) {

351 
¶í
, 
vÆ
 = 0;

353 
¶í
 = 
	`°æí
("wme_dp") + 1;

354 i‡(
Àn
 >()(
¶í
 + ()))

355 
	`bc›y
(((*)
buf
 + 
¶í
), &
vÆ
, ());

356 
dhd
->
wme_dp
 = (
uöt8
Ë
	`…oh32
(
vÆ
);

359 
¥Ÿ
->
≥ndög
 = 
FALSE
;

361 
d⁄e
:

362 #i‡
	`deföed
(
NDIS630
)

363 i‡(
acquúed
)

364 
	`dhd_os_¥Ÿo_unblock
(
dhd
);

366  
ªt
;

367 
	}
}

370 
	$dhd_¥Ÿ_iov¨_›
(
dhd_pub_t
 *
dhdp
, c⁄° *
«me
,

371 *
∑øms
, 
∂í
, *
¨g
, 
Àn
, 
boﬁ
 
£t
)

373  
BCME_UNSUPPORTED
;

374 
	}
}

376 #ifde‡
PROP_TXSTATUS


378 
	$dhd_wlfc_dump
(
dhd_pub_t
 *
dhdp
, 
bcm°rbuf
 *
°rbuf
)

380 
i
;

381 
uöt8
* 
ó
;

382 
©ho°_wl_°©us_öfo_t
* 
wlfc
 = (athost_wl_status_info_t*)

383 
dhdp
->
wlfc_°©e
;

384 
wlfc_h™gî_t
* 
h
;

385 
wlfc_mac_des¸ùt‹_t
* 
mac_èbÀ
;

386 
wlfc_mac_des¸ùt‹_t
* 
öãrÁ˚s
;

387 * 
i·y≥s
[] = {"STA", "AP", "WDS", "p2pGO", "p2pCL"};

389 i‡(
wlfc
 =
NULL
) {

390 
	`bcm_b¥ötf
(
°rbuf
, "wlfcÇot initialized yet\n");

393 
h
 = (
wlfc_h™gî_t
*)
wlfc
->
h™gî
;

394 i‡(
h
 =
NULL
) {

395 
	`bcm_b¥ötf
(
°rbuf
, "wlfc-hangerÇot initialized yet\n");

398 
mac_èbÀ
 = 
wlfc
->
de°ö©i⁄_íåõs
.
nodes
;

399 
öãrÁ˚s
 = 
wlfc
->
de°ö©i⁄_íåõs
.interfaces;

400 
	`bcm_b¥ötf
(
°rbuf
, "---- wlfc stats ----\n");

401 i‡(
h
) {

402 
	`bcm_b¥ötf
(
°rbuf
, "wlfc hanger (pushed,popped,f_push,"

404 
h
->
pushed
,

405 
h
->
p›≥d
,

406 
h
->
Áûed_to_push
,

407 
h
->
Áûed_to_p›
,

408 
h
->
Áûed_¶Ÿföd
,

409 (
h
->
pushed
 - h->
p›≥d
));

412 
	`bcm_b¥ötf
(
°rbuf
, "wlfc fail(tlv,credit_rqst,mac_update,psmode_update), "

414 
wlfc
->
°©s
.
év_∑r£_Áûed
,

415 
wlfc
->
°©s
.
¸edô_ªque°_Áûed
,

416 
wlfc
->
°©s
.
mac_upd©e_Áûed
,

417 
wlfc
->
°©s
.
psmode_upd©e_Áûed
,

418 
wlfc
->
°©s
.
dñayq_fuŒ_îr‹
,

419 
wlfc
->
°©s
.
£ndq_fuŒ_îr‹
,

420 
wlfc
->
°©s
.
rﬁlback_Áûed
);

422 
	`bcm_b¥ötf
(
°rbuf
, "SENDQ (len,credit,sent) "

424 
wlfc
->
SENDQ
.
q
[0].
Àn
, wlfc->
FIFO_¸edô
[0], wlfc->
°©s
.
£ndq_pkts
[0],

425 
wlfc
->
SENDQ
.
q
[1].
Àn
, wlfc->
FIFO_¸edô
[1], wlfc->
°©s
.
£ndq_pkts
[1],

426 
wlfc
->
SENDQ
.
q
[2].
Àn
, wlfc->
FIFO_¸edô
[2], wlfc->
°©s
.
£ndq_pkts
[2],

427 
wlfc
->
SENDQ
.
q
[3].
Àn
, wlfc->
FIFO_¸edô
[3], wlfc->
°©s
.
£ndq_pkts
[3],

428 
wlfc
->
SENDQ
.
q
[4].
Àn
, wlfc->
FIFO_¸edô
[4], wlfc->
°©s
.
£ndq_pkts
[4]);

430 #ifde‡
PROP_TXSTATUS_DEBUG


431 
	`bcm_b¥ötf
(
°rbuf
, "SENDQ dropped: AC[0-3]:(%d,%d,%d,%d), (bcmc,atim):(%d,%d)\n",

432 
wlfc
->
°©s
.
dr›≥d_qfuŒ
[0], wlfc->stats.dropped_qfull[1],

433 
wlfc
->
°©s
.
dr›≥d_qfuŒ
[2], wlfc->stats.dropped_qfull[3],

434 
wlfc
->
°©s
.
dr›≥d_qfuŒ
[4], wlfc->stats.dropped_qfull[5]);

437 
	`bcm_b¥ötf
(
°rbuf
, "\n");

438 
i
 = 0; i < 
WLFC_MAX_IFNUM
; i++) {

439 i‡(
öãrÁ˚s
[
i
].
occupõd
) {

440 * 
i·y≥_desc
;

442 i‡(
öãrÁ˚s
[
i
].
i·y≥
 > 
WLC_E_IF_ROLE_P2P_CLIENT
)

443 
i·y≥_desc
 = "<Unknown";

445 
i·y≥_desc
 = 
i·y≥s
[
öãrÁ˚s
[
i
].
i·y≥
];

447 
ó
 = 
öãrÁ˚s
[
i
].ea;

448 
	`bcm_b¥ötf
(
°rbuf
, "INTERFACE[%d].ea = "

450 "√tif_Êow_c⁄åﬁ:%s\n", 
i
,

451 
ó
[0],Éa[1],Éa[2],Éa[3],Éa[4],Éa[5],

452 
öãrÁ˚s
[
i
].
öãrÁ˚_id
,

453 
i·y≥_desc
, ((
wlfc
->
ho°if_Êow_°©e
[
i
] =
OFF
)

456 
	`bcm_b¥ötf
(
°rbuf
, "INTERFACE[%d].DELAYQ(len,state,credit)"

458 
i
,

459 
öãrÁ˚s
[
i
].
psq
.
Àn
,

460 ((
öãrÁ˚s
[
i
].
°©e
 ==

461 
WLFC_STATE_OPEN
) ? " OPEN":"CLOSE"),

462 
öãrÁ˚s
[
i
].
ªque°ed_¸edô
);

464 
	`bcm_b¥ötf
(
°rbuf
, "INTERFACE[%d].DELAYQ"

467 
i
,

468 
öãrÁ˚s
[
i
].
psq
.
q
[0].
Àn
,

469 
öãrÁ˚s
[
i
].
psq
.
q
[1].
Àn
,

470 
öãrÁ˚s
[
i
].
psq
.
q
[2].
Àn
,

471 
öãrÁ˚s
[
i
].
psq
.
q
[3].
Àn
,

472 
öãrÁ˚s
[
i
].
psq
.
q
[4].
Àn
,

473 
öãrÁ˚s
[
i
].
psq
.
q
[5].
Àn
,

474 
öãrÁ˚s
[
i
].
psq
.
q
[6].
Àn
,

475 
öãrÁ˚s
[
i
].
psq
.
q
[7].
Àn
);

479 
	`bcm_b¥ötf
(
°rbuf
, "\n");

480 
i
 = 0; i < 
WLFC_MAC_DESC_TABLE_SIZE
; i++) {

481 i‡(
mac_èbÀ
[
i
].
occupõd
) {

482 
ó
 = 
mac_èbÀ
[
i
].ea;

483 
	`bcm_b¥ötf
(
°rbuf
, "MAC_table[%d].ea = "

484 "[%02x:%02x:%02x:%02x:%02x:%02x], if:%d \n", 
i
,

485 
ó
[0],Éa[1],Éa[2],Éa[3],Éa[4],Éa[5],

486 
mac_èbÀ
[
i
].
öãrÁ˚_id
);

488 
	`bcm_b¥ötf
(
°rbuf
, "MAC_table[%d].DELAYQ(len,state,credit)"

490 
i
,

491 
mac_èbÀ
[
i
].
psq
.
Àn
,

492 ((
mac_èbÀ
[
i
].
°©e
 ==

493 
WLFC_STATE_OPEN
) ? " OPEN":"CLOSE"),

494 
mac_èbÀ
[
i
].
ªque°ed_¸edô
);

495 #ifde‡
PROP_TXSTATUS_DEBUG


496 
	`bcm_b¥ötf
(
°rbuf
, "MAC_table[%d]: (opened, closed) = (%d, %d)\n",

497 
i
, 
mac_èbÀ
[i].
›íed_˘
, mac_èbÀ[i].
˛o£d_˘
);

499 
	`bcm_b¥ötf
(
°rbuf
, "MAC_table[%d].DELAYQ"

502 
i
,

503 
mac_èbÀ
[
i
].
psq
.
q
[0].
Àn
,

504 
mac_èbÀ
[
i
].
psq
.
q
[1].
Àn
,

505 
mac_èbÀ
[
i
].
psq
.
q
[2].
Àn
,

506 
mac_èbÀ
[
i
].
psq
.
q
[3].
Àn
,

507 
mac_èbÀ
[
i
].
psq
.
q
[4].
Àn
,

508 
mac_èbÀ
[
i
].
psq
.
q
[5].
Àn
,

509 
mac_èbÀ
[
i
].
psq
.
q
[6].
Àn
,

510 
mac_èbÀ
[
i
].
psq
.
q
[7].
Àn
);

514 #ifde‡
PROP_TXSTATUS_DEBUG


516 
avg
;

517 
movög_avg
 = 0;

518 
movög_ßm∂es
;

520 i‡(
wlfc
->
°©s
.
œãncy_ßm∂e_cou¡
) {

521 
movög_ßm∂es
 = (
wlfc
->
°©s
.
dñès
)/(
uöt32
);

523 
i
 = 0; i < 
movög_ßm∂es
; i++)

524 
movög_avg
 +
wlfc
->
°©s
.
dñès
[
i
];

525 
movög_avg
 /
movög_ßm∂es
;

527 
avg
 = (100 * 
wlfc
->
°©s
.
tŸÆ_°©us_œãncy
) /

528 
wlfc
->
°©s
.
œãncy_ßm∂e_cou¡
;

529 
	`bcm_b¥ötf
(
°rbuf
, "txstatusÜatency (average,Üast, moving[%d]) = "

531 
movög_ßm∂es
, 
avg
/100, (avg - (avg/100)*100),

532 
wlfc
->
°©s
.
œãncy_mo°_ª˚¡
,

533 
movög_avg
);

537 
	`bcm_b¥ötf
(
°rbuf
, "wlfc- fifo[0-5] credit stats: sent = (%d,%d,%d,%d,%d,%d), "

539 
wlfc
->
°©s
.
fifo_¸edôs_£¡
[0],

540 
wlfc
->
°©s
.
fifo_¸edôs_£¡
[1],

541 
wlfc
->
°©s
.
fifo_¸edôs_£¡
[2],

542 
wlfc
->
°©s
.
fifo_¸edôs_£¡
[3],

543 
wlfc
->
°©s
.
fifo_¸edôs_£¡
[4],

544 
wlfc
->
°©s
.
fifo_¸edôs_£¡
[5],

546 
wlfc
->
°©s
.
fifo_¸edôs_back
[0],

547 
wlfc
->
°©s
.
fifo_¸edôs_back
[1],

548 
wlfc
->
°©s
.
fifo_¸edôs_back
[2],

549 
wlfc
->
°©s
.
fifo_¸edôs_back
[3],

550 
wlfc
->
°©s
.
fifo_¸edôs_back
[4],

551 
wlfc
->
°©s
.
fifo_¸edôs_back
[5]);

553 
uöt32
 
fifo_¸_£¡
 = 0;

554 
uöt32
 
fifo_¸_acked
 = 0;

555 
uöt32
 
ªque°_¸_£¡
 = 0;

556 
uöt32
 
ªque°_¸_ack
 = 0;

557 
uöt32
 
bc_mc_¸_ack
 = 0;

559 
i
 = 0; i < (
wlfc
->
°©s
.
fifo_¸edôs_£¡
)/(
uöt32
); i++) {

560 
fifo_¸_£¡
 +
wlfc
->
°©s
.
fifo_¸edôs_£¡
[
i
];

563 
i
 = 0; i < (
wlfc
->
°©s
.
fifo_¸edôs_back
)/(
uöt32
); i++) {

564 
fifo_¸_acked
 +
wlfc
->
°©s
.
fifo_¸edôs_back
[
i
];

567 
i
 = 0; i < 
WLFC_MAC_DESC_TABLE_SIZE
; i++) {

568 i‡(
wlfc
->
de°ö©i⁄_íåõs
.
nodes
[
i
].
occupõd
) {

569 
ªque°_¸_£¡
 +=

570 
wlfc
->
de°ö©i⁄_íåõs
.
nodes
[
i
].
d°n¸edô_£¡_∑ckës
;

573 
i
 = 0; i < 
WLFC_MAX_IFNUM
; i++) {

574 i‡(
wlfc
->
de°ö©i⁄_íåõs
.
öãrÁ˚s
[
i
].
occupõd
) {

575 
ªque°_¸_£¡
 +=

576 
wlfc
->
de°ö©i⁄_íåõs
.
öãrÁ˚s
[
i
].
d°n¸edô_£¡_∑ckës
;

579 
i
 = 0; i < 
WLFC_MAC_DESC_TABLE_SIZE
; i++) {

580 i‡(
wlfc
->
de°ö©i⁄_íåõs
.
nodes
[
i
].
occupõd
) {

581 
ªque°_¸_ack
 +=

582 
wlfc
->
de°ö©i⁄_íåõs
.
nodes
[
i
].
d°n¸edô_acks
;

585 
i
 = 0; i < 
WLFC_MAX_IFNUM
; i++) {

586 i‡(
wlfc
->
de°ö©i⁄_íåõs
.
öãrÁ˚s
[
i
].
occupõd
) {

587 
ªque°_¸_ack
 +=

588 
wlfc
->
de°ö©i⁄_íåõs
.
öãrÁ˚s
[
i
].
d°n¸edô_acks
;

591 
	`bcm_b¥ötf
(
°rbuf
, "wlfc- (sent, status) =>Öq(%d,%d), vq(%d,%d),"

593 
fifo_¸_£¡
, 
fifo_¸_acked
,

594 
ªque°_¸_£¡
, 
ªque°_¸_ack
,

595 
wlfc
->
de°ö©i⁄_íåõs
.
Ÿhî
.
d°n¸edô_acks
,

596 
bc_mc_¸_ack
,

597 
wlfc
->
°©s
.
sig«l_⁄ly_pkts_£¡
, wlfc->°©s.
sig«l_⁄ly_pkts_‰ìd
);

600 
	`bcm_b¥ötf
(
°rbuf
, "\n");

601 
	`bcm_b¥ötf
(
°rbuf
, "wlfc-Ökt((in,2bus,txstats,hdrpull),(dropped,hdr_only,wlc_tossed)"

604 
wlfc
->
°©s
.
pktö
,

605 
wlfc
->
°©s
.
pkt2bus
,

606 
wlfc
->
°©s
.
tx°©us_ö
,

607 
wlfc
->
°©s
.
dhd_hdΩuŒs
,

609 
wlfc
->
°©s
.
pktdr›≥d
,

610 
wlfc
->
°©s
.
wlfc_hódî_⁄ly_pkt
,

611 
wlfc
->
°©s
.
wlc_tos£d_pkts
,

613 
wlfc
->
°©s
.
pkt_‰ìd
,

614 
wlfc
->
°©s
.
pkt_‰ì_îr
, wlfc->°©s.
rﬁlback
);

616 
	`bcm_b¥ötf
(
°rbuf
, "wlfc- suppress((d11,wlc,err),enq(d11,wl,hq,mac?),retx(d11,wlc,hq)) = "

619 
wlfc
->
°©s
.
d11_suµªss
,

620 
wlfc
->
°©s
.
wl_suµªss
,

621 
wlfc
->
°©s
.
bad_suµªss
,

623 
wlfc
->
°©s
.
psq_d11sup_íq
,

624 
wlfc
->
°©s
.
psq_wlsup_íq
,

625 
wlfc
->
°©s
.
psq_ho°q_íq
,

626 
wlfc
->
°©s
.
mac_h™dÀ_nŸfound
,

628 
wlfc
->
°©s
.
psq_d11sup_ªtx
,

629 
wlfc
->
°©s
.
psq_wlsup_ªtx
,

630 
wlfc
->
°©s
.
psq_ho°q_ªtx
);

632 
	}
}

640 
	$dhd_wlfc_h™gî_¸óã
(
o¶_t
 *
osh
, 
max_ôems
)

642 
i
;

643 
wlfc_h™gî_t
* 
h™gî
;

646 
	`ASSERT
(
max_ôems
 =
WLFC_HANGER_MAXITEMS
);

648 i‡((
h™gî
 = (
wlfc_h™gî_t
*)
	`MALLOC
(
osh
, 
	`WLFC_HANGER_SIZE
(
max_ôems
))Ë=
NULL
)

649  
NULL
;

651 
	`mem£t
(
h™gî
, 0, 
	`WLFC_HANGER_SIZE
(
max_ôems
));

652 
h™gî
->
max_ôems
 = max_items;

654 
i
 = 0; i < 
h™gî
->
max_ôems
; i++) {

655 
h™gî
->
ôems
[
i
].
°©e
 = 
WLFC_HANGER_ITEM_STATE_FREE
;

657  
h™gî
;

658 
	}
}

661 
	$dhd_wlfc_h™gî_dñëe
(
o¶_t
 *
osh
, * 
h™gî
)

663 
wlfc_h™gî_t
* 
h
 = (wlfc_h™gî_t*)
h™gî
;

665 i‡(
h
) {

666 
	`MFREE
(
osh
, 
h
, 
	`WLFC_HANGER_SIZE
(h->
max_ôems
));

667  
BCME_OK
;

669  
BCME_BADARG
;

670 
	}
}

672 
uöt16


673 
	$dhd_wlfc_h™gî_gë_‰ì_¶Ÿ
(* 
h™gî
)

675 
uöt32
 
i
;

676 
wlfc_h™gî_t
* 
h
 = (wlfc_h™gî_t*)
h™gî
;

678 i‡(
h
) {

679 
i
 = (
h
->
¶Ÿ_pos
 + 1); i != h->slot_pos;) {

680 i‡(
h
->
ôems
[
i
].
°©e
 =
WLFC_HANGER_ITEM_STATE_FREE
) {

681 
h
->
¶Ÿ_pos
 = 
i
;

682  (
uöt16
)
i
;

684 (
i
 =
h
->
max_ôems
)? i = 0 : i++;

686 
h
->
Áûed_¶Ÿföd
++;

688  
WLFC_HANGER_MAXITEMS
;

689 
	}
}

692 
	$dhd_wlfc_h™gî_gë_gíbô
(* 
h™gî
, * 
pkt
, 
uöt32
 
¶Ÿ_id
, * 
gí
)

694 
rc
 = 
BCME_OK
;

695 
wlfc_h™gî_t
* 
h
 = (wlfc_h™gî_t*)
h™gî
;

697 *
gí
 = 0xff;

700 i‡(
¶Ÿ_id
 =
WLFC_HANGER_MAXITEMS
)

701  
BCME_NOTFOUND
;

703 i‡(
h
) {

704 i‡((
h
->
ôems
[
¶Ÿ_id
].
°©e
 =
WLFC_HANGER_ITEM_STATE_INUSE
) ||

705 (
h
->
ôems
[
¶Ÿ_id
].
°©e
 =
WLFC_HANGER_ITEM_STATE_INUSE_SUPPRESSED
)) {

706 *
gí
 = 
h
->
ôems
[
¶Ÿ_id
].gen;

709 
rc
 = 
BCME_NOTFOUND
;

713 
rc
 = 
BCME_BADARG
;

714  
rc
;

715 
	}
}

718 
	$dhd_wlfc_h™gî_pushpkt
(* 
h™gî
, * 
pkt
, 
uöt32
 
¶Ÿ_id
)

720 
rc
 = 
BCME_OK
;

721 
wlfc_h™gî_t
* 
h
 = (wlfc_h™gî_t*)
h™gî
;

723 i‡(
h
 && (
¶Ÿ_id
 < 
WLFC_HANGER_MAXITEMS
)) {

724 i‡(
h
->
ôems
[
¶Ÿ_id
].
°©e
 =
WLFC_HANGER_ITEM_STATE_FREE
) {

725 
h
->
ôems
[
¶Ÿ_id
].
°©e
 = 
WLFC_HANGER_ITEM_STATE_INUSE
;

726 
h
->
ôems
[
¶Ÿ_id
].
pkt
 =Ökt;

727 
h
->
ôems
[
¶Ÿ_id
].
idítifõr
 = slot_id;

728 
h
->
pushed
++;

731 
h
->
Áûed_to_push
++;

732 
rc
 = 
BCME_NOTFOUND
;

736 
rc
 = 
BCME_BADARG
;

737  
rc
;

738 
	}
}

741 
	$dhd_wlfc_h™gî_p›pkt
(* 
h™gî
, 
uöt32
 
¶Ÿ_id
, ** 
pktout
, 
ªmove_‰om_h™gî
)

743 
rc
 = 
BCME_OK
;

744 
wlfc_h™gî_t
* 
h
 = (wlfc_h™gî_t*)
h™gî
;

747 i‡(
¶Ÿ_id
 =
WLFC_HANGER_MAXITEMS
)

748  
BCME_NOTFOUND
;

750 i‡(
h
) {

751 i‡(
h
->
ôems
[
¶Ÿ_id
].
°©e
 !
WLFC_HANGER_ITEM_STATE_FREE
) {

752 *
pktout
 = 
h
->
ôems
[
¶Ÿ_id
].
pkt
;

753 i‡(
ªmove_‰om_h™gî
) {

754 
h
->
ôems
[
¶Ÿ_id
].
°©e
 =

755 
WLFC_HANGER_ITEM_STATE_FREE
;

756 
h
->
ôems
[
¶Ÿ_id
].
pkt
 = 
NULL
;

757 
h
->
ôems
[
¶Ÿ_id
].
idítifõr
 = 0;

758 
h
->
ôems
[
¶Ÿ_id
].
gí
 = 0xff;

759 
h
->
p›≥d
++;

763 
h
->
Áûed_to_p›
++;

764 
rc
 = 
BCME_NOTFOUND
;

768 
rc
 = 
BCME_BADARG
;

769  
rc
;

770 
	}
}

773 
	$dhd_wlfc_h™gî_m¨k_suµªs£d
(* 
h™gî
, 
uöt32
 
¶Ÿ_id
, 
uöt8
 
gí
)

775 
rc
 = 
BCME_OK
;

776 
wlfc_h™gî_t
* 
h
 = (wlfc_h™gî_t*)
h™gî
;

779 i‡(
¶Ÿ_id
 =
WLFC_HANGER_MAXITEMS
)

780  
BCME_NOTFOUND
;

781 i‡(
h
) {

782 
h
->
ôems
[
¶Ÿ_id
].
gí
 = gen;

783 i‡(
h
->
ôems
[
¶Ÿ_id
].
°©e
 =
WLFC_HANGER_ITEM_STATE_INUSE
) {

784 
h
->
ôems
[
¶Ÿ_id
].
°©e
 = 
WLFC_HANGER_ITEM_STATE_INUSE_SUPPRESSED
;

787 
rc
 = 
BCME_BADARG
;

790 
rc
 = 
BCME_BADARG
;

792  
rc
;

793 
	}
}

796 
	$_dhd_wlfc_pushhódî
(
©ho°_wl_°©us_öfo_t
* 
˘x
, * 
p
, 
boﬁ
 
tim_sig«l
,

797 
uöt8
 
tim_bmp
, uöt8 
mac_h™dÀ
, 
uöt32
 
htodèg
)

799 
uöt32
 
wl_pktöfo
 = 0;

800 
uöt8
* 
wlh
;

801 
uöt8
 
d©aOff£t
;

802 
uöt8
 
fûÀrs
;

803 
uöt8
 
tim_sig«l_Àn
 = 0;

805 
bdc_hódî
 *
h
;

807 i‡(
tim_sig«l
) {

808 
tim_sig«l_Àn
 = 1 + 1 + 
WLFC_CTL_VALUE_LEN_PENDING_TRAFFIC_BMP
;

812 
d©aOff£t
 = 
WLFC_CTL_VALUE_LEN_PKTTAG
 + 2 + 
tim_sig«l_Àn
;

813 
fûÀrs
 = 
	`ROUNDUP
(
d©aOff£t
, 4) - dataOffset;

814 
d©aOff£t
 +
fûÀrs
;

816 
	`PKTPUSH
(
˘x
->
osh
, 
p
, 
d©aOff£t
);

817 
wlh
 = (
uöt8
*Ë
	`PKTDATA
(
˘x
->
osh
, 
p
);

819 
wl_pktöfo
 = 
	`htﬁ32
(
htodèg
);

821 
wlh
[0] = 
WLFC_CTL_TYPE_PKTTAG
;

822 
wlh
[1] = 
WLFC_CTL_VALUE_LEN_PKTTAG
;

823 
	`mem˝y
(&
wlh
[2], &
wl_pktöfo
, (
uöt32
));

825 i‡(
tim_sig«l_Àn
) {

826 
wlh
[
d©aOff£t
 - 
fûÀrs
 - 
tim_sig«l_Àn
 ] =

827 
WLFC_CTL_TYPE_PENDING_TRAFFIC_BMP
;

828 
wlh
[
d©aOff£t
 - 
fûÀrs
 - 
tim_sig«l_Àn
 + 1] =

829 
WLFC_CTL_VALUE_LEN_PENDING_TRAFFIC_BMP
;

830 
wlh
[
d©aOff£t
 - 
fûÀrs
 - 
tim_sig«l_Àn
 + 2] = 
mac_h™dÀ
;

831 
wlh
[
d©aOff£t
 - 
fûÀrs
 - 
tim_sig«l_Àn
 + 3] = 
tim_bmp
;

833 i‡(
fûÀrs
)

834 
	`mem£t
(&
wlh
[
d©aOff£t
 - 
fûÀrs
], 
WLFC_CTL_TYPE_FILLER
, fillers);

836 
	`PKTPUSH
(
˘x
->
osh
, 
p
, 
BDC_HEADER_LEN
);

837 
h
 = (
bdc_hódî
 *)
	`PKTDATA
(
˘x
->
osh
, 
p
);

838 
h
->
Êags
 = (
BDC_PROTO_VER
 << 
BDC_FLAG_VER_SHIFT
);

839 i‡(
	`PKTSUMNEEDED
(
p
))

840 
h
->
Êags
 |
BDC_FLAG_SUM_NEEDED
;

843 
h
->
¥i‹ôy
 = (
	`PKTPRIO
(
p
Ë& 
BDC_PRIORITY_MASK
);

844 
h
->
Êags2
 = 0;

845 
h
->
d©aOff£t
 = dataOffset >> 2;

846 
	`BDC_SET_IF_IDX
(
h
, 
	`DHD_PKTTAG_IF
(
	`PKTTAG
(
p
)));

847  
BCME_OK
;

848 
	}
}

851 
	$_dhd_wlfc_puŒhódî
(
©ho°_wl_°©us_öfo_t
* 
˘x
, * 
pktbuf
)

853 
bdc_hódî
 *
h
;

855 i‡(
	`PKTLEN
(
˘x
->
osh
, 
pktbuf
Ë< 
BDC_HEADER_LEN
) {

856 
	`WLFC_DBGMESG
(("%s:Ñx d©®toÿsh‹à(%d < %d)\n", 
__FUNCTION__
,

857 
	`PKTLEN
(
˘x
->
osh
, 
pktbuf
), 
BDC_HEADER_LEN
));

858  
BCME_ERROR
;

860 
h
 = (
bdc_hódî
 *)
	`PKTDATA
(
˘x
->
osh
, 
pktbuf
);

863 
	`PKTPULL
(
˘x
->
osh
, 
pktbuf
, 
BDC_HEADER_LEN
);

865 i‡(
	`PKTLEN
(
˘x
->
osh
, 
pktbuf
Ë< (
h
->
d©aOff£t
 << 2)) {

866 
	`WLFC_DBGMESG
(("%s:Ñx d©®toÿsh‹à(%d < %d)\n", 
__FUNCTION__
,

867 
	`PKTLEN
(
˘x
->
osh
, 
pktbuf
), (
h
->
d©aOff£t
 << 2)));

868  
BCME_ERROR
;

871 
	`PKTPULL
(
˘x
->
osh
, 
pktbuf
, (
h
->
d©aOff£t
 << 2));

872  
BCME_OK
;

873 
	}
}

875 
wlfc_mac_des¸ùt‹_t
*

876 
	$_dhd_wlfc_föd_èbÀ_íåy
(
©ho°_wl_°©us_öfo_t
* 
˘x
, * 
p
)

878 
i
;

879 
wlfc_mac_des¸ùt‹_t
* 
èbÀ
 = 
˘x
->
de°ö©i⁄_íåõs
.
nodes
;

880 
uöt8
 
ifid
 = 
	`DHD_PKTTAG_IF
(
	`PKTTAG
(
p
));

881 
uöt8
* 
d°n
 = 
	`DHD_PKTTAG_DSTN
(
	`PKTTAG
(
p
));

883 i‡(((
˘x
->
de°ö©i⁄_íåõs
.
öãrÁ˚s
[
ifid
].
i·y≥
 =
WLC_E_IF_ROLE_STA
) ||

884 
	`ETHER_ISMULTI
(
d°n
) ||

885 (
˘x
->
de°ö©i⁄_íåõs
.
öãrÁ˚s
[
ifid
].
i·y≥
 =
WLC_E_IF_ROLE_P2P_CLIENT
)) &&

886 (
˘x
->
de°ö©i⁄_íåõs
.
öãrÁ˚s
[
ifid
].
occupõd
)) {

887  &
˘x
->
de°ö©i⁄_íåõs
.
öãrÁ˚s
[
ifid
];

890 
i
 = 0; i < 
WLFC_MAC_DESC_TABLE_SIZE
; i++) {

891 i‡(
èbÀ
[
i
].
occupõd
) {

892 i‡(
èbÀ
[
i
].
öãrÁ˚_id
 =
ifid
) {

893 i‡(!
	`memcmp
(
èbÀ
[
i
].
ó
, 
d°n
, 
ETHER_ADDR_LEN
))

894  &
èbÀ
[
i
];

898  &
˘x
->
de°ö©i⁄_íåõs
.
Ÿhî
;

899 
	}
}

902 
	$_dhd_wlfc_rﬁlback_∑ckë_toq
(
©ho°_wl_°©us_öfo_t
* 
˘x
,

903 * 
p
, 
ewlfc_∑ckë_°©e_t
 
pkt_ty≥
, 
uöt32
 
h¶Ÿ
)

915 
wlfc_mac_des¸ùt‹_t
* 
íåy
;

916 * 
pktout
;

917 
rc
 = 
BCME_OK
;

918 
¥ec
;

920 
íåy
 = 
	`_dhd_wlfc_föd_èbÀ_íåy
(
˘x
, 
p
);

921 
¥ec
 = 
	`DHD_PKTTAG_FIFO
(
	`PKTTAG
(
p
));

922 i‡(
íåy
 !
NULL
) {

923 i‡(
pkt_ty≥
 =
eWLFC_PKTTYPE_SUPPRESSED
) {

925 i‡(
	`WLFC_PKTQ_PENQ_HEAD
(&
íåy
->
psq
, ((
¥ec
 << 1Ë+ 1), 
p
Ë=
NULL
) {

926 
	`WLFC_DBGMESG
(("Eº‹: %s():%d\n", 
__FUNCTION__
, 
__LINE__
));

927 
rc
 = 
BCME_ERROR
;

932 
rc
 = 
	`_dhd_wlfc_puŒhódî
(
˘x
, 
p
);

933 i‡(
rc
 !
BCME_OK
) {

934 
	`WLFC_DBGMESG
(("Eº‹: %s():%d\n", 
__FUNCTION__
, 
__LINE__
));

936 
	`dhd_wlfc_h™gî_p›pkt
(
˘x
->
h™gî
, 
h¶Ÿ
, &
pktout
, 1);

937 
	`PKTFREE
(
˘x
->
osh
, 
p
, 
TRUE
);

938 
rc
 = 
BCME_ERROR
;

939  
rc
;

942 i‡(
pkt_ty≥
 =
eWLFC_PKTTYPE_DELAYED
) {

944 i‡(
	`WLFC_PKTQ_PENQ_HEAD
(&
íåy
->
psq
, (
¥ec
 << 1), 
p
Ë=
NULL
) {

945 
	`WLFC_DBGMESG
(("Eº‹: %s():%d\n", 
__FUNCTION__
, 
__LINE__
));

946 
rc
 = 
BCME_ERROR
;

951 i‡(
	`WLFC_PKTQ_PENQ_HEAD
(&
˘x
->
SENDQ
, 
¥ec
, 
p
Ë=
NULL
) {

952 
	`WLFC_DBGMESG
(("Eº‹: %s():%d\n", 
__FUNCTION__
, 
__LINE__
));

953 
rc
 = 
BCME_ERROR
;

957 
	`dhd_wlfc_h™gî_p›pkt
(
˘x
->
h™gî
, 
h¶Ÿ
, &
pktout
, 1);

960 
	`WLFC_DECR_SEQCOUNT
(
íåy
, 
¥ec
);

966 i‡(!
	`DHD_PKTTAG_CREDITCHECK
(
	`PKTTAG
(
p
))) {

967 
íåy
->
ªque°ed_¸edô
++;

971 
	`WLFC_DBGMESG
(("Eº‹: %s():%d\n", 
__FUNCTION__
, 
__LINE__
));

972 
rc
 = 
BCME_ERROR
;

974 i‡(
rc
 !
BCME_OK
)

975 
˘x
->
°©s
.
rﬁlback_Áûed
++;

977 
˘x
->
°©s
.
rﬁlback
++;

979  
rc
;

980 
	}
}

983 
	$_dhd_wlfc_Êow_c⁄åﬁ_check
(
©ho°_wl_°©us_öfo_t
* 
˘x
, 
pktq
* 
pq
, 
uöt8
 
if_id
)

985 i‡((
pq
->
Àn
 <
WLFC_FLOWCONTROL_LOWATER
Ë&& (
˘x
->
ho°if_Êow_°©e
[
if_id
] =
ON
)) {

987 
˘x
->
ho°if_Êow_°©e
[
if_id
] = 
OFF
;

992 
	`WLFC_DBGMESG
(("F"));

993 
	`dhd_txÊowc⁄åﬁ
(
˘x
->
dhdp
, 
if_id
, 
OFF
);

994 
˘x
->
toggÀ_ho°_if
 = 0;

996 i‡((
pq
->
Àn
 >
WLFC_FLOWCONTROL_HIWATER
Ë&& (
˘x
->
ho°if_Êow_°©e
[
if_id
] =
OFF
)) {

998 
˘x
->
ho°if_Êow_°©e
[
if_id
] = 
ON
;

1003 
	`WLFC_DBGMESG
(("N"));

1004 
	`dhd_txÊowc⁄åﬁ
(
˘x
->
dhdp
, 
if_id
, 
ON
);

1005 
˘x
->
ho°_ifidx
 = 
if_id
;

1006 
˘x
->
toggÀ_ho°_if
 = 1;

1009 
	}
}

1012 
	$_dhd_wlfc_£nd_sig«l⁄ly_∑ckë
(
©ho°_wl_°©us_öfo_t
* 
˘x
, 
wlfc_mac_des¸ùt‹_t
* 
íåy
,

1013 
uöt8
 
è_bmp
)

1015 
rc
 = 
BCME_OK
;

1016 * 
p
 = 
NULL
;

1017 
dummyÀn
 = ((
dhd_pub_t
 *)
˘x
->
dhdp
)->
hdæí
+ 12;

1020 
p
 = 
	`PKTGET
(
˘x
->
osh
, 
dummyÀn
, 
TRUE
);

1021 i‡(
p
) {

1022 
	`PKTPULL
(
˘x
->
osh
, 
p
, 
dummyÀn
);

1023 
	`DHD_PKTTAG_SET_H2DTAG
(
	`PKTTAG
(
p
), 0);

1024 
	`_dhd_wlfc_pushhódî
(
˘x
, 
p
, 
TRUE
, 
è_bmp
, 
íåy
->
mac_h™dÀ
, 0);

1025 
	`DHD_PKTTAG_SETSIGNALONLY
(
	`PKTTAG
(
p
), 1);

1026 #ifde‡
PROP_TXSTATUS_DEBUG


1027 
˘x
->
°©s
.
sig«l_⁄ly_pkts_£¡
++;

1029 
rc
 = 
	`dhd_bus_txd©a
(((
dhd_pub_t
 *)
˘x
->
dhdp
)->
bus
, 
p
);

1030 i‡(
rc
 !
BCME_OK
) {

1031 
	`PKTFREE
(
˘x
->
osh
, 
p
, 
TRUE
);

1035 
	`DHD_ERROR
(("%s: couldn'tállocateÇew %d-byteÖacket\n",

1036 
__FUNCTION__
, 
dummyÀn
));

1037 
rc
 = 
BCME_NOMEM
;

1039  
rc
;

1040 
	}
}

1043 
boﬁ


1044 
	$_dhd_wlfc_åaffic_≥ndög_check
(
©ho°_wl_°©us_öfo_t
* 
˘x
, 
wlfc_mac_des¸ùt‹_t
* 
íåy
,

1045 
¥ec
)

1047 
boﬁ
 
rc
 = 
FALSE
;

1049 i‡(
íåy
->
°©e
 =
WLFC_STATE_CLOSE
) {

1050 i‡((
	`pktq_∂í
(&
íåy
->
psq
, (
¥ec
 << 1)) == 0) &&

1051 (
	`pktq_∂í
(&
íåy
->
psq
, ((
¥ec
 << 1) + 1)) == 0)) {

1053 i‡(
íåy
->
åaffic_≥ndög_bmp
 & 
	`NBITVAL
(
¥ec
)) {

1054 
rc
 = 
TRUE
;

1055 
íåy
->
åaffic_≥ndög_bmp
 =

1056 
íåy
->
åaffic_≥ndög_bmp
 & ~ 
	`NBITVAL
(
¥ec
);

1060 i‡(!(
íåy
->
åaffic_≥ndög_bmp
 & 
	`NBITVAL
(
¥ec
))) {

1061 
rc
 = 
TRUE
;

1062 
íåy
->
åaffic_≥ndög_bmp
 =

1063 
íåy
->
åaffic_≥ndög_bmp
 | 
	`NBITVAL
(
¥ec
);

1067 i‡(
rc
) {

1069 i‡(
íåy
->
åaffic_œ°ªp‹ãd_bmp
 !íåy->
åaffic_≥ndög_bmp
) {

1070 
íåy
->
£nd_tim_sig«l
 = 1;

1071 
	`_dhd_wlfc_£nd_sig«l⁄ly_∑ckë
(
˘x
, 
íåy
,É¡ry->
åaffic_≥ndög_bmp
);

1072 
íåy
->
åaffic_œ°ªp‹ãd_bmp
 =É¡ry->
åaffic_≥ndög_bmp
;

1073 
íåy
->
£nd_tim_sig«l
 = 0;

1076 
rc
 = 
FALSE
;

1079  
rc
;

1080 
	}
}

1083 
	$_dhd_wlfc_íque_suµªs£d
(
©ho°_wl_°©us_öfo_t
* 
˘x
, 
¥ec
, * 
p
)

1085 
wlfc_mac_des¸ùt‹_t
* 
íåy
;

1087 
íåy
 = 
	`_dhd_wlfc_föd_èbÀ_íåy
(
˘x
, 
p
);

1088 i‡(
íåy
 =
NULL
) {

1089 
	`WLFC_DBGMESG
(("Eº‹: %s():%d\n", 
__FUNCTION__
, 
__LINE__
));

1090  
BCME_NOTFOUND
;

1097 i‡(
	`WLFC_PKTQ_PENQ
(&
íåy
->
psq
, ((
¥ec
 << 1Ë+ 1), 
p
Ë=
NULL
) {

1098 
˘x
->
°©s
.
dñayq_fuŒ_îr‹
++;

1100 
	`WLFC_DBGMESG
(("s"));

1101  
BCME_ERROR
;

1104 
	`_dhd_wlfc_åaffic_≥ndög_check
(
˘x
, 
íåy
, 
¥ec
);

1105 
	`_dhd_wlfc_Êow_c⁄åﬁ_check
(
˘x
, &
íåy
->
psq
, 
	`DHD_PKTTAG_IF
(
	`PKTTAG
(
p
)));

1106  
BCME_OK
;

1107 
	}
}

1110 
	$_dhd_wlfc_¥ëx_pkçro˚ss
(
©ho°_wl_°©us_öfo_t
* 
˘x
,

1111 
wlfc_mac_des¸ùt‹_t
* 
íåy
, * 
p
, 
hódî_√eded
, 
uöt32
* 
¶Ÿ
)

1113 
rc
 = 
BCME_OK
;

1114 
h¶Ÿ
 = 
WLFC_HANGER_MAXITEMS
;

1115 
boﬁ
 
£nd_tim_upd©e
 = 
FALSE
;

1116 
uöt32
 
htod
 = 0;

1117 
uöt8
 
‰ì_˘r
;

1119 *
¶Ÿ
 = 
h¶Ÿ
;

1121 i‡(
íåy
 =
NULL
) {

1122 
íåy
 = 
	`_dhd_wlfc_föd_èbÀ_íåy
(
˘x
, 
p
);

1125 i‡(
íåy
 =
NULL
) {

1126 
	`WLFC_DBGMESG
(("Eº‹: %s():%d\n", 
__FUNCTION__
, 
__LINE__
));

1127  
BCME_ERROR
;

1129 i‡(
íåy
->
£nd_tim_sig«l
) {

1130 
£nd_tim_upd©e
 = 
TRUE
;

1131 
íåy
->
£nd_tim_sig«l
 = 0;

1132 
íåy
->
åaffic_œ°ªp‹ãd_bmp
 =É¡ry->
åaffic_≥ndög_bmp
;

1134 i‡(
hódî_√eded
) {

1135 
h¶Ÿ
 = 
	`dhd_wlfc_h™gî_gë_‰ì_¶Ÿ
(
˘x
->
h™gî
);

1136 
‰ì_˘r
 = 
	`WLFC_SEQCOUNT
(
íåy
, 
	`DHD_PKTTAG_FIFO
(
	`PKTTAG
(
p
)));

1137 
	`DHD_PKTTAG_SET_H2DTAG
(
	`PKTTAG
(
p
), 
htod
);

1138 
	`WLFC_PKTFLAG_SET_GENERATION
(
htod
, 
íåy
->
gíî©i⁄
);

1139 
íåy
->
å™sô_cou¡
++;

1142 
h¶Ÿ
 = 
	`WLFC_PKTID_HSLOT_GET
(
	`DHD_PKTTAG_H2DTAG
(
	`PKTTAG
(
p
)));

1143 
‰ì_˘r
 = 
	`WLFC_PKTID_FREERUNCTR_GET
(
	`DHD_PKTTAG_H2DTAG
(
	`PKTTAG
(
p
)));

1145 
	`WLFC_PKTID_HSLOT_SET
(
htod
, 
h¶Ÿ
);

1146 
	`WLFC_PKTID_FREERUNCTR_SET
(
htod
, 
‰ì_˘r
);

1147 
	`DHD_PKTTAG_SETPKTDIR
(
	`PKTTAG
(
p
), 1);

1148 
	`WL_TXSTATUS_SET_FLAGS
(
htod
, 
WLFC_PKTFLAG_PKTFROMHOST
);

1149 
	`WL_TXSTATUS_SET_FIFO
(
htod
, 
	`DHD_PKTTAG_FIFO
(
	`PKTTAG
(
p
)));

1151 i‡(!
	`DHD_PKTTAG_CREDITCHECK
(
	`PKTTAG
(
p
))) {

1156 
	`WLFC_PKTFLAG_SET_PKTREQUESTED
(
htod
);

1159 
	`WLFC_PKTFLAG_CLR_PKTREQUESTED
(
htod
);

1161 i‡(
hódî_√eded
) {

1162 
rc
 = 
	`_dhd_wlfc_pushhódî
(
˘x
, 
p
, 
£nd_tim_upd©e
,

1163 
íåy
->
åaffic_œ°ªp‹ãd_bmp
,É¡ry->
mac_h™dÀ
, 
htod
);

1164 i‡(
rc
 =
BCME_OK
) {

1165 
	`DHD_PKTTAG_SET_H2DTAG
(
	`PKTTAG
(
p
), 
htod
);

1171 
rc
 = 
	`dhd_wlfc_h™gî_pushpkt
(
˘x
->
h™gî
, 
p
, 
h¶Ÿ
);

1172 i‡(
rc
 =
BCME_OK
) {

1174 
	`WLFC_INCR_SEQCOUNT
(
íåy
, 
	`DHD_PKTTAG_FIFO
(
	`PKTTAG
(
p
)));

1175 #ifde‡
PROP_TXSTATUS_DEBUG


1176 ((
wlfc_h™gî_t
*)(
˘x
->
h™gî
))->
ôems
[
h¶Ÿ
].
push_time
 =

1177 
	`OSL_SYSUPTIME
();

1181 
	`WLFC_DBGMESG
(("%s() hanger_pushpkt() failed,Ñc: %d\n",

1182 
__FUNCTION__
, 
rc
));

1187 
gí
;

1190 
rc
 = 
	`_dhd_wlfc_puŒhódî
(
˘x
, 
p
);

1191 i‡(
rc
 =
BCME_OK
) {

1192 
h¶Ÿ
 = 
	`WLFC_PKTID_HSLOT_GET
(
	`DHD_PKTTAG_H2DTAG
(
	`PKTTAG
(
p
)));

1193 
	`dhd_wlfc_h™gî_gë_gíbô
(
˘x
->
h™gî
, 
p
, 
h¶Ÿ
, &
gí
);

1195 
	`WLFC_PKTFLAG_SET_GENERATION
(
htod
, 
gí
);

1196 
‰ì_˘r
 = 
	`WLFC_PKTID_FREERUNCTR_GET
(
	`DHD_PKTTAG_H2DTAG
(
	`PKTTAG
(
p
)));

1198 
	`_dhd_wlfc_pushhódî
(
˘x
, 
p
, 
£nd_tim_upd©e
,

1199 
íåy
->
åaffic_œ°ªp‹ãd_bmp
,É¡ry->
mac_h™dÀ
, 
htod
);

1202 *
¶Ÿ
 = 
h¶Ÿ
;

1203  
rc
;

1204 
	}
}

1207 
	$_dhd_wlfc_is_de°ö©i⁄_˛o£d
(
©ho°_wl_°©us_öfo_t
* 
˘x
,

1208 
wlfc_mac_des¸ùt‹_t
* 
íåy
, 
¥ec
)

1210 i‡(
˘x
->
de°ö©i⁄_íåõs
.
öãrÁ˚s
[
íåy
->
öãrÁ˚_id
].
i·y≥
 ==

1211 
WLC_E_IF_ROLE_P2P_GO
) {

1218 i‡((
íåy
->
°©e
 =
WLFC_STATE_CLOSE
Ë&& (íåy->
ªque°ed_¸edô
 == 0) &&

1219 (
íåy
->
ªque°ed_∑ckë
 == 0))

1223 i‡(((
íåy
->
°©e
 =
WLFC_STATE_CLOSE
Ë&& (íåy->
ªque°ed_¸edô
 == 0) &&

1224 (
íåy
->
ªque°ed_∑ckë
 == 0)) ||

1225 (!(
íåy
->
ac_bôm≠
 & (1 << 
¥ec
))))

1229 
	}
}

1232 
	$_dhd_wlfc_deque_dñayedq
(
©ho°_wl_°©us_öfo_t
* 
˘x
,

1233 
¥ec
, 
uöt8
* 
ac_¸edô_•ít
, uöt8* 
√eds_hdr
, 
wlfc_mac_des¸ùt‹_t
** 
íåy_out
)

1235 
wlfc_mac_des¸ùt‹_t
* 
íåy
;

1236 
wlfc_mac_des¸ùt‹_t
* 
èbÀ
;

1237 
uöt8
 
tokí_pos
;

1238 
tŸÆ_íåõs
;

1239 * 
p
 = 
NULL
;

1240 
pout
;

1241 
i
;

1243 *
íåy_out
 = 
NULL
;

1244 
tokí_pos
 = 
˘x
->tokí_pos[
¥ec
];

1246 *
ac_¸edô_•ít
 = 1;

1247 *
√eds_hdr
 = 1;

1250 
èbÀ
 = (
wlfc_mac_des¸ùt‹_t
*)&
˘x
->
de°ö©i⁄_íåõs
;

1251 
tŸÆ_íåõs
 = (
˘x
->
de°ö©i⁄_íåõs
)/(
wlfc_mac_des¸ùt‹_t
);

1253 
i
 = 0; i < 
tŸÆ_íåõs
; i++) {

1254 
íåy
 = &
èbÀ
[(
tokí_pos
 + 
i
Ë% 
tŸÆ_íåõs
];

1255 i‡(
íåy
->
occupõd
) {

1256 i‡(!
	`_dhd_wlfc_is_de°ö©i⁄_˛o£d
(
˘x
, 
íåy
, 
¥ec
)) {

1257 
p
 = 
	`pktq_mdeq
(&
íåy
->
psq
,

1261 
	`NBITVAL
((
¥ec
 << 1Ë+ 1), &
pout
);

1262 *
√eds_hdr
 = 0;

1264 i‡(
p
 =
NULL
) {

1265 i‡(
íåy
->
suµªs£d
 =
TRUE
) {

1266 i‡((
íåy
->
suµr_å™sô_cou¡
 <=

1267 
íåy
->
suµªss_cou¡
)) {

1268 
íåy
->
suµªs£d
 = 
FALSE
;

1270  
NULL
;

1274 
p
 = 
	`pktq_mdeq
(&
íåy
->
psq
,

1275 
	`NBITVAL
((
¥ec
 << 1)),

1276 &
pout
);

1277 *
√eds_hdr
 = 1;

1280 i‡(
p
 !
NULL
) {

1282 i‡(
íåy
->
ªque°ed_¸edô
 > 0) {

1283 
íåy
->
ªque°ed_¸edô
--;

1284 #ifde‡
PROP_TXSTATUS_DEBUG


1285 
íåy
->
d°n¸edô_£¡_∑ckës
++;

1295 i‡(
íåy
->
°©e
 =
WLFC_STATE_CLOSE
)

1296 *
ac_¸edô_•ít
 = 0;

1298 i‡(
íåy
->
ªque°ed_∑ckë
 > 0) {

1299 
íåy
->
ªque°ed_∑ckë
--;

1300 
	`DHD_PKTTAG_SETONETIMEPKTRQST
(
	`PKTTAG
(
p
));

1301 i‡(
íåy
->
°©e
 =
WLFC_STATE_CLOSE
)

1302 *
ac_¸edô_•ít
 = 0;

1305 
˘x
->
tokí_pos
[
¥ec
] =

1306 (
tokí_pos
 + 
i
 + 1Ë% 
tŸÆ_íåõs
;

1307 *
íåy_out
 = 
íåy
;

1308 
	`_dhd_wlfc_Êow_c⁄åﬁ_check
(
˘x
, &
íåy
->
psq
,

1309 
	`DHD_PKTTAG_IF
(
	`PKTTAG
(
p
)));

1314 
	`_dhd_wlfc_åaffic_≥ndög_check
(
˘x
, 
íåy
, 
¥ec
);

1315  
p
;

1320  
NULL
;

1321 
	}
}

1324 
	$_dhd_wlfc_deque_£ndq
(
©ho°_wl_°©us_öfo_t
* 
˘x
, 
¥ec
)

1326 
wlfc_mac_des¸ùt‹_t
* 
íåy
;

1327 * 
p
;

1330 
p
 = 
	`pktq_pdeq
(&
˘x
->
SENDQ
, 
¥ec
);

1331 i‡(
p
 !
NULL
) {

1332 i‡(
	`ETHER_ISMULTI
(
	`DHD_PKTTAG_DSTN
(
	`PKTTAG
(
p
))))

1334  
p
;

1336 
íåy
 = 
	`_dhd_wlfc_föd_èbÀ_íåy
(
˘x
, 
p
);

1338 i‡(
íåy
 =
NULL
) {

1339 
	`WLFC_DBGMESG
(("Eº‹: %s():%d\n", 
__FUNCTION__
, 
__LINE__
));

1340  
p
;

1343 (
p
 !
NULL
)) {

1349 i‡(
	`WLFC_PKTQ_PENQ
(&
íåy
->
psq
, (
¥ec
 << 1), 
p
Ë=
NULL
) {

1350 
	`WLFC_DBGMESG
(("D"));

1352 
	`PKTFREE
(
˘x
->
osh
, 
p
, 
TRUE
);

1353 
˘x
->
°©s
.
dñayq_fuŒ_îr‹
++;

1359 
	`_dhd_wlfc_åaffic_≥ndög_check
(
˘x
, 
íåy
, 
¥ec
);

1361 
p
 = 
	`pktq_pdeq
(&
˘x
->
SENDQ
, 
¥ec
);

1362 i‡(
p
 =
NULL
)

1365 
íåy
 = 
	`_dhd_wlfc_föd_èbÀ_íåy
(
˘x
, 
p
);

1367 i‡((
íåy
 =
NULL
Ë|| (
	`ETHER_ISMULTI
(
	`DHD_PKTTAG_DSTN
(
	`PKTTAG
(
p
))))) {

1368  
p
;

1372  
p
;

1373 
	}
}

1376 
	$_dhd_wlfc_mac_íåy_upd©e
(
©ho°_wl_°©us_öfo_t
* 
˘x
, 
wlfc_mac_des¸ùt‹_t
* 
íåy
,

1377 
ewlfc_mac_íåy_a˘i⁄_t
 
a˘i⁄
, 
uöt8
 
ifid
, uöt8 
i·y≥
, uöt8* 
ó
)

1379 
rc
 = 
BCME_OK
;

1381 i‡(
a˘i⁄
 =
eWLFC_MAC_ENTRY_ACTION_ADD
) {

1382 
íåy
->
occupõd
 = 1;

1383 
íåy
->
°©e
 = 
WLFC_STATE_OPEN
;

1384 
íåy
->
ªque°ed_¸edô
 = 0;

1385 
íåy
->
öãrÁ˚_id
 = 
ifid
;

1386 
íåy
->
i·y≥
 = iftype;

1387 
íåy
->
ac_bôm≠
 = 0xff;

1389 i‡(
ó
 !
NULL
)

1390 
	`mem˝y
(&
íåy
->
ó
[0],Éa, 
ETHER_ADDR_LEN
);

1391 
	`pktq_öô
(&
íåy
->
psq
, 
WLFC_PSQ_PREC_COUNT
, 
WLFC_PSQ_LEN
);

1393 i‡(
a˘i⁄
 =
eWLFC_MAC_ENTRY_ACTION_UPDATE
) {

1394 
íåy
->
occupõd
 = 1;

1395 
íåy
->
°©e
 = 
WLFC_STATE_OPEN
;

1396 
íåy
->
ªque°ed_¸edô
 = 0;

1397 
íåy
->
öãrÁ˚_id
 = 
ifid
;

1398 
íåy
->
i·y≥
 = iftype;

1399 
íåy
->
ac_bôm≠
 = 0xff;

1401 i‡(
ó
 !
NULL
)

1402 
	`mem˝y
(&
íåy
->
ó
[0],Éa, 
ETHER_ADDR_LEN
);

1404 i‡(
a˘i⁄
 =
eWLFC_MAC_ENTRY_ACTION_DEL
) {

1405 
íåy
->
occupõd
 = 0;

1406 
íåy
->
°©e
 = 
WLFC_STATE_CLOSE
;

1407 
íåy
->
ªque°ed_¸edô
 = 0;

1412  
rc
;

1413 
	}
}

1416 
	$_dhd_wlfc_b‹row_¸edô
(
©ho°_wl_°©us_öfo_t
* 
˘x
, 
uöt8
 
avaûabÀ_¸edô_m≠
, 
b‹rowî_ac
)

1418 
Àndî_ac
;

1419 
rc
 = 
BCME_ERROR
;

1421 i‡(
˘x
 =
NULL
 || 
avaûabÀ_¸edô_m≠
 == 0) {

1422 
	`WLFC_DBGMESG
(("Eº‹: %s():%d\n", 
__FUNCTION__
, 
__LINE__
));

1423  
BCME_BADARG
;

1427 
Àndî_ac
 = 0;Üídî_a¯<
AC_COUNT
;Üender_ac++) {

1428 i‡((
avaûabÀ_¸edô_m≠
 && (1 << 
Àndî_ac
)) &&

1429 (
˘x
->
FIFO_¸edô
[
Àndî_ac
] > 0)) {

1430 
˘x
->
¸edôs_b‹rowed
[
b‹rowî_ac
][
Àndî_ac
]++;

1431 
˘x
->
FIFO_¸edô
[
Àndî_ac
]--;

1432 
rc
 = 
BCME_OK
;

1437  
rc
;

1438 
	}
}

1441 
	$dhd_wlfc_öãrÁ˚_íåy_upd©e
(* 
°©e
,

1442 
ewlfc_mac_íåy_a˘i⁄_t
 
a˘i⁄
, 
uöt8
 
ifid
, uöt8 
i·y≥
, uöt8* 
ó
)

1444 
©ho°_wl_°©us_öfo_t
* 
˘x
 = (©ho°_wl_°©us_öfo_t*)
°©e
;

1445 
wlfc_mac_des¸ùt‹_t
* 
íåy
;

1447 i‡(
ifid
 >
WLFC_MAX_IFNUM
)

1448  
BCME_BADARG
;

1450 
íåy
 = &
˘x
->
de°ö©i⁄_íåõs
.
öãrÁ˚s
[
ifid
];

1451  
	`_dhd_wlfc_mac_íåy_upd©e
(
˘x
, 
íåy
, 
a˘i⁄
, 
ifid
, 
i·y≥
, 
ó
);

1452 
	}
}

1455 
	$dhd_wlfc_FIFO¸edôm≠_upd©e
(* 
°©e
, 
uöt8
* 
¸edôs
)

1457 
©ho°_wl_°©us_öfo_t
* 
˘x
 = (©ho°_wl_°©us_öfo_t*)
°©e
;

1460 
˘x
->
FIFO_¸edô
[0] = 
¸edôs
[0];

1461 
˘x
->
FIFO_¸edô
[1] = 
¸edôs
[1];

1462 
˘x
->
FIFO_¸edô
[2] = 
¸edôs
[2];

1463 
˘x
->
FIFO_¸edô
[3] = 
¸edôs
[3];

1465 
˘x
->
FIFO_¸edô
[4] = 
¸edôs
[4];

1467 
˘x
->
FIFO_¸edô
[5] = 0;

1468  
BCME_OK
;

1469 
	}
}

1472 
	$dhd_wlfc_íque_£ndq
(* 
°©e
, 
¥ec
, * 
p
)

1474 
©ho°_wl_°©us_öfo_t
* 
˘x
 = (©ho°_wl_°©us_öfo_t*)
°©e
;

1476 i‡((
°©e
 =
NULL
) ||

1478 (
¥ec
 > 
AC_COUNT
) ||

1479 (
p
 =
NULL
)) {

1480 
	`WLFC_DBGMESG
(("Eº‹: %s():%d\n", 
__FUNCTION__
, 
__LINE__
));

1481  
BCME_BADARG
;

1483 i‡(
FALSE
 =
	`dhd_¥ec_íq
(
˘x
->
dhdp
, &˘x->
SENDQ
, 
p
, 
¥ec
)) {

1484 
˘x
->
°©s
.
£ndq_fuŒ_îr‹
++;

1489 
	`WLFC_HOST_FIFO_DROPPEDCTR_INC
(
˘x
, 
¥ec
);

1490 
	`WLFC_DBGMESG
(("Q"));

1491 
	`PKTFREE
(
˘x
->
osh
, 
p
, 
TRUE
);

1492  
BCME_ERROR
;

1494 
˘x
->
°©s
.
pktö
++;

1496  
BCME_OK
;

1497 
	}
}

1500 
	$_dhd_wlfc_h™dÀ_∑ckë_commô
(
©ho°_wl_°©us_öfo_t
* 
˘x
, 
ac
,

1501 
dhd_wlfc_commô_öfo_t
 *
commô_öfo
, 
f_commôpkt_t
 
fcommô
, * 
commô_˘x
)

1503 
uöt32
 
h¶Ÿ
;

1504 
rc
;

1519 
	`DHD_PKTTAG_SETCREDITCHECK
(
	`PKTTAG
(
commô_öfo
->
p
), commô_öfo->
ac_fifo_¸edô_•ít
);

1520 
rc
 = 
	`_dhd_wlfc_¥ëx_pkçro˚ss
(
˘x
, 
commô_öfo
->
mac_íåy
, commô_öfo->
p
,

1521 
commô_öfo
->
√eds_hdr
, &
h¶Ÿ
);

1523 i‡(
rc
 =
BCME_OK
)

1524 
rc
 = 
	`fcommô
(
commô_˘x
, 
commô_öfo
->
p
);

1526 
˘x
->
°©s
.
gíîic_îr‹
++;

1528 i‡(
rc
 =
BCME_OK
) {

1529 
˘x
->
°©s
.
pkt2bus
++;

1530 i‡(
commô_öfo
->
ac_fifo_¸edô_•ít
) {

1531 
˘x
->
°©s
.
£ndq_pkts
[
ac
]++;

1532 
	`WLFC_HOST_FIFO_CREDIT_INC_SENTCTRS
(
˘x
, 
ac
);

1534 } i‡(
rc
 =
BCME_NORESOURCE
)

1535 
rc
 = 
BCME_ERROR
;

1542 
rc
 = 
	`_dhd_wlfc_rﬁlback_∑ckë_toq
(
˘x
, 
commô_öfo
->
p
,

1543 (
commô_öfo
->
pkt_ty≥
), 
h¶Ÿ
);

1544 i‡(
rc
 !
BCME_OK
)

1545 
˘x
->
°©s
.
rﬁlback_Áûed
++;

1547 
rc
 = 
BCME_ERROR
;

1550  
rc
;

1551 
	}
}

1554 
	$dhd_wlfc_commô_∑ckës
(* 
°©e
, 
f_commôpkt_t
 
fcommô
, * 
commô_˘x
)

1556 
ac
;

1557 
¸edô
;

1558 
rc
;

1559 
dhd_wlfc_commô_öfo_t
 
commô_öfo
;

1560 
©ho°_wl_°©us_öfo_t
* 
˘x
 = (©ho°_wl_°©us_öfo_t*)
°©e
;

1561 
¸edô_cou¡
 = 0;

1562 
bus_ªåy_cou¡
 = 0;

1563 
uöt8
 
ac_avaûabÀ
 = 0;

1565 i‡((
°©e
 =
NULL
) ||

1566 (
fcommô
 =
NULL
)) {

1567 
	`WLFC_DBGMESG
(("Eº‹: %s():%d\n", 
__FUNCTION__
, 
__LINE__
));

1568  
BCME_BADARG
;

1571 
	`mem£t
(&
commô_öfo
, 0, (commit_info));

1586 
ac
 = 
AC_COUNT
;ác >= 0;ác--) {

1588 
öôül_¸edô_cou¡
 = 
˘x
->
FIFO_¸edô
[
ac
];

1591 
commô_öfo
.
√eds_hdr
 = 1;

1592 
commô_öfo
.
mac_íåy
 = 
NULL
;

1593 
commô_öfo
.
pkt_ty≥
 = 
eWLFC_PKTTYPE_NEW
;

1596 
commô_öfo
.
p
 = 
	`_dhd_wlfc_deque_£ndq
(
˘x
, 
ac
);

1597 i‡(
commô_öfo
.
p
 =
NULL
)

1599 i‡(
	`ETHER_ISMULTI
(
	`DHD_PKTTAG_DSTN
(
	`PKTTAG
(
commô_öfo
.
p
)))) {

1600 
	`ASSERT
(
ac
 =
AC_COUNT
);

1602 i‡(
˘x
->
FIFO_¸edô
[
ac
]) {

1603 
rc
 = 
	`_dhd_wlfc_h™dÀ_∑ckë_commô
(
˘x
, 
ac
, &
commô_öfo
,

1604 
fcommô
, 
commô_˘x
);

1607 i‡(
rc
 =
BCME_OK
) {

1608 i‡(
commô_öfo
.
ac_fifo_¸edô_•ít
) {

1609 (Ë
	`_dhd_wlfc_b‹row_¸edô
(
˘x
,

1610 
ac_avaûabÀ
, 
ac
);

1611 
¸edô_cou¡
--;

1614 
bus_ªåy_cou¡
++;

1615 i‡(
bus_ªåy_cou¡
 >
BUS_RETRIES
) {

1616 
	`DHD_ERROR
((" %s: busÉrror\n",

1617 
__FUNCTION__
));

1618  
rc
;

1624 } 
commô_öfo
.
p
);

1626 
¸edô
 = 0; cªdô < 
˘x
->
FIFO_¸edô
[
ac
];) {

1627 
commô_öfo
.
p
 = 
	`_dhd_wlfc_deque_dñayedq
(
˘x
, 
ac
,

1628 &(
commô_öfo
.
ac_fifo_¸edô_•ít
),

1629 &(
commô_öfo
.
√eds_hdr
),

1630 &(
commô_öfo
.
mac_íåy
));

1632 i‡(
commô_öfo
.
p
 =
NULL
)

1635 
commô_öfo
.
pkt_ty≥
 = (commô_öfo.
√eds_hdr
Ë? 
eWLFC_PKTTYPE_DELAYED
 :

1636 
eWLFC_PKTTYPE_SUPPRESSED
;

1638 
rc
 = 
	`_dhd_wlfc_h™dÀ_∑ckë_commô
(
˘x
, 
ac
, &
commô_öfo
,

1639 
fcommô
, 
commô_˘x
);

1642 i‡(
rc
 =
BCME_OK
) {

1643 i‡(
commô_öfo
.
ac_fifo_¸edô_•ít
) {

1644 
¸edô
++;

1648 
bus_ªåy_cou¡
++;

1649 i‡(
bus_ªåy_cou¡
 >
BUS_RETRIES
) {

1650 
	`DHD_ERROR
(("dhd_wlfc_commit_packets(): busÉrror\n"));

1651 
˘x
->
FIFO_¸edô
[
ac
] -
¸edô
;

1652  
rc
;

1657 
˘x
->
FIFO_¸edô
[
ac
] -
¸edô
;

1663 i‡(
öôül_¸edô_cou¡
 =
˘x
->
FIFO_¸edô
[
ac
]) {

1664 
ac_avaûabÀ
 |(1 << 
ac
);

1665 
¸edô_cou¡
 +
˘x
->
FIFO_¸edô
[
ac
];

1679 i‡((
ac_avaûabÀ
 & 
WLFC_AC_BE_TRAFFIC_ONLY
) == WLFC_AC_BE_TRAFFIC_ONLY) {

1681 i‡(
˘x
->
Ælow_¸edô_b‹row
) {

1682 
ac
 = 1;

1685 
dñè
;

1686 
cuº_t
 = 
	`OSL_SYSUPTIME
();

1688 i‡(
cuº_t
 > 
˘x
->
b‹row_de„r_time°amp
)

1689 
dñè
 = 
cuº_t
 - 
˘x
->
b‹row_de„r_time°amp
;

1691 
dñè
 = 0xfffffff‡+ 
cuº_t
 - 
˘x
->
b‹row_de„r_time°amp
;

1693 i‡(
dñè
 >
WLFC_BORROW_DEFER_PERIOD_MS
) {

1695 
˘x
->
Ælow_¸edô_b‹row
 = 
TRUE
;

1696 
˘x
->
b‹row_de„r_time°amp
 = 0;

1698  
BCME_OK
;

1703 
˘x
->
Ælow_¸edô_b‹row
 = 
FALSE
;

1704 
˘x
->
b‹row_de„r_time°amp
 = 
	`OSL_SYSUPTIME
();

1705  
BCME_OK
;

1711 ; (
¸edô_cou¡
 > 0);) {

1713 
commô_öfo
.
p
 = 
	`_dhd_wlfc_deque_dñayedq
(
˘x
, 
ac
,

1714 &(
commô_öfo
.
ac_fifo_¸edô_•ít
),

1715 &(
commô_öfo
.
√eds_hdr
),

1716 &(
commô_öfo
.
mac_íåy
));

1717 i‡(
commô_öfo
.
p
 =
NULL
)

1720 
commô_öfo
.
pkt_ty≥
 = (commô_öfo.
√eds_hdr
Ë? 
eWLFC_PKTTYPE_DELAYED
 :

1721 
eWLFC_PKTTYPE_SUPPRESSED
;

1723 
rc
 = 
	`_dhd_wlfc_h™dÀ_∑ckë_commô
(
˘x
, 
ac
, &
commô_öfo
,

1724 
fcommô
, 
commô_˘x
);

1727 i‡(
rc
 =
BCME_OK
) {

1728 i‡(
commô_öfo
.
ac_fifo_¸edô_•ít
) {

1729 (Ë
	`_dhd_wlfc_b‹row_¸edô
(
˘x
, 
ac_avaûabÀ
, 
ac
);

1730 
¸edô_cou¡
--;

1734 
bus_ªåy_cou¡
++;

1735 i‡(
bus_ªåy_cou¡
 >
BUS_RETRIES
) {

1736 
	`DHD_ERROR
(("dhd_wlfc_commit_packets(): busÉrror\n"));

1737  
rc
;

1742  
BCME_OK
;

1743 
	}
}

1745 
uöt8


1746 
	$dhd_wlfc_föd_mac_desc_id_‰om_mac
(
dhd_pub_t
 *
dhdp
, 
uöt8
* 
ó
)

1748 
wlfc_mac_des¸ùt‹_t
* 
èbÀ
 =

1749 ((
©ho°_wl_°©us_öfo_t
*)
dhdp
->
wlfc_°©e
)->
de°ö©i⁄_íåõs
.
nodes
;

1750 
uöt8
 
èbÀ_ödex
;

1752 i‡(
ó
 !
NULL
) {

1753 
èbÀ_ödex
 = 0;ÅabÀ_ödex < 
WLFC_MAC_DESC_TABLE_SIZE
;Åable_index++) {

1754 i‡((
	`memcmp
(
ó
, &
èbÀ
[
èbÀ_ödex
].ó[0], 
ETHER_ADDR_LEN
) == 0) &&

1755 
èbÀ
[
èbÀ_ödex
].
occupõd
)

1756  
èbÀ_ödex
;

1759  
WLFC_MAC_DESC_ID_INVALID
;

1760 
	}
}

1763 
	$dhd_wlfc_txcom∂ëe
(
dhd_pub_t
 *
dhd
, *
txp
, 
boﬁ
 
suc˚ss
)

1765 
©ho°_wl_°©us_öfo_t
* 
wlfc
 = (athost_wl_status_info_t*)

1766 
dhd
->
wlfc_°©e
;

1767 * 
p
;

1768 
fifo_id
;

1770 
	`dhd_os_wlfc_block
(
dhd
);

1772 i‡(
	`DHD_PKTTAG_SIGNALONLY
(
	`PKTTAG
(
txp
))) {

1773 #ifde‡
PROP_TXSTATUS_DEBUG


1774 
wlfc
->
°©s
.
sig«l_⁄ly_pkts_‰ìd
++;

1776 i‡(
suc˚ss
)

1778 
	`PKTFREE
(
wlfc
->
osh
, 
txp
, 
TRUE
);

1779 
	`dhd_os_wlfc_unblock
(
dhd
);

1782 i‡(!
suc˚ss
) {

1783 
	`WLFC_DBGMESG
(("At: %s():%d, bus_complete() failure for %p, htod_tag:0x%08x\n",

1784 
__FUNCTION__
, 
__LINE__
, 
txp
, 
	`DHD_PKTTAG_H2DTAG
(
	`PKTTAG
(txp))));

1785 
	`dhd_wlfc_h™gî_p›pkt
(
wlfc
->
h™gî
, 
	`WLFC_PKTID_HSLOT_GET
(
DHD_PKTTAG_H2DTAG


1786 (
	`PKTTAG
(
txp
))), &
p
, 1);

1789 
	`dhd_txcom∂ëe
(
dhd
, 
txp
, 
FALSE
);

1792 i‡(
	`DHD_PKTTAG_CREDITCHECK
(
	`PKTTAG
(
txp
))) {

1793 
Àndî
, 
¸edô_ªtu∫ed
 = 0;

1795 
fifo_id
 = 
	`DHD_PKTTAG_FIFO
(
	`PKTTAG
(
txp
));

1798 
Àndî
 = 
AC_COUNT
;Üender >= 0;Üender--) {

1799 i‡(
wlfc
->
¸edôs_b‹rowed
[
fifo_id
][
Àndî
] > 0) {

1800 
wlfc
->
FIFO_¸edô
[
Àndî
]++;

1801 
wlfc
->
¸edôs_b‹rowed
[
fifo_id
][
Àndî
]--;

1802 
¸edô_ªtu∫ed
 = 1;

1807 i‡(!
¸edô_ªtu∫ed
) {

1808 
wlfc
->
FIFO_¸edô
[
fifo_id
]++;

1812 
	`PKTFREE
(
wlfc
->
osh
, 
txp
, 
TRUE
);

1814 
	`dhd_os_wlfc_unblock
(
dhd
);

1816 
	}
}

1819 
	$dhd_wlfc_com¥es£d_tx°©us_upd©e
(
dhd_pub_t
 *
dhd
, 
uöt8
* 
pkt_öfo
, uöt8 
Àn
)

1821 
uöt8
 
°©us_Êag
;

1822 
uöt32
 
°©us
;

1823 
ªt
;

1824 
ªmove_‰om_h™gî
 = 1;

1825 * 
pktbuf
;

1826 
uöt8
 
fifo_id
;

1827 
uöt8
 
cou¡
 = 0;

1828 
uöt32
 
°©us_g
;

1829 
uöt32
 
h¶Ÿ
, 
h˙t
;

1830 
wlfc_mac_des¸ùt‹_t
* 
íåy
 = 
NULL
;

1831 
©ho°_wl_°©us_öfo_t
* 
wlfc
 = (athost_wl_status_info_t*)

1832 
dhd
->
wlfc_°©e
;

1834 
	`mem˝y
(&
°©us
, 
pkt_öfo
, (
uöt32
));

1835 
°©us_Êag
 = 
	`WL_TXSTATUS_GET_FLAGS
(
°©us
);

1836 
°©us_g
 = 
°©us
 & 0xff000000;

1837 
h¶Ÿ
 = (
°©us
 & 0x00ffff00) >> 8;

1838 
h˙t
 = 
°©us
 & 0xff;

1839 
Àn
 = 
pkt_öfo
[4];

1841 
wlfc
->
°©s
.
tx°©us_ö
++;

1843 i‡(
°©us_Êag
 =
WLFC_CTL_PKTFLAG_DISCARD
) {

1844 
wlfc
->
°©s
.
pkt_‰ìd
++;

1847 i‡(
°©us_Êag
 =
WLFC_CTL_PKTFLAG_D11SUPPRESS
) {

1848 
wlfc
->
°©s
.
d11_suµªss
++;

1849 
ªmove_‰om_h™gî
 = 0;

1852 i‡(
°©us_Êag
 =
WLFC_CTL_PKTFLAG_WLSUPPRESS
) {

1853 
wlfc
->
°©s
.
wl_suµªss
++;

1854 
ªmove_‰om_h™gî
 = 0;

1857 i‡(
°©us_Êag
 =
WLFC_CTL_PKTFLAG_TOSSED_BYWLC
) {

1858 
wlfc
->
°©s
.
wlc_tos£d_pkts
++;

1860 
cou¡
 < 
Àn
) {

1861 
°©us
 = (
°©us_g
 << 24Ë| (
h¶Ÿ
 << 8Ë| (
h˙t
);

1862 
cou¡
++;

1863 
h¶Ÿ
++;

1864 
h˙t
++;

1866 
ªt
 = 
	`dhd_wlfc_h™gî_p›pkt
(
wlfc
->
h™gî
,

1867 
	`WLFC_PKTID_HSLOT_GET
(
°©us
), &
pktbuf
, 
ªmove_‰om_h™gî
);

1868 i‡(
ªt
 !
BCME_OK
) {

1873 
íåy
 = 
	`_dhd_wlfc_föd_èbÀ_íåy
(
wlfc
, 
pktbuf
);

1875 i‡(!
ªmove_‰om_h™gî
) {

1877 i‡(!
íåy
->
suµªs£d
 ||É¡ry->
gíî©i⁄
 !
	`WLFC_PKTID_GEN
(
°©us
)) {

1878 
íåy
->
suµªs£d
 = 
TRUE
;

1879 
íåy
->
suµªss_cou¡
 = 
	`pktq_mÀn
(&íåy->
psq
,

1880 
	`NBITVAL
((
	`WL_TXSTATUS_GET_FIFO
(
°©us
) << 1) + 1));

1881 
íåy
->
suµr_å™sô_cou¡
 =É¡ry->
å™sô_cou¡
;

1883 
íåy
->
gíî©i⁄
 = 
	`WLFC_PKTID_GEN
(
°©us
);

1886 #ifde‡
PROP_TXSTATUS_DEBUG


1888 
uöt32
 
√w_t
 = 
	`OSL_SYSUPTIME
();

1889 
uöt32
 
ﬁd_t
;

1890 
uöt32
 
dñè
;

1891 
ﬁd_t
 = ((
wlfc_h™gî_t
*)(
wlfc
->
h™gî
))->
ôems
[

1892 
	`WLFC_PKTID_HSLOT_GET
(
°©us
)].
push_time
;

1895 
wlfc
->
°©s
.
œãncy_ßm∂e_cou¡
++;

1896 i‡(
√w_t
 > 
ﬁd_t
)

1897 
dñè
 = 
√w_t
 - 
ﬁd_t
;

1899 
dñè
 = 0xfffffff‡+ 
√w_t
 - 
ﬁd_t
;

1900 
wlfc
->
°©s
.
tŸÆ_°©us_œãncy
 +
dñè
;

1901 
wlfc
->
°©s
.
œãncy_mo°_ª˚¡
 = 
dñè
;

1903 
wlfc
->
°©s
.
dñès
[wlfc->°©s.
idx_dñè
++] = 
dñè
;

1904 i‡(
wlfc
->
°©s
.
idx_dñè
 =(wlfc->°©s.
dñès
)/(
uöt32
))

1905 
wlfc
->
°©s
.
idx_dñè
 = 0;

1909 
fifo_id
 = 
	`DHD_PKTTAG_FIFO
(
	`PKTTAG
(
pktbuf
));

1912 i‡(
	`DHD_PKTTAG_CREDITCHECK
(
	`PKTTAG
(
pktbuf
))) {

1913 i‡(
wlfc
->
¥›tx°©us_mode
 =
WLFC_FCMODE_IMPLIED_CREDIT
) {

1915 
Àndî
, 
¸edô_ªtu∫ed
 = 0;

1918 
Àndî
 = 
AC_COUNT
;Üender >= 0;Üender--) {

1919 i‡(
wlfc
->
¸edôs_b‹rowed
[
fifo_id
][
Àndî
] > 0) {

1920 
wlfc
->
FIFO_¸edô
[
Àndî
]++;

1921 
wlfc
->
¸edôs_b‹rowed
[
fifo_id
][
Àndî
]--;

1922 
¸edô_ªtu∫ed
 = 1;

1927 i‡(!
¸edô_ªtu∫ed
) {

1928 
wlfc
->
FIFO_¸edô
[
fifo_id
]++;

1937 i‡(!
íåy
) {

1939 
íåy
 = 
	`_dhd_wlfc_föd_èbÀ_íåy
(
wlfc
, 
pktbuf
);

1941 i‡(!
	`DHD_PKTTAG_ONETIMEPKTRQST
(
	`PKTTAG
(
pktbuf
)))

1942 
íåy
->
ªque°ed_¸edô
++;

1943 #ifde‡
PROP_TXSTATUS_DEBUG


1944 
íåy
->
d°n¸edô_acks
++;

1947 i‡((
°©us_Êag
 =
WLFC_CTL_PKTFLAG_D11SUPPRESS
) ||

1948 (
°©us_Êag
 =
WLFC_CTL_PKTFLAG_WLSUPPRESS
)) {

1950 
ªt
 = 
	`_dhd_wlfc_íque_suµªs£d
(
wlfc
, 
fifo_id
, 
pktbuf
);

1951 i‡(
ªt
 !
BCME_OK
) {

1953 
	`dhd_wlfc_h™gî_p›pkt
(
wlfc
->
h™gî
, 
	`WLFC_PKTID_HSLOT_GET
(
°©us
),

1954 &
pktbuf
, 1);

1957 
	`dhd_txcom∂ëe
(
dhd
, 
pktbuf
, 
FALSE
);

1958 
íåy
->
å™sô_cou¡
--;

1962 i‡(
íåy
->
suµªs£d
) {

1963 
íåy
->
suµr_å™sô_cou¡
--;

1965 
	`PKTFREE
(
wlfc
->
osh
, 
pktbuf
, 
TRUE
);

1969 
	`dhd_wlfc_h™gî_m¨k_suµªs£d
(
wlfc
->
h™gî
,

1970 
	`WLFC_PKTID_HSLOT_GET
(
°©us
), 
	`WLFC_PKTID_GEN
(status));

1971 
íåy
->
suµªss_cou¡
++;

1975 
	`dhd_txcom∂ëe
(
dhd
, 
pktbuf
, 
TRUE
);

1976 
íåy
->
å™sô_cou¡
--;

1981 i‡(
íåy
->
suµªs£d
) {

1982 
íåy
->
suµr_å™sô_cou¡
--;

1985 
	`PKTFREE
(
wlfc
->
osh
, 
pktbuf
, 
TRUE
);

1988  
BCME_OK
;

1989 
	}
}

1993 
	$dhd_wlfc_tx°©us_upd©e
(
dhd_pub_t
 *
dhd
, 
uöt8
* 
pkt_öfo
)

1995 
uöt8
 
°©us_Êag
;

1996 
uöt32
 
°©us
;

1997 
ªt
;

1998 
ªmove_‰om_h™gî
 = 1;

1999 * 
pktbuf
;

2000 
uöt8
 
fifo_id
;

2001 
wlfc_mac_des¸ùt‹_t
* 
íåy
 = 
NULL
;

2002 
©ho°_wl_°©us_öfo_t
* 
wlfc
 = (athost_wl_status_info_t*)

2003 
dhd
->
wlfc_°©e
;

2005 
	`mem˝y
(&
°©us
, 
pkt_öfo
, (
uöt32
));

2006 
°©us_Êag
 = 
	`WL_TXSTATUS_GET_FLAGS
(
°©us
);

2007 
wlfc
->
°©s
.
tx°©us_ö
++;

2009 i‡(
°©us_Êag
 =
WLFC_CTL_PKTFLAG_DISCARD
) {

2010 
wlfc
->
°©s
.
pkt_‰ìd
++;

2013 i‡(
°©us_Êag
 =
WLFC_CTL_PKTFLAG_D11SUPPRESS
) {

2014 
wlfc
->
°©s
.
d11_suµªss
++;

2015 
ªmove_‰om_h™gî
 = 0;

2018 i‡(
°©us_Êag
 =
WLFC_CTL_PKTFLAG_WLSUPPRESS
) {

2019 
wlfc
->
°©s
.
wl_suµªss
++;

2020 
ªmove_‰om_h™gî
 = 0;

2023 i‡(
°©us_Êag
 =
WLFC_CTL_PKTFLAG_TOSSED_BYWLC
) {

2024 
wlfc
->
°©s
.
wlc_tos£d_pkts
++;

2027 
ªt
 = 
	`dhd_wlfc_h™gî_p›pkt
(
wlfc
->
h™gî
,

2028 
	`WLFC_PKTID_HSLOT_GET
(
°©us
), &
pktbuf
, 
ªmove_‰om_h™gî
);

2029 i‡(
ªt
 !
BCME_OK
) {

2031  
ªt
;

2034 
íåy
 = 
	`_dhd_wlfc_föd_èbÀ_íåy
(
wlfc
, 
pktbuf
);

2036 i‡(!
ªmove_‰om_h™gî
) {

2038 i‡(!
íåy
->
suµªs£d
 ||É¡ry->
gíî©i⁄
 !
	`WLFC_PKTID_GEN
(
°©us
)) {

2039 
íåy
->
suµªs£d
 = 
TRUE
;

2040 
íåy
->
suµªss_cou¡
 = 
	`pktq_mÀn
(&íåy->
psq
,

2041 
	`NBITVAL
((
	`WL_TXSTATUS_GET_FIFO
(
°©us
) << 1) + 1));

2042 
íåy
->
suµr_å™sô_cou¡
 =É¡ry->
å™sô_cou¡
;

2044 
íåy
->
gíî©i⁄
 = 
	`WLFC_PKTID_GEN
(
°©us
);

2047 #ifde‡
PROP_TXSTATUS_DEBUG


2049 
uöt32
 
√w_t
 = 
	`OSL_SYSUPTIME
();

2050 
uöt32
 
ﬁd_t
;

2051 
uöt32
 
dñè
;

2052 
ﬁd_t
 = ((
wlfc_h™gî_t
*)(
wlfc
->
h™gî
))->
ôems
[

2053 
	`WLFC_PKTID_HSLOT_GET
(
°©us
)].
push_time
;

2056 
wlfc
->
°©s
.
œãncy_ßm∂e_cou¡
++;

2057 i‡(
√w_t
 > 
ﬁd_t
)

2058 
dñè
 = 
√w_t
 - 
ﬁd_t
;

2060 
dñè
 = 0xfffffff‡+ 
√w_t
 - 
ﬁd_t
;

2061 
wlfc
->
°©s
.
tŸÆ_°©us_œãncy
 +
dñè
;

2062 
wlfc
->
°©s
.
œãncy_mo°_ª˚¡
 = 
dñè
;

2064 
wlfc
->
°©s
.
dñès
[wlfc->°©s.
idx_dñè
++] = 
dñè
;

2065 i‡(
wlfc
->
°©s
.
idx_dñè
 =(wlfc->°©s.
dñès
)/(
uöt32
))

2066 
wlfc
->
°©s
.
idx_dñè
 = 0;

2070 
fifo_id
 = 
	`DHD_PKTTAG_FIFO
(
	`PKTTAG
(
pktbuf
));

2073 i‡(
	`DHD_PKTTAG_CREDITCHECK
(
	`PKTTAG
(
pktbuf
))) {

2074 i‡(
wlfc
->
¥›tx°©us_mode
 =
WLFC_FCMODE_IMPLIED_CREDIT
) {

2076 
Àndî
, 
¸edô_ªtu∫ed
 = 0;

2079 
Àndî
 = 
AC_COUNT
;Üender >= 0;Üender--) {

2080 i‡(
wlfc
->
¸edôs_b‹rowed
[
fifo_id
][
Àndî
] > 0) {

2081 
wlfc
->
FIFO_¸edô
[
Àndî
]++;

2082 
wlfc
->
¸edôs_b‹rowed
[
fifo_id
][
Àndî
]--;

2083 
¸edô_ªtu∫ed
 = 1;

2088 i‡(!
¸edô_ªtu∫ed
) {

2089 
wlfc
->
FIFO_¸edô
[
fifo_id
]++;

2098 i‡(!
íåy
) {

2100 
íåy
 = 
	`_dhd_wlfc_föd_èbÀ_íåy
(
wlfc
, 
pktbuf
);

2102 i‡(!
	`DHD_PKTTAG_ONETIMEPKTRQST
(
	`PKTTAG
(
pktbuf
)))

2103 
íåy
->
ªque°ed_¸edô
++;

2104 #ifde‡
PROP_TXSTATUS_DEBUG


2105 
íåy
->
d°n¸edô_acks
++;

2108 i‡((
°©us_Êag
 =
WLFC_CTL_PKTFLAG_D11SUPPRESS
) ||

2109 (
°©us_Êag
 =
WLFC_CTL_PKTFLAG_WLSUPPRESS
)) {

2111 
ªt
 = 
	`_dhd_wlfc_íque_suµªs£d
(
wlfc
, 
fifo_id
, 
pktbuf
);

2112 i‡(
ªt
 !
BCME_OK
) {

2114 
	`dhd_wlfc_h™gî_p›pkt
(
wlfc
->
h™gî
, 
	`WLFC_PKTID_HSLOT_GET
(
°©us
),

2115 &
pktbuf
, 1);

2118 
	`dhd_txcom∂ëe
(
dhd
, 
pktbuf
, 
FALSE
);

2119 
íåy
->
å™sô_cou¡
--;

2123 i‡(
íåy
->
suµªs£d
) {

2124 
íåy
->
suµr_å™sô_cou¡
--;

2126 
	`PKTFREE
(
wlfc
->
osh
, 
pktbuf
, 
TRUE
);

2129 
	`dhd_wlfc_h™gî_m¨k_suµªs£d
(
wlfc
->
h™gî
,

2130 
	`WLFC_PKTID_HSLOT_GET
(
°©us
), 
	`WLFC_PKTID_GEN
(status));

2131 
íåy
->
suµªss_cou¡
++;

2135 
	`dhd_txcom∂ëe
(
dhd
, 
pktbuf
, 
TRUE
);

2136 
íåy
->
å™sô_cou¡
--;

2139 i‡(
íåy
->
suµªs£d
) {

2140 
íåy
->
suµr_å™sô_cou¡
--;

2143 
	`PKTFREE
(
wlfc
->
osh
, 
pktbuf
, 
TRUE
);

2145  
BCME_OK
;

2146 
	}
}

2149 
	$dhd_wlfc_fifo¸edôback_ödiˇã
(
dhd_pub_t
 *
dhd
, 
uöt8
* 
¸edôs
)

2151 
i
;

2152 
©ho°_wl_°©us_öfo_t
* 
wlfc
 = (athost_wl_status_info_t*)

2153 
dhd
->
wlfc_°©e
;

2154 
i
 = 0; i < 
WLFC_CTL_VALUE_LEN_FIFO_CREDITBACK
; i++) {

2155 #ifde‡
PROP_TXSTATUS_DEBUG


2156 
wlfc
->
°©s
.
fifo_¸edôs_back
[
i
] +
¸edôs
[i];

2159 i‡(
wlfc
->
¥›tx°©us_mode
 =
WLFC_FCMODE_EXPLICIT_CREDIT
)

2161 
Àndî
;

2164 
Àndî
 = 
AC_COUNT
; (Àndî >0Ë&& (
¸edôs
[
i
] > 0);Üender--) {

2165 i‡(
wlfc
->
¸edôs_b‹rowed
[
i
][
Àndî
] > 0) {

2166 i‡(
¸edôs
[
i
] >
wlfc
->
¸edôs_b‹rowed
[i][
Àndî
]) {

2167 
¸edôs
[
i
] -
wlfc
->
¸edôs_b‹rowed
[i][
Àndî
];

2168 
wlfc
->
FIFO_¸edô
[
Àndî
] +=

2169 
wlfc
->
¸edôs_b‹rowed
[
i
][
Àndî
];

2170 
wlfc
->
¸edôs_b‹rowed
[
i
][
Àndî
] = 0;

2173 
wlfc
->
¸edôs_b‹rowed
[
i
][
Àndî
] -
¸edôs
[i];

2174 
wlfc
->
FIFO_¸edô
[
Àndî
] +
¸edôs
[
i
];

2175 
¸edôs
[
i
] = 0;

2181 i‡(
¸edôs
[
i
] > 0) {

2182 
wlfc
->
FIFO_¸edô
[
i
] +
¸edôs
[i];

2187  
BCME_OK
;

2188 
	}
}

2191 
	$dhd_wlfc_dbg_£num_check
(
dhd_pub_t
 *
dhd
, 
uöt8
 *
vÆue
)

2193 
uöt32
 
time°amp
;

2195 ()
dhd
;

2197 
	`bc›y
(&
vÆue
[2], &
time°amp
, (
uöt32
));

2198 
	`DHD_INFO
(("RXPKT: SEQ: %d,Åime°am∞%d\n", 
vÆue
[1], 
time°amp
));

2199  
BCME_OK
;

2200 
	}
}

2204 
	$dhd_wlfc_rssi_ödiˇã
(
dhd_pub_t
 *
dhd
, 
uöt8
* 
rssi
)

2206 ()
dhd
;

2207 ()
rssi
;

2208  
BCME_OK
;

2209 
	}
}

2212 
	$dhd_wlfc_mac_èbÀ_upd©e
(
dhd_pub_t
 *
dhd
, 
uöt8
* 
vÆue
, uöt8 
ty≥
)

2214 
rc
;

2215 
©ho°_wl_°©us_öfo_t
* 
wlfc
 = (athost_wl_status_info_t*)

2216 
dhd
->
wlfc_°©e
;

2217 
wlfc_mac_des¸ùt‹_t
* 
èbÀ
;

2218 
uöt8
 
exi°ög_ödex
;

2219 
uöt8
 
èbÀ_ödex
;

2220 
uöt8
 
ifid
;

2221 
uöt8
* 
ó
;

2223 
	`WLFC_DBGMESG
(("%s(), mac [%02x:%02x:%02x:%02x:%02x:%02x],%s,idx:%d,id:0x%02x\n",

2224 
__FUNCTION__
, 
vÆue
[2], value[3], value[4], value[5], value[6], value[7],

2225 ((
ty≥
 =
WLFC_CTL_TYPE_MACDESC_ADD
) ? "ADD":"DEL"),

2226 
	`WLFC_MAC_DESC_GET_LOOKUP_INDEX
(
vÆue
[0]), value[0]));

2228 
èbÀ
 = 
wlfc
->
de°ö©i⁄_íåõs
.
nodes
;

2229 
èbÀ_ödex
 = 
	`WLFC_MAC_DESC_GET_LOOKUP_INDEX
(
vÆue
[0]);

2230 
ifid
 = 
vÆue
[1];

2231 
ó
 = &
vÆue
[2];

2233 i‡(
ty≥
 =
WLFC_CTL_TYPE_MACDESC_ADD
) {

2234 
exi°ög_ödex
 = 
	`dhd_wlfc_föd_mac_desc_id_‰om_mac
(
dhd
, &
vÆue
[2]);

2235 i‡(
exi°ög_ödex
 =
WLFC_MAC_DESC_ID_INVALID
) {

2237 i‡(!
èbÀ
[
èbÀ_ödex
].
occupõd
) {

2238 
èbÀ
[
èbÀ_ödex
].
mac_h™dÀ
 = 
vÆue
[0];

2239 
rc
 = 
	`_dhd_wlfc_mac_íåy_upd©e
(
wlfc
, &
èbÀ
[
èbÀ_ödex
],

2240 
eWLFC_MAC_ENTRY_ACTION_ADD
, 
ifid
,

2241 
wlfc
->
de°ö©i⁄_íåõs
.
öãrÁ˚s
[
ifid
].
i·y≥
,

2242 
ó
);

2246 
wlfc
->
°©s
.
mac_upd©e_Áûed
++;

2254 i‡(
exi°ög_ödex
 !
èbÀ_ödex
) {

2256 
èbÀ
[
exi°ög_ödex
].
occupõd
 = 0;

2257 
èbÀ
[
exi°ög_ödex
].
°©e
 = 
WLFC_STATE_CLOSE
;

2258 
èbÀ
[
exi°ög_ödex
].
ªque°ed_¸edô
 = 0;

2259 
èbÀ
[
exi°ög_ödex
].
öãrÁ˚_id
 = 0;

2266 i‡(
ty≥
 =
WLFC_CTL_TYPE_MACDESC_DEL
) {

2267 i‡(
èbÀ
[
èbÀ_ödex
].
occupõd
) {

2268 
rc
 = 
	`_dhd_wlfc_mac_íåy_upd©e
(
wlfc
, &
èbÀ
[
èbÀ_ödex
],

2269 
eWLFC_MAC_ENTRY_ACTION_DEL
, 
ifid
,

2270 
wlfc
->
de°ö©i⁄_íåõs
.
öãrÁ˚s
[
ifid
].
i·y≥
,

2271 
ó
);

2275 
wlfc
->
°©s
.
mac_upd©e_Áûed
++;

2278 
	`BCM_REFERENCE
(
rc
);

2279  
BCME_OK
;

2280 
	}
}

2283 
	$dhd_wlfc_psmode_upd©e
(
dhd_pub_t
 *
dhd
, 
uöt8
* 
vÆue
, uöt8 
ty≥
)

2286 
©ho°_wl_°©us_öfo_t
* 
wlfc
 = (athost_wl_status_info_t*)

2287 
dhd
->
wlfc_°©e
;

2288 
wlfc_mac_des¸ùt‹_t
* 
èbÀ
;

2289 
wlfc_mac_des¸ùt‹_t
* 
desc
;

2290 
uöt8
 
mac_h™dÀ
 = 
vÆue
[0];

2291 
i
;

2293 
èbÀ
 = 
wlfc
->
de°ö©i⁄_íåõs
.
nodes
;

2294 
desc
 = &
èbÀ
[
	`WLFC_MAC_DESC_GET_LOOKUP_INDEX
(
mac_h™dÀ
)];

2295 i‡(
desc
->
occupõd
) {

2297 
desc
->
ªque°ed_¸edô
 = 0;

2298 i‡(
ty≥
 =
WLFC_CTL_TYPE_MAC_OPEN
) {

2299 
desc
->
°©e
 = 
WLFC_STATE_OPEN
;

2300 
	`DHD_WLFC_CTRINC_MAC_OPEN
(
desc
);

2303 
desc
->
°©e
 = 
WLFC_STATE_CLOSE
;

2304 
	`DHD_WLFC_CTRINC_MAC_CLOSE
(
desc
);

2308 
i
 = 
AC_BE
; i < 
AC_COUNT
; i++) {

2309 
	`_dhd_wlfc_åaffic_≥ndög_check
(
wlfc
, 
desc
, 
i
);

2314 
wlfc
->
°©s
.
psmode_upd©e_Áûed
++;

2316  
BCME_OK
;

2317 
	}
}

2320 
	$dhd_wlfc_öãrÁ˚_upd©e
(
dhd_pub_t
 *
dhd
, 
uöt8
* 
vÆue
, uöt8 
ty≥
)

2323 
©ho°_wl_°©us_öfo_t
* 
wlfc
 = (athost_wl_status_info_t*)

2324 
dhd
->
wlfc_°©e
;

2325 
wlfc_mac_des¸ùt‹_t
* 
èbÀ
;

2326 
uöt8
 
if_id
 = 
vÆue
[0];

2328 i‡(
if_id
 < 
WLFC_MAX_IFNUM
) {

2329 
èbÀ
 = 
wlfc
->
de°ö©i⁄_íåõs
.
öãrÁ˚s
;

2330 i‡(
èbÀ
[
if_id
].
occupõd
) {

2331 i‡(
ty≥
 =
WLFC_CTL_TYPE_INTERFACE_OPEN
) {

2332 
èbÀ
[
if_id
].
°©e
 = 
WLFC_STATE_OPEN
;

2336 
èbÀ
[
if_id
].
°©e
 = 
WLFC_STATE_CLOSE
;

2339  
BCME_OK
;

2342 
wlfc
->
°©s
.
öãrÁ˚_upd©e_Áûed
++;

2344  
BCME_OK
;

2345 
	}
}

2348 
	$dhd_wlfc_¸edô_ªque°
(
dhd_pub_t
 *
dhd
, 
uöt8
* 
vÆue
)

2350 
©ho°_wl_°©us_öfo_t
* 
wlfc
 = (athost_wl_status_info_t*)

2351 
dhd
->
wlfc_°©e
;

2352 
wlfc_mac_des¸ùt‹_t
* 
èbÀ
;

2353 
wlfc_mac_des¸ùt‹_t
* 
desc
;

2354 
uöt8
 
mac_h™dÀ
;

2355 
uöt8
 
¸edô
;

2357 
èbÀ
 = 
wlfc
->
de°ö©i⁄_íåõs
.
nodes
;

2358 
mac_h™dÀ
 = 
vÆue
[1];

2359 
¸edô
 = 
vÆue
[0];

2361 
desc
 = &
èbÀ
[
	`WLFC_MAC_DESC_GET_LOOKUP_INDEX
(
mac_h™dÀ
)];

2362 i‡(
desc
->
occupõd
) {

2363 
desc
->
ªque°ed_¸edô
 = 
¸edô
;

2365 
desc
->
ac_bôm≠
 = 
vÆue
[2];

2368 
wlfc
->
°©s
.
¸edô_ªque°_Áûed
++;

2370  
BCME_OK
;

2371 
	}
}

2374 
	$dhd_wlfc_∑ckë_ªque°
(
dhd_pub_t
 *
dhd
, 
uöt8
* 
vÆue
)

2376 
©ho°_wl_°©us_öfo_t
* 
wlfc
 = (athost_wl_status_info_t*)

2377 
dhd
->
wlfc_°©e
;

2378 
wlfc_mac_des¸ùt‹_t
* 
èbÀ
;

2379 
wlfc_mac_des¸ùt‹_t
* 
desc
;

2380 
uöt8
 
mac_h™dÀ
;

2381 
uöt8
 
∑ckë_cou¡
;

2383 
èbÀ
 = 
wlfc
->
de°ö©i⁄_íåõs
.
nodes
;

2384 
mac_h™dÀ
 = 
vÆue
[1];

2385 
∑ckë_cou¡
 = 
vÆue
[0];

2387 
desc
 = &
èbÀ
[
	`WLFC_MAC_DESC_GET_LOOKUP_INDEX
(
mac_h™dÀ
)];

2388 i‡(
desc
->
occupõd
) {

2389 
desc
->
ªque°ed_∑ckë
 = 
∑ckë_cou¡
;

2391 
desc
->
ac_bôm≠
 = 
vÆue
[2];

2394 
wlfc
->
°©s
.
∑ckë_ªque°_Áûed
++;

2396  
BCME_OK
;

2397 
	}
}

2400 
	$dhd_wlfc_ª‹dîöfo_ödiˇã
(
uöt8
 *
vÆ
, uöt8 
Àn
, 
uch¨
 *
öfo_buf
, 
uöt
 *
öfo_Àn
)

2402 i‡(
öfo_Àn
) {

2403 i‡(
öfo_buf
) {

2404 
	`bc›y
(
vÆ
, 
öfo_buf
, 
Àn
);

2405 *
öfo_Àn
 = 
Àn
;

2408 *
öfo_Àn
 = 0;

2410 
	}
}

2413 
	$dhd_wlfc_∑r£_hódî_öfo
(
dhd_pub_t
 *
dhd
, * 
pktbuf
, 
év_hdr_Àn
, 
uch¨
 *
ª‹dî_öfo_buf
,

2414 
uöt
 *
ª‹dî_öfo_Àn
)

2416 
uöt8
 
ty≥
, 
Àn
;

2417 
uöt8
* 
vÆue
;

2418 
uöt8
* 
tmpbuf
;

2419 
uöt16
 
ªmaödî
 = 
év_hdr_Àn
;

2420 
uöt16
 
¥o˚s£d
 = 0;

2421 
©ho°_wl_°©us_öfo_t
* 
wlfc
 = (athost_wl_status_info_t*)

2422 
dhd
->
wlfc_°©e
;

2423 
tmpbuf
 = (
uöt8
*)
	`PKTDATA
(
dhd
->
osh
, 
pktbuf
);

2424 i‡(
ªmaödî
) {

2425 (
¥o˚s£d
 < (
WLFC_MAX_PENDING_DATALEN
 * 2)Ë&& (
ªmaödî
 > 0)) {

2426 
ty≥
 = 
tmpbuf
[
¥o˚s£d
];

2427 i‡(
ty≥
 =
WLFC_CTL_TYPE_FILLER
) {

2428 
ªmaödî
 -= 1;

2429 
¥o˚s£d
 += 1;

2433 
Àn
 = 
tmpbuf
[
¥o˚s£d
 + 1];

2434 
vÆue
 = &
tmpbuf
[
¥o˚s£d
 + 2];

2436 i‡(
ªmaödî
 < (2 + 
Àn
))

2439 
ªmaödî
 -2 + 
Àn
;

2440 
¥o˚s£d
 +2 + 
Àn
;

2441 i‡(
ty≥
 =
WLFC_CTL_TYPE_TXSTATUS
)

2442 
	`dhd_wlfc_tx°©us_upd©e
(
dhd
, 
vÆue
);

2443 i‡(
ty≥
 =
WLFC_CTL_TYPE_COMP_TXSTATUS
)

2444 
	`dhd_wlfc_com¥es£d_tx°©us_upd©e
(
dhd
, 
vÆue
, 
Àn
);

2446 i‡(
ty≥
 =
WLFC_CTL_TYPE_HOST_REORDER_RXPKTS
)

2447 
	`dhd_wlfc_ª‹dîöfo_ödiˇã
(
vÆue
, 
Àn
, 
ª‹dî_öfo_buf
,

2448 
ª‹dî_öfo_Àn
);

2449 i‡(
ty≥
 =
WLFC_CTL_TYPE_FIFO_CREDITBACK
)

2450 
	`dhd_wlfc_fifo¸edôback_ödiˇã
(
dhd
, 
vÆue
);

2452 i‡(
ty≥
 =
WLFC_CTL_TYPE_RSSI
)

2453 
	`dhd_wlfc_rssi_ödiˇã
(
dhd
, 
vÆue
);

2455 i‡(
ty≥
 =
WLFC_CTL_TYPE_MAC_REQUEST_CREDIT
)

2456 
	`dhd_wlfc_¸edô_ªque°
(
dhd
, 
vÆue
);

2458 i‡(
ty≥
 =
WLFC_CTL_TYPE_MAC_REQUEST_PACKET
)

2459 
	`dhd_wlfc_∑ckë_ªque°
(
dhd
, 
vÆue
);

2461 i‡((
ty≥
 =
WLFC_CTL_TYPE_MAC_OPEN
) ||

2462 (
ty≥
 =
WLFC_CTL_TYPE_MAC_CLOSE
))

2463 
	`dhd_wlfc_psmode_upd©e
(
dhd
, 
vÆue
, 
ty≥
);

2465 i‡((
ty≥
 =
WLFC_CTL_TYPE_MACDESC_ADD
) ||

2466 (
ty≥
 =
WLFC_CTL_TYPE_MACDESC_DEL
))

2467 
	`dhd_wlfc_mac_èbÀ_upd©e
(
dhd
, 
vÆue
, 
ty≥
);

2469 i‡(
ty≥
 =
WLFC_CTL_TYPE_TRANS_ID
)

2470 
	`dhd_wlfc_dbg_£num_check
(
dhd
, 
vÆue
);

2472 i‡((
ty≥
 =
WLFC_CTL_TYPE_INTERFACE_OPEN
) ||

2473 (
ty≥
 =
WLFC_CTL_TYPE_INTERFACE_CLOSE
)) {

2474 
	`dhd_wlfc_öãrÁ˚_upd©e
(
dhd
, 
vÆue
, 
ty≥
);

2477 i‡(
ªmaödî
 != 0) {

2479 
wlfc
->
°©s
.
év_∑r£_Áûed
++;

2482  
BCME_OK
;

2483 
	}
}

2486 
	$dhd_wlfc_öô
(
dhd_pub_t
 *
dhd
)

2488 
iovbuf
[12];

2490 
uöt32
 
év
 = 
dhd
->
wlfc_íabÀd
?

2491 
WLFC_FLAGS_RSSI_SIGNALS
 |

2492 
WLFC_FLAGS_XONXOFF_SIGNALS
 |

2493 
WLFC_FLAGS_CREDIT_STATUS_SIGNALS
 |

2494 
WLFC_FLAGS_HOST_PROPTXSTATUS_ACTIVE
 |

2495 
WLFC_FLAGS_HOST_RXRERODER_ACTIVE
 : 0;

2505 
	`bcm_mkiov¨
("év", (*)&
év
, 4, 
iovbuf
, (iovbuf));

2506 i‡(
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
, (iovbuf), 
TRUE
, 0) < 0) {

2507 
	`DHD_ERROR
(("dhd_wlfc_init(): failedÅoÉnable/disable bdcv2Ålv signaling\n"));

2514 
	`DHD_ERROR
(("dhd_wlfc_init(): successfully %s bdcv2Ålv signaling, %d\n",

2515 
dhd
->
wlfc_íabÀd
?"íabÀd":"dißbÀd", 
év
));

2517  
BCME_OK
;

2518 
	}
}

2521 
	$dhd_wlfc_íabÀ
(
dhd_pub_t
 *
dhd
)

2523 
i
;

2524 
©ho°_wl_°©us_öfo_t
* 
wlfc
;

2526 
	`DHD_TRACE
(("E¡î %s\n", 
__FUNCTION__
));

2528 i‡(!
dhd
->
wlfc_íabÀd
 || dhd->
wlfc_°©e
)

2529  
BCME_OK
;

2532 
dhd
->
wlfc_°©e
 = 
	`MALLOC
(dhd->
osh
, (
©ho°_wl_°©us_öfo_t
));

2533 i‡(
dhd
->
wlfc_°©e
 =
NULL
)

2534  
BCME_NOMEM
;

2537 
wlfc
 = (
©ho°_wl_°©us_öfo_t
*)
dhd
->
wlfc_°©e
;

2538 
	`mem£t
(
wlfc
, 0, (
©ho°_wl_°©us_öfo_t
));

2541 
wlfc
->
osh
 = 
dhd
->osh;

2542 
wlfc
->
dhdp
 = 
dhd
;

2544 
wlfc
->
h™gî
 =

2545 
	`dhd_wlfc_h™gî_¸óã
(
dhd
->
osh
, 
WLFC_HANGER_MAXITEMS
);

2546 i‡(
wlfc
->
h™gî
 =
NULL
) {

2547 
	`MFREE
(
dhd
->
osh
, dhd->
wlfc_°©e
, (
©ho°_wl_°©us_öfo_t
));

2548 
dhd
->
wlfc_°©e
 = 
NULL
;

2549  
BCME_NOMEM
;

2553 
i
 = 0; i < 
WLFC_MAX_IFNUM
; i++) {

2554 
wlfc
->
ho°if_Êow_°©e
[
i
] = 
OFF
;

2561 
	`pktq_öô
(&
wlfc
->
SENDQ
, (
AC_COUNT
 + 1), 
WLFC_SENDQ_LEN
);

2563 
wlfc
->
de°ö©i⁄_íåõs
.
Ÿhî
.
°©e
 = 
WLFC_STATE_OPEN
;

2565 
wlfc
->
de°ö©i⁄_íåõs
.
Ÿhî
.
ac_bôm≠
 = 0x1f;

2566 
wlfc
->
de°ö©i⁄_íåõs
.
Ÿhî
.
öãrÁ˚_id
 = 0;

2568 
wlfc
->
¥›tx°©us_mode
 = 
WLFC_FCMODE_EXPLICIT_CREDIT
;

2570 
wlfc
->
Ælow_¸edô_b‹row
 = 
TRUE
;

2571 
wlfc
->
b‹row_de„r_time°amp
 = 0;

2573  
BCME_OK
;

2574 
	}
}

2578 
	$dhd_wlfc_˛ónup
(
dhd_pub_t
 *
dhd
)

2580 
i
;

2581 
tŸÆ_íåõs
;

2582 
©ho°_wl_°©us_öfo_t
* 
wlfc
 = (athost_wl_status_info_t*)

2583 
dhd
->
wlfc_°©e
;

2584 
wlfc_mac_des¸ùt‹_t
* 
èbÀ
;

2585 
wlfc_h™gî_t
* 
h
;

2586 
¥ec
;

2587 *
pkt
 = 
NULL
;

2588 
pktq
 *
txq
 = 
NULL
;

2590 
	`DHD_TRACE
(("E¡î %s\n", 
__FUNCTION__
));

2591 i‡(
dhd
->
wlfc_°©e
 =
NULL
)

2594 
txq
 = 
	`dhd_bus_txq
(
dhd
->
bus
);

2597 
h
 = (
wlfc_h™gî_t
*)
wlfc
->
h™gî
;

2598 
tŸÆ_íåõs
 = (
wlfc
->
de°ö©i⁄_íåõs
)/(
wlfc_mac_des¸ùt‹_t
);

2600 
èbÀ
 = (
wlfc_mac_des¸ùt‹_t
*)&
wlfc
->
de°ö©i⁄_íåõs
;

2602 
i
 = 0; i < 
tŸÆ_íåõs
; i++) {

2603 i‡(
èbÀ
[
i
].
occupõd
) {

2604 i‡(
èbÀ
[
i
].
psq
.
Àn
) {

2605 
	`WLFC_DBGMESG
(("%s(): DELAYQ[%d].len = %d\n",

2606 
__FUNCTION__
, 
i
, 
èbÀ
[i].
psq
.
Àn
));

2608 
	`pktq_Êush
(
wlfc
->
osh
, &
èbÀ
[
i
].
psq
, 
TRUE
, 
NULL
, 0);

2610 
èbÀ
[
i
].
occupõd
 = 0;

2614 i‡(
wlfc
->
SENDQ
.
Àn
)

2615 
	`pktq_Êush
(
wlfc
->
osh
, &wlfc->
SENDQ
, 
TRUE
, 
NULL
, 0);

2616 
¥ec
 = 0;Öª¯< 
txq
->
num_¥ec
;Örec++) {

2617 
pkt
 = 
	`pktq_pdeq
(
txq
, 
¥ec
);

2618 
pkt
) {

2619 
i
 = 0; i < 
h
->
max_ôems
; i++) {

2620 i‡(
pkt
 =
h
->
ôems
[
i
].pkt) {

2621 i‡(
h
->
ôems
[
i
].
°©e
 =
WLFC_HANGER_ITEM_STATE_INUSE
) {

2622 
	`PKTFREE
(
wlfc
->
osh
, 
h
->
ôems
[
i
].
pkt
, 
TRUE
);

2623 
h
->
ôems
[
i
].
°©e
 = 
WLFC_HANGER_ITEM_STATE_FREE
;

2624 
h
->
ôems
[
i
].
pkt
 = 
NULL
;

2625 
h
->
ôems
[
i
].
idítifõr
 = 0;

2626 } i‡(
h
->
ôems
[
i
].
°©e
 ==

2627 
WLFC_HANGER_ITEM_STATE_INUSE_SUPPRESSED
) {

2629 
h
->
ôems
[
i
].
°©e
 = 
WLFC_HANGER_ITEM_STATE_FREE
;

2634 
pkt
 = 
	`pktq_pdeq
(
txq
, 
¥ec
);

2638 
i
 = 0; i < 
h
->
max_ôems
; i++) {

2639 i‡(
h
->
ôems
[
i
].
°©e
 =
WLFC_HANGER_ITEM_STATE_INUSE
) {

2640 
	`PKTFREE
(
wlfc
->
osh
, 
h
->
ôems
[
i
].
pkt
, 
TRUE
);

2641 
h
->
ôems
[
i
].
°©e
 = 
WLFC_HANGER_ITEM_STATE_FREE
;

2642 } i‡(
h
->
ôems
[
i
].
°©e
 =
WLFC_HANGER_ITEM_STATE_INUSE_SUPPRESSED
) {

2644 
h
->
ôems
[
i
].
°©e
 = 
WLFC_HANGER_ITEM_STATE_FREE
;

2649 
	}
}

2652 
	$dhd_wlfc_deöô
(
dhd_pub_t
 *
dhd
)

2655 
©ho°_wl_°©us_öfo_t
* 
wlfc
 = (athost_wl_status_info_t*)

2656 
dhd
->
wlfc_°©e
;

2658 
	`DHD_TRACE
(("E¡î %s\n", 
__FUNCTION__
));

2660 
	`dhd_os_wlfc_block
(
dhd
);

2661 i‡(
dhd
->
wlfc_°©e
 =
NULL
) {

2662 
	`dhd_os_wlfc_unblock
(
dhd
);

2666 #ifde‡
PROP_TXSTATUS_DEBUG


2668 
i
;

2669 
wlfc_h™gî_t
* 
h
 = (wlfc_h™gî_t*)
wlfc
->
h™gî
;

2670 
i
 = 0; i < 
h
->
max_ôems
; i++) {

2671 i‡(
h
->
ôems
[
i
].
°©e
 !
WLFC_HANGER_ITEM_STATE_FREE
) {

2672 
	`WLFC_DBGMESG
(("%s()Ökt[%d] = 0x%p, FIFO_credit_used:%d\n",

2673 
__FUNCTION__
, 
i
, 
h
->
ôems
[i].
pkt
,

2674 
	`DHD_PKTTAG_CREDITCHECK
(
	`PKTTAG
(
h
->
ôems
[
i
].
pkt
))));

2680 
	`dhd_wlfc_h™gî_dñëe
(
dhd
->
osh
, 
wlfc
->
h™gî
);

2683 
	`MFREE
(
dhd
->
osh
, dhd->
wlfc_°©e
, (
©ho°_wl_°©us_öfo_t
));

2684 
dhd
->
wlfc_°©e
 = 
NULL
;

2685 
	`dhd_os_wlfc_unblock
(
dhd
);

2689 
	}
}

2693 
	$dhd_¥Ÿ_dump
(
dhd_pub_t
 *
dhdp
, 
bcm°rbuf
 *
°rbuf
)

2695 
	`bcm_b¥ötf
(
°rbuf
, "PrŸocﬁ CDC:Ñeqid %d\n", 
dhdp
->
¥Ÿ
->
ªqid
);

2696 #ifde‡
PROP_TXSTATUS


2697 
	`dhd_os_wlfc_block
(
dhdp
);

2698 i‡(
dhdp
->
wlfc_°©e
)

2699 
	`dhd_wlfc_dump
(
dhdp
, 
°rbuf
);

2700 
	`dhd_os_wlfc_unblock
(
dhdp
);

2702 
	}
}

2705 
	$dhd_¥Ÿ_hdΩush
(
dhd_pub_t
 *
dhd
, 
ifidx
, *
pktbuf
)

2707 #ifde‡
BDC


2708 
bdc_hódî
 *
h
;

2711 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

2713 #ifde‡
BDC


2716 
	`PKTPUSH
(
dhd
->
osh
, 
pktbuf
, 
BDC_HEADER_LEN
);

2718 
h
 = (
bdc_hódî
 *)
	`PKTDATA
(
dhd
->
osh
, 
pktbuf
);

2720 
h
->
Êags
 = (
BDC_PROTO_VER
 << 
BDC_FLAG_VER_SHIFT
);

2721 i‡(
	`PKTSUMNEEDED
(
pktbuf
))

2722 
h
->
Êags
 |
BDC_FLAG_SUM_NEEDED
;

2725 
h
->
¥i‹ôy
 = (
	`PKTPRIO
(
pktbuf
Ë& 
BDC_PRIORITY_MASK
);

2726 
h
->
Êags2
 = 0;

2727 
h
->
d©aOff£t
 = 0;

2729 
	`BDC_SET_IF_IDX
(
h
, 
ifidx
);

2730 
	}
}

2733 
	$dhd_¥Ÿ_hdΩuŒ
(
dhd_pub_t
 *
dhd
, *
ifidx
, *
pktbuf
, 
uch¨
 *
ª‹dî_buf_öfo
,

2734 
uöt
 *
ª‹dî_öfo_Àn
)

2736 #ifde‡
BDC


2737 
bdc_hódî
 *
h
;

2739 
uöt8
 
d©a_off£t
 = 0;

2741 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

2743 #ifde‡
BDC


2744 i‡(
ª‹dî_öfo_Àn
)

2745 *
ª‹dî_öfo_Àn
 = 0;

2748 i‡(
	`PKTLEN
(
dhd
->
osh
, 
pktbuf
Ë< 
BDC_HEADER_LEN
) {

2749 
	`DHD_ERROR
(("%s:Ñx d©®toÿsh‹à(%d < %d)\n", 
__FUNCTION__
,

2750 
	`PKTLEN
(
dhd
->
osh
, 
pktbuf
), 
BDC_HEADER_LEN
));

2751  
BCME_ERROR
;

2754 
h
 = (
bdc_hódî
 *)
	`PKTDATA
(
dhd
->
osh
, 
pktbuf
);

2756 #i‡
	`deföed
(
NDIS630
)

2757 
h
->
d©aOff£t
 = 0;

2760 i‡(!
ifidx
) {

2762 
d©a_off£t
 = 
h
->
d©aOff£t
;

2763 
	`PKTPULL
(
dhd
->
osh
, 
pktbuf
, 
BDC_HEADER_LEN
);

2764 
exô
;

2767 i‡((*
ifidx
 = 
	`BDC_GET_IF_IDX
(
h
)Ë>
DHD_MAX_IFS
) {

2768 
	`DHD_ERROR
(("%s:Ñx data ifnum out ofÑange (%d)\n",

2769 
__FUNCTION__
, *
ifidx
));

2770  
BCME_ERROR
;

2773 i‡(((
h
->
Êags
 & 
BDC_FLAG_VER_MASK
Ë>> 
BDC_FLAG_VER_SHIFT
Ë!
BDC_PROTO_VER
) {

2774 
	`DHD_ERROR
(("%s:Çon-BDCÖacketÑeceived, flags = 0x%x\n",

2775 
	`dhd_i‚ame
(
dhd
, *
ifidx
), 
h
->
Êags
));

2776 i‡(((
h
->
Êags
 & 
BDC_FLAG_VER_MASK
Ë>> 
BDC_FLAG_VER_SHIFT
Ë=
BDC_PROTO_VER_1
)

2777 
h
->
d©aOff£t
 = 0;

2779  
BCME_ERROR
;

2782 i‡(
h
->
Êags
 & 
BDC_FLAG_SUM_GOOD
) {

2783 
	`DHD_INFO
(("%s: BDCÖacketÑeceived with goodÑx-csum, flags 0x%x\n",

2784 
	`dhd_i‚ame
(
dhd
, *
ifidx
), 
h
->
Êags
));

2785 
	`PKTSETSUMGOOD
(
pktbuf
, 
TRUE
);

2788 
	`PKTSETPRIO
(
pktbuf
, (
h
->
¥i‹ôy
 & 
BDC_PRIORITY_MASK
));

2789 
d©a_off£t
 = 
h
->
d©aOff£t
;

2790 
	`PKTPULL
(
dhd
->
osh
, 
pktbuf
, 
BDC_HEADER_LEN
);

2793 #i‡!
	`deföed
(
NDIS630
)

2794 i‡(
	`PKTLEN
(
dhd
->
osh
, 
pktbuf
Ë< (
uöt32
Ë(
d©a_off£t
 << 2)) {

2795 
	`DHD_ERROR
(("%s:Ñx d©®toÿsh‹à(%d < %d)\n", 
__FUNCTION__
,

2796 
	`PKTLEN
(
dhd
->
osh
, 
pktbuf
), (
d©a_off£t
 * 4)));

2797  
BCME_ERROR
;

2800 #ifde‡
PROP_TXSTATUS


2801 i‡(
dhd
->
wlfc_°©e
 &&

2802 ((
©ho°_wl_°©us_öfo_t
*)
dhd
->
wlfc_°©e
)->
¥›tx°©us_mode


2803 !
WLFC_FCMODE_NONE
 &&

2804 (!
	`DHD_PKTTAG_PKTDIR
(
	`PKTTAG
(
pktbuf
)))) {

2808 
	`dhd_os_wlfc_block
(
dhd
);

2809 
	`dhd_wlfc_∑r£_hódî_öfo
(
dhd
, 
pktbuf
, (
d©a_off£t
 << 2),

2810 
ª‹dî_buf_öfo
, 
ª‹dî_öfo_Àn
);

2811 ((
©ho°_wl_°©us_öfo_t
*)
dhd
->
wlfc_°©e
)->
°©s
.
dhd_hdΩuŒs
++;

2812 
	`dhd_os_wlfc_unblock
(
dhd
);

2816 
exô
:

2817 #i‡!
	`deföed
(
NDIS630
)

2818 
	`PKTPULL
(
dhd
->
osh
, 
pktbuf
, (
d©a_off£t
 << 2));

2821 
	}
}

2823 #i‡
deföed
(
PROP_TXSTATUS
)

2825 
	$dhd_wlfc_åiggî_pktcommô
(
dhd_pub_t
 *
dhd
)

2827 i‡(
dhd
->
wlfc_°©e
 &&

2828 (((
©ho°_wl_°©us_öfo_t
*)
dhd
->
wlfc_°©e
)->
¥›tx°©us_mode


2829 !
WLFC_FCMODE_NONE
)) {

2830 
	`dhd_os_wlfc_block
(
dhd
);

2831 
	`dhd_wlfc_commô_∑ckës
(
dhd
->
wlfc_°©e
, (
f_commôpkt_t
)
dhd_bus_txd©a
,

2832 (*)
dhd
->
bus
);

2833 
	`dhd_os_wlfc_unblock
(
dhd
);

2835 
	}
}

2840 
	$dhd_¥Ÿ_©èch
(
dhd_pub_t
 *
dhd
)

2842 
dhd_¥Ÿ_t
 *
cdc
;

2844 i‡(!(
cdc
 = (
dhd_¥Ÿ_t
 *)
	`DHD_OS_PREALLOC
(
dhd
->
osh
, 
DHD_PREALLOC_PROT
,

2845 (
dhd_¥Ÿ_t
)))) {

2846 
	`DHD_ERROR
(("%s: kmÆlo¯Áûed\n", 
__FUNCTION__
));

2847 
Áû
;

2849 
	`mem£t
(
cdc
, 0, (
dhd_¥Ÿ_t
));

2852 i‡((
uöçå
)(&
cdc
->
msg
 + 1Ë!(uöçå)cdc->
buf
) {

2853 
	`DHD_ERROR
(("dhd_prot_t isÇot correctly defined\n"));

2854 
Áû
;

2857 
dhd
->
¥Ÿ
 = 
cdc
;

2858 #ifde‡
BDC


2859 
dhd
->
hdæí
 +
BDC_HEADER_LEN
;

2861 
dhd
->
max˘l
 = 
WLC_IOCTL_MAXLEN
 + (
cdc_io˘l_t
Ë+ 
ROUND_UP_MARGIN
;

2864 
Áû
:

2865 #i‚de‡
CONFIG_DHD_USE_STATIC_BUF


2866 i‡(
cdc
 !
NULL
)

2867 
	`MFREE
(
dhd
->
osh
, 
cdc
, (
dhd_¥Ÿ_t
));

2869  
BCME_NOMEM
;

2870 
	}
}

2874 
	$dhd_¥Ÿ_dëach
(
dhd_pub_t
 *
dhd
)

2876 #ifde‡
PROP_TXSTATUS


2877 
	`dhd_wlfc_deöô
(
dhd
);

2879 #i‚de‡
CONFIG_DHD_USE_STATIC_BUF


2880 
	`MFREE
(
dhd
->
osh
, dhd->
¥Ÿ
, (
dhd_¥Ÿ_t
));

2882 
dhd
->
¥Ÿ
 = 
NULL
;

2883 
	}
}

2886 
	$dhd_¥Ÿ_d°©s
(
dhd_pub_t
 *
dhd
)

2889 
dhd
->
d°©s
.
tx_∑ckës
 = dhd->tx_packets;

2890 
dhd
->
d°©s
.
tx_îr‹s
 = dhd->tx_errors;

2891 
dhd
->
d°©s
.
rx_∑ckës
 = dhd->rx_packets;

2892 
dhd
->
d°©s
.
rx_îr‹s
 = dhd->rx_errors;

2893 
dhd
->
d°©s
.
rx_dr›≥d
 = dhd->rx_dropped;

2894 
dhd
->
d°©s
.
mu…iˇ°
 = dhd->
rx_mu…iˇ°
;

2896 
	}
}

2899 
	$dhd_¥Ÿ_öô
(
dhd_pub_t
 *
dhd
)

2901 
ªt
 = 0;

2902 
wlc_ªv_öfo_t
 
ªvöfo
;

2903 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

2907 
	`mem£t
(&
ªvöfo
, 0, (revinfo));

2908 
ªt
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_GET_REVINFO
, &
ªvöfo
, ‘evöfo), 
FALSE
, 0);

2909 i‡(
ªt
 < 0)

2910 
d⁄e
;

2913 #i‡
	`deföed
(
WL_CFG80211
)

2914 i‡(
dhd_dow∆ﬂd_fw_⁄_drivîlﬂd
)

2916 
ªt
 = 
	`dhd_¥eöô_io˘ls
(
dhd
);

2918 #ifde‡
PROP_TXSTATUS


2919 
ªt
 = 
	`dhd_wlfc_öô
(
dhd
);

2923 
dhd
->
iswl
 = 
TRUE
;

2925 
d⁄e
:

2926  
ªt
;

2927 
	}
}

2930 
	$dhd_¥Ÿ_°›
(
dhd_pub_t
 *
dhd
)

2933 
	}
}

2937 
	$dhd_gë_ho°ª‹dî_pkts
(*
osh
, 
ª‹dî_öfo
 *
±r
, **
pkt
,

2938 
uöt32
 *
pkt_cou¡
, **
µœ°
, 
uöt8
 
°¨t
, uöt8 
íd
)

2940 
uöt
 
i
;

2941 *
∂a°
 = 
NULL
, *
p
;

2942 
uöt32
 
pkt_˙t
 = 0;

2944 i‡(
±r
->
≥nd_pkts
 == 0) {

2945 
	`DHD_REORDER
(("%s:Çÿ∑ckë†öÑe‹dî queuê\n", 
__FUNCTION__
));

2946 *
µœ°
 = 
NULL
;

2947 *
pkt_cou¡
 = 0;

2948 *
pkt
 = 
NULL
;

2951 i‡(
°¨t
 =
íd
)

2952 
i
 = 
±r
->
max_idx
 + 1;

2954 i‡(
°¨t
 > 
íd
)

2955 
i
 = ((
±r
->
max_idx
 + 1Ë- 
°¨t
Ë+ 
íd
;

2957 
i
 = 
íd
 - 
°¨t
;

2959 
i
) {

2960 
p
 = (*)(
±r
->p[
°¨t
]);

2961 
±r
->
p
[
°¨t
] = 
NULL
;

2963 i‡(
p
 !
NULL
) {

2964 i‡(
∂a°
 =
NULL
)

2965 *
pkt
 = 
p
;

2967 
	`PKTSETNEXT
(
osh
, 
∂a°
, 
p
);

2969 
∂a°
 = 
p
;

2970 
pkt_˙t
++;

2972 
i
--;

2973 i‡(
°¨t
++ =
±r
->
max_idx
)

2974 
°¨t
 = 0;

2976 *
µœ°
 = 
∂a°
;

2977 *
pkt_cou¡
 = (
uöt32
)
pkt_˙t
;

2978 
	}
}

2981 
	$dhd_¥o˚ss_pkt_ª‹dî_öfo
(
dhd_pub_t
 *
dhd
, 
uch¨
 *
ª‹dî_öfo_buf
, 
uöt
 
ª‹dî_öfo_Àn
,

2982 **
pkt
, 
uöt32
 *
pkt_cou¡
)

2984 
uöt8
 
Êow_id
, 
max_idx
, 
cur_idx
, 
exp_idx
;

2985 
ª‹dî_öfo
 *
±r
;

2986 
uöt8
 
Êags
;

2987 *
cur_pkt
, *
∂a°
 = 
NULL
;

2988 
uöt32
 
˙t
 = 0;

2990 i‡(
pkt
 =
NULL
) {

2991 i‡(
pkt_cou¡
 !
NULL
)

2992 *
pkt_cou¡
 = 0;

2996 
Êow_id
 = 
ª‹dî_öfo_buf
[
WLHOST_REORDERDATA_FLOWID_OFFSET
];

2997 
Êags
 = 
ª‹dî_öfo_buf
[
WLHOST_REORDERDATA_FLAGS_OFFSET
];

2999 
	`DHD_REORDER
(("Êow_id %d, fœg†0x%02x, idx(%d, %d, %d)\n", 
Êow_id
, 
Êags
,

3000 
ª‹dî_öfo_buf
[
WLHOST_REORDERDATA_CURIDX_OFFSET
],

3001 
ª‹dî_öfo_buf
[
WLHOST_REORDERDATA_EXPIDX_OFFSET
],

3002 
ª‹dî_öfo_buf
[
WLHOST_REORDERDATA_MAXIDX_OFFSET
]));

3005 i‡(
Êags
 == 0xFF) {

3006 
	`DHD_ERROR
(("%s: invÆid fœgs...sÿign‹êthi†∑ckë\n", 
__FUNCTION__
));

3007 *
pkt_cou¡
 = 1;

3011 
cur_pkt
 = *
pkt
;

3012 *
pkt
 = 
NULL
;

3014 
±r
 = 
dhd
->
ª‹dî_bufs
[
Êow_id
];

3015 i‡(
Êags
 & 
WLHOST_REORDERDATA_DEL_FLOW
) {

3016 
uöt32
 
buf_size
 = (
ª‹dî_öfo
);

3018 
	`DHD_REORDER
(("%s: Flags indicatingÅo deleteá flow id %d\n",

3019 
__FUNCTION__
, 
Êow_id
));

3021 i‡(
±r
 =
NULL
) {

3022 
	`DHD_ERROR
(("%s:Ñeceived flagsÅo cleanup, butÇo flow (%d) yet\n",

3023 
__FUNCTION__
, 
Êow_id
));

3024 *
pkt_cou¡
 = 1;

3025 *
pkt
 = 
cur_pkt
;

3029 
	`dhd_gë_ho°ª‹dî_pkts
(
dhd
->
osh
, 
±r
, 
pkt
, &
˙t
, &
∂a°
,

3030 
±r
->
exp_idx
,Ötr->exp_idx);

3032 i‡(
∂a°
) {

3033 
	`PKTSETNEXT
(
dhd
->
osh
, 
∂a°
, 
cur_pkt
);

3034 
˙t
++;

3037 i‡(
˙t
 != 0) {

3038 
	`DHD_ERROR
(("%s: del flow: something fishy,ÖendingÖackets %d\n",

3039 
__FUNCTION__
, 
˙t
));

3041 *
pkt
 = 
cur_pkt
;

3042 
˙t
 = 1;

3044 
buf_size
 +((
±r
->
max_idx
 + 1) * (*));

3045 
	`MFREE
(
dhd
->
osh
, 
±r
, 
buf_size
);

3046 
dhd
->
ª‹dî_bufs
[
Êow_id
] = 
NULL
;

3047 *
pkt_cou¡
 = 
˙t
;

3051 i‡(
±r
 =
NULL
) {

3052 
uöt32
 
buf_size_Æloc
 = (
ª‹dî_öfo_t
);

3053 
max_idx
 = 
ª‹dî_öfo_buf
[
WLHOST_REORDERDATA_MAXIDX_OFFSET
];

3055 
buf_size_Æloc
 +((
max_idx
 + 1) * (*));

3058 
	`DHD_REORDER
(("%s:álloc buffer of size %d size,Ñeorder info id %d, maxidx %d\n",

3059 
__FUNCTION__
, 
buf_size_Æloc
, 
Êow_id
, 
max_idx
));

3060 
±r
 = (
ª‹dî_öfo
 *)
	`MALLOC
(
dhd
->
osh
, 
buf_size_Æloc
);

3061 i‡(
±r
 =
NULL
) {

3062 
	`DHD_ERROR
(("%s: MÆlo¯ÁûedÅÿÆlo¯buf„r\n", 
__FUNCTION__
));

3063 *
pkt_cou¡
 = 1;

3066 
	`bzîo
(
±r
, 
buf_size_Æloc
);

3067 
dhd
->
ª‹dî_bufs
[
Êow_id
] = 
±r
;

3068 
±r
->
p
 = (*)(ptr+1);

3069 
±r
->
max_idx
 = max_idx;

3071 i‡(
Êags
 & 
WLHOST_REORDERDATA_NEW_HOLE
) {

3072 
	`DHD_REORDER
(("%s:Çew hﬁe, sÿ˛ónu∞≥ndög buf„rs\n", 
__FUNCTION__
));

3073 i‡(
±r
->
≥nd_pkts
) {

3074 
	`dhd_gë_ho°ª‹dî_pkts
(
dhd
->
osh
, 
±r
, 
pkt
, &
˙t
, &
∂a°
,

3075 
±r
->
exp_idx
,Ötr->exp_idx);

3076 
±r
->
≥nd_pkts
 = 0;

3078 
±r
->
cur_idx
 = 
ª‹dî_öfo_buf
[
WLHOST_REORDERDATA_CURIDX_OFFSET
];

3079 
±r
->
exp_idx
 = 
ª‹dî_öfo_buf
[
WLHOST_REORDERDATA_EXPIDX_OFFSET
];

3080 
±r
->
max_idx
 = 
ª‹dî_öfo_buf
[
WLHOST_REORDERDATA_MAXIDX_OFFSET
];

3081 
±r
->
p
[±r->
cur_idx
] = 
cur_pkt
;

3082 
±r
->
≥nd_pkts
++;

3083 *
pkt_cou¡
 = 
˙t
;

3085 i‡(
Êags
 & 
WLHOST_REORDERDATA_CURIDX_VALID
) {

3086 
cur_idx
 = 
ª‹dî_öfo_buf
[
WLHOST_REORDERDATA_CURIDX_OFFSET
];

3087 
exp_idx
 = 
ª‹dî_öfo_buf
[
WLHOST_REORDERDATA_EXPIDX_OFFSET
];

3090 i‡((
exp_idx
 =
±r
->exp_idxË&& (
cur_idx
 !=Ötr->exp_idx)) {

3093 i‡(
±r
->
p
[
cur_idx
] !
NULL
) {

3094 
	`DHD_REORDER
(("%s: HOLE: ERROR bufferÖending..free it\n",

3095 
__FUNCTION__
));

3096 
	`PKTFREE
(
dhd
->
osh
, 
±r
->
p
[
cur_idx
], 
TRUE
);

3097 
±r
->
p
[
cur_idx
] = 
NULL
;

3099 
±r
->
p
[
cur_idx
] = 
cur_pkt
;

3100 
±r
->
≥nd_pkts
++;

3101 
±r
->
cur_idx
 = cur_idx;

3102 
	`DHD_REORDER
(("%s: fill upá hole..pendingÖackets is %d\n",

3103 
__FUNCTION__
, 
±r
->
≥nd_pkts
));

3104 *
pkt_cou¡
 = 0;

3105 *
pkt
 = 
NULL
;

3107 i‡(
±r
->
exp_idx
 =
cur_idx
) {

3109 
	`DHD_REORDER
(("%s: gotÅheÑight oneÇow, cur_idx is %d\n",

3110 
__FUNCTION__
, 
cur_idx
));

3111 i‡(
±r
->
p
[
cur_idx
] !
NULL
) {

3112 
	`DHD_REORDER
(("%s: Error bufferÖending..free it\n",

3113 
__FUNCTION__
));

3114 
	`PKTFREE
(
dhd
->
osh
, 
±r
->
p
[
cur_idx
], 
TRUE
);

3115 
±r
->
p
[
cur_idx
] = 
NULL
;

3117 
±r
->
p
[
cur_idx
] = 
cur_pkt
;

3118 
±r
->
≥nd_pkts
++;

3120 
±r
->
cur_idx
 = cur_idx;

3121 
±r
->
exp_idx
 =Éxp_idx;

3123 
	`dhd_gë_ho°ª‹dî_pkts
(
dhd
->
osh
, 
±r
, 
pkt
, &
˙t
, &
∂a°
,

3124 
cur_idx
, 
exp_idx
);

3125 
±r
->
≥nd_pkts
 -(
uöt8
)
˙t
;

3126 *
pkt_cou¡
 = 
˙t
;

3127 
	`DHD_REORDER
(("%s: freeing up buffers %d, stillÖending %d\n",

3128 
__FUNCTION__
, 
˙t
, 
±r
->
≥nd_pkts
));

3131 
uöt8
 
íd_idx
;

3132 
boﬁ
 
Êush_cuºít
 = 
FALSE
;

3134 
	`DHD_REORDER
(("%s:, flow %d, both moved, cur %d(%d),Éxp %d(%d)\n",

3135 
__FUNCTION__
, 
Êow_id
, 
±r
->
cur_idx
, cur_idx,

3136 
±r
->
exp_idx
,Éxp_idx));

3137 i‡(
Êags
 & 
WLHOST_REORDERDATA_FLUSH_ALL
)

3138 
íd_idx
 = 
±r
->
exp_idx
;

3140 
íd_idx
 = 
exp_idx
;

3143 
	`dhd_gë_ho°ª‹dî_pkts
(
dhd
->
osh
, 
±r
, 
pkt
, &
˙t
, &
∂a°
,

3144 
±r
->
exp_idx
, 
íd_idx
);

3146 i‡(
cur_idx
 =
±r
->
max_idx
) {

3147 i‡(
exp_idx
 == 0)

3148 
Êush_cuºít
 = 
TRUE
;

3150 i‡(
exp_idx
 =
cur_idx
 + 1)

3151 
Êush_cuºít
 = 
TRUE
;

3153 i‡(
Êush_cuºít
) {

3154 i‡(
∂a°
)

3155 
	`PKTSETNEXT
(
dhd
->
osh
, 
∂a°
, 
cur_pkt
);

3157 *
pkt
 = 
cur_pkt
;

3158 
˙t
++;

3161 
±r
->
p
[
cur_idx
] = 
cur_pkt
;

3162 
±r
->
≥nd_pkts
++;

3164 
±r
->
exp_idx
 =Éxp_idx;

3165 
±r
->
cur_idx
 = cur_idx;

3166 *
pkt_cou¡
 = 
˙t
;

3170 
uöt8
 
íd_idx
;

3172 
exp_idx
 = 
ª‹dî_öfo_buf
[
WLHOST_REORDERDATA_EXPIDX_OFFSET
];

3174 
	`DHD_REORDER
(("%s: moveÅhe window, cur_idx is %d,Éxp is %d,ÇewÉxp is %d\n",

3175 
__FUNCTION__
, 
±r
->
cur_idx
,Öå->
exp_idx
,Éxp_idx));

3176 i‡(
Êags
 & 
WLHOST_REORDERDATA_FLUSH_ALL
)

3177 
íd_idx
 = 
±r
->
exp_idx
;

3179 
íd_idx
 = 
exp_idx
;

3181 
	`dhd_gë_ho°ª‹dî_pkts
(
dhd
->
osh
, 
±r
, 
pkt
, &
˙t
, &
∂a°
,Öå->
exp_idx
, 
íd_idx
);

3182 
±r
->
≥nd_pkts
 -(
uöt8
)
˙t
;

3183 i‡(
∂a°
)

3184 
	`PKTSETNEXT
(
dhd
->
osh
, 
∂a°
, 
cur_pkt
);

3186 *
pkt
 = 
cur_pkt
;

3187 
˙t
++;

3188 *
pkt_cou¡
 = 
˙t
;

3190 
±r
->
exp_idx
 =Éxp_idx;

3193 
	}
}

	@dhd_cfg80211.c

27 
	~<√t/π√éök.h
>

29 
	~<bcmutûs.h
>

30 
	~<wldev_comm⁄.h
>

31 
	~<wl_cfg80211.h
>

32 
	~<dhd_cfg80211.h
>

34 #ifde‡
PKT_FILTER_SUPPORT


35 
	~<dngl_°©s.h
>

36 
	~<dhd.h
>

39 
wl_¥iv
 *
wlcfg_drv_¥iv
;

41 #ifde‡
PKT_FILTER_SUPPORT


42 
uöt
 
dhd_pkt_fûãr_íabÀ
;

43 
uöt
 
dhd_ma°î_mode
;

44 
dhd_pktfûãr_ofÊﬂd_íabÀ
(
dhd_pub_t
 * 
dhd
, *
¨g
, 
íabÀ
, 
ma°î_mode
);

47 
	gdhd_d⁄gÀ_up
 = 
FALSE
;

49 
	~<dngl_°©s.h
>

50 
	~<dhd.h
>

51 
	~<dhdio˘l.h
>

52 
	~<wlio˘l.h
>

53 
	~<dhd_cfg80211.h
>

55 
s32
 
wl_d⁄gÀ_up
(
√t_devi˚
 *
ndev
, 
u32
 
up
);

61 
s32
 
	$dhd_cfg80211_öô
(
wl_¥iv
 *
wl
)

63 
dhd_d⁄gÀ_up
 = 
FALSE
;

65 
	}
}

67 
s32
 
	$dhd_cfg80211_deöô
(
wl_¥iv
 *
wl
)

69 
dhd_d⁄gÀ_up
 = 
FALSE
;

71 
	}
}

73 
s32
 
	$dhd_cfg80211_down
(
wl_¥iv
 *
wl
)

75 
dhd_d⁄gÀ_up
 = 
FALSE
;

77 
	}
}

79 
s32
 
	$dhd_cfg80211_£t_p2p_öfo
(
wl_¥iv
 *
wl
, 
vÆ
)

81 
dhd_pub_t
 *
dhd
 = (dhd_pub_à*)(
wl
->
pub
);

82 
dhd
->
›_mode
 |
vÆ
;

83 
	`WL_ERR
(("Së : op_mode=0x%04x\n", 
dhd
->
›_mode
));

84 #ifde‡
ARP_OFFLOAD_SUPPORT


85 i‡(
dhd
->
¨p_vîsi⁄
 == 1) {

87 
	`dhd_¨p_ofÊﬂd_£t
(
dhd
, 0);

88 
	`dhd_¨p_ofÊﬂd_íabÀ
(
dhd
, 
Ál£
);

93 
	}
}

95 
s32
 
	$dhd_cfg80211_˛ón_p2p_öfo
(
wl_¥iv
 *
wl
)

97 
dhd_pub_t
 *
dhd
 = (dhd_pub_à*)(
wl
->
pub
);

98 
dhd
->
›_mode
 &~(
DHD_FLAG_P2P_GC_MODE
 | 
DHD_FLAG_P2P_GO_MODE
);

99 
	`WL_ERR
(("CÀ™ : op_mode=0x%04x\n", 
dhd
->
›_mode
));

101 #ifde‡
ARP_OFFLOAD_SUPPORT


102 i‡(
dhd
->
¨p_vîsi⁄
 == 1) {

104 
	`dhd_¨p_ofÊﬂd_£t
(
dhd
, 
dhd_¨p_mode
);

105 
	`dhd_¨p_ofÊﬂd_íabÀ
(
dhd
, 
åue
);

110 
	}
}

112 
s32
 
	$wl_d⁄gÀ_up
(
√t_devi˚
 *
ndev
, 
u32
 
up
)

114 
s32
 
îr
 = 0;

116 
îr
 = 
	`wldev_io˘l
(
ndev
, 
WLC_UP
, &
up
, (up), 
åue
);

117 i‡(
	`u∆ikñy
(
îr
)) {

118 
	`WL_ERR
(("WLC_UPÉº‹ (%d)\n", 
îr
));

120  
îr
;

121 
	}
}

122 
s32
 
	$dhd_c⁄fig_d⁄gÀ
(
wl_¥iv
 *
wl
, 
boﬁ
 
√ed_lock
)

124 #i‚de‡
DHD_SDALIGN


125 
	#DHD_SDALIGN
 32

	)

127 
√t_devi˚
 *
ndev
;

128 
s32
 
îr
 = 0;

130 
	`WL_TRACE
(("In\n"));

131 i‡(
dhd_d⁄gÀ_up
) {

132 
	`WL_ERR
(("Dongle isálready up\n"));

133  
îr
;

136 
ndev
 = 
	`wl_to_¥mry_ndev
(
wl
);

138 i‡(
√ed_lock
)

139 
	`π∆_lock
();

141 
îr
 = 
	`wl_d⁄gÀ_up
(
ndev
, 0);

142 i‡(
	`u∆ikñy
(
îr
)) {

143 
	`WL_ERR
(("wl_dongle_up failed\n"));

144 
deÁu…_c⁄f_out
;

146 
dhd_d⁄gÀ_up
 = 
åue
;

148 
deÁu…_c⁄f_out
:

149 i‡(
√ed_lock
)

150 
	`π∆_u∆ock
();

151  
îr
;

153 
	}
}

157 
	#COEX_DHCP


	)

159 #i‡
deföed
(
COEX_DHCP
)

162 
	#BT_DHCP_eSCO_FIX


	)

164 
	#BT_DHCP_USE_FLAGS


	)

166 
	#BT_DHCP_OPPR_WIN_TIME
 2500

	)

168 
	#BT_DHCP_FLAG_FORCE_TIME
 5500

	)

170 
	ewl_cfg80211_btc€x_°©us
 {

171 
	mBT_DHCP_IDLE
,

172 
	mBT_DHCP_START
,

173 
	mBT_DHCP_OPPR_WIN
,

174 
	mBT_DHCP_FLAG_FORCE_TIMEOUT


182 
	$dev_wlc_ötv¨_gë_ªg
(
√t_devi˚
 *
dev
, *
«me
,

183 
uöt
 
ªg
, *
ªtvÆ
)

186 
buf
[
WLC_IOCTL_SMLEN
];

187 
vÆ
;

188 } 
v¨
;

189 
îr‹
;

191 
	`bcm_mkiov¨
(
«me
, (*)(&
ªg
), (reg),

192 (*)(&
v¨
), (v¨.
buf
));

193 
îr‹
 = 
	`wldev_io˘l
(
dev
, 
WLC_GET_VAR
, (*)(&
v¨
), (v¨.
buf
), 
Ál£
);

195 *
ªtvÆ
 = 
	`dtoh32
(
v¨
.
vÆ
);

196  (
îr‹
);

197 
	}
}

200 
	$dev_wlc_bufv¨_£t
(
√t_devi˚
 *
dev
, *
«me
, *
buf
, 
Àn
)

202 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2, 6, 31)

203 
io˘lbuf_loˇl
[1024];

205 
io˘lbuf_loˇl
[1024];

208 
	`bcm_mkiov¨
(
«me
, 
buf
, 
Àn
, 
io˘lbuf_loˇl
, (ioctlbuf_local));

210  (
	`wldev_io˘l
(
dev
, 
WLC_SET_VAR
, 
io˘lbuf_loˇl
, (io˘lbuf_loˇl), 
åue
));

211 
	}
}

217 
	$dev_wlc_ötv¨_£t_ªg
(
√t_devi˚
 *
dev
, *
«me
, *
addr
, * 
vÆ
)

219 
ªg_addr
[8];

221 
	`mem£t
(
ªg_addr
, 0, (reg_addr));

222 
	`mem˝y
((*)&
ªg_addr
[0], (*)
addr
, 4);

223 
	`mem˝y
((*)&
ªg_addr
[4], (*)
vÆ
, 4);

225  (
	`dev_wlc_bufv¨_£t
(
dev
, 
«me
, (*)&
ªg_addr
[0], (reg_addr)));

226 
	}
}

228 
boﬁ
 
	$btc€x_is_sco_a˘ive
(
√t_devi˚
 *
dev
)

230 
ioc_ªs
 = 0;

231 
boﬁ
 
ªs
 = 
FALSE
;

232 
sco_id_˙t
 = 0;

233 
∑øm27
;

234 
i
;

236 
i
 = 0; i < 12; i++) {

238 
ioc_ªs
 = 
	`dev_wlc_ötv¨_gë_ªg
(
dev
, "btc_∑øms", 27, &
∑øm27
);

240 
	`WL_TRACE
(("%s, sample[%d], btcÖarams: 27:%x\n",

241 
__FUNCTION__
, 
i
, 
∑øm27
));

243 i‡(
ioc_ªs
 < 0) {

244 
	`WL_ERR
(("%†io¯ªad bt¯∑øm†îr‹\n", 
__FUNCTION__
));

248 i‡((
∑øm27
 & 0x6) == 2) {

249 
sco_id_˙t
++;

252 i‡(
sco_id_˙t
 > 2) {

253 
	`WL_TRACE
(("%s, sco/esco detected,Ökt id_cnt:%d samples:%d\n",

254 
__FUNCTION__
, 
sco_id_˙t
, 
i
));

255 
ªs
 = 
TRUE
;

259 
	`m¶ìp
(5);

262  
ªs
;

263 
	}
}

265 #i‡
deföed
(
BT_DHCP_eSCO_FIX
)

267 
	$£t_btc_esco_∑øms
(
√t_devi˚
 *
dev
, 
boﬁ
 
åump_sco
)

269 
boﬁ
 
ßved_°©us
 = 
FALSE
;

271 
buf_ªg50va_dh˝_⁄
[8] =

273 
buf_ªg51va_dh˝_⁄
[8] =

275 
buf_ªg64va_dh˝_⁄
[8] =

277 
buf_ªg65va_dh˝_⁄
[8] =

279 
buf_ªg71va_dh˝_⁄
[8] =

281 
uöt32
 
ªgaddr
;

282 
uöt32
 
ßved_ªg50
;

283 
uöt32
 
ßved_ªg51
;

284 
uöt32
 
ßved_ªg64
;

285 
uöt32
 
ßved_ªg65
;

286 
uöt32
 
ßved_ªg71
;

288 i‡(
åump_sco
) {

294 
	`WL_TRACE
(("DoÇew SCO/eSCO coexálgo {save &"

296 i‡((!
	`dev_wlc_ötv¨_gë_ªg
(
dev
, "btc_∑øms", 50, &
ßved_ªg50
)) &&

297 (!
	`dev_wlc_ötv¨_gë_ªg
(
dev
, "btc_∑øms", 51, &
ßved_ªg51
)) &&

298 (!
	`dev_wlc_ötv¨_gë_ªg
(
dev
, "btc_∑øms", 64, &
ßved_ªg64
)) &&

299 (!
	`dev_wlc_ötv¨_gë_ªg
(
dev
, "btc_∑øms", 65, &
ßved_ªg65
)) &&

300 (!
	`dev_wlc_ötv¨_gë_ªg
(
dev
, "btc_∑øms", 71, &
ßved_ªg71
))) {

301 
ßved_°©us
 = 
TRUE
;

302 
	`WL_TRACE
(("%s saved bt_params[50,51,64,65,71]:"

304 
__FUNCTION__
, 
ßved_ªg50
, 
ßved_ªg51
,

305 
ßved_ªg64
, 
ßved_ªg65
, 
ßved_ªg71
));

307 
	`WL_ERR
((":%s: save btc_params failed\n",

308 
__FUNCTION__
));

309 
ßved_°©us
 = 
FALSE
;

313 
	`WL_TRACE
(("override with [50,51,64,65,71]:"

315 *(
u32
 *)(
buf_ªg50va_dh˝_⁄
+4),

316 *(
u32
 *)(
buf_ªg51va_dh˝_⁄
+4),

317 *(
u32
 *)(
buf_ªg64va_dh˝_⁄
+4),

318 *(
u32
 *)(
buf_ªg65va_dh˝_⁄
+4),

319 *(
u32
 *)(
buf_ªg71va_dh˝_⁄
+4)));

321 
	`dev_wlc_bufv¨_£t
(
dev
, "btc_params",

322 (*)&
buf_ªg50va_dh˝_⁄
[0], 8);

323 
	`dev_wlc_bufv¨_£t
(
dev
, "btc_params",

324 (*)&
buf_ªg51va_dh˝_⁄
[0], 8);

325 
	`dev_wlc_bufv¨_£t
(
dev
, "btc_params",

326 (*)&
buf_ªg64va_dh˝_⁄
[0], 8);

327 
	`dev_wlc_bufv¨_£t
(
dev
, "btc_params",

328 (*)&
buf_ªg65va_dh˝_⁄
[0], 8);

329 
	`dev_wlc_bufv¨_£t
(
dev
, "btc_params",

330 (*)&
buf_ªg71va_dh˝_⁄
[0], 8);

332 
ßved_°©us
 = 
TRUE
;

333 } i‡(
ßved_°©us
) {

335 
	`WL_TRACE
(("DoÇew SCO/eSCO coexálgo {save &"

338 
ªgaddr
 = 50;

339 
	`dev_wlc_ötv¨_£t_ªg
(
dev
, "btc_params",

340 (*)&
ªgaddr
, (*)&
ßved_ªg50
);

341 
ªgaddr
 = 51;

342 
	`dev_wlc_ötv¨_£t_ªg
(
dev
, "btc_params",

343 (*)&
ªgaddr
, (*)&
ßved_ªg51
);

344 
ªgaddr
 = 64;

345 
	`dev_wlc_ötv¨_£t_ªg
(
dev
, "btc_params",

346 (*)&
ªgaddr
, (*)&
ßved_ªg64
);

347 
ªgaddr
 = 65;

348 
	`dev_wlc_ötv¨_£t_ªg
(
dev
, "btc_params",

349 (*)&
ªgaddr
, (*)&
ßved_ªg65
);

350 
ªgaddr
 = 71;

351 
	`dev_wlc_ötv¨_£t_ªg
(
dev
, "btc_params",

352 (*)&
ªgaddr
, (*)&
ßved_ªg71
);

354 
	`WL_TRACE
(("restore bt_params[50,51,64,65,71]:"

356 
ßved_ªg50
, 
ßved_ªg51
, 
ßved_ªg64
,

357 
ßved_ªg65
, 
ßved_ªg71
));

359 
ßved_°©us
 = 
FALSE
;

361 
	`WL_ERR
((":%sáttÅoÑestoreÇot saved BTCOEXÖarams\n",

362 
__FUNCTION__
));

366 
	}
}

370 
	$wl_cfg80211_bt_£tÊag
(
√t_devi˚
 *
dev
, 
boﬁ
 
£t
)

372 #i‡
	`deföed
(
BT_DHCP_USE_FLAGS
)

373 
buf_Êag7_dh˝_⁄
[8] = { 7, 00, 00, 00, 0x1, 0x0, 0x00, 0x00 };

374 
buf_Êag7_deÁu…
[8] = { 7, 00, 00, 00, 0x0, 0x00, 0x00, 0x00};

378 #i‡
	`deföed
(
BT_DHCP_eSCO_FIX
)

380 
	`£t_btc_esco_∑øms
(
dev
, 
£t
);

383 #i‡
	`deföed
(
BT_DHCP_USE_FLAGS
)

384 
	`WL_TRACE
(("WI-FIÖri‹ôy boo° vü bàÊags, së:%d\n", 
£t
));

385 i‡(
£t
 =
TRUE
)

387 
	`dev_wlc_bufv¨_£t
(
dev
, "btc_flags",

388 (*)&
buf_Êag7_dh˝_⁄
[0],

389 (
buf_Êag7_dh˝_⁄
));

392 
	`dev_wlc_bufv¨_£t
(
dev
, "btc_flags",

393 (*)&
buf_Êag7_deÁu…
[0],

394 (
buf_Êag7_deÁu…
));

396 
	}
}

398 
	$wl_cfg80211_bt_timîfunc
(
ul⁄g
 
d©a
)

400 
btc€x_öfo
 *
bt_loˇl
 = (btc€x_öfÿ*)
d©a
;

401 
	`WL_TRACE
(("%s\n", 
__FUNCTION__
));

402 
bt_loˇl
->
timî_⁄
 = 0;

403 
	`scheduÀ_w‹k
(&
bt_loˇl
->
w‹k
);

404 
	}
}

406 
	$wl_cfg80211_bt_h™dÀr
(
w‹k_°ru˘
 *
w‹k
)

408 
btc€x_öfo
 *
btcx_öf
;

410 
btcx_öf
 = 
	`c⁄èöî_of
(
w‹k
, 
btc€x_öfo
, work);

412 i‡(
btcx_öf
->
timî_⁄
) {

413 
btcx_öf
->
timî_⁄
 = 0;

414 
	`dñ_timî_sync
(&
btcx_öf
->
timî
);

417 
btcx_öf
->
bt_°©e
) {

418 
BT_DHCP_START
:

422 
	`WL_TRACE
(("%s bt_dhcp stm: started \n",

423 
__FUNCTION__
));

424 
btcx_öf
->
bt_°©e
 = 
BT_DHCP_OPPR_WIN
;

425 
	`mod_timî
(&
btcx_öf
->
timî
,

426 
jiffõs
 + 
	`m£cs_to_jiffõs
(
BT_DHCP_OPPR_WIN_TIME
));

427 
btcx_öf
->
timî_⁄
 = 1;

430 
BT_DHCP_OPPR_WIN
:

431 i‡(
btcx_öf
->
dh˝_d⁄e
) {

432 
	`WL_TRACE
(("%s DHCP Done before T1Éxpiration\n",

433 
__FUNCTION__
));

434 
btc_c€x_idÀ
;

440 
	`WL_TRACE
(("%†DHCP T1:%dÉxpúed\n", 
__FUNCTION__
,

441 
BT_DHCP_OPPR_WIN_TIME
));

442 i‡(
btcx_öf
->
dev
)

443 
	`wl_cfg80211_bt_£tÊag
(
btcx_öf
->
dev
, 
TRUE
);

444 
btcx_öf
->
bt_°©e
 = 
BT_DHCP_FLAG_FORCE_TIMEOUT
;

445 
	`mod_timî
(&
btcx_öf
->
timî
,

446 
jiffõs
 + 
	`m£cs_to_jiffõs
(
BT_DHCP_FLAG_FORCE_TIME
));

447 
btcx_öf
->
timî_⁄
 = 1;

450 
BT_DHCP_FLAG_FORCE_TIMEOUT
:

451 i‡(
btcx_öf
->
dh˝_d⁄e
) {

452 
	`WL_TRACE
(("%s DHCP Done before T2Éxpiration\n",

453 
__FUNCTION__
));

456 
	`WL_TRACE
(("%s DHCP wait interval T2:%d"

457 "m£¯expúed\n", 
__FUNCTION__
,

458 
BT_DHCP_FLAG_FORCE_TIME
));

462 i‡(
btcx_öf
->
dev
)

463 
	`wl_cfg80211_bt_£tÊag
(
btcx_öf
->
dev
, 
FALSE
);

464 
btc_c€x_idÀ
:

465 
btcx_öf
->
bt_°©e
 = 
BT_DHCP_IDLE
;

466 
btcx_öf
->
timî_⁄
 = 0;

470 
	`WL_ERR
(("%†îr‹ g_°©us=%d !!!\n", 
__FUNCTION__
,

471 
btcx_öf
->
bt_°©e
));

472 i‡(
btcx_öf
->
dev
)

473 
	`wl_cfg80211_bt_£tÊag
(
btcx_öf
->
dev
, 
FALSE
);

474 
btcx_öf
->
bt_°©e
 = 
BT_DHCP_IDLE
;

475 
btcx_öf
->
timî_⁄
 = 0;

479 
	`√t_os_wake_u∆ock
(
btcx_öf
->
dev
);

480 
	}
}

482 
	$wl_cfg80211_btc€x_öô
(
wl_¥iv
 *
wl
)

484 
btc€x_öfo
 *
btco_öf
 = 
NULL
;

486 
btco_öf
 = 
	`kmÆloc
((
btc€x_öfo
), 
GFP_KERNEL
);

487 i‡(!
btco_öf
)

488  -
ENOMEM
;

490 
btco_öf
->
bt_°©e
 = 
BT_DHCP_IDLE
;

491 
btco_öf
->
ts_dh˝_°¨t
 = 0;

492 
btco_öf
->
ts_dh˝_ok
 = 0;

494 
btco_öf
->
timî_ms
 = 10;

495 
	`öô_timî
(&
btco_öf
->
timî
);

496 
btco_öf
->
timî
.
d©a
 = (
ul⁄g
)btco_inf;

497 
btco_öf
->
timî
.
fun˘i⁄
 = 
wl_cfg80211_bt_timîfunc
;

499 
btco_öf
->
dev
 = 
wl
->
wdev
->
√tdev
;

501 
	`INIT_WORK
(&
btco_öf
->
w‹k
, 
wl_cfg80211_bt_h™dÀr
);

503 
wl
->
btc€x_öfo
 = 
btco_öf
;

505 
	}
}

507 
	$wl_cfg80211_btc€x_deöô
(
wl_¥iv
 *
wl
)

509 i‡(!
wl
->
btc€x_öfo
)

512 i‡(
wl
->
btc€x_öfo
->
timî_⁄
) {

513 
wl
->
btc€x_öfo
->
timî_⁄
 = 0;

514 
	`dñ_timî_sync
(&
wl
->
btc€x_öfo
->
timî
);

517 
	`ˇn˚l_w‹k_sync
(&
wl
->
btc€x_öfo
->
w‹k
);

519 
	`k‰ì
(
wl
->
btc€x_öfo
);

520 
wl
->
btc€x_öfo
 = 
NULL
;

521 
	}
}

524 
	$wl_cfg80211_£t_btc€x_dh˝
(
√t_devi˚
 *
dev
, *
comm™d
)

527 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

528 
powîmode_vÆ
 = 0;

529 
buf_ªg66va_dh˝_⁄
[8] = { 66, 00, 00, 00, 0x10, 0x27, 0x00, 0x00 };

530 
buf_ªg41va_dh˝_⁄
[8] = { 41, 00, 00, 00, 0x33, 0x00, 0x00, 0x00 };

531 
buf_ªg68va_dh˝_⁄
[8] = { 68, 00, 00, 00, 0x90, 0x01, 0x00, 0x00 };

533 
uöt32
 
ªgaddr
;

534 
uöt32
 
ßved_ªg66
;

535 
uöt32
 
ßved_ªg41
;

536 
uöt32
 
ßved_ªg68
;

537 
boﬁ
 
ßved_°©us
 = 
FALSE
;

539 #ifde‡
COEX_DHCP


540 
buf_Êag7_deÁu…
[8] = { 7, 00, 00, 00, 0x0, 0x00, 0x00, 0x00};

541 
btc€x_öfo
 *
btco_öf
 = 
wl
->btcoex_info;

544 #ifde‡
PKT_FILTER_SUPPORT


545 
dhd_pub_t
 *
dhd
 = (dhd_pub_à*)(
wl
->
pub
);

549 
	`°∫˝y
((*)&
powîmode_vÆ
, 
comm™d
 + 
	`°æí
("BTCOEXMODE") +1, 1);

551 i‡(
	`°∫icmp
((*)&
powîmode_vÆ
, "1", 
	`°æí
("1")) == 0) {

552 
	`WL_TRACE_HW4
(("%s: DHCP sessi⁄ sèπs\n", 
__FUNCTION__
));

554 #i‡
	`deföed
(
DHCP_SCAN_SUPPRESS
)

556 
	`wl_cfg80211_sˇn_suµªss
(
dev
, 1);

559 #ifde‡
PKT_FILTER_SUPPORT


560 
dhd
->
dh˝_ö_¥ogªss
 = 1;

562 i‡(
dhd
->
óæy_su•íded
) {

563 
	`WL_TRACE_HW4
(("DHCP inÖrogressing , disableÖacket filter!!!\n"));

564 
	`dhd_íabÀ_∑ckë_fûãr
(0, 
dhd
);

569 i‡((
ßved_°©us
 =
FALSE
) &&

570 (!
	`dev_wlc_ötv¨_gë_ªg
(
dev
, "btc_∑øms", 66, &
ßved_ªg66
)) &&

571 (!
	`dev_wlc_ötv¨_gë_ªg
(
dev
, "btc_∑øms", 41, &
ßved_ªg41
)) &&

572 (!
	`dev_wlc_ötv¨_gë_ªg
(
dev
, "btc_∑øms", 68, &
ßved_ªg68
))) {

573 
ßved_°©us
 = 
TRUE
;

574 
	`WL_TRACE
(("Saved 0x%x 0x%x 0x%x\n",

575 
ßved_ªg66
, 
ßved_ªg41
, 
ßved_ªg68
));

580 #ifde‡
COEX_DHCP


582 i‡(
	`btc€x_is_sco_a˘ive
(
dev
)) {

584 
	`dev_wlc_bufv¨_£t
(
dev
, "btc_params",

585 (*)&
buf_ªg66va_dh˝_⁄
[0],

586 (
buf_ªg66va_dh˝_⁄
));

588 
	`dev_wlc_bufv¨_£t
(
dev
, "btc_params",

589 (*)&
buf_ªg41va_dh˝_⁄
[0],

590 (
buf_ªg41va_dh˝_⁄
));

592 
	`dev_wlc_bufv¨_£t
(
dev
, "btc_params",

593 (*)&
buf_ªg68va_dh˝_⁄
[0],

594 (
buf_ªg68va_dh˝_⁄
));

595 
ßved_°©us
 = 
TRUE
;

597 
btco_öf
->
bt_°©e
 = 
BT_DHCP_START
;

598 
btco_öf
->
timî_⁄
 = 1;

599 
	`mod_timî
(&
btco_öf
->
timî
, btco_öf->timî.
expúes
);

600 
	`WL_TRACE
(("%sÉnable BT DHCP Timer\n",

601 
__FUNCTION__
));

605 i‡(
ßved_°©us
 =
TRUE
) {

606 
	`WL_ERR
(("%†wa†ˇŒed w/ÿDHCP OFF. C⁄töue\n", 
__FUNCTION__
));

609 i‡(
	`°∫icmp
((*)&
powîmode_vÆ
, "2", 
	`°æí
("2")) == 0) {

612 #ifde‡
PKT_FILTER_SUPPORT


613 
dhd
->
dh˝_ö_¥ogªss
 = 0;

614 
	`WL_TRACE_HW4
(("%s: DHCP i†com∂ëê\n", 
__FUNCTION__
));

616 #i‡
	`deföed
(
DHCP_SCAN_SUPPRESS
)

618 
	`wl_cfg80211_sˇn_suµªss
(
dev
, 0);

622 i‡(
dhd
->
óæy_su•íded
) {

623 
	`WL_TRACE_HW4
(("DHCP is complete ,ÉnableÖacket filter!!!\n"));

624 
	`dhd_íabÀ_∑ckë_fûãr
(1, 
dhd
);

630 #ifde‡
COEX_DHCP


632 
	`WL_TRACE
(("%†dißbÀ BT DHCP Timî\n", 
__FUNCTION__
));

633 i‡(
btco_öf
->
timî_⁄
) {

634 
btco_öf
->
timî_⁄
 = 0;

635 
	`dñ_timî_sync
(&
btco_öf
->
timî
);

637 i‡(
btco_öf
->
bt_°©e
 !
BT_DHCP_IDLE
) {

639 
	`WL_TRACE
(("%s bt->bt_state:%d\n",

640 
__FUNCTION__
, 
btco_öf
->
bt_°©e
));

642 
	`scheduÀ_w‹k
(&
btco_öf
->
w‹k
);

647 i‡(
ßved_°©us
 =
TRUE
)

648 
	`dev_wlc_bufv¨_£t
(
dev
, "btc_flags",

649 (*)&
buf_Êag7_deÁu…
[0], (buf_flag7_default));

653 i‡(
ßved_°©us
 =
TRUE
) {

654 
ªgaddr
 = 66;

655 
	`dev_wlc_ötv¨_£t_ªg
(
dev
, "btc_params",

656 (*)&
ªgaddr
, (*)&
ßved_ªg66
);

657 
ªgaddr
 = 41;

658 
	`dev_wlc_ötv¨_£t_ªg
(
dev
, "btc_params",

659 (*)&
ªgaddr
, (*)&
ßved_ªg41
);

660 
ªgaddr
 = 68;

661 
	`dev_wlc_ötv¨_£t_ªg
(
dev
, "btc_params",

662 (*)&
ªgaddr
, (*)&
ßved_ªg68
);

664 
	`WL_TRACE
(("restoreÑegs {66,41,68} <- 0x%x 0x%x 0x%x\n",

665 
ßved_ªg66
, 
ßved_ªg41
, 
ßved_ªg68
));

667 
ßved_°©us
 = 
FALSE
;

671 
	`WL_ERR
(("%s Unkwown yetÖower setting, ignored\n",

672 
__FUNCTION__
));

675 
	`¢¥ötf
(
comm™d
, 3, "OK");

677  (
	`°æí
("OK"));

678 
	}
}

	@dhd_cfg80211.h

28 #i‚de‡
__DHD_CFG80211__


29 
	#__DHD_CFG80211__


	)

31 
	~<wl_cfg80211.h
>

32 
	~<wl_cfgp2p.h
>

34 
s32
 
dhd_cfg80211_öô
(
wl_¥iv
 *
wl
);

35 
s32
 
dhd_cfg80211_deöô
(
wl_¥iv
 *
wl
);

36 
s32
 
dhd_cfg80211_down
(
wl_¥iv
 *
wl
);

37 
s32
 
dhd_cfg80211_£t_p2p_öfo
(
wl_¥iv
 *
wl
, 
vÆ
);

38 
s32
 
dhd_cfg80211_˛ón_p2p_öfo
(
wl_¥iv
 *
wl
);

39 
s32
 
dhd_c⁄fig_d⁄gÀ
(
wl_¥iv
 *
wl
, 
boﬁ
 
√ed_lock
);

41 
wl_cfg80211_btc€x_öô
(
wl_¥iv
 *
wl
);

42 
wl_cfg80211_btc€x_deöô
(
wl_¥iv
 *
wl
);

	@dhd_common.c

26 
	~<ty≥defs.h
>

27 
	~<o¶.h
>

29 
	~<ïivîs.h
>

30 
	~<bcmutûs.h
>

32 
	~<bcmídün.h
>

33 
	~<dngl_°©s.h
>

34 
	~<wlio˘l.h
>

35 
	~<dhd.h
>

37 
	~<¥Ÿo/bcmevít.h
>

39 
	~<dhd_bus.h
>

40 
	~<dhd_¥Ÿo.h
>

41 
	~<dhd_dbg.h
>

42 
	~<msgåa˚.h
>

44 #ifde‡
WL_CFG80211


45 
	~<wl_cfg80211.h
>

47 #ifde‡
WLBTAMP


48 
	~<¥Ÿo/bt_amp_hci.h
>

49 
	~<dhd_bè.h
>

51 #ifde‡
SET_RANDOM_MAC_SOFTAP


52 
	~<löux/øndom.h
>

53 
	~<löux/jiffõs.h
>

56 
	#htod32
(
i
Ë
	)
i

57 
	#htod16
(
i
Ë
	)
i

58 
	#dtoh32
(
i
Ë
	)
i

59 
	#dtoh16
(
i
Ë
	)
i

60 
	#htodch™•ec
(
i
Ë
	)
i

61 
	#dtohch™•ec
(
i
Ë
	)
i

63 #ifde‡
PROP_TXSTATUS


64 
	~<wlfc_¥Ÿo.h
>

65 
	~<dhd_wlfc.h
>

69 #ifde‡
WLMEDIA_HTSF


70 
htsf_upd©e
(
dhd_öfo
 *
dhd
, *
d©a
);

72 
	gdhd_msg_Àvñ
 = 
DHD_ERROR_VAL
;

75 
	~<wl_iw.h
>

77 
	gfw_∑th
[
MOD_PARAM_PATHLEN
];

78 
	gnv_∑th
[
MOD_PARAM_PATHLEN
];

80 #ifde‡
SOFTAP


81 
	gfw_∑th2
[
MOD_PARAM_PATHLEN
];

82 
boﬁ
 
so·≠_íabÀd
;

86 
uöt32
 
	gdhd_c⁄n_evít
;

87 
uöt32
 
	gdhd_c⁄n_°©us
;

88 
uöt32
 
	gdhd_c⁄n_ªas⁄
;

90 
dhd_isˇn_ªque°
(* 
dhdp
, 
uöt16
 
a˘i⁄
);

91 
dhd_öd_sˇn_c⁄fúm
(*
h
, 
boﬁ
 
°©us
);

92 
dhd_isˇn_ö_¥ogªss
(*
h
);

93 
dhd_isˇn_lock
();

94 
dhd_isˇn_u∆ock
();

95 
dhd_ch™ge_mtu
(
dhd_pub_t
 *
dhd
, 
√w_mtu
, 
ifidx
);

96 #i‡!
deföed
(
AP
Ë&& deföed(
WLP2P
)

97 
dhd_gë_c⁄cuºít_ˇ∑bûôes
(
dhd_pub_t
 *
dhd
);

99 
boﬁ
 
	g≠_cfg_ru¬ög
 = 
FALSE
;

100 
boﬁ
 
	g≠_fw_lﬂded
 = 
FALSE
;

103 #ifde‡
DHD_DEBUG


104 c⁄° 
	gdhd_vîsi⁄
[] = "D⁄gÀ Ho° Drivî, vîsi⁄ " 
EPI_VERSION_STR
 "\nCompiled on "

105 
__DATE__
 "áà" 
__TIME__
;

107 c⁄° 
	gdhd_vîsi⁄
[] = "D⁄gÀ Ho° Drivî, vîsi⁄ " 
EPI_VERSION_STR
;

110 
dhd_£t_timî
(*
bus
, 
uöt
 
wdtick
);

114 
	mIOV_VERSION
 = 1,

115 
	mIOV_MSGLEVEL
,

116 
	mIOV_BCMERRORSTR
,

117 
	mIOV_BCMERROR
,

118 
	mIOV_WDTICK
,

119 
	mIOV_DUMP
,

120 
	mIOV_CLEARCOUNTS
,

121 
	mIOV_LOGDUMP
,

122 
	mIOV_LOGCAL
,

123 
	mIOV_LOGSTAMP
,

124 
	mIOV_GPIOOB
,

125 
	mIOV_IOCTLTIMEOUT
,

126 #ifde‡
WLBTAMP


127 
	mIOV_HCI_CMD
,

128 
	mIOV_HCI_ACL_DATA
,

130 #i‡
deföed
(
DHD_DEBUG
)

131 
	mIOV_CONS
,

132 
	mIOV_DCONSOLE_POLL
,

134 #ifde‡
PROP_TXSTATUS


135 
	mIOV_PROPTXSTATUS_ENABLE
,

136 
	mIOV_PROPTXSTATUS_MODE
,

138 
	mIOV_BUS_TYPE
,

139 #ifde‡
WLMEDIA_HTSF


140 
	mIOV_WLPKTDLYSTAT_SZ
,

142 
	mIOV_CHANGEMTU
,

143 
	mIOV_HOSTREORDER_FLOWS
,

144 
	mIOV_LAST


147 c⁄° 
bcm_iov¨_t
 
	gdhd_iov¨s
[] = {

148 {"vîsi⁄", 
IOV_VERSION
, 0, 
IOVT_BUFFER
, (
dhd_vîsi⁄
) },

149 #ifde‡
DHD_DEBUG


150 {"msgÀvñ", 
IOV_MSGLEVEL
, 0, 
IOVT_UINT32
, 0 },

152 {"bcmîr‹°r", 
IOV_BCMERRORSTR
, 0, 
IOVT_BUFFER
, 
BCME_STRLEN
 },

153 {"bcmîr‹", 
IOV_BCMERROR
, 0, 
IOVT_INT8
, 0 },

154 {"wdtick", 
IOV_WDTICK
, 0, 
IOVT_UINT32
, 0 },

155 {"dump", 
IOV_DUMP
, 0, 
IOVT_BUFFER
, 
DHD_IOCTL_MAXLEN
 },

156 #ifde‡
DHD_DEBUG


157 {"c⁄s", 
IOV_CONS
, 0, 
IOVT_BUFFER
, 0 },

158 {"dc⁄pﬁl", 
IOV_DCONSOLE_POLL
, 0, 
IOVT_UINT32
, 0 },

160 {"˛órcou¡s", 
IOV_CLEARCOUNTS
, 0, 
IOVT_VOID
, 0 },

161 {"gpioob", 
IOV_GPIOOB
, 0, 
IOVT_UINT32
, 0 },

162 {"io˘l_timeout", 
IOV_IOCTLTIMEOUT
, 0, 
IOVT_UINT32
, 0 },

163 #ifde‡
WLBTAMP


164 {"HCI_cmd", 
IOV_HCI_CMD
, 0, 
IOVT_BUFFER
, 0},

165 {"HCI_ACL_d©a", 
IOV_HCI_ACL_DATA
, 0, 
IOVT_BUFFER
, 0},

167 #ifde‡
PROP_TXSTATUS


168 {"¥›tx", 
IOV_PROPTXSTATUS_ENABLE
, 0, 
IOVT_UINT32
, 0 },

175 {"±xmode", 
IOV_PROPTXSTATUS_MODE
, 0, 
IOVT_UINT32
, 0 },

177 {"bu°y≥", 
IOV_BUS_TYPE
, 0, 
IOVT_UINT32
, 0},

178 #ifde‡
WLMEDIA_HTSF


179 {"pktdly°©sz", 
IOV_WLPKTDLYSTAT_SZ
, 0, 
IOVT_UINT8
, 0 },

181 {"ch™gemtu", 
IOV_CHANGEMTU
, 0, 
IOVT_UINT32
, 0 },

182 {"ho°_ª‹dî_Êows", 
IOV_HOSTREORDER_FLOWS
, 0, 
IOVT_BUFFER
,

183 (
WLHOST_REORDERDATA_MAXFLOWS
 + 1) },

184 {
NULL
, 0, 0, 0, 0 }

188 
	$dhd_comm⁄_öô
(
o¶_t
 *
osh
)

190 #ifde‡
CONFIG_BCMDHD_FW_PATH


191 
	`bcm_°∫˝y_s
(
fw_∑th
, (fw_∑th), 
CONFIG_BCMDHD_FW_PATH
, 
MOD_PARAM_PATHLEN
-1);

193 
fw_∑th
[0] = '\0';

195 #ifde‡
CONFIG_BCMDHD_NVRAM_PATH


196 
	`bcm_°∫˝y_s
(
nv_∑th
, “v_∑th), 
CONFIG_BCMDHD_NVRAM_PATH
, 
MOD_PARAM_PATHLEN
-1);

198 
nv_∑th
[0] = '\0';

200 #ifde‡
SOFTAP


201 
fw_∑th2
[0] = '\0';

203 
	}
}

206 
	$dhd_dump
(
dhd_pub_t
 *
dhdp
, *
buf
, 
buÊí
)

208 
óbuf
[
ETHER_ADDR_STR_LEN
];

210 
bcm°rbuf
 
b
;

211 
bcm°rbuf
 *
°rbuf
 = &
b
;

213 
	`bcm_böô
(
°rbuf
, 
buf
, 
buÊí
);

216 
	`bcm_b¥ötf
(
°rbuf
, "%s\n", 
dhd_vîsi⁄
);

217 
	`bcm_b¥ötf
(
°rbuf
, "\n");

218 
	`bcm_b¥ötf
(
°rbuf
, "pub.up %dÖub.txoff %dÖub.busstate %d\n",

219 
dhdp
->
up
, dhdp->
txoff
, dhdp->
bus°©e
);

220 
	`bcm_b¥ötf
(
°rbuf
, "pub.hdrlen %dÖub.maxctl %dÖub.rxsz %d\n",

221 
dhdp
->
hdæí
, dhdp->
max˘l
, dhdp->
rxsz
);

222 
	`bcm_b¥ötf
(
°rbuf
, "pub.iswl %dÖub.drv_version %ldÖub.mac %s\n",

223 
dhdp
->
iswl
, dhdp->
drv_vîsi⁄
, 
	`bcm_ëhî_¡ﬂ
(&dhdp->
mac
, 
óbuf
));

224 
	`bcm_b¥ötf
(
°rbuf
, "pub.bcmîr‹ %dÅick˙à%d\n", 
dhdp
->
bcmîr‹
, dhdp->
tick˙t
);

226 
	`bcm_b¥ötf
(
°rbuf
, "dongle stats:\n");

227 
	`bcm_b¥ötf
(
°rbuf
, "tx_packets %ldÅx_bytes %ldÅx_errors %ldÅx_dropped %ld\n",

228 
dhdp
->
d°©s
.
tx_∑ckës
, dhdp->d°©s.
tx_byãs
,

229 
dhdp
->
d°©s
.
tx_îr‹s
, dhdp->d°©s.
tx_dr›≥d
);

230 
	`bcm_b¥ötf
(
°rbuf
, "rx_packets %ldÑx_bytes %ldÑx_errors %ldÑx_dropped %ld\n",

231 
dhdp
->
d°©s
.
rx_∑ckës
, dhdp->d°©s.
rx_byãs
,

232 
dhdp
->
d°©s
.
rx_îr‹s
, dhdp->d°©s.
rx_dr›≥d
);

233 
	`bcm_b¥ötf
(
°rbuf
, "mu…iˇ° %ld\n", 
dhdp
->
d°©s
.
mu…iˇ°
);

235 
	`bcm_b¥ötf
(
°rbuf
, "bus stats:\n");

236 
	`bcm_b¥ötf
(
°rbuf
, "tx_packets %ldÅx_multicast %ldÅx_errors %ld\n",

237 
dhdp
->
tx_∑ckës
, dhdp->
tx_mu…iˇ°
, dhdp->
tx_îr‹s
);

238 
	`bcm_b¥ötf
(
°rbuf
, "tx_ctlpkts %ldÅx_ctlerrs %ld\n",

239 
dhdp
->
tx_˘Õkts
, dhdp->
tx_˘Àºs
);

240 
	`bcm_b¥ötf
(
°rbuf
, "rx_packets %ldÑx_multicast %ldÑx_errors %ld \n",

241 
dhdp
->
rx_∑ckës
, dhdp->
rx_mu…iˇ°
, dhdp->
rx_îr‹s
);

242 
	`bcm_b¥ötf
(
°rbuf
, "rx_ctlpkts %ldÑx_ctlerrs %ldÑx_dropped %ld\n",

243 
dhdp
->
rx_˘Õkts
, dhdp->
rx_˘Àºs
, dhdp->
rx_dr›≥d
);

244 
	`bcm_b¥ötf
(
°rbuf
, "rx_readahead_cnt %ldÅx_realloc %ld\n",

245 
dhdp
->
rx_ªadahód_˙t
, dhdp->
tx_ªÆloc
);

246 
	`bcm_b¥ötf
(
°rbuf
, "\n");

249 
	`dhd_¥Ÿ_dump
(
dhdp
, 
°rbuf
);

250 
	`bcm_b¥ötf
(
°rbuf
, "\n");

253 
	`dhd_bus_dump
(
dhdp
, 
°rbuf
);

255  (!
°rbuf
->
size
 ? 
BCME_BUFTOOSHORT
 : 0);

256 
	}
}

259 
	$dhd_wl_io˘l_cmd
(
dhd_pub_t
 *
dhd_pub
, 
cmd
, *
¨g
, 
Àn
, 
uöt8
 
£t
, 
ifödex
)

261 
wl_io˘l_t
 
ioc
;

263 
ioc
.
cmd
 = cmd;

264 
ioc
.
buf
 = 
¨g
;

265 
ioc
.
Àn
 =Üen;

266 
ioc
.
£t
 = set;

268  
	`dhd_wl_io˘l
(
dhd_pub
, 
ifödex
, &
ioc
, 
¨g
, 
Àn
);

269 
	}
}

273 
	$dhd_wl_io˘l
(
dhd_pub_t
 *
dhd_pub
, 
ifödex
, 
wl_io˘l_t
 *
ioc
, *
buf
, 
Àn
)

275 
ªt
;

277 
	`dhd_os_¥Ÿo_block
(
dhd_pub
);

279 
ªt
 = 
	`dhd_¥Ÿ_io˘l
(
dhd_pub
, 
ifödex
, 
ioc
, 
buf
, 
Àn
);

280 i‡((
ªt
Ë&& (
dhd_pub
->
up
))

282 
	`dhd_os_check_h™g
(
dhd_pub
, 
ifödex
, 
ªt
);

284 
	`dhd_os_¥Ÿo_unblock
(
dhd_pub
);

287  
ªt
;

288 
	}
}

291 
	$dhd_doiov¨
(
dhd_pub_t
 *
dhd_pub
, c⁄° 
bcm_iov¨_t
 *
vi
, 
uöt32
 
a˘i⁄id
, c⁄° *
«me
,

292 *
∑øms
, 
∂í
, *
¨g
, 
Àn
, 
vÆ_size
)

294 
bcmîr‹
 = 0;

295 
öt32
 
öt_vÆ
 = 0;

297 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

298 
	`DHD_TRACE
(("%s:á˘i⁄id = %d;Çamê%s\n", 
__FUNCTION__
, 
a˘i⁄id
, 
«me
));

300 i‡((
bcmîr‹
 = 
	`bcm_iov¨_Àncheck
(
vi
, 
¨g
, 
Àn
, 
	`IOV_ISSET
(
a˘i⁄id
))) != 0)

301 
exô
;

303 i‡(
∂í
 >()(
öt_vÆ
))

304 
	`bc›y
(
∑øms
, &
öt_vÆ
, (int_val));

306 
a˘i⁄id
) {

307 
	`IOV_GVAL
(
IOV_VERSION
):

309 
	`bcm_°∫˝y_s
((*)
¨g
, 
Àn
, 
dhd_vîsi⁄
,Üen);

312 
	`IOV_GVAL
(
IOV_MSGLEVEL
):

313 
öt_vÆ
 = (
öt32
)
dhd_msg_Àvñ
;

314 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

317 
	`IOV_SVAL
(
IOV_MSGLEVEL
):

318 #ifde‡
WL_CFG80211


320 i‡(
öt_vÆ
 & 
DHD_WL_VAL2
)

321 
	`wl_cfg80211_íabÀ_åa˚
(
TRUE
, 
öt_vÆ
 & (~
DHD_WL_VAL2
));

322 i‡(
öt_vÆ
 & 
DHD_WL_VAL
)

323 
	`wl_cfg80211_íabÀ_åa˚
(
FALSE
, 
WL_DBG_DBG
);

324 i‡(!(
öt_vÆ
 & 
DHD_WL_VAL2
))

326 
dhd_msg_Àvñ
 = 
öt_vÆ
;

328 
	`IOV_GVAL
(
IOV_BCMERRORSTR
):

329 
	`bcm_°∫˝y_s
((*)
¨g
, 
Àn
, 
	`bcmîr‹°r
(
dhd_pub
->
bcmîr‹
), 
BCME_STRLEN
);

330 ((*)
¨g
)[
BCME_STRLEN
 - 1] = 0x00;

333 
	`IOV_GVAL
(
IOV_BCMERROR
):

334 
öt_vÆ
 = (
öt32
)
dhd_pub
->
bcmîr‹
;

335 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

338 
	`IOV_GVAL
(
IOV_WDTICK
):

339 
öt_vÆ
 = (
öt32
)
dhd_w©chdog_ms
;

340 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

343 
	`IOV_SVAL
(
IOV_WDTICK
):

344 i‡(!
dhd_pub
->
up
) {

345 
bcmîr‹
 = 
BCME_NOTUP
;

348 
	`dhd_os_wd_timî
(
dhd_pub
, (
uöt
)
öt_vÆ
);

351 
	`IOV_GVAL
(
IOV_DUMP
):

352 
bcmîr‹
 = 
	`dhd_dump
(
dhd_pub
, 
¨g
, 
Àn
);

355 #ifde‡
DHD_DEBUG


356 
	`IOV_GVAL
(
IOV_DCONSOLE_POLL
):

357 
öt_vÆ
 = (
öt32
)
dhd_c⁄sﬁe_ms
;

358 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

361 
	`IOV_SVAL
(
IOV_DCONSOLE_POLL
):

362 
dhd_c⁄sﬁe_ms
 = (
uöt
)
öt_vÆ
;

365 
	`IOV_SVAL
(
IOV_CONS
):

366 i‡(
Àn
 > 0)

367 
bcmîr‹
 = 
	`dhd_bus_c⁄sﬁe_ö
(
dhd_pub
, 
¨g
, 
Àn
 - 1);

371 
	`IOV_SVAL
(
IOV_CLEARCOUNTS
):

372 
dhd_pub
->
tx_∑ckës
 = dhd_pub->
rx_∑ckës
 = 0;

373 
dhd_pub
->
tx_îr‹s
 = dhd_pub->
rx_îr‹s
 = 0;

374 
dhd_pub
->
tx_˘Õkts
 = dhd_pub->
rx_˘Õkts
 = 0;

375 
dhd_pub
->
tx_˘Àºs
 = dhd_pub->
rx_˘Àºs
 = 0;

376 
dhd_pub
->
rx_dr›≥d
 = 0;

377 
dhd_pub
->
rx_ªadahód_˙t
 = 0;

378 
dhd_pub
->
tx_ªÆloc
 = 0;

379 
dhd_pub
->
wd_dpc_sched
 = 0;

380 
	`mem£t
(&
dhd_pub
->
d°©s
, 0, (dhd_pub->dstats));

381 
	`dhd_bus_˛órcou¡s
(
dhd_pub
);

382 #ifde‡
PROP_TXSTATUS


384 i‡(
dhd_pub
->
wlfc_°©e
) {

385 
©ho°_wl_°©us_öfo_t
 *
wlfc
 =

386 (
©ho°_wl_°©us_öfo_t
*)
dhd_pub
->
wlfc_°©e
;

387 
wlfc_h™gî_t
* 
h™gî
;

389 
	`mem£t
(&
wlfc
->
°©s
, 0, (
©ho°_wl_°©_cou¡îs_t
));

391 
h™gî
 = (
wlfc_h™gî_t
*)
wlfc
->hanger;

392 
h™gî
->
pushed
 = 0;

393 
h™gî
->
p›≥d
 = 0;

394 
h™gî
->
Áûed_¶Ÿföd
 = 0;

395 
h™gî
->
Áûed_to_p›
 = 0;

396 
h™gî
->
Áûed_to_push
 = 0;

402 
	`IOV_GVAL
(
IOV_IOCTLTIMEOUT
): {

403 
öt_vÆ
 = (
öt32
)
	`dhd_os_gë_io˘l_ª•_timeout
();

404 
	`bc›y
(&
öt_vÆ
, 
¨g
, (int_val));

408 
	`IOV_SVAL
(
IOV_IOCTLTIMEOUT
): {

409 i‡(
öt_vÆ
 <= 0)

410 
bcmîr‹
 = 
BCME_BADARG
;

412 
	`dhd_os_£t_io˘l_ª•_timeout
(()
öt_vÆ
);

416 #ifde‡
WLBTAMP


417 
	`IOV_SVAL
(
IOV_HCI_CMD
): {

418 
amp_hci_cmd_t
 *
cmd
 = (amp_hci_cmd_à*)
¨g
;

421 i‡(
Àn
 < 
HCI_CMD_PREAMBLE_SIZE
)

422  
BCME_BUFTOOSHORT
;

425 i‡(
Àn
 < ()(
HCI_CMD_PREAMBLE_SIZE
 + 
cmd
->
∂í
))

426  
BCME_BUFTOOSHORT
;

428 
	`dhd_bè_docmd
(
dhd_pub
, 
cmd
, 
Àn
);

432 
	`IOV_SVAL
(
IOV_HCI_ACL_DATA
): {

433 
amp_hci_ACL_d©a_t
 *
ACL_d©a
 = (amp_hci_ACL_d©a_à*)
¨g
;

436 i‡(
Àn
 < 
HCI_ACL_DATA_PREAMBLE_SIZE
)

437  
BCME_BUFTOOSHORT
;

440 i‡(
Àn
 < ()(
HCI_ACL_DATA_PREAMBLE_SIZE
 + 
ACL_d©a
->
dÀn
))

441  
BCME_BUFTOOSHORT
;

443 
	`dhd_bè_tx_hcid©a
(
dhd_pub
, 
ACL_d©a
, 
Àn
);

448 #ifde‡
PROP_TXSTATUS


449 
	`IOV_GVAL
(
IOV_PROPTXSTATUS_ENABLE
):

450 
öt_vÆ
 = 
dhd_pub
->
wlfc_íabÀd
? 1 : 0;

451 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

454 
	`IOV_SVAL
(
IOV_PROPTXSTATUS_ENABLE
):

455 
dhd_pub
->
wlfc_íabÀd
 = 
öt_vÆ
? 1 : 0;

458 
	`IOV_GVAL
(
IOV_PROPTXSTATUS_MODE
): {

459 
©ho°_wl_°©us_öfo_t
 *
wlfc
 =

460 (
©ho°_wl_°©us_öfo_t
*)
dhd_pub
->
wlfc_°©e
;

461 
öt_vÆ
 = 
dhd_pub
->
wlfc_°©e
 ? (
öt32
)
wlfc
->
¥›tx°©us_mode
 : 0;

462 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

466 
	`IOV_SVAL
(
IOV_PROPTXSTATUS_MODE
):

467 i‡(
dhd_pub
->
wlfc_°©e
) {

468 
©ho°_wl_°©us_öfo_t
 *
wlfc
 =

469 (
©ho°_wl_°©us_öfo_t
*)
dhd_pub
->
wlfc_°©e
;

470 
wlfc
->
¥›tx°©us_mode
 = 
öt_vÆ
 & 0xff;

475 
	`IOV_GVAL
(
IOV_BUS_TYPE
):

477 #ifde‡
BCMDHDUSB


478 
öt_vÆ
 = 
BUS_TYPE_USB
;

480 
öt_vÆ
 = 
BUS_TYPE_SDIO
;

481 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

485 #ifde‡
WLMEDIA_HTSF


486 
	`IOV_GVAL
(
IOV_WLPKTDLYSTAT_SZ
):

487 
öt_vÆ
 = 
dhd_pub
->
htsfdly°©_sz
;

488 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

491 
	`IOV_SVAL
(
IOV_WLPKTDLYSTAT_SZ
):

492 
dhd_pub
->
htsfdly°©_sz
 = 
öt_vÆ
 & 0xff;

493 
	`¥ötf
("SëtögÅsfdly°©_sz:%d\n", 
dhd_pub
->
htsfdly°©_sz
);

496 
	`IOV_SVAL
(
IOV_CHANGEMTU
):

497 
öt_vÆ
 &= 0xffff;

498 
bcmîr‹
 = 
	`dhd_ch™ge_mtu
(
dhd_pub
, 
öt_vÆ
, 0);

501 
	`IOV_GVAL
(
IOV_HOSTREORDER_FLOWS
):

503 
uöt
 
i
 = 0;

504 
uöt8
 *
±r
 = (uöt8 *)
¨g
;

505 
uöt8
 
cou¡
 = 0;

507 
±r
++;

508 
i
 = 0; i < 
WLHOST_REORDERDATA_MAXFLOWS
; i++) {

509 i‡(
dhd_pub
->
ª‹dî_bufs
[
i
] !
NULL
) {

510 *
±r
 = 
dhd_pub
->
ª‹dî_bufs
[
i
]->
Êow_id
;

511 
±r
++;

512 
cou¡
++;

515 
±r
 = (
uöt8
 *)
¨g
;

516 *
±r
 = 
cou¡
;

521 
bcmîr‹
 = 
BCME_UNSUPPORTED
;

525 
exô
:

526 
	`DHD_TRACE
(("%s:á˘i⁄id %d, bcmîr‹ %d\n", 
__FUNCTION__
, 
a˘i⁄id
, 
bcmîr‹
));

527  
bcmîr‹
;

528 
	}
}

532 
	$dhd_°‹e_c⁄n_°©us
(
uöt32
 
evít
, uöt32 
°©us
, uöt32 
ªas⁄
)

538 i‡(!(
evít
 =
WLC_E_SET_SSID
 && 
°©us
 =
WLC_E_STATUS_FAIL
 &&

539 
dhd_c⁄n_evít
 =
WLC_E_PRUNE
)) {

540 
dhd_c⁄n_evít
 = 
evít
;

541 
dhd_c⁄n_°©us
 = 
°©us
;

542 
dhd_c⁄n_ªas⁄
 = 
ªas⁄
;

544 
	}
}

546 
boﬁ


547 
	$dhd_¥ec_íq
(
dhd_pub_t
 *
dhdp
, 
pktq
 *
q
, *
pkt
, 
¥ec
)

549 *
p
;

550 
ïªc
 = -1;

551 
boﬁ
 
disˇrd_ﬁde°
;

556 i‡(!
	`pktq_pfuŒ
(
q
, 
¥ec
Ë&& !
	`pktq_fuŒ
(q)) {

557 
	`pktq_≥nq
(
q
, 
¥ec
, 
pkt
);

558  
TRUE
;

562 i‡(
	`pktq_pfuŒ
(
q
, 
¥ec
))

563 
ïªc
 = 
¥ec
;

564 i‡(
	`pktq_fuŒ
(
q
)) {

565 
	`pktq_≥ek_èû
(
q
, &
ïªc
);

566 i‡(
ïªc
 > 
¥ec
 ||Éprec < 0)

567  
FALSE
;

571 i‡(
ïªc
 >= 0) {

573 
	`ASSERT
(!
	`pktq_≥m±y
(
q
, 
ïªc
));

574 
disˇrd_ﬁde°
 = 
	`AC_BITMAP_TST
(
dhdp
->
wme_dp
, 
ïªc
);

575 i‡(
ïªc
 =
¥ec
 && !
disˇrd_ﬁde°
)

576  
FALSE
;

578 
p
 = 
disˇrd_ﬁde°
 ? 
	`pktq_pdeq
(
q
, 
ïªc
Ë: 
	`pktq_pdeq_èû
(q,Éprec);

579 
	`ASSERT
(
p
);

581 
	`PKTFREE
(
dhdp
->
osh
, 
p
, 
TRUE
);

585 
	`pktq_≥nq
(
q
, 
¥ec
, 
pkt
);

587  
TRUE
;

588 
	}
}

591 
	$dhd_iov¨_›
(
dhd_pub_t
 *
dhd_pub
, c⁄° *
«me
,

592 *
∑øms
, 
∂í
, *
¨g
, 
Àn
, 
boﬁ
 
£t
)

594 
bcmîr‹
 = 0;

595 
vÆ_size
;

596 c⁄° 
bcm_iov¨_t
 *
vi
 = 
NULL
;

597 
uöt32
 
a˘i⁄id
;

599 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

601 
	`ASSERT
(
«me
);

602 
	`ASSERT
(
Àn
 >= 0);

605 
	`ASSERT
(
£t
 || (
¨g
 && 
Àn
));

608 
	`ASSERT
(!
£t
 || (!
∑øms
 && !
∂í
));

610 i‡((
vi
 = 
	`bcm_iov¨_lookup
(
dhd_iov¨s
, 
«me
)Ë=
NULL
) {

611 
bcmîr‹
 = 
BCME_UNSUPPORTED
;

612 
exô
;

615 
	`DHD_CTL
(("%s: %†%s,Üí %dÖÀ¿%d\n", 
__FUNCTION__
,

616 
«me
, (
£t
 ? "£t" : "gë"), 
Àn
, 
∂í
));

621 i‡(
∑øms
 =
NULL
) {

622 
∑øms
 = 
¨g
;

623 
∂í
 = 
Àn
;

626 i‡(
vi
->
ty≥
 =
IOVT_VOID
)

627 
vÆ_size
 = 0;

628 i‡(
vi
->
ty≥
 =
IOVT_BUFFER
)

629 
vÆ_size
 = 
Àn
;

632 
vÆ_size
 = ();

634 
a˘i⁄id
 = 
£t
 ? 
	`IOV_SVAL
(
vi
->
v¨id
Ë: 
	`IOV_GVAL
(vi->varid);

636 
bcmîr‹
 = 
	`dhd_doiov¨
(
dhd_pub
, 
vi
, 
a˘i⁄id
, 
«me
, 
∑øms
, 
∂í
, 
¨g
, 
Àn
, 
vÆ_size
);

638 
exô
:

639  
bcmîr‹
;

640 
	}
}

643 
	$dhd_io˘l
(
dhd_pub_t
 * 
dhd_pub
, 
dhd_io˘l_t
 *
ioc
, * 
buf
, 
uöt
 
buÊí
)

645 
bcmîr‹
 = 0;

647 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

649 i‡(!
buf
) {

650  
BCME_BADARG
;

653 
ioc
->
cmd
) {

654 
DHD_GET_MAGIC
:

655 i‡(
buÊí
 < ())

656 
bcmîr‹
 = 
BCME_BUFTOOSHORT
;

658 *(*)
buf
 = 
DHD_IOCTL_MAGIC
;

661 
DHD_GET_VERSION
:

662 i‡(
buÊí
 < ())

663 
bcmîr‹
 = -
BCME_BUFTOOSHORT
;

665 *(*)
buf
 = 
DHD_IOCTL_VERSION
;

668 
DHD_GET_VAR
:

669 
DHD_SET_VAR
: {

670 *
¨g
;

671 
uöt
 
¨gÀn
;

674 
¨g
 = 
buf
, 
¨gÀn
 = 
buÊí
; *arg &&árglen;árg++,árglen--)

677 i‡(*
¨g
) {

678 
bcmîr‹
 = 
BCME_BUFTOOSHORT
;

683 
¨g
++, 
¨gÀn
--;

686 i‡(
ioc
->
cmd
 =
DHD_GET_VAR
)

687 
bcmîr‹
 = 
	`dhd_iov¨_›
(
dhd_pub
, 
buf
, 
¨g
, 
¨gÀn
,

688 
buf
, 
buÊí
, 
IOV_GET
);

690 
bcmîr‹
 = 
	`dhd_iov¨_›
(
dhd_pub
, 
buf
, 
NULL
, 0, 
¨g
, 
¨gÀn
, 
IOV_SET
);

691 i‡(
bcmîr‹
 !
BCME_UNSUPPORTED
)

695 i‡(
ioc
->
cmd
 =
DHD_GET_VAR
)

696 
bcmîr‹
 = 
	`dhd_¥Ÿ_iov¨_›
(
dhd_pub
, 
buf
, 
¨g
,

697 
¨gÀn
, 
buf
, 
buÊí
, 
IOV_GET
);

699 
bcmîr‹
 = 
	`dhd_¥Ÿ_iov¨_›
(
dhd_pub
, 
buf
,

700 
NULL
, 0, 
¨g
, 
¨gÀn
, 
IOV_SET
);

701 i‡(
bcmîr‹
 !
BCME_UNSUPPORTED
)

705 i‡(
ioc
->
cmd
 =
DHD_GET_VAR
) {

706 
bcmîr‹
 = 
	`dhd_bus_iov¨_›
(
dhd_pub
, 
buf
,

707 
¨g
, 
¨gÀn
, 
buf
, 
buÊí
, 
IOV_GET
);

709 
bcmîr‹
 = 
	`dhd_bus_iov¨_›
(
dhd_pub
, 
buf
,

710 
NULL
, 0, 
¨g
, 
¨gÀn
, 
IOV_SET
);

717 
bcmîr‹
 = 
BCME_UNSUPPORTED
;

720  
bcmîr‹
;

721 
	}
}

723 #ifde‡
SHOW_EVENTS


725 
	$wl_show_ho°_evít
(
wl_evít_msg_t
 *
evít
, *
evít_d©a
)

727 
uöt
 
i
, 
°©us
, 
ªas⁄
;

728 
boﬁ
 
group
 = 
FALSE
, 
Êush_txq
 = FALSE, 
lök
 = FALSE;

729 c⁄° *
auth_°r
;

730 c⁄° *
evít_«me
;

731 
uch¨
 *
buf
;

732 
îr_msg
[256], 
óbuf
[
ETHER_ADDR_STR_LEN
];

733 
uöt
 
evít_ty≥
, 
Êags
, 
auth_ty≥
, 
d©Æí
;

735 
evít_ty≥
 = 
	`¡oh32
(
evít
->event_type);

736 
Êags
 = 
	`¡oh16
(
evít
->flags);

737 
°©us
 = 
	`¡oh32
(
evít
->status);

738 
ªas⁄
 = 
	`¡oh32
(
evít
->reason);

739 
	`BCM_REFERENCE
(
ªas⁄
);

740 
auth_ty≥
 = 
	`¡oh32
(
evít
->auth_type);

741 
d©Æí
 = 
	`¡oh32
(
evít
->datalen);

744 
	`¢¥ötf
(
óbuf
, (eabuf), "%02x:%02x:%02x:%02x:%02x:%02x",

745 (
uch¨
)
evít
->
addr
.
o˘ë
[0]&0xff,

746 (
uch¨
)
evít
->
addr
.
o˘ë
[1]&0xff,

747 (
uch¨
)
evít
->
addr
.
o˘ë
[2]&0xff,

748 (
uch¨
)
evít
->
addr
.
o˘ë
[3]&0xff,

749 (
uch¨
)
evít
->
addr
.
o˘ë
[4]&0xff,

750 (
uch¨
)
evít
->
addr
.
o˘ë
[5]&0xff);

752 
evít_«me
 = "UNKNOWN";

753 
i
 = 0; i < (
uöt
)
bcmevít_«mes_size
; i++)

754 i‡(
bcmevít_«mes
[
i
].
evít
 =
evít_ty≥
)

755 
evít_«me
 = 
bcmevít_«mes
[
i
].
«me
;

757 i‡(
Êags
 & 
WLC_EVENT_MSG_LINK
)

758 
lök
 = 
TRUE
;

759 i‡(
Êags
 & 
WLC_EVENT_MSG_GROUP
)

760 
group
 = 
TRUE
;

761 i‡(
Êags
 & 
WLC_EVENT_MSG_FLUSHTXQ
)

762 
Êush_txq
 = 
TRUE
;

764 
evít_ty≥
) {

765 
WLC_E_START
:

766 
WLC_E_DEAUTH
:

767 
WLC_E_DISASSOC
:

768 
	`DHD_EVENT
(("MACEVENT: %s, MAC %s\n", 
evít_«me
, 
óbuf
));

771 
WLC_E_ASSOC_IND
:

772 
WLC_E_REASSOC_IND
:

774 
	`DHD_EVENT
(("MACEVENT: %s, MAC %s\n", 
evít_«me
, 
óbuf
));

777 
WLC_E_ASSOC
:

778 
WLC_E_REASSOC
:

779 i‡(
°©us
 =
WLC_E_STATUS_SUCCESS
) {

780 
	`DHD_EVENT
(("MACEVENT: %s, MAC %s, SUCCESS\n", 
evít_«me
, 
óbuf
));

781 } i‡(
°©us
 =
WLC_E_STATUS_TIMEOUT
) {

782 
	`DHD_EVENT
(("MACEVENT: %s, MAC %s, TIMEOUT\n", 
evít_«me
, 
óbuf
));

783 } i‡(
°©us
 =
WLC_E_STATUS_FAIL
) {

784 
	`DHD_EVENT
(("MACEVENT: %s, MAC %s, FAILURE,Ñeason %d\n",

785 
evít_«me
, 
óbuf
, ()
ªas⁄
));

787 
	`DHD_EVENT
(("MACEVENT: %s, MAC %s, unexpected status %d\n",

788 
evít_«me
, 
óbuf
, ()
°©us
));

792 
WLC_E_DEAUTH_IND
:

793 
WLC_E_DISASSOC_IND
:

794 
	`DHD_EVENT
(("MACEVENT: %s, MAC %s,Ñós⁄ %d\n", 
evít_«me
, 
óbuf
, ()
ªas⁄
));

797 
WLC_E_AUTH
:

798 
WLC_E_AUTH_IND
:

799 i‡(
auth_ty≥
 =
DOT11_OPEN_SYSTEM
)

800 
auth_°r
 = "Open System";

801 i‡(
auth_ty≥
 =
DOT11_SHARED_KEY
)

802 
auth_°r
 = "Shared Key";

804 
	`¢¥ötf
(
îr_msg
, ”º_msg), "AUTH unknown: %d", ()
auth_ty≥
);

805 
auth_°r
 = 
îr_msg
;

807 i‡(
evít_ty≥
 =
WLC_E_AUTH_IND
) {

808 
	`DHD_EVENT
(("MACEVENT: %s, MAC %s, %s\n", 
evít_«me
, 
óbuf
, 
auth_°r
));

809 } i‡(
°©us
 =
WLC_E_STATUS_SUCCESS
) {

810 
	`DHD_EVENT
(("MACEVENT: %s, MAC %s, %s, SUCCESS\n",

811 
evít_«me
, 
óbuf
, 
auth_°r
));

812 } i‡(
°©us
 =
WLC_E_STATUS_TIMEOUT
) {

813 
	`DHD_EVENT
(("MACEVENT: %s, MAC %s, %s, TIMEOUT\n",

814 
evít_«me
, 
óbuf
, 
auth_°r
));

815 } i‡(
°©us
 =
WLC_E_STATUS_FAIL
) {

816 
	`DHD_EVENT
(("MACEVENT: %s, MAC %s, %s, FAILURE,Ñeason %d\n",

817 
evít_«me
, 
óbuf
, 
auth_°r
, ()
ªas⁄
));

819 
	`BCM_REFERENCE
(
auth_°r
);

823 
WLC_E_JOIN
:

824 
WLC_E_ROAM
:

825 
WLC_E_SET_SSID
:

826 i‡(
°©us
 =
WLC_E_STATUS_SUCCESS
) {

827 
	`DHD_EVENT
(("MACEVENT: %s, MAC %s\n", 
evít_«me
, 
óbuf
));

828 } i‡(
°©us
 =
WLC_E_STATUS_FAIL
) {

829 
	`DHD_EVENT
(("MACEVENT: %s, faûed\n", 
evít_«me
));

830 } i‡(
°©us
 =
WLC_E_STATUS_NO_NETWORKS
) {

831 
	`DHD_EVENT
(("MACEVENT: %s,Çÿ√tw‹k†found\n", 
evít_«me
));

833 
	`DHD_EVENT
(("MACEVENT: %s, unexpected status %d\n",

834 
evít_«me
, ()
°©us
));

838 
WLC_E_BEACON_RX
:

839 i‡(
°©us
 =
WLC_E_STATUS_SUCCESS
) {

840 
	`DHD_EVENT
(("MACEVENT: %s, SUCCESS\n", 
evít_«me
));

841 } i‡(
°©us
 =
WLC_E_STATUS_FAIL
) {

842 
	`DHD_EVENT
(("MACEVENT: %s, FAIL\n", 
evít_«me
));

844 
	`DHD_EVENT
(("MACEVENT: %s, sètu†%d\n", 
evít_«me
, 
°©us
));

848 
WLC_E_LINK
:

849 
	`DHD_EVENT
(("MACEVENT: %†%s\n", 
evít_«me
, 
lök
?"UP":"DOWN"));

850 
	`BCM_REFERENCE
(
lök
);

853 
WLC_E_MIC_ERROR
:

854 
	`DHD_EVENT
(("MACEVENT: %s, MAC %s, Group %d, Flush %d\n",

855 
evít_«me
, 
óbuf
, 
group
, 
Êush_txq
));

856 
	`BCM_REFERENCE
(
group
);

857 
	`BCM_REFERENCE
(
Êush_txq
);

860 
WLC_E_ICV_ERROR
:

861 
WLC_E_UNICAST_DECODE_ERROR
:

862 
WLC_E_MULTICAST_DECODE_ERROR
:

863 
	`DHD_EVENT
(("MACEVENT: %s, MAC %s\n",

864 
evít_«me
, 
óbuf
));

867 
WLC_E_TXFAIL
:

868 
	`DHD_EVENT
(("MACEVENT: %s, RA %s\n", 
evít_«me
, 
óbuf
));

871 
WLC_E_SCAN_COMPLETE
:

872 
WLC_E_ASSOC_REQ_IE
:

873 
WLC_E_ASSOC_RESP_IE
:

874 
WLC_E_PMKID_CACHE
:

875 
	`DHD_EVENT
(("MACEVENT: %s\n", 
evít_«me
));

878 
WLC_E_PFN_NET_FOUND
:

879 
WLC_E_PFN_NET_LOST
:

880 
WLC_E_PFN_SCAN_COMPLETE
:

881 
WLC_E_PFN_SCAN_NONE
:

882 
WLC_E_PFN_SCAN_ALLGONE
:

883 
	`DHD_EVENT
(("PNOEVENT: %s\n", 
evít_«me
));

886 
WLC_E_PSK_SUP
:

887 
WLC_E_PRUNE
:

888 
	`DHD_EVENT
(("MACEVENT: %s, status %d,Ñeason %d\n",

889 
evít_«me
, ()
°©us
, ()
ªas⁄
));

892 #ifde‡
WIFI_ACT_FRAME


893 
WLC_E_ACTION_FRAME
:

894 
	`DHD_TRACE
(("MACEVENT: %†Bssid %s\n", 
evít_«me
, 
óbuf
));

898 
WLC_E_TRACE
: {

899 
uöt32
 
£qnum_¥ev
 = 0;

900 
msgåa˚_hdr_t
 
hdr
;

901 
uöt32
 
nblo°
;

902 *
s
, *
p
;

904 
buf
 = (
uch¨
 *Ë
evít_d©a
;

905 
	`mem˝y
(&
hdr
, 
buf
, 
MSGTRACE_HDRLEN
);

907 i‡(
hdr
.
vîsi⁄
 !
MSGTRACE_VERSION
) {

908 
	`¥ötf
("\nMACEVENT: %s [unsupported version --> "

910 
evít_«me
, 
MSGTRACE_VERSION
, 
hdr
.
vîsi⁄
);

912 
d©Æí
 = 0;

917 
buf
[
MSGTRACE_HDRLEN
 + 
	`¡oh16
(
hdr
.
Àn
)] = '\0';

919 i‡(
	`¡oh32
(
hdr
.
disˇrded_byãs
Ë||Çtoh32(hdr.
disˇrded_¥ötf
)) {

920 
	`¥ötf
("\nWLC_E_TRACE: [DiscardedÅraces in dongle -->"

922 
	`¡oh32
(
hdr
.
disˇrded_byãs
),Çtoh32(hdr.
disˇrded_¥ötf
));

925 
nblo°
 = 
	`¡oh32
(
hdr
.
£qnum
Ë- 
£qnum_¥ev
 - 1;

926 i‡(
nblo°
 > 0) {

927 
	`¥ötf
("\nWLC_E_TRACE: [EventÜost --> seqnum %dÇblost %d\n",

928 
	`¡oh32
(
hdr
.
£qnum
), 
nblo°
);

930 
£qnum_¥ev
 = 
	`¡oh32
(
hdr
.
£qnum
);

935 
p
 = (*)&
buf
[
MSGTRACE_HDRLEN
];

936 (
s
 = 
	`°r°r
(
p
, "\n")Ë!
NULL
) {

937 *
s
 = '\0';

938 
	`¥ötf
("%s\n", 
p
);

939 
p
 = 
s
+1;

941 
	`¥ötf
("%s\n", 
p
);

944 
d©Æí
 = 0;

949 
WLC_E_RSSI
:

950 
	`DHD_EVENT
(("MACEVENT: %†%d\n", 
evít_«me
, 
	`¡oh32
(*((*)
evít_d©a
))));

953 
WLC_E_SERVICE_FOUND
:

954 
WLC_E_P2PO_ADD_DEVICE
:

955 
WLC_E_P2PO_DEL_DEVICE
:

956 
	`DHD_EVENT
(("MACEVENT: %s, MAC: %s\n", 
evít_«me
, 
óbuf
));

960 
	`DHD_EVENT
(("MACEVENT: %s %d, MAC %s, status %d,Ñeason %d,áuth %d\n",

961 
evít_«me
, 
evít_ty≥
, 
óbuf
, ()
°©us
, ()
ªas⁄
,

962 ()
auth_ty≥
));

967 i‡(
d©Æí
) {

968 
buf
 = (
uch¨
 *Ë
evít_d©a
;

969 
	`DHD_EVENT
((" d©®(%dË: ", 
d©Æí
));

970 
i
 = 0; i < 
d©Æí
; i++)

971 
	`DHD_EVENT
((" 0x%02x ", *
buf
++));

972 
	`DHD_EVENT
(("\n"));

974 
	}
}

978 
	$wl_ho°_evít
(
dhd_pub_t
 *
dhd_pub
, *
ifidx
, *
pktd©a
,

979 
wl_evít_msg_t
 *
evít
, **
d©a_±r
)

982 
bcm_evít_t
 *
pvt_d©a
 = (bcm_evít_à*)
pktd©a
;

983 
uöt8
 *
evít_d©a
;

984 
uöt32
 
ty≥
, 
°©us
, 
d©Æí
;

985 
uöt16
 
Êags
;

986 
evÀn
;

988 i‡(
	`bcmp
(
BRCM_OUI
, &
pvt_d©a
->
bcm_hdr
.
oui
[0], 
DOT11_OUI_LEN
)) {

989 
	`DHD_ERROR
(("%s: mism©ched OUI, baûög\n", 
__FUNCTION__
));

990  (
BCME_ERROR
);

994 i‡(
	`¡oh16_ua
((*)&
pvt_d©a
->
bcm_hdr
.
u§_subty≥
Ë!
BCMILCP_BCM_SUBTYPE_EVENT
) {

995 
	`DHD_ERROR
(("%s: mism©ched subty≥, baûög\n", 
__FUNCTION__
));

996  (
BCME_ERROR
);

999 *
d©a_±r
 = &
pvt_d©a
[1];

1000 
evít_d©a
 = *
d©a_±r
;

1003 
	`mem˝y
(
evít
, &
pvt_d©a
->evít, (
wl_evít_msg_t
));

1005 
ty≥
 = 
	`¡oh32_ua
((*)&
evít
->
evít_ty≥
);

1006 
Êags
 = 
	`¡oh16_ua
((*)&
evít
->flags);

1007 
°©us
 = 
	`¡oh32_ua
((*)&
evít
->status);

1008 
d©Æí
 = 
	`¡oh32_ua
((*)&
evít
->datalen);

1009 
evÀn
 = 
d©Æí
 + (
bcm_evít_t
);

1011 
ty≥
) {

1012 #ifde‡
PROP_TXSTATUS


1013 
WLC_E_FIFO_CREDIT_MAP
:

1014 
	`dhd_wlfc_evít
(
dhd_pub
->
öfo
);

1015 
	`dhd_wlfc_FIFO¸edôm≠_evít
(
dhd_pub
->
öfo
, 
evít_d©a
);

1016 
	`WLFC_DBGMESG
(("WLC_E_FIFO_CREDIT_MAP:(AC0,AC1,AC2,AC3),(BC_MC),(OTHER): "

1017 "(%d,%d,%d,%d),(%d),(%d)\n", 
evít_d©a
[0],Évent_data[1],

1018 
evít_d©a
[2],

1019 
evít_d©a
[3],Évent_data[4],Évent_data[5]));

1023 
WLC_E_IF
:

1025 
dhd_if_evít_t
 *
i„vít
 = (dhd_if_evít_à*)
evít_d©a
;

1026 #ifde‡
PROP_TXSTATUS


1028 
uöt8
* 
ó
 = 
pvt_d©a
->
ëh
.
ëhî_dho°
;

1029 
	`WLFC_DBGMESG
(("WLC_E_IF: idx:%d,áction:%s, iftype:%s, "

1031 
i„vít
->
ifidx
,

1032 ((
i„vít
->
a˘i⁄
 =
WLC_E_IF_ADD
) ? "ADD":"DEL"),

1033 ((
i„vít
->
is_AP
 == 0) ? "STA":"AP "),

1034 
ó
[0],Éa[1],Éa[2],Éa[3],Éa[4],Éa[5]));

1035 ()
ó
;

1036 i‡(
i„vít
->
a˘i⁄
 =
WLC_E_IF_CHANGE
)

1037 
	`dhd_wlfc_öãrÁ˚_evít
(
dhd_pub
->
öfo
,

1038 
eWLFC_MAC_ENTRY_ACTION_UPDATE
,

1039 
i„vít
->
ifidx
, i„vít->
is_AP
, 
ó
);

1041 
	`dhd_wlfc_öãrÁ˚_evít
(
dhd_pub
->
öfo
,

1042 ((
i„vít
->
a˘i⁄
 =
WLC_E_IF_ADD
) ?

1043 
eWLFC_MAC_ENTRY_ACTION_ADD
 : 
eWLFC_MAC_ENTRY_ACTION_DEL
),

1044 
i„vít
->
ifidx
, i„vít->
is_AP
, 
ó
);

1048 i‡(
i„vít
->
ifidx
 == 0)

1053 #ifde‡
WL_CFG80211


1054 i‡(
	`wl_cfg80211_is_¥ogªss_ifch™ge
()) {

1055 
	`DHD_ERROR
(("%s: ifidx %d for %sáction %d\n",

1056 
__FUNCTION__
, 
i„vít
->
ifidx
,

1057 
evít
->
i‚ame
, 
i„vít
->
a˘i⁄
));

1058 i‡(
i„vít
->
a˘i⁄
 =
WLC_E_IF_ADD
 ||

1059 
i„vít
->
a˘i⁄
 =
WLC_E_IF_CHANGE
)

1060 
	`wl_cfg80211_nŸify_ifch™ge
();

1061  (
BCME_OK
);

1064 i‡(
i„vít
->
ifidx
 > 0 && i„vít->ifidx < 
DHD_MAX_IFS
) {

1065 i‡(
i„vít
->
a˘i⁄
 =
WLC_E_IF_ADD
) {

1066 i‡(
	`dhd_add_if
(
dhd_pub
->
öfo
, 
i„vít
->
ifidx
,

1067 
NULL
, 
evít
->
i‚ame
,

1068 
evít
->
addr
.
o˘ë
,

1069 
i„vít
->
Êags
, i„vít->
bssidx
)) {

1070 
	`DHD_ERROR
(("%s: dhd_add_if failed!!"

1072 
__FUNCTION__
,

1073 
i„vít
->
ifidx
,

1074 
evít
->
i‚ame
));

1075  (
BCME_ERROR
);

1078 i‡(
i„vít
->
a˘i⁄
 =
WLC_E_IF_DEL
)

1079 
	`dhd_dñ_if
(
dhd_pub
->
öfo
, 
i„vít
->
ifidx
);

1081 #i‚de‡
PROP_TXSTATUS


1082 
	`DHD_ERROR
(("%s: Invalid ifidx %d for %s\n",

1083 
__FUNCTION__
, 
i„vít
->
ifidx
, 
evít
->
i‚ame
));

1088 *
ifidx
 = 
	`dhd_i‚ame2idx
(
dhd_pub
->
öfo
, 
evít
->
i‚ame
);

1090 
	`dhd_evít
(
dhd_pub
->
öfo
, (*)
pvt_d©a
, 
evÀn
, *
ifidx
);

1094 #ifde‡
WLMEDIA_HTSF


1095 
WLC_E_HTSFSYNC
:

1096 
	`htsf_upd©e
(
dhd_pub
->
öfo
, 
evít_d©a
);

1099 #i‡
	`deföed
(
NDIS630
)

1100 
WLC_E_NDIS_LINK
:

1103 
WLC_E_NDIS_LINK
: {

1104 
uöt32
 
ãmp
 = 
	`ht⁄32
(
WLC_E_LINK
);

1106 
	`mem˝y
((*)(&
pvt_d©a
->
evít
.
evít_ty≥
), &
ãmp
,

1107 (
pvt_d©a
->
evít
.
evít_ty≥
));

1112 
WLC_E_LINK
:

1113 
WLC_E_DEAUTH
:

1114 
WLC_E_DEAUTH_IND
:

1115 
WLC_E_DISASSOC
:

1116 
WLC_E_DISASSOC_IND
:

1117 
	`DHD_EVENT
(("%s: LinkÉvent %d, flags %x, status %x\n",

1118 
__FUNCTION__
, 
ty≥
, 
Êags
, 
°©us
));

1121 *
ifidx
 = 
	`dhd_i‚ame2idx
(
dhd_pub
->
öfo
, 
evít
->
i‚ame
);

1123 
	`dhd_evít
(
dhd_pub
->
öfo
, (*)
pvt_d©a
, 
evÀn
, *
ifidx
);

1124 
	`DHD_TRACE
(("%s: MACÉvent %d, flags %x, status %x\n",

1125 
__FUNCTION__
, 
ty≥
, 
Êags
, 
°©us
));

1126 
	`BCM_REFERENCE
(
Êags
);

1127 
	`BCM_REFERENCE
(
°©us
);

1130 i‡(
ty≥
 =
WLC_E_NDIS_LINK
) {

1131 
uöt32
 
ãmp
;

1133 
ãmp
 = 
	`¡oh32_ua
((*)&
evít
->
evít_ty≥
);

1134 
	`DHD_TRACE
(("C⁄vîãdÅÿWLC_E_LINKÅy≥ %d\n", 
ãmp
));

1136 
ãmp
 = 
	`¡oh32
(
WLC_E_NDIS_LINK
);

1137 
	`mem˝y
((*)(&
pvt_d©a
->
evít
.
evít_ty≥
), &
ãmp
,

1138 (
pvt_d©a
->
evít
.
evít_ty≥
));

1143 #ifde‡
SHOW_EVENTS


1144 
	`wl_show_ho°_evít
(
evít
, (*)
evít_d©a
);

1147  (
BCME_OK
);

1148 
	}
}

1151 
	$wl_evít_to_ho°_‹dî
(
wl_evít_msg_t
 * 
evt
)

1156 
evt
->
evít_ty≥
 = 
	`¡oh32
(evt->event_type);

1157 
evt
->
Êags
 = 
	`¡oh16
(evt->flags);

1158 
evt
->
°©us
 = 
	`¡oh32
(evt->status);

1159 
evt
->
ªas⁄
 = 
	`¡oh32
(evt->reason);

1160 
evt
->
auth_ty≥
 = 
	`¡oh32
(evt->auth_type);

1161 
evt
->
d©Æí
 = 
	`¡oh32
(evt->datalen);

1162 
evt
->
vîsi⁄
 = 
	`¡oh16
(evt->version);

1163 
	}
}

1166 
	$dhd_¥öt_buf
(*
pbuf
, 
Àn
, 
byãs_≥r_löe
)

1168 #ifde‡
DHD_DEBUG


1169 
i
, 
j
 = 0;

1170 *
buf
 = 
pbuf
;

1172 i‡(
byãs_≥r_löe
 == 0) {

1173 
byãs_≥r_löe
 = 
Àn
;

1176 
i
 = 0; i < 
Àn
; i++) {

1177 
	`¥ötf
("%2.2x", *
buf
++);

1178 
j
++;

1179 i‡(
j
 =
byãs_≥r_löe
) {

1180 
	`¥ötf
("\n");

1181 
j
 = 0;

1183 
	`¥ötf
(":");

1186 
	`¥ötf
("\n");

1188 
	}
}

1189 #i‚de‡
°πoul


1190 
	#°πoul
(
≈å
, 
íd±r
, 
ba£
Ë
	`bcm_°πoul
(“±r), (íd±r), (ba£))

	)

1193 #ifde‡
PKT_FILTER_SUPPORT


1196 
	$wl_∑âîn_©oh
(*
§c
, *
d°
)

1198 
i
;

1199 i‡(
	`°∫cmp
(
§c
, "0x", 2) != 0 &&

1200 
	`°∫cmp
(
§c
, "0X", 2) != 0) {

1201 
	`DHD_ERROR
(("Mask invalid format. NeedsÅo start with 0x\n"));

1204 
§c
 = src + 2;

1205 i‡(
	`°æí
(
§c
) % 2 != 0) {

1206 
	`DHD_ERROR
(("Mask invalid format. NeedsÅo be ofÉvenÜength\n"));

1209 
i
 = 0; *
§c
 != '\0'; i++) {

1210 
num
[3];

1211 
	`bcm_°∫˝y_s
(
num
, “um), 
§c
, 2);

1212 
num
[2] = '\0';

1213 
d°
[
i
] = (
uöt8
)
	`°πoul
(
num
, 
NULL
, 16);

1214 
§c
 += 2;

1216  
i
;

1217 
	}
}

1220 
	$dhd_pktfûãr_ofÊﬂd_íabÀ
(
dhd_pub_t
 * 
dhd
, *
¨g
, 
íabÀ
, 
ma°î_mode
)

1222 *
¨gv
[8];

1223 
i
 = 0;

1224 c⁄° *
°r
;

1225 
buf_Àn
;

1226 
°r_Àn
;

1227 *
¨g_ßve
 = 0, *
¨g_‹g
 = 0;

1228 
rc
;

1229 
buf
[128];

1230 
wl_pkt_fûãr_íabÀ_t
 
íabÀ_∑rm
;

1231 
wl_pkt_fûãr_íabÀ_t
 * 
pkt_fûãΩ
;

1233 i‡(!
¨g
)

1236 i‡(!(
¨g_ßve
 = 
	`MALLOC
(
dhd
->
osh
, 
	`°æí
(
¨g
) + 1))) {

1237 
	`DHD_ERROR
(("%s: kmÆlo¯Áûed\n", 
__FUNCTION__
));

1238 
Áû
;

1240 
¨g_‹g
 = 
¨g_ßve
;

1241 
	`mem˝y
(
¨g_ßve
, 
¨g
, 
	`°æí
(arg) + 1);

1243 
¨gv
[
i
] = 
	`bcm°πok
(&
¨g_ßve
, " ", 0);

1245 
i
 = 0;

1246 i‡(
¨gv
[
i
] =
NULL
) {

1247 
	`DHD_ERROR
(("NoárgsÖrovided\n"));

1248 
Áû
;

1251 
°r
 = "pkt_filter_enable";

1252 
°r_Àn
 = 
	`°æí
(
°r
);

1253 
	`bcm_°∫˝y_s
(
buf
, (buf), 
°r
, 
°r_Àn
);

1254 
buf
[
°r_Àn
] = '\0';

1255 
buf_Àn
 = 
°r_Àn
 + 1;

1257 
pkt_fûãΩ
 = (
wl_pkt_fûãr_íabÀ_t
 *)(
buf
 + 
°r_Àn
 + 1);

1260 
íabÀ_∑rm
.
id
 = 
	`htod32
(
	`°πoul
(
¨gv
[
i
], 
NULL
, 0));

1263 
íabÀ_∑rm
.
íabÀ
 = 
	`htod32
(enable);

1265 
buf_Àn
 +(
íabÀ_∑rm
);

1266 
	`mem˝y
((*)
pkt_fûãΩ
,

1267 &
íabÀ_∑rm
,

1268 (
íabÀ_∑rm
));

1271 
rc
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
buf
, 
buf_Àn
, 
TRUE
, 0);

1272 
rc
 =Ñc >= 0 ? 0 :Ñc;

1273 i‡(
rc
)

1274 
	`DHD_TRACE
(("%s: failedÅoáddÖktfilter %s,Ñetcode = %d\n",

1275 
__FUNCTION__
, 
¨g
, 
rc
));

1277 
	`DHD_TRACE
(("%s: successfullyáddedÖktfilter %s\n",

1278 
__FUNCTION__
, 
¨g
));

1281 
	`bcm_mkiov¨
("pkt_fûãr_mode", (*)&
ma°î_mode
, 4, 
buf
, (buf));

1282 
rc
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
buf
, (buf), 
TRUE
, 0);

1283 
rc
 =Ñc >= 0 ? 0 :Ñc;

1284 i‡(
rc
)

1285 
	`DHD_TRACE
(("%s: failedÅoáddÖktfilter %s,Ñetcode = %d\n",

1286 
__FUNCTION__
, 
¨g
, 
rc
));

1288 
Áû
:

1289 i‡(
¨g_‹g
)

1290 
	`MFREE
(
dhd
->
osh
, 
¨g_‹g
, 
	`°æí
(
¨g
) + 1);

1291 
	}
}

1294 
	$dhd_pktfûãr_ofÊﬂd_£t
(
dhd_pub_t
 * 
dhd
, *
¨g
)

1296 c⁄° *
°r
;

1297 
wl_pkt_fûãr_t
 
pkt_fûãr
;

1298 
wl_pkt_fûãr_t
 *
pkt_fûãΩ
;

1299 
buf_Àn
;

1300 
°r_Àn
;

1301 
rc
;

1302 
uöt32
 
mask_size
;

1303 
uöt32
 
∑âîn_size
;

1304 *
¨gv
[8], * 
buf
 = 0;

1305 
i
 = 0;

1306 *
¨g_ßve
 = 0, *
¨g_‹g
 = 0;

1307 
	#BUF_SIZE
 2048

	)

1309 i‡(!
¨g
)

1312 i‡(!(
¨g_ßve
 = 
	`MALLOC
(
dhd
->
osh
, 
	`°æí
(
¨g
) + 1))) {

1313 
	`DHD_ERROR
(("%s: kmÆlo¯Áûed\n", 
__FUNCTION__
));

1314 
Áû
;

1317 
¨g_‹g
 = 
¨g_ßve
;

1319 i‡(!(
buf
 = 
	`MALLOC
(
dhd
->
osh
, 
BUF_SIZE
))) {

1320 
	`DHD_ERROR
(("%s: kmÆlo¯Áûed\n", 
__FUNCTION__
));

1321 
Áû
;

1324 
	`mem˝y
(
¨g_ßve
, 
¨g
, 
	`°æí
(arg) + 1);

1326 i‡(
	`°æí
(
¨g
Ë> 
BUF_SIZE
) {

1327 
	`DHD_ERROR
(("NŸÉnough buf„∏%d < %d\n", ()
	`°æí
(
¨g
), ()(
buf
)));

1328 
Áû
;

1331 
¨gv
[
i
] = 
	`bcm°πok
(&
¨g_ßve
, " ", 0);

1332 
¨gv
[
i
++])

1333 
¨gv
[
i
] = 
	`bcm°πok
(&
¨g_ßve
, " ", 0);

1335 
i
 = 0;

1336 i‡(
¨gv
[
i
] =
NULL
) {

1337 
	`DHD_ERROR
(("NoárgsÖrovided\n"));

1338 
Áû
;

1341 
°r
 = "pkt_filter_add";

1342 
°r_Àn
 = 
	`°æí
(
°r
);

1343 
	`bcm_°∫˝y_s
(
buf
, 
BUF_SIZE
, 
°r
, 
°r_Àn
);

1344 
buf
[ 
°r_Àn
 ] = '\0';

1345 
buf_Àn
 = 
°r_Àn
 + 1;

1347 
pkt_fûãΩ
 = (
wl_pkt_fûãr_t
 *Ë(
buf
 + 
°r_Àn
 + 1);

1350 
pkt_fûãr
.
id
 = 
	`htod32
(
	`°πoul
(
¨gv
[
i
], 
NULL
, 0));

1352 i‡(
¨gv
[++
i
] =
NULL
) {

1353 
	`DHD_ERROR
(("PolarityÇotÖrovided\n"));

1354 
Áû
;

1358 
pkt_fûãr
.
√g©e_m©ch
 = 
	`htod32
(
	`°πoul
(
¨gv
[
i
], 
NULL
, 0));

1360 i‡(
¨gv
[++
i
] =
NULL
) {

1361 
	`DHD_ERROR
(("FilterÅypeÇotÖrovided\n"));

1362 
Áû
;

1366 
pkt_fûãr
.
ty≥
 = 
	`htod32
(
	`°πoul
(
¨gv
[
i
], 
NULL
, 0));

1368 i‡(
¨gv
[++
i
] =
NULL
) {

1369 
	`DHD_ERROR
(("OffsetÇotÖrovided\n"));

1370 
Áû
;

1374 
pkt_fûãr
.
u
.
∑âîn
.
off£t
 = 
	`htod32
(
	`°πoul
(
¨gv
[
i
], 
NULL
, 0));

1376 i‡(
¨gv
[++
i
] =
NULL
) {

1377 
	`DHD_ERROR
(("BitmaskÇotÖrovided\n"));

1378 
Áû
;

1382 
mask_size
 =

1383 
	`htod32
(
	`wl_∑âîn_©oh
(
¨gv
[
i
], (*Ë
pkt_fûãΩ
->
u
.
∑âîn
.
mask_™d_∑âîn
));

1385 i‡(
¨gv
[++
i
] =
NULL
) {

1386 
	`DHD_ERROR
(("PatternÇotÖrovided\n"));

1387 
Áû
;

1391 
∑âîn_size
 =

1392 
	`htod32
(
	`wl_∑âîn_©oh
(
¨gv
[
i
],

1393 (*Ë&
pkt_fûãΩ
->
u
.
∑âîn
.
mask_™d_∑âîn
[
mask_size
]));

1395 i‡(
mask_size
 !
∑âîn_size
) {

1396 
	`DHD_ERROR
(("MaskándÖatternÇotÅhe same size\n"));

1397 
Áû
;

1400 
pkt_fûãr
.
u
.
∑âîn
.
size_byãs
 = 
mask_size
;

1401 
buf_Àn
 +
WL_PKT_FILTER_FIXED_LEN
;

1402 
buf_Àn
 +(
WL_PKT_FILTER_PATTERN_FIXED_LEN
 + 2 * 
mask_size
);

1408 
	`mem˝y
((*)
pkt_fûãΩ
,

1409 &
pkt_fûãr
,

1410 
WL_PKT_FILTER_FIXED_LEN
 + 
WL_PKT_FILTER_PATTERN_FIXED_LEN
);

1412 
rc
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
buf
, 
buf_Àn
, 
TRUE
, 0);

1413 
rc
 =Ñc >= 0 ? 0 :Ñc;

1415 i‡(
rc
)

1416 
	`DHD_TRACE
(("%s: failedÅoáddÖktfilter %s,Ñetcode = %d\n",

1417 
__FUNCTION__
, 
¨g
, 
rc
));

1419 
	`DHD_TRACE
(("%s: successfullyáddedÖktfilter %s\n",

1420 
__FUNCTION__
, 
¨g
));

1422 
Áû
:

1423 i‡(
¨g_‹g
)

1424 
	`MFREE
(
dhd
->
osh
, 
¨g_‹g
, 
	`°æí
(
¨g
) + 1);

1426 i‡(
buf
)

1427 
	`MFREE
(
dhd
->
osh
, 
buf
, 
BUF_SIZE
);

1428 
	}
}

1434 #ifde‡
ARP_OFFLOAD_SUPPORT


1436 
	$dhd_¨p_ofÊﬂd_£t
(
dhd_pub_t
 * 
dhd
, 
¨p_mode
)

1438 
iovbuf
[32];

1439 
ªtcode
;

1441 
	`bcm_mkiov¨
("¨p_ﬁ", (*)&
¨p_mode
, 4, 
iovbuf
, (iovbuf));

1442 
ªtcode
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
, (iovbuf), 
TRUE
, 0);

1443 
ªtcode
 =Ñetcode >= 0 ? 0 :Ñetcode;

1444 i‡(
ªtcode
)

1445 
	`DHD_TRACE
(("%s: failedÅo set ARP offload modeÅo 0x%x,Ñetcode = %d\n",

1446 
__FUNCTION__
, 
¨p_mode
, 
ªtcode
));

1448 
	`DHD_TRACE
(("%s: successfully set ARP offload modeÅo 0x%x\n",

1449 
__FUNCTION__
, 
¨p_mode
));

1450 
	}
}

1453 
	$dhd_¨p_ofÊﬂd_íabÀ
(
dhd_pub_t
 * 
dhd
, 
¨p_íabÀ
)

1455 
iovbuf
[32];

1456 
ªtcode
;

1458 
	`bcm_mkiov¨
("¨p€", (*)&
¨p_íabÀ
, 4, 
iovbuf
, (iovbuf));

1459 
ªtcode
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
, (iovbuf), 
TRUE
, 0);

1460 
ªtcode
 =Ñetcode >= 0 ? 0 :Ñetcode;

1461 i‡(
ªtcode
)

1462 
	`DHD_TRACE
(("%s: failedÅoÉnabe ARP offloadÅo %d,Ñetcode = %d\n",

1463 
__FUNCTION__
, 
¨p_íabÀ
, 
ªtcode
));

1465 
	`DHD_TRACE
(("%s: successfullyÉnabed ARP offloadÅo %d\n",

1466 
__FUNCTION__
, 
¨p_íabÀ
));

1467 i‡(
¨p_íabÀ
) {

1468 
uöt32
 
vîsi⁄
;

1469 
	`bcm_mkiov¨
("¨p_vîsi⁄", 0, 0, 
iovbuf
, (iovbuf));

1470 
ªtcode
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_GET_VAR
, 
iovbuf
, (iovbuf), 
FALSE
, 0);

1471 i‡(
ªtcode
) {

1472 
	`DHD_INFO
(("%s: failÅo get version (maybe version 1:retcode = %d\n",

1473 
__FUNCTION__
, 
ªtcode
));

1474 
dhd
->
¨p_vîsi⁄
 = 1;

1477 
	`mem˝y
(&
vîsi⁄
, 
iovbuf
, (version));

1478 
	`DHD_INFO
(("%s: ARP Vîsi⁄%x\n", 
__FUNCTION__
, 
vîsi⁄
));

1479 
dhd
->
¨p_vîsi⁄
 = 
vîsi⁄
;

1482 
	}
}

1485 
	$dhd_a€_¨p_˛r
(
dhd_pub_t
 *
dhd
, 
idx
)

1487 
ªt
 = 0;

1488 
iov_Àn
 = 0;

1489 
iovbuf
[128];

1491 i‡(
dhd
 =
NULL
) ;

1492 i‡(
dhd
->
¨p_vîsi⁄
 == 1)

1493 
idx
 = 0;

1495 
iov_Àn
 = 
	`bcm_mkiov¨
("¨p_èbÀ_˛ór", 0, 0, 
iovbuf
, (iovbuf));

1496 i‡((
ªt
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
, 
iov_Àn
, 
TRUE
, 
idx
) < 0))

1497 
	`DHD_ERROR
(("%†Áûed codê%d\n", 
__FUNCTION__
, 
ªt
));

1498 
	}
}

1501 
	$dhd_a€_ho°ù_˛r
(
dhd_pub_t
 *
dhd
, 
idx
)

1503 
ªt
 = 0;

1504 
iov_Àn
 = 0;

1505 
iovbuf
[128];

1507 i‡(
dhd
 =
NULL
) ;

1508 i‡(
dhd
->
¨p_vîsi⁄
 == 1)

1509 
idx
 = 0;

1511 
iov_Àn
 = 
	`bcm_mkiov¨
("¨p_ho°ù_˛ór", 0, 0, 
iovbuf
, (iovbuf));

1512 i‡((
ªt
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
, 
iov_Àn
, 
TRUE
, 
idx
)) < 0)

1513 
	`DHD_ERROR
(("%†Áûed codê%d\n", 
__FUNCTION__
, 
ªt
));

1514 
	}
}

1517 
	$dhd_¨p_ofÊﬂd_add_ù
(
dhd_pub_t
 *
dhd
, 
uöt32
 
ùaddr
, 
idx
)

1519 
iov_Àn
 = 0;

1520 
iovbuf
[32];

1521 
ªtcode
;

1524 i‡(
dhd
 =
NULL
) ;

1525 i‡(
dhd
->
¨p_vîsi⁄
 == 1)

1526 
idx
 = 0;

1527 
iov_Àn
 = 
	`bcm_mkiov¨
("¨p_ho°ù", (*)&
ùaddr
,

1528 (
ùaddr
), 
iovbuf
, (iovbuf));

1529 
ªtcode
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
, 
iov_Àn
, 
TRUE
, 
idx
);

1531 i‡(
ªtcode
)

1532 
	`DHD_TRACE
(("%s: ARP ipáddrádd failed,Ñetcode = %d\n",

1533 
__FUNCTION__
, 
ªtcode
));

1535 
	`DHD_TRACE
(("%s: sARP H ipaddrÉntryádded \n",

1536 
__FUNCTION__
));

1537 
	}
}

1540 
	$dhd_¨p_gë_¨p_ho°ù_èbÀ
(
dhd_pub_t
 *
dhd
, *
buf
, 
buÊí
, 
idx
)

1542 
ªtcode
, 
i
;

1543 
iov_Àn
;

1544 
uöt32
 *
±r32
 = 
buf
;

1545 
boﬁ
 
˛r_bŸtom
 = 
FALSE
;

1547 i‡(!
buf
)

1549 i‡(
dhd
 =
NULL
)  -1;

1550 i‡(
dhd
->
¨p_vîsi⁄
 == 1)

1551 
idx
 = 0;

1553 
iov_Àn
 = 
	`bcm_mkiov¨
("¨p_ho°ù", 0, 0, 
buf
, 
buÊí
);

1554 
	`BCM_REFERENCE
(
iov_Àn
);

1555 
ªtcode
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_GET_VAR
, 
buf
, 
buÊí
, 
FALSE
, 
idx
);

1557 i‡(
ªtcode
) {

1558 
	`DHD_TRACE
(("%s: ioctl WLC_GET_VARÉrror %d\n",

1559 
__FUNCTION__
, 
ªtcode
));

1565 
i
 = 0; i < 
MAX_IPV4_ENTRIES
; i++) {

1566 i‡(!
˛r_bŸtom
) {

1567 i‡(*
±r32
 == 0)

1568 
˛r_bŸtom
 = 
TRUE
;

1570 *
±r32
 = 0;

1572 
±r32
++;

1576 
	}
}

1581 
	$dhd_£ndup_evít_comm⁄
(
dhd_pub_t
 *
dhdp
, 
wl_evít_msg_t
 *
evít
, *
d©a
)

1583 
	`¡oh32
(
evít
->
evít_ty≥
)) {

1584 #ifde‡
WLBTAMP


1585 
WLC_E_BTA_HCI_EVENT
:

1593 
	`dhd_£ndup_evít
(
dhdp
, 
evít
, 
d©a
);

1594 
	}
}

1600 
boﬁ
 
	$dhd_is_assocüãd
(
dhd_pub_t
 *
dhd
, *
bss_buf
, *
ªtvÆ
)

1602 
bssid
[6], 
zbuf
[6];

1603 
ªt
 = -1;

1605 
	`bzîo
(
bssid
, 6);

1606 
	`bzîo
(
zbuf
, 6);

1608 
ªt
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_GET_BSSID
, (*)&
bssid
, 
ETHER_ADDR_LEN
, 
FALSE
, 0);

1609 
	`DHD_TRACE
((" %†WLC_GET_BSSID io˘»ª†%d\n", 
__FUNCTION__
, 
ªt
));

1611 i‡(
ªt
 =
BCME_NOTASSOCIATED
) {

1612 
	`DHD_TRACE
(("%s:ÇŸássocüãd!Ñes:%d\n", 
__FUNCTION__
, 
ªt
));

1615 i‡(
ªtvÆ
)

1616 *
ªtvÆ
 = 
ªt
;

1618 i‡(
ªt
 < 0)

1619  
FALSE
;

1621 i‡((
	`memcmp
(
bssid
, 
zbuf
, 
ETHER_ADDR_LEN
) != 0)) {

1624 i‡(
bss_buf
) {

1626 
	`mem˝y
(
bss_buf
, 
bssid
, 
ETHER_ADDR_LEN
);

1628  
TRUE
;

1630 
	`DHD_TRACE
(("%s: WLC_GET_BSSID io˘»ªtu∫ed zîÿbssid\n", 
__FUNCTION__
));

1631  
FALSE
;

1633 
	}
}

1638 
	$dhd_gë_su•íd_b˙_li_dtim
(
dhd_pub_t
 *
dhd
)

1640 
b˙_li_dtim
;

1641 
ªt
 = -1;

1642 
dtim_assoc
 = 0;

1644 
b˙_li_dtim
 = 
dhd
->
su•íd_b˙_li_dtim
;

1647 i‡(
	`dhd_is_assocüãd
(
dhd
, 
NULL
, NULLË=
FALSE
) {

1648 
	`DHD_TRACE
(("%†NOTásso¯ªà%d\n", 
__FUNCTION__
, 
ªt
));

1649 
exô
;

1653 i‡((
ªt
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_GET_DTIMPRD
,

1654 &
dtim_assoc
, (dtim_assoc), 
FALSE
, 0)) < 0) {

1655 
	`DHD_ERROR
(("%†Áûed codê%d\n", 
__FUNCTION__
, 
ªt
));

1656 
exô
;

1659 
	`DHD_ERROR
(("%s bcn_li_dtim=%d DTIM=%d Listen=%d\n",

1660 
__FUNCTION__
, 
b˙_li_dtim
, 
dtim_assoc
, 
LISTEN_INTERVAL
));

1663 i‡(
dtim_assoc
 == 0) {

1664 
exô
;

1668 i‡(
dtim_assoc
 > 
LISTEN_INTERVAL
) {

1670 
b˙_li_dtim
 = 1;

1671 
	`DHD_ERROR
(("%s DTIM=%d > Listen=%d :Åoo big ...\n",

1672 
__FUNCTION__
, 
dtim_assoc
, 
LISTEN_INTERVAL
));

1673 
exô
;

1676 i‡((
b˙_li_dtim
 * 
dtim_assoc
Ë> 
LISTEN_INTERVAL
) {

1678 
b˙_li_dtim
 = ()(
LISTEN_INTERVAL
 / 
dtim_assoc
);

1679 
	`DHD_TRACE
(("%†agju° dtim_skùá†%d\n", 
__FUNCTION__
, 
b˙_li_dtim
));

1682 
exô
:

1683  
b˙_li_dtim
;

1684 
	}
}

1687 
boﬁ
 
	$dhd_suµ‹t_°a_mode
(
dhd_pub_t
 *
dhd
)

1690 #ifde‡ 
WL_CFG80211


1691 i‡(!(
dhd
->
›_mode
 & 
DHD_FLAG_STA_MODE
))

1692  
FALSE
;

1695  
TRUE
;

1696 
	}
}

1698 #i‡
deföed
(
PNO_SUPPORT
)

1700 
	$dhd_≤o_˛ón
(
dhd_pub_t
 *
dhd
)

1702 
iovbuf
[128];

1703 
p‚_íabÀd
 = 0;

1704 
iov_Àn
 = 0;

1705 
ªt
;

1708 
iov_Àn
 = 
	`bcm_mkiov¨
("p‚", (*)&
p‚_íabÀd
, 4, 
iovbuf
, (iovbuf));

1709 i‡((
ªt
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
, (iovbuf), 
TRUE
, 0)) >= 0) {

1711 
iov_Àn
 = 
	`bcm_mkiov¨
("p‚˛ór", 0, 0, 
iovbuf
, (iovbuf));

1712 i‡(
iov_Àn
) {

1713 i‡((
ªt
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
,

1714 
iov_Àn
, 
TRUE
, 0)) < 0) {

1715 
	`DHD_ERROR
(("%†Áûed codê%d\n", 
__FUNCTION__
, 
ªt
));

1719 
ªt
 = -1;

1720 
	`DHD_ERROR
(("%†Áûed codê%d\n", 
__FUNCTION__
, 
iov_Àn
));

1724 
	`DHD_ERROR
(("%†Áûed codê%d\n", 
__FUNCTION__
, 
ªt
));

1726  
ªt
;

1727 
	}
}

1730 
	$dhd_≤o_íabÀ
(
dhd_pub_t
 *
dhd
, 
p‚_íabÀd
)

1732 
iovbuf
[128];

1733 
ªt
 = -1;

1735 i‡((!
dhd
Ë&& ((
p‚_íabÀd
 != 0) || (pfn_enabled != 1))) {

1736 
	`DHD_ERROR
(("%†îr‹Éxô\n", 
__FUNCTION__
));

1737  
ªt
;

1740 #i‚de‡
WL_SCHED_SCAN


1741 i‡(!
	`dhd_suµ‹t_°a_mode
(
dhd
))

1742  (
ªt
);

1744 
	`mem£t
(
iovbuf
, 0, (iovbuf));

1746 i‡((
p‚_íabÀd
Ë&& (
	`dhd_is_assocüãd
(
dhd
, 
NULL
, NULLË=
TRUE
)) {

1747 
	`DHD_ERROR
(("%†≤ÿi†NOTÉ«bÀ : cÆÀd i¿asso¯modê, ign‹e\n", 
__FUNCTION__
));

1748  
ªt
;

1753 i‡((
ªt
 = 
	`bcm_mkiov¨
("p‚", (*)&
p‚_íabÀd
, 4, 
iovbuf
, (iovbuf))) > 0) {

1754 i‡((
ªt
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
,

1755 
iovbuf
, (iovbuf), 
TRUE
, 0)) < 0) {

1756 
	`DHD_ERROR
(("%†Áûed f‹Éº‹=%d\n", 
__FUNCTION__
, 
ªt
));

1757  
ªt
;

1760 
dhd
->
≤o_íabÀ
 = 
p‚_íabÀd
;

1761 
	`DHD_TRACE
(("%s setÖnoás %s\n",

1762 
__FUNCTION__
, 
dhd
->
≤o_íabÀ
 ? "Enable" : "Disable"));

1765 
	`DHD_ERROR
(("%†ÁûedÉº=%d\n", 
__FUNCTION__
, 
ªt
));

1767  
ªt
;

1768 
	}
}

1772 
	$dhd_≤o_£t
(
dhd_pub_t
 *
dhd
, 
wlc_ssid_t
* 
ssids_loˇl
, 
nssid
, 
ush‹t
 
sˇn_‰
,

1773 
≤o_ª≥©
, 
≤o_‰eq_expo_max
)

1775 
îr
 = -1;

1776 
iovbuf
[128];

1777 
k
, 
i
;

1778 
wl_p‚_∑øm_t
 
p‚_∑øm
;

1779 
wl_p‚_t
 
p‚_ñemít
;

1780 
uöt
 
Àn
 = 0;

1782 
	`DHD_TRACE
(("%†nssid=%dÇch™=%d\n", 
__FUNCTION__
, 
nssid
, 
sˇn_‰
));

1784 i‡((!
dhd
Ë|| (!
ssids_loˇl
)) {

1785 
	`DHD_ERROR
(("%†îr‹Éxô(%†%s)\n", 
__FUNCTION__
,

1786 (!
dhd
)?"dhd i†nuŒ":"", (!
ssids_loˇl
)?"ssid isÇull":""));

1787 
îr
 = -1;

1788  
îr
;

1790 #i‚de‡
WL_SCHED_SCAN


1791 i‡(!
	`dhd_suµ‹t_°a_mode
(
dhd
))

1792  
îr
;

1796 
k
 = 0; k < 
nssid
; k++) {

1797 i‡(!
ssids_loˇl
[
k
].
SSID_Àn
) {

1798 
	`DHD_ERROR
(("%d: Brﬂdˇ° SSID i†ûegÆ f‹ PNO sëtög\n", 
k
));

1799  
îr
;

1803 #ifde‡
PNO_DUMP


1805 
j
;

1806 
j
 = 0; j < 
nssid
; j++) {

1807 
	`DHD_ERROR
(("%d: sˇ¿ f‹ %†sizê=%d\n", 
j
,

1808 
ssids_loˇl
[
j
].
SSID
, ssids_loˇl[j].
SSID_Àn
));

1814 i‡((
îr
 = 
	`dhd_≤o_˛ón
(
dhd
)) < 0) {

1815 
	`DHD_ERROR
(("%†ÁûedÉº‹=%d\n", 
__FUNCTION__
, 
îr
));

1816  
îr
;

1818 
	`mem£t
(
iovbuf
, 0, (iovbuf));

1819 
	`mem£t
(&
p‚_∑øm
, 0, (pfn_param));

1820 
	`mem£t
(&
p‚_ñemít
, 0, (pfn_element));

1823 
p‚_∑øm
.
vîsi⁄
 = 
	`htod32
(
PFN_VERSION
);

1824 
p‚_∑øm
.
Êags
 = 
	`htod16
((
PFN_LIST_ORDER
 << 
SORT_CRITERIA_BIT
));

1827 i‡((
≤o_ª≥©
 !0Ë|| (
≤o_‰eq_expo_max
 != 0)) {

1828 
p‚_∑øm
.
Êags
 |
	`htod16
(
ENABLE
 << 
ENABLE_ADAPTSCAN_BIT
);

1829 
p‚_∑øm
.
ª≥©
 = (
uch¨
Ë(
≤o_ª≥©
);

1830 
p‚_∑øm
.
exp
 = (
uch¨
Ë(
≤o_‰eq_expo_max
);

1833 i‡(
sˇn_‰
 != 0)

1834 
p‚_∑øm
.
sˇn_‰eq
 = 
	`htod32
(
sˇn_‰
);

1836 i‡(
p‚_∑øm
.
sˇn_‰eq
 > 
PNO_SCAN_MAX_FW_SEC
) {

1837 
	`DHD_ERROR
(("%†≤ÿ‰eqábovê%d sec\n", 
__FUNCTION__
, 
PNO_SCAN_MAX_FW_SEC
));

1838  
îr
;

1840 i‡(
p‚_∑øm
.
sˇn_‰eq
 < 
PNO_SCAN_MIN_FW_SEC
) {

1841 
	`DHD_ERROR
(("%†≤ÿ‰eqÜes†%d sec\n", 
__FUNCTION__
, 
PNO_SCAN_MIN_FW_SEC
));

1842  
îr
;

1845 
Àn
 = 
	`bcm_mkiov¨
("p‚_£t", (*)&
p‚_∑øm
, ’‚_∑øm), 
iovbuf
, (iovbuf));

1846 i‡((
îr
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
, 
Àn
, 
TRUE
, 0)) < 0) {

1847 
	`DHD_ERROR
(("%sÖfn_set failed forÉrror=%d\n",

1848 
__FUNCTION__
, 
îr
));

1849  
îr
;

1853 
i
 = 0; i < 
nssid
; i++) {

1855 
p‚_ñemít
.
ö‰a
 = 
	`htod32
(
DOT11_BSSTYPE_INFRASTRUCTURE
);

1856 
p‚_ñemít
.
auth
 = (
DOT11_OPEN_SYSTEM
);

1857 
p‚_ñemít
.
w∑_auth
 = 
	`htod32
(
WPA_AUTH_PFN_ANY
);

1858 
p‚_ñemít
.
w£c
 = 
	`htod32
(0);

1859 
p‚_ñemít
.
ö‰a
 = 
	`htod32
(1);

1860 
p‚_ñemít
.
Êags
 = 
	`htod32
(
ENABLE
 << 
WL_PFN_HIDDEN_BIT
);

1861 
	`mem˝y
((*)
p‚_ñemít
.
ssid
.
SSID
, 
ssids_loˇl
[
i
].SSID, ssids_loˇl[i].
SSID_Àn
);

1862 
p‚_ñemít
.
ssid
.
SSID_Àn
 = 
ssids_loˇl
[
i
].SSID_len;

1864 i‡((
Àn
 =

1865 
	`bcm_mkiov¨
("p‚_add", (*)&
p‚_ñemít
,

1866 (
p‚_ñemít
), 
iovbuf
, (iovbuf))) > 0) {

1867 i‡((
îr
 =

1868 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
, 
Àn
, 
TRUE
, 0)) < 0) {

1869 
	`DHD_ERROR
(("%s failed for i=%dÉrror=%d\n",

1870 
__FUNCTION__
, 
i
, 
îr
));

1871  
îr
;

1874 
	`DHD_TRACE
(("%s set OK with PNOÅime=%dÑepeat=%d max_adjust=%d\n",

1875 
__FUNCTION__
, 
p‚_∑øm
.
sˇn_‰eq
,

1876 
p‚_∑øm
.
ª≥©
,Ö‚_∑øm.
exp
));

1878 
	`DHD_ERROR
(("%†ÁûedÉº=%d\n", 
__FUNCTION__
, 
îr
));

1883  
îr
;

1884 
	}
}

1887 
	$dhd_≤o_gë_°©us
(
dhd_pub_t
 *
dhd
)

1889 
ªt
 = -1;

1891 i‡(!
dhd
)

1892  
ªt
;

1894  (
dhd
->
≤o_íabÀ
);

1895 
	}
}

1899 #i‡
deföed
(
KEEP_ALIVE
)

1900 
	$dhd_kìp_Æive_⁄off
(
dhd_pub_t
 *
dhd
)

1902 
buf
[256];

1903 c⁄° *
°r
;

1904 
wl_mkìp_Æive_pkt_t
 
mkìp_Æive_pkt
;

1905 
wl_mkìp_Æive_pkt_t
 *
mkìp_Æive_pkç
;

1906 
buf_Àn
;

1907 
°r_Àn
;

1908 
ªs
 = -1;

1910 i‡(!
	`dhd_suµ‹t_°a_mode
(
dhd
))

1911  
ªs
;

1913 
	`DHD_TRACE
(("%†executi⁄\n", 
__FUNCTION__
));

1915 
°r
 = "mkeep_alive";

1916 
°r_Àn
 = 
	`°æí
(
°r
);

1917 
	`°∫˝y
(
buf
, 
°r
, 
°r_Àn
);

1918 
buf
[ 
°r_Àn
 ] = '\0';

1919 
mkìp_Æive_pkç
 = (
wl_mkìp_Æive_pkt_t
 *Ë(
buf
 + 
°r_Àn
 + 1);

1920 
mkìp_Æive_pkt
.
≥riod_m£c
 = 
CUSTOM_KEEP_ALIVE_SETTING
;

1921 
buf_Àn
 = 
°r_Àn
 + 1;

1922 
mkìp_Æive_pkt
.
vîsi⁄
 = 
	`htod16
(
WL_MKEEP_ALIVE_VERSION
);

1923 
mkìp_Æive_pkt
.
Àngth
 = 
	`htod16
(
WL_MKEEP_ALIVE_FIXED_LEN
);

1925 
mkìp_Æive_pkt
.
kìp_Æive_id
 = 0;

1926 
mkìp_Æive_pkt
.
Àn_byãs
 = 0;

1927 
buf_Àn
 +
WL_MKEEP_ALIVE_FIXED_LEN
;

1928 
	`bzîo
(
mkìp_Æive_pkt
.
d©a
, (mkeep_alive_pkt.data));

1933 
	`mem˝y
((*)
mkìp_Æive_pkç
, &
mkìp_Æive_pkt
, 
WL_MKEEP_ALIVE_FIXED_LEN
);

1935 
ªs
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
buf
, 
buf_Àn
, 
TRUE
, 0);

1937  
ªs
;

1938 
	}
}

1946 
	$wl_iw_∑r£_d©a_év
(** 
li°_°r
, *
d°
, 
d°_size
, c⁄° 
tokí
,

1947 
öput_size
, *
byãs_À·
)

1949 * 
°r
;

1950 
uöt16
 
sh‹t_ãmp
;

1951 
uöt32
 
öt_ãmp
;

1953 i‡((
li°_°r
 =
NULL
Ë|| (*li°_°∏=NULLË||(
byãs_À·
 == NULL) || (*bytes_left < 0)) {

1954 
	`DHD_ERROR
(("%†îr‹Ö¨amãrs\n", 
__FUNCTION__
));

1957 
°r
 = *
li°_°r
;

1960 
	`mem£t
(
d°
, 0, 
d°_size
);

1961 *
byãs_À·
 > 0) {

1963 i‡(
°r
[0] !
tokí
) {

1964 
	`DHD_TRACE
(("%s NOT Type=%d get=%dÜeft_parse=%d \n",

1965 
__FUNCTION__
, 
tokí
, 
°r
[0], *
byãs_À·
));

1969 *
byãs_À·
 -= 1;

1970 
°r
 += 1;

1972 i‡(
öput_size
 == 1) {

1973 
	`mem˝y
(
d°
, 
°r
, 
öput_size
);

1975 i‡(
öput_size
 == 2) {

1976 
	`mem˝y
(
d°
, (*)
	`htod16
(mem˝y(&
sh‹t_ãmp
, 
°r
, 
öput_size
)),

1977 
öput_size
);

1979 i‡(
öput_size
 == 4) {

1980 
	`mem˝y
(
d°
, (*)
	`htod32
(mem˝y(&
öt_ãmp
, 
°r
, 
öput_size
)),

1981 
öput_size
);

1984 *
byãs_À·
 -
öput_size
;

1985 
°r
 +
öput_size
;

1986 *
li°_°r
 = 
°r
;

1990 
	}
}

1996 
	$wl_iw_∑r£_ch™√l_li°_év
(** 
li°_°r
, 
uöt16
* 
ch™√l_li°
,

1997 
ch™√l_num
, *
byãs_À·
)

1999 * 
°r
;

2000 
idx
 = 0;

2002 i‡((
li°_°r
 =
NULL
Ë|| (*li°_°∏=NULLË||(
byãs_À·
 == NULL) || (*bytes_left < 0)) {

2003 
	`DHD_ERROR
(("%†îr‹Ö¨amãrs\n", 
__FUNCTION__
));

2006 
°r
 = *
li°_°r
;

2008 *
byãs_À·
 > 0) {

2010 i‡(
°r
[0] !
CSCAN_TLV_TYPE_CHANNEL_IE
) {

2011 *
li°_°r
 = 
°r
;

2012 
	`DHD_TRACE
(("End ch™√l=%dÜe·_∑r£=%d %d\n", 
idx
, *
byãs_À·
, 
°r
[0]));

2013  
idx
;

2016 *
byãs_À·
 -= 1;

2017 
°r
 += 1;

2019 i‡(
°r
[0] == 0) {

2021 
ch™√l_li°
[
idx
] = 0x0;

2024 
ch™√l_li°
[
idx
] = (
uöt16
)
°r
[0];

2025 
	`DHD_TRACE
(("%†ch™√l=%d \n", 
__FUNCTION__
, 
ch™√l_li°
[
idx
]));

2027 *
byãs_À·
 -= 1;

2028 
°r
 += 1;

2030 i‡(
idx
++ > 255) {

2031 
	`DHD_ERROR
(("%†Toÿm™y ch™√l†\n", 
__FUNCTION__
));

2036 *
li°_°r
 = 
°r
;

2037  
idx
;

2038 
	}
}

2044 
	$wl_iw_∑r£_ssid_li°_év
(** 
li°_°r
, 
wlc_ssid_t
* 
ssid
, 
max
, *
byãs_À·
)

2046 * 
°r
;

2047 
idx
 = 0;

2049 i‡((
li°_°r
 =
NULL
Ë|| (*li°_°∏=NULLË|| (*
byãs_À·
 < 0)) {

2050 
	`DHD_ERROR
(("%†îr‹Ö¨amãrs\n", 
__FUNCTION__
));

2053 
°r
 = *
li°_°r
;

2054 *
byãs_À·
 > 0) {

2056 i‡(
°r
[0] !
CSCAN_TLV_TYPE_SSID_IE
) {

2057 *
li°_°r
 = 
°r
;

2058 
	`DHD_TRACE
(("nssid=%dÜe·_∑r£=%d %d\n", 
idx
, *
byãs_À·
, 
°r
[0]));

2059  
idx
;

2063 *
byãs_À·
 -= 1;

2064 
°r
 += 1;

2066 i‡(
°r
[0] == 0) {

2068 
ssid
[
idx
].
SSID_Àn
 = 0;

2069 
	`mem£t
((*)
ssid
[
idx
].
SSID
, 0x0, 
DOT11_MAX_SSID_LEN
);

2070 *
byãs_À·
 -= 1;

2071 
°r
 += 1;

2073 
	`DHD_TRACE
(("BROADCAST SCANÜe·=%d\n", *
byãs_À·
));

2075 i‡(
°r
[0] <
DOT11_MAX_SSID_LEN
) {

2077 
ssid
[
idx
].
SSID_Àn
 = 
°r
[0];

2078 *
byãs_À·
 -= 1;

2079 
°r
 += 1;

2082 i‡(
ssid
[
idx
].
SSID_Àn
 > *
byãs_À·
) {

2083 
	`DHD_ERROR
(("%s out of memoryÑangeÜen=%d butÜeft=%d\n",

2084 
__FUNCTION__
, 
ssid
[
idx
].
SSID_Àn
, *
byãs_À·
));

2088 
	`mem˝y
((*)
ssid
[
idx
].
SSID
, 
°r
, ssid[idx].
SSID_Àn
);

2090 *
byãs_À·
 -
ssid
[
idx
].
SSID_Àn
;

2091 
°r
 +
ssid
[
idx
].
SSID_Àn
;

2093 
	`DHD_TRACE
(("%s :size=%dÜeft=%d\n",

2094 (*)
ssid
[
idx
].
SSID
, ssid[idx].
SSID_Àn
, *
byãs_À·
));

2097 
	`DHD_ERROR
(("### SSID sizêm‹êth© %d\n", 
°r
[0]));

2101 i‡(
idx
++ > 
max
) {

2102 
	`DHD_ERROR
(("%†numbî o‡SSID†m‹êth© %d\n", 
__FUNCTION__
, 
idx
));

2107 *
li°_°r
 = 
°r
;

2108  
idx
;

2109 
	}
}

2117 
	$wl_iw_∑r£_ssid_li°
(** 
li°_°r
, 
wlc_ssid_t
* 
ssid
, 
idx
, 
max
)

2119 * 
°r
, *
±r
;

2121 i‡((
li°_°r
 =
NULL
) || (*list_str == NULL))

2124 
°r
 = *
li°_°r
; så !
NULL
; så = 
±r
) {

2127 i‡(!
	`°∫cmp
(
°r
, 
GET_CHANNEL
, 
	`°æí
(GET_CHANNEL))) {

2128 *
li°_°r
 = 
°r
 + 
	`°æí
(
GET_CHANNEL
);

2129  
idx
;

2132 i‡((
±r
 = 
	`°rchr
(
°r
, ',')Ë!
NULL
) {

2133 *
±r
++ = '\0';

2136 i‡(
	`°æí
(
°r
Ë> 
DOT11_MAX_SSID_LEN
) {

2137 
	`DHD_ERROR
(("ssid <%s>Éx˚ed†%d\n", 
°r
, 
DOT11_MAX_SSID_LEN
));

2141 i‡(
	`°æí
(
°r
) == 0)

2142 
ssid
[
idx
].
SSID_Àn
 = 0;

2144 i‡(
idx
 < 
max
) {

2145 
	`bzîo
(
ssid
[
idx
].
SSID
, (ssid[idx].SSID));

2146 
	`°∫˝y
((*)
ssid
[
idx
].
SSID
, 
°r
, (ssid[idx].SSID) - 1);

2147 
ssid
[
idx
].
SSID_Àn
 = 
	`°æí
(
°r
);

2149 
idx
++;

2151  
idx
;

2152 
	}
}

2158 
	$wl_iw_∑r£_ch™√l_li°
(** 
li°_°r
, 
uöt16
* 
ch™√l_li°
, 
ch™√l_num
)

2160 
num
;

2161 
vÆ
;

2162 * 
°r
;

2163 * 
íd±r
 = 
NULL
;

2165 i‡((
li°_°r
 =
NULL
)||(*list_str == NULL))

2168 
°r
 = *
li°_°r
;

2169 
num
 = 0;

2170 
	`°∫cmp
(
°r
, 
GET_NPROBE
, 
	`°æí
(GET_NPROBE))) {

2171 
vÆ
 = ()
	`°πoul
(
°r
, &
íd±r
, 0);

2172 i‡(
íd±r
 =
°r
) {

2173 
	`¥ötf
("couldÇotÖarse channelÇumber startingát"

2175 
°r
, *
li°_°r
);

2178 
°r
 = 
íd±r
 + 
	`°r•n
(endptr, " ,");

2180 i‡(
num
 =
ch™√l_num
) {

2181 
	`DHD_ERROR
(("too many channels (moreÅhan %d) in channelÜist:\n%s\n",

2182 
ch™√l_num
, *
li°_°r
));

2186 
ch™√l_li°
[
num
++] = (
uöt16
)
vÆ
;

2188 *
li°_°r
 = 
°r
;

2189  
num
;

2190 
	}
}

	@dhd_custom_gpio.c

26 
	~<ty≥defs.h
>

27 
	~<löuxvî.h
>

28 
	~<o¶.h
>

29 
	~<bcmutûs.h
>

31 
	~<dngl_°©s.h
>

32 
	~<dhd.h
>

34 
	~<wlio˘l.h
>

35 
	~<wl_iw.h
>

37 
	#WL_ERROR
(
x
Ë
¥ötf
 
	)
x

38 
	#WL_TRACE
(
x
)

	)

40 #ifde‡
CUSTOMER_HW


41 
bcm_wœn_powî_off
();

42 
bcm_wœn_powî_⁄
();

44 #i‡
deföed
(
CUSTOMER_HW2
)

45 #ifde‡
CONFIG_WIFI_CONTROL_FUNC


46 
wifi_£t_powî
(
⁄
, 
m£c
);

47 
wifi_gë_úq_numbî
(*
úq_Êags_±r
);

48 
wifi_gë_mac_addr
(*
buf
);

49 *
wifi_gë_cou¡ry_code
(*
ccode
);

51 
	$wifi_£t_powî
(
⁄
, 
m£c
Ë{  -1; 
	}
}

52 
	$wifi_gë_úq_numbî
(*
úq_Êags_±r
Ë{  -1; 
	}
}

53 
	$wifi_gë_mac_addr
(*
buf
Ë{  -1; 
	}
}

54 *
	$wifi_gë_cou¡ry_code
(*
ccode
Ë{  
NULL
; 
	}
}

58 #i‡
deföed
(
OOB_INTR_ONLY
)

60 #i‡
deföed
(
BCMLXSDMMC
)

61 
sdioh_mmc_úq
(
úq
);

64 #ifde‡
CUSTOMER_HW3


65 
	~<mach/gpio.h
>

69 
	gdhd_oob_gpio_num
 = -1;

71 
moduÀ_∑øm
(
dhd_oob_gpio_num
, , 0644);

72 
MODULE_PARM_DESC
(
dhd_oob_gpio_num
, "DHD oob gpioÇumber");

85 
	$dhd_cu°omî_oob_úq_m≠
(*
úq_Êags_±r
)

87 
ho°_oob_úq
 = 0;

89 #i‡
	`deföed
(
CUSTOMER_HW2
)

90 
ho°_oob_úq
 = 
	`wifi_gë_úq_numbî
(
úq_Êags_±r
);

93 #i‡
	`deföed
(
CUSTOM_OOB_GPIO_NUM
)

94 i‡(
dhd_oob_gpio_num
 < 0) {

95 
dhd_oob_gpio_num
 = 
CUSTOM_OOB_GPIO_NUM
;

99 i‡(
dhd_oob_gpio_num
 < 0) {

100 
	`WL_ERROR
(("%s: ERROR customer specific Host GPIO is NOT defined \n",

101 
__FUNCTION__
));

102  (
dhd_oob_gpio_num
);

105 
	`WL_ERROR
(("%s: customer specific Host GPIOÇumber is (%d)\n",

106 
__FUNCTION__
, 
dhd_oob_gpio_num
));

108 #i‡
deföed
 
CUSTOMER_HW


109 
ho°_oob_úq
 = 
	`MSM_GPIO_TO_INT
(
dhd_oob_gpio_num
);

110 #ñi‡
deföed
 
CUSTOMER_HW3


111 
	`gpio_ªque°
(
dhd_oob_gpio_num
, "oob irq");

112 
ho°_oob_úq
 = 
	`gpio_to_úq
(
dhd_oob_gpio_num
);

113 
	`gpio_dúe˘i⁄_öput
(
dhd_oob_gpio_num
);

117  (
ho°_oob_úq
);

118 
	}
}

123 
	$dhd_cu°omî_gpio_wœn_˘æ
(
⁄off
)

125 
⁄off
) {

126 
WLAN_RESET_OFF
:

127 
	`WL_TRACE
(("%s: call customer specific GPIOÅo insert WLAN RESET\n",

128 
__FUNCTION__
));

129 #ifde‡
CUSTOMER_HW


130 
	`bcm_wœn_powî_off
(2);

132 #i‡
	`deföed
(
CUSTOMER_HW2
)

133 
	`wifi_£t_powî
(0, 0);

135 
	`WL_ERROR
(("=========== WLANÖlaced in RESET ========\n"));

138 
WLAN_RESET_ON
:

139 
	`WL_TRACE
(("%s: callc customer specific GPIOÅoÑemove WLAN RESET\n",

140 
__FUNCTION__
));

141 #ifde‡
CUSTOMER_HW


142 
	`bcm_wœn_powî_⁄
(2);

144 #i‡
	`deföed
(
CUSTOMER_HW2
)

145 
	`wifi_£t_powî
(1, 0);

147 
	`WL_ERROR
(("=========== WLAN going backÅoÜive ========\n"));

150 
WLAN_POWER_OFF
:

151 
	`WL_TRACE
(("%s: call customer specific GPIOÅoÅurn off WL_REG_ON\n",

152 
__FUNCTION__
));

153 #ifde‡
CUSTOMER_HW


154 
	`bcm_wœn_powî_off
(1);

158 
WLAN_POWER_ON
:

159 
	`WL_TRACE
(("%s: call customer specific GPIOÅoÅurn on WL_REG_ON\n",

160 
__FUNCTION__
));

161 #ifde‡
CUSTOMER_HW


162 
	`bcm_wœn_powî_⁄
(1);

164 
	`OSL_DELAY
(200);

168 
	}
}

170 #ifde‡
GET_CUSTOM_MAC_ENABLE


173 
	$dhd_cu°om_gë_mac_addªss
(*
buf
)

175 
ªt
 = 0;

177 
	`WL_TRACE
(("%†E¡î\n", 
__FUNCTION__
));

178 i‡(!
buf
)

179  -
EINVAL
;

182 #i‡
	`deföed
(
CUSTOMER_HW2
Ë&& (
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 35))

183 
ªt
 = 
	`wifi_gë_mac_addr
(
buf
);

186 #ifde‡
EXAMPLE_GET_MAC


189 
ëhî_addr
 
ó_exam∂e
 = {{0x00, 0x11, 0x22, 0x33, 0x44, 0xFF}};

190 
	`bc›y
((*)&
ó_exam∂e
, 
buf
, (
ëhî_addr
));

194  
ªt
;

195 
	}
}

199 c⁄° 
˙åy_loˇÀs_cu°om
 
	gå™¶©e_cu°om_èbÀ
[] = {

201 #ifde‡
EXAMPLE_TABLE


252 
	$gë_cu°omized_cou¡ry_code
(*
cou¡ry_iso_code
, 
wl_cou¡ry_t
 *
c•ec
)

254 #i‡
	`deföed
(
CUSTOMER_HW2
Ë&& (
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 39))

256 
˙åy_loˇÀs_cu°om
 *
˛oc_±r
;

258 i‡(!
c•ec
)

261 
˛oc_±r
 = 
	`wifi_gë_cou¡ry_code
(
cou¡ry_iso_code
);

262 i‡(
˛oc_±r
) {

263 
	`°æ˝y
(
c•ec
->
ccode
, 
˛oc_±r
->
cu°om_loˇÀ
, 
WLC_CNTRY_BUF_SZ
);

264 
c•ec
->
ªv
 = 
˛oc_±r
->
cu°om_loˇÀ_ªv
;

268 
size
, 
i
;

270 
size
 = 
	`ARRAYSIZE
(
å™¶©e_cu°om_èbÀ
);

272 i‡(
c•ec
 == 0)

275 i‡(
size
 == 0)

278 
i
 = 0; i < 
size
; i++) {

279 i‡(
	`°rcmp
(
cou¡ry_iso_code
, 
å™¶©e_cu°om_èbÀ
[
i
].
iso_abbªv
) == 0) {

280 
	`mem˝y
(
c•ec
->
ccode
,

281 
å™¶©e_cu°om_èbÀ
[
i
].
cu°om_loˇÀ
, 
WLC_CNTRY_BUF_SZ
);

282 
c•ec
->
ªv
 = 
å™¶©e_cu°om_èbÀ
[
i
].
cu°om_loˇÀ_ªv
;

286 #ifde‡
EXAMPLE_TABLE


288 
	`mem˝y
(
c•ec
->
ccode
, 
å™¶©e_cu°om_èbÀ
[0].
cu°om_loˇÀ
, 
WLC_CNTRY_BUF_SZ
);

289 
c•ec
->
ªv
 = 
å™¶©e_cu°om_èbÀ
[0].
cu°om_loˇÀ_ªv
;

293 
	}
}

	@dhd_dbg.h

27 #i‚de‡
_dhd_dbg_


28 
	#_dhd_dbg_


	)

30 
	#USE_NET_RATELIMIT
 
	`√t_øãlimô
()

	)

32 #i‡
deföed
(
DHD_DEBUG
)

34 
	#DHD_ERROR
(
¨gs
Ëdÿ{i‡((
dhd_msg_Àvñ
 & 
DHD_ERROR_VAL
Ë&& 
USE_NET_RATELIMIT
) \

35 
¥ötf
 
¨gs
;} 0)

	)

36 
	#DHD_TRACE
(
¨gs
Ëdÿ{i‡(
dhd_msg_Àvñ
 & 
DHD_TRACE_VAL
Ë
¥ötf
árgs;} 0)

	)

37 
	#DHD_INFO
(
¨gs
Ëdÿ{i‡(
dhd_msg_Àvñ
 & 
DHD_INFO_VAL
Ë
¥ötf
árgs;} 0)

	)

38 
	#DHD_DATA
(
¨gs
Ëdÿ{i‡(
dhd_msg_Àvñ
 & 
DHD_DATA_VAL
Ë
¥ötf
árgs;} 0)

	)

39 
	#DHD_CTL
(
¨gs
Ëdÿ{i‡(
dhd_msg_Àvñ
 & 
DHD_CTL_VAL
Ë
¥ötf
árgs;} 0)

	)

40 
	#DHD_TIMER
(
¨gs
Ëdÿ{i‡(
dhd_msg_Àvñ
 & 
DHD_TIMER_VAL
Ë
¥ötf
árgs;} 0)

	)

41 
	#DHD_HDRS
(
¨gs
Ëdÿ{i‡(
dhd_msg_Àvñ
 & 
DHD_HDRS_VAL
Ë
¥ötf
árgs;} 0)

	)

42 
	#DHD_BYTES
(
¨gs
Ëdÿ{i‡(
dhd_msg_Àvñ
 & 
DHD_BYTES_VAL
Ë
¥ötf
árgs;} 0)

	)

43 
	#DHD_INTR
(
¨gs
Ëdÿ{i‡(
dhd_msg_Àvñ
 & 
DHD_INTR_VAL
Ë
¥ötf
árgs;} 0)

	)

44 
	#DHD_GLOM
(
¨gs
Ëdÿ{i‡(
dhd_msg_Àvñ
 & 
DHD_GLOM_VAL
Ë
¥ötf
árgs;} 0)

	)

45 
	#DHD_EVENT
(
¨gs
Ëdÿ{i‡(
dhd_msg_Àvñ
 & 
DHD_EVENT_VAL
Ë
¥ötf
árgs;} 0)

	)

46 
	#DHD_BTA
(
¨gs
Ëdÿ{i‡(
dhd_msg_Àvñ
 & 
DHD_BTA_VAL
Ë
¥ötf
árgs;} 0)

	)

47 
	#DHD_ISCAN
(
¨gs
Ëdÿ{i‡(
dhd_msg_Àvñ
 & 
DHD_ISCAN_VAL
Ë
¥ötf
árgs;} 0)

	)

48 
	#DHD_ARPOE
(
¨gs
Ëdÿ{i‡(
dhd_msg_Àvñ
 & 
DHD_ARPOE_VAL
Ë
¥ötf
árgs;} 0)

	)

49 
	#DHD_REORDER
(
¨gs
Ëdÿ{i‡(
dhd_msg_Àvñ
 & 
DHD_REORDER_VAL
Ë
¥ötf
árgs;} 0)

	)

51 
	#DHD_TRACE_HW4
 
DHD_TRACE


	)

53 
	#DHD_ERROR_ON
(Ë(
dhd_msg_Àvñ
 & 
DHD_ERROR_VAL
)

	)

54 
	#DHD_TRACE_ON
(Ë(
dhd_msg_Àvñ
 & 
DHD_TRACE_VAL
)

	)

55 
	#DHD_INFO_ON
(Ë(
dhd_msg_Àvñ
 & 
DHD_INFO_VAL
)

	)

56 
	#DHD_DATA_ON
(Ë(
dhd_msg_Àvñ
 & 
DHD_DATA_VAL
)

	)

57 
	#DHD_CTL_ON
(Ë(
dhd_msg_Àvñ
 & 
DHD_CTL_VAL
)

	)

58 
	#DHD_TIMER_ON
(Ë(
dhd_msg_Àvñ
 & 
DHD_TIMER_VAL
)

	)

59 
	#DHD_HDRS_ON
(Ë(
dhd_msg_Àvñ
 & 
DHD_HDRS_VAL
)

	)

60 
	#DHD_BYTES_ON
(Ë(
dhd_msg_Àvñ
 & 
DHD_BYTES_VAL
)

	)

61 
	#DHD_INTR_ON
(Ë(
dhd_msg_Àvñ
 & 
DHD_INTR_VAL
)

	)

62 
	#DHD_GLOM_ON
(Ë(
dhd_msg_Àvñ
 & 
DHD_GLOM_VAL
)

	)

63 
	#DHD_EVENT_ON
(Ë(
dhd_msg_Àvñ
 & 
DHD_EVENT_VAL
)

	)

64 
	#DHD_BTA_ON
(Ë(
dhd_msg_Àvñ
 & 
DHD_BTA_VAL
)

	)

65 
	#DHD_ISCAN_ON
(Ë(
dhd_msg_Àvñ
 & 
DHD_ISCAN_VAL
)

	)

66 
	#DHD_ARPOE_ON
(Ë(
dhd_msg_Àvñ
 & 
DHD_ARPOE_VAL
)

	)

67 
	#DHD_REORDER_ON
(Ë(
dhd_msg_Àvñ
 & 
DHD_REORDER_VAL
)

	)

71 
	#DHD_ERROR
(
¨gs
Ëdÿ{i‡(
USE_NET_RATELIMIT
Ë
¥ötf
árgs;} 0)

	)

72 
	#DHD_TRACE
(
¨gs
)

	)

73 
	#DHD_INFO
(
¨gs
)

	)

74 
	#DHD_DATA
(
¨gs
)

	)

75 
	#DHD_CTL
(
¨gs
)

	)

76 
	#DHD_TIMER
(
¨gs
)

	)

77 
	#DHD_HDRS
(
¨gs
)

	)

78 
	#DHD_BYTES
(
¨gs
)

	)

79 
	#DHD_INTR
(
¨gs
)

	)

80 
	#DHD_GLOM
(
¨gs
)

	)

81 
	#DHD_EVENT
(
¨gs
)

	)

82 
	#DHD_BTA
(
¨gs
)

	)

83 
	#DHD_ISCAN
(
¨gs
)

	)

84 
	#DHD_ARPOE
(
¨gs
)

	)

85 
	#DHD_REORDER
(
¨gs
)

	)

87 
	#DHD_TRACE_HW4
 
DHD_TRACE


	)

89 
	#DHD_ERROR_ON
(Ë0

	)

90 
	#DHD_TRACE_ON
(Ë0

	)

91 
	#DHD_INFO_ON
(Ë0

	)

92 
	#DHD_DATA_ON
(Ë0

	)

93 
	#DHD_CTL_ON
(Ë0

	)

94 
	#DHD_TIMER_ON
(Ë0

	)

95 
	#DHD_HDRS_ON
(Ë0

	)

96 
	#DHD_BYTES_ON
(Ë0

	)

97 
	#DHD_INTR_ON
(Ë0

	)

98 
	#DHD_GLOM_ON
(Ë0

	)

99 
	#DHD_EVENT_ON
(Ë0

	)

100 
	#DHD_BTA_ON
(Ë0

	)

101 
	#DHD_ISCAN_ON
(Ë0

	)

102 
	#DHD_ARPOE_ON
(Ë0

	)

103 
	#DHD_REORDER_ON
(Ë0

	)

106 
	#DHD_LOG
(
¨gs
)

	)

108 
	#DHD_BLOG
(
˝
, 
size
)

	)

110 
	#DHD_NONE
(
¨gs
)

	)

111 
dhd_msg_Àvñ
;

114 
	~<dhdio˘l.h
>

	@dhd_linux.c

29 
	~<ty≥defs.h
>

30 
	~<löuxvî.h
>

31 
	~<o¶.h
>

33 
	~<löux/öô.h
>

34 
	~<löux/kî√l.h
>

35 
	~<löux/¶ab.h
>

36 
	~<löux/skbuff.h
>

37 
	~<löux/√tdevi˚.h
>

38 
	~<löux/öëdevi˚.h
>

39 
	~<löux/π√éök.h
>

40 
	~<löux/ëhîdevi˚.h
>

41 
	~<löux/øndom.h
>

42 
	~<löux/•ölock.h
>

43 
	~<löux/ëhtoﬁ.h
>

44 
	~<löux/f˙é.h
>

45 
	~<löux/fs.h
>

47 
	~<asm/uac˚ss.h
>

48 
	~<asm/u«lig√d.h
>

50 
	~<ïivîs.h
>

51 
	~<bcmutûs.h
>

52 
	~<bcmídün.h
>

53 
	~<bcmdevs.h
>

55 
	~<¥Ÿo/ëhî√t.h
>

56 
	~<dngl_°©s.h
>

57 
	~<dhd.h
>

58 
	~<dhd_bus.h
>

59 
	~<dhd_¥Ÿo.h
>

60 
	~<dhd_dbg.h
>

61 #ifde‡
CONFIG_HAS_WAKELOCK


62 
	~<löux/wakñock.h
>

64 #ifde‡
WL_CFG80211


65 
	~<wl_cfg80211.h
>

68 #ifde‡
WLBTAMP


69 
	~<¥Ÿo/802.11_bè.h
>

70 
	~<¥Ÿo/bt_amp_hci.h
>

71 
	~<dhd_bè.h
>

74 #ifde‡
WLMEDIA_HTSF


75 
	~<löux/time.h
>

76 
	~<htsf.h
>

78 
	#HTSF_MINLEN
 200

	)

79 
	#HTSF_BUS_DELAY
 150

	)

80 
	#TSMAX
 1000

	)

81 
	#NUMBIN
 34

	)

82 
uöt32
 
	gtsidx
 = 0;

83 
uöt32
 
	ghtsf_£qnum
 = 0;

84 
uöt32
 
	gtsfsync
;

85 
timevÆ
 
	gtsync
;

86 
uöt32
 
	gt•‹t
 = 5010;

88 
	shi°o_
 {

89 
uöt32
 
	mbö
[
NUMBIN
];

90 } 
	thi°o_t
;

92 #i‡!
ISPOWEROF2
(
DHD_SDALIGN
)

93 #îr‹ 
DHD_SDALIGN
 
is
 
nŸ
 
a
 
powî
 
of
 2!

96 
hi°o_t
 
	gvi_d1
, 
	gvi_d2
, 
	gvi_d3
, 
	gvi_d4
;

99 #i‡
deföed
(
PKT_FILTER_SUPPORT
)

102 #i‡
deföed
(
SOFTAP
)

103 
boﬁ
 
≠_cfg_ru¬ög
;

104 
boﬁ
 
≠_fw_lﬂded
;

108 
	#AOE_IP_ALIAS_SUPPORT
 1

	)

110 #ifde‡
BCM_FD_AGGR


111 
	~<bcm_Ωc.h
>

112 
	~<bcm_Ωc_ç.h
>

114 #ifde‡
PROP_TXSTATUS


115 
	~<wlfc_¥Ÿo.h
>

116 
	~<dhd_wlfc.h
>

119 
	~<wl_™droid.h
>

121 #ifde‡
ARP_OFFLOAD_SUPPORT


122 
a€_upd©e_ho°_ùv4_èbÀ
(
dhd_pub_t
 *
dhd_pub
, 
u32
 
ùa
, 
boﬁ
 
add
, 
idx
);

123 
dhd_devi˚_evít
(
nŸifõr_block
 *
this
,

124 
evít
,

125 *
±r
);

127 
nŸifõr_block
 
	gdhd_nŸifõr
 = {

128 .
nŸifõr_ˇŒ
 = 
dhd_devi˚_evít


132 #i‡(
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 27)Ë&& 
deföed
(
CONFIG_PM_SLEEP
)

133 
	~<löux/su•íd.h
>

134 vﬁ©ûê
boﬁ
 
	gdhd_mmc_su•íd
 = 
FALSE
;

135 
DECLARE_WAIT_QUEUE_HEAD
(
dhd_dpc_waô
);

138 #i‡
deföed
(
OOB_INTR_ONLY
)

139 
dhd_íabÀ_oob_öå
(
dhd_bus
 *
bus
, 
boﬁ
 
íabÀ
);

141 #i‡(
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 27)) && (1)

142 
dhd_h™g_¥o˚ss
(
w‹k_°ru˘
 *
w‹k
);

144 #i‡(
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 0))

145 
MODULE_LICENSE
("GPL v2");

148 
	~<dhd_bus.h
>

150 #ifde‡
BCM_FD_AGGR


151 
	#DBUS_RX_BUFFER_SIZE_DHD
(
√t
Ë(
BCM_RPC_TP_DNGL_AGG_MAX_BYTE
)

	)

153 #i‚de‡
PROP_TXSTATUS


154 
	#DBUS_RX_BUFFER_SIZE_DHD
(
√t
Ë“ë->
mtu
 +Çë->
h¨d_hódî_Àn
 + 
dhd
->
pub
.
hdæí
)

	)

156 
	#DBUS_RX_BUFFER_SIZE_DHD
(
√t
Ë“ë->
mtu
 +Çë->
h¨d_hódî_Àn
 + 
dhd
->
pub
.
hdæí
 + 128)

	)

160 #i‡
LINUX_VERSION_CODE
 =
KERNEL_VERSION
(2, 6, 15)

162 
	$¥öt_èöãd
()

165 
	}
}

169 #i‡
deföed
(
CONFIG_WIRELESS_EXT
)

170 
	~<wl_iw.h
>

171 
wl_iw_exåa_∑øms_t
 
g_wl_iw_∑øms
;

174 #i‡
deföed
(
CONFIG_HAS_EARLYSUSPEND
Ë&& deföed(
DHD_USE_EARLYSUSPEND
)

175 
	~<löux/óæysu•íd.h
>

178 
dhd_gë_su•íd_b˙_li_dtim
(
dhd_pub_t
 *
dhd
);

180 #ifde‡
PKT_FILTER_SUPPORT


181 
dhd_pktfûãr_ofÊﬂd_£t
(
dhd_pub_t
 * 
dhd
, *
¨g
);

182 
dhd_pktfûãr_ofÊﬂd_íabÀ
(
dhd_pub_t
 * 
dhd
, *
¨g
, 
íabÀ
, 
ma°î_mode
);

185 #ifde‡
READ_MACADDR


186 
dhd_ªad_maˇddr
(
dhd_öfo
 *
dhd
, 
ëhî_addr
 *
mac
);

188 #ifde‡
RDWR_MACADDR


189 
dhd_check_rdwr_maˇddr
(
dhd_öfo
 *
dhd
, 
dhd_pub_t
 *
dhdp
, 
ëhî_addr
 *
mac
);

190 
dhd_wrôe_rdwr_maˇddr
(
ëhî_addr
 *
mac
);

192 #ifde‡
WRITE_MACADDR


193 
dhd_wrôe_maˇddr
(
ëhî_addr
 *
mac
);

195 #ifde‡
GET_MAC_FROM_OTP


196 
dhd_check_moduÀ_mac
(
dhd_pub_t
 *
dhd
, 
ëhî_addr
 *
mac
);

198 #ifde‡
MIMO_ANT_SETTING


199 
dhd_£l_™t_‰om_fûe
(
dhd_pub_t
 *
dhd
);

202 #ifde‡
GLOBALCONFIG_WLAN_COUNTRY_CODE


203 
dhd_cu°omî_£t_cou¡ry
(
dhd_pub_t
 *
dhd
);

207 
	sdhd_if
 {

208 
dhd_öfo
 *
	möfo
;

210 
√t_devi˚
 *
	m√t
;

211 
√t_devi˚_°©s
 
	m°©s
;

212 
	midx
;

213 
dhd_if_°©e_t
 
	m°©e
;

214 
uöt
 
	msubunô
;

215 
uöt8
 
	mmac_addr
[
ETHER_ADDR_LEN
];

216 
boﬁ
 
	m©èched
;

217 
boﬁ
 
	mtxÊowc⁄åﬁ
;

218 
	m«me
[
IFNAMSIZ
+1];

219 
uöt8
 
	mbssidx
;

220 
boﬁ
 
	m£t_mu…iˇ°
;

221 
boﬁ
 
	mevít2cfg80211
;

222 } 
	tdhd_if_t
;

224 #ifde‡
WLMEDIA_HTSF


226 
uöt32
 
	mlow
;

227 
uöt32
 
	mhigh
;

228 } 
	ttsf_t
;

231 
uöt32
 
	mœ°_cy˛e
;

232 
uöt32
 
	mœ°_£c
;

233 
uöt32
 
	mœ°_tsf
;

234 
uöt32
 
	mc€f
;

235 
uöt32
 
	mc€fdec1
;

236 
uöt32
 
	mc€fdec2
;

237 } 
	thtsf_t
;

240 
uöt32
 
	mt1
;

241 
uöt32
 
	mt2
;

242 
uöt32
 
	mt3
;

243 
uöt32
 
	mt4
;

244 } 
	tt°amp_t
;

246 
t°amp_t
 
	gts
[
TSMAX
];

247 
t°amp_t
 
	gmaxdñayts
;

248 
uöt32
 
	gmaxdñay
 = 0, 
	gt•kt˙t
 = 0, 
	gmaxdñaypkäo
 = 0;

254 
	sdhd_öfo
 {

255 #i‡
deföed
(
CONFIG_WIRELESS_EXT
)

256 
wl_iw_t
 
	miw
;

259 
dhd_pub_t
 
	mpub
;

262 
dhd_if_t
 *
	miÊi°
[
DHD_MAX_IFS
];

264 
£m≠h‹e
 
	m¥Ÿo_£m
;

265 #ifde‡
PROP_TXSTATUS


266 
•ölock_t
 
	mwlfc_•ölock
;

268 #ifde‡
WLMEDIA_HTSF


269 
htsf_t
 
	mhtsf
;

271 
waô_queue_hód_t
 
	mio˘l_ª•_waô
;

272 
timî_li°
 
	mtimî
;

273 
boﬁ
 
	mwd_timî_vÆid
;

274 
èskÀt_°ru˘
 
	mèskÀt
;

275 
•ölock_t
 
	msdlock
;

276 
•ölock_t
 
	mtxqlock
;

277 
•ölock_t
 
	mdhd_lock
;

278 #ifde‡
DHDTHREAD


280 
boﬁ
 
	mthªads_⁄ly
;

281 
£m≠h‹e
 
	msd£m
;

283 
tsk_˘l_t
 
	mthr_dpc_˘l
;

284 
tsk_˘l_t
 
	mthr_wdt_˘l
;

286 
boﬁ
 
	mdhd_èskÀt_¸óã
;

287 
tsk_˘l_t
 
	mthr_sysioc_˘l
;

288 #i‡(
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 27))

289 
w‹k_°ru˘
 
	mw‹k_h™g
;

293 #i‡
deföed
(
CONFIG_HAS_WAKELOCK
Ë&& (
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 27))

294 
wake_lock
 *
	mwl_wifi
;

295 
wake_lock
 *
	mwl_rxwake
;

296 
wake_lock
 *
	mwl_˘æwake
;

297 
wake_lock
 *
	mwl_wdwake
;

300 #i‡(
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 25)) && 1

304 
muãx
 
	mdhd_√t_if_muãx
;

305 
muãx
 
	mdhd_su•íd_muãx
;

307 
•ölock_t
 
	mwakñock_•ölock
;

308 
	mwakñock_cou¡î
;

309 
	mwakñock_wd_cou¡î
;

310 
	mwakñock_rx_timeout_íabÀ
;

311 
	mwakñock_˘æ_timeout_íabÀ
;

314 
	m£t_maˇddªss
;

315 
ëhî_addr
 
	mmacvÆue
;

316 
waô_queue_hód_t
 
	m˘æ_waô
;

317 
©omic_t
 
	m≥nd_8021x_˙t
;

318 
dhd_©èch_°©es_t
 
	mdhd_°©e
;

320 #i‡
deföed
(
CONFIG_HAS_EARLYSUSPEND
Ë&& deföed(
DHD_USE_EARLYSUSPEND
)

321 
óæy_su•íd
 
	móæy_su•íd
;

324 #ifde‡
ARP_OFFLOAD_SUPPORT


325 
u32
 
	m≥nd_ùaddr
;

327 #ifde‡
BCM_FD_AGGR


328 *
	mΩc_th
;

329 *
	mΩc_osh
;

330 
timî_li°
 
	mΩ˘h_timî
;

331 
boﬁ
 
	mΩ˘h_timî_a˘ive
;

332 
boﬁ
 
	mfdaggr
;

334 } 
	tdhd_öfo_t
;

337 
uöt
 
	gdhd_dow∆ﬂd_fw_⁄_drivîlﬂd
 = 
TRUE
;

342 
	gfúmw¨e_∑th
[
MOD_PARAM_PATHLEN
];

343 
	gnvøm_∑th
[
MOD_PARAM_PATHLEN
];

346 
	göfo_°rög
[
MOD_PARAM_INFOLEN
];

347 
moduÀ_∑øm_°rög
(
öfo_°rög
, info_°rög, 
MOD_PARAM_INFOLEN
, 0444);

349 
	g›_mode
 = 0;

350 
	gdißbÀ_¥›tx
 = 0;

351 
moduÀ_∑øm
(
›_mode
, , 0644);

352 
wl_c⁄åﬁ_wl_°¨t
(
√t_devi˚
 *
dev
);

353 #i‡(
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 27))

354 
£m≠h‹e
 
	gdhd_ªgi°øti⁄_£m
;

355 
£m≠h‹e
 
	gdhd_chùup_£m
;

356 
	gdhd_ªgi°øti⁄_check
 = 
FALSE
;

358 
	#DHD_REGISTRATION_TIMEOUT
 12000

	)

362 
uöt
 
	gdhd_sysioc
 = 
TRUE
;

363 
moduÀ_∑øm
(
dhd_sysioc
, 
uöt
, 0);

366 
moduÀ_∑øm
(
dhd_msg_Àvñ
, , 0);

369 
moduÀ_∑øm
(
dißbÀ_¥›tx
, , 0644);

371 
moduÀ_∑øm_°rög
(
fúmw¨e_∑th
, fúmw¨e_∑th, 
MOD_PARAM_PATHLEN
, 0660);

372 
moduÀ_∑øm_°rög
(
nvøm_∑th
,Çvøm_∑th, 
MOD_PARAM_PATHLEN
, 0);

375 
uöt
 
	gdhd_w©chdog_ms
 = 10;

376 
moduÀ_∑øm
(
dhd_w©chdog_ms
, 
uöt
, 0);

378 #i‡
deföed
(
DHD_DEBUG
)

380 
uöt
 
	gdhd_c⁄sﬁe_ms
 = 0;

381 
moduÀ_∑øm
(
dhd_c⁄sﬁe_ms
, 
uöt
, 0644);

384 
uöt
 
	gdhd_¶∑uto
 = 
TRUE
;

385 
moduÀ_∑øm
(
dhd_¶∑uto
, 
uöt
, 0);

388 
uöt
 
	gdhd_¨p_mode
 = 
ARP_OL_AGENT
 | 
ARP_OL_PEER_AUTO_REPLY
;

390 
moduÀ_∑øm
(
dhd_¨p_mode
, 
uöt
, 0);

393 
uöt
 
	gdhd_¨p_íabÀ
 = 
TRUE
;

394 
moduÀ_∑øm
(
dhd_¨p_íabÀ
, 
uöt
, 0);

396 #ifde‡
PKT_FILTER_SUPPORT


398 
uöt
 
	gdhd_pkt_fûãr_íabÀ
 = 
TRUE
;

399 
moduÀ_∑øm
(
dhd_pkt_fûãr_íabÀ
, 
uöt
, 0);

403 
uöt
 
	gdhd_pkt_fûãr_öô
 = 0;

404 
moduÀ_∑øm
(
dhd_pkt_fûãr_öô
, 
uöt
, 0);

407 #ifde‡
GAN_LITE_NAT_KEEPALIVE_FILTER


408 
uöt
 
	gdhd_ma°î_mode
 = 
FALSE
;

410 
uöt
 
	gdhd_ma°î_mode
 = 
TRUE
;

412 
moduÀ_∑øm
(
dhd_ma°î_mode
, 
uöt
, 0);

414 #ifde‡
DHDTHREAD


415 
	gdhd_w©chdog_¥io
 = 0;

416 
moduÀ_∑øm
(
dhd_w©chdog_¥io
, , 0);

419 
	gdhd_dpc_¥io
 = 
CUSTOM_DPC_PRIO_SETTING
;

420 
moduÀ_∑øm
(
dhd_dpc_¥io
, , 0);

423 
dhd_d⁄gÀ_memsize
;

424 
moduÀ_∑øm
(
dhd_d⁄gÀ_memsize
, , 0);

427 
uöt
 
	gdhd_rﬂm_dißbÀ
 = 0;

430 
uöt
 
	gdhd_ødio_up
 = 1;

433 
	giÁ˚_«me
[
IFNAMSIZ
] = {'\0'};

434 
moduÀ_∑øm_°rög
(
iÁ˚_«me
, iÁ˚_«me, 
IFNAMSIZ
, 0);

439 
	gdhd_io˘l_timeout_m£c
 = 
IOCTL_RESP_TIMEOUT
;

442 
	gdhd_idÀtime
 = 
DHD_IDLETIME_TICKS
;

443 
moduÀ_∑øm
(
dhd_idÀtime
, , 0);

446 
uöt
 
	gdhd_pﬁl
 = 
FALSE
;

447 
moduÀ_∑øm
(
dhd_pﬁl
, 
uöt
, 0);

450 
uöt
 
	gdhd_öå
 = 
TRUE
;

451 
moduÀ_∑øm
(
dhd_öå
, 
uöt
, 0);

454 
uöt
 
	gdhd_sdiod_drive_°ªngth
 = 6;

455 
moduÀ_∑øm
(
dhd_sdiod_drive_°ªngth
, 
uöt
, 0);

458 
uöt
 
dhd_txbound
;

459 
uöt
 
dhd_rxbound
;

460 
moduÀ_∑øm
(
dhd_txbound
, 
uöt
, 0);

461 
moduÀ_∑øm
(
dhd_rxbound
, 
uöt
, 0);

464 
uöt
 
dhd_de„ºed_tx
;

465 
moduÀ_∑øm
(
dhd_de„ºed_tx
, 
uöt
, 0);

467 #ifde‡
BCMDBGFS


468 
dhd_dbg_öô
(
dhd_pub_t
 *
dhdp
);

469 
dhd_dbg_ªmove
();

474 #ifde‡
SDTEST


476 
uöt
 
	gdhd_pktgí
 = 0;

477 
moduÀ_∑øm
(
dhd_pktgí
, 
uöt
, 0);

480 
uöt
 
	gdhd_pktgí_Àn
 = 0;

481 
moduÀ_∑øm
(
dhd_pktgí_Àn
, 
uöt
, 0);

485 #ifde‡
DHD_DEBUG


486 #i‚de‡
SRCBASE


487 
	#SRCBASE
 "drivîs/√t/wúñess/bcmdhd"

	)

489 
	#DHD_COMPILED
 "\nCompûed i¿" 
SRCBASE


	)

491 
	#DHD_COMPILED


	)

494 
	gdhd_vîsi⁄
[] = "D⁄gÀ Ho° Drivî, vîsi⁄ " 
EPI_VERSION_STR


495 #ifde‡
DHD_DEBUG


496 "\nCompûed i¿" 
SRCBASE
 " o¿" 
__DATE__
 "áà" 
__TIME__


499 
dhd_√t_if_lock_loˇl
(
dhd_öfo_t
 *
dhd
);

500 
dhd_√t_if_u∆ock_loˇl
(
dhd_öfo_t
 *
dhd
);

501 
dhd_su•íd_lock
(
dhd_pub_t
 *
dhdp
);

502 
dhd_su•íd_u∆ock
(
dhd_pub_t
 *
dhdp
);

504 #ifde‡
WLMEDIA_HTSF


505 
htsf_upd©e
(
dhd_öfo_t
 *
dhd
, *
d©a
);

506 
tsf_t
 
	g¥ev_tsf
, 
	gcur_tsf
;

508 
uöt32
 
dhd_gë_htsf
(
dhd_öfo_t
 *
dhd
, 
ifidx
);

509 
dhd_io˘l_htsf_gë
(
dhd_öfo_t
 *
dhd
, 
ifidx
);

510 
dhd_dump_œãncy
();

511 
dhd_htsf_addtxts
(
dhd_pub_t
 *
dhdp
, *
pktbuf
);

512 
dhd_htsf_addrxts
(
dhd_pub_t
 *
dhdp
, *
pktbuf
);

513 
dhd_dump_htsfhi°o
(
hi°o_t
 *
his
, *
s
);

517 
dhd_m⁄ô‹_öô
(*
dhd_pub
);

518 
dhd_m⁄ô‹_unöô
();

522 #i‡
deföed
(
CONFIG_WIRELESS_EXT
)

523 
iw_°©i°ics
 *
dhd_gë_wúñess_°©s
(
√t_devi˚
 *
dev
);

526 
dhd_dpc
(
ul⁄g
 
d©a
);

528 
dhd_waô_≥nd8021x
(
√t_devi˚
 *
dev
);

530 #ifde‡
TOE


531 #i‚de‡
BDC


532 #îr‹ 
TOE
 
ªquúes
 
BDC


534 
dhd_t€_gë
(
dhd_öfo_t
 *
dhd
, 
idx
, 
uöt32
 *
t€_ﬁ
);

535 
dhd_t€_£t
(
dhd_öfo_t
 *
dhd
, 
idx
, 
uöt32
 
t€_ﬁ
);

538 
dhd_wl_ho°_evít
(
dhd_öfo_t
 *
dhd
, *
ifidx
, *
pktd©a
,

539 
wl_evít_msg_t
 *
evít_±r
, **
d©a_±r
);

541 #i‡(
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 27)Ë&& 
deföed
(
CONFIG_PM_SLEEP
)

542 
	$dhd_¶ìp_pm_ˇŒback
(
nŸifõr_block
 *
nfb
, 
a˘i⁄
, *
ign‹ed
)

544 
ªt
 = 
NOTIFY_DONE
;

546 #i‡
	`deföed
(
CONFIG_ARCH_RHEA
Ë|| deföed(
CONFIG_ARCH_CAPRI
Ë|| (
LINUX_VERSION_CODE
 <= \

547 
	`KERNEL_VERSION
(2, 6, 39))

548 
a˘i⁄
) {

549 
PM_HIBERNATION_PREPARE
:

550 
PM_SUSPEND_PREPARE
:

551 
dhd_mmc_su•íd
 = 
TRUE
;

552 
ªt
 = 
NOTIFY_OK
;

554 
PM_POST_HIBERNATION
:

555 
PM_POST_SUSPEND
:

556 
dhd_mmc_su•íd
 = 
FALSE
;

557 
ªt
 = 
NOTIFY_OK
;

560 
	`smp_mb
();

562  
ªt
;

563 
	}
}

565 
nŸifõr_block
 
	gdhd_¶ìp_pm_nŸifõr
 = {

566 .
nŸifõr_ˇŒ
 = 
dhd_¶ìp_pm_ˇŒback
,

567 .
	g¥i‹ôy
 = 10

569 
ªgi°î_pm_nŸifõr
(
nŸifõr_block
 *
nb
);

570 
uƒegi°î_pm_nŸifõr
(
nŸifõr_block
 *
nb
);

573 
	$dhd_£t_∑ckë_fûãr
(
dhd_pub_t
 *
dhd
)

575 #ifde‡
PKT_FILTER_SUPPORT


576 
i
;

578 
	`DHD_TRACE
(("%s:É¡î\n", 
__FUNCTION__
));

579 i‡(
dhd_pkt_fûãr_íabÀ
) {

580 
i
 = 0; i < 
dhd
->
pktfûãr_cou¡
; i++) {

581 
	`dhd_pktfûãr_ofÊﬂd_£t
(
dhd
, dhd->
pktfûãr
[
i
]);

585 
	}
}

587 
	$dhd_íabÀ_∑ckë_fûãr
(
vÆue
, 
dhd_pub_t
 *
dhd
)

589 #ifde‡
PKT_FILTER_SUPPORT


590 
i
;

592 
	`DHD_TRACE
(("%s:É¡î, vÆuê%d\n", 
__FUNCTION__
, 
vÆue
));

595 i‡(
dhd_pkt_fûãr_íabÀ
 && (!
vÆue
 ||

596 (
	`dhd_suµ‹t_°a_mode
(
dhd
Ë&& !dhd->
dh˝_ö_¥ogªss
)))

598 
i
 = 0; i < 
dhd
->
pktfûãr_cou¡
; i++) {

599 #ifde‡
PASS_ARP_PACKET


600 i‡(
vÆue
 && (
i
 =
dhd
->
pktfûãr_cou¡
 -1) &&

601 !(
dhd
->
›_mode
 & (
DHD_FLAG_P2P_GC_MODE
 | 
DHD_FLAG_P2P_GO_MODE
))) {

602 
	`DHD_TRACE_HW4
(("DoÇotÅurn on ARP whiteÜistÖkt filter:"

604 
vÆue
, 
i
, 
dhd
->
›_mode
));

608 
	`dhd_pktfûãr_ofÊﬂd_íabÀ
(
dhd
, dhd->
pktfûãr
[
i
],

609 
vÆue
, 
dhd_ma°î_mode
);

613 
	}
}

615 
	$dhd_£t_su•íd
(
vÆue
, 
dhd_pub_t
 *
dhd
)

617 #i‡!
	`deföed
(
SUPPORT_PM2_ONLY
)

618 
powî_mode
 = 
PM_MAX
;

621 
iovbuf
[32];

622 
b˙_li_dtim
 = 0;

623 #i‚de‡
DISABLE_FW_ROAM_SUSPEND


624 
uöt
 
rﬂmv¨
 = 1;

626 #ifde‡
ENABLE_BCN_LI_BCN_WAKEUP


627 
b˙_li_b˙
;

629 #ifde‡
PASS_ALL_MCAST_PKTS


630 
dhd_öfo
 *
dhdöfo
 = 
dhd
->
öfo
;

631 
uöt32
 
Ælmu…i
;

632 
uöt
 
i
;

635 
	`DHD_TRACE
(("%s:Énter, value = %d in_suspend=%d\n",

636 
__FUNCTION__
, 
vÆue
, 
dhd
->
ö_su•íd
));

638 
	`dhd_su•íd_lock
(
dhd
);

639 i‡(
dhd
 && dhd->
up
) {

640 i‡(
vÆue
 && 
dhd
->
ö_su•íd
) {

641 #ifde‡
PKT_FILTER_SUPPORT


642 
dhd
->
óæy_su•íded
 = 1;

645 
	`DHD_ERROR
(("%s: f‹˚Éxå®Su•íd sëtög\n", 
__FUNCTION__
));

647 #i‡!
	`deföed
(
SUPPORT_PM2_ONLY
)

648 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_PM
, (*)&
powî_mode
,

649 (
powî_mode
), 
TRUE
, 0);

653 
	`dhd_íabÀ_∑ckë_fûãr
(1, 
dhd
);

655 #ifde‡
PASS_ALL_MCAST_PKTS


656 
Ælmu…i
 = 0;

657 
	`bcm_mkiov¨
("Ælmu…i", (*)&
Ælmu…i
,

658 4, 
iovbuf
, (iovbuf));

659 
i
 = 0; i < 
DHD_MAX_IFS
; i++) {

660 i‡(
dhdöfo
->
iÊi°
[
i
] && dhdöfo->iÊi°[i]->
√t
)

661 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
,

662 (
iovbuf
), 
TRUE
, 
i
);

670 
b˙_li_dtim
 = 
	`dhd_gë_su•íd_b˙_li_dtim
(
dhd
);

671 
	`bcm_mkiov¨
("b˙_li_dtim", (*)&
b˙_li_dtim
,

672 4, 
iovbuf
, (iovbuf));

673 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
, (iovbuf), 
TRUE
, 0);

675 #i‚de‡
DISABLE_FW_ROAM_SUSPEND


677 
	`bcm_mkiov¨
("rﬂm_off", (*)&
rﬂmv¨
, 4,

678 
iovbuf
, (iovbuf));

679 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
, (iovbuf), 
TRUE
, 0);

681 #ifde‡
ENABLE_BCN_LI_BCN_WAKEUP


682 
b˙_li_b˙
 = 0;

683 
	`bcm_mkiov¨
("b˙_li_b˙", (*)&
b˙_li_b˙
,

684 4, 
iovbuf
, (iovbuf));

685 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
, (iovbuf), 
TRUE
, 0);

689 #ifde‡
PKT_FILTER_SUPPORT


690 
dhd
->
óæy_su•íded
 = 0;

693 
	`DHD_ERROR
(("%s: Removêexå®su•íd sëtög\n", 
__FUNCTION__
));

695 #i‡!
	`deföed
(
SUPPORT_PM2_ONLY
)

696 
powî_mode
 = 
PM_FAST
;

697 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_PM
, (*)&
powî_mode
,

698 (
powî_mode
), 
TRUE
, 0);

702 
	`dhd_íabÀ_∑ckë_fûãr
(0, 
dhd
);

704 #ifde‡
PASS_ALL_MCAST_PKTS


705 
Ælmu…i
 = 1;

706 
	`bcm_mkiov¨
("Ælmu…i", (*)&
Ælmu…i
,

707 4, 
iovbuf
, (iovbuf));

708 
i
 = 0; i < 
DHD_MAX_IFS
; i++) {

709 i‡(
dhdöfo
->
iÊi°
[
i
] && dhdöfo->iÊi°[i]->
√t
)

710 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
,

711 (
iovbuf
), 
TRUE
, 
i
);

716 
	`bcm_mkiov¨
("b˙_li_dtim", (*)&
b˙_li_dtim
,

717 4, 
iovbuf
, (iovbuf));

719 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
, (iovbuf), 
TRUE
, 0);

720 #i‚de‡
DISABLE_FW_ROAM_SUSPEND


721 
rﬂmv¨
 = 
dhd_rﬂm_dißbÀ
;

722 
	`bcm_mkiov¨
("rﬂm_off", (*)&
rﬂmv¨
, 4, 
iovbuf
,

723 (
iovbuf
));

724 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
, (iovbuf), 
TRUE
, 0);

726 #ifde‡
ENABLE_BCN_LI_BCN_WAKEUP


727 
b˙_li_b˙
 = 1;

728 
	`bcm_mkiov¨
("b˙_li_b˙", (*)&
b˙_li_b˙
,

729 4, 
iovbuf
, (iovbuf));

730 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
, (iovbuf), 
TRUE
, 0);

736 
	`dhd_su•íd_u∆ock
(
dhd
);

738 
	}
}

740 
	$dhd_su•íd_ªsume_hñ≥r
(
dhd_öfo
 *
dhd
, 
vÆ
, 
f‹˚
)

742 
dhd_pub_t
 *
dhdp
 = &
dhd
->
pub
;

743 
ªt
 = 0;

745 
	`DHD_OS_WAKE_LOCK
(
dhdp
);

747 
dhdp
->
ö_su•íd
 = 
vÆ
;

748 i‡((
f‹˚
 || !
dhdp
->
su•íd_dißbÀ_Êag
) &&

749 
	`dhd_suµ‹t_°a_mode
(
dhdp
))

751 
ªt
 = 
	`dhd_£t_su•íd
(
vÆ
, 
dhdp
);

754 
	`DHD_OS_WAKE_UNLOCK
(
dhdp
);

755  
ªt
;

756 
	}
}

758 #i‡
deföed
(
CONFIG_HAS_EARLYSUSPEND
Ë&& deföed(
DHD_USE_EARLYSUSPEND
)

759 
	$dhd_óæy_su•íd
(
óæy_su•íd
 *
h
)

761 
dhd_öfo
 *
dhd
 = 
	`c⁄èöî_of
(
h
, dhd_öfo, 
óæy_su•íd
);

762 
	`DHD_TRACE_HW4
(("%s:É¡î\n", 
__FUNCTION__
));

764 i‡(
dhd
)

765 
	`dhd_su•íd_ªsume_hñ≥r
(
dhd
, 1, 0);

766 
	}
}

768 
	$dhd_œã_ªsume
(
óæy_su•íd
 *
h
)

770 
dhd_öfo
 *
dhd
 = 
	`c⁄èöî_of
(
h
, dhd_öfo, 
óæy_su•íd
);

771 
	`DHD_TRACE_HW4
(("%s:É¡î\n", 
__FUNCTION__
));

773 i‡(
dhd
)

774 
	`dhd_su•íd_ªsume_hñ≥r
(
dhd
, 0, 0);

775 
	}
}

791 
	$dhd_timeout_°¨t
(
dhd_timeout_t
 *
tmo
, 
uöt
 
u£c
)

793 
tmo
->
limô
 = 
u£c
;

794 
tmo
->
ö¸emít
 = 0;

795 
tmo
->
ñ≠£d
 = 0;

796 
tmo
->
tick
 = 
	`jiffõs_to_u£cs
(1);

797 
	}
}

800 
	$dhd_timeout_expúed
(
dhd_timeout_t
 *
tmo
)

803 i‡(
tmo
->
ö¸emít
 == 0) {

804 
tmo
->
ö¸emít
 = 1;

808 i‡(
tmo
->
ñ≠£d
 >tmo->
limô
)

812 
tmo
->
ñ≠£d
 +tmo->
ö¸emít
;

814 i‡(
tmo
->
ö¸emít
 <Åmo->
tick
) {

815 
	`OSL_DELAY
(
tmo
->
ö¸emít
);

816 
tmo
->
ö¸emít
 *= 2;

817 i‡(
tmo
->
ö¸emít
 >Åmo->
tick
)

818 
tmo
->
ö¸emít
 =Åmo->
tick
;

820 
waô_queue_hód_t
 
dñay_waô
;

821 
	`DECLARE_WAITQUEUE
(
waô
, 
cuºít
);

822 
	`öô_waôqueue_hód
(&
dñay_waô
);

823 
	`add_waô_queue
(&
dñay_waô
, &
waô
);

824 
	`£t_cuºít_°©e
(
TASK_INTERRUPTIBLE
);

825 
	`scheduÀ_timeout
(1);

826 
	`ªmove_waô_queue
(&
dñay_waô
, &
waô
);

827 
	`£t_cuºít_°©e
(
TASK_RUNNING
);

831 
	}
}

834 
	$dhd_√t2idx
(
dhd_öfo_t
 *
dhd
, 
√t_devi˚
 *
√t
)

836 
i
 = 0;

838 
	`ASSERT
(
dhd
);

839 
i
 < 
DHD_MAX_IFS
) {

840 i‡(
dhd
->
iÊi°
[
i
] && (dhd->iÊi°[i]->
√t
 ==Çet))

841  
i
;

842 
i
++;

845  
DHD_BAD_IF
;

846 
	}
}

848 
√t_devi˚
 * 
	$dhd_idx2√t
(*
pub
, 
ifidx
)

850 
dhd_pub
 *dhd_pub = (dhd_pub *)
pub
;

851 
dhd_öfo
 *dhd_info;

853 i‡(!
dhd_pub
 || 
ifidx
 < 0 || ifidx >
DHD_MAX_IFS
)

854  
NULL
;

855 
dhd_öfo
 = 
dhd_pub
->
öfo
;

856 i‡(
dhd_öfo
 && dhd_öfo->
iÊi°
[
ifidx
])

857  
dhd_öfo
->
iÊi°
[
ifidx
]->
√t
;

858  
NULL
;

859 
	}
}

862 
	$dhd_i‚ame2idx
(
dhd_öfo_t
 *
dhd
, *
«me
)

864 
i
 = 
DHD_MAX_IFS
;

866 
	`ASSERT
(
dhd
);

868 i‡(
«me
 =
NULL
 || *name == '\0')

871 --
i
 > 0)

872 i‡(
dhd
->
iÊi°
[
i
] && !
	`°∫cmp
(dhd->iÊi°[i]->
«me
,Çame, 
IFNAMSIZ
))

875 
	`DHD_TRACE
(("%s:Ñëu∫ idx %d f‹ \"%s\"\n", 
__FUNCTION__
, 
i
, 
«me
));

877  
i
;

878 
	}
}

881 
	$dhd_i‚ame
(
dhd_pub_t
 *
dhdp
, 
ifidx
)

883 
dhd_öfo_t
 *
dhd
 = (dhd_öfo_à*)
dhdp
->
öfo
;

885 
	`ASSERT
(
dhd
);

887 i‡(
ifidx
 < 0 || ifidx >
DHD_MAX_IFS
) {

888 
	`DHD_ERROR
(("%s: ifidx %d ouào‡ønge\n", 
__FUNCTION__
, 
ifidx
));

892 i‡(
dhd
->
iÊi°
[
ifidx
] =
NULL
) {

893 
	`DHD_ERROR
(("%s:ÇuŒ i/‡%d\n", 
__FUNCTION__
, 
ifidx
));

897 i‡(
dhd
->
iÊi°
[
ifidx
]->
√t
)

898  
dhd
->
iÊi°
[
ifidx
]->
√t
->
«me
;

901 
	}
}

903 
uöt8
 *

904 
	$dhd_bssidx2bssid
(
dhd_pub_t
 *
dhdp
, 
idx
)

906 
i
;

907 
dhd_öfo_t
 *
dhd
 = (dhd_öfo_à*)
dhdp
;

909 
	`ASSERT
(
dhd
);

910 
i
 = 0; i < 
DHD_MAX_IFS
; i++)

911 i‡(
dhd
->
iÊi°
[
i
] && dhd->iÊi°[i]->
bssidx
 =
idx
)

912  
dhd
->
iÊi°
[
i
]->
mac_addr
;

914  
NULL
;

915 
	}
}

919 
	$_dhd_£t_mu…iˇ°_li°
(
dhd_öfo_t
 *
dhd
, 
ifidx
)

921 
√t_devi˚
 *
dev
;

922 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 35)

923 
√tdev_hw_addr
 *
ha
;

925 
dev_mc_li°
 *
m˛i°
;

927 
uöt32
 
Ælmu…i
, 
˙t
;

929 
wl_io˘l_t
 
ioc
;

930 *
buf
, *
buÂ
;

931 
uöt
 
buÊí
;

932 
ªt
;

934 
	`ASSERT
(
dhd
 && dhd->
iÊi°
[
ifidx
]);

935 
dev
 = 
dhd
->
iÊi°
[
ifidx
]->
√t
;

936 i‡(!
dev
)

938 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27)

939 
	`√tif_addr_lock_bh
(
dev
);

941 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 35)

942 
˙t
 = 
	`√tdev_mc_cou¡
(
dev
);

944 
˙t
 = 
dev
->
mc_cou¡
;

947 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27)

948 
	`√tif_addr_u∆ock_bh
(
dev
);

952 
Ælmu…i
 = (
dev
->
Êags
 & 
IFF_ALLMULTI
Ë? 
TRUE
 : 
FALSE
;

954 #ifde‡
PASS_ALL_MCAST_PKTS


955 #ifde‡
PKT_FILTER_SUPPORT


956 i‡(!
dhd
->
pub
.
óæy_su•íded
)

958 
Ælmu…i
 = 
TRUE
;

964 
buÊí
 = ("mˇ°_li°"Ë+ (
˙t
Ë+ (˙à* 
ETHER_ADDR_LEN
);

965 i‡(!(
buÂ
 = 
buf
 = 
	`MALLOC
(
dhd
->
pub
.
osh
, 
buÊí
))) {

966 
	`DHD_ERROR
(("%s: out of memory for mcast_list, cnt %d\n",

967 
	`dhd_i‚ame
(&
dhd
->
pub
, 
ifidx
), 
˙t
));

971 
	`°∫˝y
(
buÂ
, "mˇ°_li°", 
buÊí
 - 1);

972 
buÂ
[
buÊí
 - 1] = '\0';

973 
buÂ
 +
	`°æí
("mcast_list") + 1;

975 
˙t
 = 
	`htﬁ32
(cnt);

976 
	`mem˝y
(
buÂ
, &
˙t
, (cnt));

977 
buÂ
 +(
˙t
);

980 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27)

981 
	`√tif_addr_lock_bh
(
dev
);

983 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 35)

984 
	`√tdev_f‹_óch_mc_addr
(
ha
, 
dev
) {

985 i‡(!
˙t
)

987 
	`mem˝y
(
buÂ
, 
ha
->
addr
, 
ETHER_ADDR_LEN
);

988 
buÂ
 +
ETHER_ADDR_LEN
;

989 
˙t
--;

992 
m˛i°
 = 
dev
->
mc_li°
; (m˛i° && (
˙t
 > 0));

993 
˙t
--, 
m˛i°
 = m˛i°->
√xt
) {

994 
	`mem˝y
(
buÂ
, (*)
m˛i°
->
dmi_addr
, 
ETHER_ADDR_LEN
);

995 
buÂ
 +
ETHER_ADDR_LEN
;

999 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27)

1000 
	`√tif_addr_u∆ock_bh
(
dev
);

1003 
	`mem£t
(&
ioc
, 0, (ioc));

1004 
ioc
.
cmd
 = 
WLC_SET_VAR
;

1005 
ioc
.
buf
 = buf;

1006 
ioc
.
Àn
 = 
buÊí
;

1007 
ioc
.
£t
 = 
TRUE
;

1009 
ªt
 = 
	`dhd_wl_io˘l
(&
dhd
->
pub
, 
ifidx
, &
ioc
, ioc.
buf
, ioc.
Àn
);

1010 i‡(
ªt
 < 0) {

1011 
	`DHD_ERROR
(("%s: set mcast_list failed, cnt %d\n",

1012 
	`dhd_i‚ame
(&
dhd
->
pub
, 
ifidx
), 
˙t
));

1013 
Ælmu…i
 = 
˙t
 ? 
TRUE
 :állmulti;

1016 
	`MFREE
(
dhd
->
pub
.
osh
, 
buf
, 
buÊí
);

1023 
buÊí
 = ("Ælmu…i"Ë+ (
Ælmu…i
);

1024 i‡(!(
buf
 = 
	`MALLOC
(
dhd
->
pub
.
osh
, 
buÊí
))) {

1025 
	`DHD_ERROR
(("%s: ouào‡mem‹y f‹áŒmu…i\n", 
	`dhd_i‚ame
(&
dhd
->
pub
, 
ifidx
)));

1028 
Ælmu…i
 = 
	`htﬁ32
(allmulti);

1030 i‡(!
	`bcm_mkiov¨
("Ælmu…i", (*)&
Ælmu…i
, ◊Œmu…i), 
buf
, 
buÊí
)) {

1031 
	`DHD_ERROR
(("%s: mkiovar failed forállmulti, datalen %d buflen %u\n",

1032 
	`dhd_i‚ame
(&
dhd
->
pub
, 
ifidx
), ()(
Ælmu…i
), 
buÊí
));

1033 
	`MFREE
(
dhd
->
pub
.
osh
, 
buf
, 
buÊí
);

1038 
	`mem£t
(&
ioc
, 0, (ioc));

1039 
ioc
.
cmd
 = 
WLC_SET_VAR
;

1040 
ioc
.
buf
 = buf;

1041 
ioc
.
Àn
 = 
buÊí
;

1042 
ioc
.
£t
 = 
TRUE
;

1044 
ªt
 = 
	`dhd_wl_io˘l
(&
dhd
->
pub
, 
ifidx
, &
ioc
, ioc.
buf
, ioc.
Àn
);

1045 i‡(
ªt
 < 0) {

1046 
	`DHD_ERROR
(("%s: setállmulti %d failed\n",

1047 
	`dhd_i‚ame
(&
dhd
->
pub
, 
ifidx
), 
	`…oh32
(
Ælmu…i
)));

1050 
	`MFREE
(
dhd
->
pub
.
osh
, 
buf
, 
buÊí
);

1054 
Ælmu…i
 = (
dev
->
Êags
 & 
IFF_PROMISC
Ë? 
TRUE
 : 
FALSE
;

1056 
Ælmu…i
 = 
	`htﬁ32
(allmulti);

1058 
	`mem£t
(&
ioc
, 0, (ioc));

1059 
ioc
.
cmd
 = 
WLC_SET_PROMISC
;

1060 
ioc
.
buf
 = &
Ælmu…i
;

1061 
ioc
.
Àn
 = (
Ælmu…i
);

1062 
ioc
.
£t
 = 
TRUE
;

1064 
ªt
 = 
	`dhd_wl_io˘l
(&
dhd
->
pub
, 
ifidx
, &
ioc
, ioc.
buf
, ioc.
Àn
);

1065 i‡(
ªt
 < 0) {

1066 
	`DHD_ERROR
(("%s: setÖromisc %d failed\n",

1067 
	`dhd_i‚ame
(&
dhd
->
pub
, 
ifidx
), 
	`…oh32
(
Ælmu…i
)));

1069 
	}
}

1072 
	$_dhd_£t_mac_addªss
(
dhd_öfo_t
 *
dhd
, 
ifidx
, 
ëhî_addr
 *
addr
)

1074 
buf
[32];

1075 
wl_io˘l_t
 
ioc
;

1076 
ªt
;

1078 i‡(!
	`bcm_mkiov¨
("cur_ëhîaddr", (*)
addr
, 
ETHER_ADDR_LEN
, 
buf
, 32)) {

1079 
	`DHD_ERROR
(("%s: mkiov¨ faûed f‹ cur_ëhîaddr\n", 
	`dhd_i‚ame
(&
dhd
->
pub
, 
ifidx
)));

1082 
	`mem£t
(&
ioc
, 0, (ioc));

1083 
ioc
.
cmd
 = 
WLC_SET_VAR
;

1084 
ioc
.
buf
 = buf;

1085 
ioc
.
Àn
 = 32;

1086 
ioc
.
£t
 = 
TRUE
;

1088 
ªt
 = 
	`dhd_wl_io˘l
(&
dhd
->
pub
, 
ifidx
, &
ioc
, ioc.
buf
, ioc.
Àn
);

1089 i‡(
ªt
 < 0) {

1090 
	`DHD_ERROR
(("%s: së cur_ëhîadd∏Áûed\n", 
	`dhd_i‚ame
(&
dhd
->
pub
, 
ifidx
)));

1092 
	`mem˝y
(
dhd
->
iÊi°
[
ifidx
]->
√t
->
dev_addr
, 
addr
, 
ETHER_ADDR_LEN
);

1093 
	`mem˝y
(
dhd
->
pub
.
mac
.
o˘ë
, 
addr
, 
ETHER_ADDR_LEN
);

1096  
ªt
;

1097 
	}
}

1099 #ifde‡
SOFTAP


1100 
√t_devi˚
 *
≠_√t_dev
;

1101 
tsk_˘l_t
 
≠_ëh_˘l
;

1105 
	$dhd_›_if
(
dhd_if_t
 *
iÂ
)

1107 
dhd_öfo_t
 *
dhd
;

1108 
ªt
 = 0, 
îr
 = 0;

1109 #ifde‡
SOFTAP


1110 
Êags
;

1113 i‡(!
iÂ
 || !iÂ->
öfo
 || !iÂ->
idx
)

1115 
	`ASSERT
(
iÂ
 && iÂ->
öfo
 && iÂ->
idx
);

1116 
dhd
 = 
iÂ
->
öfo
;

1118 
	`DHD_TRACE
(("%s: idx %d, sèã %d\n", 
__FUNCTION__
, 
iÂ
->
idx
, iÂ->
°©e
));

1120 #ifde‡
WL_CFG80211


1121 i‡(
	`wl_cfg80211_is_¥ogªss_ifch™ge
())

1125 
iÂ
->
°©e
) {

1126 
DHD_IF_ADD
:

1131 i‡(
iÂ
->
√t
 !
NULL
) {

1132 
	`DHD_ERROR
(("%s: ERROR:Çetdev:%sálreadyÉxists,Åry free & unregister \n",

1133 
__FUNCTION__
, 
iÂ
->
√t
->
«me
));

1134 
	`√tif_°›_queue
(
iÂ
->
√t
);

1135 
	`uƒegi°î_√tdev
(
iÂ
->
√t
);

1136 
	`‰ì_√tdev
(
iÂ
->
√t
);

1139 i‡(!(
iÂ
->
√t
 = 
	`Æloc_ëhîdev
((
dhd
)))) {

1140 
	`DHD_ERROR
(("%s: OOM -áŒoc_ëhîdev\n", 
__FUNCTION__
));

1141 
ªt
 = -
ENOMEM
;

1143 i‡(
ªt
 == 0) {

1144 
	`°∫˝y
(
iÂ
->
√t
->
«me
, iÂ->«me, 
IFNAMSIZ
);

1145 
iÂ
->
√t
->
«me
[
IFNAMSIZ
 - 1] = '\0';

1146 
	`mem˝y
(
	`√tdev_¥iv
(
iÂ
->
√t
), &
dhd
, (dhd));

1147 #ifde‡
WL_CFG80211


1148 i‡(
dhd
->
dhd_°©e
 & 
DHD_ATTACH_STATE_CFG80211
)

1149 i‡(!
	`wl_cfg80211_nŸify_iÁdd
(
iÂ
->
√t
, iÂ->
idx
, iÂ->
bssidx
,

1150 (*)
dhd_√t_©èch
)) {

1151 
iÂ
->
°©e
 = 
DHD_IF_NONE
;

1152 
iÂ
->
evít2cfg80211
 = 
TRUE
;

1156 i‡((
îr
 = 
	`dhd_√t_©èch
(&
dhd
->
pub
, 
iÂ
->
idx
)) != 0) {

1157 
	`DHD_ERROR
(("%s: dhd_net_attach failed,Érr %d\n",

1158 
__FUNCTION__
, 
îr
));

1159 
ªt
 = -
EOPNOTSUPP
;

1161 #i‡
	`deföed
(
SOFTAP
)

1162 i‡(
≠_fw_lﬂded
 && !(
dhd
->
dhd_°©e
 & 
DHD_ATTACH_STATE_CFG80211
)) {

1164 
Êags
 = 
	`dhd_os_•ö_lock
(&
dhd
->
pub
);

1167 
≠_√t_dev
 = 
iÂ
->
√t
;

1169 
	`up
(&
≠_ëh_˘l
.
£ma
);

1170 
	`dhd_os_•ö_u∆ock
(&
dhd
->
pub
, 
Êags
);

1173 
	`DHD_TRACE
(("\n ====Öid:%x,Çet_device for if:%s created ===\n\n",

1174 
cuºít
->
pid
, 
iÂ
->
√t
->
«me
));

1175 
iÂ
->
°©e
 = 
DHD_IF_NONE
;

1179 
DHD_IF_DEL
:

1182 
iÂ
->
°©e
 = 
DHD_IF_DELETING
;

1183 i‡(
iÂ
->
√t
 !
NULL
) {

1184 
	`DHD_TRACE
(("\n%s: gŸ 'DHD_IF_DEL' sèã\n", 
__FUNCTION__
));

1185 
	`√tif_°›_queue
(
iÂ
->
√t
);

1186 #ifde‡
WL_CFG80211


1187 i‡(
dhd
->
dhd_°©e
 & 
DHD_ATTACH_STATE_CFG80211
) {

1188 
	`wl_cfg80211_ifdñ_›s
(
iÂ
->
√t
);

1191 
	`uƒegi°î_√tdev
(
iÂ
->
√t
);

1192 
ªt
 = 
DHD_DEL_IF
;

1193 #ifde‡
WL_CFG80211


1194 i‡(
dhd
->
dhd_°©e
 & 
DHD_ATTACH_STATE_CFG80211
) {

1195 
	`wl_cfg80211_nŸify_ifdñ
();

1200 
DHD_IF_DELETING
:

1203 
	`DHD_ERROR
(("%s: bad o∞%d\n", 
__FUNCTION__
, 
iÂ
->
°©e
));

1204 
	`ASSERT
(!
iÂ
->
°©e
);

1208 i‡(
ªt
 < 0) {

1209 
iÂ
->
£t_mu…iˇ°
 = 
FALSE
;

1210 i‡(
iÂ
->
√t
) {

1211 
	`‰ì_√tdev
(
iÂ
->
√t
);

1212 
iÂ
->
√t
 = 
NULL
;

1214 
dhd
->
iÊi°
[
iÂ
->
idx
] = 
NULL
;

1215 #ifde‡
SOFTAP


1216 
Êags
 = 
	`dhd_os_•ö_lock
(&
dhd
->
pub
);

1217 i‡(
iÂ
->
√t
 =
≠_√t_dev
)

1218 
≠_√t_dev
 = 
NULL
;

1219 
	`dhd_os_•ö_u∆ock
(&
dhd
->
pub
, 
Êags
);

1221 
	`MFREE
(
dhd
->
pub
.
osh
, 
iÂ
, (*ifp));

1223 
	}
}

1226 
	$_dhd_sysioc_thªad
(*
d©a
)

1228 
tsk_˘l_t
 *
tsk
 = (tsk_˘l_à*)
d©a
;

1229 
dhd_öfo_t
 *
dhd
 = (dhd_öfo_à*)
tsk
->
∑ª¡
;

1232 
i
;

1233 #ifde‡
SOFTAP


1234 
boﬁ
 
ö_≠
 = 
FALSE
;

1235 
Êags
;

1237 #i‚de‡
USE_KTHREAD_API


1238 
	`DAEMONIZE
("dhd_sysioc");

1240 
	`com∂ëe
(&
tsk
->
com∂ëed
);

1243 
	`down_öãºu±ibÀ
(&
tsk
->
£ma
) == 0) {

1245 
	`SMP_RD_BARRIER_DEPENDS
();

1246 i‡(
tsk
->
ãrmö©ed
) {

1250 
	`dhd_√t_if_lock_loˇl
(
dhd
);

1251 
	`DHD_OS_WAKE_LOCK
(&
dhd
->
pub
);

1253 
i
 = 0; i < 
DHD_MAX_IFS
; i++) {

1254 i‡(
dhd
->
iÊi°
[
i
]) {

1255 
	`DHD_TRACE
(("%s: i¡îÁ˚ %d\n", 
__FUNCTION__
, 
i
));

1256 #ifde‡
SOFTAP


1257 
Êags
 = 
	`dhd_os_•ö_lock
(&
dhd
->
pub
);

1258 
ö_≠
 = (
≠_√t_dev
 !
NULL
);

1259 
	`dhd_os_•ö_u∆ock
(&
dhd
->
pub
, 
Êags
);

1261 i‡(
dhd
->
iÊi°
[
i
] && dhd->iÊi°[i]->
°©e
)

1262 
	`dhd_›_if
(
dhd
->
iÊi°
[
i
]);

1264 i‡(
dhd
->
iÊi°
[
i
] =
NULL
) {

1265 
	`DHD_TRACE
(("\n\n %s: interface %d just beenÑemoved,"

1266 "!\n\n", 
__FUNCTION__
, 
i
));

1269 #ifde‡
SOFTAP


1270 i‡(
ö_≠
 && 
dhd
->
£t_maˇddªss
 =
i
+1) {

1271 
	`DHD_TRACE
(("attemptÅo set MAC for %s in AP Mode,"

1272 "blocked. \n", 
dhd
->
iÊi°
[
i
]->
√t
->
«me
));

1273 
dhd
->
£t_maˇddªss
 = 0;

1277 i‡(
ö_≠
 && 
dhd
->
iÊi°
[
i
]->
£t_mu…iˇ°
) {

1278 
	`DHD_TRACE
(("attemptÅo set MULTICASTÜist for %s"

1279 "ö AP Mode, blocked. \n", 
dhd
->
iÊi°
[
i
]->
√t
->
«me
));

1280 
dhd
->
iÊi°
[
i
]->
£t_mu…iˇ°
 = 
FALSE
;

1284 i‡(
dhd
->
pub
.
up
 == 0)

1286 i‡(
dhd
->
iÊi°
[
i
]->
£t_mu…iˇ°
) {

1287 
dhd
->
iÊi°
[
i
]->
£t_mu…iˇ°
 = 
FALSE
;

1288 
	`_dhd_£t_mu…iˇ°_li°
(
dhd
, 
i
);

1291 i‡(
dhd
->
£t_maˇddªss
 =
i
+1) {

1292 
dhd
->
£t_maˇddªss
 = 0;

1293 i‡(
	`_dhd_£t_mac_addªss
(
dhd
, 
i
, &dhd->
macvÆue
) == 0) {

1294 
	`DHD_INFO
((

1297 
	`DHD_ERROR
((

1304 
	`DHD_OS_WAKE_UNLOCK
(&
dhd
->
pub
);

1305 
	`dhd_√t_if_u∆ock_loˇl
(
dhd
);

1307 
	`DHD_TRACE
(("%s: st›≥d\n", 
__FUNCTION__
));

1308 
	`com∂ëe_™d_exô
(&
tsk
->
com∂ëed
, 0);

1309 
	}
}

1312 
	$dhd_£t_mac_addªss
(
√t_devi˚
 *
dev
, *
addr
)

1314 
ªt
 = 0;

1316 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
dev
);

1317 
sockaddr
 *
ß
 = (sockadd∏*)
addr
;

1318 
ifidx
;

1320 
ifidx
 = 
	`dhd_√t2idx
(
dhd
, 
dev
);

1321 i‡(
ifidx
 =
DHD_BAD_IF
)

1324 
	`ASSERT
(
dhd
->
thr_sysioc_˘l
.
thr_pid
 >= 0);

1325 
	`mem˝y
(&
dhd
->
macvÆue
, 
ß
->
ß_d©a
, 
ETHER_ADDR_LEN
);

1326 
dhd
->
£t_maˇddªss
 = 
ifidx
+1;

1327 
	`up
(&
dhd
->
thr_sysioc_˘l
.
£ma
);

1329  
ªt
;

1330 
	}
}

1333 
	$dhd_£t_mu…iˇ°_li°
(
√t_devi˚
 *
dev
)

1335 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
dev
);

1336 
ifidx
;

1338 
ifidx
 = 
	`dhd_√t2idx
(
dhd
, 
dev
);

1339 i‡(
ifidx
 =
DHD_BAD_IF
)

1342 
	`ASSERT
(
dhd
->
thr_sysioc_˘l
.
thr_pid
 >= 0);

1343 
dhd
->
iÊi°
[
ifidx
]->
£t_mu…iˇ°
 = 
TRUE
;

1344 
	`up
(&
dhd
->
thr_sysioc_˘l
.
£ma
);

1345 
	}
}

1347 #ifde‡
PROP_TXSTATUS


1349 
	$dhd_os_wlfc_block
(
dhd_pub_t
 *
pub
)

1351 
dhd_öfo_t
 *
di
 = (dhd_öfo_à*)(
pub
->
öfo
);

1352 
	`ASSERT
(
di
 !
NULL
);

1353 
	`•ö_lock_bh
(&
di
->
wlfc_•ölock
);

1355 
	}
}

1358 
	$dhd_os_wlfc_unblock
(
dhd_pub_t
 *
pub
)

1360 
dhd_öfo_t
 *
di
 = (dhd_öfo_à*)(
pub
->
öfo
);

1362 
	`ASSERT
(
di
 !
NULL
);

1363 
	`•ö_u∆ock_bh
(&
di
->
wlfc_•ölock
);

1365 
	}
}

1367 c⁄° 
uöt8
 
	gwme_fifo2ac
[] = { 0, 1, 2, 3, 1, 1 };

1368 
uöt8
 
	g¥io2fifo
[8] = { 1, 0, 0, 1, 2, 2, 3, 3 };

1369 
	#WME_PRIO2AC
(
¥io
Ë
wme_fifo2ac
[
¥io2fifo
[’rio)]]

	)

1373 
	$dhd_£ndpkt
(
dhd_pub_t
 *
dhdp
, 
ifidx
, *
pktbuf
)

1375 
ªt
;

1376 
dhd_öfo_t
 *
dhd
 = (dhd_öfo_à*)(
dhdp
->
öfo
);

1377 
ëhî_hódî
 *
eh
 = 
NULL
;

1380 i‡(!
dhdp
->
up
 || (dhdp->
bus°©e
 =
DHD_BUS_DOWN
)) {

1382 
	`PKTFREE
(
dhdp
->
osh
, 
pktbuf
, 
TRUE
);

1383  -
ENODEV
;

1387 i‡(
	`PKTLEN
(
dhdp
->
osh
, 
pktbuf
Ë>
ETHER_HDR_LEN
) {

1388 
uöt8
 *
pktd©a
 = (uöt8 *)
	`PKTDATA
(
dhdp
->
osh
, 
pktbuf
);

1389 
eh
 = (
ëhî_hódî
 *)
pktd©a
;

1391 i‡(
	`ETHER_ISMULTI
(
eh
->
ëhî_dho°
))

1392 
dhdp
->
tx_mu…iˇ°
++;

1393 i‡(
	`¡oh16
(
eh
->
ëhî_ty≥
Ë=
ETHER_TYPE_802_1X
)

1394 
	`©omic_öc
(&
dhd
->
≥nd_8021x_˙t
);

1396 
	`PKTFREE
(
dhd
->
pub
.
osh
, 
pktbuf
, 
TRUE
);

1397  
BCME_ERROR
;

1401 #i‚de‡
PKTPRIO_OVERRIDE


1402 i‡(
	`PKTPRIO
(
pktbuf
) == 0)

1404 
	`pkt£çrio
(
pktbuf
, 
FALSE
);

1406 #ifde‡
PROP_TXSTATUS


1407 i‡(
dhdp
->
wlfc_°©e
) {

1409 
	`DHD_PKTTAG_SETIF
(
	`PKTTAG
(
pktbuf
), 
ifidx
);

1412 
	`DHD_PKTTAG_SETDSTN
(
	`PKTTAG
(
pktbuf
), 
eh
->
ëhî_dho°
);

1415 i‡(
	`ETHER_ISMULTI
(
eh
->
ëhî_dho°
))

1417 
	`DHD_PKTTAG_SETFIFO
(
	`PKTTAG
(
pktbuf
), 
AC_COUNT
);

1419 
	`DHD_PKTTAG_SETFIFO
(
	`PKTTAG
(
pktbuf
), 
	`WME_PRIO2AC
(
	`PKTPRIO
(pktbuf)));

1423 
	`dhd_¥Ÿ_hdΩush
(
dhdp
, 
ifidx
, 
pktbuf
);

1426 #ifde‡
WLMEDIA_HTSF


1427 
	`dhd_htsf_addtxts
(
dhdp
, 
pktbuf
);

1429 #ifde‡
PROP_TXSTATUS


1430 
	`dhd_os_wlfc_block
(
dhdp
);

1431 i‡(
dhdp
->
wlfc_°©e
 && ((
©ho°_wl_°©us_öfo_t
*)dhdp->wlfc_°©e)->
¥›tx°©us_mode


1432 !
WLFC_FCMODE_NONE
) {

1433 
ªt
 = 
	`dhd_wlfc_íque_£ndq
(
dhdp
->
wlfc_°©e
, 
	`DHD_PKTTAG_FIFO
(
	`PKTTAG
(
pktbuf
)),

1434 
pktbuf
);

1435 
	`dhd_wlfc_commô_∑ckës
(
dhdp
->
wlfc_°©e
, (
f_commôpkt_t
)
dhd_bus_txd©a
,

1436 
dhdp
->
bus
);

1437 i‡(((
©ho°_wl_°©us_öfo_t
*)
dhdp
->
wlfc_°©e
)->
toggÀ_ho°_if
) {

1438 ((
©ho°_wl_°©us_öfo_t
*)
dhdp
->
wlfc_°©e
)->
toggÀ_ho°_if
 = 0;

1440 
	`dhd_os_wlfc_unblock
(
dhdp
);

1443 
	`dhd_os_wlfc_unblock
(
dhdp
);

1445 
ªt
 = 
	`dhd_bus_txd©a
(
dhdp
->
bus
, 
pktbuf
);

1448 
ªt
 = 
	`dhd_bus_txd©a
(
dhdp
->
bus
, 
pktbuf
);

1451  
ªt
;

1452 
	}
}

1455 
	$dhd_°¨t_xmô
(
sk_buff
 *
skb
, 
√t_devi˚
 *
√t
)

1457 
ªt
;

1458 *
pktbuf
;

1459 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
√t
);

1460 
ifidx
;

1461 #ifde‡
WLMEDIA_HTSF


1462 
uöt8
 
htsfdly°©_sz
 = 
dhd
->
pub
.htsfdlystat_sz;

1464 
uöt8
 
htsfdly°©_sz
 = 0;

1467 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

1469 
	`DHD_OS_WAKE_LOCK
(&
dhd
->
pub
);

1472 i‡(
dhd
->
pub
.
bus°©e
 =
DHD_BUS_DOWN
 || dhd->pub.
h™g_was_£¡
) {

1473 
	`DHD_ERROR
(("%s: xmitÑejectedÖub.up=%d busstate=%d \n",

1474 
__FUNCTION__
, 
dhd
->
pub
.
up
, dhd->pub.
bus°©e
));

1475 
	`√tif_°›_queue
(
√t
);

1477 i‡(
dhd
->
pub
.
up
) {

1478 
	`DHD_ERROR
(("%s: EvíàHANG síàup\n", 
__FUNCTION__
));

1479 
	`√t_os_£nd_h™g_mesßge
(
√t
);

1481 
	`DHD_OS_WAKE_UNLOCK
(&
dhd
->
pub
);

1482 #i‡(
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2, 6, 20))

1483  -
ENODEV
;

1485  
NETDEV_TX_BUSY
;

1489 
ifidx
 = 
	`dhd_√t2idx
(
dhd
, 
√t
);

1490 i‡(
ifidx
 =
DHD_BAD_IF
) {

1491 
	`DHD_ERROR
(("%s: bad ifidx %d\n", 
__FUNCTION__
, 
ifidx
));

1492 
	`√tif_°›_queue
(
√t
);

1493 
	`DHD_OS_WAKE_UNLOCK
(&
dhd
->
pub
);

1494 #i‡(
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2, 6, 20))

1495  -
ENODEV
;

1497  
NETDEV_TX_BUSY
;

1503 i‡(
	`skb_hódroom
(
skb
Ë< 
dhd
->
pub
.
hdæí
 + 
htsfdly°©_sz
) {

1504 
sk_buff
 *
skb2
;

1506 
	`DHD_INFO
(("%s: insufficient headroom\n",

1507 
	`dhd_i‚ame
(&
dhd
->
pub
, 
ifidx
)));

1508 
dhd
->
pub
.
tx_ªÆloc
++;

1510 
skb2
 = 
	`skb_ªÆloc_hódroom
(
skb
, 
dhd
->
pub
.
hdæí
 + 
htsfdly°©_sz
);

1512 
	`dev_k‰ì_skb
(
skb
);

1513 i‡((
skb
 = 
skb2
Ë=
NULL
) {

1514 
	`DHD_ERROR
(("%s: skb_realloc_headroom failed\n",

1515 
	`dhd_i‚ame
(&
dhd
->
pub
, 
ifidx
)));

1516 
ªt
 = -
ENOMEM
;

1517 
d⁄e
;

1522 i‡(!(
pktbuf
 = 
	`PKTFRMNATIVE
(
dhd
->
pub
.
osh
, 
skb
))) {

1523 
	`DHD_ERROR
(("%s: PKTFRMNATIVE failed\n",

1524 
	`dhd_i‚ame
(&
dhd
->
pub
, 
ifidx
)));

1525 
	`dev_k‰ì_skb_™y
(
skb
);

1526 
ªt
 = -
ENOMEM
;

1527 
d⁄e
;

1529 #ifde‡
WLMEDIA_HTSF


1530 i‡(
htsfdly°©_sz
 && 
	`PKTLEN
(
dhd
->
pub
.
osh
, 
pktbuf
Ë>
ETHER_ADDR_LEN
) {

1531 
uöt8
 *
pktd©a
 = (uöt8 *)
	`PKTDATA
(
dhd
->
pub
.
osh
, 
pktbuf
);

1532 
ëhî_hódî
 *
eh
 = (ëhî_hódî *)
pktd©a
;

1534 i‡(!
	`ETHER_ISMULTI
(
eh
->
ëhî_dho°
) &&

1535 (
	`¡oh16
(
eh
->
ëhî_ty≥
Ë=
ETHER_TYPE_IP
)) {

1536 
eh
->
ëhî_ty≥
 = 
	`ht⁄16
(
ETHER_TYPE_BRCM_PKTDLYSTATS
);

1541 
ªt
 = 
	`dhd_£ndpkt
(&
dhd
->
pub
, 
ifidx
, 
pktbuf
);

1544 
d⁄e
:

1545 i‡(
ªt
)

1546 
dhd
->
pub
.
d°©s
.
tx_dr›≥d
++;

1548 
dhd
->
pub
.
tx_∑ckës
++;

1550 
	`DHD_OS_WAKE_UNLOCK
(&
dhd
->
pub
);

1553 #i‡(
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2, 6, 20))

1556  
NETDEV_TX_OK
;

1558 
	}
}

1561 
	$dhd_txÊowc⁄åﬁ
(
dhd_pub_t
 *
dhdp
, 
ifidx
, 
boﬁ
 
°©e
)

1563 
√t_devi˚
 *
√t
;

1564 
dhd_öfo_t
 *
dhd
 = 
dhdp
->
öfo
;

1565 
i
;

1567 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

1569 
	`ASSERT
(
dhd
);

1571 i‡(
ifidx
 =
ALL_INTERFACES
) {

1573 
dhdp
->
txoff
 = 
°©e
;

1574 
i
 = 0; i < 
DHD_MAX_IFS
; i++) {

1575 i‡(
dhd
->
iÊi°
[
i
]) {

1576 
√t
 = 
dhd
->
iÊi°
[
i
]->net;

1577 i‡(
°©e
 =
ON
)

1578 
	`√tif_°›_queue
(
√t
);

1580 
	`√tif_wake_queue
(
√t
);

1585 i‡(
dhd
->
iÊi°
[
ifidx
]) {

1586 
√t
 = 
dhd
->
iÊi°
[
ifidx
]->net;

1587 i‡(
°©e
 =
ON
)

1588 
	`√tif_°›_queue
(
√t
);

1590 
	`√tif_wake_queue
(
√t
);

1593 
	}
}

1595 #ifde‡
DHD_RX_DUMP


1597 
uöt16
 
	mty≥
;

1598 c⁄° *
	m°r
;

1599 } 
	tPKTTYPE_INFO
;

1601 c⁄° 
PKTTYPE_INFO
 
	g∑ckë_ty≥_öfo
[] =

1603 { 
ETHER_TYPE_IP
, "IP" },

1604 { 
ETHER_TYPE_ARP
, "ARP" },

1605 { 
ETHER_TYPE_BRCM
, "BRCM" },

1606 { 
ETHER_TYPE_802_1X
, "802.1X" },

1607 { 
ETHER_TYPE_WAI
, "WAPI" },

1611 c⁄° *
	$_gë_∑ckë_ty≥_°r
(
uöt16
 
ty≥
)

1613 
i
;

1614 
n
 = (
∑ckë_ty≥_öfo
)/(packet_type_info[1]) - 1;

1616 
i
 = 0; i < 
n
; i++) {

1617 i‡(
∑ckë_ty≥_öfo
[
i
].
ty≥
 ==Åype)

1618  
∑ckë_ty≥_öfo
[
i
].
°r
;

1621  
∑ckë_ty≥_öfo
[
n
].
°r
;

1622 
	}
}

1626 
	$dhd_rx_‰ame
(
dhd_pub_t
 *
dhdp
, 
ifidx
, *
pktbuf
, 
numpkt
, 
uöt8
 
ch™
)

1628 
dhd_öfo_t
 *
dhd
 = (dhd_öfo_à*)
dhdp
->
öfo
;

1629 
sk_buff
 *
skb
;

1630 
uch¨
 *
ëh
;

1631 
uöt
 
Àn
;

1632 *
d©a
, *
≤ext
 = 
NULL
;

1633 
i
;

1634 
dhd_if_t
 *
iÂ
;

1635 
wl_evít_msg_t
 
evít
;

1636 
tout_rx
 = 0;

1637 
tout_˘æ
 = 0;

1639 #ifde‡
DHD_RX_DUMP


1640 #ifde‡
DHD_RX_FULL_DUMP


1641 
k
;

1643 *
dump_d©a
;

1644 
uöt16
 
¥Ÿocﬁ
;

1647 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

1649 
i
 = 0; 
pktbuf
 && i < 
numpkt
; i++,Öktbu‡
≤ext
) {

1650 #ifde‡
WLBTAMP


1651 
ëhî_hódî
 *
eh
;

1652 
dŸ11_Œc_¢≠_hódî
 *
lsh
;

1655 
iÂ
 = 
dhd
->
iÊi°
[
ifidx
];

1656 i‡(
iÂ
 =
NULL
) {

1657 
	`DHD_ERROR
(("%s: ifp is NULL. dropÖacket\n",

1658 
__FUNCTION__
));

1659 
	`PKTFREE
(
dhdp
->
osh
, 
pktbuf
, 
TRUE
);

1662 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 0)

1664 #i‚de‡
PROP_TXSTATUS_VSDB


1665 i‡(!
iÂ
->
√t
 || iÂ->√t->
ªg_°©e
 !
NETREG_REGISTERED
) {

1667 i‡(!
iÂ
->
√t
 || iÂ->√t->
ªg_°©e
 !
NETREG_REGISTERED
 || !
dhd
->
pub
.
up
) {

1669 
	`DHD_ERROR
(("%s:Çet device is NOTÑegistered yet. dropÖacket\n",

1670 
__FUNCTION__
));

1671 
	`PKTFREE
(
dhdp
->
osh
, 
pktbuf
, 
TRUE
);

1676 
≤ext
 = 
	`PKTNEXT
(
dhdp
->
osh
, 
pktbuf
);

1677 
	`PKTSETNEXT
(
wl
->
sh
.
osh
, 
pktbuf
, 
NULL
);

1679 #ifde‡
WLBTAMP


1680 
eh
 = (
ëhî_hódî
 *)
	`PKTDATA
(
wl
->
sh
.
osh
, 
pktbuf
);

1681 
lsh
 = (
dŸ11_Œc_¢≠_hódî
 *)&
eh
[1];

1683 i‡((
	`¡oh16
(
eh
->
ëhî_ty≥
Ë< 
ETHER_TYPE_MIN
) &&

1684 (
	`PKTLEN
(
wl
->
sh
.
osh
, 
pktbuf
Ë>
RFC1042_HDR_LEN
) &&

1685 
	`bcmp
(
lsh
, 
BT_SIG_SNAP_MPROT
, 
DOT11_LLC_SNAP_HDR_LEN
 - 2) == 0 &&

1686 
lsh
->
ty≥
 =
	`HTON16
(
BTA_PROT_L2CAP
)) {

1687 
amp_hci_ACL_d©a_t
 *
ACL_d©a
 = (amp_hci_ACL_data_t *)

1688 ((
uöt8
 *)
eh
 + 
RFC1042_HDR_LEN
);

1689 
ACL_d©a
 = 
NULL
;

1693 #ifde‡
PROP_TXSTATUS


1694 i‡(
dhdp
->
wlfc_°©e
 && 
	`PKTLEN
(
wl
->
sh
.
osh
, 
pktbuf
) == 0) {

1699 ((
©ho°_wl_°©us_öfo_t
*)
dhdp
->
wlfc_°©e
)->
°©s
.
wlfc_hódî_⁄ly_pkt
++;

1700 
	`PKTFREE
(
dhdp
->
osh
, 
pktbuf
, 
TRUE
);

1705 
skb
 = 
	`PKTTONATIVE
(
dhdp
->
osh
, 
pktbuf
);

1716 
ëh
 = 
skb
->
d©a
;

1717 
Àn
 = 
skb
->len;

1719 #ifde‡
DHD_RX_DUMP


1720 
dump_d©a
 = 
skb
->
d©a
;

1721 
¥Ÿocﬁ
 = (
dump_d©a
[12] << 8) | dump_data[13];

1722 
	`DHD_ERROR
(("RX DUMP - %s\n", 
	`_gë_∑ckë_ty≥_°r
(
¥Ÿocﬁ
)));

1724 #ifde‡
DHD_RX_FULL_DUMP


1725 i‡(
¥Ÿocﬁ
 !
ETHER_TYPE_BRCM
) {

1726 
k
 = 0; k < 
skb
->
Àn
; k++) {

1727 
	`DHD_ERROR
(("%02X ", 
dump_d©a
[
k
]));

1728 i‡((
k
 & 15) == 15)

1729 
	`DHD_ERROR
(("\n"));

1731 
	`DHD_ERROR
(("\n"));

1735 i‡(
¥Ÿocﬁ
 !
ETHER_TYPE_BRCM
) {

1736 i‡(
dump_d©a
[0] == 0xFF) {

1737 
	`DHD_ERROR
(("%s: BROADCAST\n", 
__FUNCTION__
));

1739 i‡((
dump_d©a
[12] == 8) &&

1740 (
dump_d©a
[13] == 6)) {

1741 
	`DHD_ERROR
(("%s: ARP %d\n",

1742 
__FUNCTION__
, 
dump_d©a
[0x15]));

1744 } i‡(
dump_d©a
[0] & 1) {

1745 
	`DHD_ERROR
(("%s: MULTICAST: " 
MACDBG
 "\n",

1746 
__FUNCTION__
, 
	`MAC2STRDBG
(
dump_d©a
)));

1749 i‡(
¥Ÿocﬁ
 =
ETHER_TYPE_802_1X
) {

1750 
	`DHD_ERROR
(("ETHER_TYPE_802_1X: "

1752 
dump_d©a
[14], dump_data[15],

1753 
dump_d©a
[30]));

1759 
iÂ
 = 
dhd
->
iÊi°
[
ifidx
];

1760 i‡(
iÂ
 =
NULL
)

1761 
iÂ
 = 
dhd
->
iÊi°
[0];

1763 
	`ASSERT
(
iÂ
);

1764 
skb
->
dev
 = 
iÂ
->
√t
;

1765 
skb
->
¥Ÿocﬁ
 = 
	`ëh_ty≥_å™s
(skb, skb->
dev
);

1767 i‡(
skb
->
pkt_ty≥
 =
PACKET_MULTICAST
) {

1768 
dhd
->
pub
.
rx_mu…iˇ°
++;

1771 
skb
->
d©a
 = 
ëh
;

1772 
skb
->
Àn
 =Üen;

1774 #ifde‡
WLMEDIA_HTSF


1775 
	`dhd_htsf_addrxts
(
dhdp
, 
pktbuf
);

1778 
	`skb_puŒ
(
skb
, 
ETH_HLEN
);

1781 i‡(
	`¡oh16
(
skb
->
¥Ÿocﬁ
Ë=
ETHER_TYPE_BRCM
) {

1782 
	`dhd_wl_ho°_evít
(
dhd
, &
ifidx
,

1783 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 22)

1784 
skb
->
mac_hódî
,

1786 
skb
->
mac
.
øw
,

1788 &
evít
,

1789 &
d©a
);

1791 
	`wl_evít_to_ho°_‹dî
(&
evít
);

1793 i‡(!
tout_˘æ
)

1794 
tout_˘æ
 = 
DHD_PACKET_TIMEOUT_MS
;

1796 #ifde‡
WLBTAMP


1797 i‡(
evít
.
evít_ty≥
 =
WLC_E_BTA_HCI_EVENT
) {

1798 
	`dhd_bè_d€vt
(
dhdp
, 
d©a
, 
evít
.
d©Æí
);

1802 #i‡
	`deföed
(
PNO_SUPPORT
)

1803 i‡(
evít
.
evít_ty≥
 =
WLC_E_PFN_NET_FOUND
) {

1805 
tout_˘æ
 = 
CUSTOM_PNO_EVENT_LOCK_xTIME
 * 
DHD_PACKET_TIMEOUT_MS
;

1809 #ifde‡
DHD_DONOT_FORWARD_BCMEVENT_AS_NETWORK_PKT


1810 
	`PKTFREE
(
dhdp
->
osh
, 
pktbuf
, 
TRUE
);

1814 
tout_rx
 = 
DHD_PACKET_TIMEOUT_MS
;

1817 
	`ASSERT
(
ifidx
 < 
DHD_MAX_IFS
 && 
dhd
->
iÊi°
[ifidx]);

1818 i‡(
dhd
->
iÊi°
[
ifidx
] && !dhd->iÊi°[ifidx]->
°©e
)

1819 
iÂ
 = 
dhd
->
iÊi°
[
ifidx
];

1821 i‡(
iÂ
->
√t
)

1822 
iÂ
->
√t
->
œ°_rx
 = 
jiffõs
;

1824 
dhdp
->
d°©s
.
rx_byãs
 +
skb
->
Àn
;

1825 
dhdp
->
rx_∑ckës
++;

1827 i‡(
	`ö_öãºu±
()) {

1828 
	`√tif_rx
(
skb
);

1836 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 0)

1837 
	`√tif_rx_ni
(
skb
);

1839 
ul⁄g
 
Êags
;

1840 
	`√tif_rx
(
skb
);

1841 
	`loˇl_úq_ßve
(
Êags
);

1842 
	`RAISE_RX_SOFTIRQ
();

1843 
	`loˇl_úq_ª°‹e
(
Êags
);

1848 
	`DHD_OS_WAKE_LOCK_RX_TIMEOUT_ENABLE
(
dhdp
, 
tout_rx
);

1849 
	`DHD_OS_WAKE_LOCK_CTRL_TIMEOUT_ENABLE
(
dhdp
, 
tout_˘æ
);

1850 
	}
}

1853 
	$dhd_evít
(
dhd_öfo
 *
dhd
, *
evpkt
, 
evÀn
, 
ifidx
)

1857 
	}
}

1860 
	$dhd_txcom∂ëe
(
dhd_pub_t
 *
dhdp
, *
txp
, 
boﬁ
 
suc˚ss
)

1862 
dhd_öfo_t
 *
dhd
 = (dhd_öfo_à*)(
dhdp
->
öfo
);

1863 
ëhî_hódî
 *
eh
;

1864 
uöt16
 
ty≥
;

1865 #ifde‡
WLBTAMP


1866 
uöt
 
Àn
;

1869 
	`dhd_¥Ÿ_hdΩuŒ
(
dhdp
, 
NULL
, 
txp
, NULL, NULL);

1871 
eh
 = (
ëhî_hódî
 *)
	`PKTDATA
(
dhdp
->
osh
, 
txp
);

1872 
ty≥
 = 
	`¡oh16
(
eh
->
ëhî_ty≥
);

1874 i‡(
ty≥
 =
ETHER_TYPE_802_1X
)

1875 
	`©omic_dec
(&
dhd
->
≥nd_8021x_˙t
);

1877 #ifde‡
WLBTAMP


1881 
Àn
 = 
	`PKTLEN
(
dhdp
->
osh
, 
txp
);

1884 i‡((
ty≥
 < 
ETHER_TYPE_MIN
Ë&& (
Àn
 >
RFC1042_HDR_LEN
)) {

1885 
dŸ11_Œc_¢≠_hódî
 *
lsh
 = (dŸ11_Œc_¢≠_hódî *)&
eh
[1];

1887 i‡(
	`bcmp
(
lsh
, 
BT_SIG_SNAP_MPROT
, 
DOT11_LLC_SNAP_HDR_LEN
 - 2) == 0 &&

1888 
	`¡oh16
(
lsh
->
ty≥
Ë=
BTA_PROT_L2CAP
) {

1890 
	`dhd_bè_tx_hcid©a_com∂ëe
(
dhdp
, 
txp
, 
suc˚ss
);

1894 
	}
}

1896 
√t_devi˚_°©s
 *

1897 
	$dhd_gë_°©s
(
√t_devi˚
 *
√t
)

1899 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
√t
);

1900 
dhd_if_t
 *
iÂ
;

1901 
ifidx
;

1903 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

1905 
ifidx
 = 
	`dhd_√t2idx
(
dhd
, 
√t
);

1906 i‡(
ifidx
 =
DHD_BAD_IF
) {

1907 
	`DHD_ERROR
(("%s: BAD_IF\n", 
__FUNCTION__
));

1908  
NULL
;

1911 
iÂ
 = 
dhd
->
iÊi°
[
ifidx
];

1912 
	`ASSERT
(
dhd
 && 
iÂ
);

1914 i‡(
dhd
->
pub
.
up
) {

1916 
	`dhd_¥Ÿ_d°©s
(&
dhd
->
pub
);

1920 
iÂ
->
°©s
.
rx_∑ckës
 = 
dhd
->
pub
.
d°©s
.rx_packets;

1921 
iÂ
->
°©s
.
tx_∑ckës
 = 
dhd
->
pub
.
d°©s
.tx_packets;

1922 
iÂ
->
°©s
.
rx_byãs
 = 
dhd
->
pub
.
d°©s
.rx_bytes;

1923 
iÂ
->
°©s
.
tx_byãs
 = 
dhd
->
pub
.
d°©s
.tx_bytes;

1924 
iÂ
->
°©s
.
rx_îr‹s
 = 
dhd
->
pub
.
d°©s
.rx_errors;

1925 
iÂ
->
°©s
.
tx_îr‹s
 = 
dhd
->
pub
.
d°©s
.tx_errors;

1926 
iÂ
->
°©s
.
rx_dr›≥d
 = 
dhd
->
pub
.
d°©s
.rx_dropped;

1927 
iÂ
->
°©s
.
tx_dr›≥d
 = 
dhd
->
pub
.
d°©s
.tx_dropped;

1928 
iÂ
->
°©s
.
mu…iˇ°
 = 
dhd
->
pub
.
d°©s
.multicast;

1930  &
iÂ
->
°©s
;

1931 
	}
}

1933 #ifde‡
DHDTHREAD


1935 
	$dhd_w©chdog_thªad
(*
d©a
)

1937 
tsk_˘l_t
 *
tsk
 = (tsk_˘l_à*)
d©a
;

1938 
dhd_öfo_t
 *
dhd
 = (dhd_öfo_à*)
tsk
->
∑ª¡
;

1942 i‡(
dhd_w©chdog_¥io
 > 0) {

1943 
sched_∑øm
 
∑øm
;

1944 
∑øm
.
sched_¥i‹ôy
 = (
dhd_w©chdog_¥io
 < 
MAX_RT_PRIO
)?

1945 
dhd_w©chdog_¥io
:(
MAX_RT_PRIO
-1);

1946 
	`£tScheduÀr
(
cuºít
, 
SCHED_FIFO
, &
∑øm
);

1948 #i‚de‡
USE_KTHREAD_API


1949 
	`DAEMONIZE
("dhd_watchdog");

1952 
	`com∂ëe
(&
tsk
->
com∂ëed
);

1956 i‡(
	`down_öãºu±ibÀ
 (&
tsk
->
£ma
) == 0) {

1957 
Êags
;

1958 
jiffõs_©_°¨t
 = 
jiffõs
;

1959 
time_œp£
;

1961 
	`SMP_RD_BARRIER_DEPENDS
();

1962 i‡(
tsk
->
ãrmö©ed
) {

1966 
	`dhd_os_sdlock
(&
dhd
->
pub
);

1967 i‡(
dhd
->
pub
.
d⁄gÀ_ª£t
 =
FALSE
) {

1968 
	`DHD_TIMER
(("%s:\n", 
__FUNCTION__
));

1972 
	`dhd_bus_w©chdog
(&
dhd
->
pub
);

1974 
Êags
 = 
	`dhd_os_•ö_lock
(&
dhd
->
pub
);

1976 
dhd
->
pub
.
tick˙t
++;

1977 
time_œp£
 = 
jiffõs
 - 
jiffõs_©_°¨t
;

1980 i‡(
dhd
->
wd_timî_vÆid
)

1981 
	`mod_timî
(&
dhd
->
timî
,

1982 
jiffõs
 +

1983 
	`m£cs_to_jiffõs
(
dhd_w©chdog_ms
) -

1984 
	`mö
(
	`m£cs_to_jiffõs
(
dhd_w©chdog_ms
), 
time_œp£
));

1985 
	`dhd_os_•ö_u∆ock
(&
dhd
->
pub
, 
Êags
);

1987 
	`dhd_os_sdu∆ock
(&
dhd
->
pub
);

1992 
	`com∂ëe_™d_exô
(&
tsk
->
com∂ëed
, 0);

1993 
	}
}

1996 
	$dhd_w©chdog
(
ul⁄g
 
d©a
)

1998 
dhd_öfo_t
 *
dhd
 = (dhd_öfo_à*)
d©a
;

1999 
Êags
;

2001 i‡(
dhd
->
pub
.
d⁄gÀ_ª£t
) {

2005 #ifde‡
DHDTHREAD


2006 i‡(
dhd
->
thr_wdt_˘l
.
thr_pid
 >= 0) {

2007 
	`up
(&
dhd
->
thr_wdt_˘l
.
£ma
);

2012 
	`dhd_os_sdlock
(&
dhd
->
pub
);

2014 
	`dhd_bus_w©chdog
(&
dhd
->
pub
);

2016 
Êags
 = 
	`dhd_os_•ö_lock
(&
dhd
->
pub
);

2018 
dhd
->
pub
.
tick˙t
++;

2021 i‡(
dhd
->
wd_timî_vÆid
)

2022 
	`mod_timî
(&
dhd
->
timî
, 
jiffõs
 + 
	`m£cs_to_jiffõs
(
dhd_w©chdog_ms
));

2023 
	`dhd_os_•ö_u∆ock
(&
dhd
->
pub
, 
Êags
);

2024 
	`dhd_os_sdu∆ock
(&
dhd
->
pub
);

2025 
	}
}

2027 #ifde‡
DHDTHREAD


2029 
	$dhd_dpc_thªad
(*
d©a
)

2031 
tsk_˘l_t
 *
tsk
 = (tsk_˘l_à*)
d©a
;

2032 
dhd_öfo_t
 *
dhd
 = (dhd_öfo_à*)
tsk
->
∑ª¡
;

2037 i‡(
dhd_dpc_¥io
 > 0)

2039 
sched_∑øm
 
∑øm
;

2040 
∑øm
.
sched_¥i‹ôy
 = (
dhd_dpc_¥io
 < 
MAX_RT_PRIO
)?dhd_dpc_prio:(MAX_RT_PRIO-1);

2041 
	`£tScheduÀr
(
cuºít
, 
SCHED_FIFO
, &
∑øm
);

2043 #i‚de‡
USE_KTHREAD_API


2044 
	`DAEMONIZE
("dhd_dpc");

2048 
	`com∂ëe
(&
tsk
->
com∂ëed
);

2053 i‡(
	`down_öãºu±ibÀ
(&
tsk
->
£ma
) == 0) {

2055 
	`SMP_RD_BARRIER_DEPENDS
();

2056 i‡(
tsk
->
ãrmö©ed
) {

2061 i‡(
dhd
->
pub
.
bus°©e
 !
DHD_BUS_DOWN
) {

2062 i‡(
	`dhd_bus_dpc
(
dhd
->
pub
.
bus
)) {

2063 
	`up
(&
tsk
->
£ma
);

2066 
	`DHD_OS_WAKE_UNLOCK
(&
dhd
->
pub
);

2069 i‡(
dhd
->
pub
.
up
)

2070 
	`dhd_bus_°›
(
dhd
->
pub
.
bus
, 
TRUE
);

2071 
	`DHD_OS_WAKE_UNLOCK
(&
dhd
->
pub
);

2078 
	`com∂ëe_™d_exô
(&
tsk
->
com∂ëed
, 0);

2079 
	}
}

2083 
	$dhd_dpc
(
ul⁄g
 
d©a
)

2085 
dhd_öfo_t
 *
dhd
;

2087 
dhd
 = (
dhd_öfo_t
 *)
d©a
;

2094 i‡(
dhd
->
pub
.
bus°©e
 !
DHD_BUS_DOWN
) {

2095 i‡(
	`dhd_bus_dpc
(
dhd
->
pub
.
bus
))

2096 
	`èskÀt_scheduÀ
(&
dhd
->
èskÀt
);

2098 
	`DHD_OS_WAKE_UNLOCK
(&
dhd
->
pub
);

2100 
	`dhd_bus_°›
(
dhd
->
pub
.
bus
, 
TRUE
);

2101 
	`DHD_OS_WAKE_UNLOCK
(&
dhd
->
pub
);

2103 
	}
}

2106 
	$dhd_sched_dpc
(
dhd_pub_t
 *
dhdp
)

2108 
dhd_öfo_t
 *
dhd
 = (dhd_öfo_à*)
dhdp
->
öfo
;

2110 
	`DHD_OS_WAKE_LOCK
(
dhdp
);

2111 #ifde‡
DHDTHREAD


2112 i‡(
dhd
->
thr_dpc_˘l
.
thr_pid
 >= 0) {

2113 
	`up
(&
dhd
->
thr_dpc_˘l
.
£ma
);

2118 i‡(
dhd
->
dhd_èskÀt_¸óã
)

2119 
	`èskÀt_scheduÀ
(&
dhd
->
èskÀt
);

2120 
	}
}

2122 #ifde‡
TOE


2125 
	$dhd_t€_gë
(
dhd_öfo_t
 *
dhd
, 
ifidx
, 
uöt32
 *
t€_ﬁ
)

2127 
wl_io˘l_t
 
ioc
;

2128 
buf
[32];

2129 
ªt
;

2131 
	`mem£t
(&
ioc
, 0, (ioc));

2133 
ioc
.
cmd
 = 
WLC_GET_VAR
;

2134 
ioc
.
buf
 = buf;

2135 
ioc
.
Àn
 = (
uöt
)(
buf
);

2136 
ioc
.
£t
 = 
FALSE
;

2138 
	`°∫˝y
(
buf
, "toe_ol", (buf) - 1);

2139 
buf
[(buf) - 1] = '\0';

2140 i‡((
ªt
 = 
	`dhd_wl_io˘l
(&
dhd
->
pub
, 
ifidx
, &
ioc
, ioc.
buf
, ioc.
Àn
)) < 0) {

2142 i‡(
ªt
 =-
EIO
) {

2143 
	`DHD_ERROR
(("%s:ÅoeÇot supported by device\n",

2144 
	`dhd_i‚ame
(&
dhd
->
pub
, 
ifidx
)));

2145  -
EOPNOTSUPP
;

2148 
	`DHD_INFO
(("%s: couldÇŸ gëÅ€_ﬁ:Ñë=%d\n", 
	`dhd_i‚ame
(&
dhd
->
pub
, 
ifidx
), 
ªt
));

2149  
ªt
;

2152 
	`mem˝y
(
t€_ﬁ
, 
buf
, (
uöt32
));

2154 
	}
}

2158 
	$dhd_t€_£t
(
dhd_öfo_t
 *
dhd
, 
ifidx
, 
uöt32
 
t€_ﬁ
)

2160 
wl_io˘l_t
 
ioc
;

2161 
buf
[32];

2162 
t€
, 
ªt
;

2164 
	`mem£t
(&
ioc
, 0, (ioc));

2166 
ioc
.
cmd
 = 
WLC_SET_VAR
;

2167 
ioc
.
buf
 = buf;

2168 
ioc
.
Àn
 = (
uöt
)(
buf
);

2169 
ioc
.
£t
 = 
TRUE
;

2173 
	`°∫˝y
(
buf
, "toe_ol", (buf) - 1);

2174 
buf
[(buf) - 1] = '\0';

2175 
	`mem˝y
(&
buf
[("t€_ﬁ")], &
t€_ﬁ
, (
uöt32
));

2177 i‡((
ªt
 = 
	`dhd_wl_io˘l
(&
dhd
->
pub
, 
ifidx
, &
ioc
, ioc.
buf
, ioc.
Àn
)) < 0) {

2178 
	`DHD_ERROR
(("%s: couldÇot setÅoe_ol:Ñet=%d\n",

2179 
	`dhd_i‚ame
(&
dhd
->
pub
, 
ifidx
), 
ªt
));

2180  
ªt
;

2185 
t€
 = (
t€_ﬁ
 != 0);

2187 
	`°r˝y
(
buf
, "toe");

2188 
	`mem˝y
(&
buf
[("t€")], &
t€
, (
uöt32
));

2190 i‡((
ªt
 = 
	`dhd_wl_io˘l
(&
dhd
->
pub
, 
ifidx
, &
ioc
, ioc.
buf
, ioc.
Àn
)) < 0) {

2191 
	`DHD_ERROR
(("%s: couldÇŸ sëÅ€:Ñë=%d\n", 
	`dhd_i‚ame
(&
dhd
->
pub
, 
ifidx
), 
ªt
));

2192  
ªt
;

2196 
	}
}

2199 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 24)

2201 
	$dhd_ëhtoﬁ_gë_drvöfo
(
√t_devi˚
 *
√t
, 
ëhtoﬁ_drvöfo
 *
öfo
)

2203 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
√t
);

2205 
	`¢¥ötf
(
öfo
->
drivî
, (info->driver), "wl");

2206 
	`¢¥ötf
(
öfo
->
vîsi⁄
, (öfo->vîsi⁄), "%lu", 
dhd
->
pub
.
drv_vîsi⁄
);

2207 
	}
}

2209 
ëhtoﬁ_›s
 
	gdhd_ëhtoﬁ_›s
 = {

2210 .
gë_drvöfo
 = 
dhd_ëhtoﬁ_gë_drvöfo


2215 #i‡
LINUX_VERSION_CODE
 > 
KERNEL_VERSION
(2, 4, 2)

2217 
	$dhd_ëhtoﬁ
(
dhd_öfo_t
 *
dhd
, *
uaddr
)

2219 
ëhtoﬁ_drvöfo
 
öfo
;

2220 
drv«me
[(
öfo
.
drivî
)];

2221 
uöt32
 
cmd
;

2222 #ifde‡
TOE


2223 
ëhtoﬁ_vÆue
 
ed©a
;

2224 
uöt32
 
t€_cm≤t
, 
csum_dú
;

2225 
ªt
;

2228 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

2231 i‡(
	`c›y_‰om_u£r
(&
cmd
, 
uaddr
,  (
uöt32
)))

2232  -
EFAULT
;

2234 
cmd
) {

2235 
ETHTOOL_GDRVINFO
:

2237 i‡(
	`c›y_‰om_u£r
(&
öfo
, 
uaddr
, (info)))

2238  -
EFAULT
;

2239 
	`°∫˝y
(
drv«me
, 
öfo
.
drivî
, (info.driver));

2240 
drv«me
[(
öfo
.
drivî
)-1] = '\0';

2243 
	`mem£t
(&
öfo
, 0, (info));

2244 
öfo
.
cmd
 = cmd;

2247 i‡(
	`°rcmp
(
drv«me
, "?dhd") == 0) {

2248 
	`¢¥ötf
(
öfo
.
drivî
, (info.driver), "dhd");

2249 
	`°∫˝y
(
öfo
.
vîsi⁄
, 
EPI_VERSION_STR
, (info.version) - 1);

2250 
öfo
.
vîsi⁄
[(info.version) - 1] = '\0';

2254 i‡(!
dhd
->
pub
.
up
) {

2255 
	`DHD_ERROR
(("%s: d⁄gÀ i†nŸ up\n", 
__FUNCTION__
));

2256  -
ENODEV
;

2260 i‡(
dhd
->
pub
.
iswl
)

2261 
	`¢¥ötf
(
öfo
.
drivî
, (info.driver), "wl");

2263 
	`¢¥ötf
(
öfo
.
drivî
, (info.driver), "xx");

2265 
	`¢¥ötf
(
öfo
.
vîsi⁄
, (öfo.vîsi⁄), "%lu", 
dhd
->
pub
.
drv_vîsi⁄
);

2266 i‡(
	`c›y_to_u£r
(
uaddr
, &
öfo
, (info)))

2267  -
EFAULT
;

2268 
	`DHD_CTL
(("%s: giví %*s,Ñëu∫ög %s\n", 
__FUNCTION__
,

2269 ()(
drv«me
), drv«me, 
öfo
.
drivî
));

2272 #ifde‡
TOE


2274 
ETHTOOL_GRXCSUM
:

2275 
ETHTOOL_GTXCSUM
:

2276 i‡((
ªt
 = 
	`dhd_t€_gë
(
dhd
, 0, &
t€_cm≤t
)) < 0)

2277  
ªt
;

2279 
csum_dú
 = (
cmd
 =
ETHTOOL_GTXCSUM
Ë? 
TOE_TX_CSUM_OL
 : 
TOE_RX_CSUM_OL
;

2281 
ed©a
.
cmd
 = cmd;

2282 
ed©a
.
d©a
 = (
t€_cm≤t
 & 
csum_dú
) ? 1 : 0;

2284 i‡(
	`c›y_to_u£r
(
uaddr
, &
ed©a
, (edata)))

2285  -
EFAULT
;

2289 
ETHTOOL_SRXCSUM
:

2290 
ETHTOOL_STXCSUM
:

2291 i‡(
	`c›y_‰om_u£r
(&
ed©a
, 
uaddr
, (edata)))

2292  -
EFAULT
;

2295 i‡((
ªt
 = 
	`dhd_t€_gë
(
dhd
, 0, &
t€_cm≤t
)) < 0)

2296  
ªt
;

2298 
csum_dú
 = (
cmd
 =
ETHTOOL_STXCSUM
Ë? 
TOE_TX_CSUM_OL
 : 
TOE_RX_CSUM_OL
;

2300 i‡(
ed©a
.
d©a
 != 0)

2301 
t€_cm≤t
 |
csum_dú
;

2303 
t€_cm≤t
 &~
csum_dú
;

2305 i‡((
ªt
 = 
	`dhd_t€_£t
(
dhd
, 0, 
t€_cm≤t
)) < 0)

2306  
ªt
;

2309 i‡(
cmd
 =
ETHTOOL_STXCSUM
) {

2310 i‡(
ed©a
.
d©a
)

2311 
dhd
->
iÊi°
[0]->
√t
->
„©uªs
 |
NETIF_F_IP_CSUM
;

2313 
dhd
->
iÊi°
[0]->
√t
->
„©uªs
 &~
NETIF_F_IP_CSUM
;

2320  -
EOPNOTSUPP
;

2324 
	}
}

2327 
boﬁ
 
	$dhd_check_h™g
(
√t_devi˚
 *
√t
, 
dhd_pub_t
 *
dhdp
, 
îr‹
)

2329 
dhd_öfo_t
 * 
dhd
;

2331 i‡(!
dhdp
)

2332  
FALSE
;

2334 
dhd
 = (
dhd_öfo_t
 *)
dhdp
->
öfo
;

2335 i‡(
dhd
->
thr_sysioc_˘l
.
thr_pid
 < 0) {

2336 
	`DHD_ERROR
(("%†: skù≥d duêtÿ√g©ivêpid - u∆ﬂdög?\n", 
__FUNCTION__
));

2337  
FALSE
;

2340 i‡((
îr‹
 =-
ETIMEDOUT
Ë|| (îr‹ =-
EREMOTEIO
) ||

2341 ((
dhdp
->
bus°©e
 =
DHD_BUS_DOWN
Ë&& (!dhdp->
d⁄gÀ_ª£t
))) {

2342 
	`DHD_ERROR
(("%s: EvíàHANG síd u∞duêtÿÑe=%dÅe=%dÉ=%d s=%d\n", 
__FUNCTION__
,

2343 
dhdp
->
rx˙t_timeout
, dhdp->
tx˙t_timeout
, 
îr‹
, dhdp->
bus°©e
));

2344 
	`√t_os_£nd_h™g_mesßge
(
√t
);

2345  
TRUE
;

2347  
FALSE
;

2348 
	}
}

2351 
	$dhd_io˘l_íåy
(
√t_devi˚
 *
√t
, 
i‰eq
 *
i‰
, 
cmd
)

2353 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
√t
);

2354 
dhd_io˘l_t
 
ioc
;

2355 
bcmîr‹
 = 0;

2356 
buÊí
 = 0;

2357 *
buf
 = 
NULL
;

2358 
uöt
 
drivî
 = 0;

2359 
ifidx
;

2360 
ªt
;

2362 
	`DHD_OS_WAKE_LOCK
(&
dhd
->
pub
);

2365 i‡(
dhd
->
pub
.
h™g_was_£¡
) {

2366 
	`DHD_ERROR
(("%s: HANG wa†£¡ u∞óæõr\n", 
__FUNCTION__
));

2367 
	`DHD_OS_WAKE_LOCK_CTRL_TIMEOUT_ENABLE
(&
dhd
->
pub
, 
DHD_EVENT_TIMEOUT_MS
);

2368 
	`DHD_OS_WAKE_UNLOCK
(&
dhd
->
pub
);

2369  
	`OSL_ERROR
(
BCME_DONGLE_DOWN
);

2372 
ifidx
 = 
	`dhd_√t2idx
(
dhd
, 
√t
);

2373 
	`DHD_TRACE
(("%s: ifidx %d, cmd 0x%04x\n", 
__FUNCTION__
, 
ifidx
, 
cmd
));

2375 i‡(
ifidx
 =
DHD_BAD_IF
) {

2376 
	`DHD_ERROR
(("%s: BAD IF\n", 
__FUNCTION__
));

2377 
	`DHD_OS_WAKE_UNLOCK
(&
dhd
->
pub
);

2381 #i‡
	`deföed
(
CONFIG_WIRELESS_EXT
)

2383 i‡((
cmd
 >
SIOCIWFIRST
Ë&& (cmd <
SIOCIWLAST
)) {

2385 
ªt
 = 
	`wl_iw_io˘l
(
√t
, 
i‰
, 
cmd
);

2386 
	`DHD_OS_WAKE_UNLOCK
(&
dhd
->
pub
);

2387  
ªt
;

2391 #i‡
LINUX_VERSION_CODE
 > 
	`KERNEL_VERSION
(2, 4, 2)

2392 i‡(
cmd
 =
SIOCETHTOOL
) {

2393 
ªt
 = 
	`dhd_ëhtoﬁ
(
dhd
, (*)
i‰
->
i‰_d©a
);

2394 
	`DHD_OS_WAKE_UNLOCK
(&
dhd
->
pub
);

2395  
ªt
;

2399 i‡(
cmd
 =
SIOCDEVPRIVATE
+1) {

2400 
ªt
 = 
	`wl_™droid_¥iv_cmd
(
√t
, 
i‰
, 
cmd
);

2401 
	`dhd_check_h™g
(
√t
, &
dhd
->
pub
, 
ªt
);

2402 
	`DHD_OS_WAKE_UNLOCK
(&
dhd
->
pub
);

2403  
ªt
;

2406 i‡(
cmd
 !
SIOCDEVPRIVATE
) {

2407 
	`DHD_OS_WAKE_UNLOCK
(&
dhd
->
pub
);

2408  -
EOPNOTSUPP
;

2411 
	`mem£t
(&
ioc
, 0, (ioc));

2414 i‡(
	`c›y_‰om_u£r
(&
ioc
, 
i‰
->
i‰_d©a
, (
wl_io˘l_t
))) {

2415 
bcmîr‹
 = 
BCME_BADADDR
;

2416 
d⁄e
;

2420 i‡(
ioc
.
buf
) {

2421 i‡(
ioc
.
Àn
 == 0) {

2422 
	`DHD_TRACE
(("%s: ioc.Àn=0,Ñëu∫†BCME_BADARG \n", 
__FUNCTION__
));

2423 
bcmîr‹
 = 
BCME_BADARG
;

2424 
d⁄e
;

2426 
buÊí
 = 
	`MIN
(
ioc
.
Àn
, 
DHD_IOCTL_MAXLEN
);

2434 i‡(!(
buf
 = (*)
	`MALLOC
(
dhd
->
pub
.
osh
, 
buÊí
))) {

2435 
bcmîr‹
 = 
BCME_NOMEM
;

2436 
d⁄e
;

2438 i‡(
	`c›y_‰om_u£r
(
buf
, 
ioc
.buf, 
buÊí
)) {

2439 
bcmîr‹
 = 
BCME_BADADDR
;

2440 
d⁄e
;

2446 i‡((
	`c›y_‰om_u£r
(&
drivî
, (*)
i‰
->
i‰_d©a
 + (
wl_io˘l_t
),

2447 (
uöt
)) != 0)) {

2448 
bcmîr‹
 = 
BCME_BADADDR
;

2449 
d⁄e
;

2452 i‡(!
	`ˇ∑bÀ
(
CAP_NET_ADMIN
)) {

2453 
bcmîr‹
 = 
BCME_EPERM
;

2454 
d⁄e
;

2458 i‡(
drivî
 =
DHD_IOCTL_MAGIC
) {

2459 
bcmîr‹
 = 
	`dhd_io˘l
((*)&
dhd
->
pub
, &
ioc
, 
buf
, 
buÊí
);

2460 i‡(
bcmîr‹
)

2461 
dhd
->
pub
.
bcmîr‹
 = bcmerror;

2462 
d⁄e
;

2466 i‡(
dhd
->
pub
.
bus°©e
 !
DHD_BUS_DATA
) {

2467 
bcmîr‹
 = 
BCME_DONGLE_DOWN
;

2468 
d⁄e
;

2471 i‡(!
dhd
->
pub
.
iswl
) {

2472 
bcmîr‹
 = 
BCME_DONGLE_DOWN
;

2473 
d⁄e
;

2483 i‡(
ioc
.
cmd
 =
WLC_SET_KEY
 ||

2484 (
ioc
.
cmd
 =
WLC_SET_VAR
 && ioc.
buf
 !
NULL
 &&

2485 
	`°∫cmp
("w£c_key", 
ioc
.
buf
, 9) == 0) ||

2486 (
ioc
.
cmd
 =
WLC_SET_VAR
 && ioc.
buf
 !
NULL
 &&

2487 
	`°∫cmp
("bsscfg:w£c_key", 
ioc
.
buf
, 15) == 0) ||

2488 
ioc
.
cmd
 =
WLC_DISASSOC
)

2489 
	`dhd_waô_≥nd8021x
(
√t
);

2491 #ifde‡
WLMEDIA_HTSF


2492 i‡(
ioc
.
buf
) {

2494 i‡(
	`°rcmp
("htsf", 
ioc
.
buf
) == 0) {

2495 
	`dhd_io˘l_htsf_gë
(
dhd
, 0);

2496  
BCME_OK
;

2499 i‡(
	`°rcmp
("htsÊ©e", 
ioc
.
buf
) == 0) {

2500 i‡(
ioc
.
£t
) {

2501 
	`mem£t
(
ts
, 0, (
t°amp_t
)*
TSMAX
);

2502 
	`mem£t
(&
maxdñayts
, 0, (
t°amp_t
));

2503 
maxdñay
 = 0;

2504 
t•kt˙t
 = 0;

2505 
maxdñaypkäo
 = 0;

2506 
	`mem£t
(&
vi_d1
.
bö
, 0, (
uöt32
)*
NUMBIN
);

2507 
	`mem£t
(&
vi_d2
.
bö
, 0, (
uöt32
)*
NUMBIN
);

2508 
	`mem£t
(&
vi_d3
.
bö
, 0, (
uöt32
)*
NUMBIN
);

2509 
	`mem£t
(&
vi_d4
.
bö
, 0, (
uöt32
)*
NUMBIN
);

2511 
	`dhd_dump_œãncy
();

2513  
BCME_OK
;

2515 i‡(
	`°rcmp
("htsf˛ór", 
ioc
.
buf
) == 0) {

2516 
	`mem£t
(&
vi_d1
.
bö
, 0, (
uöt32
)*
NUMBIN
);

2517 
	`mem£t
(&
vi_d2
.
bö
, 0, (
uöt32
)*
NUMBIN
);

2518 
	`mem£t
(&
vi_d3
.
bö
, 0, (
uöt32
)*
NUMBIN
);

2519 
	`mem£t
(&
vi_d4
.
bö
, 0, (
uöt32
)*
NUMBIN
);

2520 
htsf_£qnum
 = 0;

2521  
BCME_OK
;

2523 i‡(
	`°rcmp
("htsfhis", 
ioc
.
buf
) == 0) {

2524 
	`dhd_dump_htsfhi°o
(&
vi_d1
, "HÅo D");

2525 
	`dhd_dump_htsfhi°o
(&
vi_d2
, "DÅo D");

2526 
	`dhd_dump_htsfhi°o
(&
vi_d3
, "DÅo H");

2527 
	`dhd_dump_htsfhi°o
(&
vi_d4
, "HÅo H");

2528  
BCME_OK
;

2530 i‡(
	`°rcmp
("t•‹t", 
ioc
.
buf
) == 0) {

2531 i‡(
ioc
.
£t
) {

2532 
	`mem˝y
(&
t•‹t
, 
ioc
.
buf
 + 7, 4);

2534 
	`DHD_ERROR
(("cuºíàtime°am∞p‹t: %d \n", 
t•‹t
));

2536  
BCME_OK
;

2541 i‡((
ioc
.
cmd
 =
WLC_SET_VAR
 || ioc.cmd =
WLC_GET_VAR
) &&

2542 
ioc
.
buf
 !
NULL
 && 
	`°∫cmp
("rpc_", ioc.buf, 4) == 0) {

2543 #ifde‡
BCM_FD_AGGR


2544 
bcmîr‹
 = 
	`dhd_fdaggr_io˘l
(&
dhd
->
pub
, 
ifidx
, (
wl_io˘l_t
 *)&
ioc
, 
buf
, 
buÊí
);

2546 
bcmîr‹
 = 
BCME_UNSUPPORTED
;

2548 
d⁄e
;

2550 
bcmîr‹
 = 
	`dhd_wl_io˘l
(&
dhd
->
pub
, 
ifidx
, (
wl_io˘l_t
 *)&
ioc
, 
buf
, 
buÊí
);

2552 
d⁄e
:

2553 
	`dhd_check_h™g
(
√t
, &
dhd
->
pub
, 
bcmîr‹
);

2555 i‡(!
bcmîr‹
 && 
buf
 && 
ioc
.buf) {

2556 i‡(
	`c›y_to_u£r
(
ioc
.
buf
, buf, 
buÊí
))

2557 
bcmîr‹
 = -
EFAULT
;

2560 i‡(
buf
)

2561 
	`MFREE
(
dhd
->
pub
.
osh
, 
buf
, 
buÊí
);

2563 
	`DHD_OS_WAKE_UNLOCK
(&
dhd
->
pub
);

2565  
	`OSL_ERROR
(
bcmîr‹
);

2566 
	}
}

2568 #ifde‡
WL_CFG80211


2570 
	$dhd_˛ónup_vút_iÁ˚s
(
dhd_öfo_t
 *
dhd
)

2572 
i
 = 1;

2573 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27))

2574 
rﬁlback_lock
 = 
FALSE
;

2577 
	`DHD_TRACE
(("%s: E¡î \n", 
__func__
));

2579 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27))

2581 i‡(
	`π∆_is_locked
()) {

2582 
	`π∆_u∆ock
();

2583 
rﬁlback_lock
 = 
TRUE
;

2587 
i
 = 1; i < 
DHD_MAX_IFS
; i++) {

2588 
	`dhd_√t_if_lock_loˇl
(
dhd
);

2589 i‡(
dhd
->
iÊi°
[
i
]) {

2590 
	`DHD_TRACE
(("Dñëög IF: %d \n", 
i
));

2591 i‡((
dhd
->
iÊi°
[
i
]->
°©e
 !
DHD_IF_DEL
) &&

2592 (
dhd
->
iÊi°
[
i
]->
°©e
 !
DHD_IF_DELETING
)) {

2593 
dhd
->
iÊi°
[
i
]->
°©e
 = 
DHD_IF_DEL
;

2594 
dhd
->
iÊi°
[
i
]->
idx
 = i;

2595 
	`dhd_›_if
(
dhd
->
iÊi°
[
i
]);

2598 
	`dhd_√t_if_u∆ock_loˇl
(
dhd
);

2601 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27))

2602 i‡(
rﬁlback_lock
)

2603 
	`π∆_lock
();

2607 
	}
}

2612 
	$dhd_°›
(
√t_devi˚
 *
√t
)

2614 
ifidx
 = 0;

2615 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
√t
);

2616 
	`DHD_OS_WAKE_LOCK
(&
dhd
->
pub
);

2617 
	`DHD_TRACE
(("%s: E¡î %p\n", 
__FUNCTION__
, 
√t
));

2618 i‡(
dhd
->
pub
.
up
 == 0) {

2619 
exô
;

2621 
ifidx
 = 
	`dhd_√t2idx
(
dhd
, 
√t
);

2622 
	`BCM_REFERENCE
(
ifidx
);

2625 
	`√tif_°›_queue
(
√t
);

2626 
dhd
->
pub
.
up
 = 0;

2628 #ifde‡
WL_CFG80211


2629 i‡(
ifidx
 == 0) {

2630 
	`wl_cfg80211_down
(
NULL
);

2636 i‡((
dhd
->
dhd_°©e
 & 
DHD_ATTACH_STATE_ADD_IF
) &&

2637 (
dhd
->
dhd_°©e
 & 
DHD_ATTACH_STATE_CFG80211
)) {

2638 
	`dhd_˛ónup_vút_iÁ˚s
(
dhd
);

2643 #ifde‡
PROP_TXSTATUS


2644 
	`dhd_os_wlfc_block
(&
dhd
->
pub
);

2645 
	`dhd_wlfc_˛ónup
(&
dhd
->
pub
);

2646 
	`dhd_os_wlfc_unblock
(&
dhd
->
pub
);

2650 
	`dhd_¥Ÿ_°›
(&
dhd
->
pub
);

2652 
OLD_MOD_DEC_USE_COUNT
;

2653 
exô
:

2654 #i‡
	`deföed
(
WL_CFG80211
)

2655 i‡(
ifidx
 == 0) {

2656 i‡(!
dhd_dow∆ﬂd_fw_⁄_drivîlﬂd
)

2657 
	`wl_™droid_wifi_off
(
√t
);

2660 
dhd
->
pub
.
rx˙t_timeout
 = 0;

2661 
dhd
->
pub
.
tx˙t_timeout
 = 0;

2663 
	`DHD_OS_WAKE_UNLOCK
(&
dhd
->
pub
);

2665 
	}
}

2668 
	$dhd_›í
(
√t_devi˚
 *
√t
)

2670 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
√t
);

2671 #ifde‡
TOE


2672 
uöt32
 
t€_ﬁ
;

2674 
ifidx
;

2675 
öt32
 
ªt
 = 0;

2677 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 25)) && 1

2678 i‡(
	`muãx_is_locked
(&
_dhd_sdio_muãx_lock_
) != 0) {

2679 
	`DHD_ERROR
(("%†: dhd_›í: cÆ»dev o≥¿bef‹êösmod com∂ëe!\n", 
__FUNCTION__
));

2681 
	`muãx_lock
(&
_dhd_sdio_muãx_lock_
);

2684 
	`DHD_OS_WAKE_LOCK
(&
dhd
->
pub
);

2686 i‡(
	`°æí
(
fúmw¨e_∑th
) != 0) {

2687 i‡(
fúmw¨e_∑th
[
	`°æí
(firmware_path)-1] == '\n')

2688 
fúmw¨e_∑th
[
	`°æí
(firmware_path)-1] = '\0';

2689 
	`°∫˝y
(
fw_∑th
, 
fúmw¨e_∑th
, (fw_path)-1);

2690 
fw_∑th
[(fw_path)-1] = '\0';

2691 
fúmw¨e_∑th
[0] = '\0';

2695 
dhd
->
pub
.
d⁄gÀ_å≠_occuªd
 = 0;

2696 
dhd
->
pub
.
h™g_was_£¡
 = 0;

2697 #i‡!
	`deföed
(
WL_CFG80211
)

2703 
ªt
 = 
	`wl_c⁄åﬁ_wl_°¨t
(
√t
);

2704 i‡(
ªt
 != 0) {

2705 
	`DHD_ERROR
(("%s: faûed wôh codê%d\n", 
__FUNCTION__
, 
ªt
));

2706 
ªt
 = -1;

2707 
exô
;

2712 
ifidx
 = 
	`dhd_√t2idx
(
dhd
, 
√t
);

2713 
	`DHD_TRACE
(("%s: ifidx %d\n", 
__FUNCTION__
, 
ifidx
));

2715 i‡(
ifidx
 < 0) {

2716 
	`DHD_ERROR
(("%s: Eº‹: cÆÀd wôh invÆid IF\n", 
__FUNCTION__
));

2717 
ªt
 = -1;

2718 
exô
;

2721 i‡(!
dhd
->
iÊi°
[
ifidx
] || dhd->iÊi°[ifidx]->
°©e
 =
DHD_IF_DEL
) {

2722 
	`DHD_ERROR
(("%s: Eº‹: cÆÀd whí IFáÃódy dñëed\n", 
__FUNCTION__
));

2723 
ªt
 = -1;

2724 
exô
;

2727 i‡(
ifidx
 == 0) {

2728 
	`©omic_£t
(&
dhd
->
≥nd_8021x_˙t
, 0);

2729 #i‡
	`deföed
(
WL_CFG80211
)

2730 
	`DHD_ERROR
(("\n%s\n", 
dhd_vîsi⁄
));

2731 i‡(!
dhd_dow∆ﬂd_fw_⁄_drivîlﬂd
) {

2732 
ªt
 = 
	`wl_™droid_wifi_⁄
(
√t
);

2733 i‡(
ªt
 != 0) {

2734 
	`DHD_ERROR
(("%s: faûed wôh codê%d\n", 
__FUNCTION__
, 
ªt
));

2735 
ªt
 = -1;

2736 
exô
;

2742 i‡(
dhd
->
pub
.
bus°©e
 !
DHD_BUS_DATA
) {

2745 i‡((
ªt
 = 
	`dhd_bus_°¨t
(&
dhd
->
pub
)) != 0) {

2746 
	`DHD_ERROR
(("%s: faûed wôh codê%d\n", 
__FUNCTION__
, 
ªt
));

2747 
ªt
 = -1;

2748 
exô
;

2754 
	`mem˝y
(
√t
->
dev_addr
, 
dhd
->
pub
.
mac
.
o˘ë
, 
ETHER_ADDR_LEN
);

2756 #ifde‡
TOE


2758 i‡(
	`dhd_t€_gë
(
dhd
, 
ifidx
, &
t€_ﬁ
Ë>0 && (t€_ﬁ & 
TOE_TX_CSUM_OL
) != 0)

2759 
dhd
->
iÊi°
[
ifidx
]->
√t
->
„©uªs
 |
NETIF_F_IP_CSUM
;

2761 
dhd
->
iÊi°
[
ifidx
]->
√t
->
„©uªs
 &~
NETIF_F_IP_CSUM
;

2764 #i‡
	`deföed
(
WL_CFG80211
)

2765 i‡(
	`u∆ikñy
(
	`wl_cfg80211_up
(
NULL
))) {

2766 
	`DHD_ERROR
(("%s: faûedÅÿbrög u∞cfg80211\n", 
__FUNCTION__
));

2767 
ªt
 = -1;

2768 
exô
;

2774 
	`√tif_°¨t_queue
(
√t
);

2775 
dhd
->
pub
.
up
 = 1;

2777 #ifde‡
BCMDBGFS


2778 
	`dhd_dbg_öô
(&
dhd
->
pub
);

2781 
OLD_MOD_INC_USE_COUNT
;

2782 
exô
:

2783 i‡(
ªt
)

2784 
	`dhd_°›
(
√t
);

2786 
	`DHD_OS_WAKE_UNLOCK
(&
dhd
->
pub
);

2788 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 25)) && 1

2789 
	`muãx_u∆ock
(&
_dhd_sdio_muãx_lock_
);

2791  
ªt
;

2792 
	}
}

2794 
	$dhd_do_drivî_öô
(
√t_devi˚
 *
√t
)

2796 
dhd_öfo_t
 *
dhd
 = 
NULL
;

2798 i‡(!
√t
) {

2799 
	`DHD_ERROR
(("Primary InterfaceÇot initialized \n"));

2800  -
EINVAL
;

2803 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 25)) && 1

2804 #ifde‡
MULTIPLE_SUPPLICANT


2805 i‡(
	`muãx_is_locked
(&
_dhd_sdio_muãx_lock_
) != 0) {

2806 
	`DHD_ERROR
(("%†: dhdsdio_¥obêi†ÆªadyÑu¬ög!\n", 
__FUNCTION__
));

2812 
dhd
 = *(
dhd_öfo_t
 **)
	`√tdev_¥iv
(
√t
);

2816 i‡(
dhd
->
pub
.
bus°©e
 =
DHD_BUS_DATA
) {

2817 
	`DHD_TRACE
(("Driverálready Inititalized. NothingÅo do"));

2821 i‡(
	`dhd_›í
(
√t
) < 0) {

2822 
	`DHD_ERROR
(("Driver Init Failed \n"));

2827 
	}
}

2829 
o¶_t
 *

2830 
	$dhd_o¶_©èch
(*
pdev
, 
uöt
 
bu°y≥
)

2832  
	`o¶_©èch
(
pdev
, 
bu°y≥
, 
TRUE
);

2833 
	}
}

2836 
	$dhd_o¶_dëach
(
o¶_t
 *
osh
)

2838 i‡(
	`MALLOCED
(
osh
)) {

2839 
	`DHD_ERROR
(("%s: MEMORY LEAK %d byãs\n", 
__FUNCTION__
, 
	`MALLOCED
(
osh
)));

2841 
	`o¶_dëach
(
osh
);

2842 #i‡1 && (
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27))

2843 
dhd_ªgi°øti⁄_check
 = 
FALSE
;

2844 
	`up
(&
dhd_ªgi°øti⁄_£m
);

2845 #if 
	`deföed
(
BCMLXSDMMC
)

2846 
	`up
(&
dhd_chùup_£m
);

2849 
	}
}

2852 
	$dhd_add_if
(
dhd_öfo_t
 *
dhd
, 
ifidx
, *
h™dÀ
, *
«me
,

2853 
uöt8
 *
mac_addr
, 
uöt32
 
Êags
, uöt8 
bssidx
)

2855 
dhd_if_t
 *
iÂ
;

2857 
	`DHD_TRACE
(("%s: idx %d, h™dÀ->%p\n", 
__FUNCTION__
, 
ifidx
, 
h™dÀ
));

2859 
	`ASSERT
(
dhd
 && (
ifidx
 < 
DHD_MAX_IFS
));

2861 
iÂ
 = 
dhd
->
iÊi°
[
ifidx
];

2862 i‡(
iÂ
 !
NULL
) {

2863 i‡(
iÂ
->
√t
 !
NULL
) {

2864 
	`√tif_°›_queue
(
iÂ
->
√t
);

2865 
	`uƒegi°î_√tdev
(
iÂ
->
√t
);

2866 
	`‰ì_√tdev
(
iÂ
->
√t
);

2869 i‡((
iÂ
 = 
	`MALLOC
(
dhd
->
pub
.
osh
, (
dhd_if_t
))Ë=
NULL
) {

2870 
	`DHD_ERROR
(("%s: OOM - dhd_if_t\n", 
__FUNCTION__
));

2871  -
ENOMEM
;

2874 
	`mem£t
(
iÂ
, 0, (
dhd_if_t
));

2875 
iÂ
->
evít2cfg80211
 = 
FALSE
;

2876 
iÂ
->
öfo
 = 
dhd
;

2877 
dhd
->
iÊi°
[
ifidx
] = 
iÂ
;

2878 
	`°∫˝y
(
iÂ
->
«me
,Çame, 
IFNAMSIZ
);

2879 
iÂ
->
«me
[
IFNAMSIZ
] = '\0';

2880 i‡(
mac_addr
 !
NULL
)

2881 
	`mem˝y
(&
iÂ
->
mac_addr
, mac_addr, 
ETHER_ADDR_LEN
);

2883 i‡(
h™dÀ
 =
NULL
) {

2884 
iÂ
->
°©e
 = 
DHD_IF_ADD
;

2885 
iÂ
->
idx
 = 
ifidx
;

2886 
iÂ
->
bssidx
 = bssidx;

2887 
	`ASSERT
(
dhd
->
thr_sysioc_˘l
.
thr_pid
 >= 0);

2888 
	`up
(&
dhd
->
thr_sysioc_˘l
.
£ma
);

2890 
iÂ
->
√t
 = (
√t_devi˚
 *)
h™dÀ
;

2892 i‡(
ifidx
 == 0) {

2893 
iÂ
->
evít2cfg80211
 = 
TRUE
;

2897 
	}
}

2900 
	$dhd_dñ_if
(
dhd_öfo_t
 *
dhd
, 
ifidx
)

2902 
dhd_if_t
 *
iÂ
;

2904 
	`DHD_TRACE
(("%s: idx %d\n", 
__FUNCTION__
, 
ifidx
));

2906 
	`ASSERT
(
dhd
 && 
ifidx
 && (ifidx < 
DHD_MAX_IFS
));

2907 
iÂ
 = 
dhd
->
iÊi°
[
ifidx
];

2908 i‡(!
iÂ
) {

2909 
	`DHD_ERROR
(("%s: NuŒ i¡îÁ˚\n", 
__FUNCTION__
));

2913 
iÂ
->
°©e
 = 
DHD_IF_DEL
;

2914 
iÂ
->
idx
 = 
ifidx
;

2915 
	`ASSERT
(
dhd
->
thr_sysioc_˘l
.
thr_pid
 >= 0);

2916 
	`up
(&
dhd
->
thr_sysioc_˘l
.
£ma
);

2917 
	}
}

2919 #i‡(
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 31))

2920 
√t_devi˚_›s
 
	gdhd_›s_¥i
 = {

2921 .
ndo_›í
 = 
dhd_›í
,

2922 .
	gndo_°›
 = 
dhd_°›
,

2923 .
	gndo_gë_°©s
 = 
dhd_gë_°©s
,

2924 .
	gndo_do_io˘l
 = 
dhd_io˘l_íåy
,

2925 .
	gndo_°¨t_xmô
 = 
dhd_°¨t_xmô
,

2926 .
	gndo_£t_mac_addªss
 = 
dhd_£t_mac_addªss
,

2927 #i‡(
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(3, 2, 0))

2928 .
	gndo_£t_rx_mode
 = 
dhd_£t_mu…iˇ°_li°
,

2930 .
	gndo_£t_mu…iˇ°_li°
 = 
dhd_£t_mu…iˇ°_li°
,

2934 
√t_devi˚_›s
 
	gdhd_›s_vút
 = {

2935 .
ndo_gë_°©s
 = 
dhd_gë_°©s
,

2936 .
	gndo_do_io˘l
 = 
dhd_io˘l_íåy
,

2937 .
	gndo_°¨t_xmô
 = 
dhd_°¨t_xmô
,

2938 .
	gndo_£t_mac_addªss
 = 
dhd_£t_mac_addªss
,

2939 #i‡(
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(3, 2, 0))

2940 .
	gndo_£t_rx_mode
 = 
dhd_£t_mu…iˇ°_li°
,

2942 .
	gndo_£t_mu…iˇ°_li°
 = 
dhd_£t_mu…iˇ°_li°
,

2947 
dhd_pub_t
 *

2948 
	$dhd_©èch
(
o¶_t
 *
osh
, 
dhd_bus
 *
bus
, 
uöt
 
bus_hdæí
)

2950 
dhd_öfo_t
 *
dhd
 = 
NULL
;

2951 
√t_devi˚
 *
√t
 = 
NULL
;

2953 
dhd_©èch_°©es_t
 
dhd_°©e
 = 
DHD_ATTACH_STATE_INIT
;

2954 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

2957 i‡(
	`°æí
(
fúmw¨e_∑th
) != 0) {

2958 
	`°∫˝y
(
fw_∑th
, 
fúmw¨e_∑th
, (fw_path) - 1);

2959 
fw_∑th
[(fw_path) - 1] = '\0';

2961 i‡(
	`°æí
(
nvøm_∑th
) != 0) {

2962 
	`°∫˝y
(
nv_∑th
, 
nvøm_∑th
, (nv_path) -1);

2963 
nv_∑th
[(nv_path) -1] = '\0';

2967 i‡(!(
√t
 = 
	`Æloc_ëhîdev
((
dhd
)))) {

2968 
	`DHD_ERROR
(("%s: OOM -áŒoc_ëhîdev\n", 
__FUNCTION__
));

2969 
Áû
;

2971 
dhd_°©e
 |
DHD_ATTACH_STATE_NET_ALLOC
;

2974 i‡(!(
dhd
 = 
	`MALLOC
(
osh
, (
dhd_öfo_t
)))) {

2975 
	`DHD_ERROR
(("%s: OOM -áŒo¯dhd_öfo\n", 
__FUNCTION__
));

2976 
Áû
;

2978 
	`mem£t
(
dhd
, 0, (
dhd_öfo_t
));

2980 #ifde‡
DHDTHREAD


2981 
dhd
->
thr_dpc_˘l
.
thr_pid
 = 
DHD_PID_KT_TL_INVALID
;

2982 
dhd
->
thr_wdt_˘l
.
thr_pid
 = 
DHD_PID_KT_INVALID
;

2984 
dhd
->
dhd_èskÀt_¸óã
 = 
FALSE
;

2985 
dhd
->
thr_sysioc_˘l
.
thr_pid
 = 
DHD_PID_KT_INVALID
;

2986 
dhd_°©e
 |
DHD_ATTACH_STATE_DHD_ALLOC
;

2991 
	`mem˝y
((*)
	`√tdev_¥iv
(
√t
), &
dhd
, (dhd));

2992 
dhd
->
pub
.
osh
 = osh;

2995 
dhd
->
pub
.
öfo
 = dhd;

2997 
dhd
->
pub
.
bus
 = bus;

2998 
dhd
->
pub
.
hdæí
 = 
bus_hdæí
;

3001 i‡(
iÁ˚_«me
[0]) {

3002 
Àn
;

3003 
ch
;

3004 
	`°∫˝y
(
√t
->
«me
, 
iÁ˚_«me
, 
IFNAMSIZ
);

3005 
√t
->
«me
[
IFNAMSIZ
 - 1] = 0;

3006 
Àn
 = 
	`°æí
(
√t
->
«me
);

3007 
ch
 = 
√t
->
«me
[
Àn
 - 1];

3008 i‡((
ch
 > '9' || ch < '0'Ë&& (
Àn
 < 
IFNAMSIZ
 - 2))

3009 
	`°rˇt
(
√t
->
«me
, "%d");

3012 i‡(
	`dhd_add_if
(
dhd
, 0, (*)
√t
,Çë->
«me
, 
NULL
, 0, 0Ë=
DHD_BAD_IF
)

3013 
Áû
;

3014 
dhd_°©e
 |
DHD_ATTACH_STATE_ADD_IF
;

3016 #i‡(
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2, 6, 31))

3017 
√t
->
›í
 = 
NULL
;

3019 
√t
->
√tdev_›s
 = 
NULL
;

3022 
	`£ma_öô
(&
dhd
->
¥Ÿo_£m
, 1);

3024 #ifde‡
PROP_TXSTATUS


3025 
	`•ö_lock_öô
(&
dhd
->
wlfc_•ölock
);

3026 #ifde‡
PROP_TXSTATUS_VSDB


3027 
dhd
->
pub
.
wlfc_íabÀd
 = 
FALSE
;

3029 
dhd
->
pub
.
wlfc_íabÀd
 = 
TRUE
;

3034 
	`öô_waôqueue_hód
(&
dhd
->
io˘l_ª•_waô
);

3035 
	`öô_waôqueue_hód
(&
dhd
->
˘æ_waô
);

3038 
	`•ö_lock_öô
(&
dhd
->
sdlock
);

3039 
	`•ö_lock_öô
(&
dhd
->
txqlock
);

3040 
	`•ö_lock_öô
(&
dhd
->
dhd_lock
);

3043 
	`•ö_lock_öô
(&
dhd
->
wakñock_•ölock
);

3044 
dhd
->
wakñock_cou¡î
 = 0;

3045 
dhd
->
wakñock_wd_cou¡î
 = 0;

3046 
dhd
->
wakñock_rx_timeout_íabÀ
 = 0;

3047 
dhd
->
wakñock_˘æ_timeout_íabÀ
 = 0;

3048 #ifde‡
CONFIG_HAS_WAKELOCK


3049 
dhd
->
wl_wifi
 = 
	`MALLOC
(
osh
, (
wake_lock
));

3050 
dhd
->
wl_rxwake
 = 
	`MALLOC
(
osh
, (
wake_lock
));

3051 
dhd
->
wl_˘æwake
 = 
	`MALLOC
(
osh
, (
wake_lock
));

3052 
dhd
->
wl_wdwake
 = 
	`MALLOC
(
osh
, (
wake_lock
));

3053 i‡(!
dhd
->
wl_wifi
 || !dhd->
wl_rxwake
 || !dhd->
wl_˘æwake
 || !dhd->
wl_wdwake
) {

3054 
	`DHD_ERROR
(("%s: memáŒo¯f‹ wakêlock faûed\n", 
__FUNCTION__
));

3055 
Áû
;

3057 
	`wake_lock_öô
(
dhd
->
wl_wifi
, 
WAKE_LOCK_SUSPEND
, "wlan_wake");

3058 
	`wake_lock_öô
(
dhd
->
wl_rxwake
, 
WAKE_LOCK_SUSPEND
, "wlan_rx_wake");

3059 
	`wake_lock_öô
(
dhd
->
wl_˘æwake
, 
WAKE_LOCK_SUSPEND
, "wlan_ctrl_wake");

3060 
	`wake_lock_öô
(
dhd
->
wl_wdwake
, 
WAKE_LOCK_SUSPEND
, "wlan_wd_wake");

3062 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 25)) && 1

3063 
	`muãx_öô
(&
dhd
->
dhd_√t_if_muãx
);

3064 
	`muãx_öô
(&
dhd
->
dhd_su•íd_muãx
);

3066 
dhd_°©e
 |
DHD_ATTACH_STATE_WAKELOCKS_INIT
;

3069 i‡(
	`dhd_¥Ÿ_©èch
(&
dhd
->
pub
) != 0) {

3070 
	`DHD_ERROR
(("dhd_prot_attach failed\n"));

3071 
Áû
;

3073 
dhd_°©e
 |
DHD_ATTACH_STATE_PROT_ATTACH
;

3075 #ifde‡
WL_CFG80211


3077 i‡(
	`u∆ikñy
(
	`wl_cfg80211_©èch
(
√t
, &
dhd
->
pub
))) {

3078 
	`DHD_ERROR
(("wl_cfg80211_attach failed\n"));

3079 
Áû
;

3082 
	`dhd_m⁄ô‹_öô
(&
dhd
->
pub
);

3083 
dhd_°©e
 |
DHD_ATTACH_STATE_CFG80211
;

3085 #i‡
	`deföed
(
CONFIG_WIRELESS_EXT
)

3087 i‡(!(
dhd_°©e
 & 
DHD_ATTACH_STATE_CFG80211
)) {

3088 i‡(
	`wl_iw_©èch
(
√t
, (*)&
dhd
->
pub
) != 0) {

3089 
	`DHD_ERROR
(("wl_iw_attach failed\n"));

3090 
Áû
;

3092 
dhd_°©e
 |
DHD_ATTACH_STATE_WL_ATTACH
;

3098 
	`öô_timî
(&
dhd
->
timî
);

3099 
dhd
->
timî
.
d©a
 = (
ul⁄g
)dhd;

3100 
dhd
->
timî
.
fun˘i⁄
 = 
dhd_w©chdog
;

3102 #ifde‡
DHDTHREAD


3104 
	`£ma_öô
(&
dhd
->
sd£m
, 1);

3105 i‡((
dhd_w©chdog_¥io
 >0Ë&& (
dhd_dpc_¥io
 >= 0)) {

3106 
dhd
->
thªads_⁄ly
 = 
TRUE
;

3109 
dhd
->
thªads_⁄ly
 = 
FALSE
;

3112 i‡(
dhd_w©chdog_¥io
 >= 0) {

3114 #ifde‡
USE_KTHREAD_API


3115 
	`PROC_START2
(
dhd_w©chdog_thªad
, 
dhd
, &dhd->
thr_wdt_˘l
, 0, "dhd_watchdog_thread");

3117 
	`PROC_START
(
dhd_w©chdog_thªad
, 
dhd
, &dhd->
thr_wdt_˘l
, 0);

3120 
dhd
->
thr_wdt_˘l
.
thr_pid
 = -1;

3124 i‡(
dhd_dpc_¥io
 >= 0) {

3126 #ifde‡
USE_KTHREAD_API


3127 
	`PROC_START2
(
dhd_dpc_thªad
, 
dhd
, &dhd->
thr_dpc_˘l
, 0, "dhd_dpc");

3129 
	`PROC_START
(
dhd_dpc_thªad
, 
dhd
, &dhd->
thr_dpc_˘l
, 0);

3133 
	`èskÀt_öô
(&
dhd
->
èskÀt
, 
dhd_dpc
, (
ul⁄g
)dhd);

3134 
dhd
->
thr_dpc_˘l
.
thr_pid
 = -1;

3138 
	`èskÀt_öô
(&
dhd
->
èskÀt
, 
dhd_dpc
, (
ul⁄g
)dhd);

3139 
dhd
->
dhd_èskÀt_¸óã
 = 
TRUE
;

3142 i‡(
dhd_sysioc
) {

3143 #ifde‡
USE_KTHREAD_API


3144 
	`PROC_START2
(
_dhd_sysioc_thªad
, 
dhd
, &dhd->
thr_sysioc_˘l
, 0, "dhd_sysioc");

3146 
	`PROC_START
(
_dhd_sysioc_thªad
, 
dhd
, &dhd->
thr_sysioc_˘l
, 0);

3149 
dhd
->
thr_sysioc_˘l
.
thr_pid
 = -1;

3151 
dhd_°©e
 |
DHD_ATTACH_STATE_THREADS_CREATED
;

3152 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27)) && (1)

3153 
	`INIT_WORK
(&
dhd
->
w‹k_h™g
, 
dhd_h™g_¥o˚ss
);

3158 
	`mem˝y
(
	`√tdev_¥iv
(
√t
), &
dhd
, (dhd));

3160 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27)Ë&& 
	`deföed
(
CONFIG_PM_SLEEP
)

3161 
	`ªgi°î_pm_nŸifõr
(&
dhd_¶ìp_pm_nŸifõr
);

3164 #i‡
	`deföed
(
CONFIG_HAS_EARLYSUSPEND
Ë&& deföed(
DHD_USE_EARLYSUSPEND
)

3165 
dhd
->
óæy_su•íd
.
Àvñ
 = 
EARLY_SUSPEND_LEVEL_BLANK_SCREEN
 + 20;

3166 
dhd
->
óæy_su•íd
.
su•íd
 = 
dhd_óæy_su•íd
;

3167 
dhd
->
óæy_su•íd
.
ªsume
 = 
dhd_œã_ªsume
;

3168 
	`ªgi°î_óæy_su•íd
(&
dhd
->
óæy_su•íd
);

3169 
dhd_°©e
 |
DHD_ATTACH_STATE_EARLYSUSPEND_DONE
;

3172 #ifde‡
ARP_OFFLOAD_SUPPORT


3173 
dhd
->
≥nd_ùaddr
 = 0;

3174 
	`ªgi°î_öëaddr_nŸifõr
(&
dhd_nŸifõr
);

3177 
dhd_°©e
 |
DHD_ATTACH_STATE_DONE
;

3178 
dhd
->
dhd_°©e
 = dhd_state;

3179  &
dhd
->
pub
;

3181 
Áû
:

3182 i‡(
dhd_°©e
 < 
DHD_ATTACH_STATE_DHD_ALLOC
) {

3183 i‡(
√t
Ë
	`‰ì_√tdev
(net);

3185 
	`DHD_TRACE
(("%s: Calling dhd_detach dhd_state 0x%x &dhd->pub %p\n",

3186 
__FUNCTION__
, 
dhd_°©e
, &
dhd
->
pub
));

3187 
dhd
->
dhd_°©e
 = dhd_state;

3188 
	`dhd_dëach
(&
dhd
->
pub
);

3189 
	`dhd_‰ì
(&
dhd
->
pub
);

3192  
NULL
;

3193 
	}
}

3196 
	$dhd_bus_°¨t
(
dhd_pub_t
 *
dhdp
)

3198 
ªt
 = -1;

3199 
dhd_öfo_t
 *
dhd
 = (dhd_öfo_t*)
dhdp
->
öfo
;

3200 
Êags
;

3202 
	`ASSERT
(
dhd
);

3204 
	`DHD_TRACE
(("E¡î %s:\n", 
__FUNCTION__
));

3206 #ifde‡
DHDTHREAD


3207 i‡(
dhd
->
thªads_⁄ly
)

3208 
	`dhd_os_sdlock
(
dhdp
);

3213 i‡((
dhd
->
pub
.
bus°©e
 =
DHD_BUS_DOWN
) &&

3214 (
fw_∑th
 !
NULL
) && (fw_path[0] != '\0') &&

3215 (
nv_∑th
 !
NULL
) && (nv_path[0] != '\0')) {

3217 i‡(!(
	`dhd_bus_dow∆ﬂd_fúmw¨e
(
dhd
->
pub
.
bus
, dhd->pub.
osh
,

3218 
fw_∑th
, 
nv_∑th
))) {

3219 
	`DHD_ERROR
(("%s: dhdsdio_probe_download failed. firmware = %sÇvram = %s\n",

3220 
__FUNCTION__
, 
fw_∑th
, 
nv_∑th
));

3221 #ifde‡
DHDTHREAD


3222 i‡(
dhd
->
thªads_⁄ly
)

3223 
	`dhd_os_sdu∆ock
(
dhdp
);

3228 i‡(
dhd
->
pub
.
bus°©e
 !
DHD_BUS_LOAD
) {

3229 #ifde‡
DHDTHREAD


3230 i‡(
dhd
->
thªads_⁄ly
)

3231 
	`dhd_os_sdu∆ock
(
dhdp
);

3233  -
ENETDOWN
;

3237 
dhd
->
pub
.
tick˙t
 = 0;

3238 
	`dhd_os_wd_timî
(&
dhd
->
pub
, 
dhd_w©chdog_ms
);

3241 i‡((
ªt
 = 
	`dhd_bus_öô
(&
dhd
->
pub
, 
FALSE
)) != 0) {

3243 
	`DHD_ERROR
(("%s, dhd_bus_öô faûed %d\n", 
__FUNCTION__
, 
ªt
));

3244 #ifde‡
DHDTHREAD


3245 i‡(
dhd
->
thªads_⁄ly
)

3246 
	`dhd_os_sdu∆ock
(
dhdp
);

3248  
ªt
;

3250 #i‡
	`deföed
(
OOB_INTR_ONLY
)

3252 i‡(
	`bcmsdh_ªgi°î_oob_öå
(
dhdp
)) {

3255 
Êags
 = 
	`dhd_os_•ö_lock
(&
dhd
->
pub
);

3256 
dhd
->
wd_timî_vÆid
 = 
FALSE
;

3257 
	`dhd_os_•ö_u∆ock
(&
dhd
->
pub
, 
Êags
);

3258 
	`dñ_timî_sync
(&
dhd
->
timî
);

3260 
	`DHD_ERROR
(("%†Ho° faûedÅÿªgi°î f‹ OOB\n", 
__FUNCTION__
));

3261 #ifde‡
DHDTHREAD


3262 i‡(
dhd
->
thªads_⁄ly
)

3263 
	`dhd_os_sdu∆ock
(
dhdp
);

3265 
	`DHD_OS_WD_WAKE_UNLOCK
(&
dhd
->
pub
);

3266  -
ENODEV
;

3270 
	`dhd_íabÀ_oob_öå
(
dhd
->
pub
.
bus
, 
TRUE
);

3274 i‡(
dhd
->
pub
.
bus°©e
 !
DHD_BUS_DATA
) {

3275 
Êags
 = 
	`dhd_os_•ö_lock
(&
dhd
->
pub
);

3276 
dhd
->
wd_timî_vÆid
 = 
FALSE
;

3277 
	`dhd_os_•ö_u∆ock
(&
dhd
->
pub
, 
Êags
);

3278 
	`dñ_timî_sync
(&
dhd
->
timî
);

3279 
	`DHD_ERROR
(("%†Áûed bu†i†nŸÑódy\n", 
__FUNCTION__
));

3280 #ifde‡
DHDTHREAD


3281 i‡(
dhd
->
thªads_⁄ly
)

3282 
	`dhd_os_sdu∆ock
(
dhdp
);

3284 
	`DHD_OS_WD_WAKE_UNLOCK
(&
dhd
->
pub
);

3285  -
ENODEV
;

3288 #ifde‡
DHDTHREAD


3289 i‡(
dhd
->
thªads_⁄ly
)

3290 
	`dhd_os_sdu∆ock
(
dhdp
);

3293 #ifde‡
BCMSDIOH_TXGLOM


3294 i‡((
dhd
->
pub
.
bus°©e
 =
DHD_BUS_DATA
Ë&& 
	`bcmsdh_glom_íabÀd
()) {

3295 
	`dhd_txglom_íabÀ
(
dhdp
, 
TRUE
);

3299 #ifde‡
READ_MACADDR


3300 
	`dhd_ªad_maˇddr
(
dhd
);

3304 i‡((
ªt
 = 
	`dhd_¥Ÿ_öô
(&
dhd
->
pub
)) < 0)

3305  
ªt
;

3307 #ifde‡
WRITE_MACADDR


3308 
	`dhd_wrôe_maˇddr
(
dhd
->
pub
.
mac
.
o˘ë
);

3311 #ifde‡
ARP_OFFLOAD_SUPPORT


3312 i‡(
dhd
->
≥nd_ùaddr
) {

3313 #ifde‡
AOE_IP_ALIAS_SUPPORT


3314 
	`a€_upd©e_ho°_ùv4_èbÀ
(&
dhd
->
pub
, dhd->
≥nd_ùaddr
, 
TRUE
, 0);

3316 
dhd
->
≥nd_ùaddr
 = 0;

3321 
	}
}

3323 
boﬁ
 
	$dhd_is_c⁄cuºít_mode
(
dhd_pub_t
 *
dhd
)

3325 i‡(!
dhd
)

3326  
FALSE
;

3328 i‡(
dhd
->
›_mode
 & 
DHD_FLAG_CONCURR_MULTI_CHAN_MODE
)

3329  
TRUE
;

3330 i‡((
dhd
->
›_mode
 & 
DHD_FLAG_CONCURR_SINGLE_CHAN_MODE
) ==

3331 
DHD_FLAG_CONCURR_SINGLE_CHAN_MODE
)

3332  
TRUE
;

3334  
FALSE
;

3335 
	}
}

3337 #i‡!
deföed
(
AP
Ë&& deföed(
WLP2P
)

3343 
uöt32


3344 
	$dhd_gë_c⁄cuºít_ˇ∑bûôes
(
dhd_pub_t
 *
dhd
)

3346 
öt32
 
ªt
 = 0;

3347 
buf
[
WLC_IOCTL_SMLEN
];

3348 
boﬁ
 
mch™_suµ‹ãd
 = 
FALSE
;

3352 i‡(
dhd
->
›_mode
 & 
DHD_FLAG_HOSTAP_MODE
)

3354 
	`mem£t
(
buf
, 0, (buf));

3355 
	`bcm_mkiov¨
("ˇp", 0, 0, 
buf
, (buf));

3356 i‡((
ªt
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_GET_VAR
, 
buf
, (buf),

3357 
FALSE
, 0)) < 0) {

3358 
	`DHD_ERROR
(("%s: Get Capability failed (error=%d)\n",

3359 
__FUNCTION__
, 
ªt
));

3362 i‡(
	`°r°r
(
buf
, "vsdb")) {

3363 
mch™_suµ‹ãd
 = 
TRUE
;

3365 i‡(
	`°r°r
(
buf
, "p2p"Ë=
NULL
) {

3366 
	`DHD_TRACE
(("Chip doesÇot supportÖ2p\n"));

3371 
	`mem£t
(
buf
, 0, (buf));

3372 
	`bcm_mkiov¨
("p2p", 0, 0, 
buf
, (buf));

3373 i‡((
ªt
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_GET_VAR
, 
buf
, (buf),

3374 
FALSE
, 0)) < 0) {

3375 
	`DHD_ERROR
(("%s: Gë P2P faûed (îr‹=%d)\n", 
__FUNCTION__
, 
ªt
));

3379 i‡(
buf
[0] == 1) {

3383 
ªt
 = 
DHD_FLAG_CONCURR_SINGLE_CHAN_MODE
;

3384 i‡(
mch™_suµ‹ãd
)

3385 
ªt
 |
DHD_FLAG_CONCURR_MULTI_CHAN_MODE
;

3386 #i‡
	`deföed
(
WL_ENABLE_P2P_IF
)

3390  
ªt
;

3398 
	}
}

3401 
	$dhd_¥eöô_io˘ls
(
dhd_pub_t
 *
dhd
)

3403 
ªt
 = 0;

3404 
evítmask
[
WL_EVENTING_MASK_LEN
];

3405 
iovbuf
[
WL_EVENTING_MASK_LEN
 + 12];

3407 #i‡!
	`deföed
(
WL_CFG80211
)

3408 
uöt
 
up
 = 0;

3410 
uöt
 
powî_mode
 = 
PM_FAST
;

3411 
uöt32
 
d⁄gÀ_Æign
 = 
DHD_SDALIGN
;

3412 
uöt32
 
glom
 = 
CUSTOM_GLOM_SETTING
;

3413 #i‡
	`deföed
(
VSDB
Ë|| deföed(
ROAM_ENABLE
)

3414 
uöt
 
b˙_timeout
 = 8;

3416 
uöt
 
b˙_timeout
 = 4;

3418 #ifde‡
ENABLE_BCN_LI_BCN_WAKEUP


3419 
uöt32
 
b˙_li_b˙
 = 1;

3421 
uöt
 
ªåy_max
 = 3;

3422 #i‡
	`deföed
(
ARP_OFFLOAD_SUPPORT
)

3423 
¨p€
 = 1;

3425 
sˇn_assoc_time
 = 
DHD_SCAN_ASSOC_ACTIVE_TIME
;

3426 
sˇn_u«ssoc_time
 = 
DHD_SCAN_UNASSOC_ACTIVE_TIME
;

3427 
sˇn_∑ssive_time
 = 
DHD_SCAN_PASSIVE_TIME
;

3428 
buf
[
WLC_IOCTL_SMLEN
];

3429 *
±r
;

3430 
uöt32
 
li°í_öãrvÆ
 = 
LISTEN_INTERVAL
;

3431 #ifde‡
ROAM_ENABLE


3432 
uöt
 
rﬂmv¨
 = 0;

3433 
rﬂm_åiggî
[2] = {
CUSTOM_ROAM_TRIGGER_SETTING
, 
WLC_BAND_ALL
};

3434 
rﬂm_sˇn_≥riod
[2] = {10, 
WLC_BAND_ALL
};

3435 
rﬂm_dñè
[2] = {
CUSTOM_ROAM_DELTA_SETTING
, 
WLC_BAND_ALL
};

3436 #ifde‡
FULL_ROAMING_SCAN_PERIOD_60_SEC


3437 
rﬂm_fuŒsˇn_≥riod
 = 60;

3439 
rﬂm_fuŒsˇn_≥riod
 = 120;

3442 #ifde‡
DISABLE_BUILTIN_ROAM


3443 
uöt
 
rﬂmv¨
 = 1;

3447 #i‡
	`deföed
(
SOFTAP
)

3448 
uöt
 
dtim
 = 1;

3450 #i‡(
	`deföed
(
AP
Ë&& !deföed(
WLP2P
)Ë|| (!deföed(APË&& deföed(
WL_CFG80211
))

3451 
uöt32
 
mpc
 = 0;

3452 
ëhî_addr
 
p2p_ó
;

3455 #i‡
	`deföed
(
AP
Ë|| deföed(
WLP2P
)

3456 
uöt32
 
≠°a
 = 1;

3458 #ifde‡
GET_CUSTOM_MAC_ENABLE


3459 
ëhî_addr
 
ó_addr
;

3461 #ifde‡
DISABLE_11N


3462 
uöt32
 
nmode
 = 0;

3464 #ifde‡
AMPDU_HOSTREORDER


3465 
uöt32
 
ho°ª‹dî
 = 1;

3468 
dhd
->
su•íd_b˙_li_dtim
 = 
CUSTOM_SUSPEND_BCN_LI_DTIM
;

3469 #ifde‡
PROP_TXSTATUS


3470 #ifde‡
PROP_TXSTATUS_VSDB


3471 
dhd
->
wlfc_íabÀd
 = 
FALSE
;

3474 
dhd
->
wlfc_íabÀd
 = 
TRUE
;

3477 
	`DHD_TRACE
(("E¡î %s\n", 
__FUNCTION__
));

3478 
dhd
->
›_mode
 = 0;

3479 #ifde‡
GET_CUSTOM_MAC_ENABLE


3480 
ªt
 = 
	`dhd_cu°om_gë_mac_addªss
(
ó_addr
.
o˘ë
);

3481 i‡(!
ªt
) {

3482 
	`mem£t
(
buf
, 0, (buf));

3483 
	`bcm_mkiov¨
("cur_ëhîaddr", (*)&
ó_addr
, 
ETHER_ADDR_LEN
, 
buf
, (buf));

3484 
ªt
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
buf
, (buf), 
TRUE
, 0);

3485 i‡(
ªt
 < 0) {

3486 
	`DHD_ERROR
(("%s: c™'à£àMACáddªs†,Éº‹=%d\n", 
__FUNCTION__
, 
ªt
));

3487  
BCME_NOTUP
;

3489 
	`mem˝y
(
dhd
->
mac
.
o˘ë
, 
ó_addr
.o˘ë, 
ETHER_ADDR_LEN
);

3493 
	`mem£t
(
buf
, 0, (buf));

3494 
	`bcm_mkiov¨
("cur_ëhîaddr", 0, 0, 
buf
, (buf));

3495 i‡((
ªt
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_GET_VAR
, 
buf
, (buf),

3496 
FALSE
, 0)) < 0) {

3497 
	`DHD_ERROR
(("%s: c™'àgë MACáddªs†,Éº‹=%d\n", 
__FUNCTION__
, 
ªt
));

3498  
BCME_NOTUP
;

3501 
	`mem˝y
(
dhd
->
mac
.
o˘ë
, 
buf
, 
ETHER_ADDR_LEN
);

3503 #ifde‡
GET_CUSTOM_MAC_ENABLE


3507 
	`DHD_TRACE
(("Fúmw¨ê%s\n", 
fw_∑th
));

3509 i‡((!
›_mode
 && 
	`°r°r
(
fw_∑th
, "_≠°a"Ë!
NULL
) ||

3510 (
›_mode
 =
DHD_FLAG_HOSTAP_MODE
)) {

3511 #ifde‡
SET_RANDOM_MAC_SOFTAP


3512 
uöt
 
ønd_mac
;

3514 
dhd
->
›_mode
 = 
DHD_FLAG_HOSTAP_MODE
;

3515 #i‡
	`deföed
(
ARP_OFFLOAD_SUPPORT
)

3516 
¨p€
 = 0;

3518 #ifde‡
PKT_FILTER_SUPPORT


3519 
dhd_pkt_fûãr_íabÀ
 = 
FALSE
;

3521 #ifde‡
SET_RANDOM_MAC_SOFTAP


3522 
	`§™dom32
((
uöt
)
jiffõs
);

3523 
ønd_mac
 = 
	`øndom32
();

3524 
iovbuf
[0] = 0x02;

3525 
iovbuf
[1] = 0x1A;

3526 
iovbuf
[2] = 0x11;

3527 
iovbuf
[3] = ()(
ønd_mac
 & 0x0F) | 0xF0;

3528 
iovbuf
[4] = ()(
ønd_mac
 >> 8);

3529 
iovbuf
[5] = ()(
ønd_mac
 >> 16);

3531 
	`bcm_mkiov¨
("cur_ëhîaddr", (*)
iovbuf
, 
ETHER_ADDR_LEN
, 
buf
, (buf));

3532 
ªt
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
buf
, (buf), 
TRUE
, 0);

3533 i‡(
ªt
 < 0) {

3534 
	`DHD_ERROR
(("%s: c™'à£àMACáddªs†,Éº‹=%d\n", 
__FUNCTION__
, 
ªt
));

3536 
	`mem˝y
(
dhd
->
mac
.
o˘ë
, 
iovbuf
, 
ETHER_ADDR_LEN
);

3538 #i‡!
	`deföed
(
AP
Ë&& deföed(
WL_CFG80211
)

3540 
	`bcm_mkiov¨
("mpc", (*)&
mpc
, 4, 
iovbuf
, (iovbuf));

3541 i‡((
ªt
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
,

3542 (
iovbuf
), 
TRUE
, 0)) < 0) {

3543 
	`DHD_ERROR
(("%†mp¯f‹ Ho°APD faûed %d\n", 
__FUNCTION__
, 
ªt
));

3549 
uöt32
 
c⁄cuºít_mode
 = 0;

3550 i‡((!
›_mode
 && 
	`°r°r
(
fw_∑th
, "_p2p"Ë!
NULL
) ||

3551 (
›_mode
 =
DHD_FLAG_P2P_MODE
)) {

3552 #i‡
	`deföed
(
ARP_OFFLOAD_SUPPORT
)

3553 
¨p€
 = 0;

3555 #ifde‡
PKT_FILTER_SUPPORT


3556 
dhd_pkt_fûãr_íabÀ
 = 
FALSE
;

3558 
dhd
->
›_mode
 = 
DHD_FLAG_P2P_MODE
;

3561 
dhd
->
›_mode
 = 
DHD_FLAG_STA_MODE
;

3562 #i‡!
	`deföed
(
AP
Ë&& deföed(
WLP2P
)

3563 i‡((
c⁄cuºít_mode
 = 
	`dhd_gë_c⁄cuºít_ˇ∑bûôes
(
dhd
))) {

3564 #i‡
	`deföed
(
ARP_OFFLOAD_SUPPORT
)

3565 
¨p€
 = 1;

3567 
dhd
->
›_mode
 |
c⁄cuºít_mode
;

3571 i‡(
dhd
->
›_mode
 & 
DHD_FLAG_P2P_MODE
) {

3572 
	`bcm_mkiov¨
("≠°a", (*)&
≠°a
, 4, 
iovbuf
, (iovbuf));

3573 i‡((
ªt
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
,

3574 
iovbuf
, (iovbuf), 
TRUE
, 0)) < 0) {

3575 
	`DHD_ERROR
(("%†APSTA f‹ P2P faûedÑë%d\n", 
__FUNCTION__
, 
ªt
));

3578 
	`mem˝y
(&
p2p_ó
, &
dhd
->
mac
, 
ETHER_ADDR_LEN
);

3579 
	`ETHER_SET_LOCALADDR
(&
p2p_ó
);

3580 
	`bcm_mkiov¨
("p2p_da_ovîride", (*)&
p2p_ó
,

3581 
ETHER_ADDR_LEN
, 
iovbuf
, (iovbuf));

3582 i‡((
ªt
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
,

3583 
iovbuf
, (iovbuf), 
TRUE
, 0)) < 0) {

3584 
	`DHD_ERROR
(("%†p2p_da_ovîridêªt%d\n", 
__FUNCTION__
, 
ªt
));

3586 
	`DHD_INFO
(("dhd_preinit_ioctls:Ö2p_da_override succeeded\n"));

3590 ()
c⁄cuºít_mode
;

3594 
	`DHD_ERROR
(("Firmware up: op_mode=0x%04x, "

3595 "Brﬂdcom D⁄gÀ Ho° Drivî mac="
MACDBG
"\n",

3596 
dhd
->
›_mode
,

3597 
	`MAC2STRDBG
(
dhd
->
mac
.
o˘ë
)));

3599 i‡(
dhd
->
dhd_c•ec
.
ccode
[0] != 0) {

3600 
	`bcm_mkiov¨
("cou¡ry", (*)&
dhd
->
dhd_c•ec
,

3601 (
wl_cou¡ry_t
), 
iovbuf
, (iovbuf));

3602 i‡((
ªt
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
, (iovbuf), 
TRUE
, 0)) < 0)

3603 
	`DHD_ERROR
(("%s: cou¡ry codê£âög faûed\n", 
__FUNCTION__
));

3607 
	`bcm_mkiov¨
("assoc_li°í", (*)&
li°í_öãrvÆ
, 4, 
iovbuf
, (iovbuf));

3608 i‡((
ªt
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
, (iovbuf), 
TRUE
, 0)) < 0)

3609 
	`DHD_ERROR
(("%†assoc_li°í faûed %d\n", 
__FUNCTION__
, 
ªt
));

3611 #i‡
	`deföed
(
ROAM_ENABLE
Ë|| deföed(
DISABLE_BUILTIN_ROAM
)

3613 
	`bcm_mkiov¨
("rﬂm_off", (*)&
rﬂmv¨
, 4, 
iovbuf
, (iovbuf));

3614 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
, (iovbuf), 
TRUE
, 0);

3616 #ifde‡
ROAM_ENABLE


3617 i‡((
ªt
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_ROAM_TRIGGER
, 
rﬂm_åiggî
,

3618 (
rﬂm_åiggî
), 
TRUE
, 0)) < 0)

3619 
	`DHD_ERROR
(("%s:ÑﬂmÅriggî së faûed %d\n", 
__FUNCTION__
, 
ªt
));

3620 i‡((
ªt
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_ROAM_SCAN_PERIOD
, 
rﬂm_sˇn_≥riod
,

3621 (
rﬂm_sˇn_≥riod
), 
TRUE
, 0)) < 0)

3622 
	`DHD_ERROR
(("%s:Ñﬂm sˇ¿≥riod së faûed %d\n", 
__FUNCTION__
, 
ªt
));

3623 i‡((
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_ROAM_DELTA
, 
rﬂm_dñè
,

3624 (
rﬂm_dñè
), 
TRUE
, 0)) < 0)

3625 
	`DHD_ERROR
(("%s:Ñﬂm dñè së faûed %d\n", 
__FUNCTION__
, 
ªt
));

3626 
	`bcm_mkiov¨
("fuŒrﬂm≥riod", (*)&
rﬂm_fuŒsˇn_≥riod
, 4, 
iovbuf
, (iovbuf));

3627 i‡((
ªt
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
, (iovbuf), 
TRUE
, 0)) < 0)

3628 
	`DHD_ERROR
(("%s:Ñﬂm fuŒsˇ¿≥riod së faûed %d\n", 
__FUNCTION__
, 
ªt
));

3633 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_PM
, (*)&
powî_mode
, ’owî_mode), 
TRUE
, 0);

3636 
	`bcm_mkiov¨
("bus:txglomÆign", (*)&
d⁄gÀ_Æign
, 4, 
iovbuf
, (iovbuf));

3637 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
, (iovbuf), 
TRUE
, 0);

3639 i‡(
glom
 !
DEFAULT_GLOM_VALUE
) {

3640 
	`DHD_INFO
(("%†£àglom=0x%X\n", 
__FUNCTION__
, 
glom
));

3641 
	`bcm_mkiov¨
("bus:txglom", (*)&
glom
, 4, 
iovbuf
, (iovbuf));

3642 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
, (iovbuf), 
TRUE
, 0);

3646 
	`bcm_mkiov¨
("b˙_timeout", (*)&
b˙_timeout
, 4, 
iovbuf
, (iovbuf));

3647 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
, (iovbuf), 
TRUE
, 0);

3649 
	`bcm_mkiov¨
("assoc_ªåy_max", (*)&
ªåy_max
, 4, 
iovbuf
, (iovbuf));

3650 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
, (iovbuf), 
TRUE
, 0);

3651 #i‡
	`deföed
(
AP
Ë&& !deföed(
WLP2P
)

3653 
	`bcm_mkiov¨
("mpc", (*)&
mpc
, 4, 
iovbuf
, (iovbuf));

3654 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
, (iovbuf), 
TRUE
, 0);

3655 
	`bcm_mkiov¨
("≠°a", (*)&
≠°a
, 4, 
iovbuf
, (iovbuf));

3656 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
, (iovbuf), 
TRUE
, 0);

3660 #i‡
	`deföed
(
SOFTAP
)

3661 i‡(
≠_fw_lﬂded
 =
TRUE
) {

3662 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_DTIMPRD
, (*)&
dtim
, (dtim), 
TRUE
, 0);

3666 #i‡
	`deföed
(
KEEP_ALIVE
)

3669 
ªs
;

3671 #i‡
	`deföed
(
SOFTAP
)

3672 i‡(
≠_fw_lﬂded
 =
FALSE
)

3674 i‡(!(
dhd
->
›_mode
 & 
DHD_FLAG_HOSTAP_MODE
)) {

3675 i‡((
ªs
 = 
	`dhd_kìp_Æive_⁄off
(
dhd
)) < 0)

3676 
	`DHD_ERROR
(("%s set keeplive failed %d\n",

3677 
__FUNCTION__
, 
ªs
));

3683 
	`bcm_mkiov¨
("evít_msgs", 
evítmask
, 
WL_EVENTING_MASK_LEN
, 
iovbuf
, (iovbuf));

3684 i‡((
ªt
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_GET_VAR
, 
iovbuf
, (iovbuf), 
FALSE
, 0)) < 0) {

3685 
	`DHD_ERROR
(("%†ªad Evíàmask faûed %d\n", 
__FUNCTION__
, 
ªt
));

3686 
d⁄e
;

3688 
	`bc›y
(
iovbuf
, 
evítmask
, 
WL_EVENTING_MASK_LEN
);

3691 
	`£tbô
(
evítmask
, 
WLC_E_SET_SSID
);

3692 
	`£tbô
(
evítmask
, 
WLC_E_PRUNE
);

3693 
	`£tbô
(
evítmask
, 
WLC_E_AUTH
);

3694 
	`£tbô
(
evítmask
, 
WLC_E_ASSOC
);

3695 
	`£tbô
(
evítmask
, 
WLC_E_REASSOC
);

3696 
	`£tbô
(
evítmask
, 
WLC_E_REASSOC_IND
);

3697 
	`£tbô
(
evítmask
, 
WLC_E_DEAUTH
);

3698 
	`£tbô
(
evítmask
, 
WLC_E_DEAUTH_IND
);

3699 
	`£tbô
(
evítmask
, 
WLC_E_DISASSOC_IND
);

3700 
	`£tbô
(
evítmask
, 
WLC_E_DISASSOC
);

3701 
	`£tbô
(
evítmask
, 
WLC_E_JOIN
);

3702 
	`£tbô
(
evítmask
, 
WLC_E_ASSOC_IND
);

3703 
	`£tbô
(
evítmask
, 
WLC_E_PSK_SUP
);

3704 
	`£tbô
(
evítmask
, 
WLC_E_LINK
);

3705 
	`£tbô
(
evítmask
, 
WLC_E_NDIS_LINK
);

3706 
	`£tbô
(
evítmask
, 
WLC_E_MIC_ERROR
);

3707 
	`£tbô
(
evítmask
, 
WLC_E_ASSOC_REQ_IE
);

3708 
	`£tbô
(
evítmask
, 
WLC_E_ASSOC_RESP_IE
);

3709 #i‚de‡
WL_CFG80211


3710 
	`£tbô
(
evítmask
, 
WLC_E_PMKID_CACHE
);

3711 
	`£tbô
(
evítmask
, 
WLC_E_TXFAIL
);

3713 
	`£tbô
(
evítmask
, 
WLC_E_JOIN_START
);

3714 
	`£tbô
(
evítmask
, 
WLC_E_SCAN_COMPLETE
);

3715 #ifde‡
WLMEDIA_HTSF


3716 
	`£tbô
(
evítmask
, 
WLC_E_HTSFSYNC
);

3718 #ifde‡
PNO_SUPPORT


3719 
	`£tbô
(
evítmask
, 
WLC_E_PFN_NET_FOUND
);

3722 
	`£tbô
(
evítmask
, 
WLC_E_ROAM
);

3723 #ifde‡
WL_CFG80211


3724 
	`£tbô
(
evítmask
, 
WLC_E_ESCAN_RESULT
);

3725 i‡(
dhd
->
›_mode
 & 
DHD_FLAG_P2P_MODE
) {

3726 
	`£tbô
(
evítmask
, 
WLC_E_ACTION_FRAME_RX
);

3727 
	`£tbô
(
evítmask
, 
WLC_E_P2P_DISC_LISTEN_COMPLETE
);

3732 
	`bcm_mkiov¨
("evít_msgs", 
evítmask
, 
WL_EVENTING_MASK_LEN
, 
iovbuf
, (iovbuf));

3733 i‡((
ªt
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
, (iovbuf), 
TRUE
, 0)) < 0) {

3734 
	`DHD_ERROR
(("%†Së Evíàmask faûed %d\n", 
__FUNCTION__
, 
ªt
));

3735 
d⁄e
;

3738 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_SCAN_CHANNEL_TIME
, (*)&
sˇn_assoc_time
,

3739 (
sˇn_assoc_time
), 
TRUE
, 0);

3740 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_SCAN_UNASSOC_TIME
, (*)&
sˇn_u«ssoc_time
,

3741 (
sˇn_u«ssoc_time
), 
TRUE
, 0);

3742 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_SCAN_PASSIVE_TIME
, (*)&
sˇn_∑ssive_time
,

3743 (
sˇn_∑ssive_time
), 
TRUE
, 0);

3745 #ifde‡
ARP_OFFLOAD_SUPPORT


3747 #i‡
	`deföed
(
SOFTAP
)

3748 i‡(
¨p€
 && !
≠_fw_lﬂded
) {

3750 i‡(
¨p€
) {

3752 
	`dhd_¨p_ofÊﬂd_íabÀ
(
dhd
, 
TRUE
);

3753 
	`dhd_¨p_ofÊﬂd_£t
(
dhd
, 
dhd_¨p_mode
);

3755 
	`dhd_¨p_ofÊﬂd_íabÀ
(
dhd
, 
FALSE
);

3756 
	`dhd_¨p_ofÊﬂd_£t
(
dhd
, 0);

3758 
dhd_¨p_íabÀ
 = 
¨p€
;

3761 #ifde‡
PKT_FILTER_SUPPORT


3763 
dhd
->
pktfûãr_cou¡
 = 5;

3765 
dhd
->
pktfûãr
[0] = "100 0 0 0 0x01 0x00";

3766 
dhd
->
pktfûãr
[1] = 
NULL
;

3767 
dhd
->
pktfûãr
[2] = 
NULL
;

3768 
dhd
->
pktfûãr
[3] = 
NULL
;

3770 
dhd
->
pktfûãr
[4] = "104 0 0 0 0xFFFFFFFFFFFF 0x01005E0000FB";

3772 
	`dhd_£t_∑ckë_fûãr
(
dhd
);

3774 #i‡
	`deföed
(
SOFTAP
)

3775 i‡(
≠_fw_lﬂded
) {

3776 
	`dhd_íabÀ_∑ckë_fûãr
(0, 
dhd
);

3781 #ifde‡
DISABLE_11N


3782 
	`bcm_mkiov¨
("nmode", (*)&
nmode
, 4, 
iovbuf
, (iovbuf));

3783 i‡((
ªt
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
, (iovbuf), 
TRUE
, 0)) < 0)

3784 
	`DHD_ERROR
(("%†w»nmodê0 faûed %d\n", 
__FUNCTION__
, 
ªt
));

3786 #ifde‡
AMPDU_HOSTREORDER


3787 
	`bcm_mkiov¨
("ampdu_ho°ª‹dî", (*)&
ho°ª‹dî
, 4, 
buf
, (buf));

3788 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
buf
, (buf), 
TRUE
, 0);

3792 #i‡!
	`deföed
(
WL_CFG80211
)

3794 i‡((
ªt
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_UP
, (*)&
up
, (up), 
TRUE
, 0)) < 0) {

3795 
	`DHD_ERROR
(("%†Sëtög WL UP faûed %d\n", 
__FUNCTION__
, 
ªt
));

3796 
d⁄e
;

3801 #ifde‡
ENABLE_BCN_LI_BCN_WAKEUP


3802 
	`bcm_mkiov¨
("b˙_li_b˙", (*)&
b˙_li_b˙
, 4, 
iovbuf
, (iovbuf));

3803 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_SET_VAR
, 
iovbuf
, (iovbuf), 
TRUE
, 0);

3807 
	`mem£t
(
buf
, 0, (buf));

3808 
±r
 = 
buf
;

3809 
	`bcm_mkiov¨
("vî", (*)&
buf
, 4, buf, (buf));

3810 i‡((
ªt
 = 
	`dhd_wl_io˘l_cmd
(
dhd
, 
WLC_GET_VAR
, 
buf
, (buf), 
FALSE
, 0)) < 0)

3811 
	`DHD_ERROR
(("%†Áûed %d\n", 
__FUNCTION__
, 
ªt
));

3813 
	`bcm°πok
(&
±r
, "\n", 0);

3815 
	`DHD_ERROR
(("Fúmw¨êvîsi⁄ = %s\n", 
buf
));

3817 
	`dhd_£t_vîsi⁄_öfo
(
dhd
, 
buf
);

3819 
	`DHD_BLOG
(
buf
, 
	`°æí
(buf) + 1);

3820 
	`DHD_BLOG
(
dhd_vîsi⁄
, 
	`°æí
(dhd_version) + 1);

3823 i‡(
	`°r°r
(
buf
, 
MANUFACTRING_FW
Ë!
NULL
) {

3824 
	`dhd_os_£t_io˘l_ª•_timeout
(20000);

3825 
	`DHD_ERROR
(("%s :ádjust IOCTLÑesponseÅime for Manufactring Firmware\n",

3826 
__FUNCTION__
));

3830 
d⁄e
:

3831  
ªt
;

3832 
	}
}

3836 
	$dhd_iov¨
(
dhd_pub_t
 *
pub
, 
ifidx
, *
«me
, *
cmd_buf
, 
uöt
 
cmd_Àn
, 
£t
)

3838 
buf
[
	`°æí
(
«me
Ë+ 1 + 
cmd_Àn
];

3839 
Àn
 = (
buf
);

3840 
wl_io˘l_t
 
ioc
;

3841 
ªt
;

3843 
Àn
 = 
	`bcm_mkiov¨
(
«me
, 
cmd_buf
, 
cmd_Àn
, 
buf
,Üen);

3845 
	`mem£t
(&
ioc
, 0, (ioc));

3847 
ioc
.
cmd
 = 
£t
? 
WLC_SET_VAR
 : 
WLC_GET_VAR
;

3848 
ioc
.
buf
 = buf;

3849 
ioc
.
Àn
 =Üen;

3850 
ioc
.
£t
 = 
TRUE
;

3852 
ªt
 = 
	`dhd_wl_io˘l
(
pub
, 
ifidx
, &
ioc
, ioc.
buf
, ioc.
Àn
);

3853 i‡(!
£t
 && 
ªt
 >= 0)

3854 
	`mem˝y
(
cmd_buf
, 
buf
, 
cmd_Àn
);

3856  
ªt
;

3857 
	}
}

3859 
	$dhd_ch™ge_mtu
(
dhd_pub_t
 *
dhdp
, 
√w_mtu
, 
ifidx
)

3861 
dhd_öfo
 *
dhd
 = 
dhdp
->
öfo
;

3862 
√t_devi˚
 *
dev
 = 
NULL
;

3864 
	`ASSERT
(
dhd
 && dhd->
iÊi°
[
ifidx
]);

3865 
dev
 = 
dhd
->
iÊi°
[
ifidx
]->
√t
;

3866 
	`ASSERT
(
dev
);

3868 i‡(
	`√tif_ru¬ög
(
dev
)) {

3869 
	`DHD_ERROR
(("%s: Mu° bêdow¿tÿch™gêô†MTU", 
dev
->
«me
));

3870  
BCME_NOTDOWN
;

3873 
	#DHD_MIN_MTU
 1500

	)

3874 
	#DHD_MAX_MTU
 1752

	)

3876 i‡((
√w_mtu
 < 
DHD_MIN_MTU
Ë|| (√w_mtu > 
DHD_MAX_MTU
)) {

3877 
	`DHD_ERROR
(("%s: MTU sizê%d i†övÆid.\n", 
__FUNCTION__
, 
√w_mtu
));

3878  
BCME_BADARG
;

3881 
dev
->
mtu
 = 
√w_mtu
;

3883 
	}
}

3885 #ifde‡
ARP_OFFLOAD_SUPPORT


3888 
	$a€_upd©e_ho°_ùv4_èbÀ
(
dhd_pub_t
 *
dhd_pub
, 
u32
 
ùa
, 
boﬁ
 
add
, 
idx
)

3890 
u32
 
ùv4_buf
[
MAX_IPV4_ENTRIES
];

3891 
i
;

3892 
ªt
;

3894 
	`bzîo
(
ùv4_buf
, (ipv4_buf));

3897 
ªt
 = 
	`dhd_¨p_gë_¨p_ho°ù_èbÀ
(
dhd_pub
, 
ùv4_buf
, (ùv4_buf), 
idx
);

3898 
	`DHD_ARPOE
(("%s: ho°ùÅabÀÑód from D⁄gÀ:\n", 
__FUNCTION__
));

3899 #ifde‡
AOE_DBG


3900 
	`dhd_¥öt_buf
(
ùv4_buf
, 32, 4);

3903 
	`dhd_a€_ho°ù_˛r
(
dhd_pub
, 
idx
);

3905 i‡(
ªt
) {

3906 
	`DHD_ERROR
(("%†Áûed\n", 
__FUNCTION__
));

3910 
i
 = 0; i < 
MAX_IPV4_ENTRIES
; i++) {

3911 i‡(
add
 && (
ùv4_buf
[
i
] == 0)) {

3912 
ùv4_buf
[
i
] = 
ùa
;

3913 
add
 = 
FALSE
;

3914 
	`DHD_ARPOE
(("%s: SavedÇew IP inÅempárp_hostip[%d]\n",

3915 
__FUNCTION__
, 
i
));

3916 } i‡(
ùv4_buf
[
i
] =
ùa
) {

3917 
ùv4_buf
[
i
] = 0;

3918 
	`DHD_ARPOE
(("%s:Ñemoved IP:%x fromÅempÅable %d\n",

3919 
__FUNCTION__
, 
ùa
, 
i
));

3922 i‡(
ùv4_buf
[
i
] != 0) {

3924 
	`dhd_¨p_ofÊﬂd_add_ù
(
dhd_pub
, 
ùv4_buf
[
i
], 
idx
);

3925 
	`DHD_ARPOE
(("%s:ádded IP:%xÅo dongleárp_hostip[%d]\n\n",

3926 
__FUNCTION__
, 
ùv4_buf
[
i
], i));

3929 #ifde‡
AOE_DBG


3931 
	`dhd_¨p_gë_¨p_ho°ù_èbÀ
(
dhd_pub
, 
ùv4_buf
, (ùv4_buf), 
idx
);

3932 
	`DHD_ARPOE
(("%s:Ñód backáΩ_ho°ùÅabÀ:\n", 
__FUNCTION__
));

3933 
	`dhd_¥öt_buf
(
ùv4_buf
, 32, 4);

3935 
	}
}

3942 
	$dhd_devi˚_evít
(
nŸifõr_block
 *
this
,

3943 
evít
,

3944 *
±r
)

3946 
ö_iÁddr
 *
iÁ
 = (ö_iÁdd∏*)
±r
;

3948 
dhd_öfo_t
 *
dhd
;

3949 
dhd_pub_t
 *
dhd_pub
;

3950 
idx
;

3952 i‡(!
dhd_¨p_íabÀ
)

3953  
NOTIFY_DONE
;

3954 i‡(!
iÁ
 || !(iÁ->
iÁ_dev
->
dev
))

3955  
NOTIFY_DONE
;

3957 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 31))

3959 i‡((
iÁ
->
iÁ_dev
->
dev
->
√tdev_›s
 !&
dhd_›s_¥i
) &&

3960 (
iÁ
->
iÁ_dev
->
dev
->
√tdev_›s
 !&
dhd_›s_vút
)) {

3961 #ifde‡
WLP2P


3962 i‡(!
	`wl_cfgp2p_is_if›s
(
iÁ
->
iÁ_dev
->
dev
->
√tdev_›s
))

3964  
NOTIFY_DONE
;

3968 
dhd
 = *(
dhd_öfo_t
 **)
	`√tdev_¥iv
(
iÁ
->
iÁ_dev
->
dev
);

3969 i‡(!
dhd
)

3970  
NOTIFY_DONE
;

3972 
dhd_pub
 = &
dhd
->
pub
;

3974 i‡(
dhd_pub
->
¨p_vîsi⁄
 == 1) {

3975 
idx
 = 0;

3978 
idx
 = 0; idx < 
DHD_MAX_IFS
; idx++) {

3979 i‡(
dhd
->
iÊi°
[
idx
] && dhd->iÊi°[idx]->
√t
 =
iÁ
->
iÁ_dev
->
dev
)

3982 i‡(
idx
 < 
DHD_MAX_IFS
)

3983 
	`DHD_TRACE
(("ifidx : %∞%†%d\n", 
dhd
->
iÊi°
[
idx
]->
√t
,

3984 
dhd
->
iÊi°
[
idx
]->
«me
, dhd->iflist[idx]->idx));

3986 
	`DHD_ERROR
(("C™nŸ föd ifidx f‹(%sË£àtÿ0\n", 
iÁ
->
iÁ_œbñ
));

3987 
idx
 = 0;

3991 
evít
) {

3992 
NETDEV_UP
:

3993 
	`DHD_ARPOE
(("%s: [%s] Up IP: 0x%x\n",

3994 
__FUNCTION__
, 
iÁ
->
iÁ_œbñ
, iÁ->
iÁ_addªss
));

3996 i‡(
dhd
->
pub
.
bus°©e
 !
DHD_BUS_DATA
) {

3997 
	`DHD_ERROR
(("%s: bu†nŸÑódy,Éxô\n", 
__FUNCTION__
));

3998 i‡(
dhd
->
≥nd_ùaddr
) {

3999 
	`DHD_ERROR
(("%s: overwriteÖending ipaddr: 0x%x\n",

4000 
__FUNCTION__
, 
dhd
->
≥nd_ùaddr
));

4002 
dhd
->
≥nd_ùaddr
 = 
iÁ
->
iÁ_addªss
;

4006 #ifde‡
AOE_IP_ALIAS_SUPPORT


4007 
	`DHD_ARPOE
(("%s:addáliased IPÅo AOE hostip cache\n",

4008 
__FUNCTION__
));

4009 
	`a€_upd©e_ho°_ùv4_èbÀ
(
dhd_pub
, 
iÁ
->
iÁ_addªss
, 
TRUE
, 
idx
);

4013 
NETDEV_DOWN
:

4014 
	`DHD_ARPOE
(("%s: [%s] Down IP: 0x%x\n",

4015 
__FUNCTION__
, 
iÁ
->
iÁ_œbñ
, iÁ->
iÁ_addªss
));

4016 
dhd
->
≥nd_ùaddr
 = 0;

4017 #ifde‡
AOE_IP_ALIAS_SUPPORT


4018 
	`DHD_ARPOE
(("%s:interface is down, AOE clráll forÅhis if\n",

4019 
__FUNCTION__
));

4020 
	`a€_upd©e_ho°_ùv4_èbÀ
(
dhd_pub
, 
iÁ
->
iÁ_addªss
, 
FALSE
, 
idx
);

4022 
	`dhd_a€_ho°ù_˛r
(&
dhd
->
pub
, 
idx
);

4023 
	`dhd_a€_¨p_˛r
(&
dhd
->
pub
, 
idx
);

4028 
	`DHD_ARPOE
(("%s: doÇoting for [%s] Event: %lu\n",

4029 
__func__
, 
iÁ
->
iÁ_œbñ
, 
evít
));

4032  
NOTIFY_DONE
;

4033 
	}
}

4037 
	$dhd_√t_©èch
(
dhd_pub_t
 *
dhdp
, 
ifidx
)

4039 
dhd_öfo_t
 *
dhd
 = (dhd_öfo_à*)
dhdp
->
öfo
;

4040 
√t_devi˚
 *
√t
 = 
NULL
;

4041 
îr
 = 0;

4042 
uöt8
 
ãmp_addr
[
ETHER_ADDR_LEN
] = { 0x00, 0x90, 0x4c, 0x11, 0x22, 0x33 };

4044 
	`DHD_TRACE
(("%s: ifidx %d\n", 
__FUNCTION__
, 
ifidx
));

4046 
	`ASSERT
(
dhd
 && dhd->
iÊi°
[
ifidx
]);

4048 
√t
 = 
dhd
->
iÊi°
[
ifidx
]->net;

4049 
	`ASSERT
(
√t
);

4051 #i‡(
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2, 6, 31))

4052 
	`ASSERT
(!
√t
->
›í
);

4053 
√t
->
gë_°©s
 = 
dhd_gë_°©s
;

4054 
√t
->
do_io˘l
 = 
dhd_io˘l_íåy
;

4055 
√t
->
h¨d_°¨t_xmô
 = 
dhd_°¨t_xmô
;

4056 
√t
->
£t_mac_addªss
 = 
dhd_£t_mac_addªss
;

4057 
√t
->
£t_mu…iˇ°_li°
 = 
dhd_£t_mu…iˇ°_li°
;

4058 
√t
->
›í
 =Çë->
°›
 = 
NULL
;

4060 
	`ASSERT
(!
√t
->
√tdev_›s
);

4061 
√t
->
√tdev_›s
 = &
dhd_›s_vút
;

4065 i‡(
ifidx
 == 0) {

4069 #i‡(
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2, 6, 31))

4070 
√t
->
›í
 = 
dhd_›í
;

4071 
√t
->
°›
 = 
dhd_°›
;

4073 
√t
->
√tdev_›s
 = &
dhd_›s_¥i
;

4075 i‡(!
	`ETHER_ISNULLADDR
(
dhd
->
pub
.
mac
.
o˘ë
))

4076 
	`mem˝y
(
ãmp_addr
, 
dhd
->
pub
.
mac
.
o˘ë
, 
ETHER_ADDR_LEN
);

4081 
	`mem˝y
(
ãmp_addr
, 
dhd
->
iÊi°
[
ifidx
]->
mac_addr
, 
ETHER_ADDR_LEN
);

4087 i‡(!
	`memcmp
(
ãmp_addr
, 
dhd
->
iÊi°
[0]->
mac_addr
,

4088 
ETHER_ADDR_LEN
)) {

4089 
	`DHD_ERROR
(("%s interface [%s]: setÜocallyádministered bit in MAC\n",

4090 
__func__
, 
√t
->
«me
));

4091 
ãmp_addr
[0] |= 0x02;

4095 
√t
->
h¨d_hódî_Àn
 = 
ETH_HLEN
 + 
dhd
->
pub
.
hdæí
;

4096 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 24)

4097 
√t
->
ëhtoﬁ_›s
 = &
dhd_ëhtoﬁ_›s
;

4100 #i‡
	`deföed
(
CONFIG_WIRELESS_EXT
)

4101 #i‡
WIRELESS_EXT
 < 19

4102 
√t
->
gë_wúñess_°©s
 = 
dhd_gë_wúñess_°©s
;

4104 #i‡
WIRELESS_EXT
 > 12

4105 
√t
->
wúñess_h™dÀrs
 = (
iw_h™dÀr_def
 *)&
wl_iw_h™dÀr_def
;

4109 
dhd
->
pub
.
rxsz
 = 
	`DBUS_RX_BUFFER_SIZE_DHD
(
√t
);

4111 
	`mem˝y
(
√t
->
dev_addr
, 
ãmp_addr
, 
ETHER_ADDR_LEN
);

4113 i‡((
îr
 = 
	`ªgi°î_√tdev
(
√t
)) != 0) {

4114 
	`DHD_ERROR
(("couldn'àªgi°îÅhê√àdevi˚,Éº %d\n", 
îr
));

4115 
Áû
;

4117 
	`¥ötf
("Broadcom Dongle Host Driver:Ñegister interface [%s]"

4118 " MAC: "
MACDBG
"\n",

4119 
√t
->
«me
,

4120 
	`MAC2STRDBG
(
√t
->
dev_addr
));

4122 #i‡
	`deföed
(
SOFTAP
Ë&& deföed(
CONFIG_WIRELESS_EXT
Ë&& !deföed(
WL_CFG80211
)

4123 
	`wl_iw_isˇn_£t_sˇn_brﬂdˇ°_¥ï
(
√t
, 1);

4126 #i‡1 && (
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27))

4127 i‡(
ifidx
 == 0) {

4128 
dhd_ªgi°øti⁄_check
 = 
TRUE
;

4129 
	`up
(&
dhd_ªgi°øti⁄_£m
);

4134 
Áû
:

4135 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2, 6, 31)

4136 
√t
->
›í
 = 
NULL
;

4138 
√t
->
√tdev_›s
 = 
NULL
;

4140  
îr
;

4141 
	}
}

4144 
	$dhd_bus_dëach
(
dhd_pub_t
 *
dhdp
)

4146 
dhd_öfo_t
 *
dhd
;

4148 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

4150 i‡(
dhdp
) {

4151 
dhd
 = (
dhd_öfo_t
 *)
dhdp
->
öfo
;

4152 i‡(
dhd
) {

4158 i‡(
dhd
->
pub
.
bus°©e
 !
DHD_BUS_DOWN
) {

4160 
	`dhd_¥Ÿ_°›
(&
dhd
->
pub
);

4163 
	`dhd_bus_°›
(
dhd
->
pub
.
bus
, 
TRUE
);

4166 #i‡
	`deföed
(
OOB_INTR_ONLY
)

4167 
	`bcmsdh_uƒegi°î_oob_öå
();

4171 
	}
}

4174 
	$dhd_dëach
(
dhd_pub_t
 *
dhdp
)

4176 
dhd_öfo_t
 *
dhd
;

4177 
Êags
;

4178 
timî_vÆid
 = 
FALSE
;

4180 i‡(!
dhdp
)

4183 
dhd
 = (
dhd_öfo_t
 *)
dhdp
->
öfo
;

4184 i‡(!
dhd
)

4187 
	`DHD_TRACE
(("%s: E¡î sèã 0x%x\n", 
__FUNCTION__
, 
dhd
->
dhd_°©e
));

4189 
dhd
->
pub
.
up
 = 0;

4190 i‡(!(
dhd
->
dhd_°©e
 & 
DHD_ATTACH_STATE_DONE
)) {

4194 
	`o¶_dñay
(1000*100);

4197 i‡(
dhd
->
dhd_°©e
 & 
DHD_ATTACH_STATE_PROT_ATTACH
) {

4198 
	`dhd_bus_dëach
(
dhdp
);

4200 i‡(
dhdp
->
¥Ÿ
)

4201 
	`dhd_¥Ÿ_dëach
(
dhdp
);

4204 #ifde‡
ARP_OFFLOAD_SUPPORT


4205 
	`uƒegi°î_öëaddr_nŸifõr
(&
dhd_nŸifõr
);

4208 #i‡
	`deföed
(
CONFIG_HAS_EARLYSUSPEND
Ë&& deföed(
DHD_USE_EARLYSUSPEND
)

4209 i‡(
dhd
->
dhd_°©e
 & 
DHD_ATTACH_STATE_EARLYSUSPEND_DONE
) {

4210 i‡(
dhd
->
óæy_su•íd
.
su•íd
)

4211 
	`uƒegi°î_óæy_su•íd
(&
dhd
->
óæy_su•íd
);

4215 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27))

4216 
	`ˇn˚l_w‹k_sync
(&
dhd
->
w‹k_h™g
);

4219 #i‡
	`deföed
(
CONFIG_WIRELESS_EXT
)

4220 i‡(
dhd
->
dhd_°©e
 & 
DHD_ATTACH_STATE_WL_ATTACH
) {

4222 
	`wl_iw_dëach
();

4226 i‡(
dhd
->
thr_sysioc_˘l
.
thr_pid
 >= 0) {

4227 
	`PROC_STOP
(&
dhd
->
thr_sysioc_˘l
);

4231 i‡(
dhd
->
dhd_°©e
 & 
DHD_ATTACH_STATE_ADD_IF
) {

4232 
i
 = 1;

4233 
dhd_if_t
 *
iÂ
;

4236 
i
 = 1; i < 
DHD_MAX_IFS
; i++) {

4237 
	`dhd_√t_if_lock_loˇl
(
dhd
);

4238 i‡(
dhd
->
iÊi°
[
i
]) {

4239 
dhd
->
iÊi°
[
i
]->
°©e
 = 
DHD_IF_DEL
;

4240 
dhd
->
iÊi°
[
i
]->
idx
 = i;

4241 
	`dhd_›_if
(
dhd
->
iÊi°
[
i
]);

4244 
	`dhd_√t_if_u∆ock_loˇl
(
dhd
);

4247 
iÂ
 = 
dhd
->
iÊi°
[0];

4248 
	`ASSERT
(
iÂ
);

4249 
	`ASSERT
(
iÂ
->
√t
);

4250 i‡(
iÂ
 && iÂ->
√t
) {

4251 #i‡(
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2, 6, 31))

4252 i‡(
iÂ
->
√t
->
›í
)

4254 i‡(
iÂ
->
√t
->
√tdev_›s
 =&
dhd_›s_¥i
)

4257 
	`uƒegi°î_√tdev
(
iÂ
->
√t
);

4258 
	`‰ì_√tdev
(
iÂ
->
√t
);

4259 
iÂ
->
√t
 = 
NULL
;

4260 
	`MFREE
(
dhd
->
pub
.
osh
, 
iÂ
, (*ifp));

4261 
dhd
->
iÊi°
[0] = 
NULL
;

4267 
Êags
 = 
	`dhd_os_•ö_lock
(&
dhd
->
pub
);

4268 
timî_vÆid
 = 
dhd
->
wd_timî_vÆid
;

4269 
dhd
->
wd_timî_vÆid
 = 
FALSE
;

4270 
	`dhd_os_•ö_u∆ock
(&
dhd
->
pub
, 
Êags
);

4271 i‡(
timî_vÆid
)

4272 
	`dñ_timî_sync
(&
dhd
->
timî
);

4274 i‡(
dhd
->
dhd_°©e
 & 
DHD_ATTACH_STATE_THREADS_CREATED
) {

4275 #ifde‡
DHDTHREAD


4276 i‡(
dhd
->
thr_wdt_˘l
.
thr_pid
 >= 0) {

4277 
	`PROC_STOP
(&
dhd
->
thr_wdt_˘l
);

4280 i‡(
dhd
->
thr_dpc_˘l
.
thr_pid
 >= 0) {

4281 
	`PROC_STOP
(&
dhd
->
thr_dpc_˘l
);

4285 
	`èskÀt_kûl
(&
dhd
->
èskÀt
);

4288 #ifde‡
WL_CFG80211


4289 i‡(
dhd
->
dhd_°©e
 & 
DHD_ATTACH_STATE_CFG80211
) {

4290 
	`wl_cfg80211_dëach
(
NULL
);

4291 
	`dhd_m⁄ô‹_unöô
();

4296 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27)Ë&& 
	`deföed
(
CONFIG_PM_SLEEP
)

4297 
	`uƒegi°î_pm_nŸifõr
(&
dhd_¶ìp_pm_nŸifõr
);

4301 i‡(
dhd
->
dhd_°©e
 & 
DHD_ATTACH_STATE_WAKELOCKS_INIT
) {

4302 #ifde‡
CONFIG_HAS_WAKELOCK


4303 
dhd
->
wakñock_cou¡î
 = 0;

4304 
dhd
->
wakñock_wd_cou¡î
 = 0;

4305 
dhd
->
wakñock_rx_timeout_íabÀ
 = 0;

4306 
dhd
->
wakñock_˘æ_timeout_íabÀ
 = 0;

4307 i‡(
dhd
->
wl_wifi
) {

4308 
	`wake_lock_de°roy
(
dhd
->
wl_wifi
);

4309 
	`MFREE
(
dhd
->
pub
.
osh
, dhd->
wl_wifi
, (
wake_lock
));

4310 
dhd
->
wl_wifi
 = 
NULL
;

4312 i‡(
dhd
->
wl_rxwake
) {

4313 
	`wake_lock_de°roy
(
dhd
->
wl_rxwake
);

4314 
	`MFREE
(
dhd
->
pub
.
osh
, dhd->
wl_rxwake
, (
wake_lock
));

4315 
dhd
->
wl_rxwake
 = 
NULL
;

4317 i‡(
dhd
->
wl_˘æwake
) {

4318 
	`wake_lock_de°roy
(
dhd
->
wl_˘æwake
);

4319 
	`MFREE
(
dhd
->
pub
.
osh
, dhd->
wl_˘æwake
, (
wake_lock
));

4320 
dhd
->
wl_˘æwake
 = 
NULL
;

4322 i‡(
dhd
->
wl_wdwake
) {

4323 
	`wake_lock_de°roy
(
dhd
->
wl_wdwake
);

4324 
	`MFREE
(
dhd
->
pub
.
osh
, dhd->
wl_wdwake
, (
wake_lock
));

4325 
dhd
->
wl_wdwake
 = 
NULL
;

4329 
	}
}

4333 
	$dhd_‰ì
(
dhd_pub_t
 *
dhdp
)

4335 
dhd_öfo_t
 *
dhd
;

4336 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

4338 i‡(
dhdp
) {

4339 
i
;

4340 
i
 = 0; i < 
	`ARRAYSIZE
(
dhdp
->
ª‹dî_bufs
); i++) {

4341 i‡(
dhdp
->
ª‹dî_bufs
[
i
]) {

4342 
ª‹dî_öfo_t
 *
±r
;

4343 
uöt32
 
buf_size
 = (
ª‹dî_öfo
);

4345 
±r
 = 
dhdp
->
ª‹dî_bufs
[
i
];

4347 
buf_size
 +((
±r
->
max_idx
 + 1) * (*));

4348 
	`DHD_REORDER
(("free flow id buf %d, maxidx is %d, buf_size %d\n",

4349 
i
, 
±r
->
max_idx
, 
buf_size
));

4351 
	`MFREE
(
dhdp
->
osh
, dhdp->
ª‹dî_bufs
[
i
], 
buf_size
);

4352 
dhdp
->
ª‹dî_bufs
[
i
] = 
NULL
;

4355 
dhd
 = (
dhd_öfo_t
 *)
dhdp
->
öfo
;

4356 i‡(
dhd
)

4357 
	`MFREE
(
dhd
->
pub
.
osh
, dhd, (*dhd));

4359 
	}
}

4361 
__exô


4362 
	$dhd_moduÀ_˛ónup
()

4364 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

4366 
	`dhd_bus_uƒegi°î
();

4368 #i‡
	`deföed
(
CONFIG_WIFI_CONTROL_FUNC
)

4369 
	`wl_™droid_wifi˘æ_func_dñ
();

4371 
	`wl_™droid_exô
();

4374 
	`dhd_cu°omî_gpio_wœn_˘æ
(
WLAN_POWER_OFF
);

4375 
	}
}

4378 
__öô


4379 
	$dhd_moduÀ_öô
()

4381 
îr‹
 = 0;

4383 #i‡1 && 
	`deföed
(
BCMLXSDMMC
Ë&& (
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27))

4384 
ªåy
 = 
POWERUP_MAX_RETRY
;

4385 
chù_up
 = 0;

4388 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

4390 
	`wl_™droid_öô
();

4392 #i‡
	`deföed
(
DHDTHREAD
)

4396 i‡((
dhd_w©chdog_¥io
 < 0Ë&& (
dhd_dpc_¥io
 < 0))

4400 i‡((
dhd_w©chdog_¥io
 >0Ë&& (
dhd_dpc_¥io
 >0Ë&& 
dhd_de„ºed_tx
)

4403 
	`DHD_ERROR
(("Invalid moduleÖarameters.\n"));

4404  -
EINVAL
;

4408 #i‡1 && 
	`deföed
(
BCMLXSDMMC
Ë&& (
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27))

4410 
	`£ma_öô
(&
dhd_chùup_£m
, 0);

4411 
	`dhd_bus_ªg_sdio_nŸify
(&
dhd_chùup_£m
);

4412 
	`dhd_cu°omî_gpio_wœn_˘æ
(
WLAN_POWER_ON
);

4413 #i‡
	`deföed
(
CONFIG_WIFI_CONTROL_FUNC
)

4414 i‡(
	`wl_™droid_wifi˘æ_func_add
() < 0) {

4415 
	`dhd_bus_uƒeg_sdio_nŸify
();

4416 
Áû_1
;

4419 i‡(
	`down_timeout
(&
dhd_chùup_£m
,

4420 
	`m£cs_to_jiffõs
(
POWERUP_WAIT_MS
)) == 0) {

4421 
	`dhd_bus_uƒeg_sdio_nŸify
();

4422 
chù_up
 = 1;

4425 
	`DHD_ERROR
(("\nfailedÅoÖower up wifi chip,Ñetryágain (%dÜeft) **\n\n",

4426 
ªåy
+1));

4427 
	`dhd_bus_uƒeg_sdio_nŸify
();

4428 #i‡
	`deföed
(
CONFIG_WIFI_CONTROL_FUNC
)

4429 
	`wl_™droid_wifi˘æ_func_dñ
();

4431 
	`dhd_cu°omî_gpio_wœn_˘æ
(
WLAN_POWER_OFF
);

4432 } 
ªåy
-- > 0);

4434 i‡(!
chù_up
) {

4435 
	`DHD_ERROR
(("\nfailedÅoÖower up wifi chip, maxÑetryÑeached,Éxits **\n\n"));

4436  -
ENODEV
;

4439 
	`dhd_cu°omî_gpio_wœn_˘æ
(
WLAN_POWER_ON
);

4440 #i‡
	`deföed
(
CONFIG_WIFI_CONTROL_FUNC
)

4441 i‡(
	`wl_™droid_wifi˘æ_func_add
() < 0)

4442 
Áû_1
;

4447 #i‡1 && (
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27))

4448 
	`£ma_öô
(&
dhd_ªgi°øti⁄_£m
, 0);

4452 
îr‹
 = 
	`dhd_bus_ªgi°î
();

4454 i‡(!
îr‹
)

4455 
	`¥ötf
("\n%s\n", 
dhd_vîsi⁄
);

4457 
	`DHD_ERROR
(("%s: sdio_ªgi°î_drivî faûed\n", 
__FUNCTION__
));

4458 
Áû_1
;

4461 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27))

4467 i‡((
	`down_timeout
(&
dhd_ªgi°øti⁄_£m
,

4468 
	`m£cs_to_jiffõs
(
DHD_REGISTRATION_TIMEOUT
)) != 0) ||

4469 (
dhd_ªgi°øti⁄_check
 !
TRUE
)) {

4470 
îr‹
 = -
ENODEV
;

4471 
	`DHD_ERROR
(("%s: sdio_ªgi°î_drivîÅimeouà‹Éº‹ \n", 
__FUNCTION__
));

4472 
Áû_2
;

4475 #i‡
	`deföed
(
WL_CFG80211
)

4476 
	`wl_™droid_po°_öô
();

4479  
îr‹
;

4481 #i‡1 && (
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27))

4482 
Áû_2
:

4483 
	`dhd_bus_uƒegi°î
();

4486 
Áû_1
:

4488 #i‡
	`deföed
(
CONFIG_WIFI_CONTROL_FUNC
)

4489 
	`wl_™droid_wifi˘æ_func_dñ
();

4493 
	`dhd_cu°omî_gpio_wœn_˘æ
(
WLAN_POWER_OFF
);

4495  
îr‹
;

4496 
	}
}

4498 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 0)

4499 
œã_öôˇŒ
(
dhd_moduÀ_öô
);

4501 
moduÀ_öô
(
dhd_moduÀ_öô
);

4504 
moduÀ_exô
(
dhd_moduÀ_˛ónup
);

4510 
	$dhd_os_¥Ÿo_block
(
dhd_pub_t
 *
pub
)

4512 
dhd_öfo_t
 * 
dhd
 = (dhd_öfo_à*)(
pub
->
öfo
);

4514 i‡(
dhd
) {

4515 
	`down
(&
dhd
->
¥Ÿo_£m
);

4520 
	}
}

4523 
	$dhd_os_¥Ÿo_unblock
(
dhd_pub_t
 *
pub
)

4525 
dhd_öfo_t
 * 
dhd
 = (dhd_öfo_à*)(
pub
->
öfo
);

4527 i‡(
dhd
) {

4528 
	`up
(&
dhd
->
¥Ÿo_£m
);

4533 
	}
}

4536 
	$dhd_os_gë_io˘l_ª•_timeout
()

4538  (()
dhd_io˘l_timeout_m£c
);

4539 
	}
}

4542 
	$dhd_os_£t_io˘l_ª•_timeout
(
timeout_m£c
)

4544 
dhd_io˘l_timeout_m£c
 = ()
timeout_m£c
;

4545 
	}
}

4548 
	$dhd_os_io˘l_ª•_waô
(
dhd_pub_t
 *
pub
, 
uöt
 *
c⁄dôi⁄
, 
boﬁ
 *
≥ndög
)

4550 
dhd_öfo_t
 * 
dhd
 = (dhd_öfo_à*)(
pub
->
öfo
);

4551 
timeout
;

4554 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27))

4555 
timeout
 = 
	`m£cs_to_jiffõs
(
dhd_io˘l_timeout_m£c
);

4557 
timeout
 = 
dhd_io˘l_timeout_m£c
 * 
HZ
 / 1000;

4560 
timeout
 = 
	`waô_evít_timeout
(
dhd
->
io˘l_ª•_waô
, (*
c⁄dôi⁄
),Åimeout);

4561  
timeout
;

4562 
	}
}

4565 
	$dhd_os_io˘l_ª•_wake
(
dhd_pub_t
 *
pub
)

4567 
dhd_öfo_t
 *
dhd
 = (dhd_öfo_à*)(
pub
->
öfo
);

4569 i‡(
	`waôqueue_a˘ive
(&
dhd
->
io˘l_ª•_waô
)) {

4570 
	`wake_up
(&
dhd
->
io˘l_ª•_waô
);

4574 
	}
}

4577 
	$dhd_os_wd_timî
(*
bus
, 
uöt
 
wdtick
)

4579 
dhd_pub_t
 *
pub
 = 
bus
;

4580 
dhd_öfo_t
 *
dhd
 = (dhd_öfo_à*)
pub
->
öfo
;

4581 
Êags
;

4583 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

4585 i‡(!
dhd
)

4587 i‡(
wdtick
)

4588 
	`DHD_OS_WD_WAKE_LOCK
(
pub
);

4590 
Êags
 = 
	`dhd_os_•ö_lock
(
pub
);

4593 i‡(
pub
->
bus°©e
 =
DHD_BUS_DOWN
) {

4594 
	`dhd_os_•ö_u∆ock
(
pub
, 
Êags
);

4595 
	`DHD_OS_WD_WAKE_UNLOCK
(
pub
);

4600 i‡(!
wdtick
 && 
dhd
->
wd_timî_vÆid
 =
TRUE
) {

4601 
dhd
->
wd_timî_vÆid
 = 
FALSE
;

4602 
	`dhd_os_•ö_u∆ock
(
pub
, 
Êags
);

4603 #ifde‡
DHDTHREAD


4604 
	`dñ_timî_sync
(&
dhd
->
timî
);

4606 
	`dñ_timî
(&
dhd
->
timî
);

4609 
	`DHD_OS_WD_WAKE_UNLOCK
(
pub
);

4613 i‡(
wdtick
) {

4614 
dhd_w©chdog_ms
 = (
uöt
)
wdtick
;

4616 
	`mod_timî
(&
dhd
->
timî
, 
jiffõs
 + 
	`m£cs_to_jiffõs
(
dhd_w©chdog_ms
));

4617 
dhd
->
wd_timî_vÆid
 = 
TRUE
;

4619 
	`dhd_os_•ö_u∆ock
(
pub
, 
Êags
);

4620 
	}
}

4623 
	$dhd_os_›í_image
(*
fûíame
)

4625 
fûe
 *
Â
;

4627 
Â
 = 
	`fûp_›í
(
fûíame
, 
O_RDONLY
, 0);

4634 i‡(
	`IS_ERR
(
Â
))

4635 
Â
 = 
NULL
;

4637  
Â
;

4638 
	}
}

4641 
	$dhd_os_gë_image_block
(*
buf
, 
Àn
, *
image
)

4643 
fûe
 *
Â
 = (fûê*)
image
;

4644 
rdÀn
;

4646 i‡(!
image
)

4649 
rdÀn
 = 
	`kî√l_ªad
(
Â
, fp->
f_pos
, 
buf
, 
Àn
);

4650 i‡(
rdÀn
 > 0)

4651 
Â
->
f_pos
 +
rdÀn
;

4653  
rdÀn
;

4654 
	}
}

4657 
	$dhd_os_˛o£_image
(*
image
)

4659 i‡(
image
)

4660 
	`fûp_˛o£
((
fûe
 *)
image
, 
NULL
);

4661 
	}
}

4665 
	$dhd_os_sdlock
(
dhd_pub_t
 *
pub
)

4667 
dhd_öfo_t
 *
dhd
;

4669 
dhd
 = (
dhd_öfo_t
 *)(
pub
->
öfo
);

4671 #ifde‡
DHDTHREAD


4672 i‡(
dhd
->
thªads_⁄ly
)

4673 
	`down
(&
dhd
->
sd£m
);

4676 
	`•ö_lock_bh
(&
dhd
->
sdlock
);

4677 
	}
}

4680 
	$dhd_os_sdu∆ock
(
dhd_pub_t
 *
pub
)

4682 
dhd_öfo_t
 *
dhd
;

4684 
dhd
 = (
dhd_öfo_t
 *)(
pub
->
öfo
);

4686 #ifde‡
DHDTHREAD


4687 i‡(
dhd
->
thªads_⁄ly
)

4688 
	`up
(&
dhd
->
sd£m
);

4691 
	`•ö_u∆ock_bh
(&
dhd
->
sdlock
);

4692 
	}
}

4695 
	$dhd_os_sdlock_txq
(
dhd_pub_t
 *
pub
)

4697 
dhd_öfo_t
 *
dhd
;

4699 
dhd
 = (
dhd_öfo_t
 *)(
pub
->
öfo
);

4700 
	`•ö_lock_bh
(&
dhd
->
txqlock
);

4701 
	}
}

4704 
	$dhd_os_sdu∆ock_txq
(
dhd_pub_t
 *
pub
)

4706 
dhd_öfo_t
 *
dhd
;

4708 
dhd
 = (
dhd_öfo_t
 *)(
pub
->
öfo
);

4709 
	`•ö_u∆ock_bh
(&
dhd
->
txqlock
);

4710 
	}
}

4713 
	$dhd_os_sdlock_rxq
(
dhd_pub_t
 *
pub
)

4715 
	}
}

4718 
	$dhd_os_sdu∆ock_rxq
(
dhd_pub_t
 *
pub
)

4720 
	}
}

4723 
	$dhd_os_sdtxlock
(
dhd_pub_t
 *
pub
)

4725 
	`dhd_os_sdlock
(
pub
);

4726 
	}
}

4729 
	$dhd_os_sdtxu∆ock
(
dhd_pub_t
 *
pub
)

4731 
	`dhd_os_sdu∆ock
(
pub
);

4732 
	}
}

4734 #i‡
deföed
(
CONFIG_DHD_USE_STATIC_BUF
)

4735 
uöt8
* 
	$dhd_os_¥óŒoc
(*
osh
, 
£˘i⁄
, 
uöt
 
size
)

4737  (
uöt8
*)
	`wl_™droid_¥óŒoc
(
£˘i⁄
, 
size
);

4738 
	}
}

4740 
	$dhd_os_¥e‰ì
(*
osh
, *
addr
, 
uöt
 
size
)

4742 
	}
}

4745 #i‡
deföed
(
CONFIG_WIRELESS_EXT
)

4746 
iw_°©i°ics
 *

4747 
	$dhd_gë_wúñess_°©s
(
√t_devi˚
 *
dev
)

4749 
ªs
 = 0;

4750 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
dev
);

4752 i‡(!
dhd
->
pub
.
up
) {

4753  
NULL
;

4756 
ªs
 = 
	`wl_iw_gë_wúñess_°©s
(
dev
, &
dhd
->
iw
.
w°©s
);

4758 i‡(
ªs
 == 0)

4759  &
dhd
->
iw
.
w°©s
;

4761  
NULL
;

4762 
	}
}

4766 
	$dhd_wl_ho°_evít
(
dhd_öfo_t
 *
dhd
, *
ifidx
, *
pktd©a
,

4767 
wl_evít_msg_t
 *
evít
, **
d©a
)

4769 
bcmîr‹
 = 0;

4770 
	`ASSERT
(
dhd
 !
NULL
);

4772 
bcmîr‹
 = 
	`wl_ho°_evít
(&
dhd
->
pub
, 
ifidx
, 
pktd©a
, 
evít
, 
d©a
);

4773 i‡(
bcmîr‹
 !
BCME_OK
)

4774  (
bcmîr‹
);

4776 #i‡
	`deföed
(
CONFIG_WIRELESS_EXT
)

4777 i‡(
evít
->
bsscfgidx
 == 0) {

4782 
	`ASSERT
(
dhd
->
iÊi°
[*
ifidx
] !
NULL
);

4783 
	`ASSERT
(
dhd
->
iÊi°
[*
ifidx
]->
√t
 !
NULL
);

4785 i‡(
dhd
->
iÊi°
[*
ifidx
]->
√t
) {

4786 
	`wl_iw_evít
(
dhd
->
iÊi°
[*
ifidx
]->
√t
, 
evít
, *
d©a
);

4791 #ifde‡
WL_CFG80211


4792 i‡((
	`¡oh32
(
evít
->
evít_ty≥
Ë=
WLC_E_IF
) &&

4793 (((
dhd_if_evít_t
 *)*
d©a
)->
a˘i⁄
 =
WLC_E_IF_ADD
))

4798  (
BCME_OK
);

4799 i‡((
	`wl_cfg80211_is_¥ogªss_ifch™ge
() ||

4800 
	`wl_cfg80211_is_¥ogªss_iÁdd
()Ë&& (*
ifidx
 != 0)) {

4805  (
BCME_OK
);

4808 
	`ASSERT
(
dhd
->
iÊi°
[*
ifidx
] !
NULL
);

4809 
	`ASSERT
(
dhd
->
iÊi°
[*
ifidx
]->
√t
 !
NULL
);

4810 i‡(
dhd
->
iÊi°
[*
ifidx
]->
evít2cfg80211
 && dhd->iÊi°[*ifidx]->
√t
) {

4811 
	`wl_cfg80211_evít
(
dhd
->
iÊi°
[*
ifidx
]->
√t
, 
evít
, *
d©a
);

4815  (
bcmîr‹
);

4816 
	}
}

4820 
	$dhd_£ndup_evít
(
dhd_pub_t
 *
dhdp
, 
wl_evít_msg_t
 *
evít
, *
d©a
)

4822 
	`¡oh32
(
evít
->
evít_ty≥
)) {

4823 #ifde‡
WLBTAMP


4825 
WLC_E_BTA_HCI_EVENT
: {

4826 
sk_buff
 *
p
, *
skb
;

4827 
bcm_evít_t
 *
msg
;

4828 
wl_evít_msg_t
 *
p_bcm_evít
;

4829 *
±r
;

4830 
uöt32
 
Àn
;

4831 
uöt32
 
pkéí
;

4832 
dhd_if_t
 *
iÂ
;

4833 
dhd_öfo_t
 *
dhd
;

4834 
uch¨
 *
ëh
;

4835 
ifidx
;

4837 
Àn
 = 
	`¡oh32
(
evít
->
d©Æí
);

4838 
pkéí
 = (
bcm_evít_t
Ë+ 
Àn
 + 2;

4839 
dhd
 = 
dhdp
->
öfo
;

4840 
ifidx
 = 
	`dhd_i‚ame2idx
(
dhd
, 
evít
->
i‚ame
);

4842 i‡((
p
 = 
	`PKTGET
(
dhdp
->
osh
, 
pkéí
, 
FALSE
))) {

4843 
	`ASSERT
(
	`ISALIGNED
((
uöçå
)
	`PKTDATA
(
dhdp
->
osh
, 
p
), (
uöt32
)));

4845 
msg
 = (
bcm_evít_t
 *Ë
	`PKTDATA
(
dhdp
->
osh
, 
p
);

4847 
	`bc›y
(&
dhdp
->
mac
, &
msg
->
ëh
.
ëhî_dho°
, 
ETHER_ADDR_LEN
);

4848 
	`bc›y
(&
dhdp
->
mac
, &
msg
->
ëh
.
ëhî_sho°
, 
ETHER_ADDR_LEN
);

4849 
	`ETHER_TOGGLE_LOCALADDR
(&
msg
->
ëh
.
ëhî_sho°
);

4851 
msg
->
ëh
.
ëhî_ty≥
 = 
	`ht⁄16
(
ETHER_TYPE_BRCM
);

4854 
msg
->
bcm_hdr
.
subty≥
 = 
	`ht⁄16
(
BCMILCP_SUBTYPE_VENDOR_LONG
);

4855 
msg
->
bcm_hdr
.
vîsi⁄
 = 
BCMILCP_BCM_SUBTYPEHDR_VERSION
;

4856 
	`bc›y
(
BRCM_OUI
, &
msg
->
bcm_hdr
.
oui
[0], 
DOT11_OUI_LEN
);

4861 
msg
->
bcm_hdr
.
Àngth
 = 
	`ht⁄16
(
BCMILCP_BCM_SUBTYPEHDR_MINLENGTH
 +

4862 
BCM_MSG_LEN
 + (
wl_evít_msg_t
Ë+ (
uöt16
)
Àn
);

4863 
msg
->
bcm_hdr
.
u§_subty≥
 = 
	`ht⁄16
(
BCMILCP_BCM_SUBTYPE_EVENT
);

4865 
	`PKTSETLEN
(
dhdp
->
osh
, 
p
, ((
bcm_evít_t
Ë+ 
Àn
 + 2));

4870 
p_bcm_evít
 = &
msg
->
evít
;

4871 
	`bc›y
(
evít
, 
p_bcm_evít
, (
wl_evít_msg_t
));

4874 
	`bc›y
(
d©a
, (
p_bcm_evít
 + 1), 
Àn
);

4876 
msg
->
bcm_hdr
.
Àngth
 = 
	`ht⁄16
((
wl_evít_msg_t
) +

4877 
	`¡oh16
(
msg
->
bcm_hdr
.
Àngth
));

4878 
	`PKTSETLEN
(
dhdp
->
osh
, 
p
, ((
bcm_evít_t
Ë+ 
Àn
 + 2));

4880 
±r
 = (*)(
msg
 + 1);

4884 
±r
[
Àn
+0] = 0x00;

4885 
±r
[
Àn
+1] = 0x00;

4887 
skb
 = 
	`PKTTONATIVE
(
dhdp
->
osh
, 
p
);

4888 
ëh
 = 
skb
->
d©a
;

4889 
Àn
 = 
skb
->len;

4891 
iÂ
 = 
dhd
->
iÊi°
[
ifidx
];

4892 i‡(
iÂ
 =
NULL
)

4893 
iÂ
 = 
dhd
->
iÊi°
[0];

4895 
	`ASSERT
(
iÂ
);

4896 
skb
->
dev
 = 
iÂ
->
√t
;

4897 
skb
->
¥Ÿocﬁ
 = 
	`ëh_ty≥_å™s
(skb, skb->
dev
);

4899 
skb
->
d©a
 = 
ëh
;

4900 
skb
->
Àn
 =Üen;

4903 
	`skb_puŒ
(
skb
, 
ETH_HLEN
);

4906 i‡(
	`ö_öãºu±
()) {

4907 
	`√tif_rx
(
skb
);

4909 
	`√tif_rx_ni
(
skb
);

4914 
	`DHD_ERROR
(("%s: u«bÀÅÿÆlo¯sk_buf", 
__FUNCTION__
));

4923 
	}
}

4925 
	$dhd_waô_f‹_evít
(
dhd_pub_t
 *
dhd
, 
boﬁ
 *
lockv¨
)

4927 #i‡1 && (
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 0))

4928 
dhd_öfo
 *
dhdöfo
 = 
dhd
->
öfo
;

4930 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27))

4931 
timeout
 = 
	`m£cs_to_jiffõs
(
IOCTL_RESP_TIMEOUT
);

4933 
timeout
 = (
IOCTL_RESP_TIMEOUT
 / 1000Ë* 
HZ
;

4936 
	`dhd_os_sdu∆ock
(
dhd
);

4937 
	`waô_evít_timeout
(
dhdöfo
->
˘æ_waô
, (*
lockv¨
 =
FALSE
), 
timeout
);

4938 
	`dhd_os_sdlock
(
dhd
);

4941 
	}
}

4943 
	$dhd_waô_evít_wakeup
(
dhd_pub_t
 *
dhd
)

4945 #i‡1 && (
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 0))

4946 
dhd_öfo
 *
dhdöfo
 = 
dhd
->
öfo
;

4947 i‡(
	`waôqueue_a˘ive
(&
dhdöfo
->
˘æ_waô
))

4948 
	`wake_up
(&
dhdöfo
->
˘æ_waô
);

4951 
	}
}

4954 
	$dhd_dev_ª£t
(
√t_devi˚
 *
dev
, 
uöt8
 
Êag
)

4956 
ªt
;

4958 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
dev
);

4960 i‡(
Êag
 =
TRUE
) {

4962 i‡(
	`dhd_wl_io˘l_cmd
(&
dhd
->
pub
, 
WLC_DOWN
, 
NULL
, 0, 
TRUE
, 0) < 0) {

4963 
	`DHD_TRACE
(("%s: w»dow¿Áûed\n", 
__FUNCTION__
));

4967 
ªt
 = 
	`dhd_bus_devª£t
(&
dhd
->
pub
, 
Êag
);

4968 i‡(
ªt
) {

4969 
	`DHD_ERROR
(("%s: dhd_bus_devª£t: %d\n", 
__FUNCTION__
, 
ªt
));

4970  
ªt
;

4973  
ªt
;

4974 
	}
}

4976 
	$√t_os_£t_su•íd_dißbÀ
(
√t_devi˚
 *
dev
, 
vÆ
)

4978 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
dev
);

4979 
ªt
 = 0;

4981 i‡(
dhd
) {

4982 
ªt
 = 
dhd
->
pub
.
su•íd_dißbÀ_Êag
;

4983 
dhd
->
pub
.
su•íd_dißbÀ_Êag
 = 
vÆ
;

4985  
ªt
;

4986 
	}
}

4988 
	$√t_os_£t_su•íd
(
√t_devi˚
 *
dev
, 
vÆ
, 
f‹˚
)

4990 
ªt
 = 0;

4991 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
dev
);

4993 i‡(
dhd
) {

4994 #i‡
	`deföed
(
CONFIG_HAS_EARLYSUSPEND
Ë&& deföed(
DHD_USE_EARLYSUSPEND
)

4995 
ªt
 = 
	`dhd_£t_su•íd
(
vÆ
, &
dhd
->
pub
);

4997 
ªt
 = 
	`dhd_su•íd_ªsume_hñ≥r
(
dhd
, 
vÆ
, 
f‹˚
);

4999 #ifde‡
WL_CFG80211


5000 
	`wl_cfg80211_upd©e_powî_mode
(
dev
);

5003  
ªt
;

5004 
	}
}

5006 
	$√t_os_£t_su•íd_b˙_li_dtim
(
√t_devi˚
 *
dev
, 
vÆ
)

5008 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
dev
);

5010 i‡(
dhd
)

5011 
dhd
->
pub
.
su•íd_b˙_li_dtim
 = 
vÆ
;

5014 
	}
}

5016 #ifde‡
PKT_FILTER_SUPPORT


5017 
	$√t_os_rxfûãr_add_ªmove
(
√t_devi˚
 *
dev
, 
add_ªmove
, 
num
)

5019 #i‚de‡
GAN_LITE_NAT_KEEPALIVE_FILTER


5020 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
dev
);

5021 *
fûãΩ
 = 
NULL
;

5022 
ªt
 = 0;

5024 i‡(!
dhd
 || (
num
 =
DHD_UNICAST_FILTER_NUM
) ||

5025 (
num
 =
DHD_MDNS_FILTER_NUM
))

5026  
ªt
;

5027 i‡(
num
 >
dhd
->
pub
.
pktfûãr_cou¡
)

5028  -
EINVAL
;

5029 i‡(
add_ªmove
) {

5030 
num
) {

5031 
DHD_BROADCAST_FILTER_NUM
:

5032 
fûãΩ
 = "101 0 0 0 0xFFFFFFFFFFFF 0xFFFFFFFFFFFF";

5034 
DHD_MULTICAST4_FILTER_NUM
:

5035 
fûãΩ
 = "102 0 0 0 0xFFFFFF 0x01005E";

5037 
DHD_MULTICAST6_FILTER_NUM
:

5038 
fûãΩ
 = "103 0 0 0 0xFFFF 0x3333";

5041  -
EINVAL
;

5044 
dhd
->
pub
.
pktfûãr
[
num
] = 
fûãΩ
;

5045 
	`dhd_pktfûãr_ofÊﬂd_£t
(&
dhd
->
pub
, dhd->pub.
pktfûãr
[
num
]);

5046  
ªt
;

5050 
	}
}

5052 
	$dhd_os_íabÀ_∑ckë_fûãr
(
dhd_pub_t
 *
dhdp
, 
vÆ
)

5055 
ªt
 = 0;

5062 i‡(
dhdp
 && dhdp->
up
) {

5063 i‡(
dhdp
->
ö_su•íd
) {

5064 i‡(!
vÆ
 || (vÆ && !
dhdp
->
su•íd_dißbÀ_Êag
))

5065 
	`dhd_íabÀ_∑ckë_fûãr
(
vÆ
, 
dhdp
);

5068  
ªt
;

5069 
	}
}

5072 
	$√t_os_íabÀ_∑ckë_fûãr
(
√t_devi˚
 *
dev
, 
vÆ
)

5074 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
dev
);

5076  
	`dhd_os_íabÀ_∑ckë_fûãr
(&
dhd
->
pub
, 
vÆ
);

5077 
	}
}

5081 
	$dhd_dev_öô_io˘l
(
√t_devi˚
 *
dev
)

5083 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
dev
);

5084  
	`dhd_¥eöô_io˘ls
(&
dhd
->
pub
);

5085 
	}
}

5087 #ifde‡
PNO_SUPPORT


5090 
	$dhd_dev_≤o_ª£t
(
√t_devi˚
 *
dev
)

5092 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
dev
);

5094  (
	`dhd_≤o_˛ón
(&
dhd
->
pub
));

5095 
	}
}

5100 
	$dhd_dev_≤o_íabÀ
(
√t_devi˚
 *
dev
, 
p‚_íabÀd
)

5102 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
dev
);

5104  (
	`dhd_≤o_íabÀ
(&
dhd
->
pub
, 
p‚_íabÀd
));

5105 
	}
}

5110 
	$dhd_dev_≤o_£t
(
√t_devi˚
 *
dev
, 
wlc_ssid_t
* 
ssids_loˇl
, 
nssid
,

5111 
ush‹t
 
sˇn_‰
, 
≤o_ª≥©
, 
≤o_‰eq_expo_max
)

5113 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
dev
);

5115  (
	`dhd_≤o_£t
(&
dhd
->
pub
, 
ssids_loˇl
, 
nssid
, 
sˇn_‰
, 
≤o_ª≥©
, 
≤o_‰eq_expo_max
));

5116 
	}
}

5120 
	$dhd_dev_gë_≤o_°©us
(
√t_devi˚
 *
dev
)

5122 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
dev
);

5124  (
	`dhd_≤o_gë_°©us
(&
dhd
->
pub
));

5125 
	}
}

5129 #i‡(
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 27)) && (1)

5130 
	$dhd_h™g_¥o˚ss
(
w‹k_°ru˘
 *
w‹k
)

5132 
dhd_öfo_t
 *
dhd
;

5133 
√t_devi˚
 *
dev
;

5135 
dhd
 = (
dhd_öfo_t
 *)
	`c⁄èöî_of
(
w‹k
, dhd_öfo_t, 
w‹k_h™g
);

5136 
dev
 = 
dhd
->
iÊi°
[0]->
√t
;

5138 i‡(
dev
) {

5139 
	`π∆_lock
();

5140 
	`dev_˛o£
(
dev
);

5141 
	`π∆_u∆ock
();

5142 #i‡
	`deföed
(
WL_WIRELESS_EXT
)

5143 
	`wl_iw_£nd_¥iv_evít
(
dev
, "HANG");

5145 #i‡
	`deföed
(
WL_CFG80211
)

5146 
	`wl_cfg80211_h™g
(
dev
, 
WLAN_REASON_UNSPECIFIED
);

5149 
	}
}

5151 
	$dhd_os_£nd_h™g_mesßge
(
dhd_pub_t
 *
dhdp
)

5153 
ªt
 = 0;

5154 i‡(
dhdp
) {

5155 i‡(!
dhdp
->
h™g_was_£¡
) {

5156 
dhdp
->
h™g_was_£¡
 = 1;

5157 
	`scheduÀ_w‹k
(&
dhdp
->
öfo
->
w‹k_h™g
);

5160  
ªt
;

5161 
	}
}

5163 
	$√t_os_£nd_h™g_mesßge
(
√t_devi˚
 *
dev
)

5165 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
dev
);

5166 
ªt
 = 0;

5168 i‡(
dhd
)

5169 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27))

5170 
ªt
 = 
	`dhd_os_£nd_h™g_mesßge
(&
dhd
->
pub
);

5172 
ªt
 = 
	`wl_cfg80211_h™g
(
dev
, 
WLAN_REASON_UNSPECIFIED
);

5174  
ªt
;

5175 
	}
}

5178 
	$dhd_bus_cou¡ry_£t
(
√t_devi˚
 *
dev
, 
wl_cou¡ry_t
 *
c•ec
)

5180 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
dev
);

5181 i‡(
dhd
 && dhd->
pub
.
up
) {

5182 
	`mem˝y
(&
dhd
->
pub
.
dhd_c•ec
, 
c•ec
, (
wl_cou¡ry_t
));

5183 #ifde‡
WL_CFG80211


5184 
	`wl_upd©e_wùhyb™ds
(
NULL
, 
åue
);

5187 
	}
}

5188 
	$dhd_bus_b™d_£t
(
√t_devi˚
 *
dev
, 
uöt
 
b™d
)

5190 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
dev
);

5191 i‡(
dhd
 && dhd->
pub
.
up
) {

5192 #ifde‡
WL_CFG80211


5193 
	`wl_upd©e_wùhyb™ds
(
NULL
, 
åue
);

5196 
	}
}

5199 
	$dhd_√t_if_lock
(
√t_devi˚
 *
dev
)

5201 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
dev
);

5202 
	`dhd_√t_if_lock_loˇl
(
dhd
);

5203 
	}
}

5205 
	$dhd_√t_if_u∆ock
(
√t_devi˚
 *
dev
)

5207 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
dev
);

5208 
	`dhd_√t_if_u∆ock_loˇl
(
dhd
);

5209 
	}
}

5211 
	$dhd_√t_if_lock_loˇl
(
dhd_öfo_t
 *
dhd
)

5213 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 25)) && 1

5214 i‡(
dhd
)

5215 
	`muãx_lock
(&
dhd
->
dhd_√t_if_muãx
);

5217 
	}
}

5219 
	$dhd_√t_if_u∆ock_loˇl
(
dhd_öfo_t
 *
dhd
)

5221 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 25)) && 1

5222 i‡(
dhd
)

5223 
	`muãx_u∆ock
(&
dhd
->
dhd_√t_if_muãx
);

5225 
	}
}

5227 
	$dhd_su•íd_lock
(
dhd_pub_t
 *
pub
)

5229 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 25)) && 1

5230 
dhd_öfo_t
 *
dhd
 = (dhd_öfo_à*)(
pub
->
öfo
);

5231 i‡(
dhd
)

5232 
	`muãx_lock
(&
dhd
->
dhd_su•íd_muãx
);

5234 
	}
}

5236 
	$dhd_su•íd_u∆ock
(
dhd_pub_t
 *
pub
)

5238 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 25)) && 1

5239 
dhd_öfo_t
 *
dhd
 = (dhd_öfo_à*)(
pub
->
öfo
);

5240 i‡(
dhd
)

5241 
	`muãx_u∆ock
(&
dhd
->
dhd_su•íd_muãx
);

5243 
	}
}

5245 
	$dhd_os_•ö_lock
(
dhd_pub_t
 *
pub
)

5247 
dhd_öfo_t
 *
dhd
 = (dhd_öfo_à*)(
pub
->
öfo
);

5248 
Êags
 = 0;

5250 i‡(
dhd
)

5251 
	`•ö_lock_úqßve
(&
dhd
->
dhd_lock
, 
Êags
);

5253  
Êags
;

5254 
	}
}

5256 
	$dhd_os_•ö_u∆ock
(
dhd_pub_t
 *
pub
, 
Êags
)

5258 
dhd_öfo_t
 *
dhd
 = (dhd_öfo_à*)(
pub
->
öfo
);

5260 i‡(
dhd
)

5261 
	`•ö_u∆ock_úqª°‹e
(&
dhd
->
dhd_lock
, 
Êags
);

5262 
	}
}

5265 
	$dhd_gë_≥nd_8021x_˙t
(
dhd_öfo_t
 *
dhd
)

5267  (
	`©omic_ªad
(&
dhd
->
≥nd_8021x_˙t
));

5268 
	}
}

5270 
	#MAX_WAIT_FOR_8021X_TX
 25

	)

5273 
	$dhd_waô_≥nd8021x
(
√t_devi˚
 *
dev
)

5275 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
dev
);

5276 
timeout
 = 
	`m£cs_to_jiffõs
(10);

5277 
¡imes
 = 
MAX_WAIT_FOR_8021X_TX
;

5278 
≥nd
 = 
	`dhd_gë_≥nd_8021x_˙t
(
dhd
);

5280 
¡imes
 && 
≥nd
) {

5281 i‡(
≥nd
) {

5282 
	`£t_cuºít_°©e
(
TASK_INTERRUPTIBLE
);

5283 
	`scheduÀ_timeout
(
timeout
);

5284 
	`£t_cuºít_°©e
(
TASK_RUNNING
);

5285 
¡imes
--;

5287 
≥nd
 = 
	`dhd_gë_≥nd_8021x_˙t
(
dhd
);

5289 i‡(
¡imes
 == 0)

5290 
	`DHD_ERROR
(("%s: TIMEOUT\n", 
__FUNCTION__
));

5291  
≥nd
;

5292 
	}
}

5294 #ifde‡
DHD_DEBUG


5296 
	$wrôe_to_fûe
(
dhd_pub_t
 *
dhd
, 
uöt8
 *
buf
, 
size
)

5298 
ªt
 = 0;

5299 
fûe
 *
Â
;

5300 
mm_£gmít_t
 
ﬁd_fs
;

5301 
loff_t
 
pos
 = 0;

5304 
ﬁd_fs
 = 
	`gë_fs
();

5305 
	`£t_fs
(
KERNEL_DS
);

5308 
Â
 = 
	`fûp_›í
("/tmp/mem_dump", 
O_WRONLY
|
O_CREAT
, 0640);

5309 i‡(!
Â
) {

5310 
	`¥ötf
("%s: o≥¿fûêîr‹\n", 
__FUNCTION__
);

5311 
ªt
 = -1;

5312 
exô
;

5316 
Â
->
f_›
->
	`wrôe
(Â, 
buf
, 
size
, &
pos
);

5318 
exô
:

5320 
	`MFREE
(
dhd
->
osh
, 
buf
, 
size
);

5322 i‡(
Â
)

5323 
	`fûp_˛o£
(
Â
, 
cuºít
->
fûes
);

5325 
	`£t_fs
(
ﬁd_fs
);

5327  
ªt
;

5328 
	}
}

5331 
	$dhd_os_wake_lock_timeout
(
dhd_pub_t
 *
pub
)

5333 
dhd_öfo_t
 *
dhd
 = (dhd_öfo_à*)(
pub
->
öfo
);

5334 
Êags
;

5335 
ªt
 = 0;

5337 i‡(
dhd
) {

5338 
	`•ö_lock_úqßve
(&
dhd
->
wakñock_•ölock
, 
Êags
);

5339 
ªt
 = 
dhd
->
wakñock_rx_timeout_íabÀ
 > dhd->
wakñock_˘æ_timeout_íabÀ
 ?

5340 
dhd
->
wakñock_rx_timeout_íabÀ
 : dhd->
wakñock_˘æ_timeout_íabÀ
;

5341 #ifde‡
CONFIG_HAS_WAKELOCK


5342 i‡(
dhd
->
wakñock_rx_timeout_íabÀ
)

5343 
	`wake_lock_timeout
(
dhd
->
wl_rxwake
,

5344 
	`m£cs_to_jiffõs
(
dhd
->
wakñock_rx_timeout_íabÀ
));

5345 i‡(
dhd
->
wakñock_˘æ_timeout_íabÀ
)

5346 
	`wake_lock_timeout
(
dhd
->
wl_˘æwake
,

5347 
	`m£cs_to_jiffõs
(
dhd
->
wakñock_˘æ_timeout_íabÀ
));

5349 
dhd
->
wakñock_rx_timeout_íabÀ
 = 0;

5350 
dhd
->
wakñock_˘æ_timeout_íabÀ
 = 0;

5351 
	`•ö_u∆ock_úqª°‹e
(&
dhd
->
wakñock_•ölock
, 
Êags
);

5353  
ªt
;

5354 
	}
}

5356 
	$√t_os_wake_lock_timeout
(
√t_devi˚
 *
dev
)

5358 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
dev
);

5359 
ªt
 = 0;

5361 i‡(
dhd
)

5362 
ªt
 = 
	`dhd_os_wake_lock_timeout
(&
dhd
->
pub
);

5363  
ªt
;

5364 
	}
}

5366 
	$dhd_os_wake_lock_rx_timeout_íabÀ
(
dhd_pub_t
 *
pub
, 
vÆ
)

5368 
dhd_öfo_t
 *
dhd
 = (dhd_öfo_à*)(
pub
->
öfo
);

5369 
Êags
;

5371 i‡(
dhd
) {

5372 
	`•ö_lock_úqßve
(&
dhd
->
wakñock_•ölock
, 
Êags
);

5373 i‡(
vÆ
 > 
dhd
->
wakñock_rx_timeout_íabÀ
)

5374 
dhd
->
wakñock_rx_timeout_íabÀ
 = 
vÆ
;

5375 
	`•ö_u∆ock_úqª°‹e
(&
dhd
->
wakñock_•ölock
, 
Êags
);

5378 
	}
}

5380 
	$dhd_os_wake_lock_˘æ_timeout_íabÀ
(
dhd_pub_t
 *
pub
, 
vÆ
)

5382 
dhd_öfo_t
 *
dhd
 = (dhd_öfo_à*)(
pub
->
öfo
);

5383 
Êags
;

5385 i‡(
dhd
) {

5386 
	`•ö_lock_úqßve
(&
dhd
->
wakñock_•ölock
, 
Êags
);

5387 i‡(
vÆ
 > 
dhd
->
wakñock_˘æ_timeout_íabÀ
)

5388 
dhd
->
wakñock_˘æ_timeout_íabÀ
 = 
vÆ
;

5389 
	`•ö_u∆ock_úqª°‹e
(&
dhd
->
wakñock_•ölock
, 
Êags
);

5392 
	}
}

5394 
	$√t_os_wake_lock_rx_timeout_íabÀ
(
√t_devi˚
 *
dev
, 
vÆ
)

5396 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
dev
);

5397 
ªt
 = 0;

5399 i‡(
dhd
)

5400 
ªt
 = 
	`dhd_os_wake_lock_rx_timeout_íabÀ
(&
dhd
->
pub
, 
vÆ
);

5401  
ªt
;

5402 
	}
}

5404 
	$√t_os_wake_lock_˘æ_timeout_íabÀ
(
√t_devi˚
 *
dev
, 
vÆ
)

5406 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
dev
);

5407 
ªt
 = 0;

5409 i‡(
dhd
)

5410 
ªt
 = 
	`dhd_os_wake_lock_˘æ_timeout_íabÀ
(&
dhd
->
pub
, 
vÆ
);

5411  
ªt
;

5412 
	}
}

5414 
	$dhd_os_wake_lock
(
dhd_pub_t
 *
pub
)

5416 
dhd_öfo_t
 *
dhd
 = (dhd_öfo_à*)(
pub
->
öfo
);

5417 
Êags
;

5418 
ªt
 = 0;

5420 i‡(
dhd
) {

5421 
	`•ö_lock_úqßve
(&
dhd
->
wakñock_•ölock
, 
Êags
);

5422 #ifde‡
CONFIG_HAS_WAKELOCK


5423 i‡(!
dhd
->
wakñock_cou¡î
)

5424 
	`wake_lock
(
dhd
->
wl_wifi
);

5426 
dhd
->
wakñock_cou¡î
++;

5427 
ªt
 = 
dhd
->
wakñock_cou¡î
;

5428 
	`•ö_u∆ock_úqª°‹e
(&
dhd
->
wakñock_•ölock
, 
Êags
);

5430  
ªt
;

5431 
	}
}

5433 
	$√t_os_wake_lock
(
√t_devi˚
 *
dev
)

5435 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
dev
);

5436 
ªt
 = 0;

5438 i‡(
dhd
)

5439 
ªt
 = 
	`dhd_os_wake_lock
(&
dhd
->
pub
);

5440  
ªt
;

5441 
	}
}

5443 
	$dhd_os_wake_u∆ock
(
dhd_pub_t
 *
pub
)

5445 
dhd_öfo_t
 *
dhd
 = (dhd_öfo_à*)(
pub
->
öfo
);

5446 
Êags
;

5447 
ªt
 = 0;

5449 
	`dhd_os_wake_lock_timeout
(
pub
);

5450 i‡(
dhd
) {

5451 
	`•ö_lock_úqßve
(&
dhd
->
wakñock_•ölock
, 
Êags
);

5452 i‡(
dhd
->
wakñock_cou¡î
) {

5453 
dhd
->
wakñock_cou¡î
--;

5454 #ifde‡
CONFIG_HAS_WAKELOCK


5455 i‡(!
dhd
->
wakñock_cou¡î
)

5456 
	`wake_u∆ock
(
dhd
->
wl_wifi
);

5458 
ªt
 = 
dhd
->
wakñock_cou¡î
;

5460 
	`•ö_u∆ock_úqª°‹e
(&
dhd
->
wakñock_•ölock
, 
Êags
);

5462  
ªt
;

5463 
	}
}

5465 
	$dhd_os_check_wakñock
(*
dhdp
)

5467 #ifde‡
CONFIG_HAS_WAKELOCK


5468 
dhd_pub_t
 *
pub
 = (dhd_pub_à*)
dhdp
;

5469 
dhd_öfo_t
 *
dhd
;

5471 i‡(!
pub
)

5473 
dhd
 = (
dhd_öfo_t
 *)(
pub
->
öfo
);

5476 i‡(
dhd
 && (
	`wake_lock_a˘ive
(dhd->
wl_wifi
) ||

5477 (
	`wake_lock_a˘ive
(
dhd
->
wl_wdwake
))))

5481 
	}
}

5482 
	$√t_os_wake_u∆ock
(
√t_devi˚
 *
dev
)

5484 
dhd_öfo_t
 *
dhd
 = *(dhd_öfo_à**)
	`√tdev_¥iv
(
dev
);

5485 
ªt
 = 0;

5487 i‡(
dhd
)

5488 
ªt
 = 
	`dhd_os_wake_u∆ock
(&
dhd
->
pub
);

5489  
ªt
;

5490 
	}
}

5492 
	$dhd_os_wd_wake_lock
(
dhd_pub_t
 *
pub
)

5494 
dhd_öfo_t
 *
dhd
 = (dhd_öfo_à*)(
pub
->
öfo
);

5495 
Êags
;

5496 
ªt
 = 0;

5498 i‡(
dhd
) {

5499 
	`•ö_lock_úqßve
(&
dhd
->
wakñock_•ölock
, 
Êags
);

5500 #ifde‡
CONFIG_HAS_WAKELOCK


5502 i‡(!
dhd
->
wakñock_wd_cou¡î
) {

5503 i‡(
dhd
->
wl_wdwake
)

5504 
	`wake_lock
(
dhd
->
wl_wdwake
);

5506 
	`•ö_u∆ock_úqª°‹e
(&
dhd
->
wakñock_•ölock
, 
Êags
);

5511 
dhd
->
wakñock_wd_cou¡î
++;

5512 
ªt
 = 
dhd
->
wakñock_wd_cou¡î
;

5513 
	`•ö_u∆ock_úqª°‹e
(&
dhd
->
wakñock_•ölock
, 
Êags
);

5515  
ªt
;

5516 
	}
}

5518 
	$dhd_os_wd_wake_u∆ock
(
dhd_pub_t
 *
pub
)

5520 
dhd_öfo_t
 *
dhd
 = (dhd_öfo_à*)(
pub
->
öfo
);

5521 
Êags
;

5522 
ªt
 = 0;

5524 i‡(
dhd
) {

5525 
	`•ö_lock_úqßve
(&
dhd
->
wakñock_•ölock
, 
Êags
);

5526 i‡(
dhd
->
wakñock_wd_cou¡î
) {

5527 
dhd
->
wakñock_wd_cou¡î
 = 0;

5528 #ifde‡
CONFIG_HAS_WAKELOCK


5529 
	`wake_u∆ock
(
dhd
->
wl_wdwake
);

5532 
	`•ö_u∆ock_úqª°‹e
(&
dhd
->
wakñock_•ölock
, 
Êags
);

5534  
ªt
;

5535 
	}
}

5536 
	$dhd_os_check_if_up
(*
dhdp
)

5538 
dhd_pub_t
 *
pub
 = (dhd_pub_à*)
dhdp
;

5540 i‡(!
pub
)

5542  
pub
->
up
;

5543 
	}
}

5546 
	$dhd_£t_vîsi⁄_öfo
(
dhd_pub_t
 *
dhdp
, *
fw
)

5548 
i
;

5550 
i
 = 
	`¢¥ötf
(
öfo_°rög
, (info_string),

5551 " Drivî: %s\¿ Fúmw¨e: %†", 
EPI_VERSION_STR
, 
fw
);

5553 i‡(!
dhdp
)

5556 
i
 = 
	`¢¥ötf
(&
öfo_°rög
[i], (info_string) - i,

5557 "\¿ Chù: %x Rev %x Pkg %x", 
	`dhd_bus_chù_id
(
dhdp
),

5558 
	`dhd_bus_chùªv_id
(
dhdp
), 
	`dhd_bus_chùpkg_id
(dhdp));

5559 
	}
}

5561 
	$dhd_io˘l_íåy_loˇl
(
√t_devi˚
 *
√t
, 
wl_io˘l_t
 *
ioc
, 
cmd
)

5563 
ifidx
;

5564 
ªt
 = 0;

5565 
dhd_öfo_t
 *
dhd
 = 
NULL
;

5567 i‡(!
√t
 || !
	`√tdev_¥iv
(net)) {

5568 
	`DHD_ERROR
(("%†övÆidÖ¨amëî\n", 
__FUNCTION__
));

5569  -
EINVAL
;

5572 
dhd
 = *(
dhd_öfo_t
 **)
	`√tdev_¥iv
(
√t
);

5573 
ifidx
 = 
	`dhd_√t2idx
(
dhd
, 
√t
);

5574 i‡(
ifidx
 =
DHD_BAD_IF
) {

5575 
	`DHD_ERROR
(("%†bad ifidx\n", 
__FUNCTION__
));

5576  -
ENODEV
;

5579 
	`DHD_OS_WAKE_LOCK
(&
dhd
->
pub
);

5580 
ªt
 = 
	`dhd_wl_io˘l
(&
dhd
->
pub
, 
ifidx
, 
ioc
, ioc->
buf
, ioc->
Àn
);

5581 
	`dhd_check_h™g
(
√t
, &
dhd
->
pub
, 
ªt
);

5582 
	`DHD_OS_WAKE_UNLOCK
(&
dhd
->
pub
);

5584  
ªt
;

5585 
	}
}

5587 
boﬁ
 
	$dhd_os_check_h™g
(
dhd_pub_t
 *
dhdp
, 
ifidx
, 
ªt
)

5589 
√t_devi˚
 *
√t
;

5591 
√t
 = 
	`dhd_idx2√t
(
dhdp
, 
ifidx
);

5592  
	`dhd_check_h™g
(
√t
, 
dhdp
, 
ªt
);

5593 
	}
}

5596 #ifde‡
PROP_TXSTATUS


5597 
dhd_wlfc_öãrÁ˚_íåy_upd©e
(* 
°©e
, 
ewlfc_mac_íåy_a˘i⁄_t
 
a˘i⁄
, 
uöt8
 
ifid
,

5598 
uöt8
 
i·y≥
, uöt8* 
ó
);

5599 
dhd_wlfc_FIFO¸edôm≠_upd©e
(* 
°©e
, 
uöt8
* 
¸edôs
);

5601 
	$dhd_wlfc_öãrÁ˚_evít
(
dhd_öfo
 *
dhd
,

5602 
ewlfc_mac_íåy_a˘i⁄_t
 
a˘i⁄
, 
uöt8
 
ifid
, uöt8 
i·y≥
, uöt8* 
ó
)

5604 
°©us
;

5606 
	`dhd_os_wlfc_block
(&
dhd
->
pub
);

5607 i‡(
dhd
->
pub
.
wlfc_°©e
 =
NULL
) {

5608 
	`dhd_os_wlfc_unblock
(&
dhd
->
pub
);

5609  
BCME_OK
;

5612 
°©us
 = 
	`dhd_wlfc_öãrÁ˚_íåy_upd©e
(
dhd
->
pub
.
wlfc_°©e
, 
a˘i⁄
, 
ifid
, 
i·y≥
, 
ó
);

5613 
	`dhd_os_wlfc_unblock
(&
dhd
->
pub
);

5614  
°©us
;

5615 
	}
}

5617 
	$dhd_wlfc_FIFO¸edôm≠_evít
(
dhd_öfo
 *
dhd
, 
uöt8
* 
evít_d©a
)

5619 
°©us
;

5621 
	`dhd_os_wlfc_block
(&
dhd
->
pub
);

5622 i‡(
dhd
->
pub
.
wlfc_°©e
 =
NULL
) {

5623 
	`dhd_os_wlfc_unblock
(&
dhd
->
pub
);

5624  
BCME_OK
;

5627 
°©us
 = 
	`dhd_wlfc_FIFO¸edôm≠_upd©e
(
dhd
->
pub
.
wlfc_°©e
, 
evít_d©a
);

5628 
	`dhd_os_wlfc_unblock
(&
dhd
->
pub
);

5629  
°©us
;

5630 
	}
}

5632 
	$dhd_wlfc_evít
(
dhd_öfo
 *
dhd
)

5634 
°©us
;

5636 
	`dhd_os_wlfc_block
(&
dhd
->
pub
);

5637 
°©us
 = 
	`dhd_wlfc_íabÀ
(&
dhd
->
pub
);

5638 
	`dhd_os_wlfc_unblock
(&
dhd
->
pub
);

5639  
°©us
;

5640 
	}
}

5643 #ifde‡
BCMDBGFS


5645 
	~<löux/debugfs.h
>

5647 
uöt32
 
dhd_ªadªgl
(*
bp
, uöt32 
addr
);

5648 
uöt32
 
dhd_wrôîegl
(*
bp
, uöt32 
addr
, uöt32 
d©a
);

5650 
	sdhd_dbgfs
 {

5651 
díåy
 *
	mdebugfs_dú
;

5652 
díåy
 *
	mdebugfs_mem
;

5653 
dhd_pub_t
 *
	mdhdp
;

5654 
uöt32
 
	msize
;

5655 } 
	tdhd_dbgfs_t
;

5657 
dhd_dbgfs_t
 
	gg_dbgfs
;

5660 
	$dhd_dbg_°©e_›í
(
öode
 *öode, 
fûe
 *file)

5662 
fûe
->
¥iv©e_d©a
 = 
öode
->
i_¥iv©e
;

5664 
	}
}

5666 
ssize_t


5667 
	$dhd_dbg_°©e_ªad
(
fûe
 *fûe, 
__u£r
 *
ubuf
,

5668 
size_t
 
cou¡
, 
loff_t
 *
µos
)

5670 
ssize_t
 
rvÆ
;

5671 
uöt32
 
tmp
;

5672 
loff_t
 
pos
 = *
µos
;

5673 
size_t
 
ªt
;

5675 i‡(
pos
 < 0)

5676  -
EINVAL
;

5677 i‡(
pos
 >
g_dbgfs
.
size
 || !
cou¡
)

5679 i‡(
cou¡
 > 
g_dbgfs
.
size
 - 
pos
)

5680 
cou¡
 = 
g_dbgfs
.
size
 - 
pos
;

5683 
tmp
 = 
	`dhd_ªadªgl
(
g_dbgfs
.
dhdp
->
bus
, 
fûe
->
f_pos
 & (~3));

5685 
ªt
 = 
	`c›y_to_u£r
(
ubuf
, &
tmp
, 4);

5686 i‡(
ªt
 =
cou¡
)

5687  -
EFAULT
;

5689 
cou¡
 -
ªt
;

5690 *
µos
 = 
pos
 + 
cou¡
;

5691 
rvÆ
 = 
cou¡
;

5693  
rvÆ
;

5694 
	}
}

5697 
ssize_t


5698 
	$dhd_debugfs_wrôe
(
fûe
 *fûe, c⁄° 
__u£r
 *
ubuf
, 
size_t
 
cou¡
, 
loff_t
 *
µos
)

5700 
loff_t
 
pos
 = *
µos
;

5701 
size_t
 
ªt
;

5702 
uöt32
 
buf
;

5704 i‡(
pos
 < 0)

5705  -
EINVAL
;

5706 i‡(
pos
 >
g_dbgfs
.
size
 || !
cou¡
)

5708 i‡(
cou¡
 > 
g_dbgfs
.
size
 - 
pos
)

5709 
cou¡
 = 
g_dbgfs
.
size
 - 
pos
;

5711 
ªt
 = 
	`c›y_‰om_u£r
(&
buf
, 
ubuf
, (
uöt32
));

5712 i‡(
ªt
 =
cou¡
)

5713  -
EFAULT
;

5716 
	`dhd_wrôîegl
(
g_dbgfs
.
dhdp
->
bus
, 
fûe
->
f_pos
 & (~3), 
buf
);

5718  
cou¡
;

5719 
	}
}

5722 
loff_t


5723 
	$dhd_debugfs_l£ek
(
fûe
 *fûe, 
loff_t
 
off
, 
whí˚
)

5725 
loff_t
 
pos
 = -1;

5727 
whí˚
) {

5729 
pos
 = 
off
;

5732 
pos
 = 
fûe
->
f_pos
 + 
off
;

5735 
pos
 = 
g_dbgfs
.
size
 - 
off
;

5737  (
pos
 < 0 ||Öo†> 
g_dbgfs
.
size
Ë? -
EINVAL
 : (
fûe
->
f_pos
 =Öos);

5738 
	}
}

5740 c⁄° 
fûe_›î©i⁄s
 
	gdhd_dbg_°©e_›s
 = {

5741 .
ªad
 = 
dhd_dbg_°©e_ªad
,

5742 .
	gwrôe
 = 
dhd_debugfs_wrôe
,

5743 .
	g›í
 = 
dhd_dbg_°©e_›í
,

5744 .
	gŒ£ek
 = 
dhd_debugfs_l£ek


5747 
	$dhd_dbg_¸óã
()

5749 i‡(
g_dbgfs
.
debugfs_dú
) {

5750 
g_dbgfs
.
debugfs_mem
 = 
	`debugfs_¸óã_fûe
("mem", 0644, g_dbgfs.
debugfs_dú
,

5751 
NULL
, &
dhd_dbg_°©e_›s
);

5753 
	}
}

5755 
	$dhd_dbg_öô
(
dhd_pub_t
 *
dhdp
)

5757 
îr
;

5759 
g_dbgfs
.
dhdp
 = dhdp;

5760 
g_dbgfs
.
size
 = 0x20000000;

5762 
g_dbgfs
.
debugfs_dú
 = 
	`debugfs_¸óã_dú
("dhd", 0);

5763 i‡(
	`IS_ERR
(
g_dbgfs
.
debugfs_dú
)) {

5764 
îr
 = 
	`PTR_ERR
(
g_dbgfs
.
debugfs_dú
);

5765 
g_dbgfs
.
debugfs_dú
 = 
NULL
;

5769 
	`dhd_dbg_¸óã
();

5772 
	}
}

5774 
	$dhd_dbg_ªmove
()

5776 
	`debugfs_ªmove
(
g_dbgfs
.
debugfs_mem
);

5777 
	`debugfs_ªmove
(
g_dbgfs
.
debugfs_dú
);

5779 
	`bzîo
((*Ë&
g_dbgfs
, (g_dbgfs));

5781 
	}
}

5784 #ifde‡
WLMEDIA_HTSF


5787 
	$dhd_htsf_addtxts
(
dhd_pub_t
 *
dhdp
, *
pktbuf
)

5789 
dhd_öfo_t
 *
dhd
 = (dhd_öfo_à*)(
dhdp
->
öfo
);

5790 
sk_buff
 *
skb
;

5791 
uöt32
 
htsf
 = 0;

5792 
uöt16
 
dp‹t
 = 0, 
ﬁdmagic
 = 0xACAC;

5793 *
p1
;

5794 
hts·s_t
 
ts
;

5798 
p1
 = (*Ë
	`PKTDATA
(
dhdp
->
osh
, 
pktbuf
);

5800 i‡(
	`PKTLEN
(
dhdp
->
osh
, 
pktbuf
Ë> 
HTSF_MINLEN
) {

5802 
	`mem˝y
(&
dp‹t
, 
p1
+40, 2);

5804 
dp‹t
 = 
	`¡oh16
(dport);

5809 i‡(
dp‹t
 >
t•‹t
 && dport <=Åsport + 20) {

5811 
skb
 = (
sk_buff
 *Ë
pktbuf
;

5813 
htsf
 = 
	`dhd_gë_htsf
(
dhd
, 0);

5814 
	`mem£t
(
skb
->
d©a
 + 44, 0, 2);

5815 
	`mem˝y
(
skb
->
d©a
+82, &
ﬁdmagic
, 2);

5816 
	`mem˝y
(
skb
->
d©a
+84, &
htsf
, 4);

5818 
	`mem£t
(&
ts
, 0, (
hts·s_t
));

5819 
ts
.
magic
 = 
HTSFMAGIC
;

5820 
ts
.
¥io
 = 
	`PKTPRIO
(
pktbuf
);

5821 
ts
.
£qnum
 = 
htsf_£qnum
++;

5822 
ts
.
c10
 = 
	`gë_cy˛es
();

5823 
ts
.
t10
 = 
htsf
;

5824 
ts
.
ídmagic
 = 
HTSFENDMAGIC
;

5826 
	`mem˝y
(
skb
->
d©a
 + 
HTSF_HOSTOFFSET
, &
ts
, (ts));

5828 
	}
}

5830 
	$dhd_dump_htsfhi°o
(
hi°o_t
 *
his
, *
s
)

5832 
pkt˙t
 = 0, 
curvÆ
 = 0, 
i
;

5833 
i
 = 0; i < (
NUMBIN
-2); i++) {

5834 
curvÆ
 += 500;

5835 
	`¥ötf
("%d ", 
his
->
bö
[
i
]);

5836 
pkt˙t
 +
his
->
bö
[
i
];

5838 
	`¥ötf
(" max: %d TŸPkt: %dÇeg: %d [%s]\n", 
his
->
bö
[
NUMBIN
-2], 
pkt˙t
,

5839 
his
->
bö
[
NUMBIN
-1], 
s
);

5840 
	}
}

5843 
	$s‹âobö
(
vÆue
, 
hi°o_t
 *
hi°o
)

5845 
i
, 
bövÆ
 = 0;

5847 i‡(
vÆue
 < 0) {

5848 
hi°o
->
bö
[
NUMBIN
-1]++;

5851 i‡(
vÆue
 > 
hi°o
->
bö
[
NUMBIN
-2])

5852 
hi°o
->
bö
[
NUMBIN
-2] = 
vÆue
;

5854 
i
 = 0; i < (
NUMBIN
-2); i++) {

5855 
bövÆ
 += 500;

5856 i‡(
vÆue
 <
bövÆ
) {

5857 
hi°o
->
bö
[
i
]++;

5861 
hi°o
->
bö
[
NUMBIN
-3]++;

5862 
	}
}

5865 
	$dhd_htsf_addrxts
(
dhd_pub_t
 *
dhdp
, *
pktbuf
)

5867 
dhd_öfo_t
 *
dhd
 = (dhd_öfo_à*)
dhdp
->
öfo
;

5868 
sk_buff
 *
skb
;

5869 *
p1
;

5870 
uöt16
 
ﬁd_magic
;

5871 
d1
, 
d2
, 
d3
, 
íd2íd
;

5872 
hts·s_t
 *
htsf_ts
;

5873 
uöt32
 
htsf
;

5875 
skb
 = 
	`PKTTONATIVE
(
dhdp
->
osh
, 
pktbuf
);

5876 
p1
 = (*)
	`PKTDATA
(
dhdp
->
osh
, 
pktbuf
);

5878 i‡(
	`PKTLEN
(
osh
, 
pktbuf
Ë> 
HTSF_MINLEN
) {

5879 
	`mem˝y
(&
ﬁd_magic
, 
p1
+78, 2);

5880 
htsf_ts
 = (
hts·s_t
*Ë(
p1
 + 
HTSF_HOSTOFFSET
 - 4);

5885 i‡(
htsf_ts
->
magic
 =
HTSFMAGIC
) {

5886 
htsf_ts
->
tE0
 = 
	`dhd_gë_htsf
(
dhd
, 0);

5887 
htsf_ts
->
cE0
 = 
	`gë_cy˛es
();

5890 i‡(
ﬁd_magic
 == 0xACAC) {

5892 
t•kt˙t
++;

5893 
htsf
 = 
	`dhd_gë_htsf
(
dhd
, 0);

5894 
	`mem˝y
(
skb
->
d©a
+92, &
htsf
, (
uöt32
));

5896 
	`mem˝y
(&
ts
[
tsidx
].
t1
, 
skb
->
d©a
+80, 16);

5898 
d1
 = 
ts
[
tsidx
].
t2
 -Ås[tsidx].
t1
;

5899 
d2
 = 
ts
[
tsidx
].
t3
 -Ås[tsidx].
t2
;

5900 
d3
 = 
ts
[
tsidx
].
t4
 -Ås[tsidx].
t3
;

5901 
íd2íd
 = 
ts
[
tsidx
].
t4
 -Ås[tsidx].
t1
;

5903 
	`s‹âobö
(
d1
, &
vi_d1
);

5904 
	`s‹âobö
(
d2
, &
vi_d2
);

5905 
	`s‹âobö
(
d3
, &
vi_d3
);

5906 
	`s‹âobö
(
íd2íd
, &
vi_d4
);

5908 i‡(
íd2íd
 > 0 &&Énd2íd > 
maxdñay
) {

5909 
maxdñay
 = 
íd2íd
;

5910 
maxdñaypkäo
 = 
t•kt˙t
;

5911 
	`mem˝y
(&
maxdñayts
, &
ts
[
tsidx
], 16);

5913 i‡(++
tsidx
 >
TSMAX
)

5914 
tsidx
 = 0;

5916 
	}
}

5918 
uöt32
 
	$dhd_gë_htsf
(
dhd_öfo_t
 *
dhd
, 
ifidx
)

5920 
uöt32
 
htsf
 = 0, 
cur_cy˛e
, 
dñè
, 
dñè_us
;

5921 
uöt32
 
Á˘‹
, 
ba£vÆ
, 
ba£vÆ2
;

5922 
cy˛es_t
 
t
;

5924 
t
 = 
	`gë_cy˛es
();

5925 
cur_cy˛e
 = 
t
;

5927 i‡(
cur_cy˛e
 > 
dhd
->
htsf
.
œ°_cy˛e
)

5928 
dñè
 = 
cur_cy˛e
 - 
dhd
->
htsf
.
œ°_cy˛e
;

5930 
dñè
 = 
cur_cy˛e
 + (0xFFFFFFFF - 
dhd
->
htsf
.
œ°_cy˛e
);

5933 
dñè
 = delta >> 4;

5935 i‡(
dhd
->
htsf
.
c€f
) {

5937 
Á˘‹
 = (
dhd
->
htsf
.
c€f
*10 + dhd->htsf.
c€fdec1
);

5938 
ba£vÆ
 = (
dñè
*10)/
Á˘‹
;

5939 
ba£vÆ2
 = (
dñè
*10)/(
Á˘‹
+1);

5940 
dñè_us
 = (
ba£vÆ
 - (((ba£vÆ - 
ba£vÆ2
Ë* 
dhd
->
htsf
.
c€fdec2
)) / 10);

5941 
htsf
 = (
dñè_us
 << 4Ë+ 
dhd
->htsf.
œ°_tsf
 + 
HTSF_BUS_DELAY
;

5944 
	`DHD_ERROR
(("-------dhd->htsf.coef = 0 -------\n"));

5947  
htsf
;

5948 
	}
}

5950 
	$dhd_dump_œãncy
()

5952 
i
, 
max
 = 0;

5953 
d1
, 
d2
, 
d3
, 
d4
, 
d5
;

5955 
	`¥ötf
("T1 T2 T3 T4 d1 d2Å4-t1 i \n");

5956 
i
 = 0; i < 
TSMAX
; i++) {

5957 
d1
 = 
ts
[
i
].
t2
 -Ås[i].
t1
;

5958 
d2
 = 
ts
[
i
].
t3
 -Ås[i].
t2
;

5959 
d3
 = 
ts
[
i
].
t4
 -Ås[i].
t3
;

5960 
d4
 = 
ts
[
i
].
t4
 -Ås[i].
t1
;

5961 
d5
 = 
ts
[
max
].
t4
-ts[max].
t1
;

5962 i‡(
d4
 > 
d5
 && d4 > 0) {

5963 
max
 = 
i
;

5965 
	`¥ötf
("%08X %08X %08X %08X \t%d %d %d %d i=%d\n",

5966 
ts
[
i
].
t1
,Ås[i].
t2
,Ås[i].
t3
,Ås[i].
t4
,

5967 
d1
, 
d2
, 
d3
, 
d4
, 
i
);

5970 
	`¥ötf
("cuºíàidx = %d \n", 
tsidx
);

5972 
	`¥ötf
("Highe°Ü©ícy %dÖkàno.%dÅŸÆ=%d\n", 
maxdñay
, 
maxdñaypkäo
, 
t•kt˙t
);

5973 
	`¥ötf
("%08X %08X %08X %08X \t%d %d %d %d\n",

5974 
maxdñayts
.
t1
, maxdñayts.
t2
, maxdñayts.
t3
, maxdñayts.
t4
,

5975 
maxdñayts
.
t2
 - maxdñayts.
t1
,

5976 
maxdñayts
.
t3
 - maxdñayts.
t2
,

5977 
maxdñayts
.
t4
 - maxdñayts.
t3
,

5978 
maxdñayts
.
t4
 - maxdñayts.
t1
);

5979 
	}
}

5983 
	$dhd_io˘l_htsf_gë
(
dhd_öfo_t
 *
dhd
, 
ifidx
)

5985 
wl_io˘l_t
 
ioc
;

5986 
buf
[32];

5987 
ªt
;

5988 
uöt32
 
s1
, 
s2
;

5990 
	stsf
 {

5991 
uöt32
 
low
;

5992 
uöt32
 
high
;

5993 } 
tsf_buf
;

5995 
	`mem£t
(&
ioc
, 0, (ioc));

5996 
	`mem£t
(&
tsf_buf
, 0, (tsf_buf));

5998 
ioc
.
cmd
 = 
WLC_GET_VAR
;

5999 
ioc
.
buf
 = buf;

6000 
ioc
.
Àn
 = (
uöt
)(
buf
);

6001 
ioc
.
£t
 = 
FALSE
;

6003 
	`°∫˝y
(
buf
, "tsf", (buf) - 1);

6004 
buf
[(buf) - 1] = '\0';

6005 
s1
 = 
	`dhd_gë_htsf
(
dhd
, 0);

6006 i‡((
ªt
 = 
	`dhd_wl_io˘l
(&
dhd
->
pub
, 
ifidx
, &
ioc
, ioc.
buf
, ioc.
Àn
)) < 0) {

6007 i‡(
ªt
 =-
EIO
) {

6008 
	`DHD_ERROR
(("%s:Åsf isÇot supported by device\n",

6009 
	`dhd_i‚ame
(&
dhd
->
pub
, 
ifidx
)));

6010  -
EOPNOTSUPP
;

6012  
ªt
;

6014 
s2
 = 
	`dhd_gë_htsf
(
dhd
, 0);

6016 
	`mem˝y
(&
tsf_buf
, 
buf
, (tsf_buf));

6017 
	`¥ötf
(" TSF_h=%04XÜo=%08X Calc:htsf=%08X, coef=%d.%d%d delta=%d ",

6018 
tsf_buf
.
high
,Åsf_buf.
low
, 
s2
, 
dhd
->
htsf
.
c€f
, dhd->htsf.
c€fdec1
,

6019 
dhd
->
htsf
.
c€fdec2
, 
s2
-
tsf_buf
.
low
);

6020 
	`¥ötf
("œ°tsf=%08XÜa°cy˛e=%08X\n", 
dhd
->
htsf
.
œ°_tsf
, dhd->htsf.
œ°_cy˛e
);

6022 
	}
}

6024 
	$htsf_upd©e
(
dhd_öfo_t
 *
dhd
, *
d©a
)

6026 
ul⁄g
 
cur_cy˛e
 = 0, 
¥ev_cy˛e
 = 0;

6027 
uöt32
 
htsf
, 
tsf_dñè
 = 0;

6028 
uöt32
 
hÁ˘‹
 = 0, 
cyc_dñè
, 
dec1
 = 0, 
dec2
, 
dec3
, 
tmp
;

6029 
ul⁄g
 
b
, 
a
;

6030 
cy˛es_t
 
t
;

6034 
t
 = 
	`gë_cy˛es
();

6036 
¥ev_cy˛e
 = 
cur_cy˛e
;

6037 
cur_cy˛e
 = 
t
;

6039 i‡(
cur_cy˛e
 > 
¥ev_cy˛e
)

6040 
cyc_dñè
 = 
cur_cy˛e
 - 
¥ev_cy˛e
;

6042 
b
 = 
cur_cy˛e
;

6043 
a
 = 
¥ev_cy˛e
;

6044 
cyc_dñè
 = 
cur_cy˛e
 + (0xFFFFFFFF - 
¥ev_cy˛e
);

6047 i‡(
d©a
 =
NULL
)

6048 
	`¥ötf
("Åsf updateátaÖointÉr isÇull \n");

6050 
	`mem˝y
(&
¥ev_tsf
, &
cur_tsf
, (
tsf_t
));

6051 
	`mem˝y
(&
cur_tsf
, 
d©a
, (
tsf_t
));

6053 i‡(
cur_tsf
.
low
 == 0) {

6054 
	`DHD_INFO
((" ---- 0 TSF, doÇot update,Ñeturn\n"));

6058 i‡(
cur_tsf
.
low
 > 
¥ev_tsf
.low)

6059 
tsf_dñè
 = (
cur_tsf
.
low
 - 
¥ev_tsf
.low);

6061 
	`DHD_INFO
((" ----ÅsfÜow is smaller cur_tsf= %08X,Örev_tsf=%08X, \n",

6062 
cur_tsf
.
low
, 
¥ev_tsf
.low));

6063 i‡(
cur_tsf
.
high
 > 
¥ev_tsf
.high) {

6064 
tsf_dñè
 = 
cur_tsf
.
low
 + (0xFFFFFFFF - 
¥ev_tsf
.low);

6065 
	`DHD_INFO
((" ---- Wø∞¨oundÅs‡couäîádju°ed TSF=%08X\n", 
tsf_dñè
));

6071 i‡(
tsf_dñè
) {

6072 
hÁ˘‹
 = 
cyc_dñè
 / 
tsf_dñè
;

6073 
tmp
 = (
cyc_dñè
 - (
hÁ˘‹
 * 
tsf_dñè
))*10;

6074 
dec1
 = 
tmp
/
tsf_dñè
;

6075 
dec2
 = ((
tmp
 - 
dec1
*
tsf_dñè
)*10) /Åsf_delta;

6076 
tmp
 = (tm∞- (
dec1
*
tsf_dñè
))*10;

6077 
dec3
 = ((
tmp
 - 
dec2
*
tsf_dñè
)*10) /Åsf_delta;

6079 i‡(
dec3
 > 4) {

6080 i‡(
dec2
 == 9) {

6081 
dec2
 = 0;

6082 i‡(
dec1
 == 9) {

6083 
dec1
 = 0;

6084 
hÁ˘‹
++;

6087 
dec1
++;

6091 
dec2
++;

6095 i‡(
hÁ˘‹
) {

6096 
htsf
 = ((
cyc_dñè
 * 10Ë/ (
hÁ˘‹
*10+
dec1
)Ë+ 
¥ev_tsf
.
low
;

6097 
dhd
->
htsf
.
c€f
 = 
hÁ˘‹
;

6098 
dhd
->
htsf
.
œ°_cy˛e
 = 
cur_cy˛e
;

6099 
dhd
->
htsf
.
œ°_tsf
 = 
cur_tsf
.
low
;

6100 
dhd
->
htsf
.
c€fdec1
 = 
dec1
;

6101 
dhd
->
htsf
.
c€fdec2
 = 
dec2
;

6104 
htsf
 = 
¥ev_tsf
.
low
;

6106 
	}
}

	@dhd_linux_sched.c

26 
	~<löux/kî√l.h
>

27 
	~<löux/moduÀ.h
>

28 
	~<löux/sched.h
>

29 
	~<ty≥defs.h
>

30 
	~<löuxvî.h
>

32 
	$£tScheduÀr
(
èsk_°ru˘
 *
p
, 
pﬁicy
, 
sched_∑øm
 *
∑øm
)

34 
rc
 = 0;

35 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 0))

36 
rc
 = 
	`sched_£tscheduÀr
(
p
, 
pﬁicy
, 
∑øm
);

38  
rc
;

39 
	}
}

	@dhd_proto.h

30 #i‚de‡
_dhd_¥Ÿo_h_


31 
	#_dhd_¥Ÿo_h_


	)

33 
	~<dhdio˘l.h
>

34 
	~<wlio˘l.h
>

36 #i‚de‡
IOCTL_RESP_TIMEOUT


37 
	#IOCTL_RESP_TIMEOUT
 2000

	)

45 
dhd_¥Ÿ_©èch
(
dhd_pub_t
 *
dhdp
);

48 
dhd_¥Ÿ_dëach
(
dhd_pub_t
 *
dhdp
);

53 
dhd_¥Ÿ_öô
(
dhd_pub_t
 *
dhdp
);

56 
dhd_¥Ÿ_°›
(
dhd_pub_t
 *
dhdp
);

57 #ifde‡
PROP_TXSTATUS


58 
dhd_wlfc_öô
(
dhd_pub_t
 *
dhd
);

59 
dhd_wlfc_deöô
(
dhd_pub_t
 *
dhd
);

65 
dhd_¥Ÿ_hdΩush
(
dhd_pub_t
 *, 
ifidx
, *
txp
);

68 
dhd_¥Ÿ_hdΩuŒ
(
dhd_pub_t
 *, *
ifidx
, *
rxp
, 
uch¨
 *
buf
, 
uöt
 *
Àn
);

71 
dhd_¥Ÿ_io˘l
(
dhd_pub_t
 *
dhd
, 
ifidx
, 
wl_io˘l_t
 * 
ioc
, * 
buf
, 
Àn
);

74 
dhd_¥Ÿ_˘l_com∂ëe
(
dhd_pub_t
 *
dhd
);

77 
dhd_¥Ÿ_iov¨_›
(
dhd_pub_t
 *
dhdp
, c⁄° *
«me
,

78 *
∑øms
, 
∂í
, *
¨g
, 
Àn
, 
boﬁ
 
£t
);

81 
dhd_¥Ÿ_dump
(
dhd_pub_t
 *
dhdp
, 
bcm°rbuf
 *
°rbuf
);

84 
dhd_¥Ÿ_d°©s
(
dhd_pub_t
 *
dhdp
);

86 
dhd_io˘l
(
dhd_pub_t
 * 
dhd_pub
, 
dhd_io˘l_t
 *
ioc
, * 
buf
, 
uöt
 
buÊí
);

88 
dhd_¥eöô_io˘ls
(
dhd_pub_t
 *
dhd
);

90 #ifde‡
PROP_TXSTATUS


91 
dhd_wlfc_íque_£ndq
(* 
°©e
, 
¥ec
, * 
p
);

92 
dhd_wlfc_commô_∑ckës
(* 
°©e
, 
f_commôpkt_t
 
fcommô
, * 
commô_˘x
);

93 
dhd_wlfc_˛ónup
(
dhd_pub_t
 *
dhd
);

96 
dhd_¥o˚ss_pkt_ª‹dî_öfo
(
dhd_pub_t
 *
dhd
, 
uch¨
 *
ª‹dî_öfo_buf
,

97 
uöt
 
ª‹dî_öfo_Àn
, **
pkt
, 
uöt32
 *
‰ì_buf_cou¡
);

103 #i‡
deföed
(
BDC
)

104 
	#DHD_PROTOCOL
 "bdc"

	)

105 #ñi‡
deföed
(
CDC
)

106 
	#DHD_PROTOCOL
 "cdc"

	)

107 #ñi‡
deföed
(
RNDIS
)

108 
	#DHD_PROTOCOL
 "∫dis"

	)

110 
	#DHD_PROTOCOL
 "unknown"

	)

	@dhd_sdio.c

27 
	~<ty≥defs.h
>

28 
	~<o¶.h
>

29 
	~<bcmsdh.h
>

31 #ifde‡
BCMEMBEDIMAGE


32 #ö˛udê
BCMEMBEDIMAGE


35 
	~<bcmdefs.h
>

36 
	~<bcmutûs.h
>

37 
	~<bcmídün.h
>

38 
	~<bcmdevs.h
>

40 
	~<siutûs.h
>

41 
	~<hndpmu.h
>

42 
	~<hndsoc.h
>

43 
	~<bcmsdpcm.h
>

44 #i‡
deföed
(
DHD_DEBUG
)

45 
	~<hndπe_¨må≠.h
>

46 
	~<hndπe_c⁄s.h
>

48 
	~<sbchùc.h
>

49 
	~<sbhnddma.h
>

51 
	~<sdio.h
>

52 
	~<sbsdio.h
>

53 
	~<sbsdpcmdev.h
>

54 
	~<bcmsdpcm.h
>

55 
	~<bcmsdbus.h
>

57 
	~<¥Ÿo/ëhî√t.h
>

58 
	~<¥Ÿo/802.1d.h
>

59 
	~<¥Ÿo/802.11.h
>

61 
	~<dngl_°©s.h
>

62 
	~<dhd.h
>

63 
	~<dhd_bus.h
>

64 
	~<dhd_¥Ÿo.h
>

65 
	~<dhd_dbg.h
>

66 
	~<dhdio˘l.h
>

67 
	~<sdiov¨.h
>

69 #i‚de‡
DHDSDIO_MEM_DUMP_FNAME


70 
	#DHDSDIO_MEM_DUMP_FNAME
 "mem_dump"

	)

73 
	#QLEN
 256

	)

74 
	#FCHI
 (
QLEN
 - 10)

	)

75 
	#FCLOW
 (
FCHI
 / 2)

	)

76 
	#PRIOMASK
 7

	)

78 
	#TXRETRIES
 2

	)

80 
	#DHD_RXBOUND
 50

	)

82 
	#DHD_TXBOUND
 20

	)

84 
	#DHD_TXMINMAX
 1

	)

86 
	#MEMBLOCK
 2048

	)

87 
	#MAX_NVRAMBUF_SIZE
 4096

	)

88 
	#MAX_DATA_BUF
 (32 * 1024Ë

	)

90 #i‚de‡
DHD_FIRSTREAD


91 
	#DHD_FIRSTREAD
 32

	)

93 #i‡!
ISPOWEROF2
(
DHD_FIRSTREAD
)

94 #îr‹ 
DHD_FIRSTREAD
 
is
 
nŸ
 
a
 
powî
 
of
 2!

97 #ifde‡
BCMSDIOH_TXGLOM


99 
	#SDPCM_HDRLEN
 (
SDPCM_FRAMETAG_LEN
 + 
SDPCM_HWEXT_LEN
 + 
SDPCM_SWHEADER_LEN
)

	)

103 
	#SDPCM_HDRLEN
 (
SDPCM_FRAMETAG_LEN
 + 
SDPCM_SWHEADER_LEN
)

	)

106 
	#SDPCM_HDRLEN_RX
 (
SDPCM_FRAMETAG_LEN
 + 
SDPCM_SWHEADER_LEN
)

	)

108 #ifde‡
SDTEST


109 
	#SDPCM_RESERVE
 (
SDPCM_HDRLEN
 + 
SDPCM_TEST_HDRLEN
 + 
DHD_SDALIGN
)

	)

111 
	#SDPCM_RESERVE
 (
SDPCM_HDRLEN
 + 
DHD_SDALIGN
)

	)

115 #i‚de‡
MAX_HDR_READ


116 
	#MAX_HDR_READ
 32

	)

118 #i‡!
ISPOWEROF2
(
MAX_HDR_READ
)

119 #îr‹ 
MAX_HDR_READ
 
is
 
nŸ
 
a
 
powî
 
of
 2!

122 
	#MAX_RX_DATASZ
 2048

	)

125 
	#DHD_WAIT_F2RDY
 3000

	)

132 #i‡(
PMU_MAX_TRANSITION_DLY
 <= 1000000)

133 #unde‡
PMU_MAX_TRANSITION_DLY


134 
	#PMU_MAX_TRANSITION_DLY
 1000000

	)

138 
	#DHD_INIT_CLKCTL1
 (
SBSDIO_FORCE_HW_CLKREQ_OFF
 | 
SBSDIO_ALP_AVAIL_REQ
)

	)

139 
	#DHD_INIT_CLKCTL2
 (
SBSDIO_FORCE_HW_CLKREQ_OFF
 | 
SBSDIO_FORCE_ALP
)

	)

142 
	#F2SYNC
 (
SDIO_REQ_4BYTE
 | 
SDIO_REQ_FIXED
)

	)

147 
	#PKTFREE2
(Ëi‡((
bus
->bu†!
SPI_BUS
Ë|| bus->
u£buÂoﬁ
) \

148 
	`PKTFREE
(
bus
->
dhd
->
osh
, 
pkt
, 
FALSE
);

	)

149 
DHD_SPINWAIT_SLEEP_INIT
(
sdioh_•öwaô_¶ìp
);

150 #i‡
deföed
(
OOB_INTR_ONLY
)

151 
bcmsdh_£t_úq
(
Êag
);

153 #ifde‡
PROP_TXSTATUS


154 
dhd_wlfc_txcom∂ëe
(
dhd_pub_t
 *
dhd
, *
txp
, 
boﬁ
 
suc˚ss
);

155 
dhd_wlfc_åiggî_pktcommô
(
dhd_pub_t
 *
dhd
);

157 #i‡(
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 25))

158 
DEFINE_MUTEX
(
_dhd_sdio_muãx_lock_
);

161 #ifde‡
_USI_NVRAM_FILE


162 (*
	tfun˝å
)(*
	tbus
, 
	tboﬁ
 
	twrôe
, 
	tuöt32
 
	taddªss
, 
	tuöt8
 *
	td©a
, 
	tuöt
 
	tsize
);

163 
	`ug_nvøm
(
bcmsdh_öfo_t
 *
sdh
,
o¶_t
 *
osh
, *
nvøm
, 
Àn
);

164 
	`ug_fw_¥ï¨e
(*
sdh
, *
osh
, 
uöt8
 *
mem±r
, 
uöt32
 
memÀn


165 , 
uöt32
 
bus_ømsize
, *
image
, **
¥iv
);

166 
	`ug_fw_dow∆ﬂd
(
uöt8
 *
mem±r
, 
uöt32
 
memÀn
,
fun˝å
 
fun˝
, *
bus
, *
¥iv
);

167 
	`ug_fw_˛o£
(*
osh
, *
¥iv
);

170 #ifde‡
DHD_DEBUG


172 
	#CONSOLE_LINE_MAX
 192

	)

173 
	#CONSOLE_BUFFER_MAX
 2024

	)

174 
	sdhd_c⁄sﬁe
 {

175 
uöt
 
cou¡
;

176 
uöt
 
log_addr
;

177 
hndπe_log_t
 
log
;

178 
uöt
 
bufsize
;

179 
uöt8
 *
buf
;

180 
uöt
 
œ°
;

181 } 
	tdhd_c⁄sﬁe_t
;

184 
	#REMAP_ENAB
(
bus
Ë((bus)->
ªm≠
)

	)

185 
	#REMAP_ISADDR
(
bus
, 
a
Ë((◊Ë>((bus)->
‹ig_ømsize
)Ë&& (◊Ë< ((bus)->
ømsize
)))

	)

186 
	#KSO_ENAB
(
bus
Ë((bus)->
kso
)

	)

187 
	#SR_ENAB
(
bus
Ë((bus)->
_§íab
)

	)

188 
	#SLPAUTO_ENAB
(
bus
Ë((
	`SR_ENAB
(bus)Ë&& ((bus)->
_¶∑uto
))

	)

189 
	#MIN_RSRC_ADDR
 (
SI_ENUM_BASE
 + 0x618)

	)

190 
	#MIN_RSRC_SR
 0x3

	)

191 
	#CORE_CAPEXT_ADDR
 (
SI_ENUM_BASE
 + 0x64c)

	)

192 
	#CORE_CAPEXT_SR_SUPPORTED_MASK
 (1 << 1)

	)

193 
	#RCTL_MACPHY_DISABLE_MASK
 (1 << 26)

	)

194 
	#RCTL_LOGIC_DISABLE_MASK
 (1 << 27)

	)

196 
	#OOB_WAKEUP_ENAB
(
bus
Ë((bus)->
_oobwakeup
)

	)

197 
	#GPIO_DEV_SRSTATE
 16

	)

198 
	#GPIO_DEV_SRSTATE_TIMEOUT
 320000

	)

199 
	#GPIO_DEV_WAKEUP
 17

	)

200 
	#CC_CHIPCTRL2_GPIO1_WAKEUP
 (1 << 0)

	)

202 
	#CC_PMUCC3
 (0x3)

	)

204 
	sdhd_bus
 {

205 
dhd_pub_t
 *
dhd
;

207 
bcmsdh_öfo_t
 *
sdh
;

208 
si_t
 *
sih
;

209 *
v¨s
;

210 
uöt
 
v¨sz
;

211 
uöt32
 
sbaddr
;

213 
sdpcmd_ªgs_t
 *
ªgs
;

214 
uöt
 
sdpcmªv
;

215 
uöt
 
¨mªv
;

216 
uöt
 
ømªv
;

217 
uöt32
 
ømsize
;

218 
uöt32
 
‹ig_ømsize
;

219 
uöt32
 
§memsize
;

221 
uöt32
 
bus
;

222 
uöt32
 
ho°ötmask
;

223 
uöt32
 
öt°©us
;

224 
boﬁ
 
dpc_sched
;

225 
boﬁ
 
fc°©e
;

227 
uöt16
 
˛_devid
;

228 *
fw_∑th
;

229 *
nv_∑th
;

230 c⁄° *
nvøm_∑øms
;

232 
uöt
 
blocksize
;

233 
uöt
 
roundup
;

235 
pktq
 
txq
;

236 
uöt8
 
Êowc⁄åﬁ
;

237 
uöt8
 
tx_£q
;

238 
uöt8
 
tx_max
;

240 
uöt8
 
hdrbuf
[
MAX_HDR_READ
 + 
DHD_SDALIGN
];

241 
uöt8
 *
rxhdr
;

242 
uöt16
 
√xéí
;

243 
uöt8
 
rx_£q
;

244 
boﬁ
 
rxskù
;

246 *
glomd
;

247 *
glom
;

248 
uöt
 
glomîr
;

250 
uöt8
 *
rxbuf
;

251 
uöt
 
rxbÀn
;

252 
uöt8
 *
rx˘l
;

253 
uöt8
 *
d©abuf
;

254 
uöt8
 *
d©≠å
;

255 
uöt
 
rxÀn
;

257 
uöt8
 
sdpcm_vî
;

259 
boﬁ
 
öå
;

260 
boﬁ
 
pﬁl
;

261 
boﬁ
 
ùíd
;

262 
boﬁ
 
ötdis
;

263 
uöt
 
öåcou¡
;

264 
uöt
 
œ°öås
;

265 
uöt
 
•urious
;

266 
uöt
 
pﬁÃ©e
;

267 
uöt
 
pﬁ…ick
;

268 
uöt
 
pﬁl˙t
;

270 #ifde‡
DHD_DEBUG


271 
dhd_c⁄sﬁe_t
 
c⁄sﬁe
;

272 
uöt
 
c⁄sﬁe_addr
;

275 
uöt
 
ªgÁûs
;

277 
uöt
 
˛k°©e
;

278 
boﬁ
 
a˘ivôy
;

279 
öt32
 
idÀtime
;

280 
öt32
 
idÀcou¡
;

281 
öt32
 
idÀ˛ock
;

282 
öt32
 
sd_divis‹
;

283 
öt32
 
sd_mode
;

284 
öt32
 
sd_rxchaö
;

285 
boﬁ
 
u£_rxchaö
;

286 
boﬁ
 
¶ìpög
;

287 
uöt
 
rxÊow_mode
;

288 
boﬁ
 
rxÊow
;

289 
uöt
 
¥ev_rxlim_hô
;

290 
boﬁ
 
Æp_⁄ly
;

292 
boﬁ
 
u£buÂoﬁ
;

294 #ifde‡
SDTEST


296 
boﬁ
 
ext_lo›
;

297 
uöt8
 
lo›id
;

300 
uöt
 
pktgí_‰eq
;

301 
uöt
 
pktgí_cou¡
;

302 
uöt
 
pktgí_¥öt
;

303 
uöt
 
pktgí_tŸÆ
;

304 
uöt
 
pktgí_möÀn
;

305 
uöt
 
pktgí_maxÀn
;

306 
uöt
 
pktgí_mode
;

307 
uöt
 
pktgí_°›
;

310 
uöt
 
pktgí_tick
;

311 
uöt
 
pktgí_±ick
;

312 
uöt
 
pktgí_£¡
;

313 
uöt
 
pktgí_rcvd
;

314 
uöt
 
pktgí_¥ev_time
;

315 
uöt
 
pktgí_¥ev_£¡
;

318 
uöt
 
pktgí_¥ev_rcvd
;

321 
uöt
 
pktgí_Áû
;

322 
uöt16
 
pktgí_Àn
;

323 
	#PKTGEN_RCV_IDLE
 (0)

	)

324 
	#PKTGEN_RCV_ONGOING
 (1)

	)

325 
uöt16
 
pktgí_rcv_°©e
;

326 
uöt
 
pktgí_rcvd_rcv£ssi⁄
;

330 
uöt
 
tx_sdîrs
;

331 
uöt
 
fcqueued
;

332 
uöt
 
rxπx
;

333 
uöt
 
rx_toﬁ⁄g
;

334 
uöt
 
rxc_îr‹s
;

335 
uöt
 
rx_hdrÁû
;

336 
uöt
 
rx_badhdr
;

337 
uöt
 
rx_bad£q
;

338 
uöt
 
fc_rcvd
;

339 
uöt
 
fc_xoff
;

340 
uöt
 
fc_x⁄
;

341 
uöt
 
rxglomÁû
;

342 
uöt
 
rxglom‰ames
;

343 
uöt
 
rxglompkts
;

344 
uöt
 
f2rxhdrs
;

345 
uöt
 
f2rxd©a
;

346 
uöt
 
f2txd©a
;

347 
uöt
 
f1ªgd©a
;

349 
uöt8
 *
˘æ_‰ame_buf
;

350 
uöt32
 
˘æ_‰ame_Àn
;

351 
boﬁ
 
˘æ_‰ame_°©
;

352 
uöt32
 
rxöt_mode
;

353 
boﬁ
 
ªm≠
;

357 
boﬁ
 
kso
;

358 
boﬁ
 
_¶∑uto
;

359 
boﬁ
 
_oobwakeup
;

360 
boﬁ
 
_§íab
;

361 
boﬁ
 
ªad‰ames
;

362 
boﬁ
 
ªqbus¶ìp
;

363 
uöt32
 
ª£tö°r
;

364 
uöt32
 
d⁄gÀ_øm_ba£
;

365 #ifde‡
BCMSDIOH_TXGLOM


366 *
glom_pkt_¨r
[
SDPCM_MAXGLOM_SIZE
];

367 
uöt16
 
glom_˙t
;

368 
uöt16
 
glom_tŸÆ_Àn
;

369 
boﬁ
 
glom_íabÀ
;

370 
uöt8
 
glom_mode
;

371 
uöt32
 
glomsize
;

373 } 
	tdhd_bus_t
;

376 
	#CLK_NONE
 0

	)

377 
	#CLK_SDONLY
 1

	)

378 
	#CLK_PENDING
 2

	)

379 
	#CLK_AVAIL
 3

	)

381 
	#DHD_NOPMU
(
dhd
Ë(
FALSE
)

	)

383 #ifde‡
DHD_DEBUG


384 
qcou¡
[
NUMPRIO
];

385 
tx_∑ckës
[
NUMPRIO
];

389 c⁄° 
uöt
 
dhd_de„ºed_tx
 = 1;

391 
uöt
 
dhd_w©chdog_ms
;

393 
	`dhd_os_wd_timî
(*
bus
, 
uöt
 
wdtick
);

396 
uöt
 
dhd_txbound
;

397 
uöt
 
dhd_rxbound
;

398 
uöt
 
dhd_txmömax
 = 
DHD_TXMINMAX
;

401 
	#DONGLE_MIN_MEMSIZE
 (128 *1024)

	)

402 
dhd_d⁄gÀ_memsize
;

404 
boﬁ
 
dhd_doÊow
;

405 
boﬁ
 
dhd_Æign˘l
;

407 
boﬁ
 
sd1idÀ
;

409 
boﬁ
 
ªåyd©a
;

410 
	#RETRYCHAN
(
ch™
Ë(((ch™Ë=
SDPCM_EVENT_CHANNEL
Ë|| 
ªåyd©a
)

	)

412 #i‡
	`deföed
(
SDIO_CRC_ERROR_FIX
)

413 
uöt
 
w©îm¨k
 = 48;

414 
uöt
 
mesbusy˘æ
 = 80;

416 c⁄° 
uöt
 
w©îm¨k
 = 8;

417 c⁄° 
uöt
 
mesbusy˘æ
 = 0;

419 c⁄° 
uöt
 
fú°ªad
 = 
DHD_FIRSTREAD
;

421 
	#HDATLEN
 (
fú°ªad
 - (
SDPCM_HDRLEN
))

	)

424 c⁄° 
uöt
 
ªåy_limô
 = 2;

427 
boﬁ
 
f‹˚Æign
;

429 
	#ALIGNMENT
 4

	)

431 #i‡
	`deföed
(
OOB_INTR_ONLY
Ë&& deföed(
HW_OOB
)

432 
	`bcmsdh_íabÀ_hw_oob_öå
(*
sdh
, 
boﬁ
 
íabÀ
);

435 #i‡
	`deföed
(
OOB_INTR_ONLY
Ë&& deföed(
SDIO_ISR_THREAD
)

436 #îr‹ 
OOB_INTR_ONLY
 
is
 
NOT
 
w‹kög
 
wôh
 
SDIO_ISR_THREAD


438 
	#PKTALIGN
(
osh
, 
p
, 
Àn
, 
Æign
) \

440 
uöt
 
d©Æign
; \

441 
d©Æign
 = (
uöçå
)
	`PKTDATA
((
osh
), (
p
)); \

442 
d©Æign
 = 
	`ROUNDUP
(d©Æign, (
Æign
)) - datalign; \

443 
	`ASSERT
(
d©Æign
 < (
Æign
)); \

444 
	`ASSERT
(
	`PKTLEN
((
osh
), (
p
)Ë>((
Àn
Ë+ 
d©Æign
)); \

445 i‡(
d©Æign
) \

446 
	`PKTPULL
((
osh
), (
p
), 
d©Æign
); \

447 
	`PKTSETLEN
((
osh
), (
p
), (
Àn
)); \

448 
	}
} 0)

	)

451 c⁄° 
uöt
 
	gmax_roundup
 = 512;

454 
boﬁ
 
	gdhd_ªadahód
;

458 
	#DATAOK
(
bus
) \

459 (((
uöt8
)(
bus
->
tx_max
 - bus->
tx_£q
) > 1) && \

460 (((
uöt8
)(
bus
->
tx_max
 - bus->
tx_£q
Ë& 0x80Ë=0))

	)

463 
	#TXCTLOK
(
bus
) \

464 (((
uöt8
)(
bus
->
tx_max
 - bus->
tx_£q
) != 0) && \

465 (((
uöt8
)(
bus
->
tx_max
 - bus->
tx_£q
Ë& 0x80Ë=0))

	)

468 
	#DATABUFCNT
(
bus
) \

469 ((
uöt8
)(
bus
->
tx_max
 - bus->
tx_£q
Ë- 1)

	)

473 
	#R_SDREG
(
ªgv¨
, 
ªgaddr
, 
ªåyv¨
) \

475 
ªåyv¨
 = 0; \

477 
ªgv¨
 = 
	`R_REG
(
bus
->
dhd
->
osh
, 
ªgaddr
); \

478 } 
	`bcmsdh_ªgÁû
(
bus
->
sdh
Ë&& (++
ªåyv¨
 <
ªåy_limô
)); \

479 i‡(
ªåyv¨
) { \

480 
bus
->
ªgÁûs
 +(
ªåyv¨
-1); \

481 i‡(
ªåyv¨
 > 
ªåy_limô
) { \

482 
	`DHD_ERROR
(("%s: FAILED" #regvar "READ, LINE %d\n", \

483 
__FUNCTION__
, 
__LINE__
)); \

484 
ªgv¨
 = 0; \

487 } 0)

	)

489 
	#W_SDREG
(
ªgvÆ
, 
ªgaddr
, 
ªåyv¨
) \

491 
ªåyv¨
 = 0; \

493 
	`W_REG
(
bus
->
dhd
->
osh
, 
ªgaddr
, 
ªgvÆ
); \

494 } 
	`bcmsdh_ªgÁû
(
bus
->
sdh
Ë&& (++
ªåyv¨
 <
ªåy_limô
)); \

495 i‡(
ªåyv¨
) { \

496 
bus
->
ªgÁûs
 +(
ªåyv¨
-1); \

497 i‡(
ªåyv¨
 > 
ªåy_limô
) \

498 
	`DHD_ERROR
(("%s: FAILED REGISTER WRITE, LINE %d\n", \

499 
__FUNCTION__
, 
__LINE__
)); \

501 } 0)

	)

503 
	#BUS_WAKE
(
bus
) \

505 
bus
->
idÀcou¡
 = 0; \

506 i‡((
bus
)->
¶ìpög
) \

507 
	`dhdsdio_bus¶ìp
((
bus
), 
FALSE
); \

508 } 0);

	)

527 
	#SDIO_DEVICE_HMB_RXINT
 0

	)

528 
	#SDIO_DEVICE_RXDATAINT_MODE_0
 1

	)

529 
	#SDIO_DEVICE_RXDATAINT_MODE_1
 2

	)

532 
	#FRAME_AVAIL_MASK
(
bus
) \

533 ((
bus
->
rxöt_mode
 =
SDIO_DEVICE_HMB_RXINT
Ë? 
I_HMB_FRAME_IND
 : 
I_XMTDATA_AVAIL
)

	)

535 
	#DHD_BUS
 
SDIO_BUS


	)

537 
	#PKT_AVAILABLE
(
bus
, 
öt°©us
Ë((öt°©usË& (
	`FRAME_AVAIL_MASK
(bus)))

	)

539 
	#HOSTINTMASK
 (
I_HMB_SW_MASK
 | 
I_CHIPACTIVE
)

	)

541 
	#GSPI_PR55150_BAILOUT


	)

543 #ifde‡
SDTEST


544 
dhdsdio_ã°rcv
(
dhd_bus_t
 *
bus
, *
pkt
, 
uöt
 
£q
);

545 
dhdsdio_sdã°_£t
(
dhd_bus_t
 *
bus
, 
uöt
 
cou¡
);

548 #ifde‡
DHD_DEBUG


549 
dhdsdio_checkdõd
(
dhd_bus_t
 *
bus
, *
d©a
, 
uöt
 
size
);

550 
dhd_£rülc⁄sﬁe
(
dhd_bus_t
 *
bus
, 
boﬁ
 
gë
, boﬁ 
íabÀ
, *
bcmîr‹
);

553 
dhdsdio_devˇp_£t
(
dhd_bus_t
 *
bus
, 
uöt8
 
ˇp
);

554 
dhdsdio_dow∆ﬂd_°©e
(
dhd_bus_t
 *
bus
, 
boﬁ
 
íãr
);

556 
dhdsdio_ªÀa£
(
dhd_bus_t
 *
bus
, 
o¶_t
 *
osh
);

557 
dhdsdio_ªÀa£_mÆloc
(
dhd_bus_t
 *
bus
, 
o¶_t
 *
osh
);

558 
dhdsdio_disc⁄√˘
(*
±r
);

559 
boﬁ
 
dhdsdio_chùm©ch
(
uöt16
 
chùid
);

560 
boﬁ
 
dhdsdio_¥obe_©èch
(
dhd_bus_t
 *
bus
, 
o¶_t
 *
osh
, *
sdh
,

561 * 
ªgsva
, 
uöt16
 
devid
);

562 
boﬁ
 
dhdsdio_¥obe_mÆloc
(
dhd_bus_t
 *
bus
, 
o¶_t
 *
osh
, *
sdh
);

563 
boﬁ
 
dhdsdio_¥obe_öô
(
dhd_bus_t
 *
bus
, 
o¶_t
 *
osh
, *
sdh
);

564 
dhdsdio_ªÀa£_d⁄gÀ
(
dhd_bus_t
 *
bus
, 
o¶_t
 *
osh
, 
boﬁ
 
d⁄gÀ_isﬁ©i⁄
,

565 
boﬁ
 
ª£t_Êag
);

567 
dhd_d⁄gÀ_£tmemsize
(
dhd_bus
 *
bus
, 
mem_size
);

568 
dhd_bcmsdh_ªcv_buf
(
dhd_bus_t
 *
bus
, 
uöt32
 
addr
, 
uöt
 
‚
, uöà
Êags
,

569 
uöt8
 *
buf
, 
uöt
 
nbyãs
,

570 *
pkt
, 
bcmsdh_cm∂t_‚_t
 
com∂ëe
, *
h™dÀ
);

571 
dhd_bcmsdh_£nd_buf
(
dhd_bus_t
 *
bus
, 
uöt32
 
addr
, 
uöt
 
‚
, uöà
Êags
,

572 
uöt8
 *
buf
, 
uöt
 
nbyãs
,

573 *
pkt
, 
bcmsdh_cm∂t_‚_t
 
com∂ëe
, *
h™dÀ
);

574 #ifde‡
BCMSDIOH_TXGLOM


575 
dhd_bcmsdh_glom_po°
(
dhd_bus_t
 *
bus
, 
uöt8
 *
‰ame
, 
uöt
 
Àn
);

576 
dhd_bcmsdh_glom_˛ór
(
dhd_bus_t
 *
bus
);

579 
boﬁ
 
dhdsdio_dow∆ﬂd_fúmw¨e
(
dhd_bus_t
 *
bus
, 
o¶_t
 *
osh
, *
sdh
);

580 
_dhdsdio_dow∆ﬂd_fúmw¨e
(
dhd_bus_t
 *
bus
);

582 
dhdsdio_dow∆ﬂd_code_fûe
(
dhd_bus_t
 *
bus
, *
image_∑th
);

583 
dhdsdio_dow∆ﬂd_nvøm
(
dhd_bus_t
 *
bus
);

584 #ifde‡
BCMEMBEDIMAGE


585 
dhdsdio_dow∆ﬂd_code_¨øy
(
dhd_bus_t
 *
bus
);

587 
dhdsdio_bus¶ìp
(
dhd_bus_t
 *
bus
, 
boﬁ
 
¶ìp
);

588 
dhdsdio_˛k˘l
(
dhd_bus_t
 *
bus
, 
uöt
 
èrgë
, 
boﬁ
 
≥ndok
);

589 
uöt8
 
dhdsdio_¶ìpc§_gë
(
dhd_bus_t
 *
bus
);

591 #ifde‡
WLMEDIA_HTSF


592 
	~<htsf.h
>

593 
uöt32
 
dhd_gë_htsf
(*
dhd
, 
ifidx
);

597 
	$dhd_d⁄gÀ_£tmemsize
(
dhd_bus
 *
bus
, 
mem_size
)

599 
öt32
 
mö_size
 = 
DONGLE_MIN_MEMSIZE
;

601 
	`DHD_ERROR
(("user: RestrictÅhe dongleÑam sizeÅo %d, mináccepted %d\n",

602 
dhd_d⁄gÀ_memsize
, 
mö_size
));

603 i‡((
dhd_d⁄gÀ_memsize
 > 
mö_size
) &&

604 (
dhd_d⁄gÀ_memsize
 < (
öt32
)
bus
->
‹ig_ømsize
))

605 
bus
->
ømsize
 = 
dhd_d⁄gÀ_memsize
;

606 
	}
}

609 
	$dhdsdio_£t_süddr_wödow
(
dhd_bus_t
 *
bus
, 
uöt32
 
addªss
)

611 
îr
 = 0;

612 
	`bcmsdh_cfg_wrôe
(
bus
->
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_SBADDRLOW
,

613 (
addªss
 >> 8Ë& 
SBSDIO_SBADDRLOW_MASK
, &
îr
);

614 i‡(!
îr
)

615 
	`bcmsdh_cfg_wrôe
(
bus
->
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_SBADDRMID
,

616 (
addªss
 >> 16Ë& 
SBSDIO_SBADDRMID_MASK
, &
îr
);

617 i‡(!
îr
)

618 
	`bcmsdh_cfg_wrôe
(
bus
->
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_SBADDRHIGH
,

619 (
addªss
 >> 24Ë& 
SBSDIO_SBADDRHIGH_MASK
, &
îr
);

620  
îr
;

621 
	}
}

624 #ifde‡
USE_OOB_GPIO1


626 
	$dhdsdio_oobwakeup_öô
(
dhd_bus_t
 *
bus
)

628 
uöt32
 
vÆ
, 
addr
, 
d©a
;

630 
	`bcmsdh_gpioouãn
(
bus
->
sdh
, 
GPIO_DEV_WAKEUP
);

632 
addr
 = 
SI_ENUM_BASE
 + 
	`OFFSETOF
(
chù¸egs_t
, 
chùc⁄åﬁ_addr
);

633 
d©a
 = 
SI_ENUM_BASE
 + 
	`OFFSETOF
(
chù¸egs_t
, 
chùc⁄åﬁ_d©a
);

636 
	`bcmsdh_ªg_wrôe
(
bus
->
sdh
, 
addr
, 4, 2);

637 
vÆ
 = 
	`bcmsdh_ªg_ªad
(
bus
->
sdh
, 
d©a
, 4);

638 
vÆ
 |
CC_CHIPCTRL2_GPIO1_WAKEUP
;

639 
	`bcmsdh_ªg_wrôe
(
bus
->
sdh
, 
d©a
, 4, 
vÆ
);

641 
bus
->
_oobwakeup
 = 
TRUE
;

644 
	}
}

650 
boﬁ


651 
	$dhdsdio_§_ˇp
(
dhd_bus_t
 *
bus
)

653 
boﬁ
 
ˇp
 = 
FALSE
;

654 
uöt32
 
mö
 = 0, 
c‹e_ˇ≥xt
, 
addr
, 
d©a
;

655 i‡(
bus
->
sih
->
chù
 =
BCM4324_CHIP_ID
) {

656 
addr
 = 
SI_ENUM_BASE
 + 
	`OFFSETOF
(
chù¸egs_t
, 
chùc⁄åﬁ_addr
);

657 
d©a
 = 
SI_ENUM_BASE
 + 
	`OFFSETOF
(
chù¸egs_t
, 
chùc⁄åﬁ_d©a
);

658 
	`bcmsdh_ªg_wrôe
(
bus
->
sdh
, 
addr
, 4, 3);

659 
c‹e_ˇ≥xt
 = 
	`bcmsdh_ªg_ªad
(
bus
->
sdh
, 
d©a
, 4);

660 } i‡(
bus
->
sih
->
chù
 =
BCM4330_CHIP_ID
) {

661 
c‹e_ˇ≥xt
 = 
FALSE
;

662 } i‡(
bus
->
sih
->
chù
 =
BCM4335_CHIP_ID
) {

663 
c‹e_ˇ≥xt
 = 
TRUE
;

665 
c‹e_ˇ≥xt
 = 
	`bcmsdh_ªg_ªad
(
bus
->
sdh
, 
CORE_CAPEXT_ADDR
, 4);

666 
c‹e_ˇ≥xt
 = (c‹e_ˇ≥xà& 
CORE_CAPEXT_SR_SUPPORTED_MASK
);

668 i‡(!(
c‹e_ˇ≥xt
))

669  
FALSE
;

671 i‡(
bus
->
sih
->
chù
 =
BCM4324_CHIP_ID
) {

673 
mö
 = 
	`bcmsdh_ªg_ªad
(
bus
->
sdh
, 
MIN_RSRC_ADDR
, 4);

674 i‡(
mö
 =
MIN_RSRC_SR
)

675 
ˇp
 = 
TRUE
;

676 } i‡(
bus
->
sih
->
chù
 =
BCM4335_CHIP_ID
) {

677 
uöt32
 
íabvÆ
 = 0;

678 
addr
 = 
SI_ENUM_BASE
 + 
	`OFFSETOF
(
chù¸egs_t
, 
chùc⁄åﬁ_addr
);

679 
d©a
 = 
SI_ENUM_BASE
 + 
	`OFFSETOF
(
chù¸egs_t
, 
chùc⁄åﬁ_d©a
);

680 
	`bcmsdh_ªg_wrôe
(
bus
->
sdh
, 
addr
, 4, 
CC_PMUCC3
);

681 
íabvÆ
 = 
	`bcmsdh_ªg_ªad
(
bus
->
sdh
, 
d©a
, 4);

683 i‡(
íabvÆ
)

684 
ˇp
 = 
TRUE
;

686 
d©a
 = 
	`bcmsdh_ªg_ªad
(
bus
->
sdh
,

687 
SI_ENUM_BASE
 + 
	`OFFSETOF
(
chù¸egs_t
, 
ªã¡i⁄_˘l
), 4);

688 i‡((
d©a
 & (
RCTL_MACPHY_DISABLE_MASK
 | 
RCTL_LOGIC_DISABLE_MASK
)) == 0)

689 
ˇp
 = 
TRUE
;

692  
ˇp
;

693 
	}
}

696 
	$dhdsdio_§w¨_öô
(
dhd_bus_t
 *
bus
)

699 
	`bcmsdh_gpio_öô
(
bus
->
sdh
);

701 #ifde‡
USE_OOB_GPIO1


702 
	`dhdsdio_oobwakeup_öô
(
bus
);

707 
	}
}

710 
	$dhdsdio_§_öô
(
dhd_bus_t
 *
bus
)

712 
uöt8
 
vÆ
;

713 
îr
 = 0;

715 i‡((
bus
->
sih
->
chù
 =
BCM4334_CHIP_ID
Ë&& (bus->sih->
chùªv
 == 2))

716 
	`dhdsdio_§w¨_öô
(
bus
);

718 
vÆ
 = 
	`bcmsdh_cfg_ªad
(
bus
->
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_WAKEUPCTRL
, 
NULL
);

719 
vÆ
 |1 << 
SBSDIO_FUNC1_WCTRL_HTWAIT_SHIFT
;

720 
	`bcmsdh_cfg_wrôe
(
bus
->
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_WAKEUPCTRL
,

721 1 << 
SBSDIO_FUNC1_WCTRL_HTWAIT_SHIFT
, &
îr
);

722 
vÆ
 = 
	`bcmsdh_cfg_ªad
(
bus
->
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_WAKEUPCTRL
, 
NULL
);

725 
	`dhdsdio_devˇp_£t
(
bus
,

726 (
SDIOD_CCCR_BRCM_CARDCAP_CMD14_SUPPORT
 | 
SDIOD_CCCR_BRCM_CARDCAP_CMD14_EXT
));

728 
	`bcmsdh_cfg_wrôe
(
bus
->
sdh
, 
SDIO_FUNC_1
,

729 
SBSDIO_FUNC1_CHIPCLKCSR
, 
SBSDIO_FORCE_HT
, &
îr
);

731 
bus
->
_¶∑uto
 = 
dhd_¶∑uto
 ? 
TRUE
 : 
FALSE
;

733 
bus
->
_§íab
 = 
TRUE
;

736 
	}
}

743 
	$dhdsdio_˛k_kso_öô
(
dhd_bus_t
 *
bus
)

745 
uöt8
 
vÆ
;

746 
îr
 = 0;

749 
bus
->
kso
 = 
TRUE
;

755 
vÆ
 = 
	`bcmsdh_cfg_ªad
(
bus
->
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_SLEEPCSR
, 
NULL
);

756 i‡(!(
vÆ
 & 
SBSDIO_FUNC1_SLEEPCSR_KSO_MASK
)) {

757 
vÆ
 |(
SBSDIO_FUNC1_SLEEPCSR_KSO_EN
 << 
SBSDIO_FUNC1_SLEEPCSR_KSO_SHIFT
);

758 
	`bcmsdh_cfg_wrôe
(
bus
->
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_SLEEPCSR
, 
vÆ
, &
îr
);

759 i‡(
îr
)

760 
	`DHD_ERROR
(("%s: SBSDIO_FUNC1_SLEEPCSRÉº: 0x%x\n", 
__FUNCTION__
, 
îr
));

764 
	}
}

766 
	#KSO_DBG
(
x
)

	)

767 
	#MAX_KSO_ATTEMPTS
 64

	)

769 
	$dhdsdio_˛k_kso_íab
(
dhd_bus_t
 *
bus
, 
boﬁ
 
⁄
)

771 
uöt8
 
wr_vÆ
 = 0, 
rd_vÆ
, 
cmp_vÆ
, 
bmask
;

772 
îr
 = 0;

773 
åy_˙t
 = 0;

775 
	`KSO_DBG
(("%s> op:%s\n", 
__FUNCTION__
, (
⁄
 ? "KSO_SET" : "KSO_CLR")));

777 
wr_vÆ
 |(
⁄
 << 
SBSDIO_FUNC1_SLEEPCSR_KSO_SHIFT
);

779 
	`bcmsdh_cfg_wrôe
(
bus
->
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_SLEEPCSR
, 
wr_vÆ
, &
îr
);

781 i‡(
⁄
) {

782 
cmp_vÆ
 = 
SBSDIO_FUNC1_SLEEPCSR_KSO_MASK
 | 
SBSDIO_FUNC1_SLEEPCSR_DEVON_MASK
;

783 
bmask
 = 
cmp_vÆ
;

785 
	`m¶ìp
(3);

789 
cmp_vÆ
 = 0;

790 
bmask
 = 
SBSDIO_FUNC1_SLEEPCSR_KSO_MASK
;

794 
rd_vÆ
 = 
	`bcmsdh_cfg_ªad
(
bus
->
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_SLEEPCSR
, &
îr
);

795 i‡(((
rd_vÆ
 & 
bmask
Ë=
cmp_vÆ
Ë&& !
îr
)

798 
	`KSO_DBG
(("%s> KSO wr/rdÑëry:%d, ERR:%x \n", 
__FUNCTION__
, 
åy_˙t
, 
îr
));

799 
	`OSL_DELAY
(50);

801 
	`bcmsdh_cfg_wrôe
(
bus
->
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_SLEEPCSR
, 
wr_vÆ
, &
îr
);

803 } 
åy_˙t
++ < 
MAX_KSO_ATTEMPTS
);

806 i‡(
åy_˙t
 > 1) {

807 
	`KSO_DBG
(("%s> op:%s,Åry_cnt:%d,Ñd_val:%x, ERR:%x \n",

808 
__FUNCTION__
, (
⁄
 ? "KSO_SET" : "KSO_CLR"), 
åy_˙t
, 
rd_vÆ
, 
îr
));

811 i‡(
åy_˙t
 > 
MAX_KSO_ATTEMPTS
) {

812 
	`DHD_ERROR
(("%s> op:%s, ERROR:Åry_cnt:%d,Ñd_val:%x, ERR:%x \n",

813 
__FUNCTION__
, (
⁄
 ? "KSO_SET" : "KSO_CLR"), 
åy_˙t
, 
rd_vÆ
, 
îr
));

815  
îr
;

816 
	}
}

819 
	$dhdsdio_˛k_kso_iov¨
(
dhd_bus_t
 *
bus
, 
boﬁ
 
⁄
)

821 
îr
 = 0;

823 i‡(
⁄
 =
FALSE
) {

825 
	`BUS_WAKE
(
bus
);

826 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_AVAIL
, 
FALSE
);

828 
	`DHD_ERROR
(("%s: KSO dißbÀ clk: 0x%x\n", 
__FUNCTION__
,

829 
	`bcmsdh_cfg_ªad
(
bus
->
sdh
, 
SDIO_FUNC_1
,

830 
SBSDIO_FUNC1_CHIPCLKCSR
, &
îr
)));

831 
	`dhdsdio_˛k_kso_íab
(
bus
, 
FALSE
);

833 
	`DHD_ERROR
(("%s: KSOÉ«bÀ\n", 
__FUNCTION__
));

836 i‡(
bus
->
˛k°©e
 =
CLK_NONE
) {

837 
	`DHD_ERROR
(("%s: Reque° SD clk\n", 
__FUNCTION__
));

838 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_SDONLY
, 
FALSE
);

842 
	`dhdsdio_˛k_kso_íab
(
bus
, 
TRUE
);

843 
	`dhdsdio_˛k_kso_íab
(
bus
, 
TRUE
);

844 
	`OSL_DELAY
(4000);

847 
	`SPINWAIT
(((
	`dhdsdio_¶ìpc§_gë
(
bus
)) !=

848 (
SBSDIO_FUNC1_SLEEPCSR_KSO_MASK
 |

849 
SBSDIO_FUNC1_SLEEPCSR_DEVON_MASK
)),

852 
	`DHD_ERROR
(("%s: sÀïc§: 0x%x\n", 
__FUNCTION__
,

853 
	`dhdsdio_¶ìpc§_gë
(
bus
)));

856 
bus
->
kso
 = 
⁄
;

857 
	`BCM_REFERENCE
(
îr
);

860 
	}
}

862 
uöt8


863 
	$dhdsdio_¶ìpc§_gë
(
dhd_bus_t
 *
bus
)

865 
îr
 = 0;

866 
uöt8
 
vÆ
 = 0;

868 
vÆ
 = 
	`bcmsdh_cfg_ªad
(
bus
->
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_SLEEPCSR
, &
îr
);

869 i‡(
îr
)

870 
	`DHD_TRACE
(("FaûedÅÿªad SLEEPCSR: %d\n", 
îr
));

872  
vÆ
;

873 
	}
}

875 
uöt8


876 
	$dhdsdio_devˇp_gë
(
dhd_bus_t
 *
bus
)

878  
	`bcmsdh_cfg_ªad
(
bus
->
sdh
, 
SDIO_FUNC_0
, 
SDIOD_CCCR_BRCM_CARDCAP
, 
NULL
);

879 
	}
}

882 
	$dhdsdio_devˇp_£t
(
dhd_bus_t
 *
bus
, 
uöt8
 
ˇp
)

884 
îr
 = 0;

886 
	`bcmsdh_cfg_wrôe
(
bus
->
sdh
, 
SDIO_FUNC_0
, 
SDIOD_CCCR_BRCM_CARDCAP
, 
ˇp
, &
îr
);

887 i‡(
îr
)

888 
	`DHD_ERROR
(("%s: devˇ∞£àîr: 0x%x\n", 
__FUNCTION__
, 
îr
));

891 
	}
}

894 
	$dhdsdio_˛k_dev¶ìp_iov¨
(
dhd_bus_t
 *
bus
, 
boﬁ
 
⁄
)

896 
îr
 = 0, 
ªåy
;

897 
uöt8
 
vÆ
;

899 
ªåy
 = 0;

900 i‡(
⁄
 =
TRUE
) {

907 i‡(!
	`SLPAUTO_ENAB
(
bus
))

908 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_AVAIL
, 
FALSE
);

910 
vÆ
 = 
	`bcmsdh_cfg_ªad
(
bus
->
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_CHIPCLKCSR
, &
îr
);

911 i‡((
vÆ
 & 
SBSDIO_CSR_MASK
) == 0) {

912 
	`DHD_ERROR
(("%s: No clock beforeÉnter sleep:0x%x\n",

913 
__FUNCTION__
, 
vÆ
));

916 
	`bcmsdh_cfg_wrôe
(
bus
->
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_CHIPCLKCSR
,

917 
SBSDIO_ALP_AVAIL_REQ
, &
îr
);

918 
	`DHD_ERROR
(("%s: clock bef‹ê¶ìp:0x%x\n", 
__FUNCTION__
,

919 
	`bcmsdh_cfg_ªad
(
bus
->
sdh
, 
SDIO_FUNC_1
,

920 
SBSDIO_FUNC1_CHIPCLKCSR
, &
îr
)));

924 
	`DHD_TRACE
(("%s: clk bef‹ê¶ìp: 0x%x\n", 
__FUNCTION__
,

925 
	`bcmsdh_cfg_ªad
(
bus
->
sdh
, 
SDIO_FUNC_1
,

926 
SBSDIO_FUNC1_CHIPCLKCSR
, &
îr
)));

927 #ifde‡
USE_CMD14


928 
îr
 = 
	`bcmsdh_¶ìp
(
bus
->
sdh
, 
TRUE
);

930 
îr
 = 
	`dhdsdio_˛k_kso_íab
(
bus
, 
FALSE
);

931 i‡(
	`OOB_WAKEUP_ENAB
(
bus
))

932 
îr
 = 
	`bcmsdh_gpioout
(
bus
->
sdh
, 
GPIO_DEV_WAKEUP
, 
FALSE
);

937 i‡(
bus
->
˛k°©e
 =
CLK_NONE
) {

938 
	`DHD_TRACE
(("%s: Reque° SD clk\n", 
__FUNCTION__
));

939 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_SDONLY
, 
FALSE
);

942 i‡((
bus
->
sih
->
chù
 =
BCM4334_CHIP_ID
Ë&& (bus->sih->
chùªv
 == 2)) {

943 
	`SPINWAIT
((
	`bcmsdh_gpioö
(
bus
->
sdh
, 
GPIO_DEV_SRSTATE
Ë!
TRUE
),

944 
GPIO_DEV_SRSTATE_TIMEOUT
);

946 i‡(
	`bcmsdh_gpioö
(
bus
->
sdh
, 
GPIO_DEV_SRSTATE
Ë=
FALSE
) {

947 
	`DHD_ERROR
(("ERROR: GPIO_DEV_SRSTATE stillÜow!\n"));

950 #ifde‡
USE_CMD14


951 
îr
 = 
	`bcmsdh_¶ìp
(
bus
->
sdh
, 
FALSE
);

952 i‡(
	`SLPAUTO_ENAB
(
bus
Ë&& (
îr
 != 0)) {

953 
	`OSL_DELAY
(10000);

954 
	`DHD_TRACE
(("%s: Resyn¯devi˚ sÀï\n", 
__FUNCTION__
));

957 
îr
 = 
	`bcmsdh_¶ìp
(
bus
->
sdh
, 
TRUE
);

958 
	`OSL_DELAY
(10000);

959 
îr
 = 
	`bcmsdh_¶ìp
(
bus
->
sdh
, 
FALSE
);

961 i‡(
îr
) {

962 
	`OSL_DELAY
(10000);

963 
	`DHD_ERROR
(("%s: CMD14Éxô faûedágaö!\n", 
__FUNCTION__
));

966 
îr
 = 
	`bcmsdh_¶ìp
(
bus
->
sdh
, 
TRUE
);

967 
	`OSL_DELAY
(10000);

968 
îr
 = 
	`bcmsdh_¶ìp
(
bus
->
sdh
, 
FALSE
);

969 i‡(
îr
) {

970 
	`DHD_ERROR
(("%s: CMD14Éxô faûedÅwi˚!\n", 
__FUNCTION__
));

971 
	`DHD_ERROR
(("%s: FATAL: DeviceÇon-response!\n",

972 
__FUNCTION__
));

973 
îr
 = 0;

978 i‡(
	`OOB_WAKEUP_ENAB
(
bus
))

979 
îr
 = 
	`bcmsdh_gpioout
(
bus
->
sdh
, 
GPIO_DEV_WAKEUP
, 
TRUE
);

982 
îr
 = 
	`dhdsdio_˛k_kso_íab
(
bus
, 
TRUE
);

983 i‡(
îr
)

984 
	`OSL_DELAY
(10000);

985 } (
îr
 !0Ë&& (++
ªåy
 < 3));

987 i‡(
îr
 != 0) {

988 
	`DHD_ERROR
(("ERROR: ksÿ£àÁûedÑëry: %d\n", 
ªåy
));

989 
îr
 = 0;

993 i‡(
îr
 == 0) {

994 
uöt8
 
c§
;

997 
	`SPINWAIT
((((
c§
 = 
	`dhdsdio_¶ìpc§_gë
(
bus
)) &

998 
SBSDIO_FUNC1_SLEEPCSR_DEVON_MASK
) !=

999 (
SBSDIO_FUNC1_SLEEPCSR_DEVON_MASK
)), (20000));

1001 
	`DHD_TRACE
(("%s: ExôSÀï sÀïc§: 0x%x\n", 
__FUNCTION__
, 
c§
));

1003 i‡(!(
c§
 & 
SBSDIO_FUNC1_SLEEPCSR_DEVON_MASK
)) {

1004 
	`DHD_ERROR
(("%s:ERROR: ExitSleep device NOT Ready! 0x%x\n",

1005 
__FUNCTION__
, 
c§
));

1006 
îr
 = 
BCME_NODEVICE
;

1009 
	`SPINWAIT
((((
c§
 = 
	`bcmsdh_cfg_ªad
(
bus
->
sdh
, 
SDIO_FUNC_1
,

1010 
SBSDIO_FUNC1_CHIPCLKCSR
, &
îr
)Ë& 
SBSDIO_HT_AVAIL
) !=

1011 (
SBSDIO_HT_AVAIL
)), (10000));

1017 i‡(
îr
 == 0)

1018 
bus
->
kso
 = 
⁄
 ? 
FALSE
 : 
TRUE
;

1020 
	`DHD_ERROR
(("%s: SÀïÑeque° faûed: on:%dÉº:%d\n", 
__FUNCTION__
, 
⁄
, 
îr
));

1021 i‡(!
⁄
 && 
ªåy
 > 2)

1022 
bus
->
kso
 = 
TRUE
;

1025  
îr
;

1026 
	}
}

1030 
	$dhdsdio_ht˛k
(
dhd_bus_t
 *
bus
, 
boﬁ
 
⁄
, boﬁ 
≥ndok
)

1032 
	#HT_AVAIL_ERROR_MAX
 10

	)

1033 
ht_avaû_îr‹
 = 0;

1034 
îr
;

1035 
uöt8
 
˛k˘l
, 
˛kªq
, 
dev˘l
;

1036 
bcmsdh_öfo_t
 *
sdh
;

1038 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

1040 #i‡
	`deföed
(
OOB_INTR_ONLY
)

1041 
≥ndok
 = 
FALSE
;

1043 
˛k˘l
 = 0;

1044 
sdh
 = 
bus
->sdh;

1047 i‡(!
	`KSO_ENAB
(
bus
))

1048  
BCME_OK
;

1050 i‡(
	`SLPAUTO_ENAB
(
bus
)) {

1051 
bus
->
˛k°©e
 = (
⁄
 ? 
CLK_AVAIL
 : 
CLK_SDONLY
);

1052  
BCME_OK
;

1055 i‡(
⁄
) {

1057 
˛kªq
 = 
bus
->
Æp_⁄ly
 ? 
SBSDIO_ALP_AVAIL_REQ
 : 
SBSDIO_HT_AVAIL_REQ
;

1061 
	`bcmsdh_cfg_wrôe
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_CHIPCLKCSR
, 
˛kªq
, &
îr
);

1062 i‡(
îr
) {

1063 
ht_avaû_îr‹
++;

1064 i‡(
ht_avaû_îr‹
 < 
HT_AVAIL_ERROR_MAX
) {

1065 
	`DHD_ERROR
(("%s: HT AvaûÑeque°Éº‹: %d\n", 
__FUNCTION__
, 
îr
));

1068 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27)

1069 i‡(
ht_avaû_îr‹
 =
HT_AVAIL_ERROR_MAX
) {

1070 
	`dhd_os_£nd_h™g_mesßge
(
bus
->
dhd
);

1073  
BCME_ERROR
;

1075 
ht_avaû_îr‹
 = 0;

1078 i‡(
≥ndok
 &&

1079 ((
bus
->
sih
->
busc‹ëy≥
 =
PCMCIA_CORE_ID
Ë&& (bus->sih->
busc‹îev
 == 9))) {

1080 
uöt32
 
dummy
, 
ªåõs
;

1081 
	`R_SDREG
(
dummy
, &
bus
->
ªgs
->
˛ock˘l°©us
, 
ªåõs
);

1082 
	`BCM_REFERENCE
(
dummy
);

1086 
˛k˘l
 = 
	`bcmsdh_cfg_ªad
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_CHIPCLKCSR
, &
îr
);

1087 i‡(
îr
) {

1088 
	`DHD_ERROR
(("%s: HT AvaûÑódÉº‹: %d\n", 
__FUNCTION__
, 
îr
));

1089  
BCME_ERROR
;

1093 i‡(!
	`SBSDIO_CLKAV
(
˛k˘l
, 
bus
->
Æp_⁄ly
Ë&& 
≥ndok
) {

1095 
dev˘l
 = 
	`bcmsdh_cfg_ªad
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_DEVICE_CTL
, &
îr
);

1096 i‡(
îr
) {

1097 
	`DHD_ERROR
(("%s: DevctláccessÉrror setting CA: %d\n",

1098 
__FUNCTION__
, 
îr
));

1099  
BCME_ERROR
;

1102 
dev˘l
 |
SBSDIO_DEVCTL_CA_INT_ONLY
;

1103 
	`bcmsdh_cfg_wrôe
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_DEVICE_CTL
, 
dev˘l
, &
îr
);

1104 
	`DHD_INFO
(("CLKCTL: set PENDING\n"));

1105 
bus
->
˛k°©e
 = 
CLK_PENDING
;

1106  
BCME_OK
;

1107 } i‡(
bus
->
˛k°©e
 =
CLK_PENDING
) {

1109 
dev˘l
 = 
	`bcmsdh_cfg_ªad
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_DEVICE_CTL
, &
îr
);

1110 
dev˘l
 &~
SBSDIO_DEVCTL_CA_INT_ONLY
;

1111 
	`bcmsdh_cfg_wrôe
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_DEVICE_CTL
, 
dev˘l
, &
îr
);

1115 i‡(!
	`SBSDIO_CLKAV
(
˛k˘l
, 
bus
->
Æp_⁄ly
)) {

1116 
	`SPINWAIT_SLEEP
(
sdioh_•öwaô_¶ìp
,

1117 ((
˛k˘l
 = 
	`bcmsdh_cfg_ªad
(
sdh
, 
SDIO_FUNC_1
,

1118 
SBSDIO_FUNC1_CHIPCLKCSR
, &
îr
)),

1119 !
	`SBSDIO_CLKAV
(
˛k˘l
, 
bus
->
Æp_⁄ly
)), 
PMU_MAX_TRANSITION_DLY
);

1121 i‡(
îr
) {

1122 
	`DHD_ERROR
(("%s: HT AvaûÑeque°Éº‹: %d\n", 
__FUNCTION__
, 
îr
));

1123  
BCME_ERROR
;

1125 i‡(!
	`SBSDIO_CLKAV
(
˛k˘l
, 
bus
->
Æp_⁄ly
)) {

1126 
	`DHD_ERROR
(("%s: HT AvailÅimeout (%d): clkctl 0x%02x\n",

1127 
__FUNCTION__
, 
PMU_MAX_TRANSITION_DLY
, 
˛k˘l
));

1128  
BCME_ERROR
;

1132 
bus
->
˛k°©e
 = 
CLK_AVAIL
;

1133 
	`DHD_INFO
(("CLKCTL:Åurned ON\n"));

1135 #i‡
	`deföed
(
DHD_DEBUG
)

1136 i‡(
bus
->
Æp_⁄ly
 =
TRUE
) {

1137 #i‡!
	`deföed
(
BCMLXSDMMC
)

1138 i‡(!
	`SBSDIO_ALPONLY
(
˛k˘l
)) {

1139 
	`DHD_ERROR
(("%s: HT Clock, whí ALP O∆y\n", 
__FUNCTION__
));

1143 i‡(
	`SBSDIO_ALPONLY
(
˛k˘l
)) {

1144 
	`DHD_ERROR
(("%s: HT Clock should bê⁄.\n", 
__FUNCTION__
));

1149 
bus
->
a˘ivôy
 = 
TRUE
;

1150 #ifde‡
DHD_USE_IDLECOUNT


1151 
bus
->
idÀcou¡
 = 0;

1154 
˛kªq
 = 0;

1155 i‡(
bus
->
˛k°©e
 =
CLK_PENDING
) {

1157 
dev˘l
 = 
	`bcmsdh_cfg_ªad
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_DEVICE_CTL
, &
îr
);

1158 
dev˘l
 &~
SBSDIO_DEVCTL_CA_INT_ONLY
;

1159 
	`bcmsdh_cfg_wrôe
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_DEVICE_CTL
, 
dev˘l
, &
îr
);

1162 
bus
->
˛k°©e
 = 
CLK_SDONLY
;

1163 i‡(!
	`SR_ENAB
(
bus
)) {

1164 
	`bcmsdh_cfg_wrôe
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_CHIPCLKCSR
, 
˛kªq
, &
îr
);

1165 
	`DHD_INFO
(("CLKCTL:Åurned OFF\n"));

1166 i‡(
îr
) {

1167 
	`DHD_ERROR
(("%s: FailedáccessÅurning clock off: %d\n",

1168 
__FUNCTION__
, 
îr
));

1169  
BCME_ERROR
;

1173  
BCME_OK
;

1174 
	}
}

1178 
	$dhdsdio_sd˛k
(
dhd_bus_t
 *
bus
, 
boﬁ
 
⁄
)

1180 
îr
;

1181 
öt32
 
iovÆue
;

1183 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

1185 i‡(
⁄
) {

1186 i‡(
bus
->
idÀ˛ock
 =
DHD_IDLE_STOP
) {

1188 
iovÆue
 = 1;

1189 
îr
 = 
	`bcmsdh_iov¨_›
(
bus
->
sdh
, "sd_˛ock", 
NULL
, 0,

1190 &
iovÆue
, (iovÆue), 
TRUE
);

1191 i‡(
îr
) {

1192 
	`DHD_ERROR
(("%s:ÉrrorÉnabling sd_clock: %d\n",

1193 
__FUNCTION__
, 
îr
));

1194  
BCME_ERROR
;

1197 
iovÆue
 = 
bus
->
sd_mode
;

1198 
îr
 = 
	`bcmsdh_iov¨_›
(
bus
->
sdh
, "sd_mode", 
NULL
, 0,

1199 &
iovÆue
, (iovÆue), 
TRUE
);

1200 i‡(
îr
) {

1201 
	`DHD_ERROR
(("%s:Érror changing sd_mode: %d\n",

1202 
__FUNCTION__
, 
îr
));

1203  
BCME_ERROR
;

1205 } i‡(
bus
->
idÀ˛ock
 !
DHD_IDLE_ACTIVE
) {

1207 
iovÆue
 = 
bus
->
sd_divis‹
;

1208 
îr
 = 
	`bcmsdh_iov¨_›
(
bus
->
sdh
, "sd_divis‹", 
NULL
, 0,

1209 &
iovÆue
, (iovÆue), 
TRUE
);

1210 i‡(
îr
) {

1211 
	`DHD_ERROR
(("%s:ÉrrorÑestoring sd_divisor: %d\n",

1212 
__FUNCTION__
, 
îr
));

1213  
BCME_ERROR
;

1216 
bus
->
˛k°©e
 = 
CLK_SDONLY
;

1219 i‡((
bus
->
sd_divis‹
 =-1Ë|| (bus->
sd_mode
 == -1)) {

1220 
	`DHD_TRACE
(("%s: can't idle clock, divisor %d mode %d\n",

1221 
__FUNCTION__
, 
bus
->
sd_divis‹
, bus->
sd_mode
));

1222  
BCME_ERROR
;

1224 i‡(
bus
->
idÀ˛ock
 =
DHD_IDLE_STOP
) {

1225 i‡(
sd1idÀ
) {

1227 
iovÆue
 = 1;

1228 
îr
 = 
	`bcmsdh_iov¨_›
(
bus
->
sdh
, "sd_mode", 
NULL
, 0,

1229 &
iovÆue
, (iovÆue), 
TRUE
);

1230 i‡(
îr
) {

1231 
	`DHD_ERROR
(("%s:Érror changing sd_clock: %d\n",

1232 
__FUNCTION__
, 
îr
));

1233  
BCME_ERROR
;

1237 
iovÆue
 = 0;

1238 
îr
 = 
	`bcmsdh_iov¨_›
(
bus
->
sdh
, "sd_˛ock", 
NULL
, 0,

1239 &
iovÆue
, (iovÆue), 
TRUE
);

1240 i‡(
îr
) {

1241 
	`DHD_ERROR
(("%s:Érror disabling sd_clock: %d\n",

1242 
__FUNCTION__
, 
îr
));

1243  
BCME_ERROR
;

1245 } i‡(
bus
->
idÀ˛ock
 !
DHD_IDLE_ACTIVE
) {

1247 
iovÆue
 = 
bus
->
idÀ˛ock
;

1248 
îr
 = 
	`bcmsdh_iov¨_›
(
bus
->
sdh
, "sd_divis‹", 
NULL
, 0,

1249 &
iovÆue
, (iovÆue), 
TRUE
);

1250 i‡(
îr
) {

1251 
	`DHD_ERROR
(("%s:Érror changing sd_divisor: %d\n",

1252 
__FUNCTION__
, 
îr
));

1253  
BCME_ERROR
;

1256 
bus
->
˛k°©e
 = 
CLK_NONE
;

1259  
BCME_OK
;

1260 
	}
}

1264 
	$dhdsdio_˛k˘l
(
dhd_bus_t
 *
bus
, 
uöt
 
èrgë
, 
boﬁ
 
≥ndok
)

1266 
ªt
 = 
BCME_OK
;

1267 #ifde‡
DHD_DEBUG


1268 
uöt
 
ﬁd°©e
 = 
bus
->
˛k°©e
;

1271 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

1274 i‡(
bus
->
˛k°©e
 =
èrgë
) {

1275 i‡(
èrgë
 =
CLK_AVAIL
) {

1276 
	`dhd_os_wd_timî
(
bus
->
dhd
, 
dhd_w©chdog_ms
);

1277 
bus
->
a˘ivôy
 = 
TRUE
;

1278 #ifde‡
DHD_USE_IDLECOUNT


1279 
bus
->
idÀcou¡
 = 0;

1282  
ªt
;

1285 
èrgë
) {

1286 
CLK_AVAIL
:

1288 i‡(
bus
->
˛k°©e
 =
CLK_NONE
)

1289 
	`dhdsdio_sd˛k
(
bus
, 
TRUE
);

1291 
ªt
 = 
	`dhdsdio_ht˛k
(
bus
, 
TRUE
, 
≥ndok
);

1292 i‡(
ªt
 =
BCME_OK
) {

1293 
	`dhd_os_wd_timî
(
bus
->
dhd
, 
dhd_w©chdog_ms
);

1294 
bus
->
a˘ivôy
 = 
TRUE
;

1295 #ifde‡
DHD_USE_IDLECOUNT


1296 
bus
->
idÀcou¡
 = 0;

1301 
CLK_SDONLY
:

1303 i‡(
bus
->
˛k°©e
 =
CLK_NONE
)

1304 
ªt
 = 
	`dhdsdio_sd˛k
(
bus
, 
TRUE
);

1305 i‡(
bus
->
˛k°©e
 =
CLK_AVAIL
)

1306 
ªt
 = 
	`dhdsdio_ht˛k
(
bus
, 
FALSE
, FALSE);

1308 
	`DHD_ERROR
(("dhdsdio_clkctl:Ñequest for %d -> %d\n",

1309 
bus
->
˛k°©e
, 
èrgë
));

1310 i‡(
ªt
 =
BCME_OK
) {

1311 
	`dhd_os_wd_timî
(
bus
->
dhd
, 
dhd_w©chdog_ms
);

1315 
CLK_NONE
:

1317 i‡(
bus
->
˛k°©e
 =
CLK_AVAIL
)

1318 
ªt
 = 
	`dhdsdio_ht˛k
(
bus
, 
FALSE
, FALSE);

1320 
ªt
 = 
	`dhdsdio_sd˛k
(
bus
, 
FALSE
);

1321 #ifde‡
DHD_DEBUG


1322 i‡(
dhd_c⁄sﬁe_ms
 == 0)

1324 i‡(
bus
->
pﬁl
 == 0)

1325 
	`dhd_os_wd_timî
(
bus
->
dhd
, 0);

1328 #ifde‡
DHD_DEBUG


1329 
	`DHD_INFO
(("dhdsdio_˛k˘l: %d -> %d\n", 
ﬁd°©e
, 
bus
->
˛k°©e
));

1332  
ªt
;

1333 
	}
}

1336 
	$dhdsdio_bus¶ìp
(
dhd_bus_t
 *
bus
, 
boﬁ
 
¶ìp
)

1338 
îr
 = 0;

1339 
bcmsdh_öfo_t
 *
sdh
 = 
bus
->sdh;

1340 
sdpcmd_ªgs_t
 *
ªgs
 = 
bus
->regs;

1341 
uöt
 
ªåõs
 = 0;

1343 
	`DHD_INFO
(("dhdsdio_bussleep:Ñequest %s (currently %s)\n",

1344 (
¶ìp
 ? "SLEEP" : "WAKE"),

1345 (
bus
->
¶ìpög
 ? "SLEEP" : "WAKE")));

1348 i‡(
¶ìp
 =
bus
->
¶ìpög
)

1349  
BCME_OK
;

1352 i‡(
¶ìp
) {

1354 i‡(
bus
->
dpc_sched
 || bus->
rxskù
 || 
	`pktq_Àn
(&bus->
txq
))

1355  
BCME_BUSY
;

1358 i‡(!
	`SLPAUTO_ENAB
(
bus
)) {

1360 
	`bcmsdh_öå_dißbÀ
(
bus
->
sdh
);

1363 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_AVAIL
, 
FALSE
);

1366 
	`W_SDREG
(
SMB_USE_OOB
, &
ªgs
->
tosbmaûbox
, 
ªåõs
);

1367 i‡(
ªåõs
 > 
ªåy_limô
)

1368 
	`DHD_ERROR
(("CANNOT SIGNAL CHIP, WILL NOT WAKE UP!!\n"));

1371 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_SDONLY
, 
FALSE
);

1373 
	`bcmsdh_cfg_wrôe
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_CHIPCLKCSR
,

1374 
SBSDIO_FORCE_HW_CLKREQ_OFF
, 
NULL
);

1377 i‡(
bus
->
sih
->
chù
 !
BCM4329_CHIP_ID
 &&

1378 
bus
->
sih
->
chù
 !
BCM4319_CHIP_ID
) {

1379 
	`bcmsdh_cfg_wrôe
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_DEVICE_CTL
,

1380 
SBSDIO_DEVCTL_PADS_ISO
, 
NULL
);

1386 
îr
 = 
	`dhdsdio_˛k_dev¶ìp_iov¨
(
bus
, 
TRUE
 );

1390 
bus
->
¶ìpög
 = 
TRUE
;

1395 i‡(!
	`SLPAUTO_ENAB
(
bus
)) {

1396 
	`bcmsdh_cfg_wrôe
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_CHIPCLKCSR
, 0, &
îr
);

1399 
	`bcmsdh_cfg_wrôe
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_DEVICE_CTL
, 0, 
NULL
);

1403 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_AVAIL
, 
FALSE
);

1406 
	`W_SDREG
(0, &
ªgs
->
tosbmaûboxd©a
, 
ªåõs
);

1407 i‡(
ªåõs
 <
ªåy_limô
)

1408 
	`W_SDREG
(
SMB_DEV_INT
, &
ªgs
->
tosbmaûbox
, 
ªåõs
);

1410 i‡(
ªåõs
 > 
ªåy_limô
)

1411 
	`DHD_ERROR
(("CANNOT SIGNAL CHIP TO CLEAR OOB!!\n"));

1414 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_SDONLY
, 
FALSE
);

1417 i‡(
bus
->
öå
 && (bus->
dhd
->
bus°©e
 =
DHD_BUS_DATA
)) {

1418 
bus
->
ötdis
 = 
FALSE
;

1419 
	`bcmsdh_öå_íabÀ
(
bus
->
sdh
);

1422 
îr
 = 
	`dhdsdio_˛k_dev¶ìp_iov¨
(
bus
, 
FALSE
 );

1425 i‡(
îr
 == 0) {

1427 
bus
->
¶ìpög
 = 
FALSE
;

1431  
îr
;

1432 
	}
}

1435 #i‡
deföed
(
OOB_INTR_ONLY
)

1437 
	$dhd_íabÀ_oob_öå
(
dhd_bus
 *
bus
, 
boﬁ
 
íabÀ
)

1439 #i‡
	`deföed
(
HW_OOB
)

1440 
	`bcmsdh_íabÀ_hw_oob_öå
(
bus
->
sdh
, 
íabÀ
);

1442 
sdpcmd_ªgs_t
 *
ªgs
 = 
bus
->regs;

1443 
uöt
 
ªåõs
 = 0;

1445 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_AVAIL
, 
FALSE
);

1446 i‡(
íabÀ
 =
TRUE
) {

1449 
	`W_SDREG
(
SMB_USE_OOB
, &
ªgs
->
tosbmaûbox
, 
ªåõs
);

1450 i‡(
ªåõs
 > 
ªåy_limô
)

1451 
	`DHD_ERROR
(("CANNOT SIGNAL CHIP, WILL NOT WAKE UP!!\n"));

1455 
	`W_SDREG
(0, &
ªgs
->
tosbmaûboxd©a
, 
ªåõs
);

1456 i‡(
ªåõs
 <
ªåy_limô
)

1457 
	`W_SDREG
(
SMB_DEV_INT
, &
ªgs
->
tosbmaûbox
, 
ªåõs
);

1461 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_SDONLY
, 
FALSE
);

1463 
	}
}

1469 
	$dhdsdio_txpkt
(
dhd_bus_t
 *
bus
, *
pkt
, 
uöt
 
ch™
, 
boﬁ
 
‰ì_pkt
, boﬁ 
queue_⁄ly
)

1471 
ªt
;

1472 
o¶_t
 *
osh
;

1473 
uöt8
 *
‰ame
;

1474 
uöt16
 
Àn
, 
∑d1
 = 0;

1475 
uöt32
 
swhódî
;

1476 
uöt
 
ªåõs
 = 0;

1477 
bcmsdh_öfo_t
 *
sdh
;

1478 *
√w
;

1479 
i
;

1480 
pkt_˙t
;

1481 #ifde‡
BCMSDIOH_TXGLOM


1482 
uöt8
 *
‰ame_tmp
;

1484 #ifde‡
WLMEDIA_HTSF


1485 *
p
;

1486 
hts·s_t
 *
htsf_ts
;

1490 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

1492 
sdh
 = 
bus
->sdh;

1493 
osh
 = 
bus
->
dhd
->osh;

1495 i‡(
bus
->
dhd
->
d⁄gÀ_ª£t
) {

1496 
ªt
 = 
BCME_NOTREADY
;

1497 
d⁄e
;

1500 
‰ame
 = (
uöt8
*)
	`PKTDATA
(
osh
, 
pkt
);

1502 #ifde‡
WLMEDIA_HTSF


1503 i‡(
	`PKTLEN
(
osh
, 
pkt
) >= 100) {

1504 
p
 = 
	`PKTDATA
(
osh
, 
pkt
);

1505 
htsf_ts
 = (
hts·s_t
*Ë(
p
 + 
HTSF_HOSTOFFSET
 + 12);

1506 i‡(
htsf_ts
->
magic
 =
HTSFMAGIC
) {

1507 
htsf_ts
->
c20
 = 
	`gë_cy˛es
();

1508 
htsf_ts
->
t20
 = 
	`dhd_gë_htsf
(
bus
->
dhd
->
öfo
, 0);

1514 i‡(!((
uöçå
)
‰ame
 & 1Ë&& (
∑d1
 = ((uöçå)‰amê% 
DHD_SDALIGN
))) {

1515 i‡(
	`PKTHEADROOM
(
osh
, 
pkt
Ë< 
∑d1
) {

1516 
	`DHD_INFO
(("%s: insufficient headroom %d for %dÖad1\n",

1517 
__FUNCTION__
, ()
	`PKTHEADROOM
(
osh
, 
pkt
), 
∑d1
));

1518 
bus
->
dhd
->
tx_ªÆloc
++;

1519 
√w
 = 
	`PKTGET
(
osh
, (
	`PKTLEN
(osh, 
pkt
Ë+ 
DHD_SDALIGN
), 
TRUE
);

1520 i‡(!
√w
) {

1521 
	`DHD_ERROR
(("%s: couldn'tállocateÇew %d-byteÖacket\n",

1522 
__FUNCTION__
, 
	`PKTLEN
(
osh
, 
pkt
Ë+ 
DHD_SDALIGN
));

1523 
ªt
 = 
BCME_NOMEM
;

1524 
d⁄e
;

1527 
	`PKTALIGN
(
osh
, 
√w
, 
	`PKTLEN
(osh, 
pkt
), 
DHD_SDALIGN
);

1528 
	`bc›y
(
	`PKTDATA
(
osh
, 
pkt
), PKTDATA(osh, 
√w
), 
	`PKTLEN
(osh,Ökt));

1529 i‡(
‰ì_pkt
)

1530 
	`PKTFREE
(
osh
, 
pkt
, 
TRUE
);

1532 
‰ì_pkt
 = 
TRUE
;

1533 
pkt
 = 
√w
;

1534 
‰ame
 = (
uöt8
*)
	`PKTDATA
(
osh
, 
pkt
);

1535 
	`ASSERT
(((
uöçå
)
‰ame
 % 
DHD_SDALIGN
) == 0);

1536 
∑d1
 = 0;

1538 
	`PKTPUSH
(
osh
, 
pkt
, 
∑d1
);

1539 
‰ame
 = (
uöt8
*)
	`PKTDATA
(
osh
, 
pkt
);

1541 
	`ASSERT
((
∑d1
 + 
SDPCM_HDRLEN
Ë<(Ë
	`PKTLEN
(
osh
, 
pkt
));

1542 
	`bzîo
(
‰ame
, 
∑d1
 + 
SDPCM_HDRLEN
);

1545 
	`ASSERT
(
∑d1
 < 
DHD_SDALIGN
);

1548 
Àn
 = (
uöt16
)
	`PKTLEN
(
osh
, 
pkt
);

1549 *(
uöt16
*)
‰ame
 = 
	`htﬁ16
(
Àn
);

1550 *(((
uöt16
*)
‰ame
Ë+ 1Ë
	`htﬁ16
(~
Àn
);

1552 #ifde‡
BCMSDIOH_TXGLOM


1553 i‡(
bus
->
glom_íabÀ
) {

1554 
uöt32
 
hwhódî1
 = 0, 
hwhódî2
 = 0, 
a˘_Àn
 = 
Àn
;

1557 
swhódî
 = ((
ch™
 << 
SDPCM_CHANNEL_SHIFT
Ë& 
SDPCM_CHANNEL_MASK
) |

1558 ((
bus
->
tx_£q
 + bus->
glom_˙t
Ë% 
SDPCM_SEQUENCE_WRAP
) |

1559 (((
∑d1
 + 
SDPCM_HDRLEN
Ë<< 
SDPCM_DOFFSET_SHIFT
Ë& 
SDPCM_DOFFSET_MASK
);

1560 
	`htﬁ32_ua_°‹e
(
swhódî
, 
‰ame
 + 
SDPCM_FRAMETAG_LEN
 + 
SDPCM_HWEXT_LEN
);

1561 
	`htﬁ32_ua_°‹e
(0, 
‰ame
 + 
SDPCM_FRAMETAG_LEN
 + 
SDPCM_HWEXT_LEN
 + (
swhódî
));

1563 i‡(
queue_⁄ly
) {

1564 i‡(
f‹˚Æign
 && (
Àn
 & (
ALIGNMENT
 - 1)))

1565 
Àn
 = 
	`ROUNDUP
÷í, 
ALIGNMENT
);

1570 
hwhódî1
 = (
a˘_Àn
 - 
SDPCM_FRAMETAG_LEN
) | (0 << 24);

1571 
hwhódî2
 = (
Àn
 - 
a˘_Àn
) << 16;

1572 
	`htﬁ32_ua_°‹e
(
hwhódî1
, 
‰ame
 + 
SDPCM_FRAMETAG_LEN
);

1573 
	`htﬁ32_ua_°‹e
(
hwhódî2
, 
‰ame
 + 
SDPCM_FRAMETAG_LEN
 + 4);

1575 
	`dhd_bcmsdh_glom_po°
(
bus
, 
‰ame
, 
Àn
);

1577 
bus
->
glom_pkt_¨r
[bus->
glom_˙t
] = 
pkt
;

1578 
bus
->
glom_tŸÆ_Àn
 +
Àn
;

1579 
bus
->
glom_˙t
++;

1580  
BCME_OK
;

1583 i‡(
bus
->
roundup
 && bus->
blocksize
 &&

1584 ((
bus
->
glom_tŸÆ_Àn
 + 
Àn
Ë> bus->
blocksize
)) {

1585 
uöt16
 
∑d2
 = 
bus
->
blocksize
 -

1586 ((
bus
->
glom_tŸÆ_Àn
 + 
Àn
Ë% bus->
blocksize
);

1587 i‡((
∑d2
 <
bus
->
roundup
Ë&& (∑d2 < bus->
blocksize
)) {

1588 
Àn
 +
∑d2
;

1591 } i‡((
bus
->
glom_tŸÆ_Àn
 + 
Àn
Ë% 
DHD_SDALIGN
) {

1592 
Àn
 +
DHD_SDALIGN


1593 - ((
bus
->
glom_tŸÆ_Àn
 + 
Àn
Ë% 
DHD_SDALIGN
);

1595 i‡(
f‹˚Æign
 && (
Àn
 & (
ALIGNMENT
 - 1))) {

1596 
Àn
 = 
	`ROUNDUP
÷í, 
ALIGNMENT
);

1603 
hwhódî1
 = (
a˘_Àn
 - 
SDPCM_FRAMETAG_LEN
) | (1 << 24);

1604 
hwhódî2
 = (
Àn
 - 
a˘_Àn
) << 16;

1605 
	`htﬁ32_ua_°‹e
(
hwhódî1
, 
‰ame
 + 
SDPCM_FRAMETAG_LEN
);

1606 
	`htﬁ32_ua_°‹e
(
hwhódî2
, 
‰ame
 + 
SDPCM_FRAMETAG_LEN
 + 4);

1609 
	`dhd_bcmsdh_glom_po°
(
bus
, 
‰ame
, 
Àn
);

1611 
bus
->
glom_pkt_¨r
[bus->
glom_˙t
] = 
pkt
;

1612 
bus
->
glom_˙t
++;

1613 
bus
->
glom_tŸÆ_Àn
 +
Àn
;

1616 
‰ame_tmp
 = (
uöt8
*)
	`PKTDATA
(
osh
, 
bus
->
glom_pkt_¨r
[0]);

1617 *(
uöt16
*)
‰ame_tmp
 = 
	`htﬁ16
(
bus
->
glom_tŸÆ_Àn
);

1618 *(((
uöt16
*)
‰ame_tmp
Ë+ 1Ë
	`htﬁ16
(~
bus
->
glom_tŸÆ_Àn
);

1624 
swhódî
 = ((
ch™
 << 
SDPCM_CHANNEL_SHIFT
Ë& 
SDPCM_CHANNEL_MASK
Ë| 
bus
->
tx_£q
 |

1625 (((
∑d1
 + 
SDPCM_HDRLEN
Ë<< 
SDPCM_DOFFSET_SHIFT
Ë& 
SDPCM_DOFFSET_MASK
);

1626 
	`htﬁ32_ua_°‹e
(
swhódî
, 
‰ame
 + 
SDPCM_FRAMETAG_LEN
);

1627 
	`htﬁ32_ua_°‹e
(0, 
‰ame
 + 
SDPCM_FRAMETAG_LEN
 + (
swhódî
));

1629 #ifde‡
DHD_DEBUG


1630 i‡(
	`PKTPRIO
(
pkt
Ë< 
	`ARRAYSIZE
(
tx_∑ckës
)) {

1631 
tx_∑ckës
[
	`PKTPRIO
(
pkt
)]++;

1633 i‡(
	`DHD_BYTES_ON
() &&

1634 (((
	`DHD_CTL_ON
(Ë&& (
ch™
 =
SDPCM_CONTROL_CHANNEL
)) ||

1635 (
	`DHD_DATA_ON
(Ë&& (
ch™
 !
SDPCM_CONTROL_CHANNEL
))))) {

1636 
	`¥hex
("Tx Føme", 
‰ame
, 
Àn
);

1637 } i‡(
	`DHD_HDRS_ON
()) {

1638 
	`¥hex
("TxHdr", 
‰ame
, 
	`MIN
(
Àn
, 16));

1643 i‡(
bus
->
roundup
 && bus->
blocksize
 && (
Àn
 > bus->blocksize)) {

1644 
uöt16
 
∑d2
 = 
bus
->
blocksize
 - (
Àn
 % bus->blocksize);

1645 i‡((
∑d2
 <
bus
->
roundup
Ë&& (∑d2 < bus->
blocksize
))

1646 #ifde‡
NOTUSED


1647 i‡(
∑d2
 <
	`PKTTAILROOM
(
osh
, 
pkt
))

1649 
Àn
 +
∑d2
;

1650 } i‡(
Àn
 % 
DHD_SDALIGN
) {

1651 
Àn
 +
DHD_SDALIGN
 - (len % DHD_SDALIGN);

1655 i‡(
f‹˚Æign
 && (
Àn
 & (
ALIGNMENT
 - 1))) {

1656 #ifde‡
NOTUSED


1657 i‡(
	`PKTTAILROOM
(
osh
, 
pkt
))

1659 
Àn
 = 
	`ROUNDUP
÷í, 
ALIGNMENT
);

1660 #ifde‡
NOTUSED


1662 
	`DHD_ERROR
(("%s: sídög uƒounded %d-byãÖackë\n", 
__FUNCTION__
, 
Àn
));

1668 
ªt
 = 
	`dhd_bcmsdh_£nd_buf
(
bus
, 
	`bcmsdh_cur_sbwad
(
sdh
), 
SDIO_FUNC_2
, 
F2SYNC
,

1669 
‰ame
, 
Àn
, 
pkt
, 
NULL
, NULL);

1670 
bus
->
f2txd©a
++;

1671 
	`ASSERT
(
ªt
 !
BCME_PENDING
);

1673 i‡(
ªt
 =
BCME_NODEVICE
) {

1674 
	`DHD_ERROR
(("%s: Devi˚á¶ì∞Æªady\n", 
__FUNCTION__
));

1675 } i‡(
ªt
 < 0) {

1677 
	`DHD_ERROR
(("%s: sdioÉrror %d,ábort commandándÅerminate frame.\n",

1678 
__FUNCTION__
, 
ªt
));

1679 
bus
->
tx_sdîrs
++;

1681 
	`bcmsdh_ab‹t
(
sdh
, 
SDIO_FUNC_2
);

1682 
	`bcmsdh_cfg_wrôe
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_FRAMECTRL
,

1683 
SFC_WF_TERM
, 
NULL
);

1684 
bus
->
f1ªgd©a
++;

1686 
i
 = 0; i < 3; i++) {

1687 
uöt8
 
hi
, 
lo
;

1688 
hi
 = 
	`bcmsdh_cfg_ªad
(
sdh
, 
SDIO_FUNC_1
,

1689 
SBSDIO_FUNC1_WFRAMEBCHI
, 
NULL
);

1690 
lo
 = 
	`bcmsdh_cfg_ªad
(
sdh
, 
SDIO_FUNC_1
,

1691 
SBSDIO_FUNC1_WFRAMEBCLO
, 
NULL
);

1692 
bus
->
f1ªgd©a
 += 2;

1693 i‡((
hi
 =0Ë&& (
lo
 == 0))

1697 i‡(
ªt
 == 0) {

1698 #ifde‡
BCMSDIOH_TXGLOM


1699 i‡(
bus
->
glom_íabÀ
) {

1700 
bus
->
tx_£q
 = (bus->tx_£q + bus->
glom_˙t
Ë% 
SDPCM_SEQUENCE_WRAP
;

1704 
bus
->
tx_£q
 = (bus->tx_£q + 1Ë% 
SDPCM_SEQUENCE_WRAP
;

1707 } (
ªt
 < 0Ë&& 
ªåyd©a
 && 
ªåõs
++ < 
TXRETRIES
);

1709 
d⁄e
:

1711 #ifde‡
BCMSDIOH_TXGLOM


1712 i‡(
bus
->
glom_íabÀ
) {

1713 
	`dhd_bcmsdh_glom_˛ór
(
bus
);

1714 
pkt_˙t
 = 
bus
->
glom_˙t
;

1718 
pkt_˙t
 = 1;

1721 
pkt_˙t
) {

1722 #ifde‡
BCMSDIOH_TXGLOM


1723 
uöt32
 
doff
;

1724 i‡(
bus
->
glom_íabÀ
) {

1725 
pkt
 = 
bus
->
glom_pkt_¨r
[bus->
glom_˙t
 - 
pkt_˙t
];

1726 
‰ame
 = (
uöt8
*)
	`PKTDATA
(
osh
, 
pkt
);

1727 
doff
 = 
	`…oh32_ua
(
‰ame
 + 
SDPCM_FRAMETAG_LEN
 + 
SDPCM_HWEXT_LEN
);

1728 
doff
 = (dof‡& 
SDPCM_DOFFSET_MASK
Ë>> 
SDPCM_DOFFSET_SHIFT
;

1729 
	`PKTPULL
(
osh
, 
pkt
, 
doff
);

1733 
	`PKTPULL
(
osh
, 
pkt
, 
SDPCM_HDRLEN
 + 
∑d1
);

1735 #ifde‡
PROP_TXSTATUS


1736 i‡(
bus
->
dhd
->
wlfc_°©e
) {

1737 
	`dhd_os_sdu∆ock
(
bus
->
dhd
);

1738 
	`dhd_wlfc_txcom∂ëe
(
bus
->
dhd
, 
pkt
, 
ªt
 == 0);

1739 
	`dhd_os_sdlock
(
bus
->
dhd
);

1742 #ifde‡
SDTEST


1743 i‡(
ch™
 !
SDPCM_TEST_CHANNEL
) {

1744 
	`dhd_txcom∂ëe
(
bus
->
dhd
, 
pkt
, 
ªt
 != 0);

1747 
	`dhd_txcom∂ëe
(
bus
->
dhd
, 
pkt
, 
ªt
 != 0);

1749 i‡(
‰ì_pkt
)

1750 
	`PKTFREE
(
osh
, 
pkt
, 
TRUE
);

1752 #ifde‡
PROP_TXSTATUS


1755 
pkt_˙t
--;

1758 #ifde‡
BCMSDIOH_TXGLOM


1760 i‡(
bus
->
glom_íabÀ
) {

1761 
bus
->
glom_˙t
 = 0;

1762 
bus
->
glom_tŸÆ_Àn
 = 0;

1765  
ªt
;

1766 
	}
}

1769 
	$dhd_bus_txd©a
(
dhd_bus
 *
bus
, *
pkt
)

1771 
ªt
 = 
BCME_ERROR
;

1772 
o¶_t
 *
osh
;

1773 
uöt
 
d©Æí
, 
¥ec
;

1774 #ifde‡
DHD_TX_DUMP


1775 
uöt8
 *
dump_d©a
;

1776 
uöt16
 
¥Ÿocﬁ
;

1777 #ifde‡
DHD_TX_FULL_DUMP


1778 
i
;

1781 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

1783 
osh
 = 
bus
->
dhd
->osh;

1784 
d©Æí
 = 
	`PKTLEN
(
osh
, 
pkt
);

1786 #ifde‡
SDTEST


1788 i‡(
bus
->
ext_lo›
) {

1789 
uöt8
* 
d©a
;

1790 
	`PKTPUSH
(
osh
, 
pkt
, 
SDPCM_TEST_HDRLEN
);

1791 
d©a
 = 
	`PKTDATA
(
osh
, 
pkt
);

1792 *
d©a
++ = 
SDPCM_TEST_ECHOREQ
;

1793 *
d©a
++ = (
uöt8
)
bus
->
lo›id
++;

1794 *
d©a
++ = (
d©Æí
 >> 0);

1795 *
d©a
++ = (
d©Æí
 >> 8);

1796 
d©Æí
 +
SDPCM_TEST_HDRLEN
;

1800 #ifde‡
DHD_TX_DUMP


1801 
dump_d©a
 = 
	`PKTDATA
(
osh
, 
pkt
);

1802 
dump_d©a
 += 4;

1803 
¥Ÿocﬁ
 = (
dump_d©a
[12] << 8) | dump_data[13];

1804 #ifde‡
DHD_TX_FULL_DUMP


1805 
	`DHD_ERROR
(("TX DUMP\n"));

1807 
i
 = 0; i < (
d©Æí
 - 4); i++) {

1808 
	`DHD_ERROR
(("%02X ", 
dump_d©a
[
i
]));

1809 i‡((
i
 & 15) == 15)

1810 
	`¥ötk
("\n");

1812 
	`DHD_ERROR
(("\n"));

1815 i‡(
¥Ÿocﬁ
 =
ETHER_TYPE_802_1X
) {

1816 
	`DHD_ERROR
(("ETHER_TYPE_802_1X: ver %d,Åype %d,Ñeplay %d\n",

1817 
dump_d©a
[14], dump_data[15], dump_data[30]));

1822 
	`PKTPUSH
(
osh
, 
pkt
, 
SDPCM_HDRLEN
);

1823 
	`ASSERT
(
	`ISALIGNED
((
uöçå
)
	`PKTDATA
(
osh
, 
pkt
), 2));

1825 
¥ec
 = 
	`PRIO2PREC
((
	`PKTPRIO
(
pkt
Ë& 
PRIOMASK
));

1826 #i‚de‡
DHDTHREAD


1828 
	`dhd_os_sdlock
(
bus
->
dhd
);

1832 i‡(
dhd_de„ºed_tx
 || 
bus
->
fc°©e
 || 
	`pktq_Àn
(&bus->
txq
Ë|| bus->
dpc_sched
 ||

1833 (!
	`DATAOK
(
bus
)Ë|| (bus->
Êowc⁄åﬁ
 & 
	`NBITVAL
(
¥ec
)) ||

1834 (
bus
->
˛k°©e
 !
CLK_AVAIL
)) {

1835 
	`DHD_TRACE
(("%s: de„ºögÖktqÜí %d\n", 
__FUNCTION__
,

1836 
	`pktq_Àn
(&
bus
->
txq
)));

1837 
bus
->
fcqueued
++;

1840 
	`dhd_os_sdlock_txq
(
bus
->
dhd
);

1841 i‡(
	`dhd_¥ec_íq
(
bus
->
dhd
, &bus->
txq
, 
pkt
, 
¥ec
Ë=
FALSE
) {

1842 
	`PKTPULL
(
osh
, 
pkt
, 
SDPCM_HDRLEN
);

1843 #i‚de‡
DHDTHREAD


1849 
	`dhd_os_sdu∆ock_txq
(
bus
->
dhd
);

1850 
	`dhd_os_sdu∆ock
(
bus
->
dhd
);

1852 #ifde‡
PROP_TXSTATUS


1853 i‡(
bus
->
dhd
->
wlfc_°©e
)

1854 
	`dhd_wlfc_txcom∂ëe
(
bus
->
dhd
, 
pkt
, 
FALSE
);

1857 
	`dhd_txcom∂ëe
(
bus
->
dhd
, 
pkt
, 
FALSE
);

1858 #i‚de‡
DHDTHREAD


1859 
	`dhd_os_sdlock
(
bus
->
dhd
);

1860 
	`dhd_os_sdlock_txq
(
bus
->
dhd
);

1862 #ifde‡
PROP_TXSTATUS


1864 i‡(!
bus
->
dhd
->
wlfc_°©e
)

1866 
	`PKTFREE
(
osh
, 
pkt
, 
TRUE
);

1867 
ªt
 = 
BCME_NORESOURCE
;

1870 
ªt
 = 
BCME_OK
;

1871 
	`dhd_os_sdu∆ock_txq
(
bus
->
dhd
);

1873 i‡((
	`pktq_Àn
(&
bus
->
txq
Ë>
FCHI
Ë&& 
dhd_doÊow
)

1874 
	`dhd_txÊowc⁄åﬁ
(
bus
->
dhd
, 
ALL_INTERFACES
, 
ON
);

1876 #ifde‡
DHD_DEBUG


1877 i‡(
	`pktq_∂í
(&
bus
->
txq
, 
¥ec
Ë> 
qcou¡
[prec])

1878 
qcou¡
[
¥ec
] = 
	`pktq_∂í
(&
bus
->
txq
,Örec);

1881 i‡(
dhd_de„ºed_tx
 && !
bus
->
dpc_sched
) {

1882 
bus
->
dpc_sched
 = 
TRUE
;

1883 
	`dhd_sched_dpc
(
bus
->
dhd
);

1886 #ifde‡
DHDTHREAD


1888 
	`dhd_os_sdlock
(
bus
->
dhd
);

1892 
	`BUS_WAKE
(
bus
);

1894 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_AVAIL
, 
TRUE
);

1895 #i‚de‡
SDTEST


1896 
ªt
 = 
	`dhdsdio_txpkt
(
bus
, 
pkt
, 
SDPCM_DATA_CHANNEL
, 
TRUE
, 
FALSE
);

1898 
ªt
 = 
	`dhdsdio_txpkt
(
bus
, 
pkt
,

1899 (
bus
->
ext_lo›
 ? 
SDPCM_TEST_CHANNEL
 : 
SDPCM_DATA_CHANNEL
), 
TRUE
, 
FALSE
);

1901 i‡(
ªt
)

1902 
bus
->
dhd
->
tx_îr‹s
++;

1904 
bus
->
dhd
->
d°©s
.
tx_byãs
 +
d©Æí
;

1906 i‡((
bus
->
idÀtime
 =
DHD_IDLE_IMMEDIATE
Ë&& !bus->
dpc_sched
) {

1907 
bus
->
a˘ivôy
 = 
FALSE
;

1908 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_NONE
, 
TRUE
);

1911 #ifde‡
DHDTHREAD


1912 
	`dhd_os_sdu∆ock
(
bus
->
dhd
);

1916 #i‚de‡
DHDTHREAD


1917 
	`dhd_os_sdu∆ock
(
bus
->
dhd
);

1920  
ªt
;

1921 
	}
}

1923 
uöt


1924 
	$dhdsdio_£nd‰omq
(
dhd_bus_t
 *
bus
, 
uöt
 
max‰ames
)

1926 *
pkt
;

1927 
uöt32
 
öt°©us
 = 0;

1928 
uöt
 
ªåõs
 = 0;

1929 
ªt
 = 0, 
¥ec_out
;

1930 
uöt
 
˙t
 = 0;

1931 
uöt
 
d©Æí
;

1932 
uöt8
 
tx_¥ec_m≠
;

1933 #ifde‡
BCMSDIOH_TXGLOM


1934 
uöt
 
i
;

1935 
uöt8
 
glom_˙t
;

1938 
dhd_pub_t
 *
dhd
 = 
bus
->dhd;

1939 
sdpcmd_ªgs_t
 *
ªgs
 = 
bus
->regs;

1941 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

1943 i‡(!
	`KSO_ENAB
(
bus
)) {

1944 
	`DHD_ERROR
(("%s: Devi˚á¶ìp\n", 
__FUNCTION__
));

1945  
BCME_NODEVICE
;

1948 
tx_¥ec_m≠
 = ~
bus
->
Êowc⁄åﬁ
;

1951 
˙t
 = 0; (˙à< 
max‰ames
Ë&& 
	`DATAOK
(
bus
); cnt++) {

1952 #ifde‡
BCMSDIOH_TXGLOM


1953 i‡(
bus
->
glom_íabÀ
) {

1954 
glom_˙t
 = 
	`MIN
(
	`DATABUFCNT
(
bus
), bus->
glomsize
);

1955 
glom_˙t
 = 
	`MIN
(glom_˙t, 
	`pktq_mÀn
(&
bus
->
txq
, 
tx_¥ec_m≠
));

1956 
glom_˙t
 = 
	`MIN
(glom_˙t, 
max‰ames
-
˙t
);

1959 i‡(
bus
->
glom_mode
 =
SDPCM_TXGLOM_CPY
)

1960 
glom_˙t
 = 
	`MIN
(glom_cnt, 5);

1962 i‡(
glom_˙t
 == 0)

1964 
d©Æí
 = 0;

1965 
i
 = 0; i < 
glom_˙t
; i++) {

1966 
	`dhd_os_sdlock_txq
(
bus
->
dhd
);

1967 i‡((
pkt
 = 
	`pktq_mdeq
(&
bus
->
txq
, 
tx_¥ec_m≠
, &
¥ec_out
)Ë=
NULL
) {

1969 
	`DHD_ERROR
(("NoÖkts inÅhe queue for glomming\n"));

1970 
	`dhd_os_sdu∆ock_txq
(
bus
->
dhd
);

1973 
	`dhd_os_sdu∆ock_txq
(
bus
->
dhd
);

1975 
d©Æí
 +(
	`PKTLEN
(
bus
->
dhd
->
osh
, 
pkt
Ë- 
SDPCM_HDRLEN
);

1976 #i‚de‡
SDTEST


1977 
ªt
 = 
	`dhdsdio_txpkt
(
bus
,

1978 
pkt
,

1979 
SDPCM_DATA_CHANNEL
,

1980 
TRUE
,

1981 (
i
 =(
glom_˙t
-1))? 
FALSE
: 
TRUE
);

1983 
ªt
 = 
	`dhdsdio_txpkt
(
bus
,

1984 
pkt
,

1985 (
bus
->
ext_lo›
 ? 
SDPCM_TEST_CHANNEL
 : 
SDPCM_DATA_CHANNEL
),

1986 
TRUE
,

1987 (
i
 =(
glom_˙t
-1))? 
FALSE
: 
TRUE
);

1990 
˙t
 +
i
-1;

1994 
	`dhd_os_sdlock_txq
(
bus
->
dhd
);

1995 i‡((
pkt
 = 
	`pktq_mdeq
(&
bus
->
txq
, 
tx_¥ec_m≠
, &
¥ec_out
)Ë=
NULL
) {

1996 
	`dhd_os_sdu∆ock_txq
(
bus
->
dhd
);

1999 
	`dhd_os_sdu∆ock_txq
(
bus
->
dhd
);

2000 
d©Æí
 = 
	`PKTLEN
(
bus
->
dhd
->
osh
, 
pkt
Ë- 
SDPCM_HDRLEN
;

2002 #i‚de‡
SDTEST


2003 
ªt
 = 
	`dhdsdio_txpkt
(
bus
, 
pkt
, 
SDPCM_DATA_CHANNEL
, 
TRUE
, 
FALSE
);

2005 
ªt
 = 
	`dhdsdio_txpkt
(
bus
,

2006 
pkt
,

2007 (
bus
->
ext_lo›
 ? 
SDPCM_TEST_CHANNEL
 : 
SDPCM_DATA_CHANNEL
),

2008 
TRUE
,

2009 
FALSE
);

2013 i‡(
ªt
)

2014 
bus
->
dhd
->
tx_îr‹s
++;

2016 
bus
->
dhd
->
d°©s
.
tx_byãs
 +
d©Æí
;

2019 i‡(!
bus
->
öå
 && 
˙t
)

2022 
	`R_SDREG
(
öt°©us
, &
ªgs
->öt°©us, 
ªåõs
);

2023 
bus
->
f2txd©a
++;

2024 i‡(
	`bcmsdh_ªgÁû
(
bus
->
sdh
))

2026 i‡(
öt°©us
 & 
bus
->
ho°ötmask
)

2027 
bus
->
ùíd
 = 
TRUE
;

2032 i‡(
dhd_doÊow
 && 
dhd
->
up
 && (dhd->
bus°©e
 =
DHD_BUS_DATA
) &&

2033 
dhd
->
txoff
 && (
	`pktq_Àn
(&
bus
->
txq
Ë< 
FCLOW
))

2034 
	`dhd_txÊowc⁄åﬁ
(
dhd
, 
ALL_INTERFACES
, 
OFF
);

2036  
˙t
;

2037 
	}
}

2040 
	$dhd_bus_tx˘l
(
dhd_bus
 *
bus
, 
uch¨
 *
msg
, 
uöt
 
msgÀn
)

2042 
uöt8
 *
‰ame
;

2043 
uöt16
 
Àn
;

2044 
uöt32
 
swhódî
;

2045 
uöt
 
ªåõs
 = 0;

2046 
bcmsdh_öfo_t
 *
sdh
 = 
bus
->sdh;

2047 
uöt8
 
doff
 = 0;

2048 
ªt
 = -1;

2049 
i
;

2051 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

2053 i‡(
bus
->
dhd
->
d⁄gÀ_ª£t
)

2054  -
EIO
;

2057 
‰ame
 = 
msg
 - 
SDPCM_HDRLEN
;

2058 
Àn
 = (
msgÀn
 +
SDPCM_HDRLEN
);

2061 i‡(
dhd_Æign˘l
) {

2062 i‡((
doff
 = ((
uöçå
)
‰ame
 % 
DHD_SDALIGN
))) {

2063 
‰ame
 -
doff
;

2064 
Àn
 +
doff
;

2065 
msgÀn
 +
doff
;

2066 
	`bzîo
(
‰ame
, 
doff
 + 
SDPCM_HDRLEN
);

2068 
	`ASSERT
(
doff
 < 
DHD_SDALIGN
);

2070 
doff
 +
SDPCM_HDRLEN
;

2073 i‡(
bus
->
roundup
 && bus->
blocksize
 && (
Àn
 > bus->blocksize)) {

2074 
uöt16
 
∑d
 = 
bus
->
blocksize
 - (
Àn
 % bus->blocksize);

2075 i‡((
∑d
 <
bus
->
roundup
Ë&& (∑d < bus->
blocksize
))

2076 
Àn
 +
∑d
;

2077 } i‡(
Àn
 % 
DHD_SDALIGN
) {

2078 
Àn
 +
DHD_SDALIGN
 - (len % DHD_SDALIGN);

2082 i‡(
f‹˚Æign
 && (
Àn
 & (
ALIGNMENT
 - 1)))

2083 
Àn
 = 
	`ROUNDUP
÷í, 
ALIGNMENT
);

2085 
	`ASSERT
(
	`ISALIGNED
((
uöçå
)
‰ame
, 2));

2089 
	`dhd_os_sdlock
(
bus
->
dhd
);

2091 
	`BUS_WAKE
(
bus
);

2094 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_AVAIL
, 
FALSE
);

2097 *(
uöt16
*)
‰ame
 = 
	`htﬁ16
((uöt16)
msgÀn
);

2098 *(((
uöt16
*)
‰ame
Ë+ 1Ë
	`htﬁ16
(~
msgÀn
);

2100 #ifde‡
BCMSDIOH_TXGLOM


2101 i‡(
bus
->
glom_íabÀ
) {

2102 
uöt32
 
hwhódî1
, 
hwhódî2
;

2104 
swhódî
 = ((
SDPCM_CONTROL_CHANNEL
 << 
SDPCM_CHANNEL_SHIFT
Ë& 
SDPCM_CHANNEL_MASK
)

2105 | 
bus
->
tx_£q


2106 | ((
doff
 << 
SDPCM_DOFFSET_SHIFT
Ë& 
SDPCM_DOFFSET_MASK
);

2107 
	`htﬁ32_ua_°‹e
(
swhódî
, 
‰ame
 + 
SDPCM_FRAMETAG_LEN
 + 
SDPCM_HWEXT_LEN
);

2108 
	`htﬁ32_ua_°‹e
(0, 
‰ame
 + 
SDPCM_FRAMETAG_LEN


2109 + 
SDPCM_HWEXT_LEN
 + (
swhódî
));

2111 
hwhódî1
 = (
msgÀn
 - 
SDPCM_FRAMETAG_LEN
) | (1 << 24);

2112 
hwhódî2
 = (
Àn
 - (
msgÀn
)) << 16;

2113 
	`htﬁ32_ua_°‹e
(
hwhódî1
, 
‰ame
 + 
SDPCM_FRAMETAG_LEN
);

2114 
	`htﬁ32_ua_°‹e
(
hwhódî2
, 
‰ame
 + 
SDPCM_FRAMETAG_LEN
 + 4);

2116 *(
uöt16
*)
‰ame
 = 
	`htﬁ16
(
Àn
);

2117 *(((
uöt16
*)
‰ame
Ë+ 1Ë
	`htﬁ16
(~(
Àn
));

2122 
swhódî
 = ((
SDPCM_CONTROL_CHANNEL
 << 
SDPCM_CHANNEL_SHIFT
Ë& 
SDPCM_CHANNEL_MASK
)

2123 | 
bus
->
tx_£q
 | ((
doff
 << 
SDPCM_DOFFSET_SHIFT
Ë& 
SDPCM_DOFFSET_MASK
);

2124 
	`htﬁ32_ua_°‹e
(
swhódî
, 
‰ame
 + 
SDPCM_FRAMETAG_LEN
);

2125 
	`htﬁ32_ua_°‹e
(0, 
‰ame
 + 
SDPCM_FRAMETAG_LEN
 + (
swhódî
));

2127 i‡(!
	`TXCTLOK
(
bus
)) {

2128 
	`DHD_INFO
(("%s: No bus credit bus->tx_max %d, bus->tx_seq %d\n",

2129 
__FUNCTION__
, 
bus
->
tx_max
, bus->
tx_£q
));

2130 
bus
->
˘æ_‰ame_°©
 = 
TRUE
;

2132 
bus
->
˘æ_‰ame_buf
 = 
‰ame
;

2133 
bus
->
˘æ_‰ame_Àn
 = 
Àn
;

2135 i‡(!
bus
->
dpc_sched
) {

2136 
bus
->
dpc_sched
 = 
TRUE
;

2137 
	`dhd_sched_dpc
(
bus
->
dhd
);

2139 i‡(
bus
->
˘æ_‰ame_°©
) {

2140 
	`dhd_waô_f‹_evít
(
bus
->
dhd
, &bus->
˘æ_‰ame_°©
);

2143 i‡(
bus
->
˘æ_‰ame_°©
 =
FALSE
) {

2144 
	`DHD_INFO
(("%s: cål_‰ame_°© =FALSE\n", 
__FUNCTION__
));

2145 
ªt
 = 0;

2147 
bus
->
dhd
->
tx˙t_timeout
++;

2148 i‡(!
bus
->
dhd
->
h™g_was_£¡
) {

2149 
	`DHD_ERROR
(("%s: ctrl_frame_stat == TRUEÅxcnt_timeout=%d\n",

2150 
__FUNCTION__
, 
bus
->
dhd
->
tx˙t_timeout
));

2152 
ªt
 = -1;

2153 
bus
->
˘æ_‰ame_°©
 = 
FALSE
;

2154 
d⁄e
;

2158 
bus
->
dhd
->
tx˙t_timeout
 = 0;

2160 i‡(
ªt
 == -1) {

2161 #ifde‡
DHD_DEBUG


2162 i‡(
	`DHD_BYTES_ON
(Ë&& 
	`DHD_CTL_ON
()) {

2163 
	`¥hex
("Tx Føme", 
‰ame
, 
Àn
);

2164 } i‡(
	`DHD_HDRS_ON
()) {

2165 
	`¥hex
("TxHdr", 
‰ame
, 
	`MIN
(
Àn
, 16));

2170 
ªt
 = 
	`dhd_bcmsdh_£nd_buf
(
bus
, 
	`bcmsdh_cur_sbwad
(
sdh
), 
SDIO_FUNC_2
, 
F2SYNC
,

2171 
‰ame
, 
Àn
, 
NULL
, NULL, NULL);

2172 
	`ASSERT
(
ªt
 !
BCME_PENDING
);

2174 i‡(
ªt
 =
BCME_NODEVICE
) {

2175 
	`DHD_ERROR
(("%s: Devi˚á¶ì∞Æªady\n", 
__FUNCTION__
));

2176 } i‡(
ªt
 < 0) {

2178 
	`DHD_INFO
(("%s: sdioÉrror %d,ábort commandándÅerminate frame.\n",

2179 
__FUNCTION__
, 
ªt
));

2180 
bus
->
tx_sdîrs
++;

2182 
	`bcmsdh_ab‹t
(
sdh
, 
SDIO_FUNC_2
);

2184 
	`bcmsdh_cfg_wrôe
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_FRAMECTRL
,

2185 
SFC_WF_TERM
, 
NULL
);

2186 
bus
->
f1ªgd©a
++;

2188 
i
 = 0; i < 3; i++) {

2189 
uöt8
 
hi
, 
lo
;

2190 
hi
 = 
	`bcmsdh_cfg_ªad
(
sdh
, 
SDIO_FUNC_1
,

2191 
SBSDIO_FUNC1_WFRAMEBCHI
, 
NULL
);

2192 
lo
 = 
	`bcmsdh_cfg_ªad
(
sdh
, 
SDIO_FUNC_1
,

2193 
SBSDIO_FUNC1_WFRAMEBCLO
, 
NULL
);

2194 
bus
->
f1ªgd©a
 += 2;

2195 i‡((
hi
 =0Ë&& (
lo
 == 0))

2199 i‡(
ªt
 == 0) {

2200 
bus
->
tx_£q
 = (bus->tx_£q + 1Ë% 
SDPCM_SEQUENCE_WRAP
;

2202 } (
ªt
 < 0Ë&& 
ªåõs
++ < 
TXRETRIES
);

2205 
d⁄e
:

2206 i‡((
bus
->
idÀtime
 =
DHD_IDLE_IMMEDIATE
Ë&& !bus->
dpc_sched
) {

2207 
bus
->
a˘ivôy
 = 
FALSE
;

2208 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_NONE
, 
TRUE
);

2211 
	`dhd_os_sdu∆ock
(
bus
->
dhd
);

2213 i‡(
ªt
)

2214 
bus
->
dhd
->
tx_˘Àºs
++;

2216 
bus
->
dhd
->
tx_˘Õkts
++;

2218 i‡(
bus
->
dhd
->
tx˙t_timeout
 >
MAX_CNTL_TIMEOUT
)

2219  -
ETIMEDOUT
;

2221  
ªt
 ? -
EIO
 : 0;

2222 
	}
}

2225 
	$dhd_bus_rx˘l
(
dhd_bus
 *
bus
, 
uch¨
 *
msg
, 
uöt
 
msgÀn
)

2227 
timñe·
;

2228 
uöt
 
rxÀn
 = 0;

2229 
boﬁ
 
≥ndög
;

2231 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

2233 i‡(
bus
->
dhd
->
d⁄gÀ_ª£t
)

2234  -
EIO
;

2237 
timñe·
 = 
	`dhd_os_io˘l_ª•_waô
(
bus
->
dhd
, &bus->
rxÀn
, &
≥ndög
);

2239 
	`dhd_os_sdlock
(
bus
->
dhd
);

2240 
rxÀn
 = 
bus
->rxlen;

2241 
	`bc›y
(
bus
->
rx˘l
, 
msg
, 
	`MIN
(
msgÀn
, 
rxÀn
));

2242 
bus
->
rxÀn
 = 0;

2243 
	`dhd_os_sdu∆ock
(
bus
->
dhd
);

2245 i‡(
rxÀn
) {

2246 
	`DHD_CTL
(("%s:Ñesumed onÑxctl frame, got %dÉxpected %d\n",

2247 
__FUNCTION__
, 
rxÀn
, 
msgÀn
));

2248 } i‡(
timñe·
 == 0) {

2249 #ifde‡
DHD_DEBUG


2250 
uöt32
 
°©us
, 
ªåy
 = 0;

2251 
	`R_SDREG
(
°©us
, &
bus
->
ªgs
->
öt°©us
, 
ªåy
);

2252 
	`DHD_ERROR
(("%s:Ñesumed onÅimeout, INT status=0x%08X\n",

2253 
__FUNCTION__
, 
°©us
));

2255 
	`DHD_ERROR
(("%s:Ñesumed o¿timeout\n", 
__FUNCTION__
));

2257 #ifde‡
DHD_DEBUG


2258 
	`dhd_os_sdlock
(
bus
->
dhd
);

2259 
	`dhdsdio_checkdõd
(
bus
, 
NULL
, 0);

2260 
	`dhd_os_sdu∆ock
(
bus
->
dhd
);

2262 } i‡(
≥ndög
 =
TRUE
) {

2264 
	`DHD_ERROR
(("%s: sig«»≥ndög\n", 
__FUNCTION__
));

2265  -
EINTR
;

2268 
	`DHD_CTL
(("%s:Ñesumed f‹ unknow¿ªas⁄?\n", 
__FUNCTION__
));

2269 #ifde‡
DHD_DEBUG


2270 
	`dhd_os_sdlock
(
bus
->
dhd
);

2271 
	`dhdsdio_checkdõd
(
bus
, 
NULL
, 0);

2272 
	`dhd_os_sdu∆ock
(
bus
->
dhd
);

2275 i‡(
timñe·
 == 0) {

2276 
bus
->
dhd
->
rx˙t_timeout
++;

2277 
	`DHD_ERROR
(("%s:Ñx˙t_timeout=%d\n", 
__FUNCTION__
, 
bus
->
dhd
->
rx˙t_timeout
));

2280 
bus
->
dhd
->
rx˙t_timeout
 = 0;

2282 i‡(
rxÀn
)

2283 
bus
->
dhd
->
rx_˘Õkts
++;

2285 
bus
->
dhd
->
rx_˘Àºs
++;

2287 i‡(
bus
->
dhd
->
rx˙t_timeout
 >
MAX_CNTL_TIMEOUT
)

2288  -
ETIMEDOUT
;

2290 i‡(
bus
->
dhd
->
d⁄gÀ_å≠_occuªd
)

2291  -
EREMOTEIO
;

2293  
rxÀn
 ? (ÏxÀ¿: -
EIO
;

2294 
	}
}

2298 
	mIOV_INTR
 = 1,

2299 
	mIOV_POLLRATE
,

2300 
	mIOV_SDREG
,

2301 
	mIOV_SBREG
,

2302 
	mIOV_SDCIS
,

2303 
	mIOV_MEMBYTES
,

2304 
	mIOV_MEMSIZE
,

2305 #ifde‡
DHD_DEBUG


2306 
	mIOV_CHECKDIED
,

2307 
	mIOV_SERIALCONS
,

2309 
	mIOV_SET_DOWNLOAD_STATE
,

2310 
	mIOV_SOCRAM_STATE
,

2311 
	mIOV_FORCEEVEN
,

2312 
	mIOV_SDIOD_DRIVE
,

2313 
	mIOV_READAHEAD
,

2314 
	mIOV_SDRXCHAIN
,

2315 
	mIOV_ALIGNCTL
,

2316 
	mIOV_SDALIGN
,

2317 
	mIOV_DEVRESET
,

2318 
	mIOV_CPU
,

2319 #i‡
deföed
(
SDIO_CRC_ERROR_FIX
)

2320 
	mIOV_WATERMARK
,

2321 
	mIOV_MESBUSYCTRL
,

2323 #ifde‡
SDTEST


2324 
	mIOV_PKTGEN
,

2325 
	mIOV_EXTLOOP
,

2327 
	mIOV_SPROM
,

2328 
	mIOV_TXBOUND
,

2329 
	mIOV_RXBOUND
,

2330 
	mIOV_TXMINMAX
,

2331 
	mIOV_IDLETIME
,

2332 
	mIOV_IDLECLOCK
,

2333 
	mIOV_SD1IDLE
,

2334 
	mIOV_SLEEP
,

2335 
	mIOV_DONGLEISOLATION
,

2336 
	mIOV_KSO
,

2337 
	mIOV_DEVSLEEP
,

2338 
	mIOV_DEVCAP
,

2339 
	mIOV_VARS
,

2340 #ifde‡
SOFTAP


2341 
	mIOV_FWPATH
,

2343 
	mIOV_TXGLOMSIZE
,

2344 
	mIOV_TXGLOMMODE


2347 c⁄° 
bcm_iov¨_t
 
	gdhdsdio_iov¨s
[] = {

2348 {"öå", 
IOV_INTR
, 0, 
IOVT_BOOL
, 0 },

2349 {"¶ìp", 
IOV_SLEEP
, 0, 
IOVT_BOOL
, 0 },

2350 {"pﬁÃ©e", 
IOV_POLLRATE
, 0, 
IOVT_UINT32
, 0 },

2351 {"idÀtime", 
IOV_IDLETIME
, 0, 
IOVT_INT32
, 0 },

2352 {"idÀ˛ock", 
IOV_IDLECLOCK
, 0, 
IOVT_INT32
, 0 },

2353 {"sd1idÀ", 
IOV_SD1IDLE
, 0, 
IOVT_BOOL
, 0 },

2354 {"membyãs", 
IOV_MEMBYTES
, 0, 
IOVT_BUFFER
, 2 * () },

2355 {"memsize", 
IOV_MEMSIZE
, 0, 
IOVT_UINT32
, 0 },

2356 {"dw∆d°©e", 
IOV_SET_DOWNLOAD_STATE
, 0, 
IOVT_BOOL
, 0 },

2357 {"so¸am_°©e", 
IOV_SOCRAM_STATE
, 0, 
IOVT_BOOL
, 0 },

2358 {"v¨s", 
IOV_VARS
, 0, 
IOVT_BUFFER
, 0 },

2359 {"sdiod_drive", 
IOV_SDIOD_DRIVE
, 0, 
IOVT_UINT32
, 0 },

2360 {"ªadahód", 
IOV_READAHEAD
, 0, 
IOVT_BOOL
, 0 },

2361 {"sdrxchaö", 
IOV_SDRXCHAIN
, 0, 
IOVT_BOOL
, 0 },

2362 {"Æign˘l", 
IOV_ALIGNCTL
, 0, 
IOVT_BOOL
, 0 },

2363 {"sdÆign", 
IOV_SDALIGN
, 0, 
IOVT_BOOL
, 0 },

2364 {"devª£t", 
IOV_DEVRESET
, 0, 
IOVT_BOOL
, 0 },

2365 #ifde‡
DHD_DEBUG


2366 {"sdªg", 
IOV_SDREG
, 0, 
IOVT_BUFFER
, (
sdªg_t
) },

2367 {"sbªg", 
IOV_SBREG
, 0, 
IOVT_BUFFER
, (
sdªg_t
) },

2368 {"sd_cis", 
IOV_SDCIS
, 0, 
IOVT_BUFFER
, 
DHD_IOCTL_MAXLEN
 },

2369 {"f‹˚Æign", 
IOV_FORCEEVEN
, 0, 
IOVT_BOOL
, 0 },

2370 {"txbound", 
IOV_TXBOUND
, 0, 
IOVT_UINT32
, 0 },

2371 {"rxbound", 
IOV_RXBOUND
, 0, 
IOVT_UINT32
, 0 },

2372 {"txmömax", 
IOV_TXMINMAX
, 0, 
IOVT_UINT32
, 0 },

2373 {"˝u", 
IOV_CPU
, 0, 
IOVT_BOOL
, 0 },

2374 #ifde‡
DHD_DEBUG


2375 {"checkdõd", 
IOV_CHECKDIED
, 0, 
IOVT_BUFFER
, 0 },

2376 {"£rül", 
IOV_SERIALCONS
, 0, 
IOVT_UINT32
, 0 },

2379 #ifde‡
SDTEST


2380 {"exéo›", 
IOV_EXTLOOP
, 0, 
IOVT_BOOL
, 0 },

2381 {"pktgí", 
IOV_PKTGEN
, 0, 
IOVT_BUFFER
, (
dhd_pktgí_t
) },

2383 #i‡
deföed
(
SDIO_CRC_ERROR_FIX
)

2384 {"w©îm¨k", 
IOV_WATERMARK
, 0, 
IOVT_UINT32
, 0 },

2385 {"mesbusy˘æ", 
IOV_MESBUSYCTRL
, 0, 
IOVT_UINT32
, 0 },

2387 {"devˇp", 
IOV_DEVCAP
, 0, 
IOVT_UINT32
, 0 },

2388 {"dngl_isﬁ©i⁄", 
IOV_DONGLEISOLATION
, 0, 
IOVT_UINT32
, 0 },

2389 {"kso", 
IOV_KSO
, 0, 
IOVT_UINT32
, 0 },

2390 {"dev¶ìp", 
IOV_DEVSLEEP
, 0, 
IOVT_UINT32
, 0 },

2391 #ifde‡
SOFTAP


2392 {"fw∑th", 
IOV_FWPATH
, 0, 
IOVT_BUFFER
, 0 },

2394 {"txglomsize", 
IOV_TXGLOMSIZE
, 0, 
IOVT_UINT32
, 0 },

2395 {"txglommode", 
IOV_TXGLOMMODE
, 0, 
IOVT_UINT32
, 0 },

2396 {
NULL
, 0, 0, 0, 0 }

2400 
	$dhd_dump_p˘
(
bcm°rbuf
 *
°rbuf
, *
desc
, 
uöt
 
num
, uöà
div
)

2402 
uöt
 
q1
, 
q2
;

2404 i‡(!
div
) {

2405 
	`bcm_b¥ötf
(
°rbuf
, "%†N/A", 
desc
);

2407 
q1
 = 
num
 / 
div
;

2408 
q2
 = (100 * (
num
 - (
q1
 * 
div
))) / div;

2409 
	`bcm_b¥ötf
(
°rbuf
, "%†%d.%02d", 
desc
, 
q1
, 
q2
);

2411 
	}
}

2414 
	$dhd_bus_dump
(
dhd_pub_t
 *
dhdp
, 
bcm°rbuf
 *
°rbuf
)

2416 
dhd_bus_t
 *
bus
 = 
dhdp
->bus;

2418 
	`bcm_b¥ötf
(
°rbuf
, "Bus SDIO structure:\n");

2419 
	`bcm_b¥ötf
(
°rbuf
, "hostintmask 0x%08x intstatus 0x%08x sdpcm_ver %d\n",

2420 
bus
->
ho°ötmask
, bus->
öt°©us
, bus->
sdpcm_vî
);

2421 
	`bcm_b¥ötf
(
°rbuf
, "fcstate %d qlen %dÅx_seq %d, max %d,Ñxskip %dÑxlen %dÑx_seq %d\n",

2422 
bus
->
fc°©e
, 
	`pktq_Àn
(&bus->
txq
), bus->
tx_£q
, bus->
tx_max
, bus->
rxskù
,

2423 
bus
->
rxÀn
, bus->
rx_£q
);

2424 
	`bcm_b¥ötf
(
°rbuf
, "intr %d intrcount %dÜastintrs %d spurious %d\n",

2425 
bus
->
öå
, bus->
öåcou¡
, bus->
œ°öås
, bus->
•urious
);

2426 
	`bcm_b¥ötf
(
°rbuf
, "pollrate %dÖollcnt %dÑegfails %d\n",

2427 
bus
->
pﬁÃ©e
, bus->
pﬁl˙t
, bus->
ªgÁûs
);

2429 
	`bcm_b¥ötf
(
°rbuf
, "\nAdditional counters:\n");

2430 
	`bcm_b¥ötf
(
°rbuf
, "tx_sderrs %d fcqueued %dÑxrtx %dÑx_toolong %dÑxc_errors %d\n",

2431 
bus
->
tx_sdîrs
, bus->
fcqueued
, bus->
rxπx
, bus->
rx_toﬁ⁄g
,

2432 
bus
->
rxc_îr‹s
);

2433 
	`bcm_b¥ötf
(
°rbuf
, "rx_hdrfail %d badhdr %d badseq %d\n",

2434 
bus
->
rx_hdrÁû
, bus->
rx_badhdr
, bus->
rx_bad£q
);

2435 
	`bcm_b¥ötf
(
°rbuf
, "fc_rcvd %d, fc_xoff %d, fc_xon %d\n",

2436 
bus
->
fc_rcvd
, bus->
fc_xoff
, bus->
fc_x⁄
);

2437 
	`bcm_b¥ötf
(
°rbuf
, "rxglomfail %d,Ñxglomframes %d,Ñxglompkts %d\n",

2438 
bus
->
rxglomÁû
, bus->
rxglom‰ames
, bus->
rxglompkts
);

2439 
	`bcm_b¥ötf
(
°rbuf
, "f2rx (hdrs/data) %d (%d/%d), f2tx %d f1regs %d\n",

2440 (
bus
->
f2rxhdrs
 + bus->
f2rxd©a
), bus->f2rxhdrs, bus->f2rxdata,

2441 
bus
->
f2txd©a
, bus->
f1ªgd©a
);

2443 
	`dhd_dump_p˘
(
°rbuf
, "\nRx:Ökts/f2rd", 
bus
->
dhd
->
rx_∑ckës
,

2444 (
bus
->
f2rxhdrs
 + bus->
f2rxd©a
));

2445 
	`dhd_dump_p˘
(
°rbuf
, ",Ökts/f1sd", 
bus
->
dhd
->
rx_∑ckës
, bus->
f1ªgd©a
);

2446 
	`dhd_dump_p˘
(
°rbuf
, ",Ökts/sd", 
bus
->
dhd
->
rx_∑ckës
,

2447 (
bus
->
f2rxhdrs
 + bus->
f2rxd©a
 + bus->
f1ªgd©a
));

2448 
	`dhd_dump_p˘
(
°rbuf
, ",Ökts/öt", 
bus
->
dhd
->
rx_∑ckës
, bus->
öåcou¡
);

2449 
	`bcm_b¥ötf
(
°rbuf
, "\n");

2451 
	`dhd_dump_p˘
(
°rbuf
, "Rx: glomÖ˘", (100 * 
bus
->
rxglompkts
),

2452 
bus
->
dhd
->
rx_∑ckës
);

2453 
	`dhd_dump_p˘
(
°rbuf
, ",Ökts/glom", 
bus
->
rxglompkts
, bus->
rxglom‰ames
);

2454 
	`bcm_b¥ötf
(
°rbuf
, "\n");

2456 
	`dhd_dump_p˘
(
°rbuf
, "Tx:Ökts/f2wr", 
bus
->
dhd
->
tx_∑ckës
, bus->
f2txd©a
);

2457 
	`dhd_dump_p˘
(
°rbuf
, ",Ökts/f1sd", 
bus
->
dhd
->
tx_∑ckës
, bus->
f1ªgd©a
);

2458 
	`dhd_dump_p˘
(
°rbuf
, ",Ökts/sd", 
bus
->
dhd
->
tx_∑ckës
,

2459 (
bus
->
f2txd©a
 + bus->
f1ªgd©a
));

2460 
	`dhd_dump_p˘
(
°rbuf
, ",Ökts/öt", 
bus
->
dhd
->
tx_∑ckës
, bus->
öåcou¡
);

2461 
	`bcm_b¥ötf
(
°rbuf
, "\n");

2463 
	`dhd_dump_p˘
(
°rbuf
, "Total:Ökts/f2rw",

2464 (
bus
->
dhd
->
tx_∑ckës
 + bus->dhd->
rx_∑ckës
),

2465 (
bus
->
f2txd©a
 + bus->
f2rxhdrs
 + bus->
f2rxd©a
));

2466 
	`dhd_dump_p˘
(
°rbuf
, ",Ökts/f1sd",

2467 (
bus
->
dhd
->
tx_∑ckës
 + bus->dhd->
rx_∑ckës
), bus->
f1ªgd©a
);

2468 
	`dhd_dump_p˘
(
°rbuf
, ",Ökts/sd",

2469 (
bus
->
dhd
->
tx_∑ckës
 + bus->dhd->
rx_∑ckës
),

2470 (
bus
->
f2txd©a
 + bus->
f2rxhdrs
 + bus->
f2rxd©a
 + bus->
f1ªgd©a
));

2471 
	`dhd_dump_p˘
(
°rbuf
, ",Ökts/int",

2472 (
bus
->
dhd
->
tx_∑ckës
 + bus->dhd->
rx_∑ckës
), bus->
öåcou¡
);

2473 
	`bcm_b¥ötf
(
°rbuf
, "\n\n");

2476 #ifde‡
SDTEST


2477 i‡(
bus
->
pktgí_cou¡
) {

2478 
	`bcm_b¥ötf
(
°rbuf
, "pktgen configánd count:\n");

2479 
	`bcm_b¥ötf
(
°rbuf
, "freq %d count %dÖrint %dÅotal %d min %dÜen %d\n",

2480 
bus
->
pktgí_‰eq
, bus->
pktgí_cou¡
, bus->
pktgí_¥öt
,

2481 
bus
->
pktgí_tŸÆ
, bus->
pktgí_möÀn
, bus->
pktgí_maxÀn
);

2482 
	`bcm_b¥ötf
(
°rbuf
, "sendáttempts %dÑcvd %d fail %d\n",

2483 
bus
->
pktgí_£¡
, bus->
pktgí_rcvd
, bus->
pktgí_Áû
);

2486 #ifde‡
DHD_DEBUG


2487 
	`bcm_b¥ötf
(
°rbuf
, "dpc_sched %d host interrupt%spending\n",

2488 
bus
->
dpc_sched
, (
	`bcmsdh_öå_≥ndög
(bus->
sdh
) ? " " : "Çot "));

2489 
	`bcm_b¥ötf
(
°rbuf
, "blocksizê%dÑoundu∞%d\n", 
bus
->
blocksize
, bus->
roundup
);

2491 
	`bcm_b¥ötf
(
°rbuf
, "clkstate %dáctivity %d idletime %d idlecount %d sleeping %d\n",

2492 
bus
->
˛k°©e
, bus->
a˘ivôy
, bus->
idÀtime
, bus->
idÀcou¡
, bus->
¶ìpög
);

2493 
	}
}

2496 
	$dhd_bus_˛órcou¡s
(
dhd_pub_t
 *
dhdp
)

2498 
dhd_bus_t
 *
bus
 = (dhd_bus_à*)
dhdp
->bus;

2500 
bus
->
öåcou¡
 = bus->
œ°öås
 = bus->
•urious
 = bus->
ªgÁûs
 = 0;

2501 
bus
->
rxπx
 = bus->
rx_toﬁ⁄g
 = bus->
rxc_îr‹s
 = 0;

2502 
bus
->
rx_hdrÁû
 = bus->
rx_badhdr
 = bus->
rx_bad£q
 = 0;

2503 
bus
->
tx_sdîrs
 = bus->
fc_rcvd
 = bus->
fc_xoff
 = bus->
fc_x⁄
 = 0;

2504 
bus
->
rxglomÁû
 = bus->
rxglom‰ames
 = bus->
rxglompkts
 = 0;

2505 
bus
->
f2rxhdrs
 = bus->
f2rxd©a
 = bus->
f2txd©a
 = bus->
f1ªgd©a
 = 0;

2506 
	}
}

2508 #ifde‡
SDTEST


2510 
	$dhdsdio_pktgí_gë
(
dhd_bus_t
 *
bus
, 
uöt8
 *
¨g
)

2512 
dhd_pktgí_t
 
pktgí
;

2514 
pktgí
.
vîsi⁄
 = 
DHD_PKTGEN_VERSION
;

2515 
pktgí
.
‰eq
 = 
bus
->
pktgí_‰eq
;

2516 
pktgí
.
cou¡
 = 
bus
->
pktgí_cou¡
;

2517 
pktgí
.
¥öt
 = 
bus
->
pktgí_¥öt
;

2518 
pktgí
.
tŸÆ
 = 
bus
->
pktgí_tŸÆ
;

2519 
pktgí
.
möÀn
 = 
bus
->
pktgí_möÀn
;

2520 
pktgí
.
maxÀn
 = 
bus
->
pktgí_maxÀn
;

2521 
pktgí
.
num£¡
 = 
bus
->
pktgí_£¡
;

2522 
pktgí
.
numrcvd
 = 
bus
->
pktgí_rcvd
;

2523 
pktgí
.
numÁû
 = 
bus
->
pktgí_Áû
;

2524 
pktgí
.
mode
 = 
bus
->
pktgí_mode
;

2525 
pktgí
.
°›
 = 
bus
->
pktgí_°›
;

2527 
	`bc›y
(&
pktgí
, 
¨g
, (pktgen));

2530 
	}
}

2533 
	$dhdsdio_pktgí_£t
(
dhd_bus_t
 *
bus
, 
uöt8
 *
¨g
)

2535 
dhd_pktgí_t
 
pktgí
;

2536 
uöt
 
ﬁd˙t
, 
ﬁdmode
;

2538 
	`bc›y
(
¨g
, &
pktgí
, (pktgen));

2539 i‡(
pktgí
.
vîsi⁄
 !
DHD_PKTGEN_VERSION
)

2540  
BCME_BADARG
;

2542 
ﬁd˙t
 = 
bus
->
pktgí_cou¡
;

2543 
ﬁdmode
 = 
bus
->
pktgí_mode
;

2545 
bus
->
pktgí_‰eq
 = 
pktgí
.
‰eq
;

2546 
bus
->
pktgí_cou¡
 = 
pktgí
.
cou¡
;

2547 
bus
->
pktgí_¥öt
 = 
pktgí
.
¥öt
;

2548 
bus
->
pktgí_tŸÆ
 = 
pktgí
.
tŸÆ
;

2549 
bus
->
pktgí_möÀn
 = 
pktgí
.
möÀn
;

2550 
bus
->
pktgí_maxÀn
 = 
pktgí
.
maxÀn
;

2551 
bus
->
pktgí_mode
 = 
pktgí
.
mode
;

2552 
bus
->
pktgí_°›
 = 
pktgí
.
°›
;

2554 
bus
->
pktgí_tick
 = bus->
pktgí_±ick
 = 0;

2555 
bus
->
pktgí_¥ev_time
 = 
jiffõs
;

2556 
bus
->
pktgí_Àn
 = 
	`MAX
(bus->pktgí_Àn, bus->
pktgí_möÀn
);

2557 
bus
->
pktgí_Àn
 = 
	`MIN
(bus->pktgí_Àn, bus->
pktgí_maxÀn
);

2560 i‡(
bus
->
pktgí_cou¡
 && (!
ﬁd˙t
 || 
ﬁdmode
 !bus->
pktgí_mode
)) {

2561 
bus
->
pktgí_£¡
 = bus->
pktgí_¥ev_£¡
 = bus->
pktgí_rcvd
 = 0;

2562 
bus
->
pktgí_¥ev_rcvd
 = bus->
pktgí_Áû
 = 0;

2566 
	}
}

2570 
	$dhdsdio_devøm_ªm≠
(
dhd_bus_t
 *
bus
, 
boﬁ
 
vÆ
)

2572 
uöt8
 
íabÀ
, 
¥Ÿe˘
, 
ªm≠
;

2574 
	`si_socdevøm
(
bus
->
sih
, 
FALSE
, &
íabÀ
, &
¥Ÿe˘
, &
ªm≠
);

2575 
ªm≠
 = 
vÆ
 ? 
TRUE
 : 
FALSE
;

2576 
	`si_socdevøm
(
bus
->
sih
, 
TRUE
, &
íabÀ
, &
¥Ÿe˘
, &
ªm≠
);

2577 
	}
}

2580 
	$dhdsdio_membyãs
(
dhd_bus_t
 *
bus
, 
boﬁ
 
wrôe
, 
uöt32
 
addªss
, 
uöt8
 *
d©a
, 
uöt
 
size
)

2582 
bcmîr‹
 = 0;

2583 
uöt32
 
sdaddr
;

2584 
uöt
 
dsize
;

2590 i‡(
	`REMAP_ENAB
(
bus
Ë&& 
	`REMAP_ISADDR
(bus, 
addªss
)) {

2591 
addªss
 -
bus
->
‹ig_ømsize
;

2592 
addªss
 +
SOCDEVRAM_BP_ADDR
;

2596 
sdaddr
 = 
addªss
 & 
SBSDIO_SB_OFT_ADDR_MASK
;

2597 i‡((
sdaddr
 + 
size
Ë& 
SBSDIO_SBWINDOW_MASK
)

2598 
dsize
 = (
SBSDIO_SB_OFT_ADDR_LIMIT
 - 
sdaddr
);

2600 
dsize
 = 
size
;

2603 i‡((
bcmîr‹
 = 
	`dhdsdio_£t_süddr_wödow
(
bus
, 
addªss
))) {

2604 
	`DHD_ERROR
(("%s: wödow ch™gêÁûed\n", 
__FUNCTION__
));

2605 
x„r_d⁄e
;

2609 
size
) {

2610 
	`DHD_INFO
(("%s: %s %d bytesát offset 0x%08x in window 0x%08x\n",

2611 
__FUNCTION__
, (
wrôe
 ? "wrôe" : "ªad"), 
dsize
, 
sdaddr
,

2612 (
addªss
 & 
SBSDIO_SBWINDOW_MASK
)));

2613 i‡((
bcmîr‹
 = 
	`bcmsdh_rwd©a
(
bus
->
sdh
, 
wrôe
, 
sdaddr
, 
d©a
, 
dsize
))) {

2614 
	`DHD_ERROR
(("%s: membyã†å™s„∏Áûed\n", 
__FUNCTION__
));

2619 i‡((
size
 -
dsize
)) {

2620 
d©a
 +
dsize
;

2621 
addªss
 +
dsize
;

2622 i‡((
bcmîr‹
 = 
	`dhdsdio_£t_süddr_wödow
(
bus
, 
addªss
))) {

2623 
	`DHD_ERROR
(("%s: wödow ch™gêÁûed\n", 
__FUNCTION__
));

2626 
sdaddr
 = 0;

2627 
dsize
 = 
	`MIN
(
SBSDIO_SB_OFT_ADDR_LIMIT
, 
size
);

2632 
x„r_d⁄e
:

2634 i‡(
	`dhdsdio_£t_süddr_wödow
(
bus
, 
	`bcmsdh_cur_sbwad
(bus->
sdh
))) {

2635 
	`DHD_ERROR
(("%s: FAILEDÅÿ£àwödow backÅÿ0x%x\n", 
__FUNCTION__
,

2636 
	`bcmsdh_cur_sbwad
(
bus
->
sdh
)));

2639  
bcmîr‹
;

2640 
	}
}

2642 #ifde‡
DHD_DEBUG


2644 
	$dhdsdio_ªadsh¨ed
(
dhd_bus_t
 *
bus
, 
sdpcm_sh¨ed_t
 *
sh
)

2646 
uöt32
 
addr
;

2647 
rv
, 
i
;

2648 
uöt32
 
shaddr
 = 0;

2650 
shaddr
 = 
bus
->
d⁄gÀ_øm_ba£
 + bus->
ømsize
 - 4;

2651 
i
 = 0;

2654 i‡((
rv
 = 
	`dhdsdio_membyãs
(
bus
, 
FALSE
, 
shaddr
, (
uöt8
 *)&
addr
, 4)) < 0)

2655  
rv
;

2657 
addr
 = 
	`…oh32
(addr);

2659 
	`DHD_INFO
(("sdpcm_sh¨edáddªs†0x%08X\n", 
addr
));

2665 i‡(
addr
 == 0 || ((~addr >> 16) & 0xffff) == (addr & 0xffff)) {

2666 i‡((
bus
->
§memsize
 > 0Ë&& (
i
++ == 0)) {

2667 
shaddr
 -
bus
->
§memsize
;

2669 
	`DHD_ERROR
(("%s:áddress (0x%08x) of sdpcm_shared invalid\n",

2670 
__FUNCTION__
, 
addr
));

2671  
BCME_ERROR
;

2675 } 
i
 < 2);

2678 i‡((
rv
 = 
	`dhdsdio_membyãs
(
bus
, 
FALSE
, 
addr
, (
uöt8
 *)
sh
, (
sdpcm_sh¨ed_t
))) < 0)

2679  
rv
;

2682 
sh
->
Êags
 = 
	`…oh32
(sh->flags);

2683 
sh
->
å≠_addr
 = 
	`…oh32
(sh->trap_addr);

2684 
sh
->
as£π_exp_addr
 = 
	`…oh32
(sh->assert_exp_addr);

2685 
sh
->
as£π_fûe_addr
 = 
	`…oh32
(sh->assert_file_addr);

2686 
sh
->
as£π_löe
 = 
	`…oh32
(sh->assert_line);

2687 
sh
->
c⁄sﬁe_addr
 = 
	`…oh32
(sh->console_addr);

2688 
sh
->
msgåa˚_addr
 = 
	`…oh32
(sh->msgtrace_addr);

2690 i‡((
sh
->
Êags
 & 
SDPCM_SHARED_VERSION_MASK
Ë=3 && 
SDPCM_SHARED_VERSION
 == 1)

2691  
BCME_OK
;

2693 i‡((
sh
->
Êags
 & 
SDPCM_SHARED_VERSION_MASK
Ë!
SDPCM_SHARED_VERSION
) {

2694 
	`DHD_ERROR
(("%s: sdpcm_shared version %d in dhd "

2696 
__FUNCTION__
, 
SDPCM_SHARED_VERSION
,

2697 
sh
->
Êags
 & 
SDPCM_SHARED_VERSION_MASK
));

2698  
BCME_ERROR
;

2701  
BCME_OK
;

2702 
	}
}

2704 
	#CONSOLE_LINE_MAX
 192

	)

2707 
	$dhdsdio_ªadc⁄sﬁe
(
dhd_bus_t
 *
bus
)

2709 
dhd_c⁄sﬁe_t
 *
c
 = &
bus
->
c⁄sﬁe
;

2710 
uöt8
 
löe
[
CONSOLE_LINE_MAX
], 
ch
;

2711 
uöt32
 
n
, 
idx
, 
addr
;

2712 
rv
;

2715 i‡(
bus
->
c⁄sﬁe_addr
 == 0)

2718 i‡(!
	`KSO_ENAB
(
bus
))

2722 
addr
 = 
bus
->
c⁄sﬁe_addr
 + 
	`OFFSETOF
(
hndπe_c⁄s_t
, 
log
);

2723 i‡((
rv
 = 
	`dhdsdio_membyãs
(
bus
, 
FALSE
, 
addr
, (
uöt8
 *)&
c
->
log
, (c->log))) < 0)

2724  
rv
;

2727 i‡(
c
->
buf
 =
NULL
) {

2728 
c
->
bufsize
 = 
	`…oh32
(c->
log
.
buf_size
);

2729 i‡((
c
->
buf
 = 
	`MALLOC
(
bus
->
dhd
->
osh
, c->
bufsize
)Ë=
NULL
)

2730  
BCME_NOMEM
;

2733 
idx
 = 
	`…oh32
(
c
->
log
.idx);

2736 i‡(
idx
 > 
c
->
bufsize
)

2737  
BCME_ERROR
;

2740 i‡(
idx
 =
c
->
œ°
)

2741  
BCME_OK
;

2744 
addr
 = 
	`…oh32
(
c
->
log
.
buf
);

2745 i‡((
rv
 = 
	`dhdsdio_membyãs
(
bus
, 
FALSE
, 
addr
, 
c
->
buf
, c->
bufsize
)) < 0)

2746  
rv
;

2748 
c
->
œ°
 !
idx
) {

2749 
n
 = 0;Ç < 
CONSOLE_LINE_MAX
 - 2;Ç++) {

2750 i‡(
c
->
œ°
 =
idx
) {

2754 i‡(
c
->
œ°
 >
n
)

2755 
c
->
œ°
 -
n
;

2757 
c
->
œ°
 = c->
bufsize
 - 
n
;

2758 
bªak2
;

2760 
ch
 = 
c
->
buf
[c->
œ°
];

2761 
c
->
œ°
 = (c->œ° + 1Ë% c->
bufsize
;

2762 i‡(
ch
 == '\n')

2764 
löe
[
n
] = 
ch
;

2767 i‡(
n
 > 0) {

2768 i‡(
löe
[
n
 - 1] == '\r')

2769 
n
--;

2770 
löe
[
n
] = 0;

2771 
	`¥ötf
("CONSOLE: %s\n", 
löe
);

2774 
bªak2
:

2776  
BCME_OK
;

2777 
	}
}

2780 
	$dhdsdio_checkdõd
(
dhd_bus_t
 *
bus
, *
d©a
, 
uöt
 
size
)

2782 
bcmîr‹
 = 0;

2783 
uöt
 
msize
 = 512;

2784 *
mbuf„r
 = 
NULL
;

2785 *
c⁄sﬁe_buf„r
 = 
NULL
;

2786 
uöt
 
max°æí
 = 256;

2787 *
°r
 = 
NULL
;

2788 
å≠_t
 
å
;

2789 
sdpcm_sh¨ed_t
 
sdpcm_sh¨ed
;

2790 
bcm°rbuf
 
°rbuf
;

2791 
uöt32
 
c⁄sﬁe_±r
, 
c⁄sﬁe_size
, 
c⁄sﬁe_ödex
;

2792 
uöt8
 
löe
[
CONSOLE_LINE_MAX
], 
ch
;

2793 
uöt32
 
n
, 
i
, 
addr
;

2794 
rv
;

2796 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

2798 i‡(
d©a
 =
NULL
) {

2803 
size
 = 
msize
;

2804 
mbuf„r
 = 
d©a
 = 
	`MALLOC
(
bus
->
dhd
->
osh
, 
msize
);

2805 i‡(
mbuf„r
 =
NULL
) {

2806 
	`DHD_ERROR
(("%s: MALLOC(%dËÁûed \n", 
__FUNCTION__
, 
msize
));

2807 
bcmîr‹
 = 
BCME_NOMEM
;

2808 
d⁄e
;

2812 i‡((
°r
 = 
	`MALLOC
(
bus
->
dhd
->
osh
, 
max°æí
)Ë=
NULL
) {

2813 
	`DHD_ERROR
(("%s: MALLOC(%dËÁûed \n", 
__FUNCTION__
, 
max°æí
));

2814 
bcmîr‹
 = 
BCME_NOMEM
;

2815 
d⁄e
;

2818 i‡((
bcmîr‹
 = 
	`dhdsdio_ªadsh¨ed
(
bus
, &
sdpcm_sh¨ed
)) < 0)

2819 
d⁄e
;

2821 
	`bcm_böô
(&
°rbuf
, 
d©a
, 
size
);

2823 
	`bcm_b¥ötf
(&
°rbuf
, "msgtraceáddress : 0x%08X\nconsoleáddress : 0x%08X\n",

2824 
sdpcm_sh¨ed
.
msgåa˚_addr
, sdpcm_sh¨ed.
c⁄sﬁe_addr
);

2826 i‡((
sdpcm_sh¨ed
.
Êags
 & 
SDPCM_SHARED_ASSERT_BUILT
) == 0) {

2830 
	`bcm_b¥ötf
(&
°rbuf
, "AssrtÇot built in dongle\n");

2833 i‡((
sdpcm_sh¨ed
.
Êags
 & (
SDPCM_SHARED_ASSERT
|
SDPCM_SHARED_TRAP
)) == 0) {

2837 
	`bcm_b¥ötf
(&
°rbuf
, "NoÅrap%s in dongle",

2838 (
sdpcm_sh¨ed
.
Êags
 & 
SDPCM_SHARED_ASSERT_BUILT
)

2841 i‡(
sdpcm_sh¨ed
.
Êags
 & 
SDPCM_SHARED_ASSERT
) {

2843 
	`bcm_b¥ötf
(&
°rbuf
, "Dongleássert");

2844 i‡(
sdpcm_sh¨ed
.
as£π_exp_addr
 != 0) {

2845 
°r
[0] = '\0';

2846 i‡((
bcmîr‹
 = 
	`dhdsdio_membyãs
(
bus
, 
FALSE
,

2847 
sdpcm_sh¨ed
.
as£π_exp_addr
,

2848 (
uöt8
 *)
°r
, 
max°æí
)) < 0)

2849 
d⁄e
;

2851 
°r
[
max°æí
 - 1] = '\0';

2852 
	`bcm_b¥ötf
(&
°rbuf
, "Éx¥ \"%s\"", 
°r
);

2855 i‡(
sdpcm_sh¨ed
.
as£π_fûe_addr
 != 0) {

2856 
°r
[0] = '\0';

2857 i‡((
bcmîr‹
 = 
	`dhdsdio_membyãs
(
bus
, 
FALSE
,

2858 
sdpcm_sh¨ed
.
as£π_fûe_addr
,

2859 (
uöt8
 *)
°r
, 
max°æí
)) < 0)

2860 
d⁄e
;

2862 
°r
[
max°æí
 - 1] = '\0';

2863 
	`bcm_b¥ötf
(&
°rbuf
, " fûê\"%s\"", 
°r
);

2866 
	`bcm_b¥ötf
(&
°rbuf
, "Üöê%d ", 
sdpcm_sh¨ed
.
as£π_löe
);

2869 i‡(
sdpcm_sh¨ed
.
Êags
 & 
SDPCM_SHARED_TRAP
) {

2870 
bus
->
dhd
->
d⁄gÀ_å≠_occuªd
 = 
TRUE
;

2871 i‡((
bcmîr‹
 = 
	`dhdsdio_membyãs
(
bus
, 
FALSE
,

2872 
sdpcm_sh¨ed
.
å≠_addr
,

2873 (
uöt8
*)&
å
, (
å≠_t
))) < 0)

2874 
d⁄e
;

2876 
	`bcm_b¥ötf
(&
°rbuf
,

2881 
	`…oh32
(
å
.
ty≥
),Ütoh32—r.
ïc
),Ütoh32—r.
˝§
),Ütoh32—r.
•§
),

2882 
	`…oh32
(
å
.
r13
),Ütoh32—r.
r14
),Ütoh32—r.
pc
),

2883 
	`…oh32
(
sdpcm_sh¨ed
.
å≠_addr
),

2884 
	`…oh32
(
å
.
r0
),Ütoh32—r.
r1
),Ütoh32—r.
r2
),Ütoh32—r.
r3
),

2885 
	`…oh32
(
å
.
r4
),Ütoh32—r.
r5
),Ütoh32—r.
r6
),Ütoh32—r.
r7
));

2887 
addr
 = 
sdpcm_sh¨ed
.
c⁄sﬁe_addr
 + 
	`OFFSETOF
(
hndπe_c⁄s_t
, 
log
);

2888 i‡((
rv
 = 
	`dhdsdio_membyãs
(
bus
, 
FALSE
, 
addr
,

2889 (
uöt8
 *)&
c⁄sﬁe_±r
, (console_ptr))) < 0)

2890 
¥ötbuf
;

2892 
addr
 = 
sdpcm_sh¨ed
.
c⁄sﬁe_addr
 + 
	`OFFSETOF
(
hndπe_c⁄s_t
, 
log
.
buf_size
);

2893 i‡((
rv
 = 
	`dhdsdio_membyãs
(
bus
, 
FALSE
, 
addr
,

2894 (
uöt8
 *)&
c⁄sﬁe_size
, (console_size))) < 0)

2895 
¥ötbuf
;

2897 
addr
 = 
sdpcm_sh¨ed
.
c⁄sﬁe_addr
 + 
	`OFFSETOF
(
hndπe_c⁄s_t
, 
log
.
idx
);

2898 i‡((
rv
 = 
	`dhdsdio_membyãs
(
bus
, 
FALSE
, 
addr
,

2899 (
uöt8
 *)&
c⁄sﬁe_ödex
, (console_index))) < 0)

2900 
¥ötbuf
;

2902 
c⁄sﬁe_±r
 = 
	`…oh32
(console_ptr);

2903 
c⁄sﬁe_size
 = 
	`…oh32
(console_size);

2904 
c⁄sﬁe_ödex
 = 
	`…oh32
(console_index);

2906 i‡(
c⁄sﬁe_size
 > 
CONSOLE_BUFFER_MAX
 ||

2907 !(
c⁄sﬁe_buf„r
 = 
	`MALLOC
(
bus
->
dhd
->
osh
, 
c⁄sﬁe_size
)))

2908 
¥ötbuf
;

2910 i‡((
rv
 = 
	`dhdsdio_membyãs
(
bus
, 
FALSE
, 
c⁄sﬁe_±r
,

2911 (
uöt8
 *)
c⁄sﬁe_buf„r
, 
c⁄sﬁe_size
)) < 0)

2912 
¥ötbuf
;

2914 
i
 = 0, 
n
 = 0; i < 
c⁄sﬁe_size
; i +=Ç + 1) {

2915 
n
 = 0;Ç < 
CONSOLE_LINE_MAX
 - 2;Ç++) {

2916 
ch
 = 
c⁄sﬁe_buf„r
[(
c⁄sﬁe_ödex
 + 
i
 + 
n
Ë% 
c⁄sﬁe_size
];

2917 i‡(
ch
 == '\n')

2919 
löe
[
n
] = 
ch
;

2923 i‡(
n
 > 0) {

2924 i‡(
löe
[
n
 - 1] == '\r')

2925 
n
--;

2926 
löe
[
n
] = 0;

2932 i‡(
dhd_msg_Àvñ
 & 
DHD_ERROR_VAL
)

2933 
	`¥ötf
("CONSOLE: %s\n", 
löe
);

2939 
¥ötbuf
:

2940 i‡(
sdpcm_sh¨ed
.
Êags
 & (
SDPCM_SHARED_ASSERT
 | 
SDPCM_SHARED_TRAP
)) {

2941 
	`DHD_ERROR
(("%s: %s\n", 
__FUNCTION__
, 
°rbuf
.
‹igbuf
));

2945 
d⁄e
:

2946 i‡(
mbuf„r
)

2947 
	`MFREE
(
bus
->
dhd
->
osh
, 
mbuf„r
, 
msize
);

2948 i‡(
°r
)

2949 
	`MFREE
(
bus
->
dhd
->
osh
, 
°r
, 
max°æí
);

2950 i‡(
c⁄sﬁe_buf„r
)

2951 
	`MFREE
(
bus
->
dhd
->
osh
, 
c⁄sﬁe_buf„r
, 
c⁄sﬁe_size
);

2953  
bcmîr‹
;

2954 
	}
}

2959 
	$dhdsdio_dow∆ﬂdv¨s
(
dhd_bus_t
 *
bus
, *
¨g
, 
Àn
)

2961 
bcmîr‹
 = 
BCME_OK
;

2963 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

2966 i‡(
bus
->
dhd
->
up
) {

2967 
bcmîr‹
 = 
BCME_NOTDOWN
;

2968 
îr
;

2970 i‡(!
Àn
) {

2971 
bcmîr‹
 = 
BCME_BUFTOOSHORT
;

2972 
îr
;

2976 i‡(
bus
->
v¨s
)

2977 
	`MFREE
(
bus
->
dhd
->
osh
, bus->
v¨s
, bus->
v¨sz
);

2979 
bus
->
v¨s
 = 
	`MALLOC
(bus->
dhd
->
osh
, 
Àn
);

2980 
bus
->
v¨sz
 = bus->
v¨s
 ? 
Àn
 : 0;

2981 i‡(
bus
->
v¨s
 =
NULL
) {

2982 
bcmîr‹
 = 
BCME_NOMEM
;

2983 
îr
;

2987 
	`bc›y
(
¨g
, 
bus
->
v¨s
, bus->
v¨sz
);

2988 
îr
:

2989  
bcmîr‹
;

2990 
	}
}

2992 #ifde‡
DHD_DEBUG


2994 
	#CC_PLL_CHIPCTRL_SERIAL_ENAB
 (1 << 24)

	)

2995 
	#CC_CHIPCTRL_JTAG_SEL
 (1 << 3)

	)

2996 
	#CC_CHIPCTRL_GPIO_SEL
 (0x3)

	)

2997 
	#CC_PLL_CHIPCTRL_SERIAL_ENAB_4334
 (1 << 28)

	)

3000 
	$dhd_£rülc⁄sﬁe
(
dhd_bus_t
 *
bus
, 
boﬁ
 
£t
, boﬁ 
íabÀ
, *
bcmîr‹
)

3002 
öt_vÆ
;

3003 
uöt32
 
addr
, 
d©a
, 
u¨t_íab
 = 0;

3004 
uöt32
 
jèg_£l
 = 
CC_CHIPCTRL_JTAG_SEL
;

3005 
uöt32
 
gpio_£l
 = 
CC_CHIPCTRL_GPIO_SEL
;

3007 
addr
 = 
SI_ENUM_BASE
 + 
	`OFFSETOF
(
chù¸egs_t
, 
chùc⁄åﬁ_addr
);

3008 
d©a
 = 
SI_ENUM_BASE
 + 
	`OFFSETOF
(
chù¸egs_t
, 
chùc⁄åﬁ_d©a
);

3009 *
bcmîr‹
 = 0;

3011 
	`bcmsdh_ªg_wrôe
(
bus
->
sdh
, 
addr
, 4, 1);

3012 i‡(
	`bcmsdh_ªgÁû
(
bus
->
sdh
)) {

3013 *
bcmîr‹
 = 
BCME_SDIO_ERROR
;

3016 
öt_vÆ
 = 
	`bcmsdh_ªg_ªad
(
bus
->
sdh
, 
d©a
, 4);

3017 i‡(
	`bcmsdh_ªgÁû
(
bus
->
sdh
)) {

3018 *
bcmîr‹
 = 
BCME_SDIO_ERROR
;

3021 i‡(
bus
->
sih
->
chù
 =
BCM4330_CHIP_ID
) {

3022 
u¨t_íab
 = 
CC_PLL_CHIPCTRL_SERIAL_ENAB
;

3024 i‡(
bus
->
sih
->
chù
 =
BCM4334_CHIP_ID
 ||

3025 
bus
->
sih
->
chù
 =
BCM43341_CHIP_ID
) {

3026 i‡(
íabÀ
) {

3028 
öt_vÆ
 &~
gpio_£l
;

3029 
öt_vÆ
 |
jèg_£l
;

3031 
öt_vÆ
 |
gpio_£l
;

3032 
öt_vÆ
 &~
jèg_£l
;

3034 
u¨t_íab
 = 
CC_PLL_CHIPCTRL_SERIAL_ENAB_4334
;

3037 i‡(!
£t
)

3038  (
öt_vÆ
 & 
u¨t_íab
);

3039 i‡(
íabÀ
)

3040 
öt_vÆ
 |
u¨t_íab
;

3042 
öt_vÆ
 &~
u¨t_íab
;

3043 
	`bcmsdh_ªg_wrôe
(
bus
->
sdh
, 
d©a
, 4, 
öt_vÆ
);

3044 i‡(
	`bcmsdh_ªgÁû
(
bus
->
sdh
)) {

3045 *
bcmîr‹
 = 
BCME_SDIO_ERROR
;

3048 i‡(
bus
->
sih
->
chù
 =
BCM4330_CHIP_ID
) {

3049 
uöt32
 
chùc⁄åﬁ
;

3050 
addr
 = 
SI_ENUM_BASE
 + 
	`OFFSETOF
(
chù¸egs_t
, 
chùc⁄åﬁ
);

3051 
chùc⁄åﬁ
 = 
	`bcmsdh_ªg_ªad
(
bus
->
sdh
, 
addr
, 4);

3052 
chùc⁄åﬁ
 &~
jèg_£l
;

3053 i‡(
íabÀ
) {

3054 
chùc⁄åﬁ
 |
jèg_£l
;

3055 
chùc⁄åﬁ
 &~
gpio_£l
;

3057 
	`bcmsdh_ªg_wrôe
(
bus
->
sdh
, 
addr
, 4, 
chùc⁄åﬁ
);

3060  (
öt_vÆ
 & 
u¨t_íab
);

3061 
	}
}

3065 
	$dhdsdio_doiov¨
(
dhd_bus_t
 *
bus
, c⁄° 
bcm_iov¨_t
 *
vi
, 
uöt32
 
a˘i⁄id
, c⁄° *
«me
,

3066 *
∑øms
, 
∂í
, *
¨g
, 
Àn
, 
vÆ_size
)

3068 
bcmîr‹
 = 0;

3069 
öt32
 
öt_vÆ
 = 0;

3070 
boﬁ
 
boﬁ_vÆ
 = 0;

3072 
	`DHD_TRACE
(("%s: Enter,áction %dÇame %sÖarams %pÖlen %dárg %pÜen %d val_size %d\n",

3073 
__FUNCTION__
, 
a˘i⁄id
, 
«me
, 
∑øms
, 
∂í
, 
¨g
, 
Àn
, 
vÆ_size
));

3075 i‡((
bcmîr‹
 = 
	`bcm_iov¨_Àncheck
(
vi
, 
¨g
, 
Àn
, 
	`IOV_ISSET
(
a˘i⁄id
))) != 0)

3076 
exô
;

3078 i‡(
∂í
 >()(
öt_vÆ
))

3079 
	`bc›y
(
∑øms
, &
öt_vÆ
, (int_val));

3081 
boﬁ_vÆ
 = (
öt_vÆ
 !0Ë? 
TRUE
 : 
FALSE
;

3085 
	`dhd_os_sdlock
(
bus
->
dhd
);

3088 i‡(
bus
->
dhd
->
d⁄gÀ_ª£t
 && !(
a˘i⁄id
 =
	`IOV_SVAL
(
IOV_DEVRESET
) ||

3089 
a˘i⁄id
 =
	`IOV_GVAL
(
IOV_DEVRESET
))) {

3090 
bcmîr‹
 = 
BCME_NOTREADY
;

3091 
exô
;

3097 i‡((
vi
->
v¨id
 =
IOV_KSO
Ë&& (
	`IOV_ISSET
(
a˘i⁄id
))) {

3098 
	`dhdsdio_˛k_kso_iov¨
(
bus
, 
boﬁ_vÆ
);

3099 
exô
;

3100 } i‡((
vi
->
v¨id
 =
IOV_DEVSLEEP
Ë&& (
	`IOV_ISSET
(
a˘i⁄id
))) {

3102 
	`dhdsdio_˛k_dev¶ìp_iov¨
(
bus
, 
boﬁ_vÆ
);

3103 i‡(!
	`SLPAUTO_ENAB
(
bus
Ë&& (
boﬁ_vÆ
 =
FALSE
Ë&& (bus->
ùíd
)) {

3104 
	`DHD_ERROR
(("INTÖending in devsleep 1, dpc_sched: %d\n",

3105 
bus
->
dpc_sched
));

3106 i‡(!
bus
->
dpc_sched
) {

3107 
bus
->
dpc_sched
 = 
TRUE
;

3108 
	`dhd_sched_dpc
(
bus
->
dhd
);

3112 
exô
;

3116 i‡(
vi
->
v¨id
 =
IOV_SLEEP
) {

3117 i‡(
	`IOV_ISSET
(
a˘i⁄id
)) {

3118 
bcmîr‹
 = 
	`dhdsdio_bus¶ìp
(
bus
, 
boﬁ_vÆ
);

3120 
öt_vÆ
 = (
öt32
)
bus
->
¶ìpög
;

3121 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

3123 
exô
;

3127 i‡(!
bus
->
dhd
->
d⁄gÀ_ª£t
) {

3128 
	`BUS_WAKE
(
bus
);

3129 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_AVAIL
, 
FALSE
);

3132 
a˘i⁄id
) {

3133 
	`IOV_GVAL
(
IOV_INTR
):

3134 
öt_vÆ
 = (
öt32
)
bus
->
öå
;

3135 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

3138 
	`IOV_SVAL
(
IOV_INTR
):

3139 
bus
->
öå
 = 
boﬁ_vÆ
;

3140 
bus
->
ötdis
 = 
FALSE
;

3141 i‡(
bus
->
dhd
->
up
) {

3142 i‡(
bus
->
öå
) {

3143 
	`DHD_INTR
(("%s:É«bÀ SDIO devi˚ i¡îru±s\n", 
__FUNCTION__
));

3144 
	`bcmsdh_öå_íabÀ
(
bus
->
sdh
);

3146 
	`DHD_INTR
(("%s: dißbÀ SDIO i¡îru±s\n", 
__FUNCTION__
));

3147 
	`bcmsdh_öå_dißbÀ
(
bus
->
sdh
);

3152 
	`IOV_GVAL
(
IOV_POLLRATE
):

3153 
öt_vÆ
 = (
öt32
)
bus
->
pﬁÃ©e
;

3154 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

3157 
	`IOV_SVAL
(
IOV_POLLRATE
):

3158 
bus
->
pﬁÃ©e
 = (
uöt
)
öt_vÆ
;

3159 
bus
->
pﬁl
 = (bus->
pﬁÃ©e
 != 0);

3162 
	`IOV_GVAL
(
IOV_IDLETIME
):

3163 
öt_vÆ
 = 
bus
->
idÀtime
;

3164 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

3167 
	`IOV_SVAL
(
IOV_IDLETIME
):

3168 i‡((
öt_vÆ
 < 0Ë&& (öt_vÆ !
DHD_IDLE_IMMEDIATE
)) {

3169 
bcmîr‹
 = 
BCME_BADARG
;

3171 
bus
->
idÀtime
 = 
öt_vÆ
;

3175 
	`IOV_GVAL
(
IOV_IDLECLOCK
):

3176 
öt_vÆ
 = (
öt32
)
bus
->
idÀ˛ock
;

3177 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

3180 
	`IOV_SVAL
(
IOV_IDLECLOCK
):

3181 
bus
->
idÀ˛ock
 = 
öt_vÆ
;

3184 
	`IOV_GVAL
(
IOV_SD1IDLE
):

3185 
öt_vÆ
 = (
öt32
)
sd1idÀ
;

3186 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

3189 
	`IOV_SVAL
(
IOV_SD1IDLE
):

3190 
sd1idÀ
 = 
boﬁ_vÆ
;

3194 
	`IOV_SVAL
(
IOV_MEMBYTES
):

3195 
	`IOV_GVAL
(
IOV_MEMBYTES
):

3197 
uöt32
 
addªss
;

3198 
uöt
 
size
, 
dsize
;

3199 
uöt8
 *
d©a
;

3201 
boﬁ
 
£t
 = (
a˘i⁄id
 =
	`IOV_SVAL
(
IOV_MEMBYTES
));

3203 
	`ASSERT
(
∂í
 >= 2*());

3205 
addªss
 = (
uöt32
)
öt_vÆ
;

3206 
	`bc›y
((*)
∑øms
 + (
öt_vÆ
), &int_val, (int_val));

3207 
size
 = (
uöt
)
öt_vÆ
;

3210 
dsize
 = 
£t
 ? 
∂í
 - (2 * ()Ë: 
Àn
;

3211 i‡(
dsize
 < 
size
) {

3212 
	`DHD_ERROR
(("%s:Érror on %s membytes,áddr 0x%08x size %d dsize %d\n",

3213 
__FUNCTION__
, (
£t
 ? "£t" : "gë"), 
addªss
, 
size
, 
dsize
));

3214 
bcmîr‹
 = 
BCME_BADARG
;

3218 
	`DHD_INFO
(("%s: Reque°Åÿ%†%d byã†©áddªs†0x%08x\n", 
__FUNCTION__
,

3219 (
£t
 ? "wrôe" : "ªad"), 
size
, 
addªss
));

3222 i‡((
bus
->
‹ig_ømsize
) &&

3223 ((
addªss
 > 
bus
->
‹ig_ømsize
Ë|| (addªs†+ 
size
 > bus->orig_ramsize)))

3225 
uöt8
 
íabÀ
, 
¥Ÿe˘
, 
ªm≠
;

3226 
	`si_socdevøm
(
bus
->
sih
, 
FALSE
, &
íabÀ
, &
¥Ÿe˘
, &
ªm≠
);

3227 i‡(!
íabÀ
 || 
¥Ÿe˘
) {

3228 
	`DHD_ERROR
(("%s:Ñamsize 0x%08x doesn't have %d bytesát 0x%08x\n",

3229 
__FUNCTION__
, 
bus
->
‹ig_ømsize
, 
size
, 
addªss
));

3230 
	`DHD_ERROR
(("%s: socramÉnable %d,Örotect %d\n",

3231 
__FUNCTION__
, 
íabÀ
, 
¥Ÿe˘
));

3232 
bcmîr‹
 = 
BCME_BADARG
;

3236 i‡(!
	`REMAP_ENAB
(
bus
Ë&& (
addªss
 >
SOCDEVRAM_ARM_ADDR
)) {

3237 
uöt32
 
devømsize
 = 
	`si_socdevøm_size
(
bus
->
sih
);

3238 i‡((
addªss
 < 
SOCDEVRAM_ARM_ADDR
) ||

3239 (
addªss
 + 
size
 > (
SOCDEVRAM_ARM_ADDR
 + 
devømsize
))) {

3240 
	`DHD_ERROR
(("%s: badáddress 0x%08x, size 0x%08x\n",

3241 
__FUNCTION__
, 
addªss
, 
size
));

3242 
	`DHD_ERROR
(("%s: socramÑange 0x%08x,size 0x%08x\n",

3243 
__FUNCTION__
, 
SOCDEVRAM_ARM_ADDR
, 
devømsize
));

3244 
bcmîr‹
 = 
BCME_BADARG
;

3248 
addªss
 -
SOCDEVRAM_ARM_ADDR
;

3249 
addªss
 +
SOCDEVRAM_BP_ADDR
;

3250 
	`DHD_INFO
(("%s: RequestÅo %s %d bytes @ Mappedáddress 0x%08x\n",

3251 
__FUNCTION__
, (
£t
 ? "wrôe" : "ªad"), 
size
, 
addªss
));

3252 } i‡(
	`REMAP_ENAB
(
bus
Ë&& 
	`REMAP_ISADDR
(bus, 
addªss
Ë&& 
ªm≠
) {

3256 
	`DHD_ERROR
(("%s: NeedÅo disableÑemap foráddress 0x%08x\n",

3257 
__FUNCTION__
, 
addªss
));

3258 
bcmîr‹
 = 
BCME_ERROR
;

3264 
d©a
 = 
£t
 ? (
uöt8
*)
∑øms
 + 2 * (): (uöt8*)
¨g
;

3267 
bcmîr‹
 = 
	`dhdsdio_membyãs
(
bus
, 
£t
, 
addªss
, 
d©a
, 
size
);

3272 
	`IOV_GVAL
(
IOV_MEMSIZE
):

3273 
öt_vÆ
 = (
öt32
)
bus
->
ømsize
;

3274 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

3277 
	`IOV_GVAL
(
IOV_SDIOD_DRIVE
):

3278 
öt_vÆ
 = (
öt32
)
dhd_sdiod_drive_°ªngth
;

3279 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

3282 
	`IOV_SVAL
(
IOV_SDIOD_DRIVE
):

3283 
dhd_sdiod_drive_°ªngth
 = 
öt_vÆ
;

3284 
	`si_sdiod_drive_°ªngth_öô
(
bus
->
sih
, bus->
dhd
->
osh
, 
dhd_sdiod_drive_°ªngth
);

3287 
	`IOV_SVAL
(
IOV_SET_DOWNLOAD_STATE
):

3288 
bcmîr‹
 = 
	`dhdsdio_dow∆ﬂd_°©e
(
bus
, 
boﬁ_vÆ
);

3291 
	`IOV_SVAL
(
IOV_SOCRAM_STATE
):

3292 
bcmîr‹
 = 
	`dhdsdio_dow∆ﬂd_°©e
(
bus
, 
boﬁ_vÆ
);

3295 
	`IOV_SVAL
(
IOV_VARS
):

3296 
bcmîr‹
 = 
	`dhdsdio_dow∆ﬂdv¨s
(
bus
, 
¨g
, 
Àn
);

3299 
	`IOV_GVAL
(
IOV_READAHEAD
):

3300 
öt_vÆ
 = (
öt32
)
dhd_ªadahód
;

3301 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

3304 
	`IOV_SVAL
(
IOV_READAHEAD
):

3305 i‡(
boﬁ_vÆ
 && !
dhd_ªadahód
)

3306 
bus
->
√xéí
 = 0;

3307 
dhd_ªadahód
 = 
boﬁ_vÆ
;

3310 
	`IOV_GVAL
(
IOV_SDRXCHAIN
):

3311 
öt_vÆ
 = (
öt32
)
bus
->
u£_rxchaö
;

3312 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

3315 
	`IOV_SVAL
(
IOV_SDRXCHAIN
):

3316 i‡(
boﬁ_vÆ
 && !
bus
->
sd_rxchaö
)

3317 
bcmîr‹
 = 
BCME_UNSUPPORTED
;

3319 
bus
->
u£_rxchaö
 = 
boﬁ_vÆ
;

3321 
	`IOV_GVAL
(
IOV_ALIGNCTL
):

3322 
öt_vÆ
 = (
öt32
)
dhd_Æign˘l
;

3323 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

3326 
	`IOV_SVAL
(
IOV_ALIGNCTL
):

3327 
dhd_Æign˘l
 = 
boﬁ_vÆ
;

3330 
	`IOV_GVAL
(
IOV_SDALIGN
):

3331 
öt_vÆ
 = 
DHD_SDALIGN
;

3332 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

3335 #ifde‡
DHD_DEBUG


3336 
	`IOV_GVAL
(
IOV_VARS
):

3337 i‡(
bus
->
v¨sz
 < (
uöt
)
Àn
)

3338 
	`bc›y
(
bus
->
v¨s
, 
¨g
, bus->
v¨sz
);

3340 
bcmîr‹
 = 
BCME_BUFTOOSHORT
;

3344 #ifde‡
DHD_DEBUG


3345 
	`IOV_GVAL
(
IOV_SDREG
):

3347 
sdªg_t
 *
sd_±r
;

3348 
uöt32
 
addr
, 
size
;

3350 
sd_±r
 = (
sdªg_t
 *)
∑øms
;

3352 
addr
 = (
uöçå
)
bus
->
ªgs
 + 
sd_±r
->
off£t
;

3353 
size
 = 
sd_±r
->
func
;

3354 
öt_vÆ
 = (
öt32
)
	`bcmsdh_ªg_ªad
(
bus
->
sdh
, 
addr
, 
size
);

3355 i‡(
	`bcmsdh_ªgÁû
(
bus
->
sdh
))

3356 
bcmîr‹
 = 
BCME_SDIO_ERROR
;

3357 
	`bc›y
(&
öt_vÆ
, 
¨g
, (
öt32
));

3361 
	`IOV_SVAL
(
IOV_SDREG
):

3363 
sdªg_t
 *
sd_±r
;

3364 
uöt32
 
addr
, 
size
;

3366 
sd_±r
 = (
sdªg_t
 *)
∑øms
;

3368 
addr
 = (
uöçå
)
bus
->
ªgs
 + 
sd_±r
->
off£t
;

3369 
size
 = 
sd_±r
->
func
;

3370 
	`bcmsdh_ªg_wrôe
(
bus
->
sdh
, 
addr
, 
size
, 
sd_±r
->
vÆue
);

3371 i‡(
	`bcmsdh_ªgÁû
(
bus
->
sdh
))

3372 
bcmîr‹
 = 
BCME_SDIO_ERROR
;

3377 
	`IOV_GVAL
(
IOV_SBREG
):

3379 
sdªg_t
 
sdªg
;

3380 
uöt32
 
addr
, 
size
;

3382 
	`bc›y
(
∑øms
, &
sdªg
, (sdreg));

3384 
addr
 = 
SI_ENUM_BASE
 + 
sdªg
.
off£t
;

3385 
size
 = 
sdªg
.
func
;

3386 
öt_vÆ
 = (
öt32
)
	`bcmsdh_ªg_ªad
(
bus
->
sdh
, 
addr
, 
size
);

3387 i‡(
	`bcmsdh_ªgÁû
(
bus
->
sdh
))

3388 
bcmîr‹
 = 
BCME_SDIO_ERROR
;

3389 
	`bc›y
(&
öt_vÆ
, 
¨g
, (
öt32
));

3393 
	`IOV_SVAL
(
IOV_SBREG
):

3395 
sdªg_t
 
sdªg
;

3396 
uöt32
 
addr
, 
size
;

3398 
	`bc›y
(
∑øms
, &
sdªg
, (sdreg));

3400 
addr
 = 
SI_ENUM_BASE
 + 
sdªg
.
off£t
;

3401 
size
 = 
sdªg
.
func
;

3402 
	`bcmsdh_ªg_wrôe
(
bus
->
sdh
, 
addr
, 
size
, 
sdªg
.
vÆue
);

3403 i‡(
	`bcmsdh_ªgÁû
(
bus
->
sdh
))

3404 
bcmîr‹
 = 
BCME_SDIO_ERROR
;

3408 
	`IOV_GVAL
(
IOV_SDCIS
):

3410 *(*)
¨g
 = 0;

3412 
	`bcm°rˇt
(
¨g
, "\nFunc 0\n");

3413 
	`bcmsdh_cis_ªad
(
bus
->
sdh
, 0x10, (
uöt8
 *)
¨g
 + 
	`°æí
◊rg), 
SBSDIO_CIS_SIZE_LIMIT
);

3414 
	`bcm°rˇt
(
¨g
, "\nFunc 1\n");

3415 
	`bcmsdh_cis_ªad
(
bus
->
sdh
, 0x11, (
uöt8
 *)
¨g
 + 
	`°æí
◊rg), 
SBSDIO_CIS_SIZE_LIMIT
);

3416 
	`bcm°rˇt
(
¨g
, "\nFunc 2\n");

3417 
	`bcmsdh_cis_ªad
(
bus
->
sdh
, 0x12, (
uöt8
 *)
¨g
 + 
	`°æí
◊rg), 
SBSDIO_CIS_SIZE_LIMIT
);

3421 
	`IOV_GVAL
(
IOV_FORCEEVEN
):

3422 
öt_vÆ
 = (
öt32
)
f‹˚Æign
;

3423 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

3426 
	`IOV_SVAL
(
IOV_FORCEEVEN
):

3427 
f‹˚Æign
 = 
boﬁ_vÆ
;

3430 
	`IOV_GVAL
(
IOV_TXBOUND
):

3431 
öt_vÆ
 = (
öt32
)
dhd_txbound
;

3432 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

3435 
	`IOV_SVAL
(
IOV_TXBOUND
):

3436 
dhd_txbound
 = (
uöt
)
öt_vÆ
;

3439 
	`IOV_GVAL
(
IOV_RXBOUND
):

3440 
öt_vÆ
 = (
öt32
)
dhd_rxbound
;

3441 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

3444 
	`IOV_SVAL
(
IOV_RXBOUND
):

3445 
dhd_rxbound
 = (
uöt
)
öt_vÆ
;

3448 
	`IOV_GVAL
(
IOV_TXMINMAX
):

3449 
öt_vÆ
 = (
öt32
)
dhd_txmömax
;

3450 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

3453 
	`IOV_SVAL
(
IOV_TXMINMAX
):

3454 
dhd_txmömax
 = (
uöt
)
öt_vÆ
;

3457 
	`IOV_GVAL
(
IOV_SERIALCONS
):

3458 
öt_vÆ
 = 
	`dhd_£rülc⁄sﬁe
(
bus
, 
FALSE
, 0, &
bcmîr‹
);

3459 i‡(
bcmîr‹
 != 0)

3462 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

3465 
	`IOV_SVAL
(
IOV_SERIALCONS
):

3466 
	`dhd_£rülc⁄sﬁe
(
bus
, 
TRUE
, 
boﬁ_vÆ
, &
bcmîr‹
);

3474 #ifde‡
SDTEST


3475 
	`IOV_GVAL
(
IOV_EXTLOOP
):

3476 
öt_vÆ
 = (
öt32
)
bus
->
ext_lo›
;

3477 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

3480 
	`IOV_SVAL
(
IOV_EXTLOOP
):

3481 
bus
->
ext_lo›
 = 
boﬁ_vÆ
;

3484 
	`IOV_GVAL
(
IOV_PKTGEN
):

3485 
bcmîr‹
 = 
	`dhdsdio_pktgí_gë
(
bus
, 
¨g
);

3488 
	`IOV_SVAL
(
IOV_PKTGEN
):

3489 
bcmîr‹
 = 
	`dhdsdio_pktgí_£t
(
bus
, 
¨g
);

3493 #i‡
	`deföed
(
SDIO_CRC_ERROR_FIX
)

3494 
	`IOV_GVAL
(
IOV_WATERMARK
):

3495 
öt_vÆ
 = (
öt32
)
w©îm¨k
;

3496 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

3499 
	`IOV_SVAL
(
IOV_WATERMARK
):

3500 
w©îm¨k
 = (
uöt
)
öt_vÆ
;

3501 
w©îm¨k
 = (w©îm¨k > 
SBSDIO_WATERMARK_MASK
) ? SBSDIO_WATERMARK_MASK : watermark;

3502 
	`DHD_ERROR
(("Sëtög w©îm¨ká†0x%x.\n", 
w©îm¨k
));

3503 
	`bcmsdh_cfg_wrôe
(
bus
->
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_WATERMARK
, (
uöt8
)
w©îm¨k
, 
NULL
);

3506 
	`IOV_GVAL
(
IOV_MESBUSYCTRL
):

3507 
öt_vÆ
 = (
öt32
)
mesbusy˘æ
;

3508 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

3511 
	`IOV_SVAL
(
IOV_MESBUSYCTRL
):

3512 
mesbusy˘æ
 = (
uöt
)
öt_vÆ
;

3513 
mesbusy˘æ
 = (mesbusy˘æ > 
SBSDIO_MESBUSYCTRL_MASK
)

3514 ? 
SBSDIO_MESBUSYCTRL_MASK
 : 
mesbusy˘æ
;

3515 
	`DHD_ERROR
(("Sëtög mesbusy˘æá†0x%x.\n", 
mesbusy˘æ
));

3516 
	`bcmsdh_cfg_wrôe
(
bus
->
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_MESBUSYCTRL
,

3517 ((
uöt8
)
mesbusy˘æ
 | 0x80), 
NULL
);

3522 
	`IOV_GVAL
(
IOV_DONGLEISOLATION
):

3523 
öt_vÆ
 = 
bus
->
dhd
->
d⁄gÀ_isﬁ©i⁄
;

3524 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

3527 
	`IOV_SVAL
(
IOV_DONGLEISOLATION
):

3528 
bus
->
dhd
->
d⁄gÀ_isﬁ©i⁄
 = 
boﬁ_vÆ
;

3531 
	`IOV_SVAL
(
IOV_DEVRESET
):

3532 
	`DHD_TRACE
(("%s: Called set IOV_DEVRESET=%d dongle_reset=%d busstate=%d\n",

3533 
__FUNCTION__
, 
boﬁ_vÆ
, 
bus
->
dhd
->
d⁄gÀ_ª£t
,

3534 
bus
->
dhd
->
bus°©e
));

3536 
	`ASSERT
(
bus
->
dhd
->
osh
);

3539 
	`dhd_bus_devª£t
(
bus
->
dhd
, (
uöt8
)
boﬁ_vÆ
);

3542 #ifde‡
SOFTAP


3543 
	`IOV_GVAL
(
IOV_FWPATH
):

3545 
uöt32
 
fw_∑th_Àn
;

3547 
fw_∑th_Àn
 = 
	`°æí
(
bus
->
fw_∑th
);

3548 
	`DHD_INFO
(("[so·≠] gë fw∑th,Ü=%d\n", 
Àn
));

3550 i‡(
fw_∑th_Àn
 > 
Àn
-1) {

3551 
bcmîr‹
 = 
BCME_BUFTOOSHORT
;

3555 i‡(
fw_∑th_Àn
) {

3556 
	`bc›y
(
bus
->
fw_∑th
, 
¨g
, 
fw_∑th_Àn
);

3557 ((
uch¨
*)
¨g
)[
fw_∑th_Àn
] = 0;

3562 
	`IOV_SVAL
(
IOV_FWPATH
):

3563 
	`DHD_INFO
(("[so·≠] së fw∑th, idx=%d\n", 
öt_vÆ
));

3565 
öt_vÆ
) {

3567 
bus
->
fw_∑th
 = fw_path;

3570 
bus
->
fw_∑th
 = 
fw_∑th2
;

3573 
bcmîr‹
 = 
BCME_BADARG
;

3577 
	`DHD_INFO
(("[so·≠]Çew fwÖ©h: %s\n", (
bus
->
fw_∑th
[0] ? bus->fw_path : "NULL")));

3581 
	`IOV_GVAL
(
IOV_DEVRESET
):

3582 
	`DHD_TRACE
(("%s: CÆÀd gë IOV_DEVRESET\n", 
__FUNCTION__
));

3585 
öt_vÆ
 = (
boﬁ
Ë
bus
->
dhd
->
d⁄gÀ_ª£t
;

3586 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

3590 
	`IOV_GVAL
(
IOV_KSO
):

3591 
öt_vÆ
 = 
	`dhdsdio_¶ìpc§_gë
(
bus
);

3592 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

3595 
	`IOV_GVAL
(
IOV_DEVCAP
):

3596 
öt_vÆ
 = 
	`dhdsdio_devˇp_gë
(
bus
);

3597 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

3600 
	`IOV_SVAL
(
IOV_DEVCAP
):

3601 
	`dhdsdio_devˇp_£t
(
bus
, (
uöt8
Ë
öt_vÆ
);

3604 #ifde‡
BCMSDIOH_TXGLOM


3605 
	`IOV_GVAL
(
IOV_TXGLOMSIZE
):

3606 
öt_vÆ
 = (
öt32
)
bus
->
glomsize
;

3607 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

3610 
	`IOV_SVAL
(
IOV_TXGLOMSIZE
):

3611 i‡(
öt_vÆ
 > 
SDPCM_MAXGLOM_SIZE
) {

3612 
bcmîr‹
 = 
BCME_ERROR
;

3614 
bus
->
glomsize
 = (
uöt
)
öt_vÆ
;

3617 
	`IOV_GVAL
(
IOV_TXGLOMMODE
):

3618 
öt_vÆ
 = (
öt32
)
bus
->
glom_mode
;

3619 
	`bc›y
(&
öt_vÆ
, 
¨g
, 
vÆ_size
);

3622 
	`IOV_SVAL
(
IOV_TXGLOMMODE
):

3623 i‡((
öt_vÆ
 !
SDPCM_TXGLOM_CPY
Ë&& (öt_vÆ !
SDPCM_TXGLOM_MDESC
)) {

3624 
bcmîr‹
 = 
BCME_RANGE
;

3626 i‡((
bus
->
glom_mode
 = 
	`bcmsdh_£t_mode
(bus->
sdh
, (
uöt
)
öt_vÆ
)) != int_val)

3627 
bcmîr‹
 = 
BCME_ERROR
;

3632 
bcmîr‹
 = 
BCME_UNSUPPORTED
;

3636 
exô
:

3637 i‡((
bus
->
idÀtime
 =
DHD_IDLE_IMMEDIATE
Ë&& !bus->
dpc_sched
) {

3638 
bus
->
a˘ivôy
 = 
FALSE
;

3639 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_NONE
, 
TRUE
);

3642 
	`dhd_os_sdu∆ock
(
bus
->
dhd
);

3644  
bcmîr‹
;

3645 
	}
}

3648 
	$dhdsdio_wrôe_v¨s
(
dhd_bus_t
 *
bus
)

3650 
bcmîr‹
 = 0;

3651 
uöt32
 
v¨size
, 
phys_size
;

3652 
uöt32
 
v¨addr
;

3653 
uöt8
 *
vbuf„r
;

3654 
uöt32
 
v¨sizew
;

3655 #ifde‡
DHD_DEBUG


3656 
uöt8
 *
nvøm_uœºay
;

3660 
v¨size
 = 
bus
->
v¨sz
 ? 
	`ROUNDUP
(bus->varsz, 4) : 0;

3661 
v¨addr
 = (
bus
->
ømsize
 - 4Ë- 
v¨size
;

3663 
v¨addr
 +
bus
->
d⁄gÀ_øm_ba£
;

3665 i‡(
bus
->
v¨s
) {

3666 i‡((
bus
->
sih
->
busc‹ëy≥
 =
SDIOD_CORE_ID
Ë&& (bus->
sdpcmªv
 == 7)) {

3667 i‡(((
v¨addr
 & 0x3CË=0x3CË&& (
v¨size
 > 4)) {

3668 
	`DHD_ERROR
(("PR85623WAR inÖlace\n"));

3669 
v¨size
 += 4;

3670 
v¨addr
 -= 4;

3674 
vbuf„r
 = (
uöt8
 *)
	`MALLOC
(
bus
->
dhd
->
osh
, 
v¨size
);

3675 i‡(!
vbuf„r
)

3676  
BCME_NOMEM
;

3678 
	`bzîo
(
vbuf„r
, 
v¨size
);

3679 
	`bc›y
(
bus
->
v¨s
, 
vbuf„r
, bus->
v¨sz
);

3682 
bcmîr‹
 = 
	`dhdsdio_membyãs
(
bus
, 
TRUE
, 
v¨addr
, 
vbuf„r
, 
v¨size
);

3683 #ifde‡
DHD_DEBUG


3685 
	`DHD_INFO
(("Com∑ª NVRAM d»& ul; v¨size=%d\n", 
v¨size
));

3686 
nvøm_uœºay
 = (
uöt8
*)
	`MALLOC
(
bus
->
dhd
->
osh
, 
v¨size
);

3687 i‡(!
nvøm_uœºay
)

3688  
BCME_NOMEM
;

3691 
	`mem£t
(
nvøm_uœºay
, 0xØ, 
v¨size
);

3694 
bcmîr‹
 = 
	`dhdsdio_membyãs
(
bus
, 
FALSE
, 
v¨addr
, 
nvøm_uœºay
, 
v¨size
);

3695 i‡(
bcmîr‹
) {

3696 
	`DHD_ERROR
(("%s:Érror %d onÑeading %dÇvram bytesát 0x%08x\n",

3697 
__FUNCTION__
, 
bcmîr‹
, 
v¨size
, 
v¨addr
));

3700 i‡(
	`memcmp
(
vbuf„r
, 
nvøm_uœºay
, 
v¨size
)) {

3701 
	`DHD_ERROR
(("%s: Dow∆ﬂded NVRAM imagêi†c‹ru±ed.\n", 
__FUNCTION__
));

3703 
	`DHD_ERROR
(("%s: Download, Uploadánd compare of NVRAM succeeded.\n",

3704 
__FUNCTION__
));

3706 
	`MFREE
(
bus
->
dhd
->
osh
, 
nvøm_uœºay
, 
v¨size
);

3709 
	`MFREE
(
bus
->
dhd
->
osh
, 
vbuf„r
, 
v¨size
);

3712 
phys_size
 = 
	`REMAP_ENAB
(
bus
Ë? bus->
ømsize
 : bus->
‹ig_ømsize
;

3714 
phys_size
 +
bus
->
d⁄gÀ_øm_ba£
;

3717 
	`DHD_INFO
(("Physical memory size: %d, usable memory size: %d\n",

3718 
phys_size
, 
bus
->
ømsize
));

3719 
	`DHD_INFO
(("Varsáreát %d, orig varsize is %d\n",

3720 
v¨addr
, 
v¨size
));

3721 
v¨size
 = ((
phys_size
 - 4Ë- 
v¨addr
);

3727 i‡(
bcmîr‹
) {

3728 
v¨sizew
 = 0;

3730 
v¨sizew
 = 
v¨size
 / 4;

3731 
v¨sizew
 = (~varsizew << 16) | (varsizew & 0x0000FFFF);

3732 
v¨sizew
 = 
	`htﬁ32
(varsizew);

3735 
	`DHD_INFO
(("New v¨sizêi†%d,ÜígthÅokí=0x%08x\n", 
v¨size
, 
v¨sizew
));

3738 
bcmîr‹
 = 
	`dhdsdio_membyãs
(
bus
, 
TRUE
, (
phys_size
 - 4),

3739 (
uöt8
*)&
v¨sizew
, 4);

3741  
bcmîr‹
;

3742 
	}
}

3745 
	$dhdsdio_dow∆ﬂd_°©e
(
dhd_bus_t
 *
bus
, 
boﬁ
 
íãr
)

3747 
uöt
 
ªåõs
;

3748 
bcmîr‹
 = 0;

3749 
found¸4
 = 0;

3754 i‡(
íãr
) {

3755 
bus
->
Æp_⁄ly
 = 
TRUE
;

3757 i‡(!(
	`si_£tc‹e
(
bus
->
sih
, 
ARM7S_CORE_ID
, 0)) &&

3758 !(
	`si_£tc‹e
(
bus
->
sih
, 
ARMCM3_CORE_ID
, 0))) {

3759 i‡(
	`si_£tc‹e
(
bus
->
sih
, 
ARMCR4_CORE_ID
, 0)) {

3760 
found¸4
 = 1;

3762 
	`DHD_ERROR
(("%s: FaûedÅÿföd ARM c‹e!\n", 
__FUNCTION__
));

3763 
bcmîr‹
 = 
BCME_ERROR
;

3764 
Áû
;

3768 i‡(!
found¸4
) {

3769 
	`si_c‹e_dißbÀ
(
bus
->
sih
, 0);

3770 i‡(
	`bcmsdh_ªgÁû
(
bus
->
sdh
)) {

3771 
bcmîr‹
 = 
BCME_SDIO_ERROR
;

3772 
Áû
;

3775 i‡(!(
	`si_£tc‹e
(
bus
->
sih
, 
SOCRAM_CORE_ID
, 0))) {

3776 
	`DHD_ERROR
(("%s: FaûedÅÿföd SOCRAM c‹e!\n", 
__FUNCTION__
));

3777 
bcmîr‹
 = 
BCME_ERROR
;

3778 
Áû
;

3781 
	`si_c‹e_ª£t
(
bus
->
sih
, 0, 0);

3782 i‡(
	`bcmsdh_ªgÁû
(
bus
->
sdh
)) {

3783 
	`DHD_ERROR
(("%s: FaûuªÅryögÑe£àSOCRAM c‹e?\n", 
__FUNCTION__
));

3784 
bcmîr‹
 = 
BCME_SDIO_ERROR
;

3785 
Áû
;

3789 i‡(
	`REMAP_ENAB
(
bus
Ë&& 
	`si_socdevøm_ªm≠_i£nb
(bus->
sih
))

3790 
	`dhdsdio_devøm_ªm≠
(
bus
, 
FALSE
);

3793 i‡(
bus
->
ømsize
) {

3794 
uöt32
 
zîos
 = 0;

3795 i‡(
	`dhdsdio_membyãs
(
bus
, 
TRUE
, bus->
ømsize
 - 4, (
uöt8
*)&
zîos
, 4) < 0) {

3796 
bcmîr‹
 = 
BCME_SDIO_ERROR
;

3797 
Áû
;

3810 
	`si_c‹e_ª£t
(
bus
->
sih
, 
SICF_CPUHALT
, SICF_CPUHALT);

3813 i‡(!
	`si_£tc‹e
(
bus
->
sih
, 
ARMCR4_CORE_ID
, 0)) {

3814 i‡(!(
	`si_£tc‹e
(
bus
->
sih
, 
SOCRAM_CORE_ID
, 0))) {

3815 
	`DHD_ERROR
(("%s: FaûedÅÿföd SOCRAM c‹e!\n", 
__FUNCTION__
));

3816 
bcmîr‹
 = 
BCME_ERROR
;

3817 
Áû
;

3820 i‡(!
	`si_isc‹eup
(
bus
->
sih
)) {

3821 
	`DHD_ERROR
(("%s: SOCRAM c‹êi†dow¿a·îÑe£t?\n", 
__FUNCTION__
));

3822 
bcmîr‹
 = 
BCME_ERROR
;

3823 
Áû
;

3826 i‡((
bcmîr‹
 = 
	`dhdsdio_wrôe_v¨s
(
bus
))) {

3827 
	`DHD_ERROR
(("%s: couldÇŸ wrôêv¨†tÿRAM\n", 
__FUNCTION__
));

3828 
Áû
;

3834 i‡(
	`REMAP_ENAB
(
bus
Ë&& !
	`si_socdevøm_ªm≠_i£nb
(bus->
sih
))

3835 
	`dhdsdio_devøm_ªm≠
(
bus
, 
TRUE
);

3837 i‡(!
	`si_£tc‹e
(
bus
->
sih
, 
PCMCIA_CORE_ID
, 0) &&

3838 !
	`si_£tc‹e
(
bus
->
sih
, 
SDIOD_CORE_ID
, 0)) {

3839 
	`DHD_ERROR
(("%s: C™'àch™gêbackÅÿSDIO c‹e?\n", 
__FUNCTION__
));

3840 
bcmîr‹
 = 
BCME_ERROR
;

3841 
Áû
;

3843 
	`W_SDREG
(0xFFFFFFFF, &
bus
->
ªgs
->
öt°©us
, 
ªåõs
);

3846 i‡(!(
	`si_£tc‹e
(
bus
->
sih
, 
ARM7S_CORE_ID
, 0)) &&

3847 !(
	`si_£tc‹e
(
bus
->
sih
, 
ARMCM3_CORE_ID
, 0))) {

3848 
	`DHD_ERROR
(("%s: FaûedÅÿföd ARM c‹e!\n", 
__FUNCTION__
));

3849 
bcmîr‹
 = 
BCME_ERROR
;

3850 
Áû
;

3855 i‡((
bcmîr‹
 = 
	`dhdsdio_wrôe_v¨s
(
bus
))) {

3856 
	`DHD_ERROR
(("%s: couldÇŸ wrôêv¨†tÿRAM\n", 
__FUNCTION__
));

3857 
Áû
;

3860 i‡(!
	`si_£tc‹e
(
bus
->
sih
, 
PCMCIA_CORE_ID
, 0) &&

3861 !
	`si_£tc‹e
(
bus
->
sih
, 
SDIOD_CORE_ID
, 0)) {

3862 
	`DHD_ERROR
(("%s: C™'àch™gêbackÅÿSDIO c‹e?\n", 
__FUNCTION__
));

3863 
bcmîr‹
 = 
BCME_ERROR
;

3864 
Áû
;

3866 
	`W_SDREG
(0xFFFFFFFF, &
bus
->
ªgs
->
öt°©us
, 
ªåõs
);

3869 i‡(!(
	`si_£tc‹e
(
bus
->
sih
, 
ARMCR4_CORE_ID
, 0))) {

3870 
	`DHD_ERROR
(("%s: FaûedÅÿföd ARM CR4 c‹e!\n", 
__FUNCTION__
));

3871 
bcmîr‹
 = 
BCME_ERROR
;

3872 
Áû
;

3875 
bcmîr‹
 = 
	`dhdsdio_membyãs
(
bus
, 
TRUE
, 0,

3876 (
uöt8
 *)&
bus
->
ª£tö°r
, (bus->resetinstr));

3881 
	`si_c‹e_ª£t
(
bus
->
sih
, 0, 0);

3882 i‡(
	`bcmsdh_ªgÁû
(
bus
->
sdh
)) {

3883 
	`DHD_ERROR
(("%s: FaûuªÅryögÅÿª£àARM c‹e?\n", 
__FUNCTION__
));

3884 
bcmîr‹
 = 
BCME_SDIO_ERROR
;

3885 
Áû
;

3889 
bus
->
Æp_⁄ly
 = 
FALSE
;

3891 
bus
->
dhd
->
bus°©e
 = 
DHD_BUS_LOAD
;

3894 
Áû
:

3896 i‡(!
	`si_£tc‹e
(
bus
->
sih
, 
PCMCIA_CORE_ID
, 0))

3897 
	`si_£tc‹e
(
bus
->
sih
, 
SDIOD_CORE_ID
, 0);

3899  
bcmîr‹
;

3900 
	}
}

3903 
	$dhd_bus_iov¨_›
(
dhd_pub_t
 *
dhdp
, c⁄° *
«me
,

3904 *
∑øms
, 
∂í
, *
¨g
, 
Àn
, 
boﬁ
 
£t
)

3906 
dhd_bus_t
 *
bus
 = 
dhdp
->bus;

3907 c⁄° 
bcm_iov¨_t
 *
vi
 = 
NULL
;

3908 
bcmîr‹
 = 0;

3909 
vÆ_size
;

3910 
uöt32
 
a˘i⁄id
;

3912 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

3914 
	`ASSERT
(
«me
);

3915 
	`ASSERT
(
Àn
 >= 0);

3918 
	`ASSERT
(
£t
 || (
¨g
 && 
Àn
));

3921 
	`ASSERT
(!
£t
 || (!
∑øms
 && !
∂í
));

3924 i‡((
vi
 = 
	`bcm_iov¨_lookup
(
dhdsdio_iov¨s
, 
«me
)Ë=
NULL
) {

3925 
	`dhd_os_sdlock
(
bus
->
dhd
);

3927 
	`BUS_WAKE
(
bus
);

3930 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_AVAIL
, 
FALSE
);

3932 
bcmîr‹
 = 
	`bcmsdh_iov¨_›
(
bus
->
sdh
, 
«me
, 
∑øms
, 
∂í
, 
¨g
, 
Àn
, 
£t
);

3937 i‡(
£t
 && 
	`°rcmp
(
«me
, "sd_divisor") == 0) {

3938 i‡(
	`bcmsdh_iov¨_›
(
bus
->
sdh
, "sd_divis‹", 
NULL
, 0,

3939 &
bus
->
sd_divis‹
, (
öt32
), 
FALSE
Ë!
BCME_OK
) {

3940 
bus
->
sd_divis‹
 = -1;

3941 
	`DHD_ERROR
(("%s: faû o¿%†gë\n", 
__FUNCTION__
, 
«me
));

3943 
	`DHD_INFO
(("%s:Çoted %s update, valueÇow %d\n",

3944 
__FUNCTION__
, 
«me
, 
bus
->
sd_divis‹
));

3948 i‡(
£t
 && 
	`°rcmp
(
«me
, "sd_mode") == 0) {

3949 i‡(
	`bcmsdh_iov¨_›
(
bus
->
sdh
, "sd_mode", 
NULL
, 0,

3950 &
bus
->
sd_mode
, (
öt32
), 
FALSE
Ë!
BCME_OK
) {

3951 
bus
->
sd_mode
 = -1;

3952 
	`DHD_ERROR
(("%s: faû o¿%†gë\n", 
__FUNCTION__
, 
«me
));

3954 
	`DHD_INFO
(("%s:Çoted %s update, valueÇow %d\n",

3955 
__FUNCTION__
, 
«me
, 
bus
->
sd_mode
));

3959 i‡(
£t
 && 
	`°rcmp
(
«me
, "sd_blocksize") == 0) {

3960 
öt32
 
‚um
 = 2;

3961 i‡(
	`bcmsdh_iov¨_›
(
bus
->
sdh
, "sd_blocksize", &
‚um
, (
öt32
),

3962 &
bus
->
blocksize
, (
öt32
), 
FALSE
Ë!
BCME_OK
) {

3963 
bus
->
blocksize
 = 0;

3964 
	`DHD_ERROR
(("%s: faû o¿%†gë\n", 
__FUNCTION__
, "sd_blocksize"));

3966 
	`DHD_INFO
(("%s:Çoted %s update, valueÇow %d\n",

3967 
__FUNCTION__
, "sd_blocksize", 
bus
->
blocksize
));

3970 
bus
->
roundup
 = 
	`MIN
(
max_roundup
, bus->
blocksize
);

3972 i‡((
bus
->
idÀtime
 =
DHD_IDLE_IMMEDIATE
Ë&& !bus->
dpc_sched
) {

3973 
bus
->
a˘ivôy
 = 
FALSE
;

3974 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_NONE
, 
TRUE
);

3977 
	`dhd_os_sdu∆ock
(
bus
->
dhd
);

3978 
exô
;

3981 
	`DHD_CTL
(("%s: %†%s,Üí %dÖÀ¿%d\n", 
__FUNCTION__
,

3982 
«me
, (
£t
 ? "£t" : "gë"), 
Àn
, 
∂í
));

3987 i‡(
∑øms
 =
NULL
) {

3988 
∑øms
 = 
¨g
;

3989 
∂í
 = 
Àn
;

3992 i‡(
vi
->
ty≥
 =
IOVT_VOID
)

3993 
vÆ_size
 = 0;

3994 i‡(
vi
->
ty≥
 =
IOVT_BUFFER
)

3995 
vÆ_size
 = 
Àn
;

3998 
vÆ_size
 = ();

4000 
a˘i⁄id
 = 
£t
 ? 
	`IOV_SVAL
(
vi
->
v¨id
Ë: 
	`IOV_GVAL
(vi->varid);

4001 
bcmîr‹
 = 
	`dhdsdio_doiov¨
(
bus
, 
vi
, 
a˘i⁄id
, 
«me
, 
∑øms
, 
∂í
, 
¨g
, 
Àn
, 
vÆ_size
);

4003 
exô
:

4004  
bcmîr‹
;

4005 
	}
}

4008 
	$dhd_bus_°›
(
dhd_bus
 *
bus
, 
boﬁ
 
íf‹˚_muãx
)

4010 
o¶_t
 *
osh
;

4011 
uöt32
 
loˇl_ho°ötmask
;

4012 
uöt8
 
ßve˛k
, 
d©
;

4013 
uöt
 
ªåõs
;

4014 
îr
;

4015 i‡(!
bus
->
dhd
)

4018 
osh
 = 
bus
->
dhd
->osh;

4019 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

4021 
	`bcmsdh_waôlock‰ì
(
NULL
);

4023 i‡(
íf‹˚_muãx
)

4024 
	`dhd_os_sdlock
(
bus
->
dhd
);

4026 i‡((
bus
->
dhd
->
bus°©e
 =
DHD_BUS_DOWN
Ë|| bus->dhd->
h™g_was_£¡
) {

4028 
bus
->
dhd
->
bus°©e
 = 
DHD_BUS_DOWN
;

4029 
bus
->
ho°ötmask
 = 0;

4030 
	`bcmsdh_öå_dißbÀ
(
bus
->
sdh
);

4033 
	`BUS_WAKE
(
bus
);

4035 i‡(
	`KSO_ENAB
(
bus
)) {

4037 
d©
 = 
	`bcmsdh_cfg_ªad
(
bus
->
sdh
, 
SDIO_FUNC_0
, 
SDIOD_CCCR_INTEN
, 
NULL
);

4038 
d©
 &~(
INTR_CTL_FUNC1_EN
 | 
INTR_CTL_FUNC2_EN
);

4039 
	`bcmsdh_cfg_wrôe
(
bus
->
sdh
, 
SDIO_FUNC_0
, 
SDIOD_CCCR_INTEN
, 
d©
, 
NULL
);

4043 
bus
->
dhd
->
bus°©e
 = 
DHD_BUS_DOWN
;

4045 i‡(
	`KSO_ENAB
(
bus
)) {

4048 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_AVAIL
, 
FALSE
);

4051 
	`W_SDREG
(0, &
bus
->
ªgs
->
ho°ötmask
, 
ªåõs
);

4052 
loˇl_ho°ötmask
 = 
bus
->
ho°ötmask
;

4053 
bus
->
ho°ötmask
 = 0;

4056 
ßve˛k
 = 
	`bcmsdh_cfg_ªad
(
bus
->
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_CHIPCLKCSR
, &
îr
);

4057 i‡(!
îr
) {

4058 
	`bcmsdh_cfg_wrôe
(
bus
->
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_CHIPCLKCSR
,

4059 (
ßve˛k
 | 
SBSDIO_FORCE_HT
), &
îr
);

4061 i‡(
îr
) {

4062 
	`DHD_ERROR
(("%s: FailedÅo force clock for F2:Érr %d\n",

4063 
__FUNCTION__
, 
îr
));

4067 
	`DHD_INTR
(("%s: dißbÀ SDIO i¡îru±s\n", 
__FUNCTION__
));

4068 
	`bcmsdh_öå_dißbÀ
(
bus
->
sdh
);

4069 
	`bcmsdh_cfg_wrôe
(
bus
->
sdh
, 
SDIO_FUNC_0
, 
SDIOD_CCCR_IOEN
, 
SDIO_FUNC_ENABLE_1
, 
NULL
);

4072 
	`W_SDREG
(
loˇl_ho°ötmask
, &
bus
->
ªgs
->
öt°©us
, 
ªåõs
);

4076 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_SDONLY
, 
FALSE
);

4080 
	`pktq_Êush
(
osh
, &
bus
->
txq
, 
TRUE
, 
NULL
, 0);

4083 i‡(
bus
->
glomd
)

4084 
	`PKTFREE
(
osh
, 
bus
->
glomd
, 
FALSE
);

4086 i‡(
bus
->
glom
)

4087 
	`PKTFREE
(
osh
, 
bus
->
glom
, 
FALSE
);

4089 
bus
->
glom
 = bus->
glomd
 = 
NULL
;

4092 
bus
->
rxÀn
 = 0;

4093 
	`dhd_os_io˘l_ª•_wake
(
bus
->
dhd
);

4096 
bus
->
rxskù
 = 
FALSE
;

4097 
bus
->
tx_£q
 = bus->
rx_£q
 = 0;

4099 i‡(
íf‹˚_muãx
)

4100 
	`dhd_os_sdu∆ock
(
bus
->
dhd
);

4101 
	}
}

4103 #ifde‡
BCMSDIOH_TXGLOM


4105 
	$dhd_txglom_íabÀ
(
dhd_pub_t
 *
dhdp
, 
boﬁ
 
íabÀ
)

4107 
dhd_bus_t
 *
bus
 = 
dhdp
->bus;

4109 
buf
[256];

4110 
uöt32
 
rxglom
;

4111 
öt32
 
ªt
;

4113 i‡(
íabÀ
) {

4114 
rxglom
 = 1;

4115 
	`mem£t
(
buf
, 0, (buf));

4116 
	`bcm_mkiov¨
("bus:rxglom",

4117 (*)&
rxglom
,

4118 4, 
buf
, (buf));

4119 
ªt
 = 
	`dhd_wl_io˘l_cmd
(
dhdp
,

4120 
WLC_SET_VAR
, 
buf
,

4121 (
buf
), 
TRUE
, 0);

4122 i‡(!(
ªt
 < 0)) {

4123 
bus
->
glom_íabÀ
 = 
TRUE
;

4126 
bus
->
glom_íabÀ
 = 
FALSE
;

4128 
	}
}

4132 
	$dhd_bus_öô
(
dhd_pub_t
 *
dhdp
, 
boﬁ
 
íf‹˚_muãx
)

4134 
dhd_bus_t
 *
bus
 = 
dhdp
->bus;

4135 
dhd_timeout_t
 
tmo
;

4136 
uöt
 
ªåõs
 = 0;

4137 
uöt8
 
ªady
, 
íabÀ
;

4138 
îr
, 
ªt
 = 0;

4139 
uöt8
 
ßve˛k
;

4141 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

4143 
	`ASSERT
(
bus
->
dhd
);

4144 i‡(!
bus
->
dhd
)

4147 i‡(
íf‹˚_muãx
)

4148 
	`dhd_os_sdlock
(
bus
->
dhd
);

4151 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_AVAIL
, 
FALSE
);

4152 i‡(
bus
->
˛k°©e
 !
CLK_AVAIL
) {

4153 
	`DHD_ERROR
(("%s: clock sèã i†wr⁄g. sèã = %d\n", 
__FUNCTION__
, 
bus
->
˛k°©e
));

4154 
ªt
 = -1;

4155 
exô
;

4160 
ßve˛k
 = 
	`bcmsdh_cfg_ªad
(
bus
->
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_CHIPCLKCSR
, &
îr
);

4161 i‡(!
îr
) {

4162 
	`bcmsdh_cfg_wrôe
(
bus
->
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_CHIPCLKCSR
,

4163 (
ßve˛k
 | 
SBSDIO_FORCE_HT
), &
îr
);

4165 i‡(
îr
) {

4166 
	`DHD_ERROR
(("%s: FaûedÅÿf‹˚ clock f‹ F2:Éº %d\n", 
__FUNCTION__
, 
îr
));

4167 
ªt
 = -1;

4168 
exô
;

4172 
	`W_SDREG
((
SDPCM_PROT_VERSION
 << 
SMB_DATA_VERSION_SHIFT
),

4173 &
bus
->
ªgs
->
tosbmaûboxd©a
, 
ªåõs
);

4174 
íabÀ
 = (
SDIO_FUNC_ENABLE_1
 | 
SDIO_FUNC_ENABLE_2
);

4176 
	`bcmsdh_cfg_wrôe
(
bus
->
sdh
, 
SDIO_FUNC_0
, 
SDIOD_CCCR_IOEN
, 
íabÀ
, 
NULL
);

4179 
	`dhd_timeout_°¨t
(&
tmo
, 
DHD_WAIT_F2RDY
 * 1000);

4181 
ªady
 = 0;

4182 
ªady
 !
íabÀ
 && !
	`dhd_timeout_expúed
(&
tmo
))

4183 
ªady
 = 
	`bcmsdh_cfg_ªad
(
bus
->
sdh
, 
SDIO_FUNC_0
, 
SDIOD_CCCR_IORDY
, 
NULL
);

4185 
	`DHD_ERROR
(("%s:Énable 0x%02x,Ñeady 0x%02x (waited %uus)\n",

4186 
__FUNCTION__
, 
íabÀ
, 
ªady
, 
tmo
.
ñ≠£d
));

4190 i‡(
ªady
 =
íabÀ
) {

4192 i‡(!(
bus
->
ªgs
 = 
	`si_£tc‹e
(bus->
sih
, 
PCMCIA_CORE_ID
, 0)))

4193 
bus
->
ªgs
 = 
	`si_£tc‹e
(bus->
sih
, 
SDIOD_CORE_ID
, 0);

4194 
	`ASSERT
(
bus
->
ªgs
 !
NULL
);

4197 
bus
->
ho°ötmask
 = 
HOSTINTMASK
;

4199 i‡((
bus
->
sih
->
busc‹ëy≥
 =
SDIOD_CORE_ID
Ë&& (bus->
sdpcmªv
 == 4) &&

4200 (
bus
->
rxöt_mode
 !
SDIO_DEVICE_HMB_RXINT
)) {

4201 
bus
->
ho°ötmask
 &~
I_HMB_FRAME_IND
;

4202 
bus
->
ho°ötmask
 |
I_XMTDATA_AVAIL
;

4204 
	`W_SDREG
(
bus
->
ho°ötmask
, &bus->
ªgs
->ho°ötmask, 
ªåõs
);

4205 #ifde‡
SDIO_CRC_ERROR_FIX


4206 i‡(
bus
->
blocksize
 < 512) {

4207 
mesbusy˘æ
 = 
w©îm¨k
 = 
bus
->
blocksize
 / 4;

4211 
	`bcmsdh_cfg_wrôe
(
bus
->
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_WATERMARK
, (
uöt8
)
w©îm¨k
, &
îr
);

4212 #ifde‡
SDIO_CRC_ERROR_FIX


4213 
	`bcmsdh_cfg_wrôe
(
bus
->
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_MESBUSYCTRL
,

4214 (
uöt8
)
mesbusy˘æ
|0x80, &
îr
);

4215 
	`bcmsdh_cfg_wrôe
(
bus
->
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_DEVICE_CTL
,

4216 
SBSDIO_DEVCTL_EN_F2_BLK_WATERMARK
, 
NULL
);

4220 
dhdp
->
bus°©e
 = 
DHD_BUS_DATA
;

4224 
bus
->
ötdis
 = 
FALSE
;

4225 i‡(
bus
->
öå
) {

4226 
	`DHD_INTR
(("%s:É«bÀ SDIO devi˚ i¡îru±s\n", 
__FUNCTION__
));

4227 
	`bcmsdh_öå_íabÀ
(
bus
->
sdh
);

4229 
	`DHD_INTR
(("%s: dißbÀ SDIO i¡îru±s\n", 
__FUNCTION__
));

4230 
	`bcmsdh_öå_dißbÀ
(
bus
->
sdh
);

4238 
íabÀ
 = 
SDIO_FUNC_ENABLE_1
;

4239 
	`bcmsdh_cfg_wrôe
(
bus
->
sdh
, 
SDIO_FUNC_0
, 
SDIOD_CCCR_IOEN
, 
íabÀ
, 
NULL
);

4242 i‡(
	`dhdsdio_§_ˇp
(
bus
))

4243 
	`dhdsdio_§_öô
(
bus
);

4245 
	`bcmsdh_cfg_wrôe
(
bus
->
sdh
, 
SDIO_FUNC_1
,

4246 
SBSDIO_FUNC1_CHIPCLKCSR
, 
ßve˛k
, &
îr
);

4249 i‡(
dhdp
->
bus°©e
 !
DHD_BUS_DATA
)

4250 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_NONE
, 
FALSE
);

4252 
exô
:

4253 i‡(
íf‹˚_muãx
)

4254 
	`dhd_os_sdu∆ock
(
bus
->
dhd
);

4256  
ªt
;

4257 
	}
}

4260 
	$dhdsdio_rxÁû
(
dhd_bus_t
 *
bus
, 
boﬁ
 
ab‹t
, boﬁ 
πx
)

4262 
bcmsdh_öfo_t
 *
sdh
 = 
bus
->sdh;

4263 
sdpcmd_ªgs_t
 *
ªgs
 = 
bus
->regs;

4264 
uöt
 
ªåõs
 = 0;

4265 
uöt16
 
œ°rbc
;

4266 
uöt8
 
hi
, 
lo
;

4267 
îr
;

4269 
	`DHD_ERROR
(("%s: %°îmö©ê‰ame%s\n", 
__FUNCTION__
,

4270 (
ab‹t
 ? "ab‹àcomm™d, " : ""), (
πx
 ? ", send NAK" : "")));

4272 i‡(!
	`KSO_ENAB
(
bus
)) {

4273 
	`DHD_ERROR
(("%s: Devi˚á¶ìp\n", 
__FUNCTION__
));

4277 i‡(
ab‹t
) {

4278 
	`bcmsdh_ab‹t
(
sdh
, 
SDIO_FUNC_2
);

4281 
	`bcmsdh_cfg_wrôe
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_FRAMECTRL
, 
SFC_RF_TERM
, &
îr
);

4282 
bus
->
f1ªgd©a
++;

4285 
œ°rbc
 = 
ªåõs
 = 0xffff;Ñetries > 0;Ñetries--) {

4286 
hi
 = 
	`bcmsdh_cfg_ªad
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_RFRAMEBCHI
, 
NULL
);

4287 
lo
 = 
	`bcmsdh_cfg_ªad
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_RFRAMEBCLO
, 
NULL
);

4288 
bus
->
f1ªgd©a
 += 2;

4290 i‡((
hi
 =0Ë&& (
lo
 == 0))

4293 i‡((
hi
 > (
œ°rbc
 >> 8)Ë&& (
lo
 > (lastrbc & 0x00ff))) {

4294 
	`DHD_ERROR
(("%s: count growing:Üast 0x%04xÇow 0x%04x\n",

4295 
__FUNCTION__
, 
œ°rbc
, ((
hi
 << 8Ë+ 
lo
)));

4297 
œ°rbc
 = (
hi
 << 8Ë+ 
lo
;

4300 i‡(!
ªåõs
) {

4301 
	`DHD_ERROR
(("%s: cou¡Çevî zî€d:Üa° 0x%04x\n", 
__FUNCTION__
, 
œ°rbc
));

4303 
	`DHD_INFO
(("%s: flushÅook %d iãøti⁄s\n", 
__FUNCTION__
, (0xfff‡- 
ªåõs
)));

4306 i‡(
πx
) {

4307 
bus
->
rxπx
++;

4308 
	`W_SDREG
(
SMB_NAK
, &
ªgs
->
tosbmaûbox
, 
ªåõs
);

4309 
bus
->
f1ªgd©a
++;

4310 i‡(
ªåõs
 <
ªåy_limô
) {

4311 
bus
->
rxskù
 = 
TRUE
;

4316 
bus
->
√xéí
 = 0;

4319 i‡(
îr
 || 
	`bcmsdh_ªgÁû
(
sdh
))

4320 
bus
->
dhd
->
bus°©e
 = 
DHD_BUS_DOWN
;

4321 
	}
}

4324 
	$dhdsdio_ªad_c⁄åﬁ
(
dhd_bus_t
 *
bus
, 
uöt8
 *
hdr
, 
uöt
 
Àn
, uöà
doff
)

4326 
bcmsdh_öfo_t
 *
sdh
 = 
bus
->sdh;

4327 
uöt
 
rdÀn
, 
∑d
;

4329 
sdªt
;

4331 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

4334 i‡((
bus
->bu†=
SPI_BUS
Ë&& (!bus->
u£buÂoﬁ
))

4335 
gŸpkt
;

4337 
	`ASSERT
(
bus
->
rxbuf
);

4339 
bus
->
rx˘l
 = bus->
rxbuf
;

4340 i‡(
dhd_Æign˘l
) {

4341 
bus
->
rx˘l
 +
fú°ªad
;

4342 i‡((
∑d
 = ((
uöçå
)
bus
->
rx˘l
 % 
DHD_SDALIGN
)))

4343 
bus
->
rx˘l
 +(
DHD_SDALIGN
 - 
∑d
);

4344 
bus
->
rx˘l
 -
fú°ªad
;

4346 
	`ASSERT
(
bus
->
rx˘l
 >bus->
rxbuf
);

4349 
	`bc›y
(
hdr
, 
bus
->
rx˘l
, 
fú°ªad
);

4350 i‡(
Àn
 <
fú°ªad
)

4351 
gŸpkt
;

4354 i‡(
bus
->bu†=
SPI_BUS
) {

4355 
	`bc›y
(
hdr
, 
bus
->
rx˘l
, 
Àn
);

4356 
gŸpkt
;

4360 
rdÀn
 = 
Àn
 - 
fú°ªad
;

4361 i‡(
bus
->
roundup
 && bus->
blocksize
 && (
rdÀn
 > bus->blocksize)) {

4362 
∑d
 = 
bus
->
blocksize
 - (
rdÀn
 % bus->blocksize);

4363 i‡((
∑d
 <
bus
->
roundup
Ë&& (∑d < bus->
blocksize
) &&

4364 ((
Àn
 + 
∑d
Ë< 
bus
->
dhd
->
max˘l
))

4365 
rdÀn
 +
∑d
;

4366 } i‡(
rdÀn
 % 
DHD_SDALIGN
) {

4367 
rdÀn
 +
DHD_SDALIGN
 - (rdlen % DHD_SDALIGN);

4371 i‡(
f‹˚Æign
 && (
rdÀn
 & (
ALIGNMENT
 - 1)))

4372 
rdÀn
 = 
	`ROUNDUP
‘dÀn, 
ALIGNMENT
);

4375 i‡((
rdÀn
 + 
fú°ªad
Ë> 
bus
->
dhd
->
max˘l
) {

4376 
	`DHD_ERROR
(("%s: %d-byte controlÑeadÉxceeds %d-byte buffer\n",

4377 
__FUNCTION__
, 
rdÀn
, 
bus
->
dhd
->
max˘l
));

4378 
bus
->
dhd
->
rx_îr‹s
++;

4379 
	`dhdsdio_rxÁû
(
bus
, 
FALSE
, FALSE);

4380 
d⁄e
;

4383 i‡((
Àn
 - 
doff
Ë> 
bus
->
dhd
->
max˘l
) {

4384 
	`DHD_ERROR
(("%s: %d-byte ctl frame (%d-byte ctl data)Éxceeds %d-byteÜimit\n",

4385 
__FUNCTION__
, 
Àn
, (À¿- 
doff
), 
bus
->
dhd
->
max˘l
));

4386 
bus
->
dhd
->
rx_îr‹s
++; bus->
rx_toﬁ⁄g
++;

4387 
	`dhdsdio_rxÁû
(
bus
, 
FALSE
, FALSE);

4388 
d⁄e
;

4393 
sdªt
 = 
	`dhd_bcmsdh_ªcv_buf
(
bus
, 
	`bcmsdh_cur_sbwad
(
sdh
), 
SDIO_FUNC_2
, 
F2SYNC
,

4394 (
bus
->
rx˘l
 + 
fú°ªad
), 
rdÀn
, 
NULL
, NULL, NULL);

4395 
bus
->
f2rxd©a
++;

4396 
	`ASSERT
(
sdªt
 !
BCME_PENDING
);

4399 i‡(
sdªt
 < 0) {

4400 
	`DHD_ERROR
(("%s:Ñód %d c⁄åﬁ byã†Áûed: %d\n", 
__FUNCTION__
, 
rdÀn
, 
sdªt
));

4401 
bus
->
rxc_îr‹s
++;

4402 
	`dhdsdio_rxÁû
(
bus
, 
TRUE
, TRUE);

4403 
d⁄e
;

4406 
gŸpkt
:

4408 #ifde‡
DHD_DEBUG


4409 i‡(
	`DHD_BYTES_ON
(Ë&& 
	`DHD_CTL_ON
()) {

4410 
	`¥hex
("RxCål", 
bus
->
rx˘l
, 
Àn
);

4415 
bus
->
rx˘l
 +
doff
;

4416 
bus
->
rxÀn
 = 
Àn
 - 
doff
;

4418 
d⁄e
:

4420 
	`dhd_os_io˘l_ª•_wake
(
bus
->
dhd
);

4421 
	}
}

4423 
uöt8


4424 
	$dhdsdio_rxglom
(
dhd_bus_t
 *
bus
, 
uöt8
 
rx£q
)

4426 
uöt16
 
dÀn
, 
tŸÀn
;

4427 
uöt8
 *
d±r
, 
num
 = 0;

4429 
uöt16
 
subÀn
, 
check
;

4430 *
pfú°
, *
∂a°
, *
≤ext
;

4431 * 
li°_èû
[
DHD_MAX_IFS
] = { 
NULL
 };

4432 * 
li°_hód
[
DHD_MAX_IFS
] = { 
NULL
 };

4433 
uöt8
 
idx
;

4434 
o¶_t
 *
osh
 = 
bus
->
dhd
->osh;

4436 
îrcode
;

4437 
uöt8
 
ch™
, 
£q
, 
doff
, 
sfdoff
;

4438 
uöt8
 
txmax
;

4439 
uch¨
 
ª‹dî_öfo_buf
[
WLHOST_REORDERDATA_TOTLEN
];

4440 
uöt
 
ª‹dî_öfo_Àn
;

4442 
ifidx
 = 0;

4443 
boﬁ
 
u£chaö
 = 
bus
->
u£_rxchaö
;

4448 
	`DHD_TRACE
(("dhdsdio_rxglom: sèπ: glomd %∞glom %p\n", 
bus
->
glomd
, bus->
glom
));

4451 i‡(
bus
->
glomd
) {

4452 
	`dhd_os_sdlock_rxq
(
bus
->
dhd
);

4454 
pfú°
 = 
∂a°
 = 
≤ext
 = 
NULL
;

4455 
dÀn
 = (
uöt16
)
	`PKTLEN
(
osh
, 
bus
->
glomd
);

4456 
d±r
 = 
	`PKTDATA
(
osh
, 
bus
->
glomd
);

4457 i‡(!
dÀn
 || (dlen & 1)) {

4458 
	`DHD_ERROR
(("%s: bad glomdÜen (%d), ignore descriptor\n",

4459 
__FUNCTION__
, 
dÀn
));

4460 
dÀn
 = 0;

4463 
tŸÀn
 = 
num
 = 0; 
dÀn
;Çum++) {

4465 
subÀn
 = 
	`…oh16_ua
(
d±r
);

4466 
dÀn
 -(
uöt16
);

4467 
d±r
 +(
uöt16
);

4468 i‡((
subÀn
 < 
SDPCM_HDRLEN_RX
) ||

4469 ((
num
 =0Ë&& (
subÀn
 < (2 * 
SDPCM_HDRLEN_RX
)))) {

4470 
	`DHD_ERROR
(("%s: descriptorÜen %d bad: %d\n",

4471 
__FUNCTION__
, 
num
, 
subÀn
));

4472 
≤ext
 = 
NULL
;

4475 i‡(
subÀn
 % 
DHD_SDALIGN
) {

4476 
	`DHD_ERROR
(("%s: sublen %dÇotá multiple of %d\n",

4477 
__FUNCTION__
, 
subÀn
, 
DHD_SDALIGN
));

4478 
u£chaö
 = 
FALSE
;

4480 
tŸÀn
 +
subÀn
;

4483 i‡(!
dÀn
) {

4484 
subÀn
 +(
	`ROUNDUP
(
tŸÀn
, 
bus
->
blocksize
) -Åotlen);

4485 
tŸÀn
 = 
	`ROUNDUP
—ŸÀn, 
bus
->
blocksize
);

4489 i‡((
≤ext
 = 
	`PKTGET
(
osh
, 
subÀn
 + 
DHD_SDALIGN
, 
FALSE
)Ë=
NULL
) {

4490 
	`DHD_ERROR
(("%s: PKTGET failed,Çum %dÜen %d\n",

4491 
__FUNCTION__
, 
num
, 
subÀn
));

4494 
	`ASSERT
(!
	`PKTLINK
(
≤ext
));

4495 i‡(!
pfú°
) {

4496 
	`ASSERT
(!
∂a°
);

4497 
pfú°
 = 
∂a°
 = 
≤ext
;

4499 
	`ASSERT
(
∂a°
);

4500 
	`PKTSETNEXT
(
osh
, 
∂a°
, 
≤ext
);

4501 
∂a°
 = 
≤ext
;

4505 
	`PKTALIGN
(
osh
, 
≤ext
, 
subÀn
, 
DHD_SDALIGN
);

4509 i‡(
≤ext
) {

4510 
	`DHD_GLOM
(("%s:állocated %d-byteÖacket chain for %d subframes\n",

4511 
__FUNCTION__
, 
tŸÀn
, 
num
));

4512 i‡(
	`DHD_GLOM_ON
(Ë&& 
bus
->
√xéí
) {

4513 i‡(
tŸÀn
 !
bus
->
√xéí
) {

4514 
	`DHD_GLOM
(("%s: glomdesc mismatch:Çextlen %d glomdesc %d "

4515 "rx£q %d\n", 
__FUNCTION__
, 
bus
->
√xéí
,

4516 
tŸÀn
, 
rx£q
));

4519 
bus
->
glom
 = 
pfú°
;

4520 
pfú°
 = 
≤ext
 = 
NULL
;

4522 i‡(
pfú°
)

4523 
	`PKTFREE
(
osh
, 
pfú°
, 
FALSE
);

4524 
bus
->
glom
 = 
NULL
;

4525 
num
 = 0;

4529 
	`PKTFREE
(
osh
, 
bus
->
glomd
, 
FALSE
);

4530 
bus
->
glomd
 = 
NULL
;

4531 
bus
->
√xéí
 = 0;

4533 
	`dhd_os_sdu∆ock_rxq
(
bus
->
dhd
);

4537 i‡(
bus
->
glom
) {

4538 i‡(
	`DHD_GLOM_ON
()) {

4539 
	`DHD_GLOM
(("%s:áâem± su≥r‰amêªad,Öackë chaö:\n", 
__FUNCTION__
));

4540 
≤ext
 = 
bus
->
glom
;Ö√xt;Ö√xà
	`PKTNEXT
(
osh
,Önext)) {

4541 
	`DHD_GLOM
((" %p: %pÜen 0x%04x (%d)\n",

4542 
≤ext
, (
uöt8
*)
	`PKTDATA
(
osh
,Önext),

4543 
	`PKTLEN
(
osh
, 
≤ext
), PKTLEN(osh,Önext)));

4547 
pfú°
 = 
bus
->
glom
;

4548 
dÀn
 = (
uöt16
)
	`pkâŸÀn
(
osh
, 
pfú°
);

4554 i‡(
u£chaö
) {

4555 
îrcode
 = 
	`dhd_bcmsdh_ªcv_buf
(
bus
,

4556 
	`bcmsdh_cur_sbwad
(
bus
->
sdh
), 
SDIO_FUNC_2
,

4557 
F2SYNC
, (
uöt8
*)
	`PKTDATA
(
osh
, 
pfú°
),

4558 
dÀn
, 
pfú°
, 
NULL
, NULL);

4559 } i‡(
bus
->
d©≠å
) {

4560 
îrcode
 = 
	`dhd_bcmsdh_ªcv_buf
(
bus
,

4561 
	`bcmsdh_cur_sbwad
(
bus
->
sdh
), 
SDIO_FUNC_2
,

4562 
F2SYNC
, 
bus
->
d©≠å
,

4563 
dÀn
, 
NULL
, NULL, NULL);

4564 
subÀn
 = (
uöt16
)
	`pkt‰ombuf
(
osh
, 
pfú°
, 0, 
dÀn
, 
bus
->
d©≠å
);

4565 i‡(
subÀn
 !
dÀn
) {

4566 
	`DHD_ERROR
(("%s: FAILED TO COPY, dlen %d sublen %d\n",

4567 
__FUNCTION__
, 
dÀn
, 
subÀn
));

4568 
îrcode
 = -1;

4570 
≤ext
 = 
NULL
;

4572 
	`DHD_ERROR
(("COULDN'T ALLOC %d-BYTE GLOM, FORCE FAILURE\n", 
dÀn
));

4573 
îrcode
 = -1;

4575 
bus
->
f2rxd©a
++;

4576 
	`ASSERT
(
îrcode
 !
BCME_PENDING
);

4579 i‡(
îrcode
 < 0) {

4580 
	`DHD_ERROR
(("%s: glomÑead of %d bytes failed: %d\n",

4581 
__FUNCTION__
, 
dÀn
, 
îrcode
));

4582 
bus
->
dhd
->
rx_îr‹s
++;

4584 i‡(
bus
->
glomîr
++ < 3) {

4585 
	`dhdsdio_rxÁû
(
bus
, 
TRUE
, TRUE);

4587 
bus
->
glomîr
 = 0;

4588 
	`dhdsdio_rxÁû
(
bus
, 
TRUE
, 
FALSE
);

4589 
	`dhd_os_sdlock_rxq
(
bus
->
dhd
);

4590 
	`PKTFREE
(
osh
, 
bus
->
glom
, 
FALSE
);

4591 
	`dhd_os_sdu∆ock_rxq
(
bus
->
dhd
);

4592 
bus
->
rxglomÁû
++;

4593 
bus
->
glom
 = 
NULL
;

4598 #ifde‡
DHD_DEBUG


4599 i‡(
	`DHD_GLOM_ON
()) {

4600 
	`¥hex
("SUPERFRAME", 
	`PKTDATA
(
osh
, 
pfú°
),

4601 
	`MIN
(
	`PKTLEN
(
osh
, 
pfú°
), 48));

4607 
d±r
 = (
uöt8
 *)
	`PKTDATA
(
osh
, 
pfú°
);

4608 
subÀn
 = 
	`…oh16_ua
(
d±r
);

4609 
check
 = 
	`…oh16_ua
(
d±r
 + (
uöt16
));

4611 
ch™
 = 
	`SDPCM_PACKET_CHANNEL
(&
d±r
[
SDPCM_FRAMETAG_LEN
]);

4612 
£q
 = 
	`SDPCM_PACKET_SEQUENCE
(&
d±r
[
SDPCM_FRAMETAG_LEN
]);

4613 
bus
->
√xéí
 = 
d±r
[
SDPCM_FRAMETAG_LEN
 + 
SDPCM_NEXTLEN_OFFSET
];

4614 i‡((
bus
->
√xéí
 << 4Ë> 
MAX_RX_DATASZ
) {

4615 
	`DHD_INFO
(("%s: got frame w/nextlenÅooÜarge (%d) seq %d\n",

4616 
__FUNCTION__
, 
bus
->
√xéí
, 
£q
));

4617 
bus
->
√xéí
 = 0;

4619 
doff
 = 
	`SDPCM_DOFFSET_VALUE
(&
d±r
[
SDPCM_FRAMETAG_LEN
]);

4620 
txmax
 = 
	`SDPCM_WINDOW_VALUE
(&
d±r
[
SDPCM_FRAMETAG_LEN
]);

4622 
îrcode
 = 0;

4623 i‡((
uöt16
)~(
subÀn
^
check
)) {

4624 
	`DHD_ERROR
(("%s (superframe): HW hdrÉrror:Üen/check 0x%04x/0x%04x\n",

4625 
__FUNCTION__
, 
subÀn
, 
check
));

4626 
îrcode
 = -1;

4627 } i‡(
	`ROUNDUP
(
subÀn
, 
bus
->
blocksize
Ë!
dÀn
) {

4628 
	`DHD_ERROR
(("%s (superframe):Üen 0x%04x,Ñounded 0x%04x,Éxpect 0x%04x\n",

4629 
__FUNCTION__
, 
subÀn
, 
	`ROUNDUP
(subÀn, 
bus
->
blocksize
), 
dÀn
));

4630 
îrcode
 = -1;

4631 } i‡(
	`SDPCM_PACKET_CHANNEL
(&
d±r
[
SDPCM_FRAMETAG_LEN
]Ë!
SDPCM_GLOM_CHANNEL
) {

4632 
	`DHD_ERROR
(("%†(su≥r‰ame): bad ch™√»%d\n", 
__FUNCTION__
,

4633 
	`SDPCM_PACKET_CHANNEL
(&
d±r
[
SDPCM_FRAMETAG_LEN
])));

4634 
îrcode
 = -1;

4635 } i‡(
	`SDPCM_GLOMDESC
(&
d±r
[
SDPCM_FRAMETAG_LEN
])) {

4636 
	`DHD_ERROR
(("%†(su≥r‰ame): gŸ sec⁄d des¸ùt‹?\n", 
__FUNCTION__
));

4637 
îrcode
 = -1;

4638 } i‡((
doff
 < 
SDPCM_HDRLEN_RX
) ||

4639 (
doff
 > (
	`PKTLEN
(
osh
, 
pfú°
Ë- 
SDPCM_HDRLEN_RX
))) {

4640 
	`DHD_ERROR
(("%s (superframe): Bad data offset %d: HW %dÖkt %d min %d\n",

4641 
__FUNCTION__
, 
doff
, 
subÀn
, 
	`PKTLEN
(
osh
, 
pfú°
),

4642 
SDPCM_HDRLEN_RX
));

4643 
îrcode
 = -1;

4647 i‡(
rx£q
 !
£q
) {

4648 
	`DHD_INFO
(("%s: (superframe)Ñx_seq %d,Éxpected %d\n",

4649 
__FUNCTION__
, 
£q
, 
rx£q
));

4650 
bus
->
rx_bad£q
++;

4651 
rx£q
 = 
£q
;

4655 i‡((
uöt8
)(
txmax
 - 
bus
->
tx_£q
) > 0x40) {

4656 
	`DHD_ERROR
(("%s: got unlikelyÅx max %d withÅx_seq %d\n",

4657 
__FUNCTION__
, 
txmax
, 
bus
->
tx_£q
));

4658 
txmax
 = 
bus
->
tx_max
;

4660 
bus
->
tx_max
 = 
txmax
;

4663 
	`PKTPULL
(
osh
, 
pfú°
, 
doff
);

4664 
sfdoff
 = 
doff
;

4667 
num
 = 0, 
≤ext
 = 
pfú°
;Ö√xà&& !
îrcode
;

4668 
num
++, 
≤ext
 = 
	`PKTNEXT
(
osh
,Önext)) {

4669 
d±r
 = (
uöt8
 *)
	`PKTDATA
(
osh
, 
≤ext
);

4670 
dÀn
 = (
uöt16
)
	`PKTLEN
(
osh
, 
≤ext
);

4671 
subÀn
 = 
	`…oh16_ua
(
d±r
);

4672 
check
 = 
	`…oh16_ua
(
d±r
 + (
uöt16
));

4673 
ch™
 = 
	`SDPCM_PACKET_CHANNEL
(&
d±r
[
SDPCM_FRAMETAG_LEN
]);

4674 
doff
 = 
	`SDPCM_DOFFSET_VALUE
(&
d±r
[
SDPCM_FRAMETAG_LEN
]);

4675 #ifde‡
DHD_DEBUG


4676 i‡(
	`DHD_GLOM_ON
()) {

4677 
	`¥hex
("sub‰ame", 
d±r
, 32);

4681 i‡((
uöt16
)~(
subÀn
^
check
)) {

4682 
	`DHD_ERROR
(("%s (subframe %d): HW hdrÉrror: "

4684 
__FUNCTION__
, 
num
, 
subÀn
, 
check
));

4685 
îrcode
 = -1;

4686 } i‡((
subÀn
 > 
dÀn
Ë|| (subÀ¿< 
SDPCM_HDRLEN_RX
)) {

4687 
	`DHD_ERROR
(("%s (subframe %d):Üength mismatch: "

4689 
__FUNCTION__
, 
num
, 
subÀn
, 
dÀn
));

4690 
îrcode
 = -1;

4691 } i‡((
ch™
 !
SDPCM_DATA_CHANNEL
) &&

4692 (
ch™
 !
SDPCM_EVENT_CHANNEL
)) {

4693 
	`DHD_ERROR
(("%s (subframe %d): bad channel %d\n",

4694 
__FUNCTION__
, 
num
, 
ch™
));

4695 
îrcode
 = -1;

4696 } i‡((
doff
 < 
SDPCM_HDRLEN_RX
Ë|| (dof‡> 
subÀn
)) {

4697 
	`DHD_ERROR
(("%s (subframe %d): Bad data offset %d: HW %d min %d\n",

4698 
__FUNCTION__
, 
num
, 
doff
, 
subÀn
, 
SDPCM_HDRLEN_RX
));

4699 
îrcode
 = -1;

4703 i‡(
îrcode
) {

4705 i‡(
bus
->
glomîr
++ < 3) {

4707 
	`PKTPUSH
(
osh
, 
pfú°
, 
sfdoff
);

4708 
	`dhdsdio_rxÁû
(
bus
, 
TRUE
, TRUE);

4710 
bus
->
glomîr
 = 0;

4711 
	`dhdsdio_rxÁû
(
bus
, 
TRUE
, 
FALSE
);

4712 
	`dhd_os_sdlock_rxq
(
bus
->
dhd
);

4713 
	`PKTFREE
(
osh
, 
bus
->
glom
, 
FALSE
);

4714 
	`dhd_os_sdu∆ock_rxq
(
bus
->
dhd
);

4715 
bus
->
rxglomÁû
++;

4716 
bus
->
glom
 = 
NULL
;

4718 
bus
->
√xéí
 = 0;

4723 
bus
->
glom
 = 
NULL
;

4724 
∂a°
 = 
NULL
;

4726 
	`dhd_os_sdlock_rxq
(
bus
->
dhd
);

4727 
num
 = 0; 
pfú°
; 
rx£q
++,Öfú° = 
≤ext
) {

4728 
≤ext
 = 
	`PKTNEXT
(
osh
, 
pfú°
);

4729 
	`PKTSETNEXT
(
osh
, 
pfú°
, 
NULL
);

4731 
d±r
 = (
uöt8
 *)
	`PKTDATA
(
osh
, 
pfú°
);

4732 
subÀn
 = 
	`…oh16_ua
(
d±r
);

4733 
ch™
 = 
	`SDPCM_PACKET_CHANNEL
(&
d±r
[
SDPCM_FRAMETAG_LEN
]);

4734 
£q
 = 
	`SDPCM_PACKET_SEQUENCE
(&
d±r
[
SDPCM_FRAMETAG_LEN
]);

4735 
doff
 = 
	`SDPCM_DOFFSET_VALUE
(&
d±r
[
SDPCM_FRAMETAG_LEN
]);

4737 
	`DHD_GLOM
(("%s: Get subframe %d, %p(%p/%d), sublen %d chan %d seq %d\n",

4738 
__FUNCTION__
, 
num
, 
pfú°
, 
	`PKTDATA
(
osh
,Öfirst),

4739 
	`PKTLEN
(
osh
, 
pfú°
), 
subÀn
, 
ch™
, 
£q
));

4741 
	`ASSERT
((
ch™
 =
SDPCM_DATA_CHANNEL
Ë|| (ch™ =
SDPCM_EVENT_CHANNEL
));

4743 i‡(
rx£q
 !
£q
) {

4744 
	`DHD_GLOM
(("%s:Ñx_seq %d,Éxpected %d\n",

4745 
__FUNCTION__
, 
£q
, 
rx£q
));

4746 
bus
->
rx_bad£q
++;

4747 
rx£q
 = 
£q
;

4750 #ifde‡
DHD_DEBUG


4751 i‡(
	`DHD_BYTES_ON
(Ë&& 
	`DHD_DATA_ON
()) {

4752 
	`¥hex
("Rx Sub‰amêD©a", 
d±r
, 
dÀn
);

4756 
	`PKTSETLEN
(
osh
, 
pfú°
, 
subÀn
);

4757 
	`PKTPULL
(
osh
, 
pfú°
, 
doff
);

4759 
ª‹dî_öfo_Àn
 = (
ª‹dî_öfo_buf
);

4761 i‡(
	`PKTLEN
(
osh
, 
pfú°
) == 0) {

4762 
	`PKTFREE
(
bus
->
dhd
->
osh
, 
pfú°
, 
FALSE
);

4764 } i‡(
	`dhd_¥Ÿ_hdΩuŒ
(
bus
->
dhd
, &
ifidx
, 
pfú°
, 
ª‹dî_öfo_buf
,

4765 &
ª‹dî_öfo_Àn
) != 0) {

4766 
	`DHD_ERROR
(("%s:ÑxÖrŸocﬁÉº‹\n", 
__FUNCTION__
));

4767 
bus
->
dhd
->
rx_îr‹s
++;

4768 
	`PKTFREE
(
osh
, 
pfú°
, 
FALSE
);

4771 i‡(
ª‹dî_öfo_Àn
) {

4772 
uöt32
 
‰ì_buf_cou¡
;

4773 *
µfú°
;

4775 
µfú°
 = 
pfú°
;

4777 
	`dhd_¥o˚ss_pkt_ª‹dî_öfo
(
bus
->
dhd
, 
ª‹dî_öfo_buf
,

4778 
ª‹dî_öfo_Àn
, &
µfú°
, &
‰ì_buf_cou¡
);

4780 i‡(
‰ì_buf_cou¡
 == 0) {

4784 *
ãmp
;

4787 
ãmp
 = 
µfú°
;

4788 
	`PKTNEXT
(
osh
, 
ãmp
Ë!
NULL
) {

4789 
ãmp
 = 
	`PKTNEXT
(
osh
,Åemp);

4791 
pfú°
 = 
ãmp
;

4792 i‡(
li°_èû
[
ifidx
] =
NULL
) {

4793 
li°_hód
[
ifidx
] = 
µfú°
;

4794 
li°_èû
[
ifidx
] = 
pfú°
;

4797 
	`PKTSETNEXT
(
osh
, 
li°_èû
[
ifidx
], 
µfú°
);

4798 
li°_èû
[
ifidx
] = 
pfú°
;

4802 
num
 +(
uöt8
)
‰ì_buf_cou¡
;

4807 i‡(
li°_èû
[
ifidx
] =
NULL
) {

4808 
li°_hód
[
ifidx
] = 
li°_èû
[ifidx] = 
pfú°
;

4811 
	`PKTSETNEXT
(
osh
, 
li°_èû
[
ifidx
], 
pfú°
);

4812 
li°_èû
[
ifidx
] = 
pfú°
;

4814 
num
++;

4816 #ifde‡
DHD_DEBUG


4817 i‡(
	`DHD_GLOM_ON
()) {

4818 
	`DHD_GLOM
(("%s subframe %dÅo stack, %p(%p/%d)Çxt/lnk %p/%p\n",

4819 
__FUNCTION__
, 
num
, 
pfú°
,

4820 
	`PKTDATA
(
osh
, 
pfú°
), 
	`PKTLEN
(osh,Öfirst),

4821 
	`PKTNEXT
(
osh
, 
pfú°
), 
	`PKTLINK
(pfirst)));

4822 
	`¥hex
("", (
uöt8
 *)
	`PKTDATA
(
osh
, 
pfú°
),

4823 
	`MIN
(
	`PKTLEN
(
osh
, 
pfú°
), 32));

4827 
	`dhd_os_sdu∆ock_rxq
(
bus
->
dhd
);

4829 
idx
 = 0; idx < 
DHD_MAX_IFS
; idx++) {

4830 i‡(
li°_hód
[
idx
]) {

4831 *
ãmp
;

4832 
uöt8
 
˙t
 = 0;

4833 
ãmp
 = 
li°_hód
[
idx
];

4835 
ãmp
 = 
	`PKTNEXT
(
osh
,Åemp);

4836 
˙t
++;

4837 } 
ãmp
);

4838 i‡(
˙t
) {

4839 
	`dhd_os_sdu∆ock
(
bus
->
dhd
);

4840 
	`dhd_rx_‰ame
(
bus
->
dhd
, 
idx
, 
li°_hód
[idx], 
˙t
, 0);

4841 
	`dhd_os_sdlock
(
bus
->
dhd
);

4845 
bus
->
rxglom‰ames
++;

4846 
bus
->
rxglompkts
 +
num
;

4848  
num
;

4849 
	}
}

4853 
uöt


4854 
	$dhdsdio_ªad‰ames
(
dhd_bus_t
 *
bus
, 
uöt
 
max‰ames
, 
boﬁ
 *
föished
)

4856 
o¶_t
 *
osh
 = 
bus
->
dhd
->osh;

4857 
bcmsdh_öfo_t
 *
sdh
 = 
bus
->sdh;

4859 
uöt16
 
Àn
, 
check
;

4860 
uöt8
 
ch™
, 
£q
, 
doff
;

4861 
uöt8
 
fcbôs
;

4862 
uöt8
 
dñè
;

4864 *
pkt
;

4865 
uöt16
 
∑d
;

4866 
uöt16
 
rdÀn
;

4867 
uöt8
 
rx£q
;

4868 
uöt
 
rxÀ·
 = 0;

4869 
sdªt
;

4870 
uöt8
 
txmax
;

4871 
boﬁ
 
Àn_c⁄si°ít
;

4872 
uöt8
 *
rxbuf
;

4873 
ifidx
 = 0;

4874 
uöt
 
rxcou¡
 = 0;

4875 
uch¨
 
ª‹dî_öfo_buf
[
WLHOST_REORDERDATA_TOTLEN
];

4876 
uöt
 
ª‹dî_öfo_Àn
;

4877 
uöt
 
pkt_cou¡
;

4879 #i‡
	`deföed
(
DHD_DEBUG
Ë|| deföed(
SDTEST
)

4880 
boﬁ
 
sdã°
 = 
FALSE
;

4883 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

4885 
bus
->
ªad‰ames
 = 
TRUE
;

4887 i‡(!
	`KSO_ENAB
(
bus
)) {

4888 
	`DHD_ERROR
(("%s: KSO off\n", 
__FUNCTION__
));

4889 
bus
->
ªad‰ames
 = 
FALSE
;

4893 
	`ASSERT
(
max‰ames
);

4895 #ifde‡
SDTEST


4897 i‡(
bus
->
pktgí_cou¡
 && (bus->
pktgí_mode
 =
DHD_PKTGEN_RECV
)) {

4898 
max‰ames
 = 
bus
->
pktgí_cou¡
;

4899 
sdã°
 = 
TRUE
;

4904 *
föished
 = 
FALSE
;

4907 
rx£q
 = 
bus
->
rx_£q
, 
rxÀ·
 = 
max‰ames
;

4908 !
bus
->
rxskù
 && 
rxÀ·
 && bus->
dhd
->
bus°©e
 !
DHD_BUS_DOWN
;

4909 
rx£q
++, 
rxÀ·
--) {

4911 #ifde‡
DHDTHREAD


4913 i‡((
bus
->
˛k°©e
 =
CLK_AVAIL
Ë&& !bus->
fc°©e
 &&

4914 
	`pktq_mÀn
(&
bus
->
txq
, ~bus->
Êowc⁄åﬁ
Ë&& 
	`DATAOK
(bus)) {

4915 
	`dhdsdio_£nd‰omq
(
bus
, 
dhd_txbound
);

4920 i‡(
bus
->
glom
 || bus->
glomd
) {

4921 
uöt8
 
˙t
;

4922 
	`DHD_GLOM
(("%s: callingÑxglom: glomd %p, glom %p\n",

4923 
__FUNCTION__
, 
bus
->
glomd
, bus->
glom
));

4924 
˙t
 = 
	`dhdsdio_rxglom
(
bus
, 
rx£q
);

4925 
	`DHD_GLOM
(("%s:ÑxglomÑëu∫ed %d\n", 
__FUNCTION__
, 
˙t
));

4926 
rx£q
 +
˙t
 - 1;

4927 
rxÀ·
 = (rxÀ· > 
˙t
) ? (rxleft - cnt) : 1;

4932 i‡(
dhd_ªadahód
 && 
bus
->
√xéí
) {

4933 
uöt16
 
√xéí
 = 
bus
->nextlen;

4934 
bus
->
√xéí
 = 0;

4936 i‡(
bus
->bu†=
SPI_BUS
) {

4937 
rdÀn
 = 
Àn
 = 
√xéí
;

4940 
rdÀn
 = 
Àn
 = 
√xéí
 << 4;

4943 i‡(
bus
->
roundup
 && bus->
blocksize
 && (
rdÀn
 > bus->blocksize)) {

4944 
∑d
 = 
bus
->
blocksize
 - (
rdÀn
 % bus->blocksize);

4945 i‡((
∑d
 <
bus
->
roundup
Ë&& (∑d < bus->
blocksize
) &&

4946 ((
rdÀn
 + 
∑d
 + 
fú°ªad
Ë< 
MAX_RX_DATASZ
))

4947 
rdÀn
 +
∑d
;

4948 } i‡(
rdÀn
 % 
DHD_SDALIGN
) {

4949 
rdÀn
 +
DHD_SDALIGN
 - (rdlen % DHD_SDALIGN);

4960 
	`dhd_os_sdlock_rxq
(
bus
->
dhd
);

4961 i‡(!(
pkt
 = 
	`PKTGET
(
osh
, 
rdÀn
 + 
DHD_SDALIGN
, 
FALSE
))) {

4962 i‡(
bus
->bu†=
SPI_BUS
) {

4963 
bus
->
u£buÂoﬁ
 = 
FALSE
;

4964 
bus
->
rx˘l
 = bus->
rxbuf
;

4965 i‡(
dhd_Æign˘l
) {

4966 
bus
->
rx˘l
 +
fú°ªad
;

4967 i‡((
∑d
 = ((
uöçå
)
bus
->
rx˘l
 % 
DHD_SDALIGN
)))

4968 
bus
->
rx˘l
 +(
DHD_SDALIGN
 - 
∑d
);

4969 
bus
->
rx˘l
 -
fú°ªad
;

4971 
	`ASSERT
(
bus
->
rx˘l
 >bus->
rxbuf
);

4972 
rxbuf
 = 
bus
->
rx˘l
;

4974 
sdªt
 = 
	`dhd_bcmsdh_ªcv_buf
(
bus
,

4975 
	`bcmsdh_cur_sbwad
(
sdh
),

4976 
SDIO_FUNC_2
,

4977 
F2SYNC
, 
rxbuf
, 
rdÀn
,

4978 
NULL
, NULL, NULL);

4979 
bus
->
f2rxd©a
++;

4980 
	`ASSERT
(
sdªt
 !
BCME_PENDING
);

4984 i‡(
sdªt
 < 0) {

4985 
	`DHD_ERROR
(("%s:Ñead %d control bytes failed: %d\n",

4986 
__FUNCTION__
, 
rdÀn
, 
sdªt
));

4988 
bus
->
rxc_îr‹s
++;

4989 
	`dhd_os_sdu∆ock_rxq
(
bus
->
dhd
);

4990 
	`dhdsdio_rxÁû
(
bus
, 
TRUE
,

4991 (
bus
->bu†=
SPI_BUS
Ë? 
FALSE
 : 
TRUE
);

4996 
	`DHD_ERROR
(("%s (nextlen): PKTGET failed:Üen %dÑdlen %d "

4998 
__FUNCTION__
, 
Àn
, 
rdÀn
, 
rx£q
));

5000 
	`dhd_os_sdu∆ock_rxq
(
bus
->
dhd
);

5004 i‡(
bus
->bu†=
SPI_BUS
)

5005 
bus
->
u£buÂoﬁ
 = 
TRUE
;

5007 
	`ASSERT
(!
	`PKTLINK
(
pkt
));

5008 
	`PKTALIGN
(
osh
, 
pkt
, 
rdÀn
, 
DHD_SDALIGN
);

5009 
rxbuf
 = (
uöt8
 *)
	`PKTDATA
(
osh
, 
pkt
);

5011 
sdªt
 = 
	`dhd_bcmsdh_ªcv_buf
(
bus
, 
	`bcmsdh_cur_sbwad
(
sdh
),

5012 
SDIO_FUNC_2
,

5013 
F2SYNC
, 
rxbuf
, 
rdÀn
,

5014 
pkt
, 
NULL
, NULL);

5015 
bus
->
f2rxd©a
++;

5016 
	`ASSERT
(
sdªt
 !
BCME_PENDING
);

5018 i‡(
sdªt
 < 0) {

5019 
	`DHD_ERROR
(("%s (nextlen):Ñead %d bytes failed: %d\n",

5020 
__FUNCTION__
, 
rdÀn
, 
sdªt
));

5021 
	`PKTFREE
(
bus
->
dhd
->
osh
, 
pkt
, 
FALSE
);

5022 
bus
->
dhd
->
rx_îr‹s
++;

5023 
	`dhd_os_sdu∆ock_rxq
(
bus
->
dhd
);

5027 
	`dhdsdio_rxÁû
(
bus
, 
TRUE
,

5028 (
bus
->bu†=
SPI_BUS
Ë? 
FALSE
 : 
TRUE
);

5032 
	`dhd_os_sdu∆ock_rxq
(
bus
->
dhd
);

5035 
	`bc›y
(
rxbuf
, 
bus
->
rxhdr
, 
SDPCM_HDRLEN_RX
);

5038 
Àn
 = 
	`…oh16_ua
(
bus
->
rxhdr
);

5039 
check
 = 
	`…oh16_ua
(
bus
->
rxhdr
 + (
uöt16
));

5042 i‡(!(
Àn
|
check
)) {

5043 
	`DHD_INFO
(("%s (nextlen):Ñead zeros in HW header???\n",

5044 
__FUNCTION__
));

5045 
	`dhd_os_sdlock_rxq
(
bus
->
dhd
);

5046 
	`PKTFREE2
();

5047 
	`dhd_os_sdu∆ock_rxq
(
bus
->
dhd
);

5048 
GSPI_PR55150_BAILOUT
;

5053 i‡((
uöt16
)~(
Àn
^
check
)) {

5054 
	`DHD_ERROR
(("%s (nextlen): HW hdrÉrror:Çextlen/len/check"

5055 " 0x%04x/0x%04x/0x%04x\n", 
__FUNCTION__
, 
√xéí
,

5056 
Àn
, 
check
));

5057 
	`dhd_os_sdlock_rxq
(
bus
->
dhd
);

5058 
	`PKTFREE2
();

5059 
	`dhd_os_sdu∆ock_rxq
(
bus
->
dhd
);

5060 
bus
->
rx_badhdr
++;

5061 
	`dhdsdio_rxÁû
(
bus
, 
FALSE
, FALSE);

5062 
GSPI_PR55150_BAILOUT
;

5067 i‡(
Àn
 < 
SDPCM_HDRLEN_RX
) {

5068 
	`DHD_ERROR
(("%s (nextlen): HW hdrÜength invalid: %d\n",

5069 
__FUNCTION__
, 
Àn
));

5070 
	`dhd_os_sdlock_rxq
(
bus
->
dhd
);

5071 
	`PKTFREE2
();

5072 
	`dhd_os_sdu∆ock_rxq
(
bus
->
dhd
);

5073 
GSPI_PR55150_BAILOUT
;

5078 
Àn_c⁄si°ít
 = (
√xéí
 !(
	`ROUNDUP
(
Àn
, 16) >> 4));

5079 i‡(
Àn_c⁄si°ít
) {

5081 
	`DHD_ERROR
(("%s (nextlen): mismatch,Çextlen %dÜen %dÑnd %d; "

5083 
__FUNCTION__
, 
√xéí
, 
Àn
, 
	`ROUNDUP
÷í, 16), 
rx£q
));

5084 
	`dhd_os_sdlock_rxq
(
bus
->
dhd
);

5085 
	`PKTFREE2
();

5086 
	`dhd_os_sdu∆ock_rxq
(
bus
->
dhd
);

5087 
	`dhdsdio_rxÁû
(
bus
, 
TRUE
, (bus->bu†=
SPI_BUS
Ë? 
FALSE
 : TRUE);

5088 
GSPI_PR55150_BAILOUT
;

5094 
ch™
 = 
	`SDPCM_PACKET_CHANNEL
(&
bus
->
rxhdr
[
SDPCM_FRAMETAG_LEN
]);

5095 
£q
 = 
	`SDPCM_PACKET_SEQUENCE
(&
bus
->
rxhdr
[
SDPCM_FRAMETAG_LEN
]);

5096 
doff
 = 
	`SDPCM_DOFFSET_VALUE
(&
bus
->
rxhdr
[
SDPCM_FRAMETAG_LEN
]);

5097 
txmax
 = 
	`SDPCM_WINDOW_VALUE
(&
bus
->
rxhdr
[
SDPCM_FRAMETAG_LEN
]);

5099 
bus
->
√xéí
 =

5100 
bus
->
rxhdr
[
SDPCM_FRAMETAG_LEN
 + 
SDPCM_NEXTLEN_OFFSET
];

5101 i‡((
bus
->
√xéí
 << 4Ë> 
MAX_RX_DATASZ
) {

5102 
	`DHD_INFO
(("%s (nextlen): got frame w/nextlenÅooÜarge"

5103 " (%d), seq %d\n", 
__FUNCTION__
, 
bus
->
√xéí
,

5104 
£q
));

5105 
bus
->
√xéí
 = 0;

5108 
bus
->
dhd
->
rx_ªadahód_˙t
 ++;

5110 
fcbôs
 = 
	`SDPCM_FCMASK_VALUE
(&
bus
->
rxhdr
[
SDPCM_FRAMETAG_LEN
]);

5112 
dñè
 = 0;

5113 i‡(~
bus
->
Êowc⁄åﬁ
 & 
fcbôs
) {

5114 
bus
->
fc_xoff
++;

5115 
dñè
 = 1;

5117 i‡(
bus
->
Êowc⁄åﬁ
 & ~
fcbôs
) {

5118 
bus
->
fc_x⁄
++;

5119 
dñè
 = 1;

5122 i‡(
dñè
) {

5123 
bus
->
fc_rcvd
++;

5124 
bus
->
Êowc⁄åﬁ
 = 
fcbôs
;

5128 i‡(
rx£q
 !
£q
) {

5129 
	`DHD_INFO
(("%s (nextlen):Ñx_seq %d,Éxpected %d\n",

5130 
__FUNCTION__
, 
£q
, 
rx£q
));

5131 
bus
->
rx_bad£q
++;

5132 
rx£q
 = 
£q
;

5136 i‡((
uöt8
)(
txmax
 - 
bus
->
tx_£q
) > 0x40) {

5137 
	`DHD_ERROR
(("%s: got unlikelyÅx max %d withÅx_seq %d\n",

5138 
__FUNCTION__
, 
txmax
, 
bus
->
tx_£q
));

5139 
txmax
 = 
bus
->
tx_max
;

5141 
bus
->
tx_max
 = 
txmax
;

5143 #ifde‡
DHD_DEBUG


5144 i‡(
	`DHD_BYTES_ON
(Ë&& 
	`DHD_DATA_ON
()) {

5145 
	`¥hex
("Rx D©a", 
rxbuf
, 
Àn
);

5146 } i‡(
	`DHD_HDRS_ON
()) {

5147 
	`¥hex
("RxHdr", 
bus
->
rxhdr
, 
SDPCM_HDRLEN_RX
);

5151 i‡(
ch™
 =
SDPCM_CONTROL_CHANNEL
) {

5152 i‡(
bus
->bu†=
SPI_BUS
) {

5153 
	`dhdsdio_ªad_c⁄åﬁ
(
bus
, 
rxbuf
, 
Àn
, 
doff
);

5154 i‡(
bus
->
u£buÂoﬁ
) {

5155 
	`dhd_os_sdlock_rxq
(
bus
->
dhd
);

5156 
	`PKTFREE
(
bus
->
dhd
->
osh
, 
pkt
, 
FALSE
);

5157 
	`dhd_os_sdu∆ock_rxq
(
bus
->
dhd
);

5161 
	`DHD_ERROR
(("%s (nextlen):Ñeadahead on control"

5162 "Öackë %d?\n", 
__FUNCTION__
, 
£q
));

5164 
bus
->
√xéí
 = 0;

5165 
	`dhdsdio_rxÁû
(
bus
, 
FALSE
, 
TRUE
);

5166 
	`dhd_os_sdlock_rxq
(
bus
->
dhd
);

5167 
	`PKTFREE2
();

5168 
	`dhd_os_sdu∆ock_rxq
(
bus
->
dhd
);

5173 i‡((
bus
->bu†=
SPI_BUS
Ë&& !bus->
u£buÂoﬁ
) {

5174 
	`DHD_ERROR
(("Received %d bytes on %d channel. Running out of "

5175 "rxÖktbuf'†‹ÇŸ yë mÆlo˚d.\n", 
Àn
, 
ch™
));

5180 i‡((
doff
 < 
SDPCM_HDRLEN_RX
Ë|| (dof‡> 
Àn
)) {

5181 
	`DHD_ERROR
(("%s (nextlen): bad data offset %d: HWÜen %d min %d\n",

5182 
__FUNCTION__
, 
doff
, 
Àn
, 
SDPCM_HDRLEN_RX
));

5183 
	`dhd_os_sdlock_rxq
(
bus
->
dhd
);

5184 
	`PKTFREE2
();

5185 
	`dhd_os_sdu∆ock_rxq
(
bus
->
dhd
);

5186 
	`ASSERT
(0);

5187 
	`dhdsdio_rxÁû
(
bus
, 
FALSE
, FALSE);

5192 
dñivî
;

5195 i‡(
bus
->bu†=
SPI_BUS
) {

5200 
sdªt
 = 
	`dhd_bcmsdh_ªcv_buf
(
bus
, 
	`bcmsdh_cur_sbwad
(
sdh
), 
SDIO_FUNC_2
, 
F2SYNC
,

5201 
bus
->
rxhdr
, 
fú°ªad
, 
NULL
, NULL, NULL);

5202 
bus
->
f2rxhdrs
++;

5203 
	`ASSERT
(
sdªt
 !
BCME_PENDING
);

5205 i‡(
sdªt
 < 0) {

5206 
	`DHD_ERROR
(("%s: RXHEADER FAILED: %d\n", 
__FUNCTION__
, 
sdªt
));

5207 
bus
->
rx_hdrÁû
++;

5208 
	`dhdsdio_rxÁû
(
bus
, 
TRUE
, TRUE);

5212 #ifde‡
DHD_DEBUG


5213 i‡(
	`DHD_BYTES_ON
(Ë|| 
	`DHD_HDRS_ON
()) {

5214 
	`¥hex
("RxHdr", 
bus
->
rxhdr
, 
SDPCM_HDRLEN_RX
);

5219 
Àn
 = 
	`…oh16_ua
(
bus
->
rxhdr
);

5220 
check
 = 
	`…oh16_ua
(
bus
->
rxhdr
 + (
uöt16
));

5223 i‡(!(
Àn
|
check
)) {

5224 *
föished
 = 
TRUE
;

5229 i‡((
uöt16
)~(
Àn
^
check
)) {

5230 
	`DHD_ERROR
(("%s: HW hdrÉrror:Üen/check 0x%04x/0x%04x\n",

5231 
__FUNCTION__
, 
Àn
, 
check
));

5232 
bus
->
rx_badhdr
++;

5233 
	`dhdsdio_rxÁû
(
bus
, 
FALSE
, FALSE);

5238 i‡(
Àn
 < 
SDPCM_HDRLEN_RX
) {

5239 
	`DHD_ERROR
(("%s: HW hd∏Àngth invÆid: %d\n", 
__FUNCTION__
, 
Àn
));

5244 
ch™
 = 
	`SDPCM_PACKET_CHANNEL
(&
bus
->
rxhdr
[
SDPCM_FRAMETAG_LEN
]);

5245 
£q
 = 
	`SDPCM_PACKET_SEQUENCE
(&
bus
->
rxhdr
[
SDPCM_FRAMETAG_LEN
]);

5246 
doff
 = 
	`SDPCM_DOFFSET_VALUE
(&
bus
->
rxhdr
[
SDPCM_FRAMETAG_LEN
]);

5247 
txmax
 = 
	`SDPCM_WINDOW_VALUE
(&
bus
->
rxhdr
[
SDPCM_FRAMETAG_LEN
]);

5250 i‡((
doff
 < 
SDPCM_HDRLEN_RX
Ë|| (dof‡> 
Àn
)) {

5251 
	`DHD_ERROR
(("%s: Bad data offset %d: HWÜen %d, min %d seq %d\n",

5252 
__FUNCTION__
, 
doff
, 
Àn
, 
SDPCM_HDRLEN_RX
, 
£q
));

5253 
bus
->
rx_badhdr
++;

5254 
	`ASSERT
(0);

5255 
	`dhdsdio_rxÁû
(
bus
, 
FALSE
, FALSE);

5260 
bus
->
√xéí
 = bus->
rxhdr
[
SDPCM_FRAMETAG_LEN
 + 
SDPCM_NEXTLEN_OFFSET
];

5261 i‡((
bus
->
√xéí
 << 4Ë> 
MAX_RX_DATASZ
) {

5262 
	`DHD_INFO
(("%s (nextlen): got frame w/nextlenÅooÜarge (%d), seq %d\n",

5263 
__FUNCTION__
, 
bus
->
√xéí
, 
£q
));

5264 
bus
->
√xéí
 = 0;

5268 
fcbôs
 = 
	`SDPCM_FCMASK_VALUE
(&
bus
->
rxhdr
[
SDPCM_FRAMETAG_LEN
]);

5270 
dñè
 = 0;

5271 i‡(~
bus
->
Êowc⁄åﬁ
 & 
fcbôs
) {

5272 
bus
->
fc_xoff
++;

5273 
dñè
 = 1;

5275 i‡(
bus
->
Êowc⁄åﬁ
 & ~
fcbôs
) {

5276 
bus
->
fc_x⁄
++;

5277 
dñè
 = 1;

5280 i‡(
dñè
) {

5281 
bus
->
fc_rcvd
++;

5282 
bus
->
Êowc⁄åﬁ
 = 
fcbôs
;

5286 i‡(
rx£q
 !
£q
) {

5287 
	`DHD_INFO
(("%s:Ñx_£q %d,Éx≥˘ed %d\n", 
__FUNCTION__
, 
£q
, 
rx£q
));

5288 
bus
->
rx_bad£q
++;

5289 
rx£q
 = 
£q
;

5293 i‡((
uöt8
)(
txmax
 - 
bus
->
tx_£q
) > 0x40) {

5294 
	`DHD_ERROR
(("%s: got unlikelyÅx max %d withÅx_seq %d\n",

5295 
__FUNCTION__
, 
txmax
, 
bus
->
tx_£q
));

5296 
txmax
 = 
bus
->
tx_max
;

5298 
bus
->
tx_max
 = 
txmax
;

5301 i‡(
ch™
 =
SDPCM_CONTROL_CHANNEL
) {

5302 
	`dhdsdio_ªad_c⁄åﬁ
(
bus
, bus->
rxhdr
, 
Àn
, 
doff
);

5306 
	`ASSERT
((
ch™
 =
SDPCM_DATA_CHANNEL
Ë|| (ch™ =
SDPCM_EVENT_CHANNEL
) ||

5307 (
ch™
 =
SDPCM_TEST_CHANNEL
Ë|| (ch™ =
SDPCM_GLOM_CHANNEL
));

5310 
rdÀn
 = (
Àn
 > 
fú°ªad
) ? (len - firstread) : 0;

5313 i‡(
bus
->
roundup
 && bus->
blocksize
 && (
rdÀn
 > bus->blocksize)) {

5314 
∑d
 = 
bus
->
blocksize
 - (
rdÀn
 % bus->blocksize);

5315 i‡((
∑d
 <
bus
->
roundup
Ë&& (∑d < bus->
blocksize
) &&

5316 ((
rdÀn
 + 
∑d
 + 
fú°ªad
Ë< 
MAX_RX_DATASZ
))

5317 
rdÀn
 +
∑d
;

5318 } i‡(
rdÀn
 % 
DHD_SDALIGN
) {

5319 
rdÀn
 +
DHD_SDALIGN
 - (rdlen % DHD_SDALIGN);

5323 i‡(
f‹˚Æign
 && (
rdÀn
 & (
ALIGNMENT
 - 1)))

5324 
rdÀn
 = 
	`ROUNDUP
‘dÀn, 
ALIGNMENT
);

5326 i‡((
rdÀn
 + 
fú°ªad
Ë> 
MAX_RX_DATASZ
) {

5328 
	`DHD_ERROR
(("%s:Åoÿl⁄g:Üí %dÑdÀ¿%d\n", 
__FUNCTION__
, 
Àn
, 
rdÀn
));

5329 
bus
->
dhd
->
rx_îr‹s
++; bus->
rx_toﬁ⁄g
++;

5330 
	`dhdsdio_rxÁû
(
bus
, 
FALSE
, FALSE);

5334 
	`dhd_os_sdlock_rxq
(
bus
->
dhd
);

5335 i‡(!(
pkt
 = 
	`PKTGET
(
osh
, (
rdÀn
 + 
fú°ªad
 + 
DHD_SDALIGN
), 
FALSE
))) {

5337 
	`DHD_ERROR
(("%s: PKTGET failed:Ñdlen %d chan %d\n",

5338 
__FUNCTION__
, 
rdÀn
, 
ch™
));

5339 
bus
->
dhd
->
rx_dr›≥d
++;

5340 
	`dhd_os_sdu∆ock_rxq
(
bus
->
dhd
);

5341 
	`dhdsdio_rxÁû
(
bus
, 
FALSE
, 
	`RETRYCHAN
(
ch™
));

5344 
	`dhd_os_sdu∆ock_rxq
(
bus
->
dhd
);

5346 
	`ASSERT
(!
	`PKTLINK
(
pkt
));

5349 
	`ASSERT
(
fú°ªad
 < (
	`PKTLEN
(
osh
, 
pkt
)));

5350 
	`PKTPULL
(
osh
, 
pkt
, 
fú°ªad
);

5351 
	`PKTALIGN
(
osh
, 
pkt
, 
rdÀn
, 
DHD_SDALIGN
);

5354 
sdªt
 = 
	`dhd_bcmsdh_ªcv_buf
(
bus
, 
	`bcmsdh_cur_sbwad
(
sdh
), 
SDIO_FUNC_2
, 
F2SYNC
,

5355 ((
uöt8
 *)
	`PKTDATA
(
osh
, 
pkt
)), 
rdÀn
,Ökt, 
NULL
, NULL);

5356 
bus
->
f2rxd©a
++;

5357 
	`ASSERT
(
sdªt
 !
BCME_PENDING
);

5359 i‡(
sdªt
 < 0) {

5360 
	`DHD_ERROR
(("%s:Ñód %d %†byã†Áûed: %d\n", 
__FUNCTION__
, 
rdÀn
,

5361 ((
ch™
 =
SDPCM_EVENT_CHANNEL
) ? "event" :

5362 ((
ch™
 =
SDPCM_DATA_CHANNEL
Ë? "d©a" : "ã°")), 
sdªt
));

5363 
	`dhd_os_sdlock_rxq
(
bus
->
dhd
);

5364 
	`PKTFREE
(
bus
->
dhd
->
osh
, 
pkt
, 
FALSE
);

5365 
	`dhd_os_sdu∆ock_rxq
(
bus
->
dhd
);

5366 
bus
->
dhd
->
rx_îr‹s
++;

5367 
	`dhdsdio_rxÁû
(
bus
, 
TRUE
, 
	`RETRYCHAN
(
ch™
));

5372 
	`PKTPUSH
(
osh
, 
pkt
, 
fú°ªad
);

5373 
	`bc›y
(
bus
->
rxhdr
, 
	`PKTDATA
(
osh
, 
pkt
), 
fú°ªad
);

5375 #ifde‡
DHD_DEBUG


5376 i‡(
	`DHD_BYTES_ON
(Ë&& 
	`DHD_DATA_ON
()) {

5377 
	`¥hex
("Rx D©a", 
	`PKTDATA
(
osh
, 
pkt
), 
Àn
);

5381 
dñivî
:

5383 i‡(
ch™
 =
SDPCM_GLOM_CHANNEL
) {

5384 i‡(
	`SDPCM_GLOMDESC
(&
bus
->
rxhdr
[
SDPCM_FRAMETAG_LEN
])) {

5385 
	`DHD_GLOM
(("%s: got glom descriptor, %d bytes:\n",

5386 
__FUNCTION__
, 
Àn
));

5387 #ifde‡
DHD_DEBUG


5388 i‡(
	`DHD_GLOM_ON
()) {

5389 
	`¥hex
("Glom D©a", 
	`PKTDATA
(
osh
, 
pkt
), 
Àn
);

5392 
	`PKTSETLEN
(
osh
, 
pkt
, 
Àn
);

5393 
	`ASSERT
(
doff
 =
SDPCM_HDRLEN_RX
);

5394 
	`PKTPULL
(
osh
, 
pkt
, 
SDPCM_HDRLEN_RX
);

5395 
bus
->
glomd
 = 
pkt
;

5397 
	`DHD_ERROR
(("%s: glom su≥r‰amêw/ÿdes¸ùt‹!\n", 
__FUNCTION__
));

5398 
	`dhdsdio_rxÁû
(
bus
, 
FALSE
, FALSE);

5404 
	`PKTSETLEN
(
osh
, 
pkt
, 
Àn
);

5405 
	`PKTPULL
(
osh
, 
pkt
, 
doff
);

5407 #ifde‡
SDTEST


5409 i‡(
ch™
 =
SDPCM_TEST_CHANNEL
) {

5410 
	`dhdsdio_ã°rcv
(
bus
, 
pkt
, 
£q
);

5415 i‡(
	`PKTLEN
(
osh
, 
pkt
) == 0) {

5416 
	`dhd_os_sdlock_rxq
(
bus
->
dhd
);

5417 
	`PKTFREE
(
bus
->
dhd
->
osh
, 
pkt
, 
FALSE
);

5418 
	`dhd_os_sdu∆ock_rxq
(
bus
->
dhd
);

5420 } i‡(
	`dhd_¥Ÿ_hdΩuŒ
(
bus
->
dhd
, &
ifidx
, 
pkt
, 
ª‹dî_öfo_buf
,

5421 &
ª‹dî_öfo_Àn
) != 0) {

5422 
	`DHD_ERROR
(("%s:ÑxÖrŸocﬁÉº‹\n", 
__FUNCTION__
));

5423 
	`dhd_os_sdlock_rxq
(
bus
->
dhd
);

5424 
	`PKTFREE
(
bus
->
dhd
->
osh
, 
pkt
, 
FALSE
);

5425 
	`dhd_os_sdu∆ock_rxq
(
bus
->
dhd
);

5426 
bus
->
dhd
->
rx_îr‹s
++;

5429 i‡(
ª‹dî_öfo_Àn
) {

5431 
	`dhd_¥o˚ss_pkt_ª‹dî_öfo
(
bus
->
dhd
, 
ª‹dî_öfo_buf
, 
ª‹dî_öfo_Àn
,

5432 &
pkt
, &
pkt_cou¡
);

5433 i‡(
pkt_cou¡
 == 0)

5437 
pkt_cou¡
 = 1;

5441 
	`dhd_os_sdu∆ock
(
bus
->
dhd
);

5442 
	`dhd_rx_‰ame
(
bus
->
dhd
, 
ifidx
, 
pkt
, 
pkt_cou¡
, 
ch™
);

5443 
	`dhd_os_sdlock
(
bus
->
dhd
);

5445 
rxcou¡
 = 
max‰ames
 - 
rxÀ·
;

5446 #ifde‡
DHD_DEBUG


5448 i‡(!
rxÀ·
 && !
sdã°
)

5449 
	`DHD_DATA
(("%s: hôÑxÜimô o‡%d fømes\n", 
__FUNCTION__
, 
max‰ames
));

5452 
	`DHD_DATA
(("%s:Öro˚s£d %d fømes\n", 
__FUNCTION__
, 
rxcou¡
));

5454 i‡(
bus
->
rxskù
)

5455 
rx£q
--;

5456 
bus
->
rx_£q
 = 
rx£q
;

5458 i‡(
bus
->
ªqbus¶ìp
)

5460 
	`dhdsdio_bus¶ìp
(
bus
, 
TRUE
);

5461 
bus
->
ªqbus¶ìp
 = 
FALSE
;

5463 
bus
->
ªad‰ames
 = 
FALSE
;

5465  
rxcou¡
;

5466 
	}
}

5468 
uöt32


5469 
	$dhdsdio_ho°maû
(
dhd_bus_t
 *
bus
)

5471 
sdpcmd_ªgs_t
 *
ªgs
 = 
bus
->regs;

5472 
uöt32
 
öt°©us
 = 0;

5473 
uöt32
 
hmb_d©a
;

5474 
uöt8
 
fcbôs
;

5475 
uöt
 
ªåõs
 = 0;

5477 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

5480 
	`R_SDREG
(
hmb_d©a
, &
ªgs
->
toho°maûboxd©a
, 
ªåõs
);

5481 i‡(
ªåõs
 <
ªåy_limô
)

5482 
	`W_SDREG
(
SMB_INT_ACK
, &
ªgs
->
tosbmaûbox
, 
ªåõs
);

5483 
bus
->
f1ªgd©a
 += 2;

5486 i‡(
hmb_d©a
 & 
HMB_DATA_NAKHANDLED
) {

5487 
	`DHD_INFO
(("D⁄gÀÑï‹t†NAK h™dÀd,Éx≥˘Ñtx o‡%d\n", 
bus
->
rx_£q
));

5488 i‡(!
bus
->
rxskù
) {

5489 
	`DHD_ERROR
(("%s: u√x≥˘ed NAKHANDLED!\n", 
__FUNCTION__
));

5491 
bus
->
rxskù
 = 
FALSE
;

5492 
öt°©us
 |
	`FRAME_AVAIL_MASK
(
bus
);

5498 i‡(
hmb_d©a
 & (
HMB_DATA_DEVREADY
 | 
HMB_DATA_FWREADY
)) {

5499 
bus
->
sdpcm_vî
 = (
hmb_d©a
 & 
HMB_DATA_VERSION_MASK
Ë>> 
HMB_DATA_VERSION_SHIFT
;

5500 i‡(
bus
->
sdpcm_vî
 !
SDPCM_PROT_VERSION
)

5501 
	`DHD_ERROR
(("Version mismatch, dongleÑeports %d,Éxpecting %d\n",

5502 
bus
->
sdpcm_vî
, 
SDPCM_PROT_VERSION
));

5504 
	`DHD_INFO
(("D⁄gÀÑódy,ÖrŸocﬁ vîsi⁄ %d\n", 
bus
->
sdpcm_vî
));

5506 i‡((
bus
->
sih
->
busc‹ëy≥
 =
SDIOD_CORE_ID
Ë&& (bus->
sdpcmªv
 >= 4) &&

5507 (
bus
->
rxöt_mode
 =
SDIO_DEVICE_RXDATAINT_MODE_1
)) {

5508 
uöt32
 
vÆ
;

5510 
vÆ
 = 
	`R_REG
(
bus
->
dhd
->
osh
, &bus->
ªgs
->
c‹ec⁄åﬁ
);

5511 
vÆ
 &~
CC_XMTDATAAVAIL_MODE
;

5512 
vÆ
 |
CC_XMTDATAAVAIL_CTRL
;

5513 
	`W_REG
(
bus
->
dhd
->
osh
, &bus->
ªgs
->
c‹ec⁄åﬁ
, 
vÆ
);

5515 
vÆ
 = 
	`R_REG
(
bus
->
dhd
->
osh
, &bus->
ªgs
->
c‹ec⁄åﬁ
);

5518 #ifde‡
DHD_DEBUG


5521 
sdpcm_sh¨ed_t
 
sh¨ed
;

5522 i‡(
	`dhdsdio_ªadsh¨ed
(
bus
, &
sh¨ed
) == 0)

5523 
bus
->
c⁄sﬁe_addr
 = 
sh¨ed
.console_addr;

5533 i‡(
hmb_d©a
 & 
HMB_DATA_FC
) {

5534 
fcbôs
 = (
hmb_d©a
 & 
HMB_DATA_FCDATA_MASK
Ë>> 
HMB_DATA_FCDATA_SHIFT
;

5536 i‡(
fcbôs
 & ~
bus
->
Êowc⁄åﬁ
)

5537 
bus
->
fc_xoff
++;

5538 i‡(
bus
->
Êowc⁄åﬁ
 & ~
fcbôs
)

5539 
bus
->
fc_x⁄
++;

5541 
bus
->
fc_rcvd
++;

5542 
bus
->
Êowc⁄åﬁ
 = 
fcbôs
;

5545 #ifde‡
DHD_DEBUG


5547 i‡(
hmb_d©a
 & 
HMB_DATA_FWHALT
) {

5548 
	`DHD_ERROR
(("INTERNAL ERROR: FIRMWARE HALTED : set BUS DOWN\n"));

5549 
	`dhdsdio_checkdõd
(
bus
, 
NULL
, 0);

5550 
bus
->
dhd
->
bus°©e
 = 
DHD_BUS_DOWN
;

5555 i‡(
hmb_d©a
 & ~(
HMB_DATA_DEVREADY
 |

5556 
HMB_DATA_FWHALT
 |

5557 
HMB_DATA_NAKHANDLED
 |

5558 
HMB_DATA_FC
 |

5559 
HMB_DATA_FWREADY
 |

5560 
HMB_DATA_FCDATA_MASK
 |

5561 
HMB_DATA_VERSION_MASK
)) {

5562 
	`DHD_ERROR
(("Unknow¿maûbox d©®c⁄ã¡: 0x%02x\n", 
hmb_d©a
));

5565  
öt°©us
;

5566 
	}
}

5568 
boﬁ


5569 
	$dhdsdio_dpc
(
dhd_bus_t
 *
bus
)

5571 
bcmsdh_öfo_t
 *
sdh
 = 
bus
->sdh;

5572 
sdpcmd_ªgs_t
 *
ªgs
 = 
bus
->regs;

5573 
uöt32
 
öt°©us
, 
√w°©us
 = 0;

5574 
uöt
 
ªåõs
 = 0;

5575 
uöt
 
rxlimô
 = 
dhd_rxbound
;

5576 
uöt
 
txlimô
 = 
dhd_txbound
;

5577 
uöt
 
‰ame˙t
 = 0;

5578 
boﬁ
 
rxd⁄e
 = 
TRUE
;

5579 
boﬁ
 
ªsched
 = 
FALSE
;

5581 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

5583 i‡(
bus
->
dhd
->
bus°©e
 =
DHD_BUS_DOWN
) {

5584 
	`DHD_ERROR
(("%s: Bu†down,Ñë\n", 
__FUNCTION__
));

5585 
bus
->
öt°©us
 = 0;

5590 
öt°©us
 = 
bus
->intstatus;

5592 
	`dhd_os_sdlock
(
bus
->
dhd
);

5594 i‡(!
	`SLPAUTO_ENAB
(
bus
Ë&& !
	`KSO_ENAB
(bus)) {

5595 
	`DHD_ERROR
(("%s: Devi˚á¶ìp\n", 
__FUNCTION__
));

5596 
exô
;

5600 i‡(!
	`SLPAUTO_ENAB
(
bus
Ë&& (bus->
˛k°©e
 =
CLK_PENDING
)) {

5601 
îr
;

5602 
uöt8
 
˛k˘l
, 
dev˘l
 = 0;

5604 #ifde‡
DHD_DEBUG


5606 
dev˘l
 = 
	`bcmsdh_cfg_ªad
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_DEVICE_CTL
, &
îr
);

5607 i‡(
îr
) {

5608 
	`DHD_ERROR
(("%s:Éº‹Ñódög DEVCTL: %d\n", 
__FUNCTION__
, 
îr
));

5609 
bus
->
dhd
->
bus°©e
 = 
DHD_BUS_DOWN
;

5611 
	`ASSERT
(
dev˘l
 & 
SBSDIO_DEVCTL_CA_INT_ONLY
);

5616 
˛k˘l
 = 
	`bcmsdh_cfg_ªad
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_CHIPCLKCSR
, &
îr
);

5617 i‡(
îr
) {

5618 
	`DHD_ERROR
(("%s:Éº‹Ñódög CSR: %d\n", 
__FUNCTION__
, 
îr
));

5619 
bus
->
dhd
->
bus°©e
 = 
DHD_BUS_DOWN
;

5622 
	`DHD_INFO
(("DPC: PENDING, dev˘»0x%02x clk˘»0x%02x\n", 
dev˘l
, 
˛k˘l
));

5624 i‡(
	`SBSDIO_HTAV
(
˛k˘l
)) {

5625 
dev˘l
 = 
	`bcmsdh_cfg_ªad
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_DEVICE_CTL
, &
îr
);

5626 i‡(
îr
) {

5627 
	`DHD_ERROR
(("%s:ÉrrorÑeading DEVCTL: %d\n",

5628 
__FUNCTION__
, 
îr
));

5629 
bus
->
dhd
->
bus°©e
 = 
DHD_BUS_DOWN
;

5631 
dev˘l
 &~
SBSDIO_DEVCTL_CA_INT_ONLY
;

5632 
	`bcmsdh_cfg_wrôe
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_DEVICE_CTL
, 
dev˘l
, &
îr
);

5633 i‡(
îr
) {

5634 
	`DHD_ERROR
(("%s:Érror writing DEVCTL: %d\n",

5635 
__FUNCTION__
, 
îr
));

5636 
bus
->
dhd
->
bus°©e
 = 
DHD_BUS_DOWN
;

5638 
bus
->
˛k°©e
 = 
CLK_AVAIL
;

5640 
˛kwaô
;

5644 
	`BUS_WAKE
(
bus
);

5647 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_AVAIL
, 
TRUE
);

5648 i‡(
bus
->
˛k°©e
 !
CLK_AVAIL
)

5649 
˛kwaô
;

5652 i‡(
bus
->
ùíd
) {

5653 
bus
->
ùíd
 = 
FALSE
;

5654 
	`R_SDREG
(
√w°©us
, &
ªgs
->
öt°©us
, 
ªåõs
);

5655 
bus
->
f1ªgd©a
++;

5656 i‡(
	`bcmsdh_ªgÁû
(
bus
->
sdh
))

5657 
√w°©us
 = 0;

5658 
√w°©us
 &
bus
->
ho°ötmask
;

5659 
bus
->
fc°©e
 = !!(
√w°©us
 & 
I_HMB_FC_STATE
);

5660 i‡(
√w°©us
) {

5661 
bus
->
f1ªgd©a
++;

5662 i‡((
bus
->
rxöt_mode
 =
SDIO_DEVICE_RXDATAINT_MODE_0
) &&

5663 (
√w°©us
 =
I_XMTDATA_AVAIL
)) {

5666 
	`W_SDREG
(
√w°©us
, &
ªgs
->
öt°©us
, 
ªåõs
);

5671 
öt°©us
 |
√w°©us
;

5672 
bus
->
öt°©us
 = 0;

5678 i‡(
öt°©us
 & 
I_HMB_FC_CHANGE
) {

5679 
öt°©us
 &~
I_HMB_FC_CHANGE
;

5680 
	`W_SDREG
(
I_HMB_FC_CHANGE
, &
ªgs
->
öt°©us
, 
ªåõs
);

5681 
	`R_SDREG
(
√w°©us
, &
ªgs
->
öt°©us
, 
ªåõs
);

5682 
bus
->
f1ªgd©a
 += 2;

5683 
bus
->
fc°©e
 = !!(
√w°©us
 & (
I_HMB_FC_STATE
 | 
I_HMB_FC_CHANGE
));

5684 
öt°©us
 |(
√w°©us
 & 
bus
->
ho°ötmask
);

5688 i‡(
öt°©us
 & 
I_CHIPACTIVE
) {

5690 
öt°©us
 &~
I_CHIPACTIVE
;

5694 i‡(
öt°©us
 & 
I_HMB_HOST_INT
) {

5695 
öt°©us
 &~
I_HMB_HOST_INT
;

5696 
öt°©us
 |
	`dhdsdio_ho°maû
(
bus
);

5700 i‡(
öt°©us
 & 
I_WR_OOSYNC
) {

5701 
	`DHD_ERROR
(("DongleÑeports WR_OOSYNC\n"));

5702 
öt°©us
 &~
I_WR_OOSYNC
;

5705 i‡(
öt°©us
 & 
I_RD_OOSYNC
) {

5706 
	`DHD_ERROR
(("DongleÑeports RD_OOSYNC\n"));

5707 
öt°©us
 &~
I_RD_OOSYNC
;

5710 i‡(
öt°©us
 & 
I_SBINT
) {

5711 
	`DHD_ERROR
(("DongleÑeports SBINT\n"));

5712 
öt°©us
 &~
I_SBINT
;

5716 i‡(
öt°©us
 & 
I_CHIPACTIVE
) {

5717 
	`DHD_INFO
(("DongleÑeports CHIPACTIVE\n"));

5718 
öt°©us
 &~
I_CHIPACTIVE
;

5722 i‡(
bus
->
rxskù
) {

5723 
öt°©us
 &~
	`FRAME_AVAIL_MASK
(
bus
);

5727 i‡(
	`PKT_AVAILABLE
(
bus
, 
öt°©us
)) {

5728 
‰ame˙t
 = 
	`dhdsdio_ªad‰ames
(
bus
, 
rxlimô
, &
rxd⁄e
);

5729 i‡(
rxd⁄e
 || 
bus
->
rxskù
)

5730 
öt°©us
 &~
	`FRAME_AVAIL_MASK
(
bus
);

5731 
rxlimô
 -
	`MIN
(
‰ame˙t
,Ñxlimit);

5735 
bus
->
öt°©us
 = intstatus;

5737 
˛kwaô
:

5742 i‡(
bus
->
öå
 && bus->
ötdis
 && !
	`bcmsdh_ªgÁû
(
sdh
)) {

5743 
	`DHD_INTR
(("%s:Énable SDIO interrupts,Ñxdone %d framecnt %d\n",

5744 
__FUNCTION__
, 
rxd⁄e
, 
‰ame˙t
));

5745 
bus
->
ötdis
 = 
FALSE
;

5746 #i‡
	`deföed
(
OOB_INTR_ONLY
)

5747 
	`bcmsdh_oob_öå_£t
(1);

5749 
	`bcmsdh_öå_íabÀ
(
sdh
);

5752 #i‡
	`deföed
(
OOB_INTR_ONLY
Ë&& !deföed(
HW_OOB
)

5759 
	`R_SDREG
(
√w°©us
, &
ªgs
->
öt°©us
, 
ªåõs
);

5760 i‡(
	`bcmsdh_ªgÁû
(
bus
->
sdh
))

5761 
√w°©us
 = 0;

5762 i‡(
√w°©us
 & 
bus
->
ho°ötmask
) {

5763 
bus
->
ùíd
 = 
TRUE
;

5764 
ªsched
 = 
TRUE
;

5767 #ifde‡
PROP_TXSTATUS


5768 
	`dhd_wlfc_åiggî_pktcommô
(
bus
->
dhd
);

5770 i‡(
	`TXCTLOK
(
bus
Ë&& bus->
˘æ_‰ame_°©
 && (bus->
˛k°©e
 =
CLK_AVAIL
)) {

5771 
ªt
, 
i
;

5773 
uöt8
* 
‰ame_£q
 = 
bus
->
˘æ_‰ame_buf
 + 
SDPCM_FRAMETAG_LEN
;

5775 i‡(*
‰ame_£q
 !
bus
->
tx_£q
) {

5776 
	`DHD_INFO
(("%s IOCTL frame seqÜag detected!"

5778 
__FUNCTION__
, *
‰ame_£q
, 
bus
->
tx_£q
));

5779 *
‰ame_£q
 = 
bus
->
tx_£q
;

5782 
ªt
 = 
	`dhd_bcmsdh_£nd_buf
(
bus
, 
	`bcmsdh_cur_sbwad
(
sdh
), 
SDIO_FUNC_2
, 
F2SYNC
,

5783 (
uöt8
 *)
bus
->
˘æ_‰ame_buf
, (
uöt32
)bus->
˘æ_‰ame_Àn
,

5784 
NULL
, NULL, NULL);

5785 
	`ASSERT
(
ªt
 !
BCME_PENDING
);

5786 i‡(
ªt
 =
BCME_NODEVICE
) {

5787 
	`DHD_ERROR
(("%s: Devi˚á¶ì∞Æªady\n", 
__FUNCTION__
));

5788 } i‡(
ªt
 < 0) {

5790 
	`DHD_INFO
(("%s: sdioÉrror %d,ábort commandándÅerminate frame.\n",

5791 
__FUNCTION__
, 
ªt
));

5792 
bus
->
tx_sdîrs
++;

5794 
	`bcmsdh_ab‹t
(
sdh
, 
SDIO_FUNC_2
);

5796 
	`bcmsdh_cfg_wrôe
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_FRAMECTRL
,

5797 
SFC_WF_TERM
, 
NULL
);

5798 
bus
->
f1ªgd©a
++;

5800 
i
 = 0; i < 3; i++) {

5801 
uöt8
 
hi
, 
lo
;

5802 
hi
 = 
	`bcmsdh_cfg_ªad
(
sdh
, 
SDIO_FUNC_1
,

5803 
SBSDIO_FUNC1_WFRAMEBCHI
, 
NULL
);

5804 
lo
 = 
	`bcmsdh_cfg_ªad
(
sdh
, 
SDIO_FUNC_1
,

5805 
SBSDIO_FUNC1_WFRAMEBCLO
, 
NULL
);

5806 
bus
->
f1ªgd©a
 += 2;

5807 i‡((
hi
 =0Ë&& (
lo
 == 0))

5811 i‡(
ªt
 == 0) {

5812 
bus
->
tx_£q
 = (bus->tx_£q + 1Ë% 
SDPCM_SEQUENCE_WRAP
;

5815 
bus
->
˘æ_‰ame_°©
 = 
FALSE
;

5816 
	`dhd_waô_evít_wakeup
(
bus
->
dhd
);

5819 i‡((
bus
->
˛k°©e
 =
CLK_AVAIL
Ë&& !bus->
fc°©e
 &&

5820 
	`pktq_mÀn
(&
bus
->
txq
, ~bus->
Êowc⁄åﬁ
Ë&& 
txlimô
 && 
	`DATAOK
(bus)) {

5821 
‰ame˙t
 = 
rxd⁄e
 ? 
txlimô
 : 
	`MIN
—xlimô, 
dhd_txmömax
);

5822 
‰ame˙t
 = 
	`dhdsdio_£nd‰omq
(
bus
, framecnt);

5823 
txlimô
 -
‰ame˙t
;

5826 i‡(
bus
->
˘æ_‰ame_°©
)

5827 
ªsched
 = 
TRUE
;

5831 i‡((
bus
->
dhd
->
bus°©e
 =
DHD_BUS_DOWN
Ë|| 
	`bcmsdh_ªgÁû
(
sdh
)) {

5832 i‡((
bus
->
sih
 && bus->sih->
busc‹îev
 >12Ë&& !(
	`dhdsdio_¶ìpc§_gë
(bus) &

5833 
SBSDIO_FUNC1_SLEEPCSR_KSO_MASK
)) {

5835 
	`DHD_ERROR
(("%s: Bu†Áûed duêtÿKSO\n", 
__FUNCTION__
));

5836 
bus
->
kso
 = 
FALSE
;

5838 
	`DHD_ERROR
(("%s: failed backplaneáccess over SDIO, halting operation\n",

5839 
__FUNCTION__
));

5840 
bus
->
dhd
->
bus°©e
 = 
DHD_BUS_DOWN
;

5841 
bus
->
öt°©us
 = 0;

5843 } i‡(
bus
->
˛k°©e
 =
CLK_PENDING
) {

5845 } i‡(
bus
->
öt°©us
 || bus->
ùíd
 ||

5846 (!
bus
->
fc°©e
 && 
	`pktq_mÀn
(&bus->
txq
, ~bus->
Êowc⁄åﬁ
Ë&& 
	`DATAOK
(bus)) ||

5847 
	`PKT_AVAILABLE
(
bus
, bus->
öt°©us
)) {

5848 
ªsched
 = 
TRUE
;

5851 
bus
->
dpc_sched
 = 
ªsched
;

5854 i‡((
bus
->
idÀtime
 =
DHD_IDLE_IMMEDIATE
Ë&& (bus->
˛k°©e
 !
CLK_PENDING
)) {

5855 
bus
->
a˘ivôy
 = 
FALSE
;

5856 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_NONE
, 
FALSE
);

5859 
exô
:

5860 
	`dhd_os_sdu∆ock
(
bus
->
dhd
);

5861  
ªsched
;

5862 
	}
}

5864 
boﬁ


5865 
	$dhd_bus_dpc
(
dhd_bus
 *
bus
)

5867 
boﬁ
 
ªsched
;

5870 
	`DHD_TRACE
(("CÆlög dhdsdio_dpc(Ë‰om %s\n", 
__FUNCTION__
));

5871 
ªsched
 = 
	`dhdsdio_dpc
(
bus
);

5873  
ªsched
;

5874 
	}
}

5877 
	$dhdsdio_i§
(*
¨g
)

5879 
dhd_bus_t
 *
bus
 = (dhd_bus_t*)
¨g
;

5880 
bcmsdh_öfo_t
 *
sdh
;

5882 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

5884 i‡(!
bus
) {

5885 
	`DHD_ERROR
(("%†: bu†i†nuŒÖoöã∏,Éxô \n", 
__FUNCTION__
));

5888 
sdh
 = 
bus
->sdh;

5890 i‡(
bus
->
dhd
->
bus°©e
 =
DHD_BUS_DOWN
) {

5891 
	`DHD_ERROR
(("%†: bu†i†down. wêhavênŸhögÅÿdo\n", 
__FUNCTION__
));

5895 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

5898 
bus
->
öåcou¡
++;

5899 
bus
->
ùíd
 = 
TRUE
;

5902 i‡(!
	`SLPAUTO_ENAB
(
bus
)) {

5903 i‡(
bus
->
¶ìpög
) {

5904 
	`DHD_ERROR
(("INTERRUPT WHILE SLEEPING??\n"));

5906 } i‡(!
	`KSO_ENAB
(
bus
)) {

5907 
	`DHD_ERROR
(("ISR in devsleep 1\n"));

5912 i‡(
bus
->
öå
) {

5913 
	`DHD_INTR
(("%s: dißbÀ SDIO i¡îru±s\n", 
__FUNCTION__
));

5915 
	`DHD_ERROR
(("dhdsdio_isr() w/o interrupt configured!\n"));

5918 
	`bcmsdh_öå_dißbÀ
(
sdh
);

5919 
bus
->
ötdis
 = 
TRUE
;

5921 #i‡
	`deföed
(
SDIO_ISR_THREAD
)

5922 
	`DHD_TRACE
(("CÆlög dhdsdio_dpc(Ë‰om %s\n", 
__FUNCTION__
));

5923 
	`DHD_OS_WAKE_LOCK
(
bus
->
dhd
);

5924 
	`dhdsdio_dpc
(
bus
));

5925 
	`DHD_OS_WAKE_UNLOCK
(
bus
->
dhd
);

5928 
bus
->
dpc_sched
 = 
TRUE
;

5929 
	`dhd_sched_dpc
(
bus
->
dhd
);

5933 
	}
}

5935 #ifde‡
SDTEST


5937 
	$dhdsdio_pktgí_öô
(
dhd_bus_t
 *
bus
)

5940 i‡(
dhd_pktgí_Àn
) {

5941 
bus
->
pktgí_maxÀn
 = 
	`MIN
(
dhd_pktgí_Àn
, 
MAX_PKTGEN_LEN
);

5942 
bus
->
pktgí_möÀn
 = bus->
pktgí_maxÀn
;

5944 
bus
->
pktgí_maxÀn
 = 
MAX_PKTGEN_LEN
;

5945 
bus
->
pktgí_möÀn
 = 0;

5947 
bus
->
pktgí_Àn
 = (
uöt16
)bus->
pktgí_möÀn
;

5950 
bus
->
pktgí_‰eq
 = 1;

5951 
bus
->
pktgí_¥öt
 = 
dhd_w©chdog_ms
 ? (10000/dhd_watchdog_ms):0;

5952 
bus
->
pktgí_cou¡
 = (
dhd_pktgí
 * 
dhd_w©chdog_ms
 + 999) / 1000;

5955 
bus
->
pktgí_mode
 = 
DHD_PKTGEN_ECHO
;

5956 
bus
->
pktgí_°›
 = 1;

5957 
	}
}

5960 
	$dhdsdio_pktgí
(
dhd_bus_t
 *
bus
)

5962 *
pkt
;

5963 
uöt8
 *
d©a
;

5964 
uöt
 
pktcou¡
;

5965 
uöt
 
fûlbyã
;

5966 
o¶_t
 *
osh
 = 
bus
->
dhd
->osh;

5967 
uöt16
 
Àn
;

5968 
ul⁄g
 
time_œp£
;

5969 
uöt
 
£¡_pkts
;

5970 
uöt
 
rcvd_pkts
;

5973 i‡(
bus
->
pktgí_¥öt
 && (++bus->
pktgí_±ick
 >= bus->pktgen_print)) {

5974 
bus
->
pktgí_±ick
 = 0;

5975 
	`¥ötf
("%s: sendáttempts %d,Ñcvd %d,Érrors %d\n",

5976 
__FUNCTION__
, 
bus
->
pktgí_£¡
, bus->
pktgí_rcvd
, bus->
pktgí_Áû
);

5979 i‡(
bus
->
pktgí_möÀn
 =bus->
pktgí_maxÀn
) {

5980 
time_œp£
 = 
jiffõs
 - 
bus
->
pktgí_¥ev_time
;

5981 
bus
->
pktgí_¥ev_time
 = 
jiffõs
;

5982 
£¡_pkts
 = 
bus
->
pktgí_£¡
 - bus->
pktgí_¥ev_£¡
;

5983 
bus
->
pktgí_¥ev_£¡
 = bus->
pktgí_£¡
;

5984 
rcvd_pkts
 = 
bus
->
pktgí_rcvd
 - bus->
pktgí_¥ev_rcvd
;

5985 
bus
->
pktgí_¥ev_rcvd
 = bus->
pktgí_rcvd
;

5987 
	`¥ötf
("%s: Tx Throughput %d kbps, Rx Throughput %d kbps\n",

5988 
__FUNCTION__
,

5989 (
£¡_pkts
 * 
bus
->
pktgí_Àn
 / 
	`jiffõs_to_m£cs
(
time_œp£
)) * 8,

5990 (
rcvd_pkts
 * 
bus
->
pktgí_Àn
 / 
	`jiffõs_to_m£cs
(
time_œp£
)) * 8);

5995 i‡(
bus
->
pktgí_mode
 =
DHD_PKTGEN_RECV
) {

5996 i‡(
bus
->
pktgí_rcv_°©e
 =
PKTGEN_RCV_IDLE
) {

5997 
bus
->
pktgí_rcv_°©e
 = 
PKTGEN_RCV_ONGOING
;

5998 
	`dhdsdio_sdã°_£t
(
bus
, bus->
pktgí_tŸÆ
);

6004 
pktcou¡
 = 0;Öktcou¡ < 
bus
->
pktgí_cou¡
;Öktcount++) {

6006 i‡(
bus
->
pktgí_tŸÆ
 && (bus->
pktgí_£¡
 >= bus->pktgen_total)) {

6007 
bus
->
pktgí_cou¡
 = 0;

6012 i‡(
bus
->
pktgí_mode
 =
DHD_PKTGEN_RXBURST
) {

6013 
Àn
 = 
SDPCM_TEST_PKT_CNT_FLD_LEN
;

6015 
Àn
 = 
bus
->
pktgí_Àn
;

6017 i‡(!(
pkt
 = 
	`PKTGET
(
osh
, (
Àn
 + 
SDPCM_HDRLEN
 + 
SDPCM_TEST_HDRLEN
 + 
DHD_SDALIGN
),

6018 
TRUE
))) {;

6019 
	`DHD_ERROR
(("%s: PKTGET faûed!\n", 
__FUNCTION__
));

6022 
	`PKTALIGN
(
osh
, 
pkt
, (
Àn
 + 
SDPCM_HDRLEN
 + 
SDPCM_TEST_HDRLEN
), 
DHD_SDALIGN
);

6023 
d©a
 = (
uöt8
*)
	`PKTDATA
(
osh
, 
pkt
Ë+ 
SDPCM_HDRLEN
;

6026 
bus
->
pktgí_mode
) {

6027 
DHD_PKTGEN_ECHO
:

6028 *
d©a
++ = 
SDPCM_TEST_ECHOREQ
;

6029 *
d©a
++ = (
uöt8
)
bus
->
pktgí_£¡
;

6032 
DHD_PKTGEN_SEND
:

6033 *
d©a
++ = 
SDPCM_TEST_DISCARD
;

6034 *
d©a
++ = (
uöt8
)
bus
->
pktgí_£¡
;

6037 
DHD_PKTGEN_RXBURST
:

6038 *
d©a
++ = 
SDPCM_TEST_BURST
;

6039 *
d©a
++ = (
uöt8
)
bus
->
pktgí_cou¡
;

6043 
	`DHD_ERROR
(("UƒecognizedÖktgí modê%d\n", 
bus
->
pktgí_mode
));

6044 
	`PKTFREE
(
osh
, 
pkt
, 
TRUE
);

6045 
bus
->
pktgí_cou¡
 = 0;

6050 *
d©a
++ = (
bus
->
pktgí_Àn
 >> 0);

6051 *
d©a
++ = (
bus
->
pktgí_Àn
 >> 8);

6056 i‡(
bus
->
pktgí_mode
 =
DHD_PKTGEN_RXBURST
) {

6057 *
d©a
++ = (
uöt8
)(
bus
->
pktgí_cou¡
 >> 0);

6058 *
d©a
++ = (
uöt8
)(
bus
->
pktgí_cou¡
 >> 8);

6059 *
d©a
++ = (
uöt8
)(
bus
->
pktgí_cou¡
 >> 16);

6060 *
d©a
++ = (
uöt8
)(
bus
->
pktgí_cou¡
 >> 24);

6064 
fûlbyã
 = 0; fûlbyã < 
Àn
; fillbyte++)

6065 *
d©a
++ = 
	`SDPCM_TEST_FILL
(
fûlbyã
, (
uöt8
)
bus
->
pktgí_£¡
);

6068 #ifde‡
DHD_DEBUG


6069 i‡(
	`DHD_BYTES_ON
(Ë&& 
	`DHD_DATA_ON
()) {

6070 
d©a
 = (
uöt8
*)
	`PKTDATA
(
osh
, 
pkt
Ë+ 
SDPCM_HDRLEN
;

6071 
	`¥hex
("dhdsdio_pktgí: Tx D©a", 
d©a
, 
	`PKTLEN
(
osh
, 
pkt
Ë- 
SDPCM_HDRLEN
);

6076 i‡(
	`dhdsdio_txpkt
(
bus
, 
pkt
, 
SDPCM_TEST_CHANNEL
, 
TRUE
, 
FALSE
)) {

6077 
bus
->
pktgí_Áû
++;

6078 i‡(
bus
->
pktgí_°›
 && bus->pktgí_°› =bus->
pktgí_Áû
)

6079 
bus
->
pktgí_cou¡
 = 0;

6081 
bus
->
pktgí_£¡
++;

6084 i‡(++
bus
->
pktgí_Àn
 > bus->
pktgí_maxÀn
)

6085 
bus
->
pktgí_Àn
 = (
uöt16
)bus->
pktgí_möÀn
;

6088 i‡(
bus
->
pktgí_mode
 =
DHD_PKTGEN_RXBURST
)

6091 
	}
}

6094 
	$dhdsdio_sdã°_£t
(
dhd_bus_t
 *
bus
, 
uöt
 
cou¡
)

6096 *
pkt
;

6097 
uöt8
 *
d©a
;

6098 
o¶_t
 *
osh
 = 
bus
->
dhd
->osh;

6101 i‡(!(
pkt
 = 
	`PKTGET
(
osh
, 
SDPCM_HDRLEN
 + 
SDPCM_TEST_HDRLEN
 +

6102 
SDPCM_TEST_PKT_CNT_FLD_LEN
 + 
DHD_SDALIGN
, 
TRUE
))) {

6103 
	`DHD_ERROR
(("%s: PKTGET faûed!\n", 
__FUNCTION__
));

6106 
	`PKTALIGN
(
osh
, 
pkt
, (
SDPCM_HDRLEN
 + 
SDPCM_TEST_HDRLEN
 +

6107 
SDPCM_TEST_PKT_CNT_FLD_LEN
), 
DHD_SDALIGN
);

6108 
d©a
 = (
uöt8
*)
	`PKTDATA
(
osh
, 
pkt
Ë+ 
SDPCM_HDRLEN
;

6111 *
d©a
++ = 
SDPCM_TEST_SEND
;

6112 *
d©a
++ = (
cou¡
 > 0)?
TRUE
:
FALSE
;

6113 *
d©a
++ = (
bus
->
pktgí_maxÀn
 >> 0);

6114 *
d©a
++ = (
bus
->
pktgí_maxÀn
 >> 8);

6115 *
d©a
++ = (
uöt8
)(
cou¡
 >> 0);

6116 *
d©a
++ = (
uöt8
)(
cou¡
 >> 8);

6117 *
d©a
++ = (
uöt8
)(
cou¡
 >> 16);

6118 *
d©a
++ = (
uöt8
)(
cou¡
 >> 24);

6121 i‡(
	`dhdsdio_txpkt
(
bus
, 
pkt
, 
SDPCM_TEST_CHANNEL
, 
TRUE
, 
FALSE
))

6122 
bus
->
pktgí_Áû
++;

6123 
	}
}

6127 
	$dhdsdio_ã°rcv
(
dhd_bus_t
 *
bus
, *
pkt
, 
uöt
 
£q
)

6129 
o¶_t
 *
osh
 = 
bus
->
dhd
->osh;

6130 
uöt8
 *
d©a
;

6131 
uöt
 
pkéí
;

6133 
uöt8
 
cmd
;

6134 
uöt8
 
exåa
;

6135 
uöt16
 
Àn
;

6136 
uöt16
 
off£t
;

6139 i‡((
pkéí
 = 
	`PKTLEN
(
osh
, 
pkt
)Ë< 
SDPCM_TEST_HDRLEN
) {

6140 
	`DHD_ERROR
(("dhdsdio_ª°rcv:Åos†ru¡ føme,Ökéí %d\n", 
pkéí
));

6141 
	`PKTFREE
(
osh
, 
pkt
, 
FALSE
);

6146 
d©a
 = 
	`PKTDATA
(
osh
, 
pkt
);

6147 
cmd
 = *
d©a
++;

6148 
exåa
 = *
d©a
++;

6149 
Àn
 = *
d©a
++;Üen += *data++ << 8;

6150 
	`DHD_TRACE
(("%s:cmd:%d, xåa:%d,Àn:%d\n", 
__FUNCTION__
, 
cmd
, 
exåa
, 
Àn
));

6152 i‡(
cmd
 =
SDPCM_TEST_DISCARD
 || cmd =
SDPCM_TEST_ECHOREQ
 || cmd =
SDPCM_TEST_ECHORSP
) {

6153 i‡(
pkéí
 !
Àn
 + 
SDPCM_TEST_HDRLEN
) {

6154 
	`DHD_ERROR
(("dhdsdio_testrcv: frameÜength mismatch,Öktlen %d seq %d"

6155 " cmd %dÉxå®%dÜí %d\n", 
pkéí
, 
£q
, 
cmd
, 
exåa
, 
Àn
));

6156 
	`PKTFREE
(
osh
, 
pkt
, 
FALSE
);

6162 
cmd
) {

6163 
SDPCM_TEST_ECHOREQ
:

6165 *(
uöt8
 *)(
	`PKTDATA
(
osh
, 
pkt
)Ë
SDPCM_TEST_ECHORSP
;

6166 i‡(
	`dhdsdio_txpkt
(
bus
, 
pkt
, 
SDPCM_TEST_CHANNEL
, 
TRUE
, 
FALSE
) == 0) {

6167 
bus
->
pktgí_£¡
++;

6169 
bus
->
pktgí_Áû
++;

6170 
	`PKTFREE
(
osh
, 
pkt
, 
FALSE
);

6172 
bus
->
pktgí_rcvd
++;

6175 
SDPCM_TEST_ECHORSP
:

6176 i‡(
bus
->
ext_lo›
) {

6177 
	`PKTFREE
(
osh
, 
pkt
, 
FALSE
);

6178 
bus
->
pktgí_rcvd
++;

6182 
off£t
 = 0; off£à< 
Àn
; off£t++, 
d©a
++) {

6183 i‡(*
d©a
 !
	`SDPCM_TEST_FILL
(
off£t
, 
exåa
)) {

6184 
	`DHD_ERROR
(("dhdsdio_testrcv:Écho data mismatch: "

6186 
off£t
, 
Àn
, 
	`SDPCM_TEST_FILL
(off£t, 
exåa
), *
d©a
));

6190 
	`PKTFREE
(
osh
, 
pkt
, 
FALSE
);

6191 
bus
->
pktgí_rcvd
++;

6194 
SDPCM_TEST_DISCARD
:

6196 
i
 = 0;

6197 
uöt8
 *
¥n
 = 
d©a
;

6198 
uöt8
 
ã°vÆ
 = 
exåa
;

6199 
i
 = 0; i < 
Àn
; i++) {

6200 i‡(*
¥n
 !
ã°vÆ
) {

6201 
	`DHD_ERROR
(("DIErr@Pkt#:%d,Ix:%d,Éxpected:0x%x, got:0x%x\n",

6202 
i
, 
bus
->
pktgí_rcvd_rcv£ssi⁄
, 
ã°vÆ
, *
¥n
));

6203 
¥n
++; 
ã°vÆ
++;

6207 
	`PKTFREE
(
osh
, 
pkt
, 
FALSE
);

6208 
bus
->
pktgí_rcvd
++;

6211 
SDPCM_TEST_BURST
:

6212 
SDPCM_TEST_SEND
:

6214 
	`DHD_INFO
(("dhdsdio_testrcv: unsupported or unknown command,Öktlen %d seq %d"

6215 " cmd %dÉxå®%dÜí %d\n", 
pkéí
, 
£q
, 
cmd
, 
exåa
, 
Àn
));

6216 
	`PKTFREE
(
osh
, 
pkt
, 
FALSE
);

6221 i‡(
bus
->
pktgí_mode
 =
DHD_PKTGEN_RECV
) {

6222 i‡(
bus
->
pktgí_rcv_°©e
 !
PKTGEN_RCV_IDLE
) {

6223 
bus
->
pktgí_rcvd_rcv£ssi⁄
++;

6225 i‡(
bus
->
pktgí_tŸÆ
 &&

6226 (
bus
->
pktgí_rcvd_rcv£ssi⁄
 >bus->
pktgí_tŸÆ
)) {

6227 
bus
->
pktgí_cou¡
 = 0;

6228 
	`DHD_ERROR
(("Pktgen:rcvÅest complete!\n"));

6229 
bus
->
pktgí_rcv_°©e
 = 
PKTGEN_RCV_IDLE
;

6230 
	`dhdsdio_sdã°_£t
(
bus
, 
FALSE
);

6231 
bus
->
pktgí_rcvd_rcv£ssi⁄
 = 0;

6235 
	}
}

6239 
	$dhd_dißbÀ_öå
(
dhd_pub_t
 *
dhdp
)

6241 
dhd_bus_t
 *
bus
;

6242 
bus
 = 
dhdp
->bus;

6243 
	`bcmsdh_öå_dißbÀ
(
bus
->
sdh
);

6244 
	}
}

6246 
boﬁ


6247 
	$dhd_bus_w©chdog
(
dhd_pub_t
 *
dhdp
)

6249 
dhd_bus_t
 *
bus
;

6251 
	`DHD_TIMER
(("%s: E¡î\n", 
__FUNCTION__
));

6253 
bus
 = 
dhdp
->bus;

6255 i‡(
bus
->
dhd
->
d⁄gÀ_ª£t
)

6256  
FALSE
;

6259 i‡(!
	`SLPAUTO_ENAB
(
bus
Ë&& bus->
¶ìpög
)

6260  
FALSE
;

6262 i‡(
dhdp
->
bus°©e
 =
DHD_BUS_DOWN
)

6263  
FALSE
;

6266 i‡(!
	`SLPAUTO_ENAB
(
bus
Ë&& (bus->
pﬁl
 && (++bus->
pﬁ…ick
 >bus->
pﬁÃ©e
))) {

6267 
uöt32
 
öt°©us
 = 0;

6270 
bus
->
pﬁ…ick
 = 0;

6273 i‡(!
bus
->
öå
 || (bus->
öåcou¡
 =bus->
œ°öås
)) {

6275 i‡(!
bus
->
dpc_sched
) {

6276 
uöt8
 
dev≥nd
;

6277 
dev≥nd
 = 
	`bcmsdh_cfg_ªad
(
bus
->
sdh
, 
SDIO_FUNC_0
,

6278 
SDIOD_CCCR_INTPEND
, 
NULL
);

6279 
öt°©us
 = 
dev≥nd
 & (
INTR_STATUS_FUNC1
 | 
INTR_STATUS_FUNC2
);

6283 i‡(
öt°©us
) {

6284 
bus
->
pﬁl˙t
++;

6285 
bus
->
ùíd
 = 
TRUE
;

6286 i‡(
bus
->
öå
) {

6287 
	`bcmsdh_öå_dißbÀ
(
bus
->
sdh
);

6289 
bus
->
dpc_sched
 = 
TRUE
;

6290 
	`dhd_sched_dpc
(
bus
->
dhd
);

6296 
bus
->
œ°öås
 = bus->
öåcou¡
;

6299 #ifde‡
DHD_DEBUG


6301 i‡(
dhdp
->
bus°©e
 =
DHD_BUS_DATA
 && 
dhd_c⁄sﬁe_ms
 != 0) {

6302 
bus
->
c⁄sﬁe
.
cou¡
 +
dhd_w©chdog_ms
;

6303 i‡(
bus
->
c⁄sﬁe
.
cou¡
 >
dhd_c⁄sﬁe_ms
) {

6304 
bus
->
c⁄sﬁe
.
cou¡
 -
dhd_c⁄sﬁe_ms
;

6306 i‡(
	`SLPAUTO_ENAB
(
bus
))

6307 
	`dhdsdio_bus¶ìp
(
bus
, 
FALSE
);

6309 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_AVAIL
, 
FALSE
);

6310 i‡(
	`dhdsdio_ªadc⁄sﬁe
(
bus
) < 0)

6311 
dhd_c⁄sﬁe_ms
 = 0;

6316 #ifde‡
SDTEST


6318 i‡(
bus
->
pktgí_cou¡
 && (++bus->
pktgí_tick
 >bus->
pktgí_‰eq
)) {

6320 i‡(
	`SLPAUTO_ENAB
(
bus
))

6321 
	`dhdsdio_bus¶ìp
(
bus
, 
FALSE
);

6323 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_AVAIL
, 
FALSE
);

6324 
bus
->
pktgí_tick
 = 0;

6325 
	`dhdsdio_pktgí
(
bus
);

6330 #ifde‡
DHD_USE_IDLECOUNT


6331 i‡(
bus
->
a˘ivôy
)

6332 
bus
->
a˘ivôy
 = 
FALSE
;

6334 
bus
->
idÀcou¡
++;

6336 i‡(
bus
->
idÀcou¡
 >bus->
idÀtime
) {

6337 
	`DHD_TIMER
(("%s: DHD IdÀ sèã!!\n", 
__FUNCTION__
));

6339 i‡(
	`SLPAUTO_ENAB
(
bus
)) {

6340 i‡(
	`dhdsdio_bus¶ìp
(
bus
, 
TRUE
Ë!
BCME_BUSY
)

6341 
	`dhd_os_wd_timî
(
bus
->
dhd
, 0);

6343 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_NONE
, 
FALSE
);

6345 
bus
->
idÀcou¡
 = 0;

6349 i‡((
bus
->
idÀtime
 > 0Ë&& (bus->
˛k°©e
 =
CLK_AVAIL
)) {

6350 i‡(++
bus
->
idÀcou¡
 > bus->
idÀtime
) {

6351 
bus
->
idÀcou¡
 = 0;

6352 i‡(
bus
->
a˘ivôy
) {

6353 
bus
->
a˘ivôy
 = 
FALSE
;

6354 i‡(
	`SLPAUTO_ENAB
(
bus
)) {

6355 i‡(!
bus
->
ªad‰ames
)

6356 
	`dhdsdio_bus¶ìp
(
bus
, 
TRUE
);

6358 
bus
->
ªqbus¶ìp
 = 
TRUE
;

6361 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_NONE
, 
FALSE
);

6367  
bus
->
ùíd
;

6368 
	}
}

6370 #ifde‡
DHD_DEBUG


6372 
	$dhd_bus_c⁄sﬁe_ö
(
dhd_pub_t
 *
dhdp
, 
uch¨
 *
msg
, 
uöt
 
msgÀn
)

6374 
dhd_bus_t
 *
bus
 = 
dhdp
->bus;

6375 
uöt32
 
addr
, 
vÆ
;

6376 
rv
;

6377 *
pkt
;

6380 i‡(
bus
->
c⁄sﬁe_addr
 == 0)

6381  
BCME_UNSUPPORTED
;

6384 
	`dhd_os_sdlock
(
bus
->
dhd
);

6387 i‡(
bus
->
dhd
->
d⁄gÀ_ª£t
) {

6388 
	`dhd_os_sdu∆ock
(
bus
->
dhd
);

6389  
BCME_NOTREADY
;

6393 
	`BUS_WAKE
(
bus
);

6395 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_AVAIL
, 
FALSE
);

6398 
addr
 = 
bus
->
c⁄sﬁe_addr
 + 
	`OFFSETOF
(
hndπe_c⁄s_t
, 
cbuf_idx
);

6399 
vÆ
 = 
	`htﬁ32
(0);

6400 i‡((
rv
 = 
	`dhdsdio_membyãs
(
bus
, 
TRUE
, 
addr
, (
uöt8
 *)&
vÆ
, (val))) < 0)

6401 
d⁄e
;

6404 
addr
 = 
bus
->
c⁄sﬁe_addr
 + 
	`OFFSETOF
(
hndπe_c⁄s_t
, 
cbuf
);

6405 i‡((
rv
 = 
	`dhdsdio_membyãs
(
bus
, 
TRUE
, 
addr
, (
uöt8
 *)
msg
, 
msgÀn
)) < 0)

6406 
d⁄e
;

6409 
addr
 = 
bus
->
c⁄sﬁe_addr
 + 
	`OFFSETOF
(
hndπe_c⁄s_t
, 
vc⁄s_ö
);

6410 
vÆ
 = 
	`htﬁ32
(
msgÀn
);

6411 i‡((
rv
 = 
	`dhdsdio_membyãs
(
bus
, 
TRUE
, 
addr
, (
uöt8
 *)&
vÆ
, (val))) < 0)

6412 
d⁄e
;

6417 i‡((
pkt
 = 
	`PKTGET
(
bus
->
dhd
->
osh
, 4 + 
SDPCM_RESERVE
, 
TRUE
)Ë!
NULL
)

6418 
	`dhdsdio_txpkt
(
bus
, 
pkt
, 
SDPCM_EVENT_CHANNEL
, 
TRUE
, 
FALSE
);

6420 
d⁄e
:

6421 i‡((
bus
->
idÀtime
 =
DHD_IDLE_IMMEDIATE
Ë&& !bus->
dpc_sched
) {

6422 
bus
->
a˘ivôy
 = 
FALSE
;

6423 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_NONE
, 
TRUE
);

6426 
	`dhd_os_sdu∆ock
(
bus
->
dhd
);

6428  
rv
;

6429 
	}
}

6432 #ifde‡
DHD_DEBUG


6434 
	$dhd_dump_cis
(
uöt
 
‚
, 
uöt8
 *
cis
)

6436 
uöt
 
byã
, 
èg
, 
td©a
;

6437 
	`DHD_INFO
(("Fun˘i⁄ %d CIS:\n", 
‚
));

6439 
td©a
 = 
byã
 = 0; byã < 
SBSDIO_CIS_SIZE_LIMIT
; byte++) {

6440 i‡((
byã
 % 16) == 0)

6441 
	`DHD_INFO
((" "));

6442 
	`DHD_INFO
(("%02x ", 
cis
[
byã
]));

6443 i‡((
byã
 % 16) == 15)

6444 
	`DHD_INFO
(("\n"));

6445 i‡(!
td©a
--) {

6446 
èg
 = 
cis
[
byã
];

6447 i‡(
èg
 == 0xff)

6449 i‡(!
èg
)

6450 
td©a
 = 0;

6451 i‡((
byã
 + 1Ë< 
SBSDIO_CIS_SIZE_LIMIT
)

6452 
td©a
 = 
cis
[
byã
 + 1] + 1;

6454 
	`DHD_INFO
(("]"));

6457 i‡((
byã
 % 16) != 15)

6458 
	`DHD_INFO
(("\n"));

6459 
	}
}

6462 
boﬁ


6463 
	$dhdsdio_chùm©ch
(
uöt16
 
chùid
)

6465 i‡(
chùid
 =
BCM4325_CHIP_ID
)

6466  
TRUE
;

6467 i‡(
chùid
 =
BCM4329_CHIP_ID
)

6468  
TRUE
;

6469 i‡(
chùid
 =
BCM4315_CHIP_ID
)

6470  
TRUE
;

6471 i‡(
chùid
 =
BCM4319_CHIP_ID
)

6472  
TRUE
;

6473 i‡(
chùid
 =
BCM4336_CHIP_ID
)

6474  
TRUE
;

6475 i‡(
chùid
 =
BCM4330_CHIP_ID
)

6476  
TRUE
;

6477 i‡(
chùid
 =
BCM43237_CHIP_ID
)

6478  
TRUE
;

6479 i‡(
chùid
 =
BCM43362_CHIP_ID
)

6480  
TRUE
;

6481 i‡(
chùid
 =
BCM4314_CHIP_ID
)

6482  
TRUE
;

6483 i‡(
chùid
 =
BCM4334_CHIP_ID
)

6484  
TRUE
;

6485 i‡(
chùid
 =
BCM43341_CHIP_ID
)

6486  
TRUE
;

6487 i‡(
chùid
 =
BCM43239_CHIP_ID
)

6488  
TRUE
;

6489 i‡(
chùid
 =
BCM4324_CHIP_ID
)

6490  
TRUE
;

6491 i‡(
chùid
 =
BCM4335_CHIP_ID
)

6492  
TRUE
;

6493  
FALSE
;

6494 
	}
}

6497 
	$dhdsdio_¥obe
(
uöt16
 
víid
, uöt16 
devid
, uöt16 
bus_no
, uöt16 
¶Ÿ
,

6498 
uöt16
 
func
, 
uöt
 
bu°y≥
, *
ªgsva
, 
o¶_t
 * 
osh
, *
sdh
)

6500 
ªt
;

6501 
dhd_bus_t
 *
bus
;

6502 #ifde‡
GET_CUSTOM_MAC_ENABLE


6503 
ëhî_addr
 
ó_addr
;

6506 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 25))

6508 i‡(
	`muãx_is_locked
(&
_dhd_sdio_muãx_lock_
) == 0) {

6509 
	`DHD_ERROR
(("%†:Çÿmuãx hñd. sëÜock\n", 
__FUNCTION__
));

6512 
	`DHD_ERROR
(("%†: muãx i†locked!. waô f‹ u∆ockög\n", 
__FUNCTION__
));

6514 
	`muãx_lock
(&
_dhd_sdio_muãx_lock_
);

6523 
dhd_txbound
 = 
DHD_TXBOUND
;

6524 
dhd_rxbound
 = 
DHD_RXBOUND
;

6525 
dhd_Æign˘l
 = 
TRUE
;

6526 
sd1idÀ
 = 
TRUE
;

6527 
dhd_ªadahód
 = 
TRUE
;

6528 
ªåyd©a
 = 
FALSE
;

6529 
dhd_doÊow
 = 
FALSE
;

6530 
dhd_d⁄gÀ_memsize
 = 0;

6531 
dhd_txmömax
 = 
DHD_TXMINMAX
;

6533 
f‹˚Æign
 = 
TRUE
;

6535 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

6536 
	`DHD_INFO
(("%s: víid 0x%04x devid 0x%04x\n", 
__FUNCTION__
, 
víid
, 
devid
));

6539 
	`ASSERT
((
uöçå
)
ªgsva
 =
SI_ENUM_BASE
);

6546 
víid
) {

6548 
VENDOR_BROADCOM
:

6551 
	`DHD_ERROR
(("%s: unknown vendor: 0x%04x\n",

6552 
__FUNCTION__
, 
víid
));

6553 
f‹˚ªtu∫
;

6557 
devid
) {

6558 
BCM4325_D11DUAL_ID
:

6559 
BCM4325_D11G_ID
:

6560 
BCM4325_D11A_ID
:

6561 
	`DHD_INFO
(("%s: found 4325 D⁄gÀ\n", 
__FUNCTION__
));

6563 
BCM4329_D11N_ID
:

6564 
BCM4329_D11N2G_ID
:

6565 
BCM4329_D11N5G_ID
:

6567 
	`DHD_INFO
(("%s: found 4329 D⁄gÀ\n", 
__FUNCTION__
));

6569 
BCM4315_D11DUAL_ID
:

6570 
BCM4315_D11G_ID
:

6571 
BCM4315_D11A_ID
:

6572 
	`DHD_INFO
(("%s: found 4315 D⁄gÀ\n", 
__FUNCTION__
));

6574 
BCM4319_D11N_ID
:

6575 
BCM4319_D11N2G_ID
:

6576 
BCM4319_D11N5G_ID
:

6577 
	`DHD_INFO
(("%s: found 4319 D⁄gÀ\n", 
__FUNCTION__
));

6580 
	`DHD_INFO
(("%s:állow device id 0, will check chip internals\n",

6581 
__FUNCTION__
));

6585 
	`DHD_ERROR
(("%s: skipping 0x%04x/0x%04x,Çotá dongle\n",

6586 
__FUNCTION__
, 
víid
, 
devid
));

6587 
f‹˚ªtu∫
;

6590 i‡(
osh
 =
NULL
) {

6592 i‡(!(
osh
 = 
	`dhd_o¶_©èch
(
sdh
, 
DHD_BUS
))) {

6593 
	`DHD_ERROR
(("%s: o¶_©èch faûed!\n", 
__FUNCTION__
));

6594 
f‹˚ªtu∫
;

6599 i‡(!(
bus
 = 
	`MALLOC
(
osh
, (
dhd_bus_t
)))) {

6600 
	`DHD_ERROR
(("%s: MALLOC o‡dhd_bus_àÁûed\n", 
__FUNCTION__
));

6601 
Áû
;

6603 
	`bzîo
(
bus
, (
dhd_bus_t
));

6604 
bus
->
sdh
 = sdh;

6605 
bus
->
˛_devid
 = (
uöt16
)
devid
;

6606 
bus
->bu†
DHD_BUS
;

6607 
bus
->
tx_£q
 = 
SDPCM_SEQUENCE_WRAP
 - 1;

6608 
bus
->
u£buÂoﬁ
 = 
FALSE
;

6611 
	`dhd_comm⁄_öô
(
osh
);

6614 i‡(!(
	`dhdsdio_¥obe_©èch
(
bus
, 
osh
, 
sdh
, 
ªgsva
, 
devid
))) {

6615 
	`DHD_ERROR
(("%s: dhdsdio_¥obe_©èch faûed\n", 
__FUNCTION__
));

6616 
Áû
;

6620 i‡(!(
bus
->
dhd
 = 
	`dhd_©èch
(
osh
, bus, 
SDPCM_RESERVE
))) {

6621 
	`DHD_ERROR
(("%s: dhd_©èch faûed\n", 
__FUNCTION__
));

6622 
Áû
;

6626 i‡(!(
	`dhdsdio_¥obe_mÆloc
(
bus
, 
osh
, 
sdh
))) {

6627 
	`DHD_ERROR
(("%s: dhdsdio_¥obe_mÆlo¯Áûed\n", 
__FUNCTION__
));

6628 
Áû
;

6631 i‡(!(
	`dhdsdio_¥obe_öô
(
bus
, 
osh
, 
sdh
))) {

6632 
	`DHD_ERROR
(("%s: dhdsdio_¥obe_öô faûed\n", 
__FUNCTION__
));

6633 
Áû
;

6636 i‡(
bus
->
öå
) {

6638 
	`DHD_INTR
(("%s: dißbÀ SDIO i¡îru±†“Ÿ i¡îe°ed yë)\n", 
__FUNCTION__
));

6639 
	`bcmsdh_öå_dißbÀ
(
sdh
);

6640 i‡((
ªt
 = 
	`bcmsdh_öå_ªg
(
sdh
, 
dhdsdio_i§
, 
bus
)) != 0) {

6641 
	`DHD_ERROR
(("%s: FAILED: bcmsdh_intr_regÑeturned %d\n",

6642 
__FUNCTION__
, 
ªt
));

6643 
Áû
;

6645 
	`DHD_INTR
(("%s:Ñegi°îed SDIO i¡îru± fun˘i⁄ ok\n", 
__FUNCTION__
));

6647 
	`DHD_INFO
(("%s: SDIO interrupt function is NOTÑegistered dueÅoÖolling mode\n",

6648 
__FUNCTION__
));

6651 
	`DHD_INFO
(("%s: com∂ëed!!\n", 
__FUNCTION__
));

6653 #ifde‡
GET_CUSTOM_MAC_ENABLE


6655 
	`mem£t
(&
ó_addr
, 0, (ea_addr));

6656 
ªt
 = 
	`dhd_cu°om_gë_mac_addªss
(
ó_addr
.
o˘ë
);

6657 i‡(!
ªt
) {

6658 
	`mem˝y
(
bus
->
dhd
->
mac
.
o˘ë
, (*)&
ó_addr
, 
ETHER_ADDR_LEN
);

6663 i‡(
dhd_dow∆ﬂd_fw_⁄_drivîlﬂd
) {

6664 i‡((
ªt
 = 
	`dhd_bus_°¨t
(
bus
->
dhd
)) != 0) {

6665 
	`DHD_ERROR
(("%s: dhd_bus_°¨àÁûed\n", 
__FUNCTION__
));

6666 
Áû
;

6670 i‡(
	`dhd_√t_©èch
(
bus
->
dhd
, 0) != 0) {

6671 
	`DHD_ERROR
(("%s: Nëáâach faûed!!\n", 
__FUNCTION__
));

6672 
Áû
;

6676 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 25))

6677 
	`muãx_u∆ock
(&
_dhd_sdio_muãx_lock_
);

6678 
	`DHD_ERROR
(("%†:Åhêlock i†ªÀa£d.\n", 
__FUNCTION__
));

6681  
bus
;

6683 
Áû
:

6684 
	`dhdsdio_ªÀa£
(
bus
, 
osh
);

6686 
f‹˚ªtu∫
:

6687 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 25))

6688 
	`muãx_u∆ock
(&
_dhd_sdio_muãx_lock_
);

6689 
	`DHD_ERROR
(("%†:Åhêlock i†ªÀa£d.\n", 
__FUNCTION__
));

6692  
NULL
;

6693 
	}
}

6695 
boﬁ


6696 
	$dhdsdio_¥obe_©èch
(
dhd_bus
 *
bus
, 
o¶_t
 *
osh
, *
sdh
, *
ªgsva
,

6697 
uöt16
 
devid
)

6699 
îr
 = 0;

6700 
uöt8
 
˛k˘l
 = 0;

6702 
bus
->
Æp_⁄ly
 = 
TRUE
;

6703 
bus
->
sih
 = 
NULL
;

6706 i‡(
	`dhdsdio_£t_süddr_wödow
(
bus
, 
SI_ENUM_BASE
)) {

6707 
	`DHD_ERROR
(("%s: FAILEDÅÿªtu∫ÅÿSI_ENUM_BASE\n", 
__FUNCTION__
));

6710 #ifde‡
DHD_DEBUG


6711 
	`DHD_ERROR
(("F1 signatureÑead @0x18000000=0x%4x\n",

6712 
	`bcmsdh_ªg_ªad
(
bus
->
sdh
, 
SI_ENUM_BASE
, 4)));

6721 
	`bcmsdh_cfg_wrôe
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_CHIPCLKCSR
, 
DHD_INIT_CLKCTL1
, &
îr
);

6722 i‡(!
îr
)

6723 
˛k˘l
 = 
	`bcmsdh_cfg_ªad
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_CHIPCLKCSR
, &
îr
);

6725 i‡(
îr
 || ((
˛k˘l
 & ~
SBSDIO_AVBITS
Ë!
DHD_INIT_CLKCTL1
)) {

6726 
	`DHD_ERROR
(("dhdsdio_probe: ChipClkCSRáccess:Érr %d wrote 0x%02xÑead 0x%02x\n",

6727 
îr
, 
DHD_INIT_CLKCTL1
, 
˛k˘l
));

6728 
Áû
;

6731 #ifde‡
DHD_DEBUG


6732 i‡(
	`DHD_INFO_ON
()) {

6733 
uöt
 
‚
, 
num‚
;

6734 
uöt8
 *
cis
[
SDIOD_MAX_IOFUNCS
];

6735 
îr
 = 0;

6737 
num‚
 = 
	`bcmsdh_quîy_io‚um
(
sdh
);

6738 
	`ASSERT
(
num‚
 <
SDIOD_MAX_IOFUNCS
);

6741 
	`SPINWAIT
(((
˛k˘l
 = 
	`bcmsdh_cfg_ªad
(
sdh
, 
SDIO_FUNC_1
,

6742 
SBSDIO_FUNC1_CHIPCLKCSR
, 
NULL
)),

6743 !
	`SBSDIO_ALPAV
(
˛k˘l
)), 
PMU_MAX_TRANSITION_DLY
);

6746 
	`bcmsdh_cfg_wrôe
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_CHIPCLKCSR
,

6747 
DHD_INIT_CLKCTL2
, &
îr
);

6748 
	`OSL_DELAY
(65);

6750 
‚
 = 0; f¿<
num‚
; fn++) {

6751 i‡(!(
cis
[
‚
] = 
	`MALLOC
(
osh
, 
SBSDIO_CIS_SIZE_LIMIT
))) {

6752 
	`DHD_INFO
(("dhdsdio_¥obe: f¿%d ci†mÆlo¯Áûed\n", 
‚
));

6755 
	`bzîo
(
cis
[
‚
], 
SBSDIO_CIS_SIZE_LIMIT
);

6757 i‡((
îr
 = 
	`bcmsdh_cis_ªad
(
sdh
, 
‚
, 
cis
[‚], 
SBSDIO_CIS_SIZE_LIMIT
))) {

6758 
	`DHD_INFO
(("dhdsdio_¥obe: f¿%d ci†ªadÉº %d\n", 
‚
, 
îr
));

6759 
	`MFREE
(
osh
, 
cis
[
‚
], 
SBSDIO_CIS_SIZE_LIMIT
);

6762 
	`dhd_dump_cis
(
‚
, 
cis
[fn]);

6765 
‚
-- > 0) {

6766 
	`ASSERT
(
cis
[
‚
]);

6767 
	`MFREE
(
osh
, 
cis
[
‚
], 
SBSDIO_CIS_SIZE_LIMIT
);

6770 i‡(
îr
) {

6771 
	`DHD_ERROR
(("dhdsdio_probe: failureÑeading orÖarsing CIS\n"));

6772 
Áû
;

6778 i‡(!(
bus
->
sih
 = 
	`si_©èch
((
uöt
)
devid
, 
osh
, 
ªgsva
, 
DHD_BUS
, 
sdh
,

6779 &
bus
->
v¨s
, &bus->
v¨sz
))) {

6780 
	`DHD_ERROR
(("%s: si_©èch faûed!\n", 
__FUNCTION__
));

6781 
Áû
;

6784 
	`bcmsdh_chùöfo
(
sdh
, 
bus
->
sih
->
chù
, bus->sih->
chùªv
);

6786 i‡(!
	`dhdsdio_chùm©ch
((
uöt16
)
bus
->
sih
->
chù
)) {

6787 
	`DHD_ERROR
(("%s: unsupported chip: 0x%04x\n",

6788 
__FUNCTION__
, 
bus
->
sih
->
chù
));

6789 
Áû
;

6792 i‡(
bus
->
sih
->
busc‹îev
 >= 12)

6793 
	`dhdsdio_˛k_kso_öô
(
bus
);

6795 
bus
->
kso
 = 
TRUE
;

6797 i‡(
	`CST4330_CHIPMODE_SDIOD
(
bus
->
sih
->
chù°
)) {

6800 
	`si_sdiod_drive_°ªngth_öô
(
bus
->
sih
, 
osh
, 
dhd_sdiod_drive_°ªngth
);

6804 i‡(!
	`DHD_NOPMU
(
bus
)) {

6805 i‡((
	`si_£tc‹e
(
bus
->
sih
, 
ARM7S_CORE_ID
, 0)) ||

6806 (
	`si_£tc‹e
(
bus
->
sih
, 
ARMCM3_CORE_ID
, 0)) ||

6807 (
	`si_£tc‹e
(
bus
->
sih
, 
ARMCR4_CORE_ID
, 0))) {

6808 
bus
->
¨mªv
 = 
	`si_c‹îev
(bus->
sih
);

6810 
	`DHD_ERROR
(("%s: faûedÅÿföd ARM c‹e!\n", 
__FUNCTION__
));

6811 
Áû
;

6814 i‡(!
	`si_£tc‹e
(
bus
->
sih
, 
ARMCR4_CORE_ID
, 0)) {

6815 i‡(!(
bus
->
‹ig_ømsize
 = 
	`si_so¸am_size
(bus->
sih
))) {

6816 
	`DHD_ERROR
(("%s: faûedÅÿföd SOCRAM mem‹y!\n", 
__FUNCTION__
));

6817 
Áû
;

6821 i‡(!(
bus
->
‹ig_ømsize
 = 
	`si_tcm_size
(bus->
sih
))) {

6822 
	`DHD_ERROR
(("%s: faûedÅÿföd CR4-TCM mem‹y!\n", 
__FUNCTION__
));

6823 
Áû
;

6826 
bus
->
d⁄gÀ_øm_ba£
 = 
CR4_RAM_BASE
;

6828 
bus
->
ømsize
 = bus->
‹ig_ømsize
;

6829 i‡(
dhd_d⁄gÀ_memsize
)

6830 
	`dhd_d⁄gÀ_£tmemsize
(
bus
, 
dhd_d⁄gÀ_memsize
);

6832 
	`DHD_ERROR
(("DHD: dongleÑam size is setÅo %d(orig %d)\n",

6833 
bus
->
ømsize
, bus->
‹ig_ømsize
));

6835 
bus
->
§memsize
 = 
	`si_so¸am_§mem_size
(bus->
sih
);

6839 i‡(!(
bus
->
ªgs
 = 
	`si_£tc‹e
(bus->
sih
, 
PCMCIA_CORE_ID
, 0)) &&

6840 !(
bus
->
ªgs
 = 
	`si_£tc‹e
(bus->
sih
, 
SDIOD_CORE_ID
, 0))) {

6841 
	`DHD_ERROR
(("%s: faûedÅÿföd SDIODEV c‹e!\n", 
__FUNCTION__
));

6842 
Áû
;

6844 
bus
->
sdpcmªv
 = 
	`si_c‹îev
(bus->
sih
);

6847 
	`OR_REG
(
osh
, &
bus
->
ªgs
->
c‹ec⁄åﬁ
, 
CC_BPRESEN
);

6848 
bus
->
rxöt_mode
 = 
SDIO_DEVICE_HMB_RXINT
;

6850 i‡((
bus
->
sih
->
busc‹ëy≥
 =
SDIOD_CORE_ID
Ë&& (bus->
sdpcmªv
 >= 4) &&

6851 (
bus
->
rxöt_mode
 =
SDIO_DEVICE_RXDATAINT_MODE_1
))

6853 
uöt32
 
vÆ
;

6855 
vÆ
 = 
	`R_REG
(
osh
, &
bus
->
ªgs
->
c‹ec⁄åﬁ
);

6856 
vÆ
 &~
CC_XMTDATAAVAIL_MODE
;

6857 
vÆ
 |
CC_XMTDATAAVAIL_CTRL
;

6858 
	`W_REG
(
osh
, &
bus
->
ªgs
->
c‹ec⁄åﬁ
, 
vÆ
);

6862 
	`pktq_öô
(&
bus
->
txq
, (
PRIOMASK
 + 1), 
QLEN
);

6865 
bus
->
rxhdr
 = (
uöt8
 *)
	`ROUNDUP
((
uöçå
)&bus->
hdrbuf
[0], 
DHD_SDALIGN
);

6868 
bus
->
öå
 = (
boﬁ
)
dhd_öå
;

6869 i‡((
bus
->
pﬁl
 = (
boﬁ
)
dhd_pﬁl
))

6870 
bus
->
pﬁÃ©e
 = 1;

6872 #ifde‡
BCMSDIOH_TXGLOM


6874 
bus
->
glom_mode
 = 
SDPCM_TXGLOM_CPY
;

6876 
bus
->
glomsize
 = 
SDPCM_DEFGLOM_SIZE
;

6879  
TRUE
;

6881 
Áû
:

6882 i‡(
bus
->
sih
 !
NULL
) {

6883 
	`si_dëach
(
bus
->
sih
);

6884 
bus
->
sih
 = 
NULL
;

6886  
FALSE
;

6887 
	}
}

6889 
boﬁ


6890 
	$dhdsdio_¥obe_mÆloc
(
dhd_bus_t
 *
bus
, 
o¶_t
 *
osh
, *
sdh
)

6892 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

6894 i‡(
bus
->
dhd
->
max˘l
) {

6895 
bus
->
rxbÀn
 = 
	`ROUNDUP
((bus->
dhd
->
max˘l
 + 
SDPCM_HDRLEN
), 
ALIGNMENT
Ë+ 
DHD_SDALIGN
;

6896 i‡(!(
bus
->
rxbuf
 = 
	`DHD_OS_PREALLOC
(
osh
, 
DHD_PREALLOC_RXBUF
, bus->
rxbÀn
))) {

6897 
	`DHD_ERROR
(("%s: MALLOC of %d-byteÑxbuf failed\n",

6898 
__FUNCTION__
, 
bus
->
rxbÀn
));

6899 
Áû
;

6903 i‡(!(
bus
->
d©abuf
 = 
	`DHD_OS_PREALLOC
(
osh
, 
DHD_PREALLOC_DATABUF
, 
MAX_DATA_BUF
))) {

6904 
	`DHD_ERROR
(("%s: MALLOC of %d-byte databuf failed\n",

6905 
__FUNCTION__
, 
MAX_DATA_BUF
));

6907 i‡(!
bus
->
rxbÀn
)

6908 
	`DHD_OS_PREFREE
(
osh
, 
bus
->
rxbuf
, bus->
rxbÀn
);

6909 
Áû
;

6913 i‡((
uöçå
)
bus
->
d©abuf
 % 
DHD_SDALIGN
)

6914 
bus
->
d©≠å
 = bus->
d©abuf
 + (
DHD_SDALIGN
 - ((
uöçå
)bus->databuf % DHD_SDALIGN));

6916 
bus
->
d©≠å
 = bus->
d©abuf
;

6918  
TRUE
;

6920 
Áû
:

6921  
FALSE
;

6922 
	}
}

6924 
boﬁ


6925 
	$dhdsdio_¥obe_öô
(
dhd_bus_t
 *
bus
, 
o¶_t
 *
osh
, *
sdh
)

6927 
öt32
 
‚um
;

6929 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

6931 #ifde‡
SDTEST


6932 
	`dhdsdio_pktgí_öô
(
bus
);

6936 
	`bcmsdh_cfg_wrôe
(
sdh
, 
SDIO_FUNC_0
, 
SDIOD_CCCR_IOEN
, 
SDIO_FUNC_ENABLE_1
, 
NULL
);

6938 
bus
->
dhd
->
bus°©e
 = 
DHD_BUS_DOWN
;

6939 
bus
->
¶ìpög
 = 
FALSE
;

6940 
bus
->
rxÊow
 = 
FALSE
;

6941 
bus
->
¥ev_rxlim_hô
 = 0;

6944 
	`bcmsdh_cfg_wrôe
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_CHIPCLKCSR
, 0, 
NULL
);

6947 
bus
->
˛k°©e
 = 
CLK_SDONLY
;

6948 
bus
->
idÀtime
 = (
öt32
)
dhd_idÀtime
;

6949 
bus
->
idÀ˛ock
 = 
DHD_IDLE_ACTIVE
;

6952 i‡(
	`bcmsdh_iov¨_›
(
sdh
, "sd_divis‹", 
NULL
, 0,

6953 &
bus
->
sd_divis‹
, (
öt32
), 
FALSE
Ë!
BCME_OK
) {

6954 
	`DHD_ERROR
(("%s: faû o¿%†gë\n", 
__FUNCTION__
, "sd_divisor"));

6955 
bus
->
sd_divis‹
 = -1;

6957 
	`DHD_INFO
(("%s: Initial value for %s is %d\n",

6958 
__FUNCTION__
, "sd_divis‹", 
bus
->
sd_divis‹
));

6962 i‡(
	`bcmsdh_iov¨_›
(
sdh
, "sd_mode", 
NULL
, 0,

6963 &
bus
->
sd_mode
, (
öt32
), 
FALSE
Ë!
BCME_OK
) {

6964 
	`DHD_ERROR
(("%s: faû o¿%†gë\n", 
__FUNCTION__
, "sd_mode"));

6965 
bus
->
sd_mode
 = -1;

6967 
	`DHD_INFO
(("%s: Initial value for %s is %d\n",

6968 
__FUNCTION__
, "sd_mode", 
bus
->
sd_mode
));

6972 
‚um
 = 2;

6973 i‡(
	`bcmsdh_iov¨_›
(
sdh
, "sd_blocksize", &
‚um
, (
öt32
),

6974 &
bus
->
blocksize
, (
öt32
), 
FALSE
Ë!
BCME_OK
) {

6975 
bus
->
blocksize
 = 0;

6976 
	`DHD_ERROR
(("%s: faû o¿%†gë\n", 
__FUNCTION__
, "sd_blocksize"));

6978 
	`DHD_INFO
(("%s: Initial value for %s is %d\n",

6979 
__FUNCTION__
, "sd_blocksize", 
bus
->
blocksize
));

6981 
bus
->
roundup
 = 
	`MIN
(
max_roundup
, bus->
blocksize
);

6984 i‡(
	`bcmsdh_iov¨_›
(
sdh
, "sd_rxchaö", 
NULL
, 0,

6985 &
bus
->
sd_rxchaö
, (
öt32
), 
FALSE
Ë!
BCME_OK
) {

6986 
bus
->
sd_rxchaö
 = 
FALSE
;

6988 
	`DHD_INFO
(("%s: bus module (through bcmsdh API) %s chaining\n",

6989 
__FUNCTION__
, (
bus
->
sd_rxchaö
 ? "supports" : "doesÇot support")));

6991 
bus
->
u£_rxchaö
 = (
boﬁ
)bus->
sd_rxchaö
;

6993  
TRUE
;

6994 
	}
}

6996 
boﬁ


6997 
	$dhd_bus_dow∆ﬂd_fúmw¨e
(
dhd_bus
 *
bus
, 
o¶_t
 *
osh
,

6998 *
pfw_∑th
, *
≤v_∑th
)

7000 
boﬁ
 
ªt
;

7001 
bus
->
fw_∑th
 = 
pfw_∑th
;

7002 
bus
->
nv_∑th
 = 
≤v_∑th
;

7004 
ªt
 = 
	`dhdsdio_dow∆ﬂd_fúmw¨e
(
bus
, 
osh
, bus->
sdh
);

7007  
ªt
;

7008 
	}
}

7010 
boﬁ


7011 
	$dhdsdio_dow∆ﬂd_fúmw¨e
(
dhd_bus
 *
bus
, 
o¶_t
 *
osh
, *
sdh
)

7013 
boﬁ
 
ªt
;

7015 
	`DHD_OS_WAKE_LOCK
(
bus
->
dhd
);

7018 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_AVAIL
, 
FALSE
);

7020 
ªt
 = 
	`_dhdsdio_dow∆ﬂd_fúmw¨e
(
bus
) == 0;

7022 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_SDONLY
, 
FALSE
);

7024 
	`DHD_OS_WAKE_UNLOCK
(
bus
->
dhd
);

7025  
ªt
;

7026 
	}
}

7030 
	$dhdsdio_ªÀa£
(
dhd_bus_t
 *
bus
, 
o¶_t
 *
osh
)

7032 
boﬁ
 
d⁄gÀ_isﬁ©i⁄
 = 
FALSE
;

7033 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

7035 i‡(
bus
) {

7036 
	`ASSERT
(
osh
);

7038 i‡(
bus
->
dhd
) {

7039 
d⁄gÀ_isﬁ©i⁄
 = 
bus
->
dhd
->dongle_isolation;

7040 
	`dhd_dëach
(
bus
->
dhd
);

7044 
	`bcmsdh_öå_dißbÀ
(
bus
->
sdh
);

7045 
	`bcmsdh_öå_dîeg
(
bus
->
sdh
);

7047 i‡(
bus
->
dhd
) {

7048 
	`dhdsdio_ªÀa£_d⁄gÀ
(
bus
, 
osh
, 
d⁄gÀ_isﬁ©i⁄
, 
TRUE
);

7049 
	`dhd_‰ì
(
bus
->
dhd
);

7050 
bus
->
dhd
 = 
NULL
;

7053 
	`dhdsdio_ªÀa£_mÆloc
(
bus
, 
osh
);

7055 #ifde‡
DHD_DEBUG


7056 i‡(
bus
->
c⁄sﬁe
.
buf
 !
NULL
)

7057 
	`MFREE
(
osh
, 
bus
->
c⁄sﬁe
.
buf
, bus->c⁄sﬁe.
bufsize
);

7060 
	`MFREE
(
osh
, 
bus
, (
dhd_bus_t
));

7063 i‡(
osh
)

7064 
	`dhd_o¶_dëach
(
osh
);

7066 
	`DHD_TRACE
(("%s: Disc⁄√˘ed\n", 
__FUNCTION__
));

7067 
	}
}

7070 
	$dhdsdio_ªÀa£_mÆloc
(
dhd_bus_t
 *
bus
, 
o¶_t
 *
osh
)

7072 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

7074 i‡(
bus
->
dhd
 && bus->dhd->
d⁄gÀ_ª£t
)

7077 i‡(
bus
->
rxbuf
) {

7078 #i‚de‡
CONFIG_DHD_USE_STATIC_BUF


7079 
	`MFREE
(
osh
, 
bus
->
rxbuf
, bus->
rxbÀn
);

7081 
bus
->
rx˘l
 = bus->
rxbuf
 = 
NULL
;

7082 
bus
->
rxÀn
 = 0;

7085 i‡(
bus
->
d©abuf
) {

7086 #i‚de‡
CONFIG_DHD_USE_STATIC_BUF


7087 
	`MFREE
(
osh
, 
bus
->
d©abuf
, 
MAX_DATA_BUF
);

7089 
bus
->
d©abuf
 = 
NULL
;

7092 i‡(
bus
->
v¨s
 && bus->
v¨sz
) {

7093 
	`MFREE
(
osh
, 
bus
->
v¨s
, bus->
v¨sz
);

7094 
bus
->
v¨s
 = 
NULL
;

7097 
	}
}

7101 
	$dhdsdio_ªÀa£_d⁄gÀ
(
dhd_bus_t
 *
bus
, 
o¶_t
 *
osh
, 
boﬁ
 
d⁄gÀ_isﬁ©i⁄
, boﬁ 
ª£t_Êag
)

7103 
	`DHD_TRACE
(("%s: E¡î bus->dhd %∞bus->dhd->d⁄gÀ_ª£à%d \n", 
__FUNCTION__
,

7104 
bus
->
dhd
, bus->dhd->
d⁄gÀ_ª£t
));

7106 i‡((
bus
->
dhd
 && bus->dhd->
d⁄gÀ_ª£t
Ë&& 
ª£t_Êag
)

7109 i‡(
bus
->
sih
) {

7110 #i‡!
	`deföed
(
BCMLXSDMMC
)

7111 i‡(
bus
->
dhd
) {

7112 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_AVAIL
, 
FALSE
);

7114 i‡(
	`KSO_ENAB
(
bus
Ë&& (
d⁄gÀ_isﬁ©i⁄
 =
FALSE
))

7115 
	`si_w©chdog
(
bus
->
sih
, 4);

7117 i‡(
bus
->
dhd
) {

7118 
	`dhdsdio_˛k˘l
(
bus
, 
CLK_NONE
, 
FALSE
);

7120 
	`si_dëach
(
bus
->
sih
);

7121 
bus
->
sih
 = 
NULL
;

7122 i‡(
bus
->
v¨s
 && bus->
v¨sz
)

7123 
	`MFREE
(
osh
, 
bus
->
v¨s
, bus->
v¨sz
);

7124 
bus
->
v¨s
 = 
NULL
;

7127 
	`DHD_TRACE
(("%s: Disc⁄√˘ed\n", 
__FUNCTION__
));

7128 
	}
}

7131 
	$dhdsdio_disc⁄√˘
(*
±r
)

7133 
dhd_bus_t
 *
bus
 = (dhd_bus_à*)
±r
;

7135 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 25))

7137 i‡(
	`muãx_is_locked
(&
_dhd_sdio_muãx_lock_
) == 0) {

7138 
	`DHD_ERROR
(("%†:Çÿmuãx hñd. sëÜock\n", 
__FUNCTION__
));

7141 
	`DHD_ERROR
(("%†: muãx i†locked!. waô f‹ u∆ockög\n", 
__FUNCTION__
));

7143 
	`muãx_lock
(&
_dhd_sdio_muãx_lock_
);

7146 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

7148 i‡(
bus
) {

7149 
	`ASSERT
(
bus
->
dhd
);

7150 
	`dhdsdio_ªÀa£
(
bus
, bus->
dhd
->
osh
);

7153 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 25))

7154 
	`muãx_u∆ock
(&
_dhd_sdio_muãx_lock_
);

7155 
	`DHD_ERROR
(("%†:Åhêlock i†ªÀa£d.\n", 
__FUNCTION__
));

7158 
	`DHD_TRACE
(("%s: Disc⁄√˘ed\n", 
__FUNCTION__
));

7159 
	}
}

7167 
bcmsdh_drivî_t
 
dhd_sdio
 = {

7168 
dhdsdio_¥obe
,

7169 
dhdsdio_disc⁄√˘


7173 
	$dhd_bus_ªgi°î
()

7175 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

7177  
	`bcmsdh_ªgi°î
(&
dhd_sdio
);

7178 
	}
}

7181 
	$dhd_bus_uƒegi°î
()

7183 
	`DHD_TRACE
(("%s: E¡î\n", 
__FUNCTION__
));

7185 
	`bcmsdh_uƒegi°î
();

7186 
	}
}

7188 #i‡
deföed
(
BCMLXSDMMC
)

7190 
	$dhd_bus_ªg_sdio_nŸify
(* 
£m≠h‹e
)

7192  
	`bcmsdh_ªg_sdio_nŸify
(
£m≠h‹e
);

7193 
	}
}

7195 
	$dhd_bus_uƒeg_sdio_nŸify
()

7197 
	`bcmsdh_uƒeg_sdio_nŸify
();

7198 
	}
}

7201 #ifde‡
BCMEMBEDIMAGE


7203 
	$dhdsdio_dow∆ﬂd_code_¨øy
(
dhd_bus
 *
bus
)

7205 
bcmîr‹
 = -1;

7206 
off£t
 = 0;

7207 *
uœºay
 = 
NULL
;

7209 
	`DHD_INFO
(("%s: dow∆ﬂdÉmbedded fúmw¨e...\n", 
__FUNCTION__
));

7212 (
off£t
 + 
MEMBLOCK
Ë< (
dœºay
)) {

7213 
bcmîr‹
 = 
	`dhdsdio_membyãs
(
bus
, 
TRUE
, 
off£t
,

7214 (
uöt8
 *Ë(
dœºay
 + 
off£t
), 
MEMBLOCK
);

7215 i‡(
bcmîr‹
) {

7216 
	`DHD_ERROR
(("%s:Érror %d on writing %d membytesát 0x%08x\n",

7217 
__FUNCTION__
, 
bcmîr‹
, 
MEMBLOCK
, 
off£t
));

7218 
îr
;

7221 
off£t
 +
MEMBLOCK
;

7224 i‡(
off£t
 < (
dœºay
)) {

7225 
bcmîr‹
 = 
	`dhdsdio_membyãs
(
bus
, 
TRUE
, 
off£t
,

7226 (
uöt8
 *Ë(
dœºay
 + 
off£t
), (dlarray) - offset);

7227 i‡(
bcmîr‹
) {

7228 
	`DHD_ERROR
(("%s:Érror %d on writing %d membytesát 0x%08x\n",

7229 
__FUNCTION__
, 
bcmîr‹
, (
dœºay
Ë- 
off£t
, offset));

7230 
îr
;

7234 #ifde‡
DHD_DEBUG


7237 
uœºay
 = 
	`MALLOC
(
bus
->
dhd
->
osh
, bus->
ømsize
);

7239 
off£t
 = 0;

7240 
	`mem£t
(
uœºay
, 0xØ, 
bus
->
ømsize
);

7241 (
off£t
 + 
MEMBLOCK
Ë< (
dœºay
)) {

7242 
bcmîr‹
 = 
	`dhdsdio_membyãs
(
bus
, 
FALSE
, 
off£t
, 
uœºay
 + off£t, 
MEMBLOCK
);

7243 i‡(
bcmîr‹
) {

7244 
	`DHD_ERROR
(("%s:Érror %d onÑeading %d membytesát 0x%08x\n",

7245 
__FUNCTION__
, 
bcmîr‹
, 
MEMBLOCK
, 
off£t
));

7246 
îr
;

7249 
off£t
 +
MEMBLOCK
;

7252 i‡(
off£t
 < (
dœºay
)) {

7253 
bcmîr‹
 = 
	`dhdsdio_membyãs
(
bus
, 
FALSE
, 
off£t
,

7254 
uœºay
 + 
off£t
, (
dœºay
) - offset);

7255 i‡(
bcmîr‹
) {

7256 
	`DHD_ERROR
(("%s:Érror %d onÑeading %d membytesát 0x%08x\n",

7257 
__FUNCTION__
, 
bcmîr‹
, (
dœºay
Ë- 
off£t
, offset));

7258 
îr
;

7262 i‡(
	`memcmp
(
dœºay
, 
uœºay
, (dlarray))) {

7263 
	`DHD_ERROR
(("%s: Downloaded image is corrupted (%s, %s, %s).\n",

7264 
__FUNCTION__
, 
dlimagíame
, 
dlimagevî
, 
dlimaged©e
));

7265 
îr
;

7267 
	`DHD_ERROR
(("%s: Download, Uploadánd compare succeeded (%s, %s, %s).\n",

7268 
__FUNCTION__
, 
dlimagíame
, 
dlimagevî
, 
dlimaged©e
));

7273 
îr
:

7274 i‡(
uœºay
)

7275 
	`MFREE
(
bus
->
dhd
->
osh
, 
uœºay
, bus->
ømsize
);

7276  
bcmîr‹
;

7277 
	}
}

7281 
	$dhdsdio_dow∆ﬂd_code_fûe
(
dhd_bus
 *
bus
, *
pfw_∑th
)

7283 
bcmîr‹
 = -1;

7284 
off£t
 = 0;

7285 
Àn
;

7286 *
image
 = 
NULL
;

7287 
uöt8
 *
memblock
 = 
NULL
, *
mem±r
;

7289 
	`DHD_INFO
(("%s: dow∆ﬂd fúmw¨ê%s\n", 
__FUNCTION__
, 
pfw_∑th
));

7291 
image
 = 
	`dhd_os_›í_image
(
pfw_∑th
);

7292 i‡(
image
 =
NULL
)

7293 
îr
;

7295 
mem±r
 = 
memblock
 = 
	`MALLOC
(
bus
->
dhd
->
osh
, 
MEMBLOCK
 + 
DHD_SDALIGN
);

7296 i‡(
memblock
 =
NULL
) {

7297 
	`DHD_ERROR
(("%s: FaûedÅÿÆloˇã mem‹y %d byãs\n", 
__FUNCTION__
, 
MEMBLOCK
));

7298 
îr
;

7300 i‡((
uöt32
)(
uöçå
)
memblock
 % 
DHD_SDALIGN
)

7301 
mem±r
 +(
DHD_SDALIGN
 - ((
uöt32
)(
uöçå
)
memblock
 % DHD_SDALIGN));

7304 #ifde‡
_USI_NVRAM_FILE


7306 
ªt
 = -1;

7307 *
¥iv
;

7309 
ªt
 = 
	`ug_fw_¥ï¨e
(
bus
->
sdh
, bus->
dhd
->
osh
, 
mem±r
, 
MEMBLOCK
, bus->
ømsize
, 
image
, &
¥iv
);

7310 i‡–
ªt
 < 0 ) {

7311 
	`DHD_ERROR
(("%s:Öª∑ª F/W faûÑë=%d\n", 
__FUNCTION__
, 
ªt
));

7312 
îr
;

7316 
bcmîr‹
 = 
	`ug_fw_dow∆ﬂd
(
mem±r
, 
MEMBLOCK
, (
fun˝å
)
dhdsdio_membyãs
, (*)
bus
, 
¥iv
);

7318 i‡(
bcmîr‹
 < 0)

7319 
	`DHD_ERROR
(("%s: bcmîr‹=%d\n", 
__FUNCTION__
, 
bcmîr‹
));

7321 
ªt
 = 
	`ug_fw_˛o£
(
bus
->
dhd
->
osh
, 
¥iv
);

7324 (
Àn
 = 
	`dhd_os_gë_image_block
((*)
mem±r
, 
MEMBLOCK
, 
image
))) {

7325 i‡(
Àn
 < 0) {

7326 
	`DHD_ERROR
(("%s: dhd_os_gë_image_block faûed (%d)\n", 
__FUNCTION__
, 
Àn
));

7327 
bcmîr‹
 = 
BCME_ERROR
;

7328 
îr
;

7330 
bcmîr‹
 = 
	`dhdsdio_membyãs
(
bus
, 
TRUE
, 
off£t
, 
mem±r
, 
Àn
);

7331 i‡(
bcmîr‹
) {

7332 
	`DHD_ERROR
(("%s:Érror %d on writing %d membytesát 0x%08x\n",

7333 
__FUNCTION__
, 
bcmîr‹
, 
MEMBLOCK
, 
off£t
));

7334 
îr
;

7337 
off£t
 +
MEMBLOCK
;

7341 
îr
:

7342 i‡(
memblock
)

7343 
	`MFREE
(
bus
->
dhd
->
osh
, 
memblock
, 
MEMBLOCK
 + 
DHD_SDALIGN
);

7345 i‡(
image
)

7346 
	`dhd_os_˛o£_image
(
image
);

7348  
bcmîr‹
;

7349 
	}
}

7366 
	$dhd_bus_£t_nvøm_∑øms
(
dhd_bus
 * 
bus
, c⁄° *
nvøm_∑øms
)

7368 
bus
->
nvøm_∑øms
 =Çvram_params;

7369 
	}
}

7372 
	$dhdsdio_dow∆ﬂd_nvøm
(
dhd_bus
 *
bus
)

7374 
bcmîr‹
 = -1;

7375 
uöt
 
Àn
;

7376 * 
image
 = 
NULL
;

7377 * 
memblock
 = 
NULL
;

7378 *
buÂ
;

7379 *
≤v_∑th
;

7380 
boﬁ
 
nvøm_fûe_exi°s
;

7382 
≤v_∑th
 = 
bus
->
nv_∑th
;

7384 
nvøm_fûe_exi°s
 = ((
≤v_∑th
 !
NULL
) && (pnv_path[0] != '\0'));

7385 i‡(!
nvøm_fûe_exi°s
 && (
bus
->
nvøm_∑øms
 =
NULL
))

7388 i‡(
nvøm_fûe_exi°s
) {

7389 
image
 = 
	`dhd_os_›í_image
(
≤v_∑th
);

7390 i‡(
image
 =
NULL
)

7391 
îr
;

7394 
memblock
 = 
	`MALLOC
(
bus
->
dhd
->
osh
, 
MAX_NVRAMBUF_SIZE
);

7395 i‡(
memblock
 =
NULL
) {

7396 
	`DHD_ERROR
(("%s: FailedÅoállocate memory %d bytes\n",

7397 
__FUNCTION__
, 
MAX_NVRAMBUF_SIZE
));

7398 
îr
;

7402 i‡(
nvøm_fûe_exi°s
) {

7403 
Àn
 = 
	`dhd_os_gë_image_block
(
memblock
, 
MAX_NVRAMBUF_SIZE
, 
image
);

7406 
Àn
 = 
	`°æí
(
bus
->
nvøm_∑øms
);

7407 
	`ASSERT
(
Àn
 <
MAX_NVRAMBUF_SIZE
);

7408 
	`mem˝y
(
memblock
, 
bus
->
nvøm_∑øms
, 
Àn
);

7410 #ifde‡
_USI_NVRAM_FILE


7412 
ªt
 = 0;

7413 
ªt
 = 
	`ug_nvøm
(
bus
->
sdh
, bus->
dhd
->
osh
, 
memblock
, 
Àn
);

7414 #ifde‡
DHD_DEBUG


7415 
	`DHD_ERROR
 (("%s:Ñë=%d\n", 
__FUNCTION__
, 
ªt
));

7419 i‡(
Àn
 > 0 &&Üí < 
MAX_NVRAMBUF_SIZE
) {

7420 
buÂ
 = (*)
memblock
;

7421 
buÂ
[
Àn
] = 0;

7422 
Àn
 = 
	`¥o˚ss_nvøm_v¨s
(
buÂ
,Üen);

7423 i‡(
Àn
 % 4) {

7424 
Àn
 += 4 - (len % 4);

7426 
buÂ
 +
Àn
;

7427 *
buÂ
++ = 0;

7428 i‡(
Àn
)

7429 
bcmîr‹
 = 
	`dhdsdio_dow∆ﬂdv¨s
(
bus
, 
memblock
, 
Àn
 + 1);

7430 i‡(
bcmîr‹
) {

7431 
	`DHD_ERROR
(("%s:Érror downloading vars: %d\n",

7432 
__FUNCTION__
, 
bcmîr‹
));

7436 
	`DHD_ERROR
(("%s:ÉrrorÑeadingÇvram file: %d\n",

7437 
__FUNCTION__
, 
Àn
));

7438 
bcmîr‹
 = 
BCME_SDIO_ERROR
;

7441 
îr
:

7442 i‡(
memblock
)

7443 
	`MFREE
(
bus
->
dhd
->
osh
, 
memblock
, 
MAX_NVRAMBUF_SIZE
);

7445 i‡(
image
)

7446 
	`dhd_os_˛o£_image
(
image
);

7448  
bcmîr‹
;

7449 
	}
}

7452 
	$_dhdsdio_dow∆ﬂd_fúmw¨e
(
dhd_bus
 *
bus
)

7454 
bcmîr‹
 = -1;

7456 
boﬁ
 
embed
 = 
FALSE
;

7457 
boﬁ
 
dlok
 = 
FALSE
;

7460 i‡((
bus
->
fw_∑th
 =
NULL
) || (bus->fw_path[0] == '\0')) {

7461 #ifde‡
BCMEMBEDIMAGE


7462 
embed
 = 
TRUE
;

7469 i‡(
	`dhdsdio_dow∆ﬂd_°©e
(
bus
, 
TRUE
)) {

7470 
	`DHD_ERROR
(("%s:Éº‹Öœcög ARM c‹êöÑe£t\n", 
__FUNCTION__
));

7471 
îr
;

7475 i‡((
bus
->
fw_∑th
 !
NULL
) && (bus->fw_path[0] != '\0')) {

7476 i‡(
	`dhdsdio_dow∆ﬂd_code_fûe
(
bus
, bus->
fw_∑th
)) {

7477 
	`DHD_ERROR
(("%s: d⁄gÀ imagêfûêdow∆ﬂd faûed\n", 
__FUNCTION__
));

7478 #ifde‡
BCMEMBEDIMAGE


7479 
embed
 = 
TRUE
;

7481 
îr
;

7485 
embed
 = 
FALSE
;

7486 
dlok
 = 
TRUE
;

7489 #ifde‡
BCMEMBEDIMAGE


7490 i‡(
embed
) {

7491 i‡(
	`dhdsdio_dow∆ﬂd_code_¨øy
(
bus
)) {

7492 
	`DHD_ERROR
(("%s: d⁄gÀ imagê¨øy dow∆ﬂd faûed\n", 
__FUNCTION__
));

7493 
îr
;

7496 
dlok
 = 
TRUE
;

7500 
	`BCM_REFERENCE
(
embed
);

7502 i‡(!
dlok
) {

7503 
	`DHD_ERROR
(("%s: d⁄gÀ imagêdow∆ﬂd faûed\n", 
__FUNCTION__
));

7504 
îr
;

7512 i‡(
	`dhdsdio_dow∆ﬂd_nvøm
(
bus
)) {

7513 
	`DHD_ERROR
(("%s: d⁄gÀÇvøm fûêdow∆ﬂd faûed\n", 
__FUNCTION__
));

7514 
îr
;

7518 i‡(
	`dhdsdio_dow∆ﬂd_°©e
(
bus
, 
FALSE
)) {

7519 
	`DHD_ERROR
(("%s:Éº‹ gëtög ouào‡ARM c‹êª£t\n", 
__FUNCTION__
));

7520 
îr
;

7523 
bcmîr‹
 = 0;

7525 
îr
:

7526  
bcmîr‹
;

7527 
	}
}

7530 
	$dhd_bcmsdh_ªcv_buf
(
dhd_bus_t
 *
bus
, 
uöt32
 
addr
, 
uöt
 
‚
, uöà
Êags
, 
uöt8
 *
buf
, uöà
nbyãs
,

7531 *
pkt
, 
bcmsdh_cm∂t_‚_t
 
com∂ëe
, *
h™dÀ
)

7533 
°©us
;

7535 i‡(!
	`KSO_ENAB
(
bus
)) {

7536 
	`DHD_ERROR
(("%s: Devi˚á¶ìp\n", 
__FUNCTION__
));

7537  
BCME_NODEVICE
;

7540 
°©us
 = 
	`bcmsdh_ªcv_buf
(
bus
->
sdh
, 
addr
, 
‚
, 
Êags
, 
buf
, 
nbyãs
, 
pkt
, 
com∂ëe
, 
h™dÀ
);

7542  
°©us
;

7543 
	}
}

7546 
	$dhd_bcmsdh_£nd_buf
(
dhd_bus_t
 *
bus
, 
uöt32
 
addr
, 
uöt
 
‚
, uöà
Êags
, 
uöt8
 *
buf
, uöà
nbyãs
,

7547 *
pkt
, 
bcmsdh_cm∂t_‚_t
 
com∂ëe
, *
h™dÀ
)

7549 i‡(!
	`KSO_ENAB
(
bus
)) {

7550 
	`DHD_ERROR
(("%s: Devi˚á¶ìp\n", 
__FUNCTION__
));

7551  
BCME_NODEVICE
;

7554  (
	`bcmsdh_£nd_buf
(
bus
->
sdh
, 
addr
, 
‚
, 
Êags
, 
buf
, 
nbyãs
, 
pkt
, 
com∂ëe
, 
h™dÀ
));

7555 
	}
}

7557 #ifde‡
BCMSDIOH_TXGLOM


7559 
	$dhd_bcmsdh_glom_po°
(
dhd_bus_t
 *
bus
, 
uöt8
 *
‰ame
, 
uöt
 
Àn
)

7561 
	`bcmsdh_glom_po°
(
bus
->
sdh
, 
‰ame
, 
Àn
);

7562 
	}
}

7565 
	$dhd_bcmsdh_glom_˛ór
(
dhd_bus_t
 *
bus
)

7567 
	`bcmsdh_glom_˛ór
(
bus
->
sdh
);

7568 
	}
}

7571 
uöt


7572 
	$dhd_bus_chù
(
dhd_bus
 *
bus
)

7574 
	`ASSERT
(
bus
->
sih
 !
NULL
);

7575  
bus
->
sih
->
chù
;

7576 
	}
}

7579 
	$dhd_bus_pub
(
dhd_bus
 *
bus
)

7581  
bus
->
dhd
;

7582 
	}
}

7585 
	$dhd_bus_txq
(
dhd_bus
 *
bus
)

7587  &
bus
->
txq
;

7588 
	}
}

7590 
uöt


7591 
	$dhd_bus_hdæí
(
dhd_bus
 *
bus
)

7593  
SDPCM_HDRLEN
;

7594 
	}
}

7597 
	$dhd_bus_devª£t
(
dhd_pub_t
 *
dhdp
, 
uöt8
 
Êag
)

7599 
bcmîr‹
 = 0;

7600 
dhd_bus_t
 *
bus
;

7602 
bus
 = 
dhdp
->bus;

7604 i‡(
Êag
 =
TRUE
) {

7605 i‡(!
bus
->
dhd
->
d⁄gÀ_ª£t
) {

7606 
	`dhd_os_sdlock
(
dhdp
);

7607 
	`dhd_os_wd_timî
(
dhdp
, 0);

7608 #i‡!
	`deföed
(
IGNORE_ETH0_DOWN
)

7610 
	`dhd_txÊowc⁄åﬁ
(
bus
->
dhd
, 
ALL_INTERFACES
, 
ON
);

7614 
	`dhd_bus_°›
(
bus
, 
FALSE
);

7616 #i‡
	`deföed
(
OOB_INTR_ONLY
)

7618 
	`bcmsdh_£t_úq
(
FALSE
);

7622 
	`dhdsdio_ªÀa£_d⁄gÀ
(
bus
, bus->
dhd
->
osh
, 
TRUE
, TRUE);

7624 
bus
->
dhd
->
d⁄gÀ_ª£t
 = 
TRUE
;

7625 
bus
->
dhd
->
up
 = 
FALSE
;

7626 #ifde‡
BCMSDIOH_TXGLOM


7627 
	`dhd_txglom_íabÀ
(
dhdp
, 
FALSE
);

7629 
	`dhd_os_sdu∆ock
(
dhdp
);

7631 
	`DHD_TRACE
(("%s: WLAN OFF DONE\n", 
__FUNCTION__
));

7634 
bcmîr‹
 = 
BCME_SDIO_ERROR
;

7638 
	`DHD_TRACE
(("\n\n%s: =WLAN ON ==\n", 
__FUNCTION__
));

7640 i‡(
bus
->
dhd
->
d⁄gÀ_ª£t
) {

7642 #ifde‡
DHDTHREAD


7643 
	`dhd_os_sdlock
(
dhdp
);

7646 
	`bcmsdh_ª£t
(
bus
->
sdh
);

7649 i‡(
	`dhdsdio_¥obe_©èch
(
bus
, bus->
dhd
->
osh
, bus->
sdh
,

7650 (
uöt32
 *)
SI_ENUM_BASE
,

7651 
bus
->
˛_devid
)) {

7653 i‡(
	`dhdsdio_¥obe_öô
(
bus
, bus->
dhd
->
osh
, bus->
sdh
) &&

7654 
	`dhdsdio_dow∆ﬂd_fúmw¨e
(
bus
, bus->
dhd
->
osh
, bus->
sdh
)) {

7657 
bcmîr‹
 = 
	`dhd_bus_öô
((
dhd_pub_t
 *Ë
bus
->
dhd
, 
FALSE
);

7658 i‡(
bcmîr‹
 =
BCME_OK
) {

7659 #i‡
	`deföed
(
OOB_INTR_ONLY
)

7660 
	`bcmsdh_£t_úq
(
TRUE
);

7661 
	`dhd_íabÀ_oob_öå
(
bus
, 
TRUE
);

7664 
bus
->
dhd
->
d⁄gÀ_ª£t
 = 
FALSE
;

7665 
bus
->
dhd
->
up
 = 
TRUE
;

7667 #i‡!
	`deföed
(
IGNORE_ETH0_DOWN
)

7669 
	`dhd_txÊowc⁄åﬁ
(
bus
->
dhd
, 
ALL_INTERFACES
, 
OFF
);

7671 
	`dhd_os_wd_timî
(
dhdp
, 
dhd_w©chdog_ms
);

7672 #ifde‡
BCMSDIOH_TXGLOM


7673 i‡((
dhdp
->
bus°©e
 =
DHD_BUS_DATA
) &&

7674 
	`bcmsdh_glom_íabÀd
()) {

7675 
	`dhd_txglom_íabÀ
(
dhdp
, 
TRUE
);

7678 
	`DHD_TRACE
(("%s: WLAN ON DONE\n", 
__FUNCTION__
));

7680 
	`dhd_bus_°›
(
bus
, 
FALSE
);

7681 
	`dhdsdio_ªÀa£_d⁄gÀ
(
bus
, bus->
dhd
->
osh
,

7682 
TRUE
, 
FALSE
);

7685 
bcmîr‹
 = 
BCME_SDIO_ERROR
;

7687 
bcmîr‹
 = 
BCME_SDIO_ERROR
;

7689 #ifde‡
DHDTHREAD


7690 
	`dhd_os_sdu∆ock
(
dhdp
);

7693 
bcmîr‹
 = 
BCME_SDIO_ERROR
;

7694 
	`DHD_INFO
(("%s called when dongle isÇot inÑeset\n",

7695 
__FUNCTION__
));

7696 
	`DHD_INFO
(("Will call dhd_bus_start instead\n"));

7697 
	`sdioh_°¨t
(
NULL
, 1);

7698 i‡((
bcmîr‹
 = 
	`dhd_bus_°¨t
(
dhdp
)) != 0)

7699 
	`DHD_ERROR
(("%s: dhd_bus_start fail with %d\n",

7700 
__FUNCTION__
, 
bcmîr‹
));

7703  
bcmîr‹
;

7704 
	}
}

7707 
uöt
 
	$dhd_bus_chù_id
(
dhd_pub_t
 *
dhdp
)

7709 
dhd_bus_t
 *
bus
 = 
dhdp
->bus;

7711  
bus
->
sih
->
chù
;

7712 
	}
}

7715 
uöt
 
	$dhd_bus_chùªv_id
(
dhd_pub_t
 *
dhdp
)

7717 
dhd_bus_t
 *
bus
 = 
dhdp
->bus;

7719  
bus
->
sih
->
chùªv
;

7720 
	}
}

7723 
uöt
 
	$dhd_bus_chùpkg_id
(
dhd_pub_t
 *
dhdp
)

7725 
dhd_bus_t
 *
bus
 = 
dhdp
->bus;

7727  
bus
->
sih
->
chùpkg
;

7728 
	}
}

7731 
	$dhd_bus_membyãs
(
dhd_pub_t
 *
dhdp
, 
boﬁ
 
£t
, 
uöt32
 
addªss
, 
uöt8
 *
d©a
, 
uöt
 
size
)

7733 
dhd_bus_t
 *
bus
;

7735 
bus
 = 
dhdp
->bus;

7736  
	`dhdsdio_membyãs
(
bus
, 
£t
, 
addªss
, 
d©a
, 
size
);

7737 
	}
}

	@dhd_wlfc.h

24 #i‚de‡
__wlfc_ho°_drivî_deföôi⁄s_h__


25 
	#__wlfc_ho°_drivî_deföôi⁄s_h__


	)

28 
	#WLFC_HANGER_MAXITEMS
 1024

	)

30 
	#WLFC_HANGER_ITEM_STATE_FREE
 1

	)

31 
	#WLFC_HANGER_ITEM_STATE_INUSE
 2

	)

32 
	#WLFC_HANGER_ITEM_STATE_INUSE_SUPPRESSED
 3

	)

33 
	#WLFC_PKTID_HSLOT_MASK
 0xfff‡

	)

34 
	#WLFC_PKTID_HSLOT_SHIFT
 8

	)

37 
	#WLFC_PKTID_HSLOT_GET
(
x
) \

38 (((
x
Ë>> 
WLFC_PKTID_HSLOT_SHIFT
Ë& 
WLFC_PKTID_HSLOT_MASK
)

	)

39 
	#WLFC_PKTID_HSLOT_SET
(
v¨
, 
¶Ÿ
) \

40 ((
v¨
Ë((v¨Ë& ~(
WLFC_PKTID_HSLOT_MASK
 << 
WLFC_PKTID_HSLOT_SHIFT
)) | \

41 (((
¶Ÿ
Ë& 
WLFC_PKTID_HSLOT_MASK
Ë<< 
WLFC_PKTID_HSLOT_SHIFT
))

	)

43 
	#WLFC_PKTID_FREERUNCTR_MASK
 0xff

	)

45 
	#WLFC_PKTID_FREERUNCTR_GET
(
x
Ë((xË& 
WLFC_PKTID_FREERUNCTR_MASK
)

	)

46 
	#WLFC_PKTID_FREERUNCTR_SET
(
v¨
, 
˘r
) \

47 ((
v¨
Ë(((v¨Ë& ~
WLFC_PKTID_FREERUNCTR_MASK
) | \

48 (((
˘r
Ë& 
WLFC_PKTID_FREERUNCTR_MASK
))))

	)

50 
	#WLFC_PKTQ_PENQ
(
pq
, 
¥ec
, 
p
Ë((
	`pktq_fuŒ
(’q)Ë|| 
	`pktq_pfuŒ
((pq), (prec)))? \

51 
NULL
 : 
	`pktq_≥nq
((
pq
), (
¥ec
), (
p
)))

	)

52 
	#WLFC_PKTQ_PENQ_HEAD
(
pq
, 
¥ec
, 
p
Ë((
	`pktq_fuŒ
(’q)Ë|| 
	`pktq_pfuŒ
((pq), (prec))) ? \

53 
NULL
 : 
	`pktq_≥nq_hód
((
pq
), (
¥ec
), (
p
)))

	)

55 
	eewlfc_∑ckë_°©e
 {

56 
	meWLFC_PKTTYPE_NEW
,

57 
	meWLFC_PKTTYPE_DELAYED
,

58 
	meWLFC_PKTTYPE_SUPPRESSED
,

59 
	meWLFC_PKTTYPE_MAX


60 } 
	tewlfc_∑ckë_°©e_t
;

62 
	eewlfc_mac_íåy_a˘i⁄
 {

63 
	meWLFC_MAC_ENTRY_ACTION_ADD
,

64 
	meWLFC_MAC_ENTRY_ACTION_DEL
,

65 
	meWLFC_MAC_ENTRY_ACTION_UPDATE
,

66 
	meWLFC_MAC_ENTRY_ACTION_MAX


67 } 
	tewlfc_mac_íåy_a˘i⁄_t
;

69 
	swlfc_h™gî_ôem
 {

70 
uöt8
 
	m°©e
;

71 
uöt8
 
	mgí
;

72 
uöt8
 
	m∑d
[2];

73 
uöt32
 
	midítifõr
;

74 * 
	mpkt
;

75 #ifde‡
PROP_TXSTATUS_DEBUG


76 
uöt32
 
	mpush_time
;

78 } 
	twlfc_h™gî_ôem_t
;

80 
	swlfc_h™gî
 {

81 
	mmax_ôems
;

82 
uöt32
 
	mpushed
;

83 
uöt32
 
	mp›≥d
;

84 
uöt32
 
	mÁûed_to_push
;

85 
uöt32
 
	mÁûed_to_p›
;

86 
uöt32
 
	mÁûed_¶Ÿföd
;

87 
wlfc_h™gî_ôem_t
 
	môems
[1];

88 
uöt32
 
	m¶Ÿ_pos
;

89 } 
	twlfc_h™gî_t
;

91 
	#WLFC_HANGER_SIZE
(
n
Ë(((
wlfc_h™gî_t
) - \

92 (
wlfc_h™gî_ôem_t
)Ë+ ((
n
)*(wlfc_h™gî_ôem_t)))

	)

94 
	#WLFC_STATE_OPEN
 1

	)

95 
	#WLFC_STATE_CLOSE
 2

	)

97 
	#WLFC_PSQ_PREC_COUNT
 ((
AC_COUNT
 + 1Ë* 2Ë

	)

99 
	#WLFC_PSQ_LEN
 2048

	)

101 
	#WLFC_SENDQ_LEN
 256

	)

104 
	#WLFC_FLOWCONTROL_HIWATER
 (2048 - 256)

	)

105 
	#WLFC_FLOWCONTROL_LOWATER
 256

	)

108 
	swlfc_mac_des¸ùt‹
 {

109 
uöt8
 
	moccupõd
;

110 
uöt8
 
	möãrÁ˚_id
;

111 
uöt8
 
	mi·y≥
;

112 
uöt8
 
	m°©e
;

113 
uöt8
 
	mac_bôm≠
;

114 
uöt8
 
	mªque°ed_¸edô
;

115 
uöt8
 
	mªque°ed_∑ckë
;

116 
uöt8
 
	mó
[
ETHER_ADDR_LEN
];

121 
uöt8
 
	m£q
[
AC_COUNT
 + 1];

122 
uöt8
 
	mgíî©i⁄
;

123 
pktq
 
	mpsq
;

125 
uöt8
 
	måaffic_œ°ªp‹ãd_bmp
;

127 
uöt8
 
	måaffic_≥ndög_bmp
;

129 
uöt8
 
	m£nd_tim_sig«l
;

130 
uöt8
 
	mmac_h™dÀ
;

131 
uöt
 
	må™sô_cou¡
;

132 
uöt
 
	msuµr_å™sô_cou¡
;

133 
uöt
 
	msuµªss_cou¡
;

134 
uöt8
 
	msuµªs£d
;

136 #ifde‡
PROP_TXSTATUS_DEBUG


137 
uöt32
 
	md°n¸edô_£¡_∑ckës
;

138 
uöt32
 
	md°n¸edô_acks
;

139 
uöt32
 
	m›íed_˘
;

140 
uöt32
 
	m˛o£d_˘
;

142 } 
	twlfc_mac_des¸ùt‹_t
;

144 
	#WLFC_DECR_SEQCOUNT
(
íåy
, 
¥ec
Ëdÿ{ i‡”¡ry->
£q
[(prec)] == 0) {\

145 
íåy
->
£q
[
¥ec
] = 0xff; } íåy->£q[¥ec]--;} 0)

	)

147 
	#WLFC_INCR_SEQCOUNT
(
íåy
, 
¥ec
Ëíåy->
£q
[’ªc)]++

	)

148 
	#WLFC_SEQCOUNT
(
íåy
, 
¥ec
Ëíåy->
£q
[’ªc)]

	)

150 
	s©ho°_wl_°©_cou¡îs
 {

151 
uöt32
 
	mpktö
;

152 
uöt32
 
	mpkt2bus
;

153 
uöt32
 
	mpktdr›≥d
;

154 
uöt32
 
	mév_∑r£_Áûed
;

155 
uöt32
 
	mrﬁlback
;

156 
uöt32
 
	mrﬁlback_Áûed
;

157 
uöt32
 
	m£ndq_fuŒ_îr‹
;

158 
uöt32
 
	mdñayq_fuŒ_îr‹
;

159 
uöt32
 
	m¸edô_ªque°_Áûed
;

160 
uöt32
 
	m∑ckë_ªque°_Áûed
;

161 
uöt32
 
	mmac_upd©e_Áûed
;

162 
uöt32
 
	mpsmode_upd©e_Áûed
;

163 
uöt32
 
	möãrÁ˚_upd©e_Áûed
;

164 
uöt32
 
	mwlfc_hódî_⁄ly_pkt
;

165 
uöt32
 
	mtx°©us_ö
;

166 
uöt32
 
	md11_suµªss
;

167 
uöt32
 
	mwl_suµªss
;

168 
uöt32
 
	mbad_suµªss
;

169 
uöt32
 
	mpkt_‰ìd
;

170 
uöt32
 
	mpkt_‰ì_îr
;

171 
uöt32
 
	mpsq_wlsup_ªtx
;

172 
uöt32
 
	mpsq_wlsup_íq
;

173 
uöt32
 
	mpsq_d11sup_ªtx
;

174 
uöt32
 
	mpsq_d11sup_íq
;

175 
uöt32
 
	mpsq_ho°q_ªtx
;

176 
uöt32
 
	mpsq_ho°q_íq
;

177 
uöt32
 
	mmac_h™dÀ_nŸfound
;

178 
uöt32
 
	mwlc_tos£d_pkts
;

179 
uöt32
 
	mdhd_hdΩuŒs
;

180 
uöt32
 
	mgíîic_îr‹
;

182 
uöt32
 
	m£ndq_pkts
[
AC_COUNT
 + 1];

183 #ifde‡
PROP_TXSTATUS_DEBUG


185 
uöt32
 
	mœãncy_ßm∂e_cou¡
;

186 
uöt32
 
	mtŸÆ_°©us_œãncy
;

187 
uöt32
 
	mœãncy_mo°_ª˚¡
;

188 
	midx_dñè
;

189 
uöt32
 
	mdñès
[10];

190 
uöt32
 
	mfifo_¸edôs_£¡
[6];

191 
uöt32
 
	mfifo_¸edôs_back
[6];

192 
uöt32
 
	mdr›≥d_qfuŒ
[6];

193 
uöt32
 
	msig«l_⁄ly_pkts_£¡
;

194 
uöt32
 
	msig«l_⁄ly_pkts_‰ìd
;

196 } 
	t©ho°_wl_°©_cou¡îs_t
;

198 #ifde‡
PROP_TXSTATUS_DEBUG


199 
	#WLFC_HOST_FIFO_CREDIT_INC_SENTCTRS
(
˘x
, 
ac
) do { \

200 (
˘x
)->
°©s
.
fifo_¸edôs_£¡
[(
ac
)]++;} 0)

	)

201 
	#WLFC_HOST_FIFO_CREDIT_INC_BACKCTRS
(
˘x
, 
ac
) do { \

202 (
˘x
)->
°©s
.
fifo_¸edôs_back
[(
ac
)]++;} 0)

	)

203 
	#WLFC_HOST_FIFO_DROPPEDCTR_INC
(
˘x
, 
ac
) do { \

204 (
˘x
)->
°©s
.
dr›≥d_qfuŒ
[(
ac
)]++;} 0)

	)

206 
	#WLFC_HOST_FIFO_CREDIT_INC_SENTCTRS
(
˘x
, 
ac
Ëdÿ{} 0)

	)

207 
	#WLFC_HOST_FIFO_CREDIT_INC_BACKCTRS
(
˘x
, 
ac
Ëdÿ{} 0)

	)

208 
	#WLFC_HOST_FIFO_DROPPEDCTR_INC
(
˘x
, 
ac
Ëdÿ{} 0)

	)

211 
	#WLFC_FCMODE_NONE
 0

	)

212 
	#WLFC_FCMODE_IMPLIED_CREDIT
 1

	)

213 
	#WLFC_FCMODE_EXPLICIT_CREDIT
 2

	)

216 
	#WLFC_BORROW_DEFER_PERIOD_MS
 100

	)

219 
	#WLFC_AC_MASK
 0xF

	)

222 
	#WLFC_AC_BE_TRAFFIC_ONLY
 0xD

	)

224 
	s©ho°_wl_°©us_öfo
 {

225 
uöt8
 
	mœ°_£qid_to_wlc
;

228 
o¶_t
* 
	mosh
;

230 * 
	mdhdp
;

233 
©ho°_wl_°©_cou¡îs_t
 
	m°©s
;

236 
	mFIFO_¸edô
[
AC_COUNT
 + 2];

239 
	m¸edôs_b‹rowed
[
AC_COUNT
 + 2][AC_COUNT + 2];

241 
pktq
 
	mSENDQ
;

244 * 
	mh™gî
;

247 
wlfc_mac_des¸ùt‹_t
 
	mnodes
[
WLFC_MAC_DESC_TABLE_SIZE
];

249 
wlfc_mac_des¸ùt‹_t
 
	möãrÁ˚s
[
WLFC_MAX_IFNUM
];

252 
wlfc_mac_des¸ùt‹_t
 
	mŸhî
;

253 } 
	mde°ö©i⁄_íåõs
;

255 
uöt8
 
	mtokí_pos
[
AC_COUNT
+1];

257 
uöt8
 
	mho°if_Êow_°©e
[
WLFC_MAX_IFNUM
];

258 
uöt8
 
	mho°_ifidx
;

260 
uöt8
 
	mtoggÀ_ho°_if
;

269 
uöt8
 
	m¥›tx°©us_mode
;

272 
uöt8
 
	mÆlow_¸edô_b‹row
;

275 
uöt32
 
	mb‹row_de„r_time°amp
;

277 } 
	t©ho°_wl_°©us_öfo_t
;

279 
dhd_wlfc_íabÀ
(
dhd_pub_t
 *
dhd
);

280 
dhd_wlfc_öãrÁ˚_evít
(
dhd_öfo
 *,

281 
ewlfc_mac_íåy_a˘i⁄_t
 
a˘i⁄
, 
uöt8
 
ifid
, uöt8 
i·y≥
, uöt8* 
ó
);

282 
dhd_wlfc_FIFO¸edôm≠_evít
(
dhd_öfo
 *
dhd
, 
uöt8
* 
evít_d©a
);

283 
dhd_wlfc_evít
(
dhd_öfo
 *
dhd
);

284 
dhd_os_wlfc_block
(
dhd_pub_t
 *
pub
);

285 
dhd_os_wlfc_unblock
(
dhd_pub_t
 *
pub
);

	@dngl_stats.h

28 #i‚de‡
_dngl_°©s_h_


29 
	#_dngl_°©s_h_


	)

32 
	mrx_∑ckës
;

33 
	mtx_∑ckës
;

34 
	mrx_byãs
;

35 
	mtx_byãs
;

36 
	mrx_îr‹s
;

37 
	mtx_îr‹s
;

38 
	mrx_dr›≥d
;

39 
	mtx_dr›≥d
;

40 
	mmu…iˇ°
;

41 } 
	tdngl_°©s_t
;

	@dngl_wlhdr.h

27 #i‚de‡
_dngl_wlhdr_h_


28 
	#_dngl_wlhdr_h_


	)

30 
	swl_hódî
 {

31 
uöt8
 
	mty≥
;

32 
uöt8
 
	mvîsi⁄
;

33 
öt8
 
	mrssi
;

34 
uöt8
 
	m∑d
;

35 } 
	twl_hódî_t
;

37 
	#WL_HEADER_LEN
 (
wl_hódî_t
)

	)

38 
	#WL_HEADER_TYPE
 0

	)

39 
	#WL_HEADER_VER
 1

	)

	@hndpmu.c

28 
	~<bcm_cfg.h
>

29 
	~<ty≥defs.h
>

30 
	~<bcmdefs.h
>

31 
	~<o¶.h
>

32 
	~<bcmutûs.h
>

33 
	~<siutûs.h
>

34 
	~<bcmdevs.h
>

35 
	~<hndsoc.h
>

36 
	~<sbchùc.h
>

37 
	~<hndpmu.h
>

39 
	#PMU_ERROR
(
¨gs
)

	)

41 
	#PMU_MSG
(
¨gs
)

	)

46 
	#PMU_NONE
(
¨gs
)

	)

53 
uöt8
 
	m°ªngth
;

54 
uöt8
 
	m£l
;

55 } 
	tsdiod_drive_°r_t
;

58 c⁄° 
sdiod_drive_°r_t
 
	gsdiod_drive_°ªngth_èb1
[] = {

65 c⁄° 
sdiod_drive_°r_t
 
	gsdiod_drive_°ªngth_èb2
[] = {

75 c⁄° 
sdiod_drive_°r_t
 
	gsdiod_drive_°ªngth_èb3
[] = {

86 c⁄° 
sdiod_drive_°r_t
 
	gsdiod_drive_°ªngth_èb4_1v8
[] = {

101 c⁄° 
sdiod_drive_°r_t
 
	gsdiod_drive_°ªngth_èb5_1v8
[] = {

113 c⁄° 
sdiod_drive_°r_t
 
	gsdiod_drive_°ªngth_èb6_1v8
[] = {

119 
	#SDIOD_DRVSTR_KEY
(
chù
, 
pmu
Ë(((chùË<< 16Ë| (pmu))

	)

122 
	$si_sdiod_drive_°ªngth_öô
(
si_t
 *
sih
, 
o¶_t
 *
osh
, 
uöt32
 
drive°ªngth
)

124 
chù¸egs_t
 *
cc
;

125 
uöt
 
‹igidx
, 
öå_vÆ
 = 0;

126 
sdiod_drive_°r_t
 *
°r_èb
 = 
NULL
;

127 
uöt32
 
°r_mask
 = 0;

128 
uöt32
 
°r_shi·
 = 0;

130 i‡(!(
sih
->
ccˇps
 & 
CC_CAP_PMU
)) {

135 
cc
 = (
chù¸egs_t
 *Ë
	`si_swôch_c‹e
(
sih
, 
CC_CORE_ID
, &
‹igidx
, &
öå_vÆ
);

137 
	`SDIOD_DRVSTR_KEY
(
sih
->
chù
, sih->
pmuªv
)) {

138 
	`SDIOD_DRVSTR_KEY
(
BCM4325_CHIP_ID
, 1):

139 
°r_èb
 = (
sdiod_drive_°r_t
 *)&
sdiod_drive_°ªngth_èb1
;

140 
°r_mask
 = 0x30000000;

141 
°r_shi·
 = 28;

143 
	`SDIOD_DRVSTR_KEY
(
BCM4325_CHIP_ID
, 2):

144 
	`SDIOD_DRVSTR_KEY
(
BCM4325_CHIP_ID
, 3):

145 
	`SDIOD_DRVSTR_KEY
(
BCM4315_CHIP_ID
, 4):

146 
°r_èb
 = (
sdiod_drive_°r_t
 *)&
sdiod_drive_°ªngth_èb2
;

147 
°r_mask
 = 0x00003800;

148 
°r_shi·
 = 11;

150 
	`SDIOD_DRVSTR_KEY
(
BCM4336_CHIP_ID
, 8):

151 
	`SDIOD_DRVSTR_KEY
(
BCM4336_CHIP_ID
, 11):

152 i‡(
sih
->
pmuªv
 == 8) {

153 
°r_èb
 = (
sdiod_drive_°r_t
 *)&
sdiod_drive_°ªngth_èb3
;

155 i‡(
sih
->
pmuªv
 == 11) {

156 
°r_èb
 = (
sdiod_drive_°r_t
 *)&
sdiod_drive_°ªngth_èb4_1v8
;

158 
°r_mask
 = 0x00003800;

159 
°r_shi·
 = 11;

161 
	`SDIOD_DRVSTR_KEY
(
BCM4330_CHIP_ID
, 12):

162 
°r_èb
 = (
sdiod_drive_°r_t
 *)&
sdiod_drive_°ªngth_èb4_1v8
;

163 
°r_mask
 = 0x00003800;

164 
°r_shi·
 = 11;

166 
	`SDIOD_DRVSTR_KEY
(
BCM43362_CHIP_ID
, 13):

167 
°r_èb
 = (
sdiod_drive_°r_t
 *)&
sdiod_drive_°ªngth_èb5_1v8
;

168 
°r_mask
 = 0x00003800;

169 
°r_shi·
 = 11;

171 
	`SDIOD_DRVSTR_KEY
(
BCM4334_CHIP_ID
, 17):

172 
°r_èb
 = (
sdiod_drive_°r_t
 *)&
sdiod_drive_°ªngth_èb6_1v8
;

173 
°r_mask
 = 0x00001800;

174 
°r_shi·
 = 11;

177 
	`PMU_MSG
(("No SDIO Drive strength init done for chip %sÑev %dÖmurev %d\n",

178 
	`bcm_chù«me
(
sih
->
chù
, 
chn
, 8), sih->
chùªv
, sih->
pmuªv
));

183 i‡(
°r_èb
 !
NULL
 && 
cc
 != NULL) {

184 
uöt32
 
cc_d©a_ãmp
;

185 
i
;

190 
i
 = 0; 
drive°ªngth
 < 
°r_èb
[i].
°ªngth
; i++)

193 i‡(
i
 > 0 && 
drive°ªngth
 > 
°r_èb
[i].
°ªngth
)

194 
i
--;

196 
	`W_REG
(
osh
, &
cc
->
chùc⁄åﬁ_addr
, 1);

197 
cc_d©a_ãmp
 = 
	`R_REG
(
osh
, &
cc
->
chùc⁄åﬁ_d©a
);

198 
cc_d©a_ãmp
 &~
°r_mask
;

199 
cc_d©a_ãmp
 |
°r_èb
[
i
].
£l
 << 
°r_shi·
;

200 
	`W_REG
(
osh
, &
cc
->
chùc⁄åﬁ_d©a
, 
cc_d©a_ãmp
);

202 
	`PMU_MSG
(("SDIO: %dmA drive strengthÑequested; setÅo %dmA\n",

203 
drive°ªngth
, 
°r_èb
[
i
].
°ªngth
));

207 
	`si_ª°‹e_c‹e
(
sih
, 
‹igidx
, 
öå_vÆ
);

208 
	}
}

	@include/aidmp.h

27 #i‚def 
_AIDMP_H


28 
	#_AIDMP_H


	)

31 
	#MFGID_ARM
 0x43b

	)

32 
	#MFGID_BRCM
 0x4bf

	)

33 
	#MFGID_MIPS
 0x4a7

	)

36 
	#CC_SIM
 0

	)

37 
	#CC_EROM
 1

	)

38 
	#CC_CORESIGHT
 9

	)

39 
	#CC_VERIF
 0xb

	)

40 
	#CC_OPTIMO
 0xd

	)

41 
	#CC_GEN
 0xe

	)

42 
	#CC_PRIMECELL
 0xf

	)

45 
	#ER_EROMENTRY
 0x000

	)

46 
	#ER_REMAPCONTROL
 0xe00

	)

47 
	#ER_REMAPSELECT
 0xe04

	)

48 
	#ER_MASTERSELECT
 0xe10

	)

49 
	#ER_ITCR
 0xf00

	)

50 
	#ER_ITIP
 0xf04

	)

53 
	#ER_TAG
 0xe

	)

54 
	#ER_TAG1
 0x6

	)

55 
	#ER_VALID
 1

	)

56 
	#ER_CI
 0

	)

57 
	#ER_MP
 2

	)

58 
	#ER_ADD
 4

	)

59 
	#ER_END
 0xe

	)

60 
	#ER_BAD
 0xffffffff

	)

63 
	#CIA_MFG_MASK
 0xfff00000

	)

64 
	#CIA_MFG_SHIFT
 20

	)

65 
	#CIA_CID_MASK
 0x000fff00

	)

66 
	#CIA_CID_SHIFT
 8

	)

67 
	#CIA_CCL_MASK
 0x000000f0

	)

68 
	#CIA_CCL_SHIFT
 4

	)

71 
	#CIB_REV_MASK
 0xff000000

	)

72 
	#CIB_REV_SHIFT
 24

	)

73 
	#CIB_NSW_MASK
 0x00f80000

	)

74 
	#CIB_NSW_SHIFT
 19

	)

75 
	#CIB_NMW_MASK
 0x0007c000

	)

76 
	#CIB_NMW_SHIFT
 14

	)

77 
	#CIB_NSP_MASK
 0x00003e00

	)

78 
	#CIB_NSP_SHIFT
 9

	)

79 
	#CIB_NMP_MASK
 0x000001f0

	)

80 
	#CIB_NMP_SHIFT
 4

	)

83 
	#MPD_MUI_MASK
 0x0000ff00

	)

84 
	#MPD_MUI_SHIFT
 8

	)

85 
	#MPD_MP_MASK
 0x000000f0

	)

86 
	#MPD_MP_SHIFT
 4

	)

89 
	#AD_ADDR_MASK
 0xfffff000

	)

90 
	#AD_SP_MASK
 0x00000f00

	)

91 
	#AD_SP_SHIFT
 8

	)

92 
	#AD_ST_MASK
 0x000000c0

	)

93 
	#AD_ST_SHIFT
 6

	)

94 
	#AD_ST_SLAVE
 0x00000000

	)

95 
	#AD_ST_BRIDGE
 0x00000040

	)

96 
	#AD_ST_SWRAP
 0x00000080

	)

97 
	#AD_ST_MWRAP
 0x000000c0

	)

98 
	#AD_SZ_MASK
 0x00000030

	)

99 
	#AD_SZ_SHIFT
 4

	)

100 
	#AD_SZ_4K
 0x00000000

	)

101 
	#AD_SZ_8K
 0x00000010

	)

102 
	#AD_SZ_16K
 0x00000020

	)

103 
	#AD_SZ_SZD
 0x00000030

	)

104 
	#AD_AG32
 0x00000008

	)

105 
	#AD_ADDR_ALIGN
 0x00000fff

	)

106 
	#AD_SZ_BASE
 0x00001000

	)

109 
	#SD_SZ_MASK
 0xfffff000

	)

110 
	#SD_SG32
 0x00000008

	)

111 
	#SD_SZ_ALIGN
 0x00000fff

	)

114 #i‚de‡
_LANGUAGE_ASSEMBLY


116 vﬁ©ûê
	s_aidmp
 {

117 
uöt32
 
	moob£löa30
;

118 
uöt32
 
	moob£löa74
;

119 
uöt32
 
	mPAD
[6];

120 
uöt32
 
	moob£löb30
;

121 
uöt32
 
	moob£löb74
;

122 
uöt32
 
	mPAD
[6];

123 
uöt32
 
	moob£löc30
;

124 
uöt32
 
	moob£löc74
;

125 
uöt32
 
	mPAD
[6];

126 
uöt32
 
	moob£löd30
;

127 
uöt32
 
	moob£löd74
;

128 
uöt32
 
	mPAD
[38];

129 
uöt32
 
	moob£louè30
;

130 
uöt32
 
	moob£louè74
;

131 
uöt32
 
	mPAD
[6];

132 
uöt32
 
	moob£loutb30
;

133 
uöt32
 
	moob£loutb74
;

134 
uöt32
 
	mPAD
[6];

135 
uöt32
 
	moob£loutc30
;

136 
uöt32
 
	moob£loutc74
;

137 
uöt32
 
	mPAD
[6];

138 
uöt32
 
	moob£loutd30
;

139 
uöt32
 
	moob£loutd74
;

140 
uöt32
 
	mPAD
[38];

141 
uöt32
 
	moobsynˇ
;

142 
uöt32
 
	moob£louèí
;

143 
uöt32
 
	mPAD
[6];

144 
uöt32
 
	moobsyncb
;

145 
uöt32
 
	moob£loutbí
;

146 
uöt32
 
	mPAD
[6];

147 
uöt32
 
	moobsyncc
;

148 
uöt32
 
	moob£lout˚n
;

149 
uöt32
 
	mPAD
[6];

150 
uöt32
 
	moobsyncd
;

151 
uöt32
 
	moob£loutdí
;

152 
uöt32
 
	mPAD
[38];

153 
uöt32
 
	moob´xtwidth
;

154 
uöt32
 
	moobaöwidth
;

155 
uöt32
 
	moobaoutwidth
;

156 
uöt32
 
	mPAD
[5];

157 
uöt32
 
	moobbextwidth
;

158 
uöt32
 
	moobböwidth
;

159 
uöt32
 
	moobboutwidth
;

160 
uöt32
 
	mPAD
[5];

161 
uöt32
 
	moob˚xtwidth
;

162 
uöt32
 
	moobcöwidth
;

163 
uöt32
 
	moobcoutwidth
;

164 
uöt32
 
	mPAD
[5];

165 
uöt32
 
	moobdextwidth
;

166 
uöt32
 
	moobdöwidth
;

167 
uöt32
 
	moobdoutwidth
;

168 
uöt32
 
	mPAD
[37];

169 
uöt32
 
	mio˘æ£t
;

170 
uöt32
 
	mio˘æ˛ór
;

171 
uöt32
 
	mio˘æ
;

172 
uöt32
 
	mPAD
[61];

173 
uöt32
 
	mio°©us
;

174 
uöt32
 
	mPAD
[127];

175 
uöt32
 
	mio˘æwidth
;

176 
uöt32
 
	mio°©uswidth
;

177 
uöt32
 
	mPAD
[62];

178 
uöt32
 
	mª£t˘æ
;

179 
uöt32
 
	mª£t°©us
;

180 
uöt32
 
	mª£åódid
;

181 
uöt32
 
	mª£twrôeid
;

182 
uöt32
 
	mPAD
[60];

183 
uöt32
 
	mîæog˘æ
;

184 
uöt32
 
	mîæogd⁄e
;

185 
uöt32
 
	mîæog°©us
;

186 
uöt32
 
	mîæogaddæo
;

187 
uöt32
 
	mîæogaddrhi
;

188 
uöt32
 
	mîæogid
;

189 
uöt32
 
	mîæogu£r
;

190 
uöt32
 
	mîæogÊags
;

191 
uöt32
 
	mPAD
[56];

192 
uöt32
 
	möt°©us
;

193 
uöt32
 
	mPAD
[255];

194 
uöt32
 
	mc⁄fig
;

195 
uöt32
 
	mPAD
[63];

196 
uöt32
 
	mô¸
;

197 
uöt32
 
	mPAD
[3];

198 
uöt32
 
	môùooba
;

199 
uöt32
 
	môùoobb
;

200 
uöt32
 
	môùoobc
;

201 
uöt32
 
	môùoobd
;

202 
uöt32
 
	mPAD
[4];

203 
uöt32
 
	môùoobaout
;

204 
uöt32
 
	môùoobbout
;

205 
uöt32
 
	môùoobcout
;

206 
uöt32
 
	môùoobdout
;

207 
uöt32
 
	mPAD
[4];

208 
uöt32
 
	mô›ooba
;

209 
uöt32
 
	mô›oobb
;

210 
uöt32
 
	mô›oobc
;

211 
uöt32
 
	mô›oobd
;

212 
uöt32
 
	mPAD
[4];

213 
uöt32
 
	mô›oobaö
;

214 
uöt32
 
	mô›oobbö
;

215 
uöt32
 
	mô›oobcö
;

216 
uöt32
 
	mô›oobdö
;

217 
uöt32
 
	mPAD
[4];

218 
uöt32
 
	mô›ª£t
;

219 
uöt32
 
	mPAD
[15];

220 
uöt32
 
	m≥rùhîülid4
;

221 
uöt32
 
	m≥rùhîülid5
;

222 
uöt32
 
	m≥rùhîülid6
;

223 
uöt32
 
	m≥rùhîülid7
;

224 
uöt32
 
	m≥rùhîülid0
;

225 
uöt32
 
	m≥rùhîülid1
;

226 
uöt32
 
	m≥rùhîülid2
;

227 
uöt32
 
	m≥rùhîülid3
;

228 
uöt32
 
	mcomp⁄ítid0
;

229 
uöt32
 
	mcomp⁄ítid1
;

230 
uöt32
 
	mcomp⁄ítid2
;

231 
uöt32
 
	mcomp⁄ítid3
;

232 } 
	taidmp_t
;

237 
	#OOB_BUSCONFIG
 0x020

	)

238 
	#OOB_STATUSA
 0x100

	)

239 
	#OOB_STATUSB
 0x104

	)

240 
	#OOB_STATUSC
 0x108

	)

241 
	#OOB_STATUSD
 0x10c

	)

242 
	#OOB_ENABLEA0
 0x200

	)

243 
	#OOB_ENABLEA1
 0x204

	)

244 
	#OOB_ENABLEA2
 0x208

	)

245 
	#OOB_ENABLEA3
 0x20c

	)

246 
	#OOB_ENABLEB0
 0x280

	)

247 
	#OOB_ENABLEB1
 0x284

	)

248 
	#OOB_ENABLEB2
 0x288

	)

249 
	#OOB_ENABLEB3
 0x28c

	)

250 
	#OOB_ENABLEC0
 0x300

	)

251 
	#OOB_ENABLEC1
 0x304

	)

252 
	#OOB_ENABLEC2
 0x308

	)

253 
	#OOB_ENABLEC3
 0x30c

	)

254 
	#OOB_ENABLED0
 0x380

	)

255 
	#OOB_ENABLED1
 0x384

	)

256 
	#OOB_ENABLED2
 0x388

	)

257 
	#OOB_ENABLED3
 0x38c

	)

258 
	#OOB_ITCR
 0xf00

	)

259 
	#OOB_ITIPOOBA
 0xf10

	)

260 
	#OOB_ITIPOOBB
 0xf14

	)

261 
	#OOB_ITIPOOBC
 0xf18

	)

262 
	#OOB_ITIPOOBD
 0xf1c

	)

263 
	#OOB_ITOPOOBA
 0xf30

	)

264 
	#OOB_ITOPOOBB
 0xf34

	)

265 
	#OOB_ITOPOOBC
 0xf38

	)

266 
	#OOB_ITOPOOBD
 0xf3c

	)

269 
	#AI_OOBSELINA30
 0x000

	)

270 
	#AI_OOBSELINA74
 0x004

	)

271 
	#AI_OOBSELINB30
 0x020

	)

272 
	#AI_OOBSELINB74
 0x024

	)

273 
	#AI_OOBSELINC30
 0x040

	)

274 
	#AI_OOBSELINC74
 0x044

	)

275 
	#AI_OOBSELIND30
 0x060

	)

276 
	#AI_OOBSELIND74
 0x064

	)

277 
	#AI_OOBSELOUTA30
 0x100

	)

278 
	#AI_OOBSELOUTA74
 0x104

	)

279 
	#AI_OOBSELOUTB30
 0x120

	)

280 
	#AI_OOBSELOUTB74
 0x124

	)

281 
	#AI_OOBSELOUTC30
 0x140

	)

282 
	#AI_OOBSELOUTC74
 0x144

	)

283 
	#AI_OOBSELOUTD30
 0x160

	)

284 
	#AI_OOBSELOUTD74
 0x164

	)

285 
	#AI_OOBSYNCA
 0x200

	)

286 
	#AI_OOBSELOUTAEN
 0x204

	)

287 
	#AI_OOBSYNCB
 0x220

	)

288 
	#AI_OOBSELOUTBEN
 0x224

	)

289 
	#AI_OOBSYNCC
 0x240

	)

290 
	#AI_OOBSELOUTCEN
 0x244

	)

291 
	#AI_OOBSYNCD
 0x260

	)

292 
	#AI_OOBSELOUTDEN
 0x264

	)

293 
	#AI_OOBAEXTWIDTH
 0x300

	)

294 
	#AI_OOBAINWIDTH
 0x304

	)

295 
	#AI_OOBAOUTWIDTH
 0x308

	)

296 
	#AI_OOBBEXTWIDTH
 0x320

	)

297 
	#AI_OOBBINWIDTH
 0x324

	)

298 
	#AI_OOBBOUTWIDTH
 0x328

	)

299 
	#AI_OOBCEXTWIDTH
 0x340

	)

300 
	#AI_OOBCINWIDTH
 0x344

	)

301 
	#AI_OOBCOUTWIDTH
 0x348

	)

302 
	#AI_OOBDEXTWIDTH
 0x360

	)

303 
	#AI_OOBDINWIDTH
 0x364

	)

304 
	#AI_OOBDOUTWIDTH
 0x368

	)

307 
	#AI_IOCTRLSET
 0x400

	)

308 
	#AI_IOCTRLCLEAR
 0x404

	)

309 
	#AI_IOCTRL
 0x408

	)

310 
	#AI_IOSTATUS
 0x500

	)

311 
	#AI_RESETCTRL
 0x800

	)

312 
	#AI_RESETSTATUS
 0x804

	)

314 
	#AI_IOCTRLWIDTH
 0x700

	)

315 
	#AI_IOSTATUSWIDTH
 0x704

	)

317 
	#AI_RESETREADID
 0x808

	)

318 
	#AI_RESETWRITEID
 0x80c

	)

319 
	#AI_ERRLOGCTRL
 0xa00

	)

320 
	#AI_ERRLOGDONE
 0xa04

	)

321 
	#AI_ERRLOGSTATUS
 0xa08

	)

322 
	#AI_ERRLOGADDRLO
 0xa0c

	)

323 
	#AI_ERRLOGADDRHI
 0xa10

	)

324 
	#AI_ERRLOGID
 0xa14

	)

325 
	#AI_ERRLOGUSER
 0xa18

	)

326 
	#AI_ERRLOGFLAGS
 0xa1c

	)

327 
	#AI_INTSTATUS
 0xa00

	)

328 
	#AI_CONFIG
 0xe00

	)

329 
	#AI_ITCR
 0xf00

	)

330 
	#AI_ITIPOOBA
 0xf10

	)

331 
	#AI_ITIPOOBB
 0xf14

	)

332 
	#AI_ITIPOOBC
 0xf18

	)

333 
	#AI_ITIPOOBD
 0xf1c

	)

334 
	#AI_ITIPOOBAOUT
 0xf30

	)

335 
	#AI_ITIPOOBBOUT
 0xf34

	)

336 
	#AI_ITIPOOBCOUT
 0xf38

	)

337 
	#AI_ITIPOOBDOUT
 0xf3c

	)

338 
	#AI_ITOPOOBA
 0xf50

	)

339 
	#AI_ITOPOOBB
 0xf54

	)

340 
	#AI_ITOPOOBC
 0xf58

	)

341 
	#AI_ITOPOOBD
 0xf5c

	)

342 
	#AI_ITOPOOBAIN
 0xf70

	)

343 
	#AI_ITOPOOBBIN
 0xf74

	)

344 
	#AI_ITOPOOBCIN
 0xf78

	)

345 
	#AI_ITOPOOBDIN
 0xf7c

	)

346 
	#AI_ITOPRESET
 0xf90

	)

347 
	#AI_PERIPHERIALID4
 0xfd0

	)

348 
	#AI_PERIPHERIALID5
 0xfd4

	)

349 
	#AI_PERIPHERIALID6
 0xfd8

	)

350 
	#AI_PERIPHERIALID7
 0xfdc

	)

351 
	#AI_PERIPHERIALID0
 0x„0

	)

352 
	#AI_PERIPHERIALID1
 0x„4

	)

353 
	#AI_PERIPHERIALID2
 0x„8

	)

354 
	#AI_PERIPHERIALID3
 0x„c

	)

355 
	#AI_COMPONENTID0
 0xff0

	)

356 
	#AI_COMPONENTID1
 0xff4

	)

357 
	#AI_COMPONENTID2
 0xff8

	)

358 
	#AI_COMPONENTID3
 0xffc

	)

361 
	#AIRC_RESET
 1

	)

364 
	#AICFG_OOB
 0x00000020

	)

365 
	#AICFG_IOS
 0x00000010

	)

366 
	#AICFG_IOC
 0x00000008

	)

367 
	#AICFG_TO
 0x00000004

	)

368 
	#AICFG_ERRL
 0x00000002

	)

369 
	#AICFG_RST
 0x00000001

	)

372 
	#OOB_SEL_OUTEN_B_5
 15

	)

373 
	#OOB_SEL_OUTEN_B_6
 23

	)

	@include/bcm_cfg.h

27 #i‚de‡
_bcm_cfg_h_


28 
	#_bcm_cfg_h_


	)

	@include/bcm_mpool_pub.h

61 #i‚de‡
_BCM_MPOOL_PUB_H


62 
	#_BCM_MPOOL_PUB_H
 1

	)

64 
	~<ty≥defs.h
>

76 
	go¶_öfo
;

79 
	gbcm°rbuf
;

86 
	gbcm_mpm_mgr
;

87 
bcm_mpm_mgr
 *
	tbcm_mpm_mgr_h
;

94 
	gbcm_mp_poﬁ
;

95 
bcm_mp_poﬁ
 *
	tbcm_mp_poﬁ_h
;

103 
	#BCM_MP_NAMELEN
 8

	)

109 
	sbcm_mp_°©s
 {

110 
	m«me
[
BCM_MP_NAMELEN
];

111 
	mobjsz
;

112 
uöt16
 
	mnobj
;

113 
uöt16
 
	mnum_Æloc
;

114 
uöt16
 
	mhigh_w©î
;

115 
uöt16
 
	mÁûed_Æloc
;

116 } 
	tbcm_mp_°©s_t
;

139 
bcm_mpm_öô
(
o¶_öfo
 *
osh
, 
max_poﬁs
, 
bcm_mpm_mgr_h
 *
mgΩ
);

152 
bcm_mpm_deöô
(
bcm_mpm_mgr_h
 *
mgΩ
);

178 
bcm_mpm_¸óã_¥óŒoc_poﬁ
(
bcm_mpm_mgr_h
 
mgr
,

179 
obj_sz
,

180 
nobj
,

181 *
mem°¨t
,

182 
memsize
,

183 
poﬁ«me
[
BCM_MP_NAMELEN
],

184 
bcm_mp_poﬁ_h
 *
√wp
);

200 
bcm_mpm_dñëe_¥óŒoc_poﬁ
(
bcm_mpm_mgr_h
 
mgr
, 
bcm_mp_poﬁ_h
 *
poﬁp
);

221 
bcm_mpm_¸óã_hóp_poﬁ
(
bcm_mpm_mgr_h
 
mgr
, 
obj_sz
,

222 
poﬁ«me
[
BCM_MP_NAMELEN
],

223 
bcm_mp_poﬁ_h
 *
√wp
);

239 
bcm_mpm_dñëe_hóp_poﬁ
(
bcm_mpm_mgr_h
 
mgr
, 
bcm_mp_poﬁ_h
 *
poﬁp
);

256 
bcm_mpm_°©s
(
bcm_mpm_mgr_h
 
mgr
, 
bcm_mp_°©s_t
 *
°©s
, *
√¡rõs
);

271 
bcm_mpm_dump
(
bcm_mpm_mgr_h
 
mgr
, 
bcm°rbuf
 *
b
);

293 
bcm_mpm_gë_obj_size
(
bcm_mpm_mgr_h
 
mgr
, 
obj_sz
, *
∑dded_obj_sz
);

315 * 
bcm_mp_Æloc
(
bcm_mp_poﬁ_h
 
poﬁ
);

329 
bcm_mp_‰ì
(
bcm_mp_poﬁ_h
 
poﬁ
, *
objp
);

343 
bcm_mp_°©s
(
bcm_mp_poﬁ_h
 
poﬁ
, 
bcm_mp_°©s_t
 *
°©s
);

358 
bcm_mp_dump
(
bcm_mp_poﬁ_h
 
poﬁ
, 
bcm°rbuf
 *
b
);

	@include/bcmcdc.h

29 #i‚de‡
_bcmcdc_h_


30 
	#_bcmcdc_h_


	)

31 
	~<¥Ÿo/ëhî√t.h
>

33 
	scdc_io˘l
 {

34 
uöt32
 
	mcmd
;

35 
uöt32
 
	mÀn
;

36 
uöt32
 
	mÊags
;

37 
uöt32
 
	m°©us
;

38 } 
	tcdc_io˘l_t
;

41 
	#CDC_MAX_MSG_SIZE
 
ETHER_MAX_LEN


	)

44 
	#CDCL_IOC_OUTLEN_MASK
 0x0000FFFF

	)

46 
	#CDCL_IOC_OUTLEN_SHIFT
 0

	)

47 
	#CDCL_IOC_INLEN_MASK
 0xFFFF0000

	)

48 
	#CDCL_IOC_INLEN_SHIFT
 16

	)

51 
	#CDCF_IOC_ERROR
 0x01

	)

52 
	#CDCF_IOC_SET
 0x02

	)

53 
	#CDCF_IOC_OVL_IDX_MASK
 0x3¯

	)

54 
	#CDCF_IOC_OVL_RSV
 0x40

	)

55 
	#CDCF_IOC_OVL
 0x80

	)

56 
	#CDCF_IOC_ACTION_MASK
 0x„

	)

57 
	#CDCF_IOC_ACTION_SHIFT
 1

	)

58 
	#CDCF_IOC_IF_MASK
 0xF000

	)

59 
	#CDCF_IOC_IF_SHIFT
 12

	)

60 
	#CDCF_IOC_ID_MASK
 0xFFFF0000

	)

61 
	#CDCF_IOC_ID_SHIFT
 16

	)

63 
	#CDC_IOC_IF_IDX
(
Êags
Ë(((ÊagsË& 
CDCF_IOC_IF_MASK
Ë>> 
CDCF_IOC_IF_SHIFT
)

	)

64 
	#CDC_IOC_ID
(
Êags
Ë(((ÊagsË& 
CDCF_IOC_ID_MASK
Ë>> 
CDCF_IOC_ID_SHIFT
)

	)

66 
	#CDC_GET_IF_IDX
(
hdr
) \

67 (()((((
hdr
)->
Êags
Ë& 
CDCF_IOC_IF_MASK
Ë>> 
CDCF_IOC_IF_SHIFT
))

	)

68 
	#CDC_SET_IF_IDX
(
hdr
, 
idx
) \

69 ((
hdr
)->
Êags
 = (((hdr)->Êag†& ~
CDCF_IOC_IF_MASK
Ë| ((
idx
Ë<< 
CDCF_IOC_IF_SHIFT
)))

	)

77 
	sbdc_hódî
 {

78 
uöt8
 
	mÊags
;

79 
uöt8
 
	m¥i‹ôy
;

80 
uöt8
 
	mÊags2
;

81 
uöt8
 
	md©aOff£t
;

86 
	#BDC_HEADER_LEN
 4

	)

89 
	#BDC_FLAG_80211_PKT
 0x01

	)

90 
	#BDC_FLAG_SUM_GOOD
 0x04

	)

91 
	#BDC_FLAG_SUM_NEEDED
 0x08

	)

92 
	#BDC_FLAG_EVENT_MSG
 0x08

	)

93 
	#BDC_FLAG_VER_MASK
 0xf0

	)

94 
	#BDC_FLAG_VER_SHIFT
 4

	)

97 
	#BDC_PRIORITY_MASK
 0x07

	)

98 
	#BDC_PRIORITY_FC_MASK
 0xf0

	)

99 
	#BDC_PRIORITY_FC_SHIFT
 4

	)

102 
	#BDC_FLAG2_IF_MASK
 0x0‡

	)

103 
	#BDC_FLAG2_IF_SHIFT
 0

	)

104 
	#BDC_FLAG2_FC_FLAG
 0x10

	)

108 
	#BDC_PROTO_VER_1
 1

	)

109 
	#BDC_PROTO_VER
 2

	)

112 
	#BDC_GET_IF_IDX
(
hdr
) \

113 (()((((
hdr
)->
Êags2
Ë& 
BDC_FLAG2_IF_MASK
Ë>> 
BDC_FLAG2_IF_SHIFT
))

	)

114 
	#BDC_SET_IF_IDX
(
hdr
, 
idx
) \

115 ((
hdr
)->
Êags2
 = (((hdr)->Êags2 & ~
BDC_FLAG2_IF_MASK
Ë| ((
idx
Ë<< 
BDC_FLAG2_IF_SHIFT
)))

	)

117 
	#BDC_FLAG2_PAD_MASK
 0xf0

	)

118 
	#BDC_FLAG_PAD_MASK
 0x03

	)

119 
	#BDC_FLAG2_PAD_SHIFT
 2

	)

120 
	#BDC_FLAG_PAD_SHIFT
 0

	)

121 
	#BDC_FLAG2_PAD_IDX
 0x3c

	)

122 
	#BDC_FLAG_PAD_IDX
 0x03

	)

123 
	#BDC_GET_PAD_LEN
(
hdr
) \

124 (()(((((
hdr
)->
Êags2
Ë& 
BDC_FLAG2_PAD_MASK
Ë>> 
BDC_FLAG2_PAD_SHIFT
) | \

125 ((((
hdr
)->
Êags
Ë& 
BDC_FLAG_PAD_MASK
Ë>> 
BDC_FLAG_PAD_SHIFT
)))

	)

126 
	#BDC_SET_PAD_LEN
(
hdr
, 
idx
) \

127 ((
hdr
)->
Êags2
 = (((hdr)->Êags2 & ~
BDC_FLAG2_PAD_MASK
) | \

128 (((
idx
Ë& 
BDC_FLAG2_PAD_IDX
Ë<< 
BDC_FLAG2_PAD_SHIFT
))); \

129 ((
hdr
)->
Êags
 = (((hdr)->Êag†& ~
BDC_FLAG_PAD_MASK
) | \

130 (((
idx
Ë& 
BDC_FLAG_PAD_IDX
Ë<< 
BDC_FLAG_PAD_SHIFT
)))

	)

	@include/bcmdefs.h

27 #i‚def 
_bcmdefs_h_


28 
	#_bcmdefs_h_


	)

38 
	#BCM_REFERENCE
(
d©a
Ë(()(d©a))

	)

43 
	#STATIC_ASSERT
(
ex¥
) { \

45 íum { 
_STATIC_ASSERT_NOT_CONSTANT
 = (
ex¥
Ë} 
	t_°©ic_as£π_e
; \

47 
	tSTATIC_ASSERT_FAIL
[(
ex¥
) ? 1 : -1]; \

48 }

	)

57 
	#bcmª˛aimed
 0

	)

58 
	#_d©a
 
_d©a


	)

59 
	#_‚
 
_‚


	)

60 
	#BCMPREATTACHDATA
(
_d©a
Ë
	)
_data

61 
	#BCMPREATTACHFN
(
_‚
Ë
	)
_fn

62 
	#_d©a
 
_d©a


	)

63 
	#_‚
 
_‚


	)

64 
	#_‚
 
_‚


	)

65 
	#BCMNMIATTACHFN
(
_‚
Ë
	)
_fn

66 
	#BCMNMIATTACHDATA
(
_d©a
Ë
	)
_data

67 
	#CONST
 c⁄°

	)

68 #i‚de‡
BCMFASTPATH


69 
	#BCMFASTPATH


	)

70 
	#BCMFASTPATH_HOST


	)

75 
	#_d©a
 
_d©a


	)

76 
	#BCMROMDAT_NAME
(
_d©a
Ë
	)
_data

77 
	#_‚
 
_‚


	)

78 
	#_‚
 
_‚


	)

79 
	#STATIC
 

	)

80 
	#BCMROMDAT_ARYSIZ
(
d©a
Ë
	`ARRAYSIZE
(d©a)

	)

81 
	#BCMROMDAT_SIZEOF
(
d©a
Ë(d©a)

	)

82 
	#BCMROMDAT_APATCH
(
d©a
)

	)

83 
	#BCMROMDAT_SPATCH
(
d©a
)

	)

86 
	#SI_BUS
 0

	)

87 
	#PCI_BUS
 1

	)

88 
	#PCMCIA_BUS
 2

	)

89 
	#SDIO_BUS
 3

	)

90 
	#JTAG_BUS
 4

	)

91 
	#USB_BUS
 5

	)

92 
	#SPI_BUS
 6

	)

93 
	#RPC_BUS
 7

	)

96 #ifde‡
BCMBUSTYPE


97 
	#BUSTYPE
(
bus
Ë(
BCMBUSTYPE
)

	)

99 
	#BUSTYPE
(
bus
Ë(bus)

	)

103 #ifde‡
BCMCHIPTYPE


104 
	#CHIPTYPE
(
bus
Ë(
BCMCHIPTYPE
)

	)

106 
	#CHIPTYPE
(
bus
Ë(bus)

	)

111 #i‡
deföed
(
BCMSPROMBUS
)

112 
	#SPROMBUS
 (
BCMSPROMBUS
)

	)

113 #ñi‡
deföed
(
SI_PCMCIA_SROM
)

114 
	#SPROMBUS
 (
PCMCIA_BUS
)

	)

116 
	#SPROMBUS
 (
PCI_BUS
)

	)

120 #ifde‡
BCMCHIPID


121 
	#CHIPID
(
chù
Ë(
BCMCHIPID
)

	)

123 
	#CHIPID
(
chù
Ë(chù)

	)

126 #ifde‡
BCMCHIPREV


127 
	#CHIPREV
(
ªv
Ë(
BCMCHIPREV
)

	)

129 
	#CHIPREV
(
ªv
Ë‘ev)

	)

133 
	#DMADDR_MASK_32
 0x0

	)

134 
	#DMADDR_MASK_30
 0xc0000000

	)

135 
	#DMADDR_MASK_0
 0xfffffff‡

	)

137 
	#DMADDRWIDTH_30
 30

	)

138 
	#DMADDRWIDTH_32
 32

	)

139 
	#DMADDRWIDTH_63
 63

	)

140 
	#DMADDRWIDTH_64
 64

	)

142 #ifde‡
BCMDMA64OSL


144 
uöt32
 
	mlﬂddr
;

145 
uöt32
 
	mhüddr
;

146 } 
	tdma64addr_t
;

148 
dma64addr_t
 
	tdmØddr_t
;

149 
	#PHYSADDRHI
(
_∑
Ë((_∑).
hüddr
)

	)

150 
	#PHYSADDRHISET
(
_∑
, 
_vÆ
) \

152 (
_∑
).
hüddr
 = (
_vÆ
); \

153 } 0)

	)

154 
	#PHYSADDRLO
(
_∑
Ë((_∑).
lﬂddr
)

	)

155 
	#PHYSADDRLOSET
(
_∑
, 
_vÆ
) \

157 (
_∑
).
lﬂddr
 = (
_vÆ
); \

158 } 0)

	)

161 
	tdmØddr_t
;

162 
	#PHYSADDRHI
(
_∑
Ë(0)

	)

163 
	#PHYSADDRHISET
(
_∑
, 
_vÆ
)

	)

164 
	#PHYSADDRLO
(
_∑
Ë((_∑))

	)

165 
	#PHYSADDRLOSET
(
_∑
, 
_vÆ
) \

167 (
_∑
Ë(
_vÆ
); \

168 } 0)

	)

173 
dmØddr_t
 
	maddr
;

174 
uöt32
 
	mÀngth
;

175 } 
	thnddma_£g_t
;

177 
	#MAX_DMA_SEGS
 4

	)

181 *
	moshdmah
;

182 
uöt
 
	m‹igsize
;

183 
uöt
 
	mn£gs
;

184 
hnddma_£g_t
 
	m£gs
[
MAX_DMA_SEGS
];

185 } 
	thnddma_£g_m≠_t
;

194 #i‡
deföed
(
BCM_RPC_NOCOPY
Ë|| deföed(
BCM_RCP_TXNOCOPY
)

196 
	#BCMEXTRAHDROOM
 220

	)

198 
	#BCMEXTRAHDROOM
 172

	)

202 #i‚de‡
SDALIGN


203 
	#SDALIGN
 32

	)

213 
	#BCMDONGLEHDRSZ
 12

	)

214 
	#BCMDONGLEPADSZ
 16

	)

216 
	#BCMDONGLEOVERHEAD
 (
BCMDONGLEHDRSZ
 + 
BCMDONGLEPADSZ
)

	)

219 #i‡
deföed
(
NO_BCMDBG_ASSERT
)

220 #unde‡
BCMDBG_ASSERT


221 #unde‡
BCMASSERT_LOG


224 #i‡
deföed
(
BCMASSERT_LOG
)

225 
	#BCMASSERT_SUPPORT


	)

238 
	#BITFIELD_MASK
(
width
) \

239 ((()1 << (
width
)Ë- 1)

	)

240 
	#GFIELD
(
vÆ
, 
fõld
) \

241 (((
vÆ
Ë>> 
fõld
 ## 
_S
Ë& fõld ## 
_M
)

	)

242 
	#SFIELD
(
vÆ
, 
fõld
, 
bôs
) \

243 (((
vÆ
Ë& (~(
fõld
 ## 
_M
 << fõld ## 
_S
))) | \

244 (()(
bôs
Ë<< 
fõld
 ## 
_S
))

	)

247 #ifde‡
BCMSMALL


248 #unde‡
BCMSPACE


249 
	#bcm•a˚
 
FALSE


	)

251 
	#BCMSPACE


	)

252 
	#bcm•a˚
 
TRUE


	)

256 
	#MAXSZ_NVRAM_VARS
 4096

	)

260 #ifde‡
DL_NVRAM


261 
	#NVRAM_ARRAY_MAXSIZE
 
DL_NVRAM


	)

263 
	#NVRAM_ARRAY_MAXSIZE
 
MAXSZ_NVRAM_VARS


	)

266 #ifde‡
BCMUSBDEV_ENABLED


267 
uöt32
 
gFWID
;

	@include/bcmdevs.h

27 #i‚def 
_BCMDEVS_H


28 
	#_BCMDEVS_H


	)

31 
	#VENDOR_EPIGRAM
 0x„da

	)

32 
	#VENDOR_BROADCOM
 0x14e4

	)

33 
	#VENDOR_3COM
 0x10b7

	)

34 
	#VENDOR_NETGEAR
 0x1385

	)

35 
	#VENDOR_DIAMOND
 0x1092

	)

36 
	#VENDOR_INTEL
 0x8086

	)

37 
	#VENDOR_DELL
 0x1028

	)

38 
	#VENDOR_HP
 0x103c

	)

39 
	#VENDOR_HP_COMPAQ
 0x0e11

	)

40 
	#VENDOR_APPLE
 0x106b

	)

41 
	#VENDOR_SI_IMAGE
 0x1095

	)

42 
	#VENDOR_BUFFALO
 0x1154

	)

43 
	#VENDOR_TI
 0x104¯

	)

44 
	#VENDOR_RICOH
 0x1180

	)

45 
	#VENDOR_JMICRON
 0x197b

	)

49 
	#VENDOR_BROADCOM_PCMCIA
 0x02d0

	)

52 
	#VENDOR_BROADCOM_SDIO
 0x00BF

	)

55 
	#BCM_DNGL_VID
 0x0a5c

	)

56 
	#BCM_DNGL_BL_PID_4328
 0xbd12

	)

57 
	#BCM_DNGL_BL_PID_4322
 0xbd13

	)

58 
	#BCM_DNGL_BL_PID_4319
 0xbd16

	)

59 
	#BCM_DNGL_BL_PID_43236
 0xbd17

	)

60 
	#BCM_DNGL_BL_PID_4332
 0xbd18

	)

61 
	#BCM_DNGL_BL_PID_4330
 0xbd19

	)

62 
	#BCM_DNGL_BL_PID_4334
 0xbd1a

	)

63 
	#BCM_DNGL_BL_PID_43239
 0xbd1b

	)

64 
	#BCM_DNGL_BL_PID_4324
 0xbd1c

	)

65 
	#BCM_DNGL_BL_PID_4360
 0xbd1d

	)

67 
	#BCM_DNGL_BDC_PID
 0x0bdc

	)

68 
	#BCM_DNGL_JTAG_PID
 0x4a44

	)

71 
	#BCM_HWUSB_PID_43239
 43239

	)

74 
	#BCM4210_DEVICE_ID
 0x1072

	)

75 
	#BCM4230_DEVICE_ID
 0x1086

	)

76 
	#BCM4401_ENET_ID
 0x170¯

	)

77 
	#BCM3352_DEVICE_ID
 0x3352

	)

78 
	#BCM3360_DEVICE_ID
 0x3360

	)

79 
	#BCM4211_DEVICE_ID
 0x4211

	)

80 
	#BCM4231_DEVICE_ID
 0x4231

	)

81 
	#BCM4303_D11B_ID
 0x4303

	)

82 
	#BCM4311_D11G_ID
 0x4311

	)

83 
	#BCM4311_D11DUAL_ID
 0x4312

	)

84 
	#BCM4311_D11A_ID
 0x4313

	)

85 
	#BCM4328_D11DUAL_ID
 0x4314

	)

86 
	#BCM4328_D11G_ID
 0x4315

	)

87 
	#BCM4328_D11A_ID
 0x4316

	)

88 
	#BCM4318_D11G_ID
 0x4318

	)

89 
	#BCM4318_D11DUAL_ID
 0x4319

	)

90 
	#BCM4318_D11A_ID
 0x431®

	)

91 
	#BCM4325_D11DUAL_ID
 0x431b

	)

92 
	#BCM4325_D11G_ID
 0x431¯

	)

93 
	#BCM4325_D11A_ID
 0x431d

	)

94 
	#BCM4306_D11G_ID
 0x4320

	)

95 
	#BCM4306_D11A_ID
 0x4321

	)

96 
	#BCM4306_UART_ID
 0x4322

	)

97 
	#BCM4306_V90_ID
 0x4323

	)

98 
	#BCM4306_D11DUAL_ID
 0x4324

	)

99 
	#BCM4306_D11G_ID2
 0x4325

	)

100 
	#BCM4321_D11N_ID
 0x4328

	)

101 
	#BCM4321_D11N2G_ID
 0x4329

	)

102 
	#BCM4321_D11N5G_ID
 0x432®

	)

103 
	#BCM4322_D11N_ID
 0x432b

	)

104 
	#BCM4322_D11N2G_ID
 0x432¯

	)

105 
	#BCM4322_D11N5G_ID
 0x432d

	)

106 
	#BCM4329_D11N_ID
 0x432ê

	)

107 
	#BCM4329_D11N2G_ID
 0x432‡

	)

108 
	#BCM4329_D11N5G_ID
 0x4330

	)

109 
	#BCM4315_D11DUAL_ID
 0x4334

	)

110 
	#BCM4315_D11G_ID
 0x4335

	)

111 
	#BCM4315_D11A_ID
 0x4336

	)

112 
	#BCM4319_D11N_ID
 0x4337

	)

113 
	#BCM4319_D11N2G_ID
 0x4338

	)

114 
	#BCM4319_D11N5G_ID
 0x4339

	)

115 
	#BCM43231_D11N2G_ID
 0x4340

	)

116 
	#BCM43221_D11N2G_ID
 0x4341

	)

117 
	#BCM43222_D11N_ID
 0x4350

	)

118 
	#BCM43222_D11N2G_ID
 0x4351

	)

119 
	#BCM43222_D11N5G_ID
 0x4352

	)

120 
	#BCM43224_D11N_ID
 0x4353

	)

121 
	#BCM43224_D11N_ID_VEN1
 0x0576

	)

122 
	#BCM43226_D11N_ID
 0x4354

	)

123 
	#BCM43236_D11N_ID
 0x4346

	)

124 
	#BCM43236_D11N2G_ID
 0x4347

	)

125 
	#BCM43236_D11N5G_ID
 0x4348

	)

126 
	#BCM43225_D11N2G_ID
 0x4357

	)

127 
	#BCM43421_D11N_ID
 0xA99D

	)

128 
	#BCM4313_D11N2G_ID
 0x4727

	)

129 
	#BCM4330_D11N_ID
 0x4360

	)

130 
	#BCM4330_D11N2G_ID
 0x4361

	)

131 
	#BCM4330_D11N5G_ID
 0x4362

	)

132 
	#BCM4336_D11N_ID
 0x4343

	)

133 
	#BCM6362_D11N_ID
 0x435‡

	)

134 
	#BCM4331_D11N_ID
 0x4331

	)

135 
	#BCM4331_D11N2G_ID
 0x4332

	)

136 
	#BCM4331_D11N5G_ID
 0x4333

	)

137 
	#BCM43237_D11N_ID
 0x4355

	)

138 
	#BCM43237_D11N5G_ID
 0x4356

	)

139 
	#BCM43227_D11N2G_ID
 0x4358

	)

140 
	#BCM43228_D11N_ID
 0x4359

	)

141 
	#BCM43228_D11N5G_ID
 0x435®

	)

142 
	#BCM43362_D11N_ID
 0x4363

	)

143 
	#BCM43239_D11N_ID
 0x4370

	)

144 
	#BCM4324_D11N_ID
 0x4374

	)

145 
	#BCM43217_D11N2G_ID
 0x43a9

	)

146 
	#BCM43131_D11N2G_ID
 0x43Ø

	)

147 
	#BCM4314_D11N2G_ID
 0x4364

	)

148 
	#BCM43142_D11N2G_ID
 0x4365

	)

149 
	#BCM4334_D11N_ID
 0x4380

	)

150 
	#BCM4334_D11N2G_ID
 0x4381

	)

151 
	#BCM4334_D11N5G_ID
 0x4382

	)

152 
	#BCM43341_D11N_ID
 0x4386

	)

153 
	#BCM43341_D11N2G_ID
 0x4387

	)

154 
	#BCM43341_D11N5G_ID
 0x4388

	)

155 
	#BCM4360_D11AC_ID
 0x43a0

	)

156 
	#BCM4360_D11AC2G_ID
 0x43a1

	)

157 
	#BCM4360_D11AC5G_ID
 0x43a2

	)

160 
	#BCM943228HMB_SSID_VEN1
 0x0607

	)

161 
	#BCM94313HMGBL_SSID_VEN1
 0x0608

	)

162 
	#BCM94313HMG_SSID_VEN1
 0x0609

	)

165 
	#BCM4335_D11AC_ID
 0x43´

	)

166 
	#BCM4335_D11AC2G_ID
 0x43af

	)

167 
	#BCM4335_D11AC5G_ID
 0x43b0

	)

168 
	#BCM4352_D11AC_ID
 0x43b1

	)

169 
	#BCM4352_D11AC2G_ID
 0x43b2

	)

170 
	#BCM4352_D11AC5G_ID
 0x43b3

	)

172 
	#BCMGPRS_UART_ID
 0x4333

	)

173 
	#BCMGPRS2_UART_ID
 0x4344

	)

174 
	#FPGA_JTAGM_ID
 0x43f0

	)

175 
	#BCM_JTAGM_ID
 0x43f1

	)

176 
	#SDIOH_FPGA_ID
 0x43f2

	)

177 
	#BCM_SDIOH_ID
 0x43f3

	)

178 
	#SDIOD_FPGA_ID
 0x43f4

	)

179 
	#SPIH_FPGA_ID
 0x43f5

	)

180 
	#BCM_SPIH_ID
 0x43f6

	)

181 
	#MIMO_FPGA_ID
 0x43f8

	)

182 
	#BCM_JTAGM2_ID
 0x43f9

	)

183 
	#SDHCI_FPGA_ID
 0x43Á

	)

184 
	#BCM4402_ENET_ID
 0x4402

	)

185 
	#BCM4402_V90_ID
 0x4403

	)

186 
	#BCM4410_DEVICE_ID
 0x4410

	)

187 
	#BCM4412_DEVICE_ID
 0x4412

	)

188 
	#BCM4430_DEVICE_ID
 0x4430

	)

189 
	#BCM4432_DEVICE_ID
 0x4432

	)

190 
	#BCM4704_ENET_ID
 0x4706

	)

191 
	#BCM4710_DEVICE_ID
 0x4710

	)

192 
	#BCM47XX_AUDIO_ID
 0x4711

	)

193 
	#BCM47XX_V90_ID
 0x4712

	)

194 
	#BCM47XX_ENET_ID
 0x4713

	)

195 
	#BCM47XX_EXT_ID
 0x4714

	)

196 
	#BCM47XX_GMAC_ID
 0x4715

	)

197 
	#BCM47XX_USBH_ID
 0x4716

	)

198 
	#BCM47XX_USBD_ID
 0x4717

	)

199 
	#BCM47XX_IPSEC_ID
 0x4718

	)

200 
	#BCM47XX_ROBO_ID
 0x4719

	)

201 
	#BCM47XX_USB20H_ID
 0x471®

	)

202 
	#BCM47XX_USB20D_ID
 0x471b

	)

203 
	#BCM47XX_ATA100_ID
 0x471d

	)

204 
	#BCM47XX_SATAXOR_ID
 0x471ê

	)

205 
	#BCM47XX_GIGETH_ID
 0x471‡

	)

206 
	#BCM4712_MIPS_ID
 0x4720

	)

207 
	#BCM4716_DEVICE_ID
 0x4722

	)

208 
	#BCM47XX_SMBUS_EMU_ID
 0x47„

	)

209 
	#BCM47XX_XOR_EMU_ID
 0x47f‡

	)

210 
	#EPI41210_DEVICE_ID
 0xa0Á

	)

211 
	#EPI41230_DEVICE_ID
 0xa10ê

	)

212 
	#JINVANI_SDIOH_ID
 0x4743

	)

213 
	#BCM27XX_SDIOH_ID
 0x2702

	)

214 
	#PCIXX21_FLASHMEDIA_ID
 0x803b

	)

215 
	#PCIXX21_SDIOH_ID
 0x803¯

	)

216 
	#R5C822_SDIOH_ID
 0x0822

	)

217 
	#JMICRON_SDIOH_ID
 0x2381

	)

220 
	#BCM4306_CHIP_ID
 0x4306

	)

221 
	#BCM4311_CHIP_ID
 0x4311

	)

222 
	#BCM43111_CHIP_ID
 43111

	)

223 
	#BCM43112_CHIP_ID
 43112

	)

224 
	#BCM4312_CHIP_ID
 0x4312

	)

225 
	#BCM4313_CHIP_ID
 0x4313

	)

226 
	#BCM43131_CHIP_ID
 43131

	)

227 
	#BCM4315_CHIP_ID
 0x4315

	)

228 
	#BCM4318_CHIP_ID
 0x4318

	)

229 
	#BCM4319_CHIP_ID
 0x4319

	)

230 
	#BCM4320_CHIP_ID
 0x4320

	)

231 
	#BCM4321_CHIP_ID
 0x4321

	)

232 
	#BCM43217_CHIP_ID
 43217

	)

233 
	#BCM4322_CHIP_ID
 0x4322

	)

234 
	#BCM43221_CHIP_ID
 43221

	)

235 
	#BCM43222_CHIP_ID
 43222

	)

236 
	#BCM43224_CHIP_ID
 43224

	)

237 
	#BCM43225_CHIP_ID
 43225

	)

238 
	#BCM43227_CHIP_ID
 43227

	)

239 
	#BCM43228_CHIP_ID
 43228

	)

240 
	#BCM43226_CHIP_ID
 43226

	)

241 
	#BCM43231_CHIP_ID
 43231

	)

242 
	#BCM43234_CHIP_ID
 43234

	)

243 
	#BCM43235_CHIP_ID
 43235

	)

244 
	#BCM43236_CHIP_ID
 43236

	)

245 
	#BCM43237_CHIP_ID
 43237

	)

246 
	#BCM43238_CHIP_ID
 43238

	)

247 
	#BCM43239_CHIP_ID
 43239

	)

248 
	#BCM43420_CHIP_ID
 43420

	)

249 
	#BCM43421_CHIP_ID
 43421

	)

250 
	#BCM43428_CHIP_ID
 43428

	)

251 
	#BCM43431_CHIP_ID
 43431

	)

252 
	#BCM43460_CHIP_ID
 43460

	)

253 
	#BCM4325_CHIP_ID
 0x4325

	)

254 
	#BCM4328_CHIP_ID
 0x4328

	)

255 
	#BCM4329_CHIP_ID
 0x4329

	)

256 
	#BCM4331_CHIP_ID
 0x4331

	)

257 
	#BCM4336_CHIP_ID
 0x4336

	)

258 
	#BCM43362_CHIP_ID
 43362

	)

259 
	#BCM4330_CHIP_ID
 0x4330

	)

260 
	#BCM6362_CHIP_ID
 0x6362

	)

261 
	#BCM4314_CHIP_ID
 0x4314

	)

262 
	#BCM43142_CHIP_ID
 43142

	)

263 
	#BCM4324_CHIP_ID
 0x4324

	)

264 
	#BCM43242_CHIP_ID
 43242

	)

265 
	#BCM4334_CHIP_ID
 0x4334

	)

266 
	#BCM4360_CHIP_ID
 0x4360

	)

267 
	#BCM4352_CHIP_ID
 0x4352

	)

268 
	#BCM43526_CHIP_ID
 0xAA06

	)

269 
	#BCM43341_CHIP_ID
 43341

	)

270 
	#BCM43342_CHIP_ID
 43342

	)

272 
	#BCM4335_CHIP_ID
 0x4335

	)

274 
	#BCM4342_CHIP_ID
 4342

	)

275 
	#BCM4402_CHIP_ID
 0x4402

	)

276 
	#BCM4704_CHIP_ID
 0x4704

	)

277 
	#BCM4706_CHIP_ID
 0x5300

	)

278 
	#BCM4710_CHIP_ID
 0x4710

	)

279 
	#BCM4712_CHIP_ID
 0x4712

	)

280 
	#BCM4716_CHIP_ID
 0x4716

	)

281 
	#BCM47162_CHIP_ID
 47162

	)

282 
	#BCM4748_CHIP_ID
 0x4748

	)

283 
	#BCM4749_CHIP_ID
 0x4749

	)

284 
	#BCM4785_CHIP_ID
 0x4785

	)

285 
	#BCM5350_CHIP_ID
 0x5350

	)

286 
	#BCM5352_CHIP_ID
 0x5352

	)

287 
	#BCM5354_CHIP_ID
 0x5354

	)

288 
	#BCM5365_CHIP_ID
 0x5365

	)

289 
	#BCM5356_CHIP_ID
 0x5356

	)

290 
	#BCM5357_CHIP_ID
 0x5357

	)

291 
	#BCM53572_CHIP_ID
 53572

	)

294 
	#BCM4303_PKG_ID
 2

	)

295 
	#BCM4309_PKG_ID
 1

	)

296 
	#BCM4712LARGE_PKG_ID
 0

	)

297 
	#BCM4712SMALL_PKG_ID
 1

	)

298 
	#BCM4712MID_PKG_ID
 2

	)

299 
	#BCM4328USBD11G_PKG_ID
 2

	)

300 
	#BCM4328USBDUAL_PKG_ID
 3

	)

301 
	#BCM4328SDIOD11G_PKG_ID
 4

	)

302 
	#BCM4328SDIODUAL_PKG_ID
 5

	)

303 
	#BCM4329_289PIN_PKG_ID
 0

	)

304 
	#BCM4329_182PIN_PKG_ID
 1

	)

305 
	#BCM5354E_PKG_ID
 1

	)

306 
	#BCM4716_PKG_ID
 8

	)

307 
	#BCM4717_PKG_ID
 9

	)

308 
	#BCM4718_PKG_ID
 10

	)

309 
	#BCM5356_PKG_NONMODE
 1

	)

310 
	#BCM5358U_PKG_ID
 8

	)

311 
	#BCM5358_PKG_ID
 9

	)

312 
	#BCM47186_PKG_ID
 10

	)

313 
	#BCM5357_PKG_ID
 11

	)

314 
	#BCM5356U_PKG_ID
 12

	)

315 
	#BCM53572_PKG_ID
 8

	)

316 
	#BCM5357C0_PKG_ID
 8

	)

317 
	#BCM47188_PKG_ID
 9

	)

318 
	#BCM5358C0_PKG_ID
 0x®

	)

319 
	#BCM5356C0_PKG_ID
 0xb

	)

320 
	#BCM4331TT_PKG_ID
 8

	)

321 
	#BCM4331TN_PKG_ID
 9

	)

322 
	#BCM4331TNA0_PKG_ID
 0xb

	)

323 
	#BCM4706L_PKG_ID
 1

	)

325 
	#HDLSIM5350_PKG_ID
 1

	)

326 
	#HDLSIM_PKG_ID
 14

	)

327 
	#HWSIM_PKG_ID
 15

	)

328 
	#BCM43224_FAB_CSM
 0x8

	)

329 
	#BCM43224_FAB_SMIC
 0x®

	)

330 
	#BCM4336_WLBGA_PKG_ID
 0x8

	)

331 
	#BCM4330_WLBGA_PKG_ID
 0x0

	)

332 
	#BCM4314PCIE_ARM_PKG_ID
 (8 | 0Ë

	)

333 
	#BCM4314SDIO_PKG_ID
 (8 | 1Ë

	)

334 
	#BCM4314PCIE_PKG_ID
 (8 | 2Ë

	)

335 
	#BCM4314SDIO_ARM_PKG_ID
 (8 | 3Ë

	)

336 
	#BCM4314SDIO_FPBGA_PKG_ID
 (8 | 4Ë

	)

337 
	#BCM4314DEV_PKG_ID
 (8 | 6Ë

	)

339 
	#PCIXX21_FLASHMEDIA0_ID
 0x8033

	)

340 
	#PCIXX21_SDIOH0_ID
 0x8034

	)

343 
	#BFL_BTC2WIRE
 0x00000001

	)

344 
	#BFL_BTCOEX
 0x00000001

	)

345 
	#BFL_PACTRL
 0x00000002

	)

346 
	#BFL_AIRLINEMODE
 0x00000004

	)

347 
	#BFL_ADCDIV
 0x00000008

	)

348 
	#BFL_RFPLL
 0x00000008

	)

349 
	#BFL_ENETROBO
 0x00000010

	)

350 
	#BFL_NOPLLDOWN
 0x00000020

	)

351 
	#BFL_CCKHIPWR
 0x00000040

	)

352 
	#BFL_ENETADM
 0x00000080

	)

353 
	#BFL_ENETVLAN
 0x00000100

	)

354 
	#BFL_UNUSED
 0x00000200

	)

355 
	#BFL_NOPCI
 0x00000400

	)

356 
	#BFL_FEM
 0x00000800

	)

357 
	#BFL_EXTLNA
 0x00001000

	)

358 
	#BFL_HGPA
 0x00002000

	)

359 
	#BFL_BTC2WIRE_ALTGPIO
 0x00004000

	)

360 
	#BFL_ALTIQ
 0x00008000

	)

361 
	#BFL_NOPA
 0x00010000

	)

362 
	#BFL_RSSIINV
 0x00020000

	)

363 
	#BFL_PAREF
 0x00040000

	)

364 
	#BFL_3TSWITCH
 0x00080000

	)

365 
	#BFL_PHASESHIFT
 0x00100000

	)

366 
	#BFL_BUCKBOOST
 0x00200000

	)

367 
	#BFL_FEM_BT
 0x00400000

	)

368 
	#BFL_NOCBUCK
 0x00800000

	)

369 
	#BFL_CCKFAVOREVM
 0x01000000

	)

370 
	#BFL_PALDO
 0x02000000

	)

371 
	#BFL_LNLDO2_2P5
 0x04000000

	)

372 
	#BFL_FASTPWR
 0x08000000

	)

373 
	#BFL_UCPWRCTL_MININDX
 0x08000000

	)

374 
	#BFL_EXTLNA_5GHz
 0x10000000

	)

375 
	#BFL_TRSW_1by2
 0x20000000

	)

376 
	#BFL_LO_TRSW_R_5GHz
 0x40000000

	)

377 
	#BFL_ELNA_GAINDEF
 0x80000000

	)

380 
	#BFL_EXTLNA_TX
 0x20000000

	)

383 
	#BFL2_RXBB_INT_REG_DIS
 0x00000001

	)

384 
	#BFL2_APLL_WAR
 0x00000002

	)

385 
	#BFL2_TXPWRCTRL_EN
 0x00000004

	)

386 
	#BFL2_2X4_DIV
 0x00000008

	)

387 
	#BFL2_5G_PWRGAIN
 0x00000010

	)

388 
	#BFL2_PCIEWAR_OVR
 0x00000020

	)

389 
	#BFL2_CAESERS_BRD
 0x00000040

	)

390 
	#BFL2_BTC3WIRE
 0x00000080

	)

391 
	#BFL2_BTCLEGACY
 0x00000080

	)

394 
	#BFL2_SKWRKFEM_BRD
 0x00000100

	)

395 
	#BFL2_SPUR_WAR
 0x00000200

	)

396 
	#BFL2_GPLL_WAR
 0x00000400

	)

397 
	#BFL2_TRISTATE_LED
 0x00000800

	)

398 
	#BFL2_SINGLEANT_CCK
 0x00001000

	)

399 
	#BFL2_2G_SPUR_WAR
 0x00002000

	)

400 
	#BFL2_BPHY_ALL_TXCORES
 0x00004000

	)

401 
	#BFL2_FCC_BANDEDGE_WAR
 0x00008000

	)

402 
	#BFL2_GPLL_WAR2
 0x00010000

	)

403 
	#BFL2_IPALVLSHIFT_3P3
 0x00020000

	)

404 
	#BFL2_INTERNDET_TXIQCAL
 0x00040000

	)

405 
	#BFL2_XTALBUFOUTEN
 0x00080000

	)

409 
	#BFL2_ANAPACTRL_2G
 0x00100000

	)

410 
	#BFL2_ANAPACTRL_5G
 0x00200000

	)

411 
	#BFL2_ELNACTRL_TRSW_2G
 0x00400000

	)

412 
	#BFL2_BT_SHARE_ANT0
 0x00800000

	)

413 
	#BFL2_TEMPSENSE_HIGHER
 0x01000000

	)

418 
	#BFL2_BTC3WIREONLY
 0x02000000

	)

419 
	#BFL2_PWR_NOMINAL
 0x04000000

	)

420 
	#BFL2_EXTLNA_PWRSAVE
 0x08000000

	)

422 
	#BFL2_4313_RADIOREG
 0x10000000

	)

424 
	#BFL2_SDR_EN
 0x20000000

	)

427 
	#BOARD_GPIO_BTC3W_IN
 0x850

	)

428 
	#BOARD_GPIO_BTC3W_OUT
 0x020

	)

429 
	#BOARD_GPIO_BTCMOD_IN
 0x010

	)

430 
	#BOARD_GPIO_BTCMOD_OUT
 0x020

	)

431 
	#BOARD_GPIO_BTC_IN
 0x080

	)

432 
	#BOARD_GPIO_BTC_OUT
 0x100

	)

433 
	#BOARD_GPIO_PACTRL
 0x200

	)

434 
	#BOARD_GPIO_12
 0x1000

	)

435 
	#BOARD_GPIO_13
 0x2000

	)

436 
	#BOARD_GPIO_BTC4_IN
 0x0800

	)

437 
	#BOARD_GPIO_BTC4_BT
 0x2000

	)

438 
	#BOARD_GPIO_BTC4_STAT
 0x4000

	)

439 
	#BOARD_GPIO_BTC4_WLAN
 0x8000

	)

440 
	#BOARD_GPIO_1_WLAN_PWR
 0x02

	)

441 
	#BOARD_GPIO_3_WLAN_PWR
 0x08

	)

442 
	#BOARD_GPIO_4_WLAN_PWR
 0x10

	)

444 
	#GPIO_BTC4W_OUT_4312
 0x010

	)

445 
	#GPIO_BTC4W_OUT_43224
 0x020

	)

446 
	#GPIO_BTC4W_OUT_43224_SHARED
 0x0e0

	)

447 
	#GPIO_BTC4W_OUT_43225
 0x0e0

	)

448 
	#GPIO_BTC4W_OUT_43421
 0x020

	)

449 
	#GPIO_BTC4W_OUT_4313
 0x060

	)

450 
	#GPIO_BTC4W_OUT_4331_SHARED
 0x010

	)

452 
	#PCI_CFG_GPIO_SCS
 0x10

	)

453 
	#PCI_CFG_GPIO_HWRAD
 0x20

	)

454 
	#PCI_CFG_GPIO_XTAL
 0x40

	)

455 
	#PCI_CFG_GPIO_PLL
 0x80

	)

458 
	#PLL_DELAY
 150

	)

459 
	#FREF_DELAY
 200

	)

460 
	#MIN_SLOW_CLK
 32

	)

461 
	#XTAL_ON_DELAY
 1000

	)

465 
	#BCM943341WLABGS_SSID
 0x062d

	)

468 
	#GPIO_NUMPINS
 32

	)

471 
	#RDL_RAM_BASE_4319
 0x60000000

	)

472 
	#RDL_RAM_BASE_4329
 0x60000000

	)

473 
	#RDL_RAM_SIZE_4319
 0x48000

	)

474 
	#RDL_RAM_SIZE_4329
 0x48000

	)

475 
	#RDL_RAM_SIZE_43236
 0x70000

	)

476 
	#RDL_RAM_BASE_43236
 0x60000000

	)

477 
	#RDL_RAM_SIZE_4328
 0x60000

	)

478 
	#RDL_RAM_BASE_4328
 0x80000000

	)

479 
	#RDL_RAM_SIZE_4322
 0x60000

	)

480 
	#RDL_RAM_BASE_4322
 0x60000000

	)

483 
	#MUXENAB_UART
 0x00000001

	)

484 
	#MUXENAB_GPIO
 0x00000002

	)

485 
	#MUXENAB_ERCX
 0x00000004

	)

486 
	#MUXENAB_JTAG
 0x00000008

	)

487 
	#MUXENAB_HOST_WAKE
 0x00000010

	)

488 
	#MUXENAB_I2S_EN
 0x00000020

	)

489 
	#MUXENAB_I2S_MASTER
 0x00000040

	)

490 
	#MUXENAB_I2S_FULL
 0x00000080

	)

491 
	#MUXENAB_SFLASH
 0x00000100

	)

492 
	#MUXENAB_RFSWCTRL0
 0x00000200

	)

493 
	#MUXENAB_RFSWCTRL1
 0x00000400

	)

494 
	#MUXENAB_RFSWCTRL2
 0x00000800

	)

495 
	#MUXENAB_SECI
 0x00001000

	)

496 
	#MUXENAB_BT_LEGACY
 0x00002000

	)

497 
	#MUXENAB_HOST_WAKE1
 0x00004000

	)

500 
	#FLASH_KERNEL_NFLASH
 0x00000001

	)

501 
	#FLASH_BOOT_NFLASH
 0x00000002

	)

	@include/bcmendian.h

30 #i‚de‡
_BCMENDIAN_H_


31 
	#_BCMENDIAN_H_


	)

33 
	~<ty≥defs.h
>

36 
	#BCMSWAP16
(
vÆ
) \

37 ((
uöt16
)((((uöt16)(
vÆ
) & (uint16)0x00ffU) << 8) | \

38 (((
uöt16
)(
vÆ
Ë& (uöt16)0xff00UË>> 8)))

	)

41 
	#BCMSWAP32
(
vÆ
) \

42 ((
uöt32
)((((uöt32)(
vÆ
) & (uint32)0x000000ffU) << 24) | \

43 (((
uöt32
)(
vÆ
) & (uint32)0x0000ff00U) << 8) | \

44 (((
uöt32
)(
vÆ
) & (uint32)0x00ff0000U) >> 8) | \

45 (((
uöt32
)(
vÆ
Ë& (uöt32)0xff000000UË>> 24)))

	)

48 
	#BCMSWAP32BY16
(
vÆ
) \

49 ((
uöt32
)((((uöt32)(
vÆ
) & (uint32)0x0000ffffU) << 16) | \

50 (((
uöt32
)(
vÆ
Ë& (uöt32)0xffff0000UË>> 16)))

	)

56 #i‚de‡
ht⁄16


57 
	#HTON16
(
i
Ë
	`BCMSWAP16
(i)

	)

58 
	#ht⁄16
(
i
Ë
	`bcmsw≠16
(i)

	)

59 
	#HTON32
(
i
Ë
	`BCMSWAP32
(i)

	)

60 
	#ht⁄32
(
i
Ë
	`bcmsw≠32
(i)

	)

61 
	#NTOH16
(
i
Ë
	`BCMSWAP16
(i)

	)

62 
	#¡oh16
(
i
Ë
	`bcmsw≠16
(i)

	)

63 
	#NTOH32
(
i
Ë
	`BCMSWAP32
(i)

	)

64 
	#¡oh32
(
i
Ë
	`bcmsw≠32
(i)

	)

65 
	#LTOH16
(
i
Ë(i)

	)

66 
	#…oh16
(
i
Ë(i)

	)

67 
	#LTOH32
(
i
Ë(i)

	)

68 
	#…oh32
(
i
Ë(i)

	)

69 
	#HTOL16
(
i
Ë(i)

	)

70 
	#htﬁ16
(
i
Ë(i)

	)

71 
	#HTOL32
(
i
Ë(i)

	)

72 
	#htﬁ32
(
i
Ë(i)

	)

75 
	#…oh16_buf
(
buf
, 
i
)

	)

76 
	#htﬁ16_buf
(
buf
, 
i
)

	)

79 
	#lﬂd32_ua
(
a
Ë
	`…oh32_ua
◊)

	)

80 
	#°‹e32_ua
(
a
, 
v
Ë
	`htﬁ32_ua_°‹e
(v,á)

	)

81 
	#lﬂd16_ua
(
a
Ë
	`…oh16_ua
◊)

	)

82 
	#°‹e16_ua
(
a
, 
v
Ë
	`htﬁ16_ua_°‹e
(v,á)

	)

84 
	#_LTOH16_UA
(
˝
Ë((˝)[0] | ((˝)[1] << 8))

	)

85 
	#_LTOH32_UA
(
˝
Ë((˝)[0] | ((˝)[1] << 8Ë| ((˝)[2] << 16Ë| ((˝)[3] << 24))

	)

86 
	#_NTOH16_UA
(
˝
Ë(((˝)[0] << 8Ë| (˝)[1])

	)

87 
	#_NTOH32_UA
(
˝
Ë(((˝)[0] << 24Ë| ((˝)[1] << 16Ë| ((˝)[2] << 8Ë| (˝)[3])

	)

89 
	#…oh_ua
(
±r
) \

90 ((*(
±r
)Ë=(
uöt8
) ? *(const uint8 *)(ptr) : \

91 (*(
±r
)Ë=(
uöt16
Ë? 
	`_LTOH16_UA
((c⁄° 
uöt8
 *)(ptr)) : \

92 (*(
±r
)Ë=(
uöt32
Ë? 
	`_LTOH32_UA
((c⁄° 
uöt8
 *)(ptr)) : \

93 *(
uöt8
 *)0)

	)

95 
	#¡oh_ua
(
±r
) \

96 ((*(
±r
)Ë=(
uöt8
) ? *(const uint8 *)(ptr) : \

97 (*(
±r
)Ë=(
uöt16
Ë? 
	`_NTOH16_UA
((c⁄° 
uöt8
 *)(ptr)) : \

98 (*(
±r
)Ë=(
uöt32
Ë? 
	`_NTOH32_UA
((c⁄° 
uöt8
 *)(ptr)) : \

99 *(
uöt8
 *)0)

	)

101 #ifde‡
__GNUC__


107 
	#bcmsw≠16
(
vÆ
) ({ \

108 
uöt16
 
_vÆ
 = (
vÆ
); \

109 
	`BCMSWAP16
(
_vÆ
); \

110 })

	)

112 
	#bcmsw≠32
(
vÆ
) ({ \

113 
uöt32
 
_vÆ
 = (
vÆ
); \

114 
	`BCMSWAP32
(
_vÆ
); \

115 })

	)

117 
	#bcmsw≠32by16
(
vÆ
) ({ \

118 
uöt32
 
_vÆ
 = (
vÆ
); \

119 
	`BCMSWAP32BY16
(
_vÆ
); \

120 })

	)

122 
	#bcmsw≠16_buf
(
buf
, 
Àn
) ({ \

123 
uöt16
 *
_buf
 = (uöt16 *)(
buf
); \

124 
uöt
 
_wds
 = (
Àn
) / 2; \

125 
_wds
--) { \

126 *
_buf
 = 
	`bcmsw≠16
(*_buf); \

127 
_buf
++; \

129 })

	)

131 
	#htﬁ16_ua_°‹e
(
vÆ
, 
byãs
) ({ \

132 
uöt16
 
_vÆ
 = (
vÆ
); \

133 
uöt8
 *
_byãs
 = (uöt8 *)(
byãs
); \

134 
_byãs
[0] = 
_vÆ
 & 0xff; \

135 
_byãs
[1] = 
_vÆ
 >> 8; \

136 })

	)

138 
	#htﬁ32_ua_°‹e
(
vÆ
, 
byãs
) ({ \

139 
uöt32
 
_vÆ
 = (
vÆ
); \

140 
uöt8
 *
_byãs
 = (uöt8 *)(
byãs
); \

141 
_byãs
[0] = 
_vÆ
 & 0xff; \

142 
_byãs
[1] = (
_vÆ
 >> 8) & 0xff; \

143 
_byãs
[2] = (
_vÆ
 >> 16) & 0xff; \

144 
_byãs
[3] = 
_vÆ
 >> 24; \

145 })

	)

147 
	#ht⁄16_ua_°‹e
(
vÆ
, 
byãs
) ({ \

148 
uöt16
 
_vÆ
 = (
vÆ
); \

149 
uöt8
 *
_byãs
 = (uöt8 *)(
byãs
); \

150 
_byãs
[0] = 
_vÆ
 >> 8; \

151 
_byãs
[1] = 
_vÆ
 & 0xff; \

152 })

	)

154 
	#ht⁄32_ua_°‹e
(
vÆ
, 
byãs
) ({ \

155 
uöt32
 
_vÆ
 = (
vÆ
); \

156 
uöt8
 *
_byãs
 = (uöt8 *)(
byãs
); \

157 
_byãs
[0] = 
_vÆ
 >> 24; \

158 
_byãs
[1] = (
_vÆ
 >> 16) & 0xff; \

159 
_byãs
[2] = (
_vÆ
 >> 8) & 0xff; \

160 
_byãs
[3] = 
_vÆ
 & 0xff; \

161 })

	)

163 
	#…oh16_ua
(
byãs
) ({ \

164 c⁄° 
uöt8
 *
_byãs
 = (c⁄° uöt8 *)(
byãs
); \

165 
	`_LTOH16_UA
(
_byãs
); \

166 })

	)

168 
	#…oh32_ua
(
byãs
) ({ \

169 c⁄° 
uöt8
 *
_byãs
 = (c⁄° uöt8 *)(
byãs
); \

170 
	`_LTOH32_UA
(
_byãs
); \

171 })

	)

173 
	#¡oh16_ua
(
byãs
) ({ \

174 c⁄° 
uöt8
 *
_byãs
 = (c⁄° uöt8 *)(
byãs
); \

175 
	`_NTOH16_UA
(
_byãs
); \

176 })

	)

178 
	#¡oh32_ua
(
byãs
) ({ \

179 c⁄° 
uöt8
 *
_byãs
 = (c⁄° uöt8 *)(
byãs
); \

180 
	`_NTOH32_UA
(
_byãs
); \

181 })

	)

186 
INLINE
 
uöt16


187 
	$bcmsw≠16
(
uöt16
 
vÆ
)

189  
	`BCMSWAP16
(
vÆ
);

190 
	}
}

192 
INLINE
 
uöt32


193 
	$bcmsw≠32
(
uöt32
 
vÆ
)

195  
	`BCMSWAP32
(
vÆ
);

196 
	}
}

198 
INLINE
 
uöt32


199 
	$bcmsw≠32by16
(
uöt32
 
vÆ
)

201  
	`BCMSWAP32BY16
(
vÆ
);

202 
	}
}

207 
INLINE
 

208 
	$bcmsw≠16_buf
(
uöt16
 *
buf
, 
uöt
 
Àn
)

210 
Àn
 =Üen / 2;

212 
Àn
--) {

213 *
buf
 = 
	`bcmsw≠16
(*buf);

214 
buf
++;

216 
	}
}

221 
INLINE
 

222 
	$htﬁ16_ua_°‹e
(
uöt16
 
vÆ
, 
uöt8
 *
byãs
)

224 
byãs
[0] = 
vÆ
 & 0xff;

225 
byãs
[1] = 
vÆ
 >> 8;

226 
	}
}

231 
INLINE
 

232 
	$htﬁ32_ua_°‹e
(
uöt32
 
vÆ
, 
uöt8
 *
byãs
)

234 
byãs
[0] = 
vÆ
 & 0xff;

235 
byãs
[1] = (
vÆ
 >> 8) & 0xff;

236 
byãs
[2] = (
vÆ
 >> 16) & 0xff;

237 
byãs
[3] = 
vÆ
 >> 24;

238 
	}
}

243 
INLINE
 

244 
	$ht⁄16_ua_°‹e
(
uöt16
 
vÆ
, 
uöt8
 *
byãs
)

246 
byãs
[0] = 
vÆ
 >> 8;

247 
byãs
[1] = 
vÆ
 & 0xff;

248 
	}
}

253 
INLINE
 

254 
	$ht⁄32_ua_°‹e
(
uöt32
 
vÆ
, 
uöt8
 *
byãs
)

256 
byãs
[0] = 
vÆ
 >> 24;

257 
byãs
[1] = (
vÆ
 >> 16) & 0xff;

258 
byãs
[2] = (
vÆ
 >> 8) & 0xff;

259 
byãs
[3] = 
vÆ
 & 0xff;

260 
	}
}

265 
INLINE
 
uöt16


266 
	$…oh16_ua
(c⁄° *
byãs
)

268  
	`_LTOH16_UA
((c⁄° 
uöt8
 *)
byãs
);

269 
	}
}

274 
INLINE
 
uöt32


275 
	$…oh32_ua
(c⁄° *
byãs
)

277  
	`_LTOH32_UA
((c⁄° 
uöt8
 *)
byãs
);

278 
	}
}

283 
INLINE
 
uöt16


284 
	$¡oh16_ua
(c⁄° *
byãs
)

286  
	`_NTOH16_UA
((c⁄° 
uöt8
 *)
byãs
);

287 
	}
}

292 
INLINE
 
uöt32


293 
	$¡oh32_ua
(c⁄° *
byãs
)

295  
	`_NTOH32_UA
((c⁄° 
uöt8
 *)
byãs
);

296 
	}
}

	@include/bcmpcispi.h

26 #i‚def 
_BCM_PCI_SPI_H


27 
	#_BCM_PCI_SPI_H


	)

30 #i‚de‡
PAD


31 
	#_PADLINE
(
löe
Ë
∑d
 ## 
	)
line

32 
	#_XSTR
(
löe
Ë
	`_PADLINE
÷öe)

	)

33 
	#PAD
 
	`_XSTR
(
__LINE__
)

	)

38 
uöt32
 
	m•ih_˘æ
;

39 
uöt32
 
	m•ih_°©
;

40 
uöt32
 
	m•ih_d©a
;

41 
uöt32
 
	m•ih_ext
;

42 
uöt32
 
	mPAD
[4];

44 
uöt32
 
	m•ih_gpio_˘æ
;

45 
uöt32
 
	m•ih_gpio_d©a
;

46 
uöt32
 
	mPAD
[6];

48 
uöt32
 
	m•ih_öt_edge
;

49 
uöt32
 
	m•ih_öt_pﬁ
;

51 
uöt32
 
	m•ih_öt_mask
;

52 
uöt32
 
	m•ih_öt_°©us
;

53 
uöt32
 
	mPAD
[4];

55 
uöt32
 
	m•ih_hex_di•
;

56 
uöt32
 
	m•ih_cuºít_ma
;

57 
uöt32
 
	mPAD
[1];

58 
uöt32
 
	m•ih_di•_£l
;

59 
uöt32
 
	mPAD
[4];

60 
uöt32
 
	mPAD
[8];

61 
uöt32
 
	mPAD
[8];

62 
uöt32
 
	m•ih_∂l_˘æ
;

63 
uöt32
 
	m•ih_∂l_°©us
;

64 
uöt32
 
	m•ih_xèl_‰eq
;

65 
uöt32
 
	m•ih_˛k_cou¡
;

67 } 
	t•ih_ªgs_t
;

70 
uöt32
 
	mcfg_•a˚
[0x40];

71 
uöt32
 
	mP_IMG_CTRL0
;

73 
uöt32
 
	mP_BA0
;

74 
uöt32
 
	mP_AM0
;

75 
uöt32
 
	mP_TA0
;

76 
uöt32
 
	mP_IMG_CTRL1
;

77 
uöt32
 
	mP_BA1
;

78 
uöt32
 
	mP_AM1
;

79 
uöt32
 
	mP_TA1
;

80 
uöt32
 
	mP_IMG_CTRL2
;

81 
uöt32
 
	mP_BA2
;

82 
uöt32
 
	mP_AM2
;

83 
uöt32
 
	mP_TA2
;

84 
uöt32
 
	mP_IMG_CTRL3
;

85 
uöt32
 
	mP_BA3
;

86 
uöt32
 
	mP_AM3
;

87 
uöt32
 
	mP_TA3
;

88 
uöt32
 
	mP_IMG_CTRL4
;

89 
uöt32
 
	mP_BA4
;

90 
uöt32
 
	mP_AM4
;

91 
uöt32
 
	mP_TA4
;

92 
uöt32
 
	mP_IMG_CTRL5
;

93 
uöt32
 
	mP_BA5
;

94 
uöt32
 
	mP_AM5
;

95 
uöt32
 
	mP_TA5
;

96 
uöt32
 
	mP_ERR_CS
;

97 
uöt32
 
	mP_ERR_ADDR
;

98 
uöt32
 
	mP_ERR_DATA
;

100 
uöt32
 
	mPAD
[5];

102 
uöt32
 
	mWB_CONF_SPC_BAR
;

103 
uöt32
 
	mW_IMG_CTRL1
;

104 
uöt32
 
	mW_BA1
;

105 
uöt32
 
	mW_AM1
;

106 
uöt32
 
	mW_TA1
;

107 
uöt32
 
	mW_IMG_CTRL2
;

108 
uöt32
 
	mW_BA2
;

109 
uöt32
 
	mW_AM2
;

110 
uöt32
 
	mW_TA2
;

111 
uöt32
 
	mW_IMG_CTRL3
;

112 
uöt32
 
	mW_BA3
;

113 
uöt32
 
	mW_AM3
;

114 
uöt32
 
	mW_TA3
;

115 
uöt32
 
	mW_IMG_CTRL4
;

116 
uöt32
 
	mW_BA4
;

117 
uöt32
 
	mW_AM4
;

118 
uöt32
 
	mW_TA4
;

119 
uöt32
 
	mW_IMG_CTRL5
;

120 
uöt32
 
	mW_BA5
;

121 
uöt32
 
	mW_AM5
;

122 
uöt32
 
	mW_TA5
;

123 
uöt32
 
	mW_ERR_CS
;

124 
uöt32
 
	mW_ERR_ADDR
;

125 
uöt32
 
	mW_ERR_DATA
;

126 
uöt32
 
	mCNF_ADDR
;

127 
uöt32
 
	mCNF_DATA
;

129 
uöt32
 
	mINT_ACK
;

130 
uöt32
 
	mICR
;

131 
uöt32
 
	mISR
;

132 } 
	t•ih_pcúegs_t
;

139 
	#PCI_INT_PROP_EN
 (1 << 0Ë

	)

140 
	#PCI_WB_ERR_INT_EN
 (1 << 1Ë

	)

141 
	#PCI_PCI_ERR_INT_EN
 (1 << 2Ë

	)

142 
	#PCI_PAR_ERR_INT_EN
 (1 << 3Ë

	)

143 
	#PCI_SYS_ERR_INT_EN
 (1 << 4Ë

	)

144 
	#PCI_SOFTWARE_RESET
 (1U << 31Ë

	)

148 
	#PCI_INT_PROP_ST
 (1 << 0Ë

	)

149 
	#PCI_WB_ERR_INT_ST
 (1 << 1Ë

	)

150 
	#PCI_PCI_ERR_INT_ST
 (1 << 2Ë

	)

151 
	#PCI_PAR_ERR_INT_ST
 (1 << 3Ë

	)

152 
	#PCI_SYS_ERR_INT_ST
 (1 << 4Ë

	)

156 
	#SPIH_CTLR_INTR
 (1 << 0Ë

	)

157 
	#SPIH_DEV_INTR
 (1 << 1Ë

	)

158 
	#SPIH_WFIFO_INTR
 (1 << 2Ë

	)

161 
	#SPIH_CS
 (1 << 0Ë

	)

162 
	#SPIH_SLOT_POWER
 (1 << 1Ë

	)

163 
	#SPIH_CARD_DETECT
 (1 << 2Ë

	)

166 
	#SPIH_STATE_MASK
 0x30

	)

167 
	#SPIH_STATE_SHIFT
 4

	)

168 
	#SPIH_WFFULL
 (1 << 3Ë

	)

169 
	#SPIH_WFEMPTY
 (1 << 2Ë

	)

170 
	#SPIH_RFFULL
 (1 << 1Ë

	)

171 
	#SPIH_RFEMPTY
 (1 << 0Ë

	)

173 
	#SPIH_EXT_CLK
 (1U << 31Ë

	)

175 
	#SPIH_PLL_NO_CLK
 (1 << 1Ë

	)

176 
	#SPIH_PLL_LOCKED
 (1 << 3Ë

	)

179 
	#SPI_SPIN_BOUND
 0xf4240

	)

	@include/bcmperf.h

27 #i‚de‡
_BCMPERF_H_


28 
	#_BCMPERF_H_


	)

30 
	#BCMPERF_ENABLE_INSTRCOUNT
()

	)

31 
	#BCMPERF_ENABLE_ICACHE_MISS
()

	)

32 
	#BCMPERF_ENABLE_ICACHE_HIT
()

	)

33 
	#BCMPERF_GETICACHE_MISS
(
x
Ë((xË0)

	)

34 
	#BCMPERF_GETICACHE_HIT
(
x
Ë((xË0)

	)

35 
	#BCMPERF_GETINSTRCOUNT
(
x
Ë((xË0)

	)

	@include/bcmsdbus.h

28 #i‚def 
_sdio_≠i_h_


29 
	#_sdio_≠i_h_


	)

32 
	#SDIOH_API_RC_SUCCESS
 (0x00)

	)

33 
	#SDIOH_API_RC_FAIL
 (0x01)

	)

34 
	#SDIOH_API_SUCCESS
(
°©us
Ë(°©u†=0)

	)

36 
	#SDIOH_READ
 0

	)

37 
	#SDIOH_WRITE
 1

	)

39 
	#SDIOH_DATA_FIX
 0

	)

40 
	#SDIOH_DATA_INC
 1

	)

42 
	#SDIOH_CMD_TYPE_NORMAL
 0

	)

43 
	#SDIOH_CMD_TYPE_APPEND
 1

	)

44 
	#SDIOH_CMD_TYPE_CUTTHRU
 2

	)

46 
	#SDIOH_DATA_PIO
 0

	)

47 
	#SDIOH_DATA_DMA
 1

	)

49 #ifde‡
BCMSDIOH_TXGLOM


51 
	#SDPCM_MAXGLOM_SIZE
 10

	)

52 
	#SDPCM_DEFGLOM_SIZE
 3

	)

54 
	#SDPCM_TXGLOM_CPY
 0

	)

55 
	#SDPCM_TXGLOM_MDESC
 1

	)

59 
	tSDIOH_API_RC
;

62 
sdioh_öfo
 
	tsdioh_öfo_t
;

65 (*
	tsdioh_cb_‚_t
)(*);

71 
sdioh_öfo_t
 * 
	`sdioh_©èch
(
o¶_t
 *
osh
, *
cfghdl
, 
uöt
 
úq
);

72 
SDIOH_API_RC
 
	`sdioh_dëach
(
o¶_t
 *
osh
, 
sdioh_öfo_t
 *
si
);

73 
SDIOH_API_RC
 
	`sdioh_öãºu±_ªgi°î
(
sdioh_öfo_t
 *
si
, 
sdioh_cb_‚_t
 
‚
, *
¨gh
);

74 
SDIOH_API_RC
 
	`sdioh_öãºu±_dîegi°î
(
sdioh_öfo_t
 *
si
);

77 
SDIOH_API_RC
 
	`sdioh_öãºu±_quîy
(
sdioh_öfo_t
 *
si
, 
boﬁ
 *
⁄off
);

80 
SDIOH_API_RC
 
	`sdioh_öãºu±_£t
(
sdioh_öfo_t
 *
si
, 
boﬁ
 
íabÀ_dißbÀ
);

82 #i‡
	`deföed
(
DHD_DEBUG
)

83 
boﬁ
 
	`sdioh_öãºu±_≥ndög
(
sdioh_öfo_t
 *
si
);

87 
SDIOH_API_RC
 
	`sdioh_ªque°_byã
(
sdioh_öfo_t
 *
si
, 
uöt
 
rw
, uöà
‚c
, uöà
addr
, 
uöt8
 *
byã
);

90 
SDIOH_API_RC
 
	`sdioh_ªque°_w‹d
(
sdioh_öfo_t
 *
si
, 
uöt
 
cmd_ty≥
, uöà
rw
, uöà
‚c
,

91 
uöt
 
addr
, 
uöt32
 *
w‹d
, uöà
nbyã
);

94 
SDIOH_API_RC
 
	`sdioh_ªque°_buf„r
(
sdioh_öfo_t
 *
si
, 
uöt
 
pio_dma
, uöà
fix_öc
,

95 
uöt
 
rw
, uöà
‚c_num
, 
uöt32
 
addr
, uöà
ªgwidth
, uöt32 
buÊí
, 
uöt8
 *
buf„r
,

96 *
pkt
);

98 #ifde‡
BCMSDIOH_TXGLOM


99 
	`sdioh_glom_po°
(
sdioh_öfo_t
 *
sd
, 
uöt8
 *
‰ame
, 
uöt
 
Àn
);

100 
	`sdioh_glom_˛ór
(
sdioh_öfo_t
 *
sd
);

101 
uöt
 
	`sdioh_£t_mode
(
sdioh_öfo_t
 *
sd
, uöà
mode
);

102 
boﬁ
 
	`sdioh_glom_íabÀd
();

104 
	#sdioh_glom_po°
(
a
, 
b
, 
c
)

	)

105 
	#sdioh_glom_˛ór
(
a
)

	)

106 
	#sdioh_£t_mode
(
a
Ë(0)

	)

107 
	#sdioh_glom_íabÀd
(Ë(
FALSE
)

	)

111 
SDIOH_API_RC
 
	`sdioh_cis_ªad
(
sdioh_öfo_t
 *
si
, 
uöt
 
fuc
, 
uöt8
 *
cis
, 
uöt32
 
Àngth
);

113 
SDIOH_API_RC
 
	`sdioh_cfg_ªad
(
sdioh_öfo_t
 *
si
, 
uöt
 
fuc
, 
uöt32
 
addr
, 
uöt8
 *
d©a
);

114 
SDIOH_API_RC
 
	`sdioh_cfg_wrôe
(
sdioh_öfo_t
 *
si
, 
uöt
 
fuc
, 
uöt32
 
addr
, 
uöt8
 *
d©a
);

117 
uöt
 
	`sdioh_quîy_io‚um
(
sdioh_öfo_t
 *
si
);

120 
	`sdioh_iov¨_›
(
sdioh_öfo_t
 *
si
, c⁄° *
«me
,

121 *
∑øms
, 
∂í
, *
¨g
, 
Àn
, 
boﬁ
 
£t
);

124 
	`sdioh_ab‹t
(
sdioh_öfo_t
 *
si
, 
uöt
 
‚c
);

127 
	`sdioh_°¨t
(
sdioh_öfo_t
 *
si
, 
°age
);

128 
	`sdioh_°›
(
sdioh_öfo_t
 *
si
);

131 
	`sdioh_waôlock‰ì
(
sdioh_öfo_t
 *
si
);

134 
	`sdioh_sdio_ª£t
(
sdioh_öfo_t
 *
si
);

137 *
	`bcmsdh_gë_sdioh
(
bcmsdh_öfo_t
 *
sdh
);

141 #i‡
	`deföed
(
BCMSDIOH_STD
)

142 
	#SDIOH_SLEEP_ENABLED


	)

144 
SDIOH_API_RC
 
	`sdioh_¶ìp
(
sdioh_öfo_t
 *
si
, 
boﬁ
 
íab
);

147 
SDIOH_API_RC
 
	`sdioh_gpio_öô
(
sdioh_öfo_t
 *
sd
);

148 
boﬁ
 
	`sdioh_gpioö
(
sdioh_öfo_t
 *
sd
, 
uöt32
 
gpio
);

149 
SDIOH_API_RC
 
	`sdioh_gpioouãn
(
sdioh_öfo_t
 *
sd
, 
uöt32
 
gpio
);

150 
SDIOH_API_RC
 
	`sdioh_gpioout
(
sdioh_öfo_t
 *
sd
, 
uöt32
 
gpio
, 
boﬁ
 
íab
);

	@include/bcmsdh.h

33 #i‚def 
_bcmsdh_h_


34 
	#_bcmsdh_h_


	)

36 
	#BCMSDH_ERROR_VAL
 0x0001

	)

37 
	#BCMSDH_INFO_VAL
 0x0002

	)

38 c⁄° 
uöt
 
bcmsdh_msgÀvñ
;

40 
	#BCMSDH_ERROR
(
x
)

	)

41 
	#BCMSDH_INFO
(
x
)

	)

43 #i‡(
deföed
(
BCMSDIOH_STD
Ë|| deföed(
BCMSDIOH_BCM
Ë|| deföed(
BCMSDIOH_SPI
))

44 
	#BCMSDH_ADAPTER


	)

48 
bcmsdh_öfo
 
	tbcmsdh_öfo_t
;

49 (*
	tbcmsdh_cb_‚_t
)(*);

59 #i‡0 && (
NDISVER
 >= 0x0630) && 1

60 
bcmsdh_öfo_t
 *
	`bcmsdh_©èch
(
o¶_t
 *
osh
, *
cfghdl
,

61 **
ªgsva
, 
uöt
 
úq
, 
sh¨ed_öfo_t
 *
sh
);

63 
bcmsdh_öfo_t
 *
	`bcmsdh_©èch
(
o¶_t
 *
osh
, *
cfghdl
, **
ªgsva
, 
uöt
 
úq
);

67 
	`bcmsdh_dëach
(
o¶_t
 *
osh
, *
sdh
);

70 
boﬁ
 
	`bcmsdh_öå_quîy
(*
sdh
);

73 
	`bcmsdh_öå_íabÀ
(*
sdh
);

74 
	`bcmsdh_öå_dißbÀ
(*
sdh
);

77 
	`bcmsdh_öå_ªg
(*
sdh
, 
bcmsdh_cb_‚_t
 
‚
, *
¨gh
);

78 
	`bcmsdh_öå_dîeg
(*
sdh
);

80 
	`bcmsdh_öå_f‹w¨d
(*
sdh
, 
boﬁ
 
∑ss
);

82 #i‡
	`deföed
(
DHD_DEBUG
)

84 
boﬁ
 
	`bcmsdh_öå_≥ndög
(*
sdh
);

90 
	`bcmsdh_devªmove_ªg
(*
sdh
, 
bcmsdh_cb_‚_t
 
‚
, *
¨gh
);

98 
uöt8
 
	`bcmsdh_cfg_ªad
(*
sdh
, 
uöt
 
func
, 
uöt32
 
addr
, *
îr
);

99 
	`bcmsdh_cfg_wrôe
(*
sdh
, 
uöt
 
func
, 
uöt32
 
addr
, 
uöt8
 
d©a
, *
îr
);

102 
uöt32
 
	`bcmsdh_cfg_ªad_w‹d
(*
sdh
, 
uöt
 
‚c_num
, uöt32 
addr
, *
îr
);

103 
	`bcmsdh_cfg_wrôe_w‹d
(*
sdh
, 
uöt
 
‚c_num
, 
uöt32
 
addr
, uöt32 
d©a
, *
îr
);

112 
	`bcmsdh_cis_ªad
(*
sdh
, 
uöt
 
func
, 
uöt8
 *
cis
, uöà
Àngth
);

119 
uöt32
 
	`bcmsdh_ªg_ªad
(*
sdh
, uöt32 
addr
, 
uöt
 
size
);

120 
uöt32
 
	`bcmsdh_ªg_wrôe
(*
sdh
, uöt32 
addr
, 
uöt
 
size
, uöt32 
d©a
);

123 
	`bcmsdhsdio_£t_sbaddr_wödow
(*
sdh
, 
uöt32
 
addªss
, 
boﬁ
 
f‹˚_£t
);

126 
boﬁ
 
	`bcmsdh_ªgÁû
(*
sdh
);

140 (*
	tbcmsdh_cm∂t_‚_t
)(*
	th™dÀ
, 
	t°©us
, 
	tboﬁ
 
	tsync_waôög
);

141 
	`bcmsdh_£nd_buf
(*
sdh
, 
uöt32
 
addr
, 
uöt
 
‚
, uöà
Êags
,

142 
uöt8
 *
buf
, 
uöt
 
nbyãs
, *
pkt
,

143 
bcmsdh_cm∂t_‚_t
 
com∂ëe_‚
, *
h™dÀ
);

144 
	`bcmsdh_ªcv_buf
(*
sdh
, 
uöt32
 
addr
, 
uöt
 
‚
, uöà
Êags
,

145 
uöt8
 *
buf
, 
uöt
 
nbyãs
, *
pkt
,

146 
bcmsdh_cm∂t_‚_t
 
com∂ëe_‚
, *
h™dÀ
);

148 
	`bcmsdh_glom_po°
(*
sdh
, 
uöt8
 *
‰ame
, 
uöt
 
Àn
);

149 
	`bcmsdh_glom_˛ór
(*
sdh
);

150 
uöt
 
	`bcmsdh_£t_mode
(*
sdh
, uöà
mode
);

151 
boﬁ
 
	`bcmsdh_glom_íabÀd
();

153 
	#SDIO_REQ_4BYTE
 0x1

	)

154 
	#SDIO_REQ_FIXED
 0x2

	)

155 
	#SDIO_REQ_ASYNC
 0x4

	)

156 
	#SDIO_BYTE_MODE
 0x8

	)

159 
	#BCME_PENDING
 1

	)

168 
	`bcmsdh_rwd©a
(*
sdh
, 
uöt
 
rw
, 
uöt32
 
addr
, 
uöt8
 *
buf
, uöà
nbyãs
);

171 
	`bcmsdh_ab‹t
(*
sdh
, 
uöt
 
‚
);

174 
	`bcmsdh_°¨t
(*
sdh
, 
°age
);

177 
	`bcmsdh_°›
(*
sdh
);

180 
	`bcmsdh_waôlock‰ì
(*
sdh
);

183 
	`bcmsdh_quîy_devi˚
(*
sdh
);

186 
uöt
 
	`bcmsdh_quîy_io‚um
(*
sdh
);

189 
	`bcmsdh_iov¨_›
(*
sdh
, c⁄° *
«me
,

190 *
∑øms
, 
∂í
, *
¨g
, 
Àn
, 
boﬁ
 
£t
);

193 
	`bcmsdh_ª£t
(
bcmsdh_öfo_t
 *
sdh
);

197 *
	`bcmsdh_gë_sdioh
(
bcmsdh_öfo_t
 *
sdh
);

202 *(*
©èch
)(
uöt16
 
víd_id
, uöt16 
dev_id
, uöt16 
bus
, uöt16 
¶Ÿ
,

203 
uöt16
 
func
, 
uöt
 
bu°y≥
, * 
ªgsva
, 
o¶_t
 * 
osh
,

204 * 
∑øm
);

206 (*
dëach
)(*
ch
);

207 } 
	tbcmsdh_drivî_t
;

210 
	`bcmsdh_ªgi°î
(
bcmsdh_drivî_t
 *
drivî
);

211 
	`bcmsdh_uƒegi°î
();

212 
boﬁ
 
	`bcmsdh_chùm©ch
(
uöt16
 
víd‹
, uöt16 
devi˚
);

213 
	`bcmsdh_devi˚_ªmove
(* 
sdh
);

215 
	`bcmsdh_ªg_sdio_nŸify
(* 
£m≠h‹e
);

216 
	`bcmsdh_uƒeg_sdio_nŸify
();

218 #i‡
	`deföed
(
OOB_INTR_ONLY
)

219 
	`bcmsdh_ªgi°î_oob_öå
(* 
dhdp
);

220 
	`bcmsdh_uƒegi°î_oob_öå
();

221 
	`bcmsdh_oob_öå_£t
(
boﬁ
 
íabÀ
);

225 
uöt32
 
	`bcmsdh_gë_d°©us
(*
sdh
);

228 
uöt32
 
	`bcmsdh_cur_sbwad
(*
sdh
);

231 
	`bcmsdh_chùöfo
(*
sdh
, 
uöt32
 
chù
, uöt32 
chùªv
);

234 
	`bcmsdh_¶ìp
(*
sdh
, 
boﬁ
 
íab
);

237 
	`bcmsdh_gpio_öô
(*
sd
);

238 
boﬁ
 
	`bcmsdh_gpioö
(*
sd
, 
uöt32
 
gpio
);

239 
	`bcmsdh_gpioouãn
(*
sd
, 
uöt32
 
gpio
);

240 
	`bcmsdh_gpioout
(*
sd
, 
uöt32
 
gpio
, 
boﬁ
 
íab
);

	@include/bcmsdh_sdmmc.h

27 #i‚de‡
__BCMSDH_SDMMC_H__


28 
	#__BCMSDH_SDMMC_H__


	)

30 
	#sd_îr
(
x
)

	)

31 
	#sd_åa˚
(
x
)

	)

32 
	#sd_öfo
(
x
)

	)

33 
	#sd_debug
(
x
)

	)

34 
	#sd_d©a
(
x
)

	)

35 
	#sd_˘æ
(
x
)

	)

37 
	#sd_åa˚_hw4
 
sd_åa˚


	)

39 
	#sd_sync_dma
(
sd
, 
ªad
, 
nbyãs
)

	)

40 
	#sd_öô_dma
(
sd
)

	)

41 
	#sd_ack_öå
(
sd
)

	)

42 
	#sd_wakeup
(
sd
);

	)

45 
sdioh_sdmmc_osöô
(
sdioh_öfo_t
 *
sd
);

46 
sdioh_sdmmc_os‰ì
(
sdioh_öfo_t
 *
sd
);

48 
	#sd_log
(
x
)

	)

50 
	#SDIOH_ASSERT
(
exp
) \

51 dÿ{ i‡(!(
exp
)) \

52 
	`¥ötf
("!!!ASSERT faû: fûê%†löe†%d", 
__FILE__
, 
__LINE__
); \

53 } 0)

	)

55 
	#BLOCK_SIZE_4318
 64

	)

56 
	#BLOCK_SIZE_4328
 512

	)

59 
	#SUCCESS
 0

	)

60 
	#ERROR
 1

	)

63 
	#SDIOH_MODE_SD4
 2

	)

64 
	#CLIENT_INTR
 0x100

	)

66 
	ssdioh_öfo
 {

67 
o¶_t
 *
	mosh
;

68 
boﬁ
 
	m˛õ¡_öå_íabÀd
;

69 
boﬁ
 
	möå_h™dÀr_vÆid
;

70 
sdioh_cb_‚_t
 
	möå_h™dÀr
;

71 *
	möå_h™dÀr_¨g
;

72 
uöt16
 
	mötmask
;

73 *
	msdos_öfo
;

75 
uöt
 
	múq
;

76 
	möåcou¡
;

78 
boﬁ
 
	msd_u£_dma
;

79 
boﬁ
 
	msd_blockmode
;

81 
boﬁ
 
	mu£_˛õ¡_öts
;

82 
	msd_mode
;

83 
	m˛õ¡_block_size
[
SDIOD_MAX_IOFUNCS
];

84 
uöt8
 
	mnum_funcs
;

85 
uöt32
 
	mcom_cis_±r
;

86 
uöt32
 
	mfunc_cis_±r
[
SDIOD_MAX_IOFUNCS
];

88 
	#SDIOH_SDMMC_MAX_SG_ENTRIES
 32

	)

89 
sˇâîli°
 
	msg_li°
[
SDIOH_SDMMC_MAX_SG_ENTRIES
];

90 
boﬁ
 
	mu£_rxchaö
;

98 
uöt
 
sd_msgÀvñ
;

101 
boﬁ
 
check_˛õ¡_öå
(
sdioh_öfo_t
 *
sd
);

104 
sdioh_sdmmc_devöå_⁄
(
sdioh_öfo_t
 *
sd
);

105 
sdioh_sdmmc_devöå_off
(
sdioh_öfo_t
 *
sd
);

113 
uöt32
 *
sdioh_sdmmc_ªg_m≠
(
o¶_t
 *
osh
, 
öt32
 
addr
, 
size
);

114 
sdioh_sdmmc_ªg_unm≠
(
o¶_t
 *
osh
, 
öt32
 
addr
, 
size
);

117 
sdioh_sdmmc_ªgi°î_úq
(
sdioh_öfo_t
 *
sd
, 
uöt
 
úq
);

118 
sdioh_sdmmc_‰ì_úq
(
uöt
 
úq
, 
sdioh_öfo_t
 *
sd
);

120 
	s_BCMSDH_SDMMC_INSTANCE
 {

121 
sdioh_öfo_t
 *
	msd
;

122 
sdio_func
 *
	mfunc
[
SDIOD_MAX_IOFUNCS
];

123 } 
	tBCMSDH_SDMMC_INSTANCE
, *
	tPBCMSDH_SDMMC_INSTANCE
;

	@include/bcmsdpcm.h

28 #i‚def 
_bcmsdpcm_h_


29 
	#_bcmsdpcm_h_


	)

36 
	#I_SMB_NAK
 
I_SMB_SW0


	)

37 
	#I_SMB_INT_ACK
 
I_SMB_SW1


	)

38 
	#I_SMB_USE_OOB
 
I_SMB_SW2


	)

39 
	#I_SMB_DEV_INT
 
I_SMB_SW3


	)

41 
	#I_TOSBMAIL
 (
I_SMB_NAK
 | 
I_SMB_INT_ACK
 | 
I_SMB_USE_OOB
 | 
I_SMB_DEV_INT
)

	)

44 
	#SMB_NAK
 (1 << 0Ë

	)

45 
	#SMB_INT_ACK
 (1 << 1Ë

	)

46 
	#SMB_USE_OOB
 (1 << 2Ë

	)

47 
	#SMB_DEV_INT
 (1 << 3Ë

	)

48 
	#SMB_MASK
 0x0000000‡

	)

51 
	#SMB_DATA_VERSION_MASK
 0x00ff0000

	)

52 
	#SMB_DATA_VERSION_SHIFT
 16

	)

59 
	#I_HMB_FC_STATE
 
I_HMB_SW0


	)

60 
	#I_HMB_FC_CHANGE
 
I_HMB_SW1


	)

61 
	#I_HMB_FRAME_IND
 
I_HMB_SW2


	)

62 
	#I_HMB_HOST_INT
 
I_HMB_SW3


	)

64 
	#I_TOHOSTMAIL
 (
I_HMB_FC_CHANGE
 | 
I_HMB_FRAME_IND
 | 
I_HMB_HOST_INT
)

	)

67 
	#HMB_FC_ON
 (1 << 0Ë

	)

68 
	#HMB_FC_CHANGE
 (1 << 1Ë

	)

69 
	#HMB_FRAME_IND
 (1 << 2Ë

	)

70 
	#HMB_HOST_INT
 (1 << 3Ë

	)

71 
	#HMB_MASK
 0x0000000‡

	)

74 
	#HMB_DATA_NAKHANDLED
 0x01

	)

75 
	#HMB_DATA_DEVREADY
 0x02

	)

76 
	#HMB_DATA_FC
 0x04

	)

77 
	#HMB_DATA_FWREADY
 0x08

	)

78 
	#HMB_DATA_FWHALT
 0x10

	)

80 
	#HMB_DATA_FCDATA_MASK
 0xff000000

	)

81 
	#HMB_DATA_FCDATA_SHIFT
 24

	)

83 
	#HMB_DATA_VERSION_MASK
 0x00ff0000

	)

84 
	#HMB_DATA_VERSION_SHIFT
 16

	)

91 
	#SDPCM_PROT_VERSION
 4

	)

94 
	#SDPCM_SEQUENCE_MASK
 0x000000f‡

	)

95 
	#SDPCM_PACKET_SEQUENCE
(
p
Ë(((
uöt8
 *Ì)[0] & 0xffË

	)

97 
	#SDPCM_CHANNEL_MASK
 0x00000f00

	)

98 
	#SDPCM_CHANNEL_SHIFT
 8

	)

99 
	#SDPCM_PACKET_CHANNEL
(
p
Ë(((
uöt8
 *Ì)[1] & 0x0fË

	)

101 
	#SDPCM_FLAGS_MASK
 0x0000f000

	)

102 
	#SDPCM_FLAGS_SHIFT
 12

	)

103 
	#SDPCM_PACKET_FLAGS
(
p
Ë((((
uöt8
 *Ì)[1] & 0xf0Ë>> 4Ë

	)

106 
	#SDPCM_NEXTLEN_MASK
 0x00ff0000

	)

107 
	#SDPCM_NEXTLEN_SHIFT
 16

	)

108 
	#SDPCM_NEXTLEN_VALUE
(
p
Ë((((
uöt8
 *Ì)[2] & 0xffË<< 4Ë

	)

109 
	#SDPCM_NEXTLEN_OFFSET
 2

	)

112 
	#SDPCM_DOFFSET_OFFSET
 3

	)

113 
	#SDPCM_DOFFSET_VALUE
(
p
Ë(((
uöt8
 *Ì)[
SDPCM_DOFFSET_OFFSET
] & 0xff)

	)

114 
	#SDPCM_DOFFSET_MASK
 0xff000000

	)

115 
	#SDPCM_DOFFSET_SHIFT
 24

	)

117 
	#SDPCM_FCMASK_OFFSET
 4

	)

118 
	#SDPCM_FCMASK_VALUE
(
p
Ë(((
uöt8
 *Ì)[
SDPCM_FCMASK_OFFSET
 ] & 0xff)

	)

119 
	#SDPCM_WINDOW_OFFSET
 5

	)

120 
	#SDPCM_WINDOW_VALUE
(
p
Ë(((
uöt8
 *Ì)[
SDPCM_WINDOW_OFFSET
] & 0xff)

	)

121 
	#SDPCM_VERSION_OFFSET
 6

	)

122 
	#SDPCM_VERSION_VALUE
(
p
Ë(((
uöt8
 *Ì)[
SDPCM_VERSION_OFFSET
] & 0xff)

	)

123 
	#SDPCM_UNUSED_OFFSET
 7

	)

124 
	#SDPCM_UNUSED_VALUE
(
p
Ë(((
uöt8
 *Ì)[
SDPCM_UNUSED_OFFSET
] & 0xff)

	)

126 
	#SDPCM_SWHEADER_LEN
 8

	)

129 
	#SDPCM_CONTROL_CHANNEL
 0

	)

130 
	#SDPCM_EVENT_CHANNEL
 1

	)

131 
	#SDPCM_DATA_CHANNEL
 2

	)

132 
	#SDPCM_GLOM_CHANNEL
 3

	)

133 
	#SDPCM_TEST_CHANNEL
 15

	)

134 
	#SDPCM_MAX_CHANNEL
 15

	)

136 
	#SDPCM_SEQUENCE_WRAP
 256

	)

138 
	#SDPCM_FLAG_RESVD0
 0x01

	)

139 
	#SDPCM_FLAG_RESVD1
 0x02

	)

140 
	#SDPCM_FLAG_GSPI_TXENAB
 0x04

	)

141 
	#SDPCM_FLAG_GLOMDESC
 0x08

	)

144 
	#SDPCM_GLOMDESC_FLAG
 (
SDPCM_FLAG_GLOMDESC
 << 
SDPCM_FLAGS_SHIFT
)

	)

146 
	#SDPCM_GLOMDESC
(
p
Ë(((
uöt8
 *Ì)[1] & 0x80)

	)

149 
	#SDPCM_TEST_HDRLEN
 4

	)

154 
	#SDPCM_TEST_PKT_CNT_FLD_LEN
 4

	)

155 
	#SDPCM_TEST_DISCARD
 0x01

	)

156 
	#SDPCM_TEST_ECHOREQ
 0x02

	)

157 
	#SDPCM_TEST_ECHORSP
 0x03

	)

158 
	#SDPCM_TEST_BURST
 0x04

	)

162 
	#SDPCM_TEST_SEND
 0x05

	)

168 
	#SDPCM_TEST_FILL
(
byãno
, 
id
Ë((
uöt8
)(id + byãno))

	)

175 
uöt32
 
	mcmd52rd
;

176 
uöt32
 
	mcmd52wr
;

177 
uöt32
 
	mcmd53rd
;

178 
uöt32
 
	mcmd53wr
;

179 
uöt32
 
	mab‹t
;

180 
uöt32
 
	md©a¸˚º‹
;

181 
uöt32
 
	mrdoutofsync
;

182 
uöt32
 
	mwroutofsync
;

183 
uöt32
 
	mwrôebusy
;

184 
uöt32
 
	mªadwaô
;

185 
uöt32
 
	mªadãrm
;

186 
uöt32
 
	mwrôëîm
;

187 
uöt32
 
	mrxdescuÊo
;

188 
uöt32
 
	mrxfifooÊo
;

189 
uöt32
 
	mtxfifouÊo
;

190 
uöt32
 
	mru¡
;

191 
uöt32
 
	mbadÀn
;

192 
uöt32
 
	mbadcksum
;

193 
uöt32
 
	m£qbªak
;

194 
uöt32
 
	mrxf¸c
;

195 
uöt32
 
	mrxfwoos
;

196 
uöt32
 
	mrxfw·
;

197 
uöt32
 
	mrxÁb‹t
;

198 
uöt32
 
	mwoosöt
;

199 
uöt32
 
	mroosöt
;

200 
uöt32
 
	mr·îmöt
;

201 
uöt32
 
	mw·îmöt
;

202 } 
	tsdpcmd_˙t_t
;

208 
	#SDIODREV_IS
(
v¨
, 
vÆ
Ë((v¨Ë=(vÆ))

	)

209 
	#SDIODREV_GE
(
v¨
, 
vÆ
Ë((v¨Ë>(vÆ))

	)

210 
	#SDIODREV_GT
(
v¨
, 
vÆ
Ë((v¨Ë> (vÆ))

	)

211 
	#SDIODREV_LT
(
v¨
, 
vÆ
Ë((v¨Ë< (vÆ))

	)

212 
	#SDIODREV_LE
(
v¨
, 
vÆ
Ë((v¨Ë<(vÆ))

	)

214 
	#SDIODDMAREG32
(
h
, 
dú
, 
ch∆
) \

215 ((
dú
Ë=
DMA_TX
 ? \

216 (*)(
uöçå
)&((
h
)->
ªgs
->
dma
.
sdiod32
.
dma32ªgs
[
ch∆
].
xmt
) : \

217 (*)(
uöçå
)&((
h
)->
ªgs
->
dma
.
sdiod32
.
dma32ªgs
[
ch∆
].
rcv
))

	)

219 
	#SDIODDMAREG64
(
h
, 
dú
, 
ch∆
) \

220 ((
dú
Ë=
DMA_TX
 ? \

221 (*)(
uöçå
)&((
h
)->
ªgs
->
dma
.
sdiod64
.
dma64ªgs
[
ch∆
].
xmt
) : \

222 (*)(
uöçå
)&((
h
)->
ªgs
->
dma
.
sdiod64
.
dma64ªgs
[
ch∆
].
rcv
))

	)

224 
	#SDIODDMAREG
(
h
, 
dú
, 
ch∆
) \

225 (
	`SDIODREV_LT
((
h
)->
c‹îev
, 1) ? \

226 
	`SDIODDMAREG32
((
h
), (
dú
), (
ch∆
)) : \

227 
	`SDIODDMAREG64
((
h
), (
dú
), (
ch∆
)))

	)

229 
	#PCMDDMAREG
(
h
, 
dú
, 
ch∆
) \

230 ((
dú
Ë=
DMA_TX
 ? \

231 (*)(
uöçå
)&((
h
)->
ªgs
->
dma
.
pcm32
.
dm¨egs
.
xmt
) : \

232 (*)(
uöçå
)&((
h
)->
ªgs
->
dma
.
pcm32
.
dm¨egs
.
rcv
))

	)

234 
	#SDPCMDMAREG
(
h
, 
dú
, 
ch∆
, 
c‹eid
) \

235 ((
c‹eid
Ë=
SDIOD_CORE_ID
 ? \

236 
	`SDIODDMAREG
(
h
, 
dú
, 
ch∆
) : \

237 
	`PCMDDMAREG
(
h
, 
dú
, 
ch∆
))

	)

239 
	#SDIODFIFOREG
(
h
, 
c‹îev
) \

240 (
	`SDIODREV_LT
((
c‹îev
), 1) ? \

241 ((
dma32düg_t
 *)(
uöçå
)&((
h
)->
ªgs
->
dma
.
sdiod32
.
dmafifo
)) : \

242 ((
dma32düg_t
 *)(
uöçå
)&((
h
)->
ªgs
->
dma
.
sdiod64
.
dmafifo
)))

	)

244 
	#PCMDFIFOREG
(
h
) \

245 ((
dma32düg_t
 *)(
uöçå
)&((
h
)->
ªgs
->
dma
.
pcm32
.
dmafifo
))

	)

247 
	#SDPCMFIFOREG
(
h
, 
c‹eid
, 
c‹îev
) \

248 ((
c‹eid
Ë=
SDIOD_CORE_ID
 ? \

249 
	`SDIODFIFOREG
(
h
, 
c‹îev
) : \

250 
	`PCMDFIFOREG
(
h
))

	)

256 
	#SDPCM_SHARED_VERSION
 0x0001

	)

257 
	#SDPCM_SHARED_VERSION_MASK
 0x00FF

	)

258 
	#SDPCM_SHARED_ASSERT_BUILT
 0x0100

	)

259 
	#SDPCM_SHARED_ASSERT
 0x0200

	)

260 
	#SDPCM_SHARED_TRAP
 0x0400

	)

261 
	#SDPCM_SHARED_IN_BRPT
 0x0800

	)

262 
	#SDPCM_SHARED_SET_BRPT
 0x1000

	)

263 
	#SDPCM_SHARED_PENDING_BRPT
 0x2000

	)

266 
uöt32
 
	mÊags
;

267 
uöt32
 
	må≠_addr
;

268 
uöt32
 
	mas£π_exp_addr
;

269 
uöt32
 
	mas£π_fûe_addr
;

270 
uöt32
 
	mas£π_löe
;

271 
uöt32
 
	mc⁄sﬁe_addr
;

272 
uöt32
 
	mmsgåa˚_addr
;

273 
uöt32
 
	mbΩt_addr
;

274 } 
	tsdpcm_sh¨ed_t
;

276 
sdpcm_sh¨ed_t
 
sdpcm_sh¨ed
;

279 
sdpcmd_fwhÆt
();

	@include/bcmsdspi.h

26 #i‚def 
_BCM_SD_SPI_H


27 
	#_BCM_SD_SPI_H


	)

31 
	#sd_îr
(
x
)

	)

32 
	#sd_åa˚
(
x
)

	)

33 
	#sd_öfo
(
x
)

	)

34 
	#sd_debug
(
x
)

	)

35 
	#sd_d©a
(
x
)

	)

36 
	#sd_˘æ
(
x
)

	)

38 
	#sd_log
(
x
)

	)

40 
	#SDIOH_ASSERT
(
exp
) \

41 dÿ{ i‡(!(
exp
)) \

42 
	`¥ötf
("!!!ASSERT faû: fûê%†löe†%d", 
__FILE__
, 
__LINE__
); \

43 } 0)

	)

45 
	#BLOCK_SIZE_4318
 64

	)

46 
	#BLOCK_SIZE_4328
 512

	)

49 
	#SUCCESS
 0

	)

50 #unde‡
ERROR


51 
	#ERROR
 1

	)

54 
	#SDIOH_MODE_SPI
 0

	)

56 
	#USE_BLOCKMODE
 0x2

	)

57 
	#USE_MULTIBLOCK
 0x4

	)

59 
	ssdioh_öfo
 {

60 
uöt
 
	mcfg_b¨
;

61 
uöt32
 
	mˇps
;

62 
uöt
 
	mb¨0
;

63 
o¶_t
 *
	mosh
;

64 *
	mc⁄åﬁÀr
;

66 
uöt
 
	mlockcou¡
;

67 
boﬁ
 
	m˛õ¡_öå_íabÀd
;

68 
boﬁ
 
	möå_h™dÀr_vÆid
;

69 
sdioh_cb_‚_t
 
	möå_h™dÀr
;

70 *
	möå_h™dÀr_¨g
;

71 
boﬁ
 
	möôülized
;

72 
uöt32
 
	mèrgë_dev
;

73 
uöt32
 
	mötmask
;

74 *
	msdos_öfo
;

76 
uöt32
 
	mc⁄åﬁÀr_ty≥
;

77 
uöt8
 
	mvîsi⁄
;

78 
uöt
 
	múq
;

79 
uöt32
 
	möåcou¡
;

80 
uöt32
 
	mloˇl_öåcou¡
;

81 
boﬁ
 
	mho°_öô_d⁄e
;

82 
boﬁ
 
	mˇrd_öô_d⁄e
;

83 
boﬁ
 
	mpﬁÀd_mode
;

85 
boﬁ
 
	msd_u£_dma
;

86 
boﬁ
 
	msd_blockmode
;

88 
boﬁ
 
	mu£_˛õ¡_öts
;

89 
boﬁ
 
	mgŸ_hcöt
;

91 
	mad≠ãr_¶Ÿ
;

92 
	msd_mode
;

93 
	m˛õ¡_block_size
[
SDIOD_MAX_IOFUNCS
];

94 
uöt32
 
	md©a_x„r_cou¡
;

95 
uöt32
 
	mcmd53_wr_d©a
;

96 
uöt32
 
	mˇrd_ª•⁄£
;

97 
uöt32
 
	mˇrd_r•_d©a
;

98 
uöt16
 
	mˇrd_rˇ
;

99 
uöt8
 
	mnum_funcs
;

100 
uöt32
 
	mcom_cis_±r
;

101 
uöt32
 
	mfunc_cis_±r
[
SDIOD_MAX_IOFUNCS
];

102 *
	mdma_buf
;

103 
ul⁄g
 
	mdma_phys
;

104 
	mr_˙t
;

105 
	mt_˙t
;

113 
uöt
 
sd_msgÀvñ
;

120 
uöt32
 *
•i_ªg_m≠
(
o¶_t
 *
osh
, 
uöçå
 
addr
, 
size
);

121 
•i_ªg_unm≠
(
o¶_t
 *
osh
, 
uöçå
 
addr
, 
size
);

124 
•i_ªgi°î_úq
(
sdioh_öfo_t
 *
sd
, 
uöt
 
úq
);

125 
•i_‰ì_úq
(
uöt
 
úq
, 
sdioh_öfo_t
 *
sd
);

128 
•i_lock
(
sdioh_öfo_t
 *
sd
);

129 
•i_u∆ock
(
sdioh_öfo_t
 *
sd
);

132 
•i_osöô
(
sdioh_öfo_t
 *
sd
);

133 
•i_os‰ì
(
sdioh_öfo_t
 *
sd
);

	@include/bcmsdstd.h

26 #i‚def 
_BCM_SD_STD_H


27 
	#_BCM_SD_STD_H


	)

30 
	#sd_îr
(
x
Ëdÿ{ i‡(
sd_msgÀvñ
 & 
SDH_ERROR_VAL
Ë
¥ötf
 x; } 0)

	)

31 
	#sd_åa˚
(
x
)

	)

32 
	#sd_öfo
(
x
)

	)

33 
	#sd_debug
(
x
)

	)

34 
	#sd_d©a
(
x
)

	)

35 
	#sd_˘æ
(
x
)

	)

36 
	#sd_dma
(
x
)

	)

38 
	#sd_sync_dma
(
sd
, 
ªad
, 
nbyãs
)

	)

39 
	#sd_öô_dma
(
sd
)

	)

40 
	#sd_ack_öå
(
sd
)

	)

41 
	#sd_wakeup
(
sd
);

	)

43 
sd°d_osöô
(
sdioh_öfo_t
 *
sd
);

44 
sd°d_os‰ì
(
sdioh_öfo_t
 *
sd
);

46 
	#sd_log
(
x
)

	)

48 
	#SDIOH_ASSERT
(
exp
) \

49 dÿ{ i‡(!(
exp
)) \

50 
	`¥ötf
("!!!ASSERT faû: fûê%†löe†%d", 
__FILE__
, 
__LINE__
); \

51 } 0)

	)

53 
	#BLOCK_SIZE_4318
 64

	)

54 
	#BLOCK_SIZE_4328
 512

	)

57 
	#SUCCESS
 0

	)

58 
	#ERROR
 1

	)

61 
	#SDIOH_MODE_SPI
 0

	)

62 
	#SDIOH_MODE_SD1
 1

	)

63 
	#SDIOH_MODE_SD4
 2

	)

65 
	#MAX_SLOTS
 6

	)

66 
	#SDIOH_REG_WINSZ
 0x100

	)

68 
	#SDIOH_TYPE_ARASAN_HDK
 1

	)

69 
	#SDIOH_TYPE_BCM27XX
 2

	)

70 
	#SDIOH_TYPE_TI_PCIXX21
 4

	)

71 
	#SDIOH_TYPE_RICOH_R5C822
 5

	)

72 
	#SDIOH_TYPE_JMICRON
 6

	)

75 
	#BCMSDYIELD


	)

78 
	#SDIOH_CMD7_EXP_STATUS
 0x00001E00

	)

80 
	#RETRIES_LARGE
 100000

	)

81 
	#sd°d_os_yõld
(
sd
Ëdÿ{} 0)

	)

82 
	#RETRIES_SMALL
 100

	)

85 
	#USE_BLOCKMODE
 0x2

	)

86 
	#USE_MULTIBLOCK
 0x4

	)

88 
	#USE_FIFO
 0x8

	)

90 
	#CLIENT_INTR
 0x100

	)

92 
	#HC_INTR_RETUNING
 0x1000

	)

95 #ifde‡
BCMSDIOH_TXGLOM


97 
	#SDIOH_MAXGLOM_SIZE
 10

	)

99 
	sglom_buf
 {

100 
uöt32
 
	mcou¡
;

101 *
	mdma_buf_¨r
[
SDIOH_MAXGLOM_SIZE
];

102 
ul⁄g
 
	mdma_phys_¨r
[
SDIOH_MAXGLOM_SIZE
];

103 
uöt16
 
	mnbyãs
[
SDIOH_MAXGLOM_SIZE
];

104 } 
	tglom_buf_t
;

107 
	ssdioh_öfo
 {

108 
uöt
 
	mcfg_b¨
;

109 
uöt32
 
	mˇps
;

110 
uöt32
 
	mcuº_ˇps
;

112 
o¶_t
 *
	mosh
;

113 vﬁ©ûê*
	mmem_•a˚
;

114 
uöt
 
	mlockcou¡
;

115 
boﬁ
 
	m˛õ¡_öå_íabÀd
;

116 
boﬁ
 
	möå_h™dÀr_vÆid
;

117 
sdioh_cb_‚_t
 
	möå_h™dÀr
;

118 *
	möå_h™dÀr_¨g
;

119 
boﬁ
 
	möôülized
;

120 
uöt
 
	mèrgë_dev
;

121 
uöt16
 
	mötmask
;

122 *
	msdos_öfo
;

124 
uöt32
 
	mc⁄åﬁÀr_ty≥
;

125 
uöt8
 
	mvîsi⁄
;

126 
uöt
 
	múq
;

127 
	möåcou¡
;

128 
	mloˇl_öåcou¡
;

129 
boﬁ
 
	mho°_öô_d⁄e
;

130 
boﬁ
 
	mˇrd_öô_d⁄e
;

131 
boﬁ
 
	mpﬁÀd_mode
;

133 
boﬁ
 
	msd_blockmode
;

135 
boﬁ
 
	mu£_˛õ¡_öts
;

137 
	mad≠ãr_¶Ÿ
;

138 
	msd_mode
;

139 
	m˛õ¡_block_size
[
SDIOD_MAX_IOFUNCS
];

140 
uöt32
 
	md©a_x„r_cou¡
;

141 
uöt16
 
	mˇrd_rˇ
;

142 
öt8
 
	msd_dma_mode
;

143 
uöt8
 
	mnum_funcs
;

144 
uöt32
 
	mcom_cis_±r
;

145 
uöt32
 
	mfunc_cis_±r
[
SDIOD_MAX_IOFUNCS
];

146 *
	mdma_buf
;

147 
ul⁄g
 
	mdma_phys
;

148 *
	madma2_ds¸_buf
;

149 
ul⁄g
 
	madma2_ds¸_phys
;

152 *
	mdma_°¨t_buf
;

153 
ul⁄g
 
	mdma_°¨t_phys
;

154 
uöt
 
	mÆlo˚d_dma_size
;

155 *
	madma2_ds¸_°¨t_buf
;

156 
ul⁄g
 
	madma2_ds¸_°¨t_phys
;

157 
uöt
 
	mÆlo˚d_adma2_ds¸_size
;

159 
	mr_˙t
;

160 
	mt_˙t
;

161 
boﬁ
 
	mgŸ_hcöt
;

162 
uöt16
 
	mœ°_öå°©us
;

163 
	mho°_UHSISuµ‹ãd
;

164 
	mˇrd_UHSI_vﬁège_Suµ‹ãd
;

167 
	mglobÆ_UHSI_Suµ
;

172 vﬁ©ûê
	msd3_d©_°©e
;

173 vﬁ©ûê
	msd3_tun_°©e
;

174 
boﬁ
 
	msd3_tunög_ªqd
;

175 
uöt32
 
	mˇps3
;

176 #ifde‡
BCMSDIOH_TXGLOM


177 
glom_buf_t
 
	mglom_öfo
;

178 
uöt
 
	mtxglom_mode
;

182 
	#DMA_MODE_NONE
 0

	)

183 
	#DMA_MODE_SDMA
 1

	)

184 
	#DMA_MODE_ADMA1
 2

	)

185 
	#DMA_MODE_ADMA2
 3

	)

186 
	#DMA_MODE_ADMA2_64
 4

	)

187 
	#DMA_MODE_AUTO
 -1

	)

189 
	#USE_DMA
(
sd
Ë((
boﬁ
)((sd->
sd_dma_mode
 > 0Ë? 
TRUE
 : 
FALSE
))

	)

192 
	#TUNING_IDLE
 0

	)

193 
	#TUNING_START
 1

	)

194 
	#TUNING_START_AFTER_DAT
 2

	)

195 
	#TUNING_ONGOING
 3

	)

197 
	#DATA_TRANSFER_IDLE
 0

	)

198 
	#DATA_TRANSFER_ONGOING
 1

	)

200 
	#CHECK_TUNING_PRE_DATA
 1

	)

201 
	#CHECK_TUNING_POST_DATA
 2

	)

208 
uöt
 
sd_msgÀvñ
;

211 
boﬁ
 
check_˛õ¡_öå
(
sdioh_öfo_t
 *
sd
);

214 
sd°d_devöå_⁄
(
sdioh_öfo_t
 *
sd
);

215 
sd°d_devöå_off
(
sdioh_öfo_t
 *
sd
);

218 
sd°d_öås_⁄
(
sdioh_öfo_t
 *
sd
, 
uöt16
 
n‹m
, uöt16 
îr
);

219 
sd°d_öås_off
(
sdioh_öfo_t
 *
sd
, 
uöt16
 
n‹m
, uöt16 
îr
);

222 
sd°d_•öbôs
(
sdioh_öfo_t
 *
sd
, 
uöt16
 
n‹m
, uöt16 
îr
);

230 
uöt32
 *
sd°d_ªg_m≠
(
o¶_t
 *
osh
, 
öt32
 
addr
, 
size
);

231 
sd°d_ªg_unm≠
(
o¶_t
 *
osh
, 
öt32
 
addr
, 
size
);

234 
sd°d_ªgi°î_úq
(
sdioh_öfo_t
 *
sd
, 
uöt
 
úq
);

235 
sd°d_‰ì_úq
(
uöt
 
úq
, 
sdioh_öfo_t
 *
sd
);

238 
sd°d_lock
(
sdioh_öfo_t
 *
sd
);

239 
sd°d_u∆ock
(
sdioh_öfo_t
 *
sd
);

240 
sd°d_waôlock‰ì
(
sdioh_öfo_t
 *
sd
);

243 
sd°d_waôbôs
(
sdioh_öfo_t
 *
sd
, 
uöt16
 
n‹m
, uöt16 
îr
, 
boﬁ
 
yõld
, uöt16 *
bôs
);

246 
sd°d_3_íabÀ_ªtunög_öt
(
sdioh_öfo_t
 *
sd
);

247 
sd°d_3_dißbÀ_ªtunög_öt
(
sdioh_öfo_t
 *
sd
);

248 
boﬁ
 
sd°d_3_is_ªtunög_öt_£t
(
sdioh_öfo_t
 *
sd
);

249 
sd°d_3_check_™d_do_tunög
(
sdioh_öfo_t
 *
sd
, 
tunög_∑øm
);

250 
boﬁ
 
sd°d_3_check_™d_£t_ªtunög
(
sdioh_öfo_t
 *
sd
);

251 
sd°d_3_gë_tu√_°©e
(
sdioh_öfo_t
 *
sd
);

252 
sd°d_3_gë_d©a_°©e
(
sdioh_öfo_t
 *
sd
);

253 
sd°d_3_£t_tu√_°©e
(
sdioh_öfo_t
 *
sd
, 
°©e
);

254 
sd°d_3_£t_d©a_°©e
(
sdioh_öfo_t
 *
sd
, 
°©e
);

255 
uöt8
 
sd°d_3_gë_tunög_exp
(
sdioh_öfo_t
 *
sd
);

256 
uöt32
 
sd°d_3_gë_uhsi_˛kmode
(
sdioh_öfo_t
 *
sd
);

257 
sd°d_3_˛k_tunög
(
sdioh_öfo_t
 *
sd
, 
uöt32
 
sd3ClkMode
);

260 
sd°d_3_°¨t_tunög
(
sdioh_öfo_t
 *
sd
);

261 
sd°d_3_osöô_tunög
(
sdioh_öfo_t
 *
sd
);

262 
sd°d_3_os˛ón_tunög
(
sdioh_öfo_t
 *
sd
);

	@include/bcmspi.h

26 #i‚def 
_BCM_SPI_H


27 
	#_BCM_SPI_H


	)

29 
•i_devöå_off
(
sdioh_öfo_t
 *
sd
);

30 
•i_devöå_⁄
(
sdioh_öfo_t
 *
sd
);

31 
boﬁ
 
•i_°¨t_˛ock
(
sdioh_öfo_t
 *
sd
, 
uöt16
 
√w_sd_divis‹
);

32 
boﬁ
 
•i_c⁄åﬁÀr_high•ìd_mode
(
sdioh_öfo_t
 *
sd
, boﬁ 
hsmode
);

33 
boﬁ
 
•i_check_˛õ¡_öå
(
sdioh_öfo_t
 *
sd
, *
is_dev_öå
);

34 
boﬁ
 
•i_hw_©èch
(
sdioh_öfo_t
 *
sd
);

35 
boﬁ
 
•i_hw_dëach
(
sdioh_öfo_t
 *
sd
);

36 
•i_£ndªcv
(
sdioh_öfo_t
 *
sd
, 
uöt8
 *
msg_out
, uöt8 *
msg_ö
, 
msgÀn
);

37 
•i_•öbôs
(
sdioh_öfo_t
 *
sd
);

38 
•i_waôbôs
(
sdioh_öfo_t
 *
sd
, 
boﬁ
 
yõld
);

	@include/bcmutils.h

27 #i‚def 
_bcmutûs_h_


28 
	#_bcmutûs_h_


	)

30 
	#bcm_°r˝y_s
(
d°
, 
noOfEÀmíts
, 
§c
Ë
	`°r˝y
((d°), (§c))

	)

31 
	#bcm_°∫˝y_s
(
d°
, 
noOfEÀmíts
, 
§c
, 
cou¡
Ë
	`°∫˝y
((d°), (§c), (cou¡))

	)

32 
	#bcm_°rˇt_s
(
d°
, 
noOfEÀmíts
, 
§c
Ë
	`°rˇt
((d°), (§c))

	)

34 #ifde‡
__˝lu•lus


38 #ifde‡
PKTQ_LOG


39 
	~<wlio˘l.h
>

43 
	#_BCM_U
 0x01

	)

44 
	#_BCM_L
 0x02

	)

45 
	#_BCM_D
 0x04

	)

46 
	#_BCM_C
 0x08

	)

47 
	#_BCM_P
 0x10

	)

48 
	#_BCM_S
 0x20

	)

49 
	#_BCM_X
 0x40

	)

50 
	#_BCM_SP
 0x80

	)

52 c⁄° 
bcm_˘y≥
[];

53 
	#bcm_ismask
(
x
Ë(
bcm_˘y≥
[()()(x)])

	)

55 
	#bcm_iß um
(
c
Ë((
	`bcm_ismask
(c)&(
_BCM_U
|
_BCM_L
|
_BCM_D
)Ë!0)

	)

56 
	#bcm_ißÕha
(
c
Ë((
	`bcm_ismask
(c)&(
_BCM_U
|
_BCM_L
)Ë!0)

	)

57 
	#bcm_is˙ål
(
c
Ë((
	`bcm_ismask
(c)&(
_BCM_C
)Ë!0)

	)

58 
	#bcm_isdigô
(
c
Ë((
	`bcm_ismask
(c)&(
_BCM_D
)Ë!0)

	)

59 
	#bcm_isgøph
(
c
Ë((
	`bcm_ismask
(c)&(
_BCM_P
|
_BCM_U
|
_BCM_L
|
_BCM_D
)Ë!0)

	)

60 
	#bcm_i¶owî
(
c
Ë((
	`bcm_ismask
(c)&(
_BCM_L
)Ë!0)

	)

61 
	#bcm_i•röt
(
c
Ë((
	`bcm_ismask
(c)&(
_BCM_P
|
_BCM_U
|
_BCM_L
|
_BCM_D
|
_BCM_SP
)Ë!0)

	)

62 
	#bcm_i•un˘
(
c
Ë((
	`bcm_ismask
(c)&(
_BCM_P
)Ë!0)

	)

63 
	#bcm_is•a˚
(
c
Ë((
	`bcm_ismask
(c)&(
_BCM_S
)Ë!0)

	)

64 
	#bcm_isuµî
(
c
Ë((
	`bcm_ismask
(c)&(
_BCM_U
)Ë!0)

	)

65 
	#bcm_isxdigô
(
c
Ë((
	`bcm_ismask
(c)&(
_BCM_D
|
_BCM_X
)Ë!0)

	)

66 
	#bcm_tﬁowî
(
c
Ë(
	`bcm_isuµî
((c)Ë? ((cË+ 'a' - 'A'Ë: (c))

	)

67 
	#bcm_touµî
(
c
Ë(
	`bcm_i¶owî
((c)Ë? ((cË+ 'A' - 'a'Ë: (c))

	)

74 
	sbcm°rbuf
 {

75 *
	gbuf
;

76 
	gsize
;

77 *
	g‹igbuf
;

78 
	g‹igsize
;

82 #ifde‡
BCMDRIVER


83 
	~<o¶.h
>

85 
	#GPIO_PIN_NOTDEFINED
 0x20

	)

92 
	#SPINWAIT
(
exp
, 
us
) { \

93 
uöt
 
cou¡down
 = (
us
) + 9; \

94 (
exp
Ë&& (
cou¡down
 >= 10)) {\

95 
	`OSL_DELAY
(10); \

96 
cou¡down
 -= 10; \

98 }

	)

101 #i‚de‡
PKTQ_LEN_DEFAULT


102 
	#PKTQ_LEN_DEFAULT
 128

	)

104 #i‚de‡
PKTQ_MAX_PREC


105 
	#PKTQ_MAX_PREC
 16

	)

108 
	spktq_¥ec
 {

109 *
	ghód
;

110 *
	gèû
;

111 
uöt16
 
	gÀn
;

112 
uöt16
 
	gmax
;

113 } 
	tpktq_¥ec_t
;

115 #ifde‡
PKTQ_LOG


117 
uöt32
 
	gªque°ed
;

118 
uöt32
 
	g°‹ed
;

119 
uöt32
 
	gßved
;

122 
uöt32
 
	g£lfßved
;

125 
uöt32
 
	gfuŒ_dr›≥d
;

128 
uöt32
 
	gdr›≥d
;

129 
uöt32
 
	gß¸ifi˚d
;

132 
uöt32
 
	gbusy
;

133 
uöt32
 
	gªåy
;

134 
uöt32
 
	gps_ªåy
;

135 
uöt32
 
	gªåy_dr›
;

136 
uöt32
 
	gmax_avaû
;

139 
uöt32
 
	gmax_u£d
;

142 
uöt32
 
	gqueue_ˇ∑côy
;

143 } 
	tpktq_cou¡îs_t
;

147 
	#PKTQ_COMMON
 \

148 
uöt16
 
num_¥ec
; \

149 
uöt16
 
hi_¥ec
; \

150 
uöt16
 
max
; \

151 
uöt16
 
Àn
;

	)

154 
	spktq
 {

155 
PKTQ_COMMON


157 
pktq_¥ec
 
	gq
[
PKTQ_MAX_PREC
];

158 #ifde‡
PKTQ_LOG


159 
pktq_cou¡îs_t
 
	g_¥ec_˙t
[
PKTQ_MAX_PREC
];

164 
	s•ktq
 {

165 
PKTQ_COMMON


167 
pktq_¥ec
 
	gq
[1];

170 
	#PKTQ_PREC_ITER
(
pq
, 
¥ec
Ë¥e¯’q)->
num_¥ec
 - 1;Öª¯>0;Öªc--)

	)

173 
boﬁ
 (*
	tiÂkt_cb_t
)(*, );

175 #ifde‡
BCMPKTPOOL


176 
	#POOL_ENAB
(
poﬁ
Ë(’oﬁË&& (poﬁ)->
öôed
)

	)

177 
	#SHARED_POOL
 (
pkçoﬁ_sh¨ed
)

	)

179 
	#POOL_ENAB
(
bus
Ë0

	)

180 
	#SHARED_POOL
 ((
pkçoﬁ
 *)
NULL
)

	)

183 #i‚de‡
PKTPOOL_LEN_MAX


184 
	#PKTPOOL_LEN_MAX
 40

	)

186 
	#PKTPOOL_CB_MAX
 3

	)

188 
	gpkçoﬁ
;

189 (*
	gpkçoﬁ_cb_t
)(
	tpkçoﬁ
 *
	tpoﬁ
, *
	t¨g
);

191 
pkçoﬁ_cb_t
 
	gcb
;

192 *
	g¨g
;

193 } 
	tpkçoﬁ_cböfo_t
;

195 #ifde‡
BCMDBG_POOL


197 
	#POOL_IDLE
 0

	)

198 
	#POOL_RXFILL
 1

	)

199 
	#POOL_RXDH
 2

	)

200 
	#POOL_RXD11
 3

	)

201 
	#POOL_TXDH
 4

	)

202 
	#POOL_TXD11
 5

	)

203 
	#POOL_AMPDU
 6

	)

204 
	#POOL_TXENQ
 7

	)

207 *
	gp
;

208 
uöt32
 
	gcy˛es
;

209 
uöt32
 
	gdur
;

210 } 
	tpkçoﬁ_dbg_t
;

213 
uöt8
 
	gtxdh
;

214 
uöt8
 
	gtxd11
;

215 
uöt8
 
	gíq
;

216 
uöt8
 
	grxdh
;

217 
uöt8
 
	grxd11
;

218 
uöt8
 
	grxfûl
;

219 
uöt8
 
	gidÀ
;

220 } 
	tpkçoﬁ_°©s_t
;

223 
	spkçoﬁ
 {

224 
boﬁ
 
	göôed
;

225 
uöt16
 
	gr
;

226 
uöt16
 
	gw
;

227 
uöt16
 
	gÀn
;

228 
uöt16
 
	gmaxÀn
;

229 
uöt16
 
	g∂í
;

230 
boﬁ
 
	gi°x
;

231 
boﬁ
 
	gem±y
;

232 
uöt8
 
	gcbtoggÀ
;

233 
uöt8
 
	gcb˙t
;

234 
uöt8
 
	gecb˙t
;

235 
boﬁ
 
	gem±ycb_dißbÀ
;

236 
pkçoﬁ_cböfo_t
 *
	gavaûcb_ex˛
;

237 
pkçoﬁ_cböfo_t
 
	gcbs
[
PKTPOOL_CB_MAX
];

238 
pkçoﬁ_cböfo_t
 
	gecbs
[
PKTPOOL_CB_MAX
];

239 *
	gq
[
PKTPOOL_LEN_MAX
 + 1];

241 #ifde‡
BCMDBG_POOL


242 
uöt8
 
	gdbg_cb˙t
;

243 
pkçoﬁ_cböfo_t
 
	gdbg_cbs
[
PKTPOOL_CB_MAX
];

244 
uöt16
 
	gdbg_qÀn
;

245 
pkçoﬁ_dbg_t
 
	gdbg_q
[
PKTPOOL_LEN_MAX
 + 1];

247 } 
	tpkçoﬁ_t
;

249 
pkçoﬁ_t
 *
pkçoﬁ_sh¨ed
;

251 
pkçoﬁ_öô
(
o¶_t
 *
osh
, 
pkçoﬁ_t
 *
pkç
, *
pkçÀn
, 
∂í
, 
boﬁ
 
i°x
);

252 
pkçoﬁ_deöô
(
o¶_t
 *
osh
, 
pkçoﬁ_t
 *
pkç
);

253 
pkçoﬁ_fûl
(
o¶_t
 *
osh
, 
pkçoﬁ_t
 *
pkç
, 
boﬁ
 
möimÆ
);

254 * 
pkçoﬁ_gë
(
pkçoﬁ_t
 *
pkç
);

255 
pkçoﬁ_‰ì
(
pkçoﬁ_t
 *
pkç
, *
p
);

256 
pkçoﬁ_add
(
pkçoﬁ_t
 *
pkç
, *
p
);

257 
uöt16
 
pkçoﬁ_avaû
(
pkçoﬁ_t
 *
pkç
);

258 
pkçoﬁ_avaû_nŸify_n‹mÆ
(
o¶_t
 *
osh
, 
pkçoﬁ_t
 *
pkç
);

259 
pkçoﬁ_avaû_nŸify_ex˛usive
(
o¶_t
 *
osh
, 
pkçoﬁ_t
 *
pkç
, 
pkçoﬁ_cb_t
 
cb
);

260 
pkçoﬁ_avaû_ªgi°î
(
pkçoﬁ_t
 *
pkç
, 
pkçoﬁ_cb_t
 
cb
, *
¨g
);

261 
pkçoﬁ_em±y_ªgi°î
(
pkçoﬁ_t
 *
pkç
, 
pkçoﬁ_cb_t
 
cb
, *
¨g
);

262 
pkçoﬁ_£tmaxÀn
(
pkçoﬁ_t
 *
pkç
, 
uöt16
 
maxÀn
);

263 
pkçoﬁ_£tmaxÀn_°ri˘
(
o¶_t
 *
osh
, 
pkçoﬁ_t
 *
pkç
, 
uöt16
 
maxÀn
);

264 
pkçoﬁ_em±ycb_dißbÀ
(
pkçoﬁ_t
 *
pkç
, 
boﬁ
 
dißbÀ
);

265 
boﬁ
 
pkçoﬁ_em±ycb_dißbÀd
(
pkçoﬁ_t
 *
pkç
);

267 
	#POOLPTR
(
µ
Ë((
pkçoﬁ_t
 *)’p))

	)

268 
	#pkçoﬁ_Àn
(
µ
Ë(
	`POOLPTR
’p)->
Àn
 - 1)

	)

269 
	#pkçoﬁ_∂í
(
µ
Ë(
	`POOLPTR
’p)->
∂í
)

	)

270 
	#pkçoﬁ_maxÀn
(
µ
Ë(
	`POOLPTR
’p)->
maxÀn
)

	)

272 #ifde‡
BCMDBG_POOL


273 
pkçoﬁ_dbg_ªgi°î
(
pkçoﬁ_t
 *
pkç
, 
pkçoﬁ_cb_t
 
cb
, *
¨g
);

274 
pkçoﬁ_°¨t_åiggî
(
pkçoﬁ_t
 *
pkç
, *
p
);

275 
pkçoﬁ_dbg_dump
(
pkçoﬁ_t
 *
pkç
);

276 
pkçoﬁ_dbg_nŸify
(
pkçoﬁ_t
 *
pkç
);

277 
pkçoﬁ_°©s_dump
(
pkçoﬁ_t
 *
pkç
, 
pkçoﬁ_°©s_t
 *
°©s
);

282 
	gëhî_addr
;

284 
ëhî_isbˇ°
(c⁄° *
ó
);

285 
ëhî_i¢uŒaddr
(c⁄° *
ó
);

289 
	#pktq_p£tmax
(
pq
, 
¥ec
, 
_max
Ë(’q)->
q
[¥ec].
max
 = (_max))

	)

290 
	#pktq_pmax
(
pq
, 
¥ec
Ë(’q)->
q
[¥ec].
max
)

	)

291 
	#pktq_∂í
(
pq
, 
¥ec
Ë(’q)->
q
[¥ec].
Àn
)

	)

292 
	#pktq_∑vaû
(
pq
, 
¥ec
Ë(’q)->
q
[¥ec].
max
 - (pq)->q[¥ec].
Àn
)

	)

293 
	#pktq_pfuŒ
(
pq
, 
¥ec
Ë(’q)->
q
[¥ec].
Àn
 >’q)->q[¥ec].
max
)

	)

294 
	#pktq_≥m±y
(
pq
, 
¥ec
Ë(’q)->
q
[¥ec].
Àn
 =0)

	)

296 
	#pktq_µìk
(
pq
, 
¥ec
Ë(’q)->
q
[¥ec].
hód
)

	)

297 
	#pktq_µìk_èû
(
pq
, 
¥ec
Ë(’q)->
q
[¥ec].
èû
)

	)

299 *
pktq_≥nq
(
pktq
 *
pq
, 
¥ec
, *
p
);

300 *
pktq_≥nq_hód
(
pktq
 *
pq
, 
¥ec
, *
p
);

301 *
pktq_pdeq
(
pktq
 *
pq
, 
¥ec
);

302 *
pktq_pdeq_¥ev
(
pktq
 *
pq
, 
¥ec
, *
¥ev_p
);

303 *
pktq_pdeq_èû
(
pktq
 *
pq
, 
¥ec
);

305 
pktq_pÊush
(
o¶_t
 *
osh
, 
pktq
 *
pq
, 
¥ec
, 
boﬁ
 
dú
,

306 
iÂkt_cb_t
 
‚
, 
¨g
);

308 
boﬁ
 
pktq_pdñ
(
pktq
 *
pq
, *
p
, 
¥ec
);

312 
pktq_mÀn
(
pktq
 *
pq
, 
uöt
 
¥ec_bmp
);

313 *
pktq_mdeq
(
pktq
 *
pq
, 
uöt
 
¥ec_bmp
, *
¥ec_out
);

314 *
pktq_m≥ek
(
pktq
 *
pq
, 
uöt
 
¥ec_bmp
, *
¥ec_out
);

318 
	#pktq_Àn
(
pq
Ë(()’q)->
Àn
)

	)

319 
	#pktq_max
(
pq
Ë(()’q)->
max
)

	)

320 
	#pktq_avaû
(
pq
Ë(()(’q)->
max
 - (pq)->
Àn
))

	)

321 
	#pktq_fuŒ
(
pq
Ë(’q)->
Àn
 >’q)->
max
)

	)

322 
	#pktq_em±y
(
pq
Ë(’q)->
Àn
 =0)

	)

325 
	#pkãnq
(
pq
, 
p
Ë
	`pktq_≥nq
(((
pktq
 *)(*Ìq), 0, (p))

	)

326 
	#pkãnq_hód
(
pq
, 
p
Ë
	`pktq_≥nq_hód
(((
pktq
 *)(*Ìq), 0, (p))

	)

327 
	#pktdeq
(
pq
Ë
	`pktq_pdeq
(((
pktq
 *)(*Ìq), 0)

	)

328 
	#pktdeq_èû
(
pq
Ë
	`pktq_pdeq_èû
(((
pktq
 *)(*Ìq), 0)

	)

329 
	#pktqöô
(
pq
, 
Àn
Ë
	`pktq_öô
(((
pktq
 *)(*Ìq), 1,Üí)

	)

331 
pktq_öô
(
pktq
 *
pq
, 
num_¥ec
, 
max_Àn
);

332 
pktq_£t_max_∂í
(
pktq
 *
pq
, 
¥ec
, 
max_Àn
);

335 *
pktq_deq
(
pktq
 *
pq
, *
¥ec_out
);

336 *
pktq_deq_èû
(
pktq
 *
pq
, *
¥ec_out
);

337 *
pktq_≥ek
(
pktq
 *
pq
, *
¥ec_out
);

338 *
pktq_≥ek_èû
(
pktq
 *
pq
, *
¥ec_out
);

339 
pktq_Êush
(
o¶_t
 *
osh
, 
pktq
 *
pq
, 
boﬁ
 
dú
, 
iÂkt_cb_t
 
‚
, 
¨g
);

343 
uöt
 
pktc›y
(
o¶_t
 *
osh
, *
p
, uöà
off£t
, 
Àn
, 
uch¨
 *
buf
);

344 
uöt
 
pkt‰ombuf
(
o¶_t
 *
osh
, *
p
, uöà
off£t
, 
Àn
, 
uch¨
 *
buf
);

345 
uöt
 
pkâŸÀn
(
o¶_t
 *
osh
, *
p
);

346 *
pkéa°
(
o¶_t
 *
osh
, *
p
);

347 
uöt
 
pkt£g˙t
(
o¶_t
 *
osh
, *
p
);

348 
uöt
 
pkt£g˙t_w¨
(
o¶_t
 *
osh
, *
p
);

349 
uöt8
 *
pktoff£t
(
o¶_t
 *
osh
, *
p
, 
uöt
 
off£t
);

352 
	#PKTPRIO_VDSCP
 0x100

	)

353 
	#PKTPRIO_VLAN
 0x200

	)

354 
	#PKTPRIO_UPD
 0x400

	)

355 
	#PKTPRIO_DSCP
 0x800

	)

357 
uöt
 
pkt£çrio
(*
pkt
, 
boﬁ
 
upd©e_vèg
);

360 
bcm_©oi
(c⁄° *
s
);

361 
ul⁄g
 
bcm_°πoul
(c⁄° *
˝
, **
ídp
, 
uöt
 
ba£
);

362 *
bcm°r°r
(c⁄° *
hay°ack
, c⁄° *
√edÀ
);

363 *
bcm°rˇt
(*
de°
, c⁄° *
§c
);

364 *
bcm°∫ˇt
(*
de°
, c⁄° *
§c
, 
uöt
 
size
);

365 
ul⁄g
 
wch¨2ascii
(*
abuf
, 
ush‹t
 *
wbuf
, ush‹à
wbuÊí
, ul⁄g 
abuÊí
);

366 * 
bcm°πok
(**
°rög
, c⁄° *
dñimôîs
, *
tokdñim
);

367 
bcm°ricmp
(c⁄° *
s1
, c⁄° *
s2
);

368 
bcm°∫icmp
(c⁄° * 
s1
, c⁄° * 
s2
, 
˙t
);

372 *
bcm_ëhî_¡ﬂ
(c⁄° 
ëhî_addr
 *
ó
, *
buf
);

373 
bcm_ëhî_©€
(c⁄° *
p
, 
ëhî_addr
 *
ó
);

376 
	gùv4_addr
;

377 *
bcm_ù_¡ﬂ
(
ùv4_addr
 *
ü
, *
buf
);

380 
bcm_mdñay
(
uöt
 
ms
);

382 
	#NVRAM_RECLAIM_CHECK
(
«me
)

	)

384 *
gëv¨
(*
v¨s
, c⁄° *
«me
);

385 
gëötv¨
(*
v¨s
, c⁄° *
«me
);

386 
gëötv¨¨øy
(*
v¨s
, c⁄° *
«me
, 
ödex
);

387 
gëötv¨¨øysize
(*
v¨s
, c⁄° *
«me
);

388 
uöt
 
gëgpi›ö
(*
v¨s
, *
pö_«me
, uöà
def_pö
);

389 
	#bcm_≥rf_íabÀ
()

	)

390 
	#bcm°©s
(
fmt
)

	)

391 
	#bcmlog
(
fmt
, 
a1
, 
a2
)

	)

392 
	#bcmdum∂og
(
buf
, 
size
Ë*bu‡'\0'

	)

393 
	#bcmdum∂ogít
(
buf
, 
idx
Ë-1

	)

395 
	#bcmt¶og
(
t°amp
, 
fmt
, 
a1
, 
a2
)

	)

396 
	#bcm¥öâ¶ogs
()

	)

397 
	#bcm¥öâ°amp
(
us
)

	)

398 
	#bcmdum±¶og
(
buf
, 
size
)

	)

400 *
bcm_nvøm_v¨s
(
uöt
 *
Àngth
);

401 
bcm_nvøm_ˇche
(*
sih
);

411 
	sbcm_iov¨
 {

412 c⁄° *
	g«me
;

413 
uöt16
 
	gv¨id
;

414 
uöt16
 
	gÊags
;

415 
uöt16
 
	gty≥
;

416 
uöt16
 
	gmöÀn
;

417 } 
	tbcm_iov¨_t
;

422 
	#IOV_GET
 0

	)

423 
	#IOV_SET
 1

	)

426 
	#IOV_GVAL
(
id
Ë((idË* 2)

	)

427 
	#IOV_SVAL
(
id
Ë((idË* 2 + 
IOV_SET
)

	)

428 
	#IOV_ISSET
(
a˘i⁄id
Ë(◊˘i⁄id & 
IOV_SET
Ë=IOV_SET)

	)

429 
	#IOV_ID
(
a˘i⁄id
Ë◊˘i⁄id >> 1)

	)

433 c⁄° 
bcm_iov¨_t
 *
bcm_iov¨_lookup
(c⁄° bcm_iov¨_à*
èbÀ
, c⁄° *
«me
);

434 
bcm_iov¨_Àncheck
(c⁄° 
bcm_iov¨_t
 *
èbÀ
, *
¨g
, 
Àn
, 
boﬁ
 
£t
);

435 #i‡
deföed
(
WLTINYDUMP
Ë|| deföed(
WLMSG_INFORM
Ë|| deföed(
WLMSG_ASSOC
) || \

436 
deföed
(
WLMSG_PRPKT
Ë|| deföed(
WLMSG_WSEC
)

437 
bcm_f‹m©_ssid
(* 
buf
, c⁄° 
uch¨
 
ssid
[], 
uöt
 
ssid_Àn
);

442 
	#IOVT_VOID
 0

	)

443 
	#IOVT_BOOL
 1

	)

444 
	#IOVT_INT8
 2

	)

445 
	#IOVT_UINT8
 3

	)

446 
	#IOVT_INT16
 4

	)

447 
	#IOVT_UINT16
 5

	)

448 
	#IOVT_INT32
 6

	)

449 
	#IOVT_UINT32
 7

	)

450 
	#IOVT_BUFFER
 8

	)

451 
	#BCM_IOVT_VALID
(
ty≥
Ë((()—y≥)Ë<
IOVT_BUFFER
)

	)

454 
	#BCM_IOV_TYPE_INIT
 { \

464 "" }

	)

466 
	#BCM_IOVT_IS_INT
(
ty≥
) (\

467 (
ty≥
 =
IOVT_BOOL
) || \

468 (
ty≥
 =
IOVT_INT8
) || \

469 (
ty≥
 =
IOVT_UINT8
) || \

470 (
ty≥
 =
IOVT_INT16
) || \

471 (
ty≥
 =
IOVT_UINT16
) || \

472 (
ty≥
 =
IOVT_INT32
) || \

473 (
ty≥
 =
IOVT_UINT32
))

	)

477 
	#BCME_STRLEN
 64

	)

478 
	#VALID_BCMERROR
(
e
Ë(” <0Ë&& (ê>
BCME_LAST
))

	)

489 
	#BCME_OK
 0

	)

490 
	#BCME_ERROR
 -1

	)

491 
	#BCME_BADARG
 -2

	)

492 
	#BCME_BADOPTION
 -3

	)

493 
	#BCME_NOTUP
 -4

	)

494 
	#BCME_NOTDOWN
 -5

	)

495 
	#BCME_NOTAP
 -6

	)

496 
	#BCME_NOTSTA
 -7

	)

497 
	#BCME_BADKEYIDX
 -8

	)

498 
	#BCME_RADIOOFF
 -9

	)

499 
	#BCME_NOTBANDLOCKED
 -10

	)

500 
	#BCME_NOCLK
 -11

	)

501 
	#BCME_BADRATESET
 -12

	)

502 
	#BCME_BADBAND
 -13

	)

503 
	#BCME_BUFTOOSHORT
 -14

	)

504 
	#BCME_BUFTOOLONG
 -15

	)

505 
	#BCME_BUSY
 -16

	)

506 
	#BCME_NOTASSOCIATED
 -17

	)

507 
	#BCME_BADSSIDLEN
 -18

	)

508 
	#BCME_OUTOFRANGECHAN
 -19

	)

509 
	#BCME_BADCHAN
 -20

	)

510 
	#BCME_BADADDR
 -21

	)

511 
	#BCME_NORESOURCE
 -22

	)

512 
	#BCME_UNSUPPORTED
 -23

	)

513 
	#BCME_BADLEN
 -24

	)

514 
	#BCME_NOTREADY
 -25

	)

515 
	#BCME_EPERM
 -26

	)

516 
	#BCME_NOMEM
 -27

	)

517 
	#BCME_ASSOCIATED
 -28

	)

518 
	#BCME_RANGE
 -29

	)

519 
	#BCME_NOTFOUND
 -30

	)

520 
	#BCME_WME_NOT_ENABLED
 -31

	)

521 
	#BCME_TSPEC_NOTFOUND
 -32

	)

522 
	#BCME_ACM_NOTSUPPORTED
 -33

	)

523 
	#BCME_NOT_WME_ASSOCIATION
 -34

	)

524 
	#BCME_SDIO_ERROR
 -35

	)

525 
	#BCME_DONGLE_DOWN
 -36

	)

526 
	#BCME_VERSION
 -37

	)

527 
	#BCME_TXFAIL
 -38

	)

528 
	#BCME_RXFAIL
 -39

	)

529 
	#BCME_NODEVICE
 -40

	)

530 
	#BCME_NMODE_DISABLED
 -41

	)

531 
	#BCME_NONRESIDENT
 -42

	)

532 
	#BCME_LAST
 
BCME_NONRESIDENT


	)

535 
	#BCMERRSTRINGTABLE
 { \

579 }

	)

581 #i‚de‡
ABS


582 
	#ABS
(
a
Ë((◊Ë< 0Ë? -◊Ë: (a))

	)

585 #i‚de‡
MIN


586 
	#MIN
(
a
, 
b
Ë((◊Ë< (b)Ë? (aË: (b))

	)

589 #i‚de‡
MAX


590 
	#MAX
(
a
, 
b
Ë((◊Ë> (b)Ë? (aË: (b))

	)

593 
	#CEIL
(
x
, 
y
Ë(((xË+ ((yË- 1)Ë/ (y))

	)

594 
	#ROUNDUP
(
x
, 
y
Ë((((xË+ ((yË- 1)Ë/ (y)Ë* (y))

	)

595 
	#ISALIGNED
(
a
, 
x
Ë(((
uöçå
)◊Ë& ((xË- 1)Ë=0)

	)

596 
	#ALIGN_ADDR
(
addr
, 
bound¨y
Ë(*)(((
uöçå
)(addr) + (boundary) - 1) \

597 & ~((
bound¨y
Ë- 1))

	)

598 
	#ALIGN_SIZE
(
size
, 
bound¨y
) (((size) + (boundary) - 1) \

599 & ~((
bound¨y
Ë- 1))

	)

600 
	#ISPOWEROF2
(
x
Ë((((xË- 1Ë& (x)Ë=0)

	)

601 
	#VALID_MASK
(
mask
Ë!((maskË& ((maskË+ 1))

	)

603 #i‚de‡
OFFSETOF


604 #ifde‡
__ARMCC_VERSION


610 
	~<°ddef.h
>

611 
	#OFFSETOF
(
ty≥
, 
membî
Ë
	`off£tof
—y≥, membî)

	)

613 
	#OFFSETOF
(
ty≥
, 
membî
Ë((
uöt
)(
uöçå
)&(—y≥ *)0)->membî)

	)

617 #i‚de‡
ARRAYSIZE


618 
	#ARRAYSIZE
(
a
Ë(◊Ë/ ◊[0]))

	)

622 *
_bcmutûs_dummy_‚
;

623 
	#REFERENCE_FUNCTION
(
f
Ë(
_bcmutûs_dummy_‚
 = (*)(f))

	)

626 #i‚de‡
£tbô


627 #i‚de‡
NBBY


628 
	#NBBY
 8

	)

630 
	#£tbô
(
a
, 
i
Ë(((
uöt8
 *Ô)[(iË/ 
NBBY
] |1 << ((iË% NBBY))

	)

631 
	#˛rbô
(
a
, 
i
Ë(((
uöt8
 *Ô)[(iË/ 
NBBY
] &~(1 << ((iË% NBBY)))

	)

632 
	#is£t
(
a
, 
i
Ë(((c⁄° 
uöt8
 *Ô)[(iË/ 
NBBY
] & (1 << ((iË% NBBY)))

	)

633 
	#is˛r
(
a
, 
i
Ë((((c⁄° 
uöt8
 *Ô)[(iË/ 
NBBY
] & (1 << ((iË% NBBY))Ë=0)

	)

636 
	#NBITS
(
ty≥
Ë(—y≥Ë* 8)

	)

637 
	#NBITVAL
(
nbôs
Ë(1 << (nbôs))

	)

638 
	#MAXBITVAL
(
nbôs
Ë((1 << (nbôs)Ë- 1)

	)

639 
	#NBITMASK
(
nbôs
Ë
	`MAXBITVAL
“bôs)

	)

640 
	#MAXNBVAL
(
nbyã
Ë
	`MAXBITVAL
(“byãË* 8)

	)

643 
	#MUX
(
¥ed
, 
åue
, 
Ál£
Ë(’ªdË? (åueË: (Ál£))

	)

646 
	#MODDEC
(
x
, 
bound
Ë
	`MUX
((xË=0, (boundË- 1, (xË- 1)

	)

647 
	#MODINC
(
x
, 
bound
Ë
	`MUX
((xË=(boundË- 1, 0, (xË+ 1)

	)

650 
	#MODDEC_POW2
(
x
, 
bound
Ë(((xË- 1Ë& ((boundË- 1))

	)

651 
	#MODINC_POW2
(
x
, 
bound
Ë(((xË+ 1Ë& ((boundË- 1))

	)

654 
	#MODADD
(
x
, 
y
, 
bound
) \

655 
	`MUX
((
x
Ë+ (
y
Ë>(
bound
), (xË+ (yË- (bound), (xË+ (y))

	)

656 
	#MODSUB
(
x
, 
y
, 
bound
) \

657 
	`MUX
((()(
x
)Ë- (()(
y
)Ë< 0, (xË- (yË+ (
bound
), (xË- (y))

	)

660 
	#MODADD_POW2
(
x
, 
y
, 
bound
Ë(((xË+ (y)Ë& ((boundË- 1))

	)

661 
	#MODSUB_POW2
(
x
, 
y
, 
bound
Ë(((xË- (y)Ë& ((boundË- 1))

	)

664 
	#CRC8_INIT_VALUE
 0xf‡

	)

665 
	#CRC8_GOOD_VALUE
 0x9‡

	)

666 
	#CRC16_INIT_VALUE
 0xfff‡

	)

667 
	#CRC16_GOOD_VALUE
 0xf0b8

	)

668 
	#CRC32_INIT_VALUE
 0xfffffff‡

	)

669 
	#CRC32_GOOD_VALUE
 0xdebb20e3

	)

672 
	#MACF
 "%02x:%02x:%02x:%02x:%02x:%02x"

	)

673 
	#ETHERP_TO_MACF
(
ó
Ë((
ëhî_addr
 *Ë”a))->
o˘ë
[0], \

674 ((
ëhî_addr
 *Ë(
ó
))->
o˘ë
[1], \

675 ((
ëhî_addr
 *Ë(
ó
))->
o˘ë
[2], \

676 ((
ëhî_addr
 *Ë(
ó
))->
o˘ë
[3], \

677 ((
ëhî_addr
 *Ë(
ó
))->
o˘ë
[4], \

678 ((
ëhî_addr
 *Ë(
ó
))->
o˘ë
[5]

	)

680 
	#ETHER_TO_MACF
(
ó
Ë”a).
o˘ë
[0], \

681 (
ó
).
o˘ë
[1], \

682 (
ó
).
o˘ë
[2], \

683 (
ó
).
o˘ë
[3], \

684 (
ó
).
o˘ë
[4], \

685 (
ó
).
o˘ë
[5]

	)

686 #i‡!
deföed
(
SIMPLE_MAC_PRINT
)

687 
	#MACDBG
 "%02x:%02x:%02x:%02x:%02x:%02x"

	)

688 
	#MAC2STRDBG
(
ó
Ë”a)[0], (ó)[1], (ó)[2], (ó)[3], (ó)[4], (ó)[5]

	)

690 
	#MACDBG
 "%02x:%02x:%02x"

	)

691 
	#MAC2STRDBG
(
ó
Ë”a)[0], (ó)[4], (ó)[5]

	)

695 
	sbcm_bô_desc
 {

696 
uöt32
 
	gbô
;

697 c⁄° * 
	g«me
;

698 } 
	tbcm_bô_desc_t
;

701 
	sbcm_év
 {

702 
uöt8
 
	gid
;

703 
uöt8
 
	gÀn
;

704 
uöt8
 
	gd©a
[1];

705 } 
	tbcm_év_t
;

708 
	#bcm_vÆid_év
(
ñt
, 
buÊí
Ë((buÊíË>2 && ()(buÊíË>()(2 + (ñt)->
Àn
))

	)

711 
	#ETHER_ADDR_STR_LEN
 18

	)

715 
INLINE
 

716 
x‹_128bô_block
(c⁄° 
uöt8
 *
§c1
, c⁄° uöt8 *
§c2
, uöt8 *
d°
)

719 #ifde‡
__i386__


722 (((
	guöçå
)
	g§c1
 | (uöçå)
	g§c2
 | (uöçå)
	gd°
) & 3) == 0) {

725 ((
uöt32
 *)
d°
)[0] = ((c⁄° uöt32 *)
§c1
)[0] ^ ((c⁄° uöt32 *)
§c2
)[0];

726 ((
	guöt32
 *)
	gd°
)[1] = ((c⁄° 
uöt32
 *)
§c1
)[1] ^ ((c⁄° uöt32 *)
§c2
)[1];

727 ((
	guöt32
 *)
	gd°
)[2] = ((c⁄° 
uöt32
 *)
§c1
)[2] ^ ((c⁄° uöt32 *)
§c2
)[2];

728 ((
	guöt32
 *)
	gd°
)[3] = ((c⁄° 
uöt32
 *)
§c1
)[3] ^ ((c⁄° uöt32 *)
§c2
)[3];

731 
	gk
;

732 
	gk
 = 0; k < 16; k++)

733 
	gd°
[
k
] = 
§c1
[k] ^ 
§c2
[k];

739 
uöt8
 
hnd¸c8
(uöt8 *
p
, 
uöt
 
nbyãs
, uöt8 
¸c
);

740 
uöt16
 
hnd¸c16
(
uöt8
 *
p
, 
uöt
 
nbyãs
, uöt16 
¸c
);

741 
uöt32
 
hnd¸c32
(
uöt8
 *
p
, 
uöt
 
nbyãs
, uöt32 
¸c
);

744 #i‡
deföed
(
DHD_DEBUG
Ë|| deföed(
WLMSG_PRHDRS
Ë|| deföed(
WLMSG_PRPKT
) || \

745 
deföed
(
WLMSG_ASSOC
)

746 
bcm_f‹m©_Êags
(c⁄° 
bcm_bô_desc_t
 *
bd
, 
uöt32
 
Êags
, * 
buf
, 
Àn
);

749 #i‡
deföed
(
DHD_DEBUG
Ë|| deföed(
WLMSG_PRHDRS
Ë|| deföed(
WLMSG_PRPKT
) || \

750 
deföed
(
WLMSG_ASSOC
Ë|| deföed(
WLMEDIA_PEAKRATE
)

751 
bcm_f‹m©_hex
(*
°r
, c⁄° *
byãs
, 
Àn
);

754 c⁄° *
bcm_¸y±o_Ægo_«me
(
uöt
 
Ægo
);

755 *
bcm_chù«me
(
uöt
 
chùid
, *
buf
, uöà
Àn
);

756 *
bcm_bªv_°r
(
uöt32
 
bªv
, *
buf
);

757 
¥ötbig
(*
buf
);

758 
¥hex
(c⁄° *
msg
, 
uch¨
 *
buf
, 
uöt
 
Àn
);

761 
bcm_év_t
 *
bcm_√xt_év
(bcm_év_à*
ñt
, *
buÊí
);

762 
bcm_év_t
 *
bcm_∑r£_évs
(*
buf
, 
buÊí
, 
uöt
 
key
);

763 
bcm_év_t
 *
bcm_∑r£_‹dîed_évs
(*
buf
, 
buÊí
, 
uöt
 
key
);

766 c⁄° *
bcmîr‹°r
(
bcmîr‹
);

767 
bcm_év_t
 *
bcm_∑r£_évs
(*
buf
, 
buÊí
, 
uöt
 
key
);

770 
uöt32
 
	tmboﬁ
;

771 
	#mboﬁ£t
(
mb
, 
bô
Ë((mbË|(bô)Ë

	)

772 
	#mboﬁ˛r
(
mb
, 
bô
Ë((mbË&~(bô)Ë

	)

773 
	#mboﬁis£t
(
mb
, 
bô
Ë(((mbË& (bô)Ë!0Ë

	)

774 
	#mboﬁmask£t
(
mb
, 
mask
, 
vÆ
Ë((mbË(((mbË& ~(mask)Ë| (vÆ)))

	)

777 
	sfõlddesc
 {

778 c⁄° *
	g«móndfmt
;

779 
uöt32
 
	goff£t
;

780 
uöt32
 
	gÀn
;

783 
bcm_böô
(
bcm°rbuf
 *
b
, *
buf
, 
uöt
 
size
);

784 
bcm_b¥hex
(
bcm°rbuf
 *
b
, c⁄° *
msg
, 
boﬁ
 
√wlöe
, 
uöt8
 *
buf
, 
Àn
);

786 
bcm_öc_byãs
(
uch¨
 *
num
, 
num_byãs
, 
uöt8
 
amou¡
);

787 
bcm_cmp_byãs
(c⁄° 
uch¨
 *
¨g1
, c⁄° uch¨ *
¨g2
, 
uöt8
 
nbyãs
);

788 
bcm_¥öt_byãs
(c⁄° *
«me
, c⁄° 
uch¨
 *
cd©a
, 
Àn
);

790 
uöt32
 (*
	tbcmué_rdªg_πn
)(*
	t¨g0
, 
	tuöt
 
	t¨g1
, 
	tuöt32
 
	toff£t
);

791 
uöt
 
bcmdumpfõlds
(
bcmué_rdªg_πn
 
func_±r
, *
¨g0
, uöà
¨g1
, 
fõlddesc
 *
°r
,

792 *
buf
, 
uöt32
 
bufsize
);

793 
uöt
 
bcm_bôcou¡
(
uöt8
 *
bôm≠
, uöà
byãÀngth
);

795 
bcm_b¥ötf
(
bcm°rbuf
 *
b
, c⁄° *
fmt
, ...);

798 
uöt16
 
bcm_qdbm_to_mw
(
uöt8
 
qdbm
);

799 
uöt8
 
bcm_mw_to_qdbm
(
uöt16
 
mw
);

800 
uöt
 
bcm_mkiov¨
(*
«me
, *
d©a
, uöà
d©Æí
, *
buf
, uöà
Àn
);

802 
¥o˚ss_nvøm_v¨s
(*
v¨buf
, 
Àn
);

804 #ifde‡
__˝lu•lus


	@include/bcmwifi_channels.h

29 #i‚def 
_bcmwifi_ch™√ls_h_


30 
	#_bcmwifi_ch™√ls_h_


	)

34 
uöt16
 
	tch™•ec_t
;

37 
	#CH_UPPER_SB
 0x01

	)

38 
	#CH_LOWER_SB
 0x02

	)

39 
	#CH_EWA_VALID
 0x04

	)

40 
	#CH_80MHZ_APART
 16

	)

41 
	#CH_40MHZ_APART
 8

	)

42 
	#CH_20MHZ_APART
 4

	)

43 
	#CH_10MHZ_APART
 2

	)

44 
	#CH_5MHZ_APART
 1

	)

45 
	#CH_MAX_2G_CHANNEL
 14

	)

46 
	#MAXCHANNEL
 224

	)

50 
	#CHSPEC_CTLOVLP
(
•1
, 
•2
, 
£p
Ë
	`ABS
(
	`wf_ch•ec_˘lch™
(•1Ë- wf_ch•ec_˘lch™(•2)Ë< (£p)

	)

53 #unde‡
D11AC_IOTYPES


54 
	#D11AC_IOTYPES


	)

56 #i‚de‡
D11AC_IOTYPES


58 
	#WL_CHANSPEC_CHAN_MASK
 0x00ff

	)

59 
	#WL_CHANSPEC_CHAN_SHIFT
 0

	)

61 
	#WL_CHANSPEC_CTL_SB_MASK
 0x0300

	)

62 
	#WL_CHANSPEC_CTL_SB_SHIFT
 8

	)

63 
	#WL_CHANSPEC_CTL_SB_LOWER
 0x0100

	)

64 
	#WL_CHANSPEC_CTL_SB_UPPER
 0x0200

	)

65 
	#WL_CHANSPEC_CTL_SB_NONE
 0x0300

	)

67 
	#WL_CHANSPEC_BW_MASK
 0x0C00

	)

68 
	#WL_CHANSPEC_BW_SHIFT
 10

	)

69 
	#WL_CHANSPEC_BW_10
 0x0400

	)

70 
	#WL_CHANSPEC_BW_20
 0x0800

	)

71 
	#WL_CHANSPEC_BW_40
 0x0C00

	)

73 
	#WL_CHANSPEC_BAND_MASK
 0xf000

	)

74 
	#WL_CHANSPEC_BAND_SHIFT
 12

	)

75 #ifde‡
WL_CHANSPEC_BAND_5G


76 #unde‡
WL_CHANSPEC_BAND_5G


78 #ifde‡
WL_CHANSPEC_BAND_2G


79 #unde‡
WL_CHANSPEC_BAND_2G


81 
	#WL_CHANSPEC_BAND_5G
 0x1000

	)

82 
	#WL_CHANSPEC_BAND_2G
 0x2000

	)

83 
	#INVCHANSPEC
 255

	)

86 
	#LOWER_20_SB
(
ch™√l
Ë(((ch™√lË> 
CH_10MHZ_APART
Ë? ((ch™√lË- CH_10MHZ_APARTË: 0)

	)

87 
	#UPPER_20_SB
(
ch™√l
Ë(((ch™√lË< (
MAXCHANNEL
 - 
CH_10MHZ_APART
)) ? \

88 ((
ch™√l
Ë+ 
CH_10MHZ_APART
Ë: 0)

	)

89 
	#CHSPEC_WLCBANDUNIT
(
ch•ec
Ë(
	`CHSPEC_IS5G
(ch•ecË? 
BAND_5G_INDEX
 : 
BAND_2G_INDEX
)

	)

90 
	#CH20MHZ_CHSPEC
(
ch™√l
Ë(
ch™•ec_t
)((ch™•ec_t)(ch™√lË| 
WL_CHANSPEC_BW_20
 | \

91 
WL_CHANSPEC_CTL_SB_NONE
 | (((
ch™√l
Ë<
CH_MAX_2G_CHANNEL
) ? \

92 
WL_CHANSPEC_BAND_2G
 : 
WL_CHANSPEC_BAND_5G
))

	)

93 
	#NEXT_20MHZ_CHAN
(
ch™√l
Ë(((ch™√lË< (
MAXCHANNEL
 - 
CH_20MHZ_APART
)) ? \

94 ((
ch™√l
Ë+ 
CH_20MHZ_APART
Ë: 0)

	)

95 
	#CH40MHZ_CHSPEC
(
ch™√l
, 
˘lsb
Ë(
ch™•ec_t
) \

96 ((
ch™√l
Ë| (
˘lsb
Ë| 
WL_CHANSPEC_BW_40
 | \

97 ((
ch™√l
Ë<
CH_MAX_2G_CHANNEL
 ? 
WL_CHANSPEC_BAND_2G
 : \

98 
WL_CHANSPEC_BAND_5G
))

	)

99 
	#CHSPEC_CHANNEL
(
ch•ec
Ë((
uöt8
)((ch•ecË& 
WL_CHANSPEC_CHAN_MASK
))

	)

100 
	#CHSPEC_BAND
(
ch•ec
Ë((ch•ecË& 
WL_CHANSPEC_BAND_MASK
)

	)

103 
	#CHSPEC_CTL_SB
(
ch•ec
Ë((ch•ecË& 
WL_CHANSPEC_CTL_SB_MASK
)

	)

104 
	#CHSPEC_BW
(
ch•ec
Ë((ch•ecË& 
WL_CHANSPEC_BW_MASK
)

	)

106 #ifde‡
WL11N_20MHZONLY


108 
	#CHSPEC_IS10
(
ch•ec
Ë0

	)

109 
	#CHSPEC_IS20
(
ch•ec
Ë1

	)

110 #i‚de‡
CHSPEC_IS40


111 
	#CHSPEC_IS40
(
ch•ec
Ë0

	)

116 
	#CHSPEC_IS10
(
ch•ec
Ë(((ch•ecË& 
WL_CHANSPEC_BW_MASK
Ë=
WL_CHANSPEC_BW_10
)

	)

117 
	#CHSPEC_IS20
(
ch•ec
Ë(((ch•ecË& 
WL_CHANSPEC_BW_MASK
Ë=
WL_CHANSPEC_BW_20
)

	)

118 #i‚de‡
CHSPEC_IS40


119 
	#CHSPEC_IS40
(
ch•ec
Ë(((ch•ecË& 
WL_CHANSPEC_BW_MASK
Ë=
WL_CHANSPEC_BW_40
)

	)

124 
	#CHSPEC_IS5G
(
ch•ec
Ë(((ch•ecË& 
WL_CHANSPEC_BAND_MASK
Ë=
WL_CHANSPEC_BAND_5G
)

	)

125 
	#CHSPEC_IS2G
(
ch•ec
Ë(((ch•ecË& 
WL_CHANSPEC_BAND_MASK
Ë=
WL_CHANSPEC_BAND_2G
)

	)

126 
	#CHSPEC_SB_NONE
(
ch•ec
Ë(((ch•ecË& 
WL_CHANSPEC_CTL_SB_MASK
Ë=
WL_CHANSPEC_CTL_SB_NONE
)

	)

127 
	#CHSPEC_SB_UPPER
(
ch•ec
Ë(((ch•ecË& 
WL_CHANSPEC_CTL_SB_MASK
Ë=
WL_CHANSPEC_CTL_SB_UPPER
)

	)

128 
	#CHSPEC_SB_LOWER
(
ch•ec
Ë(((ch•ecË& 
WL_CHANSPEC_CTL_SB_MASK
Ë=
WL_CHANSPEC_CTL_SB_LOWER
)

	)

129 
	#CHSPEC_CTL_CHAN
(
ch•ec
Ë((
	`CHSPEC_SB_LOWER
(chspec)) ? \

130 (
	`LOWER_20_SB
(((
ch•ec
Ë& 
WL_CHANSPEC_CHAN_MASK
))) : \

131 (
	`UPPER_20_SB
(((
ch•ec
Ë& 
WL_CHANSPEC_CHAN_MASK
))))

	)

132 
	#CHSPEC2WLC_BAND
(
ch•ec
Ë(
	`CHSPEC_IS5G
(ch•ecË? 
WLC_BAND_5G
 : 
WLC_BAND_2G
)

	)

134 
	#CHANSPEC_STR_LEN
 8

	)

138 
	#WL_CHANSPEC_CHAN_MASK
 0x00ff

	)

139 
	#WL_CHANSPEC_CHAN_SHIFT
 0

	)

140 
	#WL_CHANSPEC_CHAN1_MASK
 0x000f

	)

141 
	#WL_CHANSPEC_CHAN1_SHIFT
 0

	)

142 
	#WL_CHANSPEC_CHAN2_MASK
 0x00f0

	)

143 
	#WL_CHANSPEC_CHAN2_SHIFT
 4

	)

145 
	#WL_CHANSPEC_CTL_SB_MASK
 0x0700

	)

146 
	#WL_CHANSPEC_CTL_SB_SHIFT
 8

	)

147 
	#WL_CHANSPEC_CTL_SB_LLL
 0x0000

	)

148 
	#WL_CHANSPEC_CTL_SB_LLU
 0x0100

	)

149 
	#WL_CHANSPEC_CTL_SB_LUL
 0x0200

	)

150 
	#WL_CHANSPEC_CTL_SB_LUU
 0x0300

	)

151 
	#WL_CHANSPEC_CTL_SB_ULL
 0x0400

	)

152 
	#WL_CHANSPEC_CTL_SB_ULU
 0x0500

	)

153 
	#WL_CHANSPEC_CTL_SB_UUL
 0x0600

	)

154 
	#WL_CHANSPEC_CTL_SB_UUU
 0x0700

	)

155 
	#WL_CHANSPEC_CTL_SB_LL
 
WL_CHANSPEC_CTL_SB_LLL


	)

156 
	#WL_CHANSPEC_CTL_SB_LU
 
WL_CHANSPEC_CTL_SB_LLU


	)

157 
	#WL_CHANSPEC_CTL_SB_UL
 
WL_CHANSPEC_CTL_SB_LUL


	)

158 
	#WL_CHANSPEC_CTL_SB_UU
 
WL_CHANSPEC_CTL_SB_LUU


	)

159 
	#WL_CHANSPEC_CTL_SB_L
 
WL_CHANSPEC_CTL_SB_LLL


	)

160 
	#WL_CHANSPEC_CTL_SB_U
 
WL_CHANSPEC_CTL_SB_LLU


	)

161 
	#WL_CHANSPEC_CTL_SB_LOWER
 
WL_CHANSPEC_CTL_SB_LLL


	)

162 
	#WL_CHANSPEC_CTL_SB_UPPER
 
WL_CHANSPEC_CTL_SB_LLU


	)

164 
	#WL_CHANSPEC_BW_MASK
 0x3800

	)

165 
	#WL_CHANSPEC_BW_SHIFT
 11

	)

166 
	#WL_CHANSPEC_BW_5
 0x0000

	)

167 
	#WL_CHANSPEC_BW_10
 0x0800

	)

168 
	#WL_CHANSPEC_BW_20
 0x1000

	)

169 
	#WL_CHANSPEC_BW_40
 0x1800

	)

170 
	#WL_CHANSPEC_BW_80
 0x2000

	)

171 
	#WL_CHANSPEC_BW_160
 0x2800

	)

172 
	#WL_CHANSPEC_BW_8080
 0x3000

	)

174 
	#WL_CHANSPEC_BAND_MASK
 0xc000

	)

175 
	#WL_CHANSPEC_BAND_SHIFT
 14

	)

176 
	#WL_CHANSPEC_BAND_2G
 0x0000

	)

177 
	#WL_CHANSPEC_BAND_3G
 0x4000

	)

178 
	#WL_CHANSPEC_BAND_4G
 0x8000

	)

179 
	#WL_CHANSPEC_BAND_5G
 0xc000

	)

180 
	#INVCHANSPEC
 255

	)

183 
	#LOWER_20_SB
(
ch™√l
Ë(((ch™√lË> 
CH_10MHZ_APART
) ? \

184 ((
ch™√l
Ë- 
CH_10MHZ_APART
Ë: 0)

	)

185 
	#UPPER_20_SB
(
ch™√l
Ë(((ch™√lË< (
MAXCHANNEL
 - 
CH_10MHZ_APART
)) ? \

186 ((
ch™√l
Ë+ 
CH_10MHZ_APART
Ë: 0)

	)

187 
	#LOWER_40_SB
(
ch™√l
Ë((ch™√lË- 
CH_20MHZ_APART
)

	)

188 
	#UPPER_40_SB
(
ch™√l
Ë((ch™√lË+ 
CH_20MHZ_APART
)

	)

189 
	#CHSPEC_WLCBANDUNIT
(
ch•ec
Ë(
	`CHSPEC_IS5G
(ch•ecË? 
BAND_5G_INDEX
 : 
BAND_2G_INDEX
)

	)

190 
	#CH20MHZ_CHSPEC
(
ch™√l
Ë(
ch™•ec_t
)((ch™•ec_t)(ch™√lË| 
WL_CHANSPEC_BW_20
 | \

191 (((
ch™√l
Ë<
CH_MAX_2G_CHANNEL
) ? \

192 
WL_CHANSPEC_BAND_2G
 : 
WL_CHANSPEC_BAND_5G
))

	)

193 
	#NEXT_20MHZ_CHAN
(
ch™√l
Ë(((ch™√lË< (
MAXCHANNEL
 - 
CH_20MHZ_APART
)) ? \

194 ((
ch™√l
Ë+ 
CH_20MHZ_APART
Ë: 0)

	)

195 
	#CH40MHZ_CHSPEC
(
ch™√l
, 
˘lsb
Ë(
ch™•ec_t
) \

196 ((
ch™√l
Ë| (
˘lsb
Ë| 
WL_CHANSPEC_BW_40
 | \

197 ((
ch™√l
Ë<
CH_MAX_2G_CHANNEL
 ? 
WL_CHANSPEC_BAND_2G
 : \

198 
WL_CHANSPEC_BAND_5G
))

	)

199 
	#CH80MHZ_CHSPEC
(
ch™√l
, 
˘lsb
Ë(
ch™•ec_t
) \

200 ((
ch™√l
Ë| (
˘lsb
) | \

201 
WL_CHANSPEC_BW_80
 | 
WL_CHANSPEC_BAND_5G
)

	)

202 
	#CH160MHZ_CHSPEC
(
ch™√l
, 
˘lsb
Ë(
ch™•ec_t
) \

203 ((
ch™√l
Ë| (
˘lsb
) | \

204 
WL_CHANSPEC_BW_160
 | 
WL_CHANSPEC_BAND_5G
)

	)

207 
	#CHSPEC_CHANNEL
(
ch•ec
Ë((
uöt8
)((ch•ecË& 
WL_CHANSPEC_CHAN_MASK
))

	)

208 
	#CHSPEC_CHAN1
(
ch•ec
Ë((ch•ecË& 
WL_CHANSPEC_CHAN1_MASK
)

	)

209 
	#CHSPEC_CHAN2
(
ch•ec
Ë((ch•ecË& 
WL_CHANSPEC_CHAN2_MASK
)

	)

210 
	#CHSPEC_BAND
(
ch•ec
Ë((ch•ecË& 
WL_CHANSPEC_BAND_MASK
)

	)

211 
	#CHSPEC_CTL_SB
(
ch•ec
Ë((ch•ecË& 
WL_CHANSPEC_CTL_SB_MASK
)

	)

212 
	#CHSPEC_BW
(
ch•ec
Ë((ch•ecË& 
WL_CHANSPEC_BW_MASK
)

	)

214 #ifde‡
WL11N_20MHZONLY


216 
	#CHSPEC_IS10
(
ch•ec
Ë0

	)

217 
	#CHSPEC_IS20
(
ch•ec
Ë1

	)

218 #i‚de‡
CHSPEC_IS40


219 
	#CHSPEC_IS40
(
ch•ec
Ë0

	)

221 #i‚de‡
CHSPEC_IS80


222 
	#CHSPEC_IS80
(
ch•ec
Ë0

	)

224 #i‚de‡
CHSPEC_IS160


225 
	#CHSPEC_IS160
(
ch•ec
Ë0

	)

227 #i‚de‡
CHSPEC_IS8080


228 
	#CHSPEC_IS8080
(
ch•ec
Ë0

	)

233 
	#CHSPEC_IS10
(
ch•ec
Ë(((ch•ecË& 
WL_CHANSPEC_BW_MASK
Ë=
WL_CHANSPEC_BW_10
)

	)

234 
	#CHSPEC_IS20
(
ch•ec
Ë(((ch•ecË& 
WL_CHANSPEC_BW_MASK
Ë=
WL_CHANSPEC_BW_20
)

	)

235 #i‚de‡
CHSPEC_IS40


236 
	#CHSPEC_IS40
(
ch•ec
Ë(((ch•ecË& 
WL_CHANSPEC_BW_MASK
Ë=
WL_CHANSPEC_BW_40
)

	)

238 #i‚de‡
CHSPEC_IS80


239 
	#CHSPEC_IS80
(
ch•ec
Ë(((ch•ecË& 
WL_CHANSPEC_BW_MASK
Ë=
WL_CHANSPEC_BW_80
)

	)

241 #i‚de‡
CHSPEC_IS160


242 
	#CHSPEC_IS160
(
ch•ec
Ë(((ch•ecË& 
WL_CHANSPEC_BW_MASK
Ë=
WL_CHANSPEC_BW_160
)

	)

244 #i‚de‡
CHSPEC_IS8080


245 
	#CHSPEC_IS8080
(
ch•ec
Ë(((ch•ecË& 
WL_CHANSPEC_BW_MASK
Ë=
WL_CHANSPEC_BW_8080
)

	)

250 
	#CHSPEC_IS5G
(
ch•ec
Ë(((ch•ecË& 
WL_CHANSPEC_BAND_MASK
Ë=
WL_CHANSPEC_BAND_5G
)

	)

251 
	#CHSPEC_IS2G
(
ch•ec
Ë(((ch•ecË& 
WL_CHANSPEC_BAND_MASK
Ë=
WL_CHANSPEC_BAND_2G
)

	)

252 
	#CHSPEC_SB_UPPER
(
ch•ec
) \

253 ((((
ch•ec
Ë& 
WL_CHANSPEC_CTL_SB_MASK
Ë=
WL_CHANSPEC_CTL_SB_UPPER
) && \

254 (((
ch•ec
Ë& 
WL_CHANSPEC_BW_MASK
Ë=
WL_CHANSPEC_BW_40
))

	)

255 
	#CHSPEC_SB_LOWER
(
ch•ec
) \

256 ((((
ch•ec
Ë& 
WL_CHANSPEC_CTL_SB_MASK
Ë=
WL_CHANSPEC_CTL_SB_LOWER
) && \

257 (((
ch•ec
Ë& 
WL_CHANSPEC_BW_MASK
Ë=
WL_CHANSPEC_BW_40
))

	)

258 
	#CHSPEC2WLC_BAND
(
ch•ec
Ë(
	`CHSPEC_IS5G
(ch•ecË? 
WLC_BAND_5G
 : 
WLC_BAND_2G
)

	)

263 
	#CHANSPEC_STR_LEN
 20

	)

269 
	#WL_LCHANSPEC_CHAN_MASK
 0x00ff

	)

270 
	#WL_LCHANSPEC_CHAN_SHIFT
 0

	)

272 
	#WL_LCHANSPEC_CTL_SB_MASK
 0x0300

	)

273 
	#WL_LCHANSPEC_CTL_SB_SHIFT
 8

	)

274 
	#WL_LCHANSPEC_CTL_SB_LOWER
 0x0100

	)

275 
	#WL_LCHANSPEC_CTL_SB_UPPER
 0x0200

	)

276 
	#WL_LCHANSPEC_CTL_SB_NONE
 0x0300

	)

278 
	#WL_LCHANSPEC_BW_MASK
 0x0C00

	)

279 
	#WL_LCHANSPEC_BW_SHIFT
 10

	)

280 
	#WL_LCHANSPEC_BW_10
 0x0400

	)

281 
	#WL_LCHANSPEC_BW_20
 0x0800

	)

282 
	#WL_LCHANSPEC_BW_40
 0x0C00

	)

284 
	#WL_LCHANSPEC_BAND_MASK
 0xf000

	)

285 
	#WL_LCHANSPEC_BAND_SHIFT
 12

	)

286 
	#WL_LCHANSPEC_BAND_5G
 0x1000

	)

287 
	#WL_LCHANSPEC_BAND_2G
 0x2000

	)

289 
	#LCHSPEC_CHANNEL
(
ch•ec
Ë((
uöt8
)((ch•ecË& 
WL_LCHANSPEC_CHAN_MASK
))

	)

290 
	#LCHSPEC_BAND
(
ch•ec
Ë((ch•ecË& 
WL_LCHANSPEC_BAND_MASK
)

	)

291 
	#LCHSPEC_CTL_SB
(
ch•ec
Ë((ch•ecË& 
WL_LCHANSPEC_CTL_SB_MASK
)

	)

292 
	#LCHSPEC_BW
(
ch•ec
Ë((ch•ecË& 
WL_LCHANSPEC_BW_MASK
)

	)

293 
	#LCHSPEC_IS10
(
ch•ec
Ë(((ch•ecË& 
WL_LCHANSPEC_BW_MASK
Ë=
WL_LCHANSPEC_BW_10
)

	)

294 
	#LCHSPEC_IS20
(
ch•ec
Ë(((ch•ecË& 
WL_LCHANSPEC_BW_MASK
Ë=
WL_LCHANSPEC_BW_20
)

	)

295 
	#LCHSPEC_IS40
(
ch•ec
Ë(((ch•ecË& 
WL_LCHANSPEC_BW_MASK
Ë=
WL_LCHANSPEC_BW_40
)

	)

296 
	#LCHSPEC_IS5G
(
ch•ec
Ë(((ch•ecË& 
WL_LCHANSPEC_BAND_MASK
Ë=
WL_LCHANSPEC_BAND_5G
)

	)

297 
	#LCHSPEC_IS2G
(
ch•ec
Ë(((ch•ecË& 
WL_LCHANSPEC_BAND_MASK
Ë=
WL_LCHANSPEC_BAND_2G
)

	)

299 
	#LCHSPEC_CREATE
(
ch™
, 
b™d
, 
bw
, 
sb
Ë((
uöt16
)((ch™Ë| (sbË| (bwË| (b™d)))

	)

313 
	#WF_CHAN_FACTOR_2_4_G
 4814

	)

319 
	#WF_CHAN_FACTOR_5_G
 10000

	)

325 
	#WF_CHAN_FACTOR_4_G
 8000

	)

328 
	#WLC_MAXRATE
 108

	)

329 
	#WLC_RATE_1M
 2

	)

330 
	#WLC_RATE_2M
 4

	)

331 
	#WLC_RATE_5M5
 11

	)

332 
	#WLC_RATE_11M
 22

	)

333 
	#WLC_RATE_6M
 12

	)

334 
	#WLC_RATE_9M
 18

	)

335 
	#WLC_RATE_12M
 24

	)

336 
	#WLC_RATE_18M
 36

	)

337 
	#WLC_RATE_24M
 48

	)

338 
	#WLC_RATE_36M
 72

	)

339 
	#WLC_RATE_48M
 96

	)

340 
	#WLC_RATE_54M
 108

	)

342 
	#WLC_2G_25MHZ_OFFSET
 5

	)

354 * 
wf_ch•ec_¡ﬂ
(
ch™•ec_t
 
ch•ec
, *
buf
);

363 
ch™•ec_t
 
wf_ch•ec_©⁄
(c⁄° *
a
);

376 
boﬁ
 
wf_ch•ec_mÆf‹med
(
ch™•ec_t
 
ch™•ec
);

385 
boﬁ
 
wf_ch•ec_vÆid
(
ch™•ec_t
 
ch™•ec
);

398 
uöt8
 
wf_ch•ec_˘lch™
(
ch™•ec_t
 
ch•ec
);

411 
ch™•ec_t
 
wf_ch•ec_˘lch•ec
(ch™•ec_à
ch•ec
);

420 
ch™•ec_t
 
wf_ch•ec_¥im¨y40_ch•ec
(ch™•ec_à
ch•ec
);

449 
wf_mhz2ch™√l
(
uöt
 
‰eq
, uöà
°¨t_Á˘‹
);

477 
wf_ch™√l2mhz
(
uöt
 
ch™√l
, uöà
°¨t_Á˘‹
);

488 
uöt16
 
wf_ch™√l2ch•ec
(
uöt
 
˘l_ch
, uöà
bw
);

	@include/bcmwifi_rates.h

27 #i‚de‡
_bcmwifi_øãs_h_


28 
	#_bcmwifi_øãs_h_


	)

30 #ifde‡
__˝lu•lus


35 
	#WL_RATESET_SZ_DSSS
 4

	)

36 
	#WL_RATESET_SZ_OFDM
 8

	)

37 
	#WL_RATESET_SZ_HT_MCS
 8

	)

38 
	#WL_RATESET_SZ_VHT_MCS
 10

	)

40 
	#WL_TX_CHAINS_MAX
 3

	)

42 
	#WL_RATE_DISABLED
 (-128Ë

	)

45 
	ewl_tx_bw
 {

46 
WL_TX_BW_20
,

47 
WL_TX_BW_40
,

48 
WL_TX_BW_80
,

49 
WL_TX_BW_20IN40
,

50 
WL_TX_BW_20IN80
,

51 
WL_TX_BW_40IN80
,

52 
WL_TX_BW_ALL


53 } 
	twl_tx_bw_t
;

60 
	ewl_tx_mode
 {

61 
WL_TX_MODE_NONE
,

62 
WL_TX_MODE_STBC
,

63 
WL_TX_MODE_CDD
,

64 
WL_TX_MODE_SDM


65 } 
	twl_tx_mode_t
;

69 
	ewl_tx_chaös
 {

70 
WL_TX_CHAINS_1
 = 1,

71 
WL_TX_CHAINS_2
,

72 
WL_TX_CHAINS_3


73 } 
	twl_tx_chaös_t
;

77 
	ewl_tx_nss
 {

78 
WL_TX_NSS_1
 = 1,

79 
WL_TX_NSS_2
,

80 
WL_TX_NSS_3


81 } 
	twl_tx_nss_t
;

84 
	e˛m_øãs
 {

91 
WL_RATE_1X1_DSSS_1
 = 0,

92 
WL_RATE_1X1_DSSS_2
 = 1,

93 
WL_RATE_1X1_DSSS_5_5
 = 2,

94 
WL_RATE_1X1_DSSS_11
 = 3,

96 
WL_RATE_1X1_OFDM_6
 = 4,

97 
WL_RATE_1X1_OFDM_9
 = 5,

98 
WL_RATE_1X1_OFDM_12
 = 6,

99 
WL_RATE_1X1_OFDM_18
 = 7,

100 
WL_RATE_1X1_OFDM_24
 = 8,

101 
WL_RATE_1X1_OFDM_36
 = 9,

102 
WL_RATE_1X1_OFDM_48
 = 10,

103 
WL_RATE_1X1_OFDM_54
 = 11,

105 
WL_RATE_1X1_MCS0
 = 12,

106 
WL_RATE_1X1_MCS1
 = 13,

107 
WL_RATE_1X1_MCS2
 = 14,

108 
WL_RATE_1X1_MCS3
 = 15,

109 
WL_RATE_1X1_MCS4
 = 16,

110 
WL_RATE_1X1_MCS5
 = 17,

111 
WL_RATE_1X1_MCS6
 = 18,

112 
WL_RATE_1X1_MCS7
 = 19,

114 
WL_RATE_1X1_VHT0SS1
 = 12,

115 
WL_RATE_1X1_VHT1SS1
 = 13,

116 
WL_RATE_1X1_VHT2SS1
 = 14,

117 
WL_RATE_1X1_VHT3SS1
 = 15,

118 
WL_RATE_1X1_VHT4SS1
 = 16,

119 
WL_RATE_1X1_VHT5SS1
 = 17,

120 
WL_RATE_1X1_VHT6SS1
 = 18,

121 
WL_RATE_1X1_VHT7SS1
 = 19,

122 
WL_RATE_1X1_VHT8SS1
 = 20,

123 
WL_RATE_1X1_VHT9SS1
 = 21,

132 
WL_RATE_1X2_DSSS_1
 = 22,

133 
WL_RATE_1X2_DSSS_2
 = 23,

134 
WL_RATE_1X2_DSSS_5_5
 = 24,

135 
WL_RATE_1X2_DSSS_11
 = 25,

137 
WL_RATE_1X2_CDD_OFDM_6
 = 26,

138 
WL_RATE_1X2_CDD_OFDM_9
 = 27,

139 
WL_RATE_1X2_CDD_OFDM_12
 = 28,

140 
WL_RATE_1X2_CDD_OFDM_18
 = 29,

141 
WL_RATE_1X2_CDD_OFDM_24
 = 30,

142 
WL_RATE_1X2_CDD_OFDM_36
 = 31,

143 
WL_RATE_1X2_CDD_OFDM_48
 = 32,

144 
WL_RATE_1X2_CDD_OFDM_54
 = 33,

146 
WL_RATE_1X2_CDD_MCS0
 = 34,

147 
WL_RATE_1X2_CDD_MCS1
 = 35,

148 
WL_RATE_1X2_CDD_MCS2
 = 36,

149 
WL_RATE_1X2_CDD_MCS3
 = 37,

150 
WL_RATE_1X2_CDD_MCS4
 = 38,

151 
WL_RATE_1X2_CDD_MCS5
 = 39,

152 
WL_RATE_1X2_CDD_MCS6
 = 40,

153 
WL_RATE_1X2_CDD_MCS7
 = 41,

155 
WL_RATE_1X2_VHT0SS1
 = 34,

156 
WL_RATE_1X2_VHT1SS1
 = 35,

157 
WL_RATE_1X2_VHT2SS1
 = 36,

158 
WL_RATE_1X2_VHT3SS1
 = 37,

159 
WL_RATE_1X2_VHT4SS1
 = 38,

160 
WL_RATE_1X2_VHT5SS1
 = 39,

161 
WL_RATE_1X2_VHT6SS1
 = 40,

162 
WL_RATE_1X2_VHT7SS1
 = 41,

163 
WL_RATE_1X2_VHT8SS1
 = 42,

164 
WL_RATE_1X2_VHT9SS1
 = 43,

167 
WL_RATE_2X2_STBC_MCS0
 = 44,

168 
WL_RATE_2X2_STBC_MCS1
 = 45,

169 
WL_RATE_2X2_STBC_MCS2
 = 46,

170 
WL_RATE_2X2_STBC_MCS3
 = 47,

171 
WL_RATE_2X2_STBC_MCS4
 = 48,

172 
WL_RATE_2X2_STBC_MCS5
 = 49,

173 
WL_RATE_2X2_STBC_MCS6
 = 50,

174 
WL_RATE_2X2_STBC_MCS7
 = 51,

176 
WL_RATE_2X2_STBC_VHT0SS1
 = 44,

177 
WL_RATE_2X2_STBC_VHT1SS1
 = 45,

178 
WL_RATE_2X2_STBC_VHT2SS1
 = 46,

179 
WL_RATE_2X2_STBC_VHT3SS1
 = 47,

180 
WL_RATE_2X2_STBC_VHT4SS1
 = 48,

181 
WL_RATE_2X2_STBC_VHT5SS1
 = 49,

182 
WL_RATE_2X2_STBC_VHT6SS1
 = 50,

183 
WL_RATE_2X2_STBC_VHT7SS1
 = 51,

184 
WL_RATE_2X2_STBC_VHT8SS1
 = 52,

185 
WL_RATE_2X2_STBC_VHT9SS1
 = 53,

187 
WL_RATE_2X2_SDM_MCS8
 = 54,

188 
WL_RATE_2X2_SDM_MCS9
 = 55,

189 
WL_RATE_2X2_SDM_MCS10
 = 56,

190 
WL_RATE_2X2_SDM_MCS11
 = 57,

191 
WL_RATE_2X2_SDM_MCS12
 = 58,

192 
WL_RATE_2X2_SDM_MCS13
 = 59,

193 
WL_RATE_2X2_SDM_MCS14
 = 60,

194 
WL_RATE_2X2_SDM_MCS15
 = 61,

196 
WL_RATE_2X2_VHT0SS2
 = 54,

197 
WL_RATE_2X2_VHT1SS2
 = 55,

198 
WL_RATE_2X2_VHT2SS2
 = 56,

199 
WL_RATE_2X2_VHT3SS2
 = 57,

200 
WL_RATE_2X2_VHT4SS2
 = 58,

201 
WL_RATE_2X2_VHT5SS2
 = 59,

202 
WL_RATE_2X2_VHT6SS2
 = 60,

203 
WL_RATE_2X2_VHT7SS2
 = 61,

204 
WL_RATE_2X2_VHT8SS2
 = 62,

205 
WL_RATE_2X2_VHT9SS2
 = 63,

214 
WL_RATE_1X3_DSSS_1
 = 64,

215 
WL_RATE_1X3_DSSS_2
 = 65,

216 
WL_RATE_1X3_DSSS_5_5
 = 66,

217 
WL_RATE_1X3_DSSS_11
 = 67,

219 
WL_RATE_1X3_CDD_OFDM_6
 = 68,

220 
WL_RATE_1X3_CDD_OFDM_9
 = 69,

221 
WL_RATE_1X3_CDD_OFDM_12
 = 70,

222 
WL_RATE_1X3_CDD_OFDM_18
 = 71,

223 
WL_RATE_1X3_CDD_OFDM_24
 = 72,

224 
WL_RATE_1X3_CDD_OFDM_36
 = 73,

225 
WL_RATE_1X3_CDD_OFDM_48
 = 74,

226 
WL_RATE_1X3_CDD_OFDM_54
 = 75,

228 
WL_RATE_1X3_CDD_MCS0
 = 76,

229 
WL_RATE_1X3_CDD_MCS1
 = 77,

230 
WL_RATE_1X3_CDD_MCS2
 = 78,

231 
WL_RATE_1X3_CDD_MCS3
 = 79,

232 
WL_RATE_1X3_CDD_MCS4
 = 80,

233 
WL_RATE_1X3_CDD_MCS5
 = 81,

234 
WL_RATE_1X3_CDD_MCS6
 = 82,

235 
WL_RATE_1X3_CDD_MCS7
 = 83,

237 
WL_RATE_1X3_VHT0SS1
 = 76,

238 
WL_RATE_1X3_VHT1SS1
 = 77,

239 
WL_RATE_1X3_VHT2SS1
 = 78,

240 
WL_RATE_1X3_VHT3SS1
 = 79,

241 
WL_RATE_1X3_VHT4SS1
 = 80,

242 
WL_RATE_1X3_VHT5SS1
 = 81,

243 
WL_RATE_1X3_VHT6SS1
 = 82,

244 
WL_RATE_1X3_VHT7SS1
 = 83,

245 
WL_RATE_1X3_VHT8SS1
 = 84,

246 
WL_RATE_1X3_VHT9SS1
 = 85,

249 
WL_RATE_2X3_STBC_MCS0
 = 86,

250 
WL_RATE_2X3_STBC_MCS1
 = 87,

251 
WL_RATE_2X3_STBC_MCS2
 = 88,

252 
WL_RATE_2X3_STBC_MCS3
 = 89,

253 
WL_RATE_2X3_STBC_MCS4
 = 90,

254 
WL_RATE_2X3_STBC_MCS5
 = 91,

255 
WL_RATE_2X3_STBC_MCS6
 = 92,

256 
WL_RATE_2X3_STBC_MCS7
 = 93,

258 
WL_RATE_2X3_STBC_VHT0SS1
 = 86,

259 
WL_RATE_2X3_STBC_VHT1SS1
 = 87,

260 
WL_RATE_2X3_STBC_VHT2SS1
 = 88,

261 
WL_RATE_2X3_STBC_VHT3SS1
 = 89,

262 
WL_RATE_2X3_STBC_VHT4SS1
 = 90,

263 
WL_RATE_2X3_STBC_VHT5SS1
 = 91,

264 
WL_RATE_2X3_STBC_VHT6SS1
 = 92,

265 
WL_RATE_2X3_STBC_VHT7SS1
 = 93,

266 
WL_RATE_2X3_STBC_VHT8SS1
 = 94,

267 
WL_RATE_2X3_STBC_VHT9SS1
 = 95,

269 
WL_RATE_2X3_SDM_MCS8
 = 96,

270 
WL_RATE_2X3_SDM_MCS9
 = 97,

271 
WL_RATE_2X3_SDM_MCS10
 = 98,

272 
WL_RATE_2X3_SDM_MCS11
 = 99,

273 
WL_RATE_2X3_SDM_MCS12
 = 100,

274 
WL_RATE_2X3_SDM_MCS13
 = 101,

275 
WL_RATE_2X3_SDM_MCS14
 = 102,

276 
WL_RATE_2X3_SDM_MCS15
 = 103,

278 
WL_RATE_2X3_VHT0SS2
 = 96,

279 
WL_RATE_2X3_VHT1SS2
 = 97,

280 
WL_RATE_2X3_VHT2SS2
 = 98,

281 
WL_RATE_2X3_VHT3SS2
 = 99,

282 
WL_RATE_2X3_VHT4SS2
 = 100,

283 
WL_RATE_2X3_VHT5SS2
 = 101,

284 
WL_RATE_2X3_VHT6SS2
 = 102,

285 
WL_RATE_2X3_VHT7SS2
 = 103,

286 
WL_RATE_2X3_VHT8SS2
 = 104,

287 
WL_RATE_2X3_VHT9SS2
 = 105,

290 
WL_RATE_3X3_SDM_MCS16
 = 106,

291 
WL_RATE_3X3_SDM_MCS17
 = 107,

292 
WL_RATE_3X3_SDM_MCS18
 = 108,

293 
WL_RATE_3X3_SDM_MCS19
 = 109,

294 
WL_RATE_3X3_SDM_MCS20
 = 110,

295 
WL_RATE_3X3_SDM_MCS21
 = 111,

296 
WL_RATE_3X3_SDM_MCS22
 = 112,

297 
WL_RATE_3X3_SDM_MCS23
 = 113,

299 
WL_RATE_3X3_VHT0SS3
 = 106,

300 
WL_RATE_3X3_VHT1SS3
 = 107,

301 
WL_RATE_3X3_VHT2SS3
 = 108,

302 
WL_RATE_3X3_VHT3SS3
 = 109,

303 
WL_RATE_3X3_VHT4SS3
 = 110,

304 
WL_RATE_3X3_VHT5SS3
 = 111,

305 
WL_RATE_3X3_VHT6SS3
 = 112,

306 
WL_RATE_3X3_VHT7SS3
 = 113,

307 
WL_RATE_3X3_VHT8SS3
 = 114,

308 
WL_RATE_3X3_VHT9SS3
 = 115,

311 
WL_NUMRATES
 = 116

312 } 
	t˛m_øãs_t
;

314 #ifde‡
__˝lu•lus


	@include/dhdioctl.h

31 #i‚de‡
_dhdio˘l_h_


32 
	#_dhdio˘l_h_


	)

34 
	~<ty≥defs.h
>

38 
	#BWL_DEFAULT_PACKING


	)

39 
	~<∑cked_£˘i⁄_°¨t.h
>

43 
	sdhd_io˘l
 {

44 
uöt
 
	mcmd
;

45 *
	mbuf
;

46 
uöt
 
	mÀn
;

47 
boﬁ
 
	m£t
;

48 
uöt
 
	mu£d
;

49 
uöt
 
	m√eded
;

50 
uöt
 
	mdrivî
;

51 } 
	tdhd_io˘l_t
;

55 
	mBUS_TYPE_USB
 = 0,

56 
	mBUS_TYPE_SDIO


60 
	#DHD_IOCTL_MAGIC
 0x00444944

	)

63 
	#DHD_IOCTL_VERSION
 1

	)

65 
	#DHD_IOCTL_MAXLEN
 8192

	)

66 
	#DHD_IOCTL_SMLEN
 256

	)

69 
	#DHD_GET_MAGIC
 0

	)

70 
	#DHD_GET_VERSION
 1

	)

71 
	#DHD_GET_VAR
 2

	)

72 
	#DHD_SET_VAR
 3

	)

75 
	#DHD_ERROR_VAL
 0x0001

	)

76 
	#DHD_TRACE_VAL
 0x0002

	)

77 
	#DHD_INFO_VAL
 0x0004

	)

78 
	#DHD_DATA_VAL
 0x0008

	)

79 
	#DHD_CTL_VAL
 0x0010

	)

80 
	#DHD_TIMER_VAL
 0x0020

	)

81 
	#DHD_HDRS_VAL
 0x0040

	)

82 
	#DHD_BYTES_VAL
 0x0080

	)

83 
	#DHD_INTR_VAL
 0x0100

	)

84 
	#DHD_LOG_VAL
 0x0200

	)

85 
	#DHD_GLOM_VAL
 0x0400

	)

86 
	#DHD_EVENT_VAL
 0x0800

	)

87 
	#DHD_BTA_VAL
 0x1000

	)

88 #i‡0 && (
NDISVER
 >= 0x0630) && 1

89 
	#DHD_SCAN_VAL
 0x2000

	)

91 
	#DHD_ISCAN_VAL
 0x2000

	)

93 
	#DHD_ARPOE_VAL
 0x4000

	)

94 
	#DHD_REORDER_VAL
 0x8000

	)

95 
	#DHD_WL_VAL
 0x10000

	)

96 
	#DHD_WL_VAL2
 0x20000

	)

99 #ifde‡
SDTEST


101 
	sdhd_pktgí
 {

102 
uöt
 
	mvîsi⁄
;

103 
uöt
 
	m‰eq
;

104 
uöt
 
	mcou¡
;

105 
uöt
 
	m¥öt
;

106 
uöt
 
	mtŸÆ
;

107 
uöt
 
	mmöÀn
;

108 
uöt
 
	mmaxÀn
;

109 
uöt
 
	mnum£¡
;

110 
uöt
 
	mnumrcvd
;

111 
uöt
 
	mnumÁû
;

112 
uöt
 
	mmode
;

113 
uöt
 
	m°›
;

114 } 
	tdhd_pktgí_t
;

117 
	#DHD_PKTGEN_VERSION
 2

	)

120 
	#DHD_PKTGEN_ECHO
 1

	)

121 
	#DHD_PKTGEN_SEND
 2

	)

122 
	#DHD_PKTGEN_RXBURST
 3

	)

123 
	#DHD_PKTGEN_RECV
 4

	)

127 
	#DHD_IDLE_IMMEDIATE
 (-1)

	)

130 
	#DHD_IDLE_ACTIVE
 0

	)

131 
	#DHD_IDLE_STOP
 (-1Ë

	)

135 
	~<∑cked_£˘i⁄_íd.h
>

	@include/epivers.h

26 #i‚de‡
_ïivîs_h_


27 
	#_ïivîs_h_


	)

29 
	#EPI_MAJOR_VERSION
 1

	)

31 
	#EPI_MINOR_VERSION
 28

	)

33 
	#EPI_RC_NUMBER
 23

	)

35 
	#EPI_INCREMENTAL_NUMBER
 0

	)

37 
	#EPI_BUILD_NUMBER
 0

	)

39 
	#EPI_VERSION
 1, 28, 23, 0

	)

41 
	#EPI_VERSION_NUM
 0x011c1700

	)

43 
	#EPI_VERSION_DEV
 1.28.23

	)

46 #ifde‡
BCMINTERNAL


47 
	#EPI_VERSION_STR
 "1.28.23 (∏BCMINT)"

	)

49 #ifde‡
WLTEST


50 
	#EPI_VERSION_STR
 "1.28.23 (∏WLTEST)"

	)

52 
	#EPI_VERSION_STR
 "1.28.23 (r)"

	)

	@include/hndpmu.h

27 #i‚de‡
_hndpmu_h_


28 
	#_hndpmu_h_


	)

31 
si_pmu_Ÿp_powî
(
si_t
 *
sih
, 
o¶_t
 *
osh
, 
boﬁ
 
⁄
);

32 
si_sdiod_drive_°ªngth_öô
(
si_t
 *
sih
, 
o¶_t
 *
osh
, 
uöt32
 
drive°ªngth
);

34 
si_pmu_möªsmask_hèvaû_£t
(
si_t
 *
sih
, 
o¶_t
 *
osh
, 
boﬁ
 
£t_˛ór
);

	@include/hndrte_armtrap.h

27 #i‚def 
_hndπe_¨må≠_h


28 
	#_hndπe_¨må≠_h


	)

36 
	#TRAP_STRIDE
 4

	)

37 
	#FIRST_TRAP
 
TR_RST


	)

38 
	#LAST_TRAP
 (
TR_FIQ
 * 
TRAP_STRIDE
)

	)

40 #i‡
deföed
(
__ARM_ARCH_4T__
)

41 
	#MAX_TRAP_TYPE
 (
TR_FIQ
 + 1)

	)

42 #ñi‡
deföed
(
__ARM_ARCH_7M__
)

43 
	#MAX_TRAP_TYPE
 (
TR_ISR
 + 
ARMCM3_NUMINTS
)

	)

47 
	#TR_TYPE
 0x00

	)

48 
	#TR_EPC
 0x04

	)

49 
	#TR_CPSR
 0x08

	)

50 
	#TR_SPSR
 0x0c

	)

51 
	#TR_REGS
 0x10

	)

52 
	#TR_REG
(
n
Ë(
TR_REGS
 + (nË* 4)

	)

53 
	#TR_SP
 
	`TR_REG
(13)

	)

54 
	#TR_LR
 
	`TR_REG
(14)

	)

55 
	#TR_PC
 
	`TR_REG
(15)

	)

57 
	#TRAP_T_SIZE
 80

	)

59 #i‚def 
_LANGUAGE_ASSEMBLY


61 
	~<ty≥defs.h
>

63 
	s_å≠_°ru˘
 {

64 
uöt32
 
	mty≥
;

65 
uöt32
 
	mïc
;

66 
uöt32
 
	m˝§
;

67 
uöt32
 
	m•§
;

68 
uöt32
 
	mr0
;

69 
uöt32
 
	mr1
;

70 
uöt32
 
	mr2
;

71 
uöt32
 
	mr3
;

72 
uöt32
 
	mr4
;

73 
uöt32
 
	mr5
;

74 
uöt32
 
	mr6
;

75 
uöt32
 
	mr7
;

76 
uöt32
 
	mr8
;

77 
uöt32
 
	mr9
;

78 
uöt32
 
	mr10
;

79 
uöt32
 
	mr11
;

80 
uöt32
 
	mr12
;

81 
uöt32
 
	mr13
;

82 
uöt32
 
	mr14
;

83 
uöt32
 
	mpc
;

84 } 
	tå≠_t
;

	@include/hndrte_cons.h

26 #i‚def 
_HNDRTE_CONS_H


27 
	#_HNDRTE_CONS_H


	)

29 
	~<ty≥defs.h
>

31 
	#CBUF_LEN
 (128)

	)

33 
	#LOG_BUF_LEN
 1024

	)

36 
uöt32
 
	mbuf
;

37 
uöt
 
	mbuf_size
;

38 
uöt
 
	midx
;

39 *
	m_buf_com∑t
;

40 } 
	thndπe_log_t
;

49 vﬁ©ûê
uöt
 
	mvc⁄s_ö
;

50 vﬁ©ûê
uöt
 
	mvc⁄s_out
;

57 
hndπe_log_t
 
	mlog
;

63 
uöt
 
	mcbuf_idx
;

64 
	mcbuf
[
CBUF_LEN
];

65 } 
	thndπe_c⁄s_t
;

	@include/hndsoc.h

27 #i‚def 
_HNDSOC_H


28 
	#_HNDSOC_H


	)

31 
	~<sbc⁄fig.h
>

32 
	~<aidmp.h
>

38 
	#SI_SDRAM_BASE
 0x00000000

	)

39 
	#SI_PCI_MEM
 0x08000000

	)

40 
	#SI_PCI_MEM_SZ
 (64 * 1024 * 1024)

	)

41 
	#SI_PCI_CFG
 0x0c000000

	)

42 
	#SI_SDRAM_SWAPPED
 0x10000000

	)

43 
	#SI_SDRAM_R2
 0x80000000

	)

45 
	#SI_ENUM_BASE
 0x18000000

	)

47 
	#SI_WRAP_BASE
 0x18100000

	)

48 
	#SI_CORE_SIZE
 0x1000

	)

49 
	#SI_MAXCORES
 16

	)

54 
	#SI_FASTRAM
 0x19000000

	)

55 
	#SI_FASTRAM_SWAPPED
 0x19800000

	)

57 
	#SI_FLASH2
 0x1c000000

	)

58 
	#SI_FLASH2_SZ
 0x02000000

	)

59 
	#SI_ARMCM3_ROM
 0x1e000000

	)

60 
	#SI_FLASH1
 0x1fc00000

	)

61 
	#SI_FLASH1_SZ
 0x00400000

	)

62 
	#SI_ARM7S_ROM
 0x20000000

	)

63 
	#SI_ARMCR4_ROM
 0x000f0000

	)

64 
	#SI_ARMCM3_SRAM2
 0x60000000

	)

65 
	#SI_ARM7S_SRAM2
 0x80000000

	)

66 
	#SI_ARM_FLASH1
 0xffff0000

	)

67 
	#SI_ARM_FLASH1_SZ
 0x00010000

	)

69 
	#SI_PCI_DMA
 0x40000000

	)

70 
	#SI_PCI_DMA2
 0x80000000

	)

71 
	#SI_PCI_DMA_SZ
 0x40000000

	)

72 
	#SI_PCIE_DMA_L32
 0x00000000

	)

75 
	#SI_PCIE_DMA_H32
 0x80000000

	)

80 
	#NODEV_CORE_ID
 0x700

	)

81 
	#CC_CORE_ID
 0x800

	)

82 
	#ILINE20_CORE_ID
 0x801

	)

83 
	#SRAM_CORE_ID
 0x802

	)

84 
	#SDRAM_CORE_ID
 0x803

	)

85 
	#PCI_CORE_ID
 0x804

	)

86 
	#MIPS_CORE_ID
 0x805

	)

87 
	#ENET_CORE_ID
 0x806

	)

88 
	#CODEC_CORE_ID
 0x807

	)

89 
	#USB_CORE_ID
 0x808

	)

90 
	#ADSL_CORE_ID
 0x809

	)

91 
	#ILINE100_CORE_ID
 0x80®

	)

92 
	#IPSEC_CORE_ID
 0x80b

	)

93 
	#UTOPIA_CORE_ID
 0x80¯

	)

94 
	#PCMCIA_CORE_ID
 0x80d

	)

95 
	#SOCRAM_CORE_ID
 0x80ê

	)

96 
	#MEMC_CORE_ID
 0x80‡

	)

97 
	#OFDM_CORE_ID
 0x810

	)

98 
	#EXTIF_CORE_ID
 0x811

	)

99 
	#D11_CORE_ID
 0x812

	)

100 
	#APHY_CORE_ID
 0x813

	)

101 
	#BPHY_CORE_ID
 0x814

	)

102 
	#GPHY_CORE_ID
 0x815

	)

103 
	#MIPS33_CORE_ID
 0x816

	)

104 
	#USB11H_CORE_ID
 0x817

	)

105 
	#USB11D_CORE_ID
 0x818

	)

106 
	#USB20H_CORE_ID
 0x819

	)

107 
	#USB20D_CORE_ID
 0x81®

	)

108 
	#SDIOH_CORE_ID
 0x81b

	)

109 
	#ROBO_CORE_ID
 0x81¯

	)

110 
	#ATA100_CORE_ID
 0x81d

	)

111 
	#SATAXOR_CORE_ID
 0x81ê

	)

112 
	#GIGETH_CORE_ID
 0x81‡

	)

113 
	#PCIE_CORE_ID
 0x820

	)

114 
	#NPHY_CORE_ID
 0x821

	)

115 
	#SRAMC_CORE_ID
 0x822

	)

116 
	#MINIMAC_CORE_ID
 0x823

	)

117 
	#ARM11_CORE_ID
 0x824

	)

118 
	#ARM7S_CORE_ID
 0x825

	)

119 
	#LPPHY_CORE_ID
 0x826

	)

120 
	#PMU_CORE_ID
 0x827

	)

121 
	#SSNPHY_CORE_ID
 0x828

	)

122 
	#SDIOD_CORE_ID
 0x829

	)

123 
	#ARMCM3_CORE_ID
 0x82®

	)

124 
	#HTPHY_CORE_ID
 0x82b

	)

125 
	#MIPS74K_CORE_ID
 0x82¯

	)

126 
	#GMAC_CORE_ID
 0x82d

	)

127 
	#DMEMC_CORE_ID
 0x82ê

	)

128 
	#PCIERC_CORE_ID
 0x82‡

	)

129 
	#OCP_CORE_ID
 0x830

	)

130 
	#SC_CORE_ID
 0x831

	)

131 
	#AHB_CORE_ID
 0x832

	)

132 
	#SPIH_CORE_ID
 0x833

	)

133 
	#I2S_CORE_ID
 0x834

	)

134 
	#DMEMS_CORE_ID
 0x835

	)

135 
	#DEF_SHIM_COMP
 0x837

	)

137 
	#ACPHY_CORE_ID
 0x83b

	)

138 
	#PCIE2_CORE_ID
 0x83¯

	)

139 
	#USB30D_CORE_ID
 0x83d

	)

140 
	#ARMCR4_CORE_ID
 0x83ê

	)

141 
	#APB_BRIDGE_CORE_ID
 0x135

	)

142 
	#AXI_CORE_ID
 0x301

	)

143 
	#EROM_CORE_ID
 0x366

	)

144 
	#OOB_ROUTER_CORE_ID
 0x367

	)

145 
	#DEF_AI_COMP
 0xff‡

	)

149 
	#CC_4706_CORE_ID
 0x500

	)

150 
	#SOCRAM_4706_CORE_ID
 0x50ê

	)

151 
	#GMAC_COMMON_4706_CORE_ID
 0x5d¯

	)

152 
	#GMAC_4706_CORE_ID
 0x52d

	)

153 
	#AMEMC_CORE_ID
 0x52ê

	)

154 
	#ALTA_CORE_ID
 0x534

	)

155 
	#DDR23_PHY_CORE_ID
 0x5dd

	)

157 
	#SI_PCI1_MEM
 0x40000000

	)

158 
	#SI_PCI1_CFG
 0x44000000

	)

159 
	#SI_PCIE1_DMA_H32
 0xc0000000

	)

162 
	#CC_4706B0_CORE_REV
 0x8000001‡

	)

163 
	#SOCRAM_4706B0_CORE_REV
 0x80000005

	)

164 
	#GMAC_4706B0_CORE_REV
 0x80000000

	)

169 
	#SI_CC_IDX
 0

	)

172 
	#SOCI_SB
 0

	)

173 
	#SOCI_AI
 1

	)

174 
	#SOCI_UBUS
 2

	)

177 
	#SICF_BIST_EN
 0x8000

	)

178 
	#SICF_PME_EN
 0x4000

	)

179 
	#SICF_CORE_BITS
 0x3ffc

	)

180 
	#SICF_FGC
 0x0002

	)

181 
	#SICF_CLOCK_EN
 0x0001

	)

184 
	#SISF_BIST_DONE
 0x8000

	)

185 
	#SISF_BIST_ERROR
 0x4000

	)

186 
	#SISF_GATED_CLK
 0x2000

	)

187 
	#SISF_DMA64
 0x1000

	)

188 
	#SISF_CORE_BITS
 0x0fff

	)

193 
	#SI_CLK_CTL_ST
 0x1e0

	)

196 
	#CCS_FORCEALP
 0x00000001

	)

197 
	#CCS_FORCEHT
 0x00000002

	)

198 
	#CCS_FORCEILP
 0x00000004

	)

199 
	#CCS_ALPAREQ
 0x00000008

	)

200 
	#CCS_HTAREQ
 0x00000010

	)

201 
	#CCS_FORCEHWREQOFF
 0x00000020

	)

202 
	#CCS_HQCLKREQ
 0x00000040

	)

203 
	#CCS_USBCLKREQ
 0x00000100

	)

204 
	#CCS_ERSRC_REQ_MASK
 0x00000700

	)

205 
	#CCS_ERSRC_REQ_SHIFT
 8

	)

206 
	#CCS_ALPAVAIL
 0x00010000

	)

207 
	#CCS_HTAVAIL
 0x00020000

	)

208 
	#CCS_BP_ON_APL
 0x00040000

	)

209 
	#CCS_BP_ON_HT
 0x00080000

	)

210 
	#CCS_ERSRC_STS_MASK
 0x07000000

	)

211 
	#CCS_ERSRC_STS_SHIFT
 24

	)

213 
	#CCS0_HTAVAIL
 0x00010000

	)

214 
	#CCS0_ALPAVAIL
 0x00020000

	)

221 
	#FLASH_MIN
 0x00020000

	)

224 
	#BISZ_OFFSET
 0x3e0

	)

225 
	#BISZ_MAGIC
 0x4249535®

	)

226 
	#BISZ_MAGIC_IDX
 0

	)

227 
	#BISZ_TXTST_IDX
 1

	)

228 
	#BISZ_TXTEND_IDX
 2

	)

229 
	#BISZ_DATAST_IDX
 3

	)

230 
	#BISZ_DATAEND_IDX
 4

	)

231 
	#BISZ_BSSST_IDX
 5

	)

232 
	#BISZ_BSSEND_IDX
 6

	)

233 
	#BISZ_SIZE
 7

	)

	@include/linux_osl.h

27 #i‚de‡
_löux_o¶_h_


28 
	#_löux_o¶_h_


	)

30 
	~<ty≥defs.h
>

33 * 
o¶_os_›í_image
(* 
fûíame
);

34 
o¶_os_gë_image_block
(* 
buf
, 
Àn
, * 
image
);

35 
o¶_os_˛o£_image
(* 
image
);

36 
o¶_os_image_size
(*
image
);

39 #ifde‡
BCMDRIVER


42 
o¶_t
 *
o¶_©èch
(*
pdev
, 
uöt
 
bu°y≥
, 
boﬁ
 
pkâag
);

43 
o¶_dëach
(
o¶_t
 *
osh
);

46 
uöt32
 
g_as£π_ty≥
;

49 #i‡
deföed
(
BCMASSERT_LOG
)

50 
	#ASSERT
(
exp
) \

51 dÿ{ i‡(!(
exp
)Ë
	`o¶_as£π
(#exp, 
__FILE__
, 
__LINE__
); } 0)

	)

52 
o¶_as£π
(c⁄° *
exp
, c⁄° *
fûe
, 
löe
);

54 #ifde‡
__GNUC__


55 
	#GCC_VERSION
 \

56 (
__GNUC__
 * 10000 + 
__GNUC_MINOR__
 * 100 + 
__GNUC_PATCHLEVEL__
)

	)

57 #i‡
GCC_VERSION
 > 30100

58 
	#ASSERT
(
exp
Ëdÿ{} 0)

	)

61 
	#ASSERT
(
exp
)

	)

67 
	#OSL_DELAY
(
u£c
Ë
	`o¶_dñay
(u£c)

	)

68 
o¶_dñay
(
uöt
 
u£c
);

70 
	#OSL_PCMCIA_READ_ATTR
(
osh
, 
off£t
, 
buf
, 
size
) \

71 
	`o¶_pcmcü_ªad_©å
((
osh
), (
off£t
), (
buf
), (
size
))

	)

72 
	#OSL_PCMCIA_WRITE_ATTR
(
osh
, 
off£t
, 
buf
, 
size
) \

73 
	`o¶_pcmcü_wrôe_©å
((
osh
), (
off£t
), (
buf
), (
size
))

	)

74 
o¶_pcmcü_ªad_©å
(
o¶_t
 *
osh
, 
uöt
 
off£t
, *
buf
, 
size
);

75 
o¶_pcmcü_wrôe_©å
(
o¶_t
 *
osh
, 
uöt
 
off£t
, *
buf
, 
size
);

78 
	#OSL_PCI_READ_CONFIG
(
osh
, 
off£t
, 
size
) \

79 
	`o¶_pci_ªad_c⁄fig
((
osh
), (
off£t
), (
size
))

	)

80 
	#OSL_PCI_WRITE_CONFIG
(
osh
, 
off£t
, 
size
, 
vÆ
) \

81 
	`o¶_pci_wrôe_c⁄fig
((
osh
), (
off£t
), (
size
), (
vÆ
))

	)

82 
uöt32
 
o¶_pci_ªad_c⁄fig
(
o¶_t
 *
osh
, 
uöt
 
off£t
, uöà
size
);

83 
o¶_pci_wrôe_c⁄fig
(
o¶_t
 *
osh
, 
uöt
 
off£t
, uöà
size
, uöà
vÆ
);

86 
	#OSL_PCI_BUS
(
osh
Ë
	`o¶_pci_bus
(osh)

	)

87 
	#OSL_PCI_SLOT
(
osh
Ë
	`o¶_pci_¶Ÿ
(osh)

	)

88 
uöt
 
o¶_pci_bus
(
o¶_t
 *
osh
);

89 
uöt
 
o¶_pci_¶Ÿ
(
o¶_t
 *
osh
);

90 
pci_dev
 *
o¶_pci_devi˚
(
o¶_t
 *
osh
);

94 
boﬁ
 
	mpkâag
;

95 
uöt
 
	mpkèŒo˚d
;

96 
boﬁ
 
	mmmbus
;

97 
pkt‰ì_cb_‚_t
 
	mtx_‚
;

98 *
	mtx_˘x
;

99 *
	munu£d
[3];

100 } 
	to¶_puböfo_t
;

102 
	#PKTFREESETCB
(
osh
, 
_tx_‚
, 
_tx_˘x
) \

104 ((
o¶_puböfo_t
*)
osh
)->
tx_‚
 = 
_tx_‚
; \

105 ((
o¶_puböfo_t
*)
osh
)->
tx_˘x
 = 
_tx_˘x
; \

106 } 0)

	)

110 
	#BUS_SWAP32
(
v
Ë(v)

	)

112 
	#MALLOC
(
osh
, 
size
Ë
	`o¶_mÆloc
((osh), (size))

	)

113 
	#MFREE
(
osh
, 
addr
, 
size
Ë
	`o¶_m‰ì
((osh), (addr), (size))

	)

114 
	#MALLOCED
(
osh
Ë
	`o¶_mÆlo˚d
((osh))

	)

115 *
o¶_mÆloc
(
o¶_t
 *
osh
, 
uöt
 
size
);

116 
o¶_m‰ì
(
o¶_t
 *
osh
, *
addr
, 
uöt
 
size
);

117 
uöt
 
o¶_mÆlo˚d
(
o¶_t
 *
osh
);

119 
	#NATIVE_MALLOC
(
osh
, 
size
Ë
	`kmÆloc
(size, 
GFP_ATOMIC
)

	)

120 
	#NATIVE_MFREE
(
osh
, 
addr
, 
size
Ë
	`k‰ì
◊ddr)

	)

122 
	#MALLOC_FAILED
(
osh
Ë
	`o¶_mÆloc_Áûed
((osh))

	)

123 
uöt
 
o¶_mÆloc_Áûed
(
o¶_t
 *
osh
);

126 
	#DMA_CONSISTENT_ALIGN
 
	`o¶_dma_c⁄si°ít_Æign
()

	)

127 
	#DMA_ALLOC_CONSISTENT
(
osh
, 
size
, 
Æign
, 
tŸ
, 
∑p
, 
dmah
) \

128 
	`o¶_dma_Æloc_c⁄si°ít
((
osh
), (
size
), (
Æign
), (
tŸ
), (
∑p
))

	)

129 
	#DMA_FREE_CONSISTENT
(
osh
, 
va
, 
size
, 
∑
, 
dmah
) \

130 
	`o¶_dma_‰ì_c⁄si°ít
((
osh
), (*)(
va
), (
size
), (
∑
))

	)

131 
uöt
 
o¶_dma_c⁄si°ít_Æign
();

132 *
o¶_dma_Æloc_c⁄si°ít
(
o¶_t
 *
osh
, 
uöt
 
size
, 
uöt16
 
Æign
, uöà*
tŸ
, 
ul⁄g
 *
∑p
);

133 
o¶_dma_‰ì_c⁄si°ít
(
o¶_t
 *
osh
, *
va
, 
uöt
 
size
, 
ul⁄g
 
∑
);

136 
	#DMA_TX
 1

	)

137 
	#DMA_RX
 2

	)

140 
	#DMA_UNMAP
(
osh
, 
∑
, 
size
, 
dúe˘i⁄
, 
p
, 
dmah
) \

141 
	`o¶_dma_unm≠
((
osh
), (
∑
), (
size
), (
dúe˘i⁄
))

	)

142 
uöt
 
o¶_dma_m≠
(
o¶_t
 *
osh
, *
va
, uöà
size
, 
dúe˘i⁄
);

143 
o¶_dma_unm≠
(
o¶_t
 *
osh
, 
uöt
 
∑
, uöà
size
, 
dúe˘i⁄
);

146 
	#OSL_DMADDRWIDTH
(
osh
, 
addrwidth
Ëdÿ{} 0)

	)

149 
	~<bcmsdh.h
>

150 
	#OSL_WRITE_REG
(
osh
, 
r
, 
v
Ë(
	`bcmsdh_ªg_wrôe
(
NULL
, (
uöçå
)‘), (*‘)), (v)))

	)

151 
	#OSL_READ_REG
(
osh
, 
r
Ë(
	`bcmsdh_ªg_ªad
(
NULL
, (
uöçå
)‘), (*‘))))

	)

153 
	#SELECT_BUS_WRITE
(
osh
, 
mm≠_›
, 
bus_›
Ëi‡(((
o¶_puböfo_t
*)(osh))->
mmbus
) \

154 
mm≠_›
 
bus_›


	)

155 
	#SELECT_BUS_READ
(
osh
, 
mm≠_›
, 
bus_›
Ë(((
o¶_puböfo_t
*)(osh))->
mmbus
) ? \

156 
mm≠_›
 : 
bus_›


	)

158 
	#OSL_ERROR
(
bcmîr‹
Ë
	`o¶_îr‹
(bcmîr‹)

	)

159 
o¶_îr‹
(
bcmîr‹
);

162 
	#PKTBUFSZ
 2048

	)

168 
	~<löuxvî.h
>

169 
	~<löux/kî√l.h
>

170 
	~<löux/°rög.h
>

171 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 4, 29)

172 
	#OSL_SYSUPTIME
(Ë((
uöt32
)
	`jiffõs_to_m£cs
(
jiffõs
))

	)

174 
	#OSL_SYSUPTIME
(Ë((
uöt32
)
jiffõs
 * (1000 / 
HZ
))

	)

176 
	#¥ötf
(
fmt
, 
¨gs
...Ë
	`¥ötk
(fmà, ##árgs)

	)

177 
	~<löux/kî√l.h
>

178 
	~<löux/°rög.h
>

180 
	#bc›y
(
§c
, 
d°
, 
Àn
Ë
	`mem˝y
((d°), (§c), (Àn))

	)

181 
	#bcmp
(
b1
, 
b2
, 
Àn
Ë
	`memcmp
((b1), (b2), (Àn))

	)

182 
	#bzîo
(
b
, 
Àn
Ë
	`mem£t
((b), '\0', (Àn))

	)

186 
	#R_REG
(
osh
, 
r
) (\

187 
	`SELECT_BUS_READ
(
osh
, \

189 
	`__ty≥of
(*(
r
)Ë
__o¶_v
; \

190 
	`BCM_REFERENCE
(
osh
); \

191 (*(
r
))) { \

192 (
uöt8
): 
__o¶_v
 = \

193 
	`ªadb
((vﬁ©ûê
uöt8
*)(
r
)); ; \

194 (
uöt16
): 
__o¶_v
 = \

195 
	`ªadw
((vﬁ©ûê
uöt16
*)(
r
)); ; \

196 (
uöt32
): 
__o¶_v
 = \

197 
	`ªadl
((vﬁ©ûê
uöt32
*)(
r
)); ; \

199 
__o¶_v
; \

201 
	`OSL_READ_REG
(
osh
, 
r
)) \

202 )

	)

204 
	#W_REG
(
osh
, 
r
, 
v
) do { \

205 
	`BCM_REFERENCE
(
osh
); \

206 
	`SELECT_BUS_WRITE
(
osh
, \

207 (*(
r
))) { \

208 (
uöt8
): 
	`wrôeb
((uöt8)(
v
), (vﬁ©ûêuöt8*)(
r
)); ; \

209 (
uöt16
): 
	`wrôew
((uöt16)(
v
), (vﬁ©ûêuöt16*)(
r
)); ; \

210 (
uöt32
): 
	`wrôñ
((uöt32)(
v
), (vﬁ©ûêuöt32*)(
r
)); ; \

212 (
	`OSL_WRITE_REG
(
osh
, 
r
, 
v
))); \

213 } 0)

	)

215 
	#AND_REG
(
osh
, 
r
, 
v
Ë
	`W_REG
(osh, (r), 
	`R_REG
(osh,ÑË& (v))

	)

216 
	#OR_REG
(
osh
, 
r
, 
v
Ë
	`W_REG
(osh, (r), 
	`R_REG
(osh,ÑË| (v))

	)

219 
	#bc›y
(
§c
, 
d°
, 
Àn
Ë
	`mem˝y
((d°), (§c), (Àn))

	)

220 
	#bcmp
(
b1
, 
b2
, 
Àn
Ë
	`memcmp
((b1), (b2), (Àn))

	)

221 
	#bzîo
(
b
, 
Àn
Ë
	`mem£t
((b), '\0', (Àn))

	)

224 
	#OSL_UNCACHED
(
va
Ë((*)va)

	)

225 
	#OSL_CACHED
(
va
Ë((*)va)

	)

227 
	#OSL_PREF_RANGE_LD
(
va
, 
sz
)

	)

228 
	#OSL_PREF_RANGE_ST
(
va
, 
sz
)

	)

231 #i‡
deföed
(
__i386__
)

232 
	#OSL_GETCYCLES
(
x
Ë
	`rdts˛
((x))

	)

234 
	#OSL_GETCYCLES
(
x
Ë((xË0)

	)

238 
	#BUSPROBE
(
vÆ
, 
addr
Ë({ (vÆË
	`R_REG
(
NULL
, (addr)); 0; })

	)

241 #i‡!
deföed
(
CONFIG_MMC_MSM7X00A
)

242 
	#REG_MAP
(
∑
, 
size
Ë
	`i‹em≠_noˇche
(()’a), ()(size))

	)

244 
	#REG_MAP
(
∑
, 
size
Ë(*)(0)

	)

246 
	#REG_UNMAP
(
va
Ë
	`iounm≠
((va))

	)

249 
	#R_SM
(
r
Ë*‘)

	)

250 
	#W_SM
(
r
, 
v
Ë(*‘Ë(v))

	)

251 
	#BZERO_SM
(
r
, 
Àn
Ë
	`mem£t
(‘), '\0', (Àn))

	)

256 
	~<löuxvî.h
>

259 
	#PKTGET
(
osh
, 
Àn
, 
£nd
Ë
	`o¶_pktgë
((osh), (Àn))

	)

260 
	#PKTDUP
(
osh
, 
skb
Ë
	`o¶_pktdup
((osh), (skb))

	)

261 
	#PKTLIST_DUMP
(
osh
, 
buf
)

	)

262 
	#PKTDBG_TRACE
(
osh
, 
pkt
, 
bô
)

	)

263 
	#PKTFREE
(
osh
, 
skb
, 
£nd
Ë
	`o¶_pkt‰ì
((osh), (skb), (£nd))

	)

264 #ifde‡
CONFIG_DHD_USE_STATIC_BUF


265 
	#PKTGET_STATIC
(
osh
, 
Àn
, 
£nd
Ë
	`o¶_pktgë_°©ic
((osh), (Àn))

	)

266 
	#PKTFREE_STATIC
(
osh
, 
skb
, 
£nd
Ë
	`o¶_pkt‰ì_°©ic
((osh), (skb), (£nd))

	)

268 
	#PKTDATA
(
osh
, 
skb
Ë(((
sk_buff
*)(skb))->
d©a
)

	)

269 
	#PKTLEN
(
osh
, 
skb
Ë(((
sk_buff
*)(skb))->
Àn
)

	)

270 
	#PKTHEADROOM
(
osh
, 
skb
Ë(
	`PKTDATA
(osh, skb)-(((
sk_buff
*)(skb))->
hód
))

	)

271 
	#PKTTAILROOM
(
osh
, 
skb
Ë((((
sk_buff
*)(skb))->
íd
)-(((sk_buff*)(skb))->
èû
))

	)

272 
	#PKTNEXT
(
osh
, 
skb
Ë(((
sk_buff
*)(skb))->
√xt
)

	)

273 
	#PKTSETNEXT
(
osh
, 
skb
, 
x
Ë(((
sk_buff
*)(skb))->
√xt
 = (sk_buff*)(x))

	)

274 
	#PKTSETLEN
(
osh
, 
skb
, 
Àn
Ë
	`__skb_åim
((
sk_buff
*)(skb), (Àn))

	)

275 
	#PKTPUSH
(
osh
, 
skb
, 
byãs
Ë
	`skb_push
((
sk_buff
*)(skb), (byãs))

	)

276 
	#PKTPULL
(
osh
, 
skb
, 
byãs
Ë
	`skb_puŒ
((
sk_buff
*)(skb), (byãs))

	)

277 
	#PKTTAG
(
skb
Ë((*)(((
sk_buff
*)(skb))->
cb
))

	)

278 
	#PKTALLOCED
(
osh
Ë((
o¶_puböfo_t
 *)(osh))->
pkèŒo˚d


	)

279 
	#PKTSETPOOL
(
osh
, 
skb
, 
x
, 
y
Ëdÿ{} 0)

	)

280 
	#PKTPOOL
(
osh
, 
skb
Ë
FALSE


	)

281 
	#PKTSHRINK
(
osh
, 
m
Ë(m)

	)

283 #ifde‡
CTFPOOL


284 
	#CTFPOOL_REFILL_THRESH
 3

	)

285 
	s˘Âoﬁ
 {

286 *
	mhód
;

287 
•ölock_t
 
	mlock
;

288 
uöt
 
	mmax_obj
;

289 
uöt
 
	mcuº_obj
;

290 
uöt
 
	mobj_size
;

291 
uöt
 
	mªfûls
;

292 
uöt
 
	mÁ°_Ælocs
;

293 
uöt
 
	mÁ°_‰ìs
;

294 
uöt
 
	m¶ow_Ælocs
;

295 } 
	t˘Âoﬁ_t
;

296 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 22)

297 
	#FASTBUF
 (1 << 16)

	)

298 
	#CTFBUF
 (1 << 17)

	)

299 
	#PKTSETFAST
(
osh
, 
skb
Ë((((
sk_buff
*)(skb))->
mac_Àn
Ë|
FASTBUF
)

	)

300 
	#PKTCLRFAST
(
osh
, 
skb
Ë((((
sk_buff
*)(skb))->
mac_Àn
Ë&(~
FASTBUF
))

	)

301 
	#PKTSETCTF
(
osh
, 
skb
Ë((((
sk_buff
*)(skb))->
mac_Àn
Ë|
CTFBUF
)

	)

302 
	#PKTCLRCTF
(
osh
, 
skb
Ë((((
sk_buff
*)(skb))->
mac_Àn
Ë&(~
CTFBUF
))

	)

303 
	#PKTISFAST
(
osh
, 
skb
Ë((((
sk_buff
*)(skb))->
mac_Àn
Ë& 
FASTBUF
)

	)

304 
	#PKTISCTF
(
osh
, 
skb
Ë((((
sk_buff
*)(skb))->
mac_Àn
Ë& 
CTFBUF
)

	)

305 
	#PKTFAST
(
osh
, 
skb
Ë(((
sk_buff
*)(skb))->
mac_Àn
)

	)

307 
	#FASTBUF
 (1 << 0)

	)

308 
	#CTFBUF
 (1 << 1)

	)

309 
	#PKTSETFAST
(
osh
, 
skb
Ë((((
sk_buff
*)(skb))->
__unu£d
Ë|
FASTBUF
)

	)

310 
	#PKTCLRFAST
(
osh
, 
skb
Ë((((
sk_buff
*)(skb))->
__unu£d
Ë&(~
FASTBUF
))

	)

311 
	#PKTSETCTF
(
osh
, 
skb
Ë((((
sk_buff
*)(skb))->
__unu£d
Ë|
CTFBUF
)

	)

312 
	#PKTCLRCTF
(
osh
, 
skb
Ë((((
sk_buff
*)(skb))->
__unu£d
Ë&(~
CTFBUF
))

	)

313 
	#PKTISFAST
(
osh
, 
skb
Ë((((
sk_buff
*)(skb))->
__unu£d
Ë& 
FASTBUF
)

	)

314 
	#PKTISCTF
(
osh
, 
skb
Ë((((
sk_buff
*)(skb))->
__unu£d
Ë& 
CTFBUF
)

	)

315 
	#PKTFAST
(
osh
, 
skb
Ë(((
sk_buff
*)(skb))->
__unu£d
)

	)

318 
	#CTFPOOLPTR
(
osh
, 
skb
Ë(((
sk_buff
*)(skb))->
sk
)

	)

319 
	#CTFPOOLHEAD
(
osh
, 
skb
Ë(((
˘Âoﬁ_t
 *)((
sk_buff
*)(skb))->
sk
)->
hód
)

	)

321 *
o¶_˘Âoﬁ_add
(
o¶_t
 *
osh
);

322 
o¶_˘Âoﬁ_ª∂íish
(
o¶_t
 *
osh
, 
uöt
 
thªsh
);

323 
öt32
 
o¶_˘Âoﬁ_öô
(
o¶_t
 *
osh
, 
uöt
 
numobj
, uöà
size
);

324 
o¶_˘Âoﬁ_˛ónup
(
o¶_t
 *
osh
);

325 
o¶_˘Âoﬁ_°©s
(
o¶_t
 *
osh
, *
b
);

329 #ifde‡
HNDCTF


330 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 22)

331 
	#SKIPCT
 (1 << 18)

	)

332 
	#PKTSETSKIPCT
(
osh
, 
skb
Ë(((
sk_buff
*)(skb))->
mac_Àn
 |
SKIPCT
)

	)

333 
	#PKTCLRSKIPCT
(
osh
, 
skb
Ë(((
sk_buff
*)(skb))->
mac_Àn
 &(~
SKIPCT
))

	)

334 
	#PKTSKIPCT
(
osh
, 
skb
Ë(((
sk_buff
*)(skb))->
mac_Àn
 & 
SKIPCT
)

	)

336 
	#SKIPCT
 (1 << 2)

	)

337 
	#PKTSETSKIPCT
(
osh
, 
skb
Ë(((
sk_buff
*)(skb))->
__unu£d
 |
SKIPCT
)

	)

338 
	#PKTCLRSKIPCT
(
osh
, 
skb
Ë(((
sk_buff
*)(skb))->
__unu£d
 &(~
SKIPCT
))

	)

339 
	#PKTSKIPCT
(
osh
, 
skb
Ë(((
sk_buff
*)(skb))->
__unu£d
 & 
SKIPCT
)

	)

342 
	#PKTSETSKIPCT
(
osh
, 
skb
)

	)

343 
	#PKTCLRSKIPCT
(
osh
, 
skb
)

	)

344 
	#PKTSKIPCT
(
osh
, 
skb
)

	)

347 
o¶_pkt‰ì
(
o¶_t
 *
osh
, *
skb
, 
boﬁ
 
£nd
);

348 *
o¶_pktgë_°©ic
(
o¶_t
 *
osh
, 
uöt
 
Àn
);

349 
o¶_pkt‰ì_°©ic
(
o¶_t
 *
osh
, *
skb
, 
boﬁ
 
£nd
);

351 *
o¶_pkt_‰m«tive
(
o¶_t
 *
osh
, *
skb
);

352 *
o¶_pktgë
(
o¶_t
 *
osh
, 
uöt
 
Àn
);

353 *
o¶_pktdup
(
o¶_t
 *
osh
, *
skb
);

354 
sk_buff
 *
o¶_pkt_t⁄©ive
(
o¶_t
 *
osh
, *
pkt
);

355 
	#PKTFRMNATIVE
(
osh
, 
skb
Ë
	`o¶_pkt_‰m«tive
(((
o¶_t
 *)osh), (
sk_buff
*)(skb))

	)

356 
	#PKTTONATIVE
(
osh
, 
pkt
Ë
	`o¶_pkt_t⁄©ive
((
o¶_t
 *)(osh), (pkt))

	)

358 
	#PKTLINK
(
skb
Ë(((
sk_buff
*)(skb))->
¥ev
)

	)

359 
	#PKTSETLINK
(
skb
, 
x
Ë(((
sk_buff
*)(skb))->
¥ev
 = (sk_buff*)(x))

	)

360 
	#PKTPRIO
(
skb
Ë(((
sk_buff
*)(skb))->
¥i‹ôy
)

	)

361 
	#PKTSETPRIO
(
skb
, 
x
Ë(((
sk_buff
*)(skb))->
¥i‹ôy
 = (x))

	)

362 
	#PKTSUMNEEDED
(
skb
Ë(((
sk_buff
*)(skb))->
ù_summed
 =
CHECKSUM_HW
)

	)

363 
	#PKTSETSUMGOOD
(
skb
, 
x
Ë(((
sk_buff
*)(skb))->
ù_summed
 = \

364 ((
x
Ë? 
CHECKSUM_UNNECESSARY
 : 
CHECKSUM_NONE
))

	)

366 
	#PKTSHARED
(
skb
Ë(((
sk_buff
*)(skb))->
˛⁄ed
)

	)

368 
	#DMA_MAP
(
osh
, 
va
, 
size
, 
dúe˘i⁄
, 
p
, 
dmah
) \

369 
	`o¶_dma_m≠
((
osh
), (
va
), (
size
), (
dúe˘i⁄
))

	)

371 #ifde‡
PKTC


373 
	schaö_node
 {

374 
sk_buff
 *
	mlök
;

375 
	mÊags
:3, 
	mpkts
:9, 
	mbyãs
:20;

378 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 14)

379 
	#CHAIN_NODE
(
skb
Ë((
chaö_node
*)&(((
sk_buff
*)skb)->
t°amp
))

	)

381 
	#CHAIN_NODE
(
skb
Ë((
chaö_node
*)&(((
sk_buff
*)skb)->
°amp
))

	)

384 
	#PKTCCNT
(
skb
Ë(
	`CHAIN_NODE
(skb)->
pkts
)

	)

385 
	#PKTCLEN
(
skb
Ë(
	`CHAIN_NODE
(skb)->
byãs
)

	)

386 
	#PKTCFLAGS
(
skb
Ë(
	`CHAIN_NODE
(skb)->
Êags
)

	)

387 
	#PKTCSETCNT
(
skb
, 
c
Ë(
	`CHAIN_NODE
(skb)->
pkts
 = (cË& ((1 << 9Ë- 1))

	)

388 
	#PKTCSETLEN
(
skb
, 
l
Ë(
	`CHAIN_NODE
(skb)->
byãs
 = (lË& ((1 << 20Ë- 1))

	)

389 
	#PKTCSETFLAG
(
skb
, 
fb
Ë(
	`CHAIN_NODE
(skb)->
Êags
 |(fb))

	)

390 
	#PKTCCLRFLAG
(
skb
, 
fb
Ë(
	`CHAIN_NODE
(skb)->
Êags
 &~(fb))

	)

391 
	#PKTCLINK
(
skb
Ë(
	`CHAIN_NODE
(skb)->
lök
)

	)

392 
	#PKTSETCLINK
(
skb
, 
x
Ë(
	`CHAIN_NODE
(skb)->
lök
 = (
sk_buff
*)(x))

	)

393 
	#PKTISCHAINED
(
skb
Ë(
	`PKTCLINK
(skbË!
NULL
)

	)

394 
	#FOREACH_CHAINED_PKT
(
skb
, 
nskb
) \

395 ; (
skb
Ë!
NULL
; (skbË(
nskb
)) \

396 i‡((
nskb
Ë
	`PKTCLINK
(
skb
), 
	`PKTSETCLINK
((skb), 
NULL
), 1)

	)

397 
	#PKTCFREE
(
osh
, 
skb
, 
£nd
) \

399 *
nskb
; \

400 
	`ASSERT
((
skb
Ë!
NULL
); \

401 
	`FOREACH_CHAINED_PKT
((
skb
), 
nskb
) { \

402 
	`PKTFREE
((
osh
), (
skb
), (
£nd
)); \

404 } 0)

	)

411 
	#ASSERT
(
exp
Ëdÿ{} 0)

	)

414 
	#MALLOC
(
o
, 
l
Ë
	`mÆloc
÷)

	)

415 
	#MFREE
(
o
, 
p
, 
l
Ë
	`‰ì
’)

	)

416 
	~<°dlib.h
>

419 
	~<°rög.h
>

422 
	~<°dio.h
>

425 
bc›y
(c⁄° *
§c
, *
d°
, 
size_t
 
Àn
);

426 
bcmp
(c⁄° *
b1
, c⁄° *
b2
, 
size_t
 
Àn
);

427 
bzîo
(*
b
, 
size_t
 
Àn
);

	@include/linuxver.h

28 #i‚de‡
_löuxvî_h_


29 
	#_löuxvî_h_


	)

31 
	~<löux/vîsi⁄.h
>

32 #i‡(
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2, 6, 0))

33 
	~<löux/c⁄fig.h
>

35 #i‡(
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 33))

36 
	~<gíî©ed/autoc⁄f.h
>

38 
	~<löux/autoc⁄f.h
>

41 
	~<löux/moduÀ.h
>

43 #i‡(
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2, 3, 0))

45 #ifde‡
__UNDEF_NO_VERSION__


46 #unde‡
__NO_VERSION__


48 
	#__NO_VERSION__


	)

52 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2, 5, 0)

53 
	#moduÀ_∑øm
(
_«me_
, 
_ty≥_
, 
_≥rm_
Ë
	`MODULE_PARM
(_«me_, "i")

	)

54 
	#moduÀ_∑øm_°rög
(
_«me_
, 
_°rög_
, 
_size_
, 
_≥rm_
) \

55 
	`MODULE_PARM
(
_°rög_
, "c" 
	`__MODULE_STRING
(
_size_
))

	)

59 #i‡(
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2, 4, 9))

60 
	~<löux/mÆloc.h
>

62 
	~<löux/¶ab.h
>

65 
	~<löux/ty≥s.h
>

66 
	~<löux/öô.h
>

67 
	~<löux/mm.h
>

68 
	~<löux/°rög.h
>

69 
	~<löux/pci.h
>

70 
	~<löux/öãºu±.h
>

71 
	~<löux/√tdevi˚.h
>

72 #i‡(
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 27))

73 
	~<löux/£m≠h‹e.h
>

75 
	~<asm/£m≠h‹e.h
>

77 #i‡(
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 28))

78 #unde‡
IP_TOS


80 
	~<asm/io.h
>

82 #i‡(
LINUX_VERSION_CODE
 > 
KERNEL_VERSION
(2, 5, 41))

83 
	~<löux/w‹kqueue.h
>

85 
	~<löux/tqueue.h
>

86 #i‚de‡
w‹k_°ru˘


87 
	#w‹k_°ru˘
 
tq_°ru˘


	)

89 #i‚de‡
INIT_WORK


90 
	#INIT_WORK
(
_w‹k
, 
_func
, 
_d©a
Ë
	`INIT_TQUEUE
((_w‹k), (_func), (_d©a))

	)

92 #i‚de‡
scheduÀ_w‹k


93 
	#scheduÀ_w‹k
(
_w‹k
Ë
	`scheduÀ_èsk
((_w‹k))

	)

95 #i‚de‡
Êush_scheduÀd_w‹k


96 
	#Êush_scheduÀd_w‹k
(Ë
	`Êush_scheduÀd_èsks
()

	)

100 #i‡(
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 0))

101 
	#DAEMONIZE
(
a
Ë
	`d´m⁄ize
(a); \

102 
	`Ælow_sig«l
(
SIGKILL
); \

103 
	`Ælow_sig«l
(
SIGTERM
);

	)

105 
	#RAISE_RX_SOFTIRQ
() \

106 
	`˝u_øi£_so·úq
(
	`smp_¥o˚ss‹_id
(), 
NET_RX_SOFTIRQ
)

	)

107 
	#DAEMONIZE
(
a
Ë
	`d´m⁄ize
(); \

108 dÿ{ i‡(
a
) \

109 
	`°∫˝y
(
cuºít
->
comm
, 
a
, 
	`MIN
((cuºít->comm), (
	`°æí
(a)))); \

110 } 0);

	)

113 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 19)

114 
	#MY_INIT_WORK
(
_w‹k
, 
_func
Ë
	`INIT_WORK
(_w‹k, _func)

	)

116 
	#MY_INIT_WORK
(
_w‹k
, 
_func
Ë
	`INIT_WORK
(_w‹k, _func, _w‹k)

	)

117 #i‡!(
LINUX_VERSION_CODE
 =
KERNEL_VERSION
(2, 6, 18Ë&& 
deföed
(
RHEL_MAJOR
) && \

118 (
	gRHEL_MAJOR
 == 5))

120 (*
	tw‹k_func_t
)(*
	tw‹k
);

124 #i‡(
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2, 6, 0))

126 #i‚de‡
IRQ_NONE


127 
	túqªtu∫_t
;

128 
	#IRQ_NONE


	)

129 
	#IRQ_HANDLED


	)

130 
	#IRQ_RETVAL
(
x
)

	)

133 
	$úqªtu∫_t
(*
	tFN_ISR
Ë(
	túq
, *
	tdev_id
, 
	t±_ªgs
 *
	t±ªgs
);

136 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2, 6, 18)

137 
	#IRQF_SHARED
 
SA_SHIRQ


	)

140 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2, 6, 17)

141 #ifdef 
CONFIG_NET_RADIO


142 
	#CONFIG_WIRELESS_EXT


	)

146 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 5, 67)

147 
	#MOD_INC_USE_COUNT


	)

148 
	#MOD_DEC_USE_COUNT


	)

151 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 32)

152 
	~<löux/sched.h
>

155 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 29)

156 
	~<√t/lib80211.h
>

158 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 29)

159 
	~<löux/õì80211.h
>

161 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 14)

162 
	~<√t/õì80211.h
>

168 #i‚de‡
__exô


169 
	#__exô


	)

171 #i‚de‡
__devexô


172 
	#__devexô


	)

174 #i‚de‡
__devöô


175 
	#__devöô
 
__öô


	)

177 #i‚de‡
__devöôd©a


178 
	#__devöôd©a


	)

180 #i‚de‡
__devexô_p


181 
	#__devexô_p
(
x
Ë
	)
x

184 #i‡(
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2, 4, 0))

186 
	#pci_gë_drvd©a
(
dev
Ë(dev)->
sysd©a


	)

187 
	#pci_£t_drvd©a
(
dev
, 
vÆue
Ë(dev)->
sysd©a
 = (vÆue)

	)

193 
	spci_devi˚_id
 {

194 
víd‹
, 
devi˚
;

195 
subvíd‹
, 
subdevi˚
;

196 
˛ass
, 
˛ass_mask
;

197 
drivî_d©a
;

200 
	spci_drivî
 {

201 
li°_hód
 
node
;

202 *
«me
;

203 c⁄° 
pci_devi˚_id
 *
id_èbÀ
;

204 (*
¥obe
)(
pci_dev
 *
dev
,

205 c⁄° 
pci_devi˚_id
 *
id
);

206 (*
ªmove
)(
pci_dev
 *
dev
);

209 (*
su•íd
)(
pci_dev
 *
dev
);

210 (*
ªsume
)(
pci_dev
 *
dev
);

213 
	#MODULE_DEVICE_TABLE
(
ty≥
, 
«me
)

	)

214 
	#PCI_ANY_ID
 (~0)

	)

217 
	#pci_moduÀ_öô
 
pci_ªgi°î_drivî


	)

218 
	`pci_ªgi°î_drivî
(
pci_drivî
 *
drv
);

219 
	`pci_uƒegi°î_drivî
(
pci_drivî
 *
drv
);

223 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 18))

224 
	#pci_moduÀ_öô
 
pci_ªgi°î_drivî


	)

227 #i‡(
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2, 2, 18))

228 #ifde‡
MODULE


229 
	#moduÀ_öô
(
x
Ë
	`öô_moduÀ
(Ë{  
	`x
(); 
	}

	)
}

230 
	#moduÀ_exô
(
x
Ë
	`˛ónup_moduÀ
(Ë{ 
	`x
(); }

	)

232 
	#moduÀ_öô
(
x
Ë
	`__öôˇŒ
(x);

	)

233 
	#moduÀ_exô
(
x
Ë
	`__exôˇŒ
(x);

	)

237 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 31)

238 
	#WL_USE_NETDEV_OPS


	)

240 #unde‡
WL_USE_NETDEV_OPS


243 #i‡(
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 31)Ë&& 
deföed
(
CONFIG_RFKILL
)

244 
	#WL_CONFIG_RFKILL


	)

246 #unde‡
WL_CONFIG_RFKILL


249 #i‡(
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2, 3, 48))

250 
	#li°_f‹_óch
(
pos
, 
hód
) \

251 
pos
 = (
hód
)->
√xt
;Öo†!(hód);Öo†pos->√xt)

	)

254 #i‡(
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2, 3, 13))

255 
	#pci_ªsour˚_°¨t
(
dev
, 
b¨
Ë((dev)->
ba£_addªss
[(b¨)])

	)

256 #ñi‡(
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2, 3, 44))

257 
	#pci_ªsour˚_°¨t
(
dev
, 
b¨
Ë((dev)->
ªsour˚
[(b¨)].
°¨t
)

	)

260 #i‡(
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2, 3, 23))

261 
	#pci_íabÀ_devi˚
(
dev
Ëdÿ{ } 0)

	)

264 #i‡(
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2, 3, 14))

265 
	#√t_devi˚
 
devi˚


	)

268 #i‡(
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2, 3, 42))

276 #i‚de‡
PCI_DMA_TODEVICE


277 
	#PCI_DMA_TODEVICE
 1

	)

278 
	#PCI_DMA_FROMDEVICE
 2

	)

281 
u32
 
	tdma_addr_t
;

284 
ölöe
 
	$gë_‹dî
(
size
)

286 
‹dî
;

288 
size
 = (size-1Ë>> (
PAGE_SHIFT
-1);

289 
‹dî
 = -1;

291 
size
 >>= 1;

292 
‹dî
++;

293 } 
size
);

294  
‹dî
;

295 
	}
}

297 
ölöe
 *
	$pci_Æloc_c⁄si°ít
(
pci_dev
 *
hwdev
, 
size_t
 
size
,

298 
dma_addr_t
 *
dma_h™dÀ
)

300 *
ªt
;

301 
gÂ
 = 
GFP_ATOMIC
 | 
GFP_DMA
;

303 
ªt
 = (*)
	`__gë_‰ì_∑ges
(
gÂ
, 
	`gë_‹dî
(
size
));

305 i‡(
ªt
 !
NULL
) {

306 
	`mem£t
(
ªt
, 0, 
size
);

307 *
dma_h™dÀ
 = 
	`vút_to_bus
(
ªt
);

309  
ªt
;

310 
	}
}

311 
ölöe
 
	$pci_‰ì_c⁄si°ít
(
pci_dev
 *
hwdev
, 
size_t
 
size
,

312 *
vaddr
, 
dma_addr_t
 
dma_h™dÀ
)

314 
	`‰ì_∑ges
(()
vaddr
, 
	`gë_‹dî
(
size
));

315 
	}
}

316 
	#pci_m≠_sögÀ
(
cookõ
, 
addªss
, 
size
, 
dú
Ë
	`vút_to_bus
◊ddªss)

	)

317 
	#pci_unm≠_sögÀ
(
cookõ
, 
addªss
, 
size
, 
dú
)

	)

321 #i‡(
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2, 3, 43))

323 
	#dev_k‰ì_skb_™y
(
a
Ë
	`dev_k‰ì_skb
◊)

	)

324 
	#√tif_down
(
dev
Ëdÿ{ (dev)->
°¨t
 = 0; } 0)

	)

327 #i‚de‡
_COMPAT_NETDEVICE_H


340 
	#dev_k‰ì_skb_úq
(
a
Ë
	`dev_k‰ì_skb
◊)

	)

341 
	#√tif_wake_queue
(
dev
) \

342 dÿ{ 
	`˛ór_bô
(0, &(
dev
)->
tbusy
); 
	`m¨k_bh
(
NET_BH
); } 0)

	)

343 
	#√tif_°›_queue
(
dev
Ë
	`£t_bô
(0, &(dev)->
tbusy
)

	)

345 
ölöe
 
	$√tif_°¨t_queue
(
√t_devi˚
 *
dev
)

347 
dev
->
tbusy
 = 0;

348 
dev
->
öãºu±
 = 0;

349 
dev
->
°¨t
 = 1;

350 
	}
}

352 
	#√tif_queue_°›≥d
(
dev
Ë(dev)->
tbusy


	)

353 
	#√tif_ru¬ög
(
dev
Ë(dev)->
°¨t


	)

357 
	#√tif_devi˚_©èch
(
dev
Ë
	`√tif_°¨t_queue
(dev)

	)

358 
	#√tif_devi˚_dëach
(
dev
Ë
	`√tif_°›_queue
(dev)

	)

361 
	#èskÀt_°ru˘
 
tq_°ru˘


	)

362 
ölöe
 
	$èskÀt_scheduÀ
(
èskÀt_°ru˘
 *
èskÀt
)

364 
	`queue_èsk
(
èskÀt
, &
tq_immedüã
);

365 
	`m¨k_bh
(
IMMEDIATE_BH
);

366 
	}
}

368 
ölöe
 
èskÀt_öô
(
èskÀt_°ru˘
 *
èskÀt
,

369 (*
func
)(),

370 
d©a
)

372 
èskÀt
->
√xt
 = 
NULL
;

373 
èskÀt
->
sync
 = 0;

374 
èskÀt
->
routöe
 = ((*)(*))
func
;

375 
èskÀt
->
d©a
 = (*)data;

376 
	}
}

377 
	#èskÀt_kûl
(
èskÀt
Ë{ dÿ{} 0); }

	)

380 
	#dñ_timî_sync
(
timî
Ë
	`dñ_timî
—imî)

	)

384 
	#√tif_down
(
dev
)

	)

388 #i‡(
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2, 4, 3))

393 
	#PREPARE_TQUEUE
(
_tq
, 
_routöe
, 
_d©a
) \

395 (
_tq
)->
routöe
 = 
_routöe
; \

396 (
_tq
)->
d©a
 = 
_d©a
; \

397 } 0)

	)

402 
	#INIT_TQUEUE
(
_tq
, 
_routöe
, 
_d©a
) \

404 
	`INIT_LIST_HEAD
(&(
_tq
)->
li°
); \

405 (
_tq
)->
sync
 = 0; \

406 
	`PREPARE_TQUEUE
((
_tq
), (
_routöe
), (
_d©a
)); \

407 } 0)

	)

412 #i‡
LINUX_VERSION_CODE
 > 
KERNEL_VERSION
(2, 6, 9)

413 
	#PCI_SAVE_STATE
(
a
, 
b
Ë
	`pci_ßve_°©e
◊)

	)

414 
	#PCI_RESTORE_STATE
(
a
, 
b
Ë
	`pci_ª°‹e_°©e
◊)

	)

416 
	#PCI_SAVE_STATE
(
a
, 
b
Ë
	`pci_ßve_°©e
◊, b)

	)

417 
	#PCI_RESTORE_STATE
(
a
, 
b
Ë
	`pci_ª°‹e_°©e
◊, b)

	)

420 #i‡(
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2, 4, 6))

421 
ölöe
 

422 
	$pci_ßve_°©e
(
pci_dev
 *
dev
, 
u32
 *
buf„r
)

424 
i
;

425 i‡(
buf„r
) {

426 
i
 = 0; i < 16; i++)

427 
	`pci_ªad_c⁄fig_dw‹d
(
dev
, 
i
 * 4, &
buf„r
[i]);

430 
	}
}

432 
ölöe
 

433 
	$pci_ª°‹e_°©e
(
pci_dev
 *
dev
, 
u32
 *
buf„r
)

435 
i
;

437 i‡(
buf„r
) {

438 
i
 = 0; i < 16; i++)

439 
	`pci_wrôe_c⁄fig_dw‹d
(
dev
, 
i
 * 4, 
buf„r
[i]);

448 
i
 = 0; i < 6; i ++)

449 
	`pci_wrôe_c⁄fig_dw‹d
(
dev
,

450 
PCI_BASE_ADDRESS_0
 + (
i
 * 4),

451 
	`pci_ªsour˚_°¨t
(
dev
, 
i
));

452 
	`pci_wrôe_c⁄fig_byã
(
dev
, 
PCI_INTERRUPT_LINE
, dev->
úq
);

455 
	}
}

459 #i‡(
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2, 4, 19))

460 
	#ªad_c0_cou¡
(Ë
	`ªad_32bô_˝0_ªgi°î
(
CP0_COUNT
)

	)

464 #i‡(
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2, 6, 24))

465 #i‚de‡
SET_MODULE_OWNER


466 
	#SET_MODULE_OWNER
(
dev
Ëdÿ{} 0)

	)

467 
	#OLD_MOD_INC_USE_COUNT
 
MOD_INC_USE_COUNT


	)

468 
	#OLD_MOD_DEC_USE_COUNT
 
MOD_DEC_USE_COUNT


	)

470 
	#OLD_MOD_INC_USE_COUNT
 dÿ{} 0)

	)

471 
	#OLD_MOD_DEC_USE_COUNT
 dÿ{} 0)

	)

474 #i‚de‡
SET_MODULE_OWNER


475 
	#SET_MODULE_OWNER
(
dev
Ëdÿ{} 0)

	)

477 #i‚de‡
MOD_INC_USE_COUNT


478 
	#MOD_INC_USE_COUNT
 dÿ{} 0)

	)

480 #i‚de‡
MOD_DEC_USE_COUNT


481 
	#MOD_DEC_USE_COUNT
 dÿ{} 0)

	)

483 
	#OLD_MOD_INC_USE_COUNT
 
MOD_INC_USE_COUNT


	)

484 
	#OLD_MOD_DEC_USE_COUNT
 
MOD_DEC_USE_COUNT


	)

487 #i‚de‡
SET_NETDEV_DEV


488 
	#SET_NETDEV_DEV
(
√t
, 
pdev
Ëdÿ{} 0)

	)

491 #i‚de‡
HAVE_FREE_NETDEV


492 
	#‰ì_√tdev
(
dev
Ë
	`k‰ì
(dev)

	)

495 #i‡(
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2, 6, 0))

497 
	#af_∑ckë_¥iv
 
d©a


	)

501 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 11)

502 
	#DRV_SUSPEND_STATE_TYPE
 
pm_mesßge_t


	)

504 
	#DRV_SUSPEND_STATE_TYPE
 
uöt32


	)

507 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 19)

508 
	#CHECKSUM_HW
 
CHECKSUM_PARTIAL


	)

512 *
	m∑ª¡
;

513 
èsk_°ru˘
 *
	mp_èsk
;

514 
	mthr_pid
;

515 
	m¥io
;

516 
£m≠h‹e
 
	m£ma
;

517 
	mãrmö©ed
;

518 
com∂ëi⁄
 
	mcom∂ëed
;

519 } 
	ttsk_˘l_t
;

524 #ifde‡
DHD_DEBUG


525 
	#DBG_THR
(
x
Ë
¥ötk
 
	)
x

527 
	#DBG_THR
(
x
)

	)

530 #i‡(
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 0))

531 
	#SMP_RD_BARRIER_DEPENDS
(
x
Ë
	`smp_ªad_b¨rõr_dïíds
(x)

	)

533 
	#SMP_RD_BARRIER_DEPENDS
(
x
Ë
	`smp_rmb
(x)

	)

537 
	#PROC_START
(
thªad_func
, 
ow√r
, 
tsk_˘l
, 
Êags
) \

539 
	`£ma_öô
(&((
tsk_˘l
)->
£ma
), 0); \

540 
	`öô_com∂ëi⁄
(&((
tsk_˘l
)->
com∂ëed
)); \

541 (
tsk_˘l
)->
∑ª¡
 = 
ow√r
; \

542 (
tsk_˘l
)->
ãrmö©ed
 = 
FALSE
; \

543 (
tsk_˘l
)->
thr_pid
 = 
	`kî√l_thªad
(
thªad_func
,Åsk_˘l, 
Êags
); \

544 
	`DBG_THR
(("%†thr:%lx cª©ed\n", 
__FUNCTION__
, (
tsk_˘l
)->
thr_pid
)); \

545 i‡((
tsk_˘l
)->
thr_pid
 > 0) \

546 
	`waô_f‹_com∂ëi⁄
(&((
tsk_˘l
)->
com∂ëed
)); \

547 
	`DBG_THR
(("%†thr:%lx sèπed\n", 
__FUNCTION__
, (
tsk_˘l
)->
thr_pid
)); \

548 }

	)

550 #ifde‡
USE_KTHREAD_API


551 
	#PROC_START2
(
thªad_func
, 
ow√r
, 
tsk_˘l
, 
Êags
, 
«me
) \

553 
	`£ma_öô
(&((
tsk_˘l
)->
£ma
), 0); \

554 
	`öô_com∂ëi⁄
(&((
tsk_˘l
)->
com∂ëed
)); \

555 (
tsk_˘l
)->
∑ª¡
 = 
ow√r
; \

556 (
tsk_˘l
)->
ãrmö©ed
 = 
FALSE
; \

557 (
tsk_˘l
)->
p_èsk
 = 
	`kthªad_run
(
thªad_func
,Åsk_˘l, (*)
«me
); \

558 (
tsk_˘l
)->
thr_pid
 = (tsk_˘l)->
p_èsk
->
pid
; \

559 
	`DBG_THR
(("%†thr:%lx cª©ed\n", 
__FUNCTION__
, (
tsk_˘l
)->
thr_pid
)); \

560 }

	)

563 
	#PROC_STOP
(
tsk_˘l
) \

565 (
tsk_˘l
)->
ãrmö©ed
 = 
TRUE
; \

566 
	`smp_wmb
(); \

567 
	`up
(&((
tsk_˘l
)->
£ma
)); \

568 
	`waô_f‹_com∂ëi⁄
(&((
tsk_˘l
)->
com∂ëed
)); \

569 
	`DBG_THR
(("%†thr:%lxÅîmö©ed OK\n", 
__FUNCTION__
, (
tsk_˘l
)->
thr_pid
)); \

570 (
tsk_˘l
)->
thr_pid
 = -1; \

571 }

	)

575 #i‡(
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 31))

576 
	#KILL_PROC
(
ƒ
, 
sig
) \

578 
èsk_°ru˘
 *
tsk
; \

579 
pid
 *pid; \

580 
pid
 = 
	`föd_gë_pid
((
pid_t
)
ƒ
); \

581 
tsk
 = 
	`pid_èsk
(
pid
, 
PIDTYPE_PID
); \

582 i‡(
tsk
Ë
	`£nd_sig
(
sig
,Åsk, 1); \

583 }

	)

585 #i‡(
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 27)) && (LINUX_VERSION_CODE <= \

586 
	$KERNEL_VERSION
(2, 6, 30))

587 
	#KILL_PROC
(
pid
, 
sig
) \

589 
èsk_°ru˘
 *
tsk
; \

590 
tsk
 = 
	`föd_èsk_by_vpid
(
pid
); \

591 i‡(
tsk
Ë
	`£nd_sig
(
sig
,Åsk, 1); \

592 
	}

	)
}

594 
	#KILL_PROC
(
pid
, 
sig
) \

596 
	`kûl_¥oc
(
pid
, 
sig
, 1); \

597 }

	)

601 #i‡(
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 0))

602 
	~<löux/time.h
>

603 
	~<löux/waô.h
>

605 
	~<löux/sched.h
>

607 
	#__waô_evít_öãºu±ibÀ_timeout
(
wq
, 
c⁄dôi⁄
, 
ªt
) \

609 
waô_queue_t
 
__waô
; \

610 
	`öô_waôqueue_íåy
(&
__waô
, 
cuºít
); \

612 
	`add_waô_queue
(&
wq
, &
__waô
); \

614 
	`£t_cuºít_°©e
(
TASK_INTERRUPTIBLE
); \

615 i‡(
c⁄dôi⁄
) \

617 i‡(!
	`sig«l_≥ndög
(
cuºít
)) { \

618 
ªt
 = 
	`scheduÀ_timeout
(ret); \

619 i‡(!
ªt
) \

623 
ªt
 = -
ERESTARTSYS
; \

626 
cuºít
->
°©e
 = 
TASK_RUNNING
; \

627 
	`ªmove_waô_queue
(&
wq
, &
__waô
); \

628 } 0)

	)

630 
	#waô_evít_öãºu±ibÀ_timeout
(
wq
, 
c⁄dôi⁄
, 
timeout
) \

632 
__ªt
 = 
timeout
; \

633 i‡(!(
c⁄dôi⁄
)) \

634 
	`__waô_evít_öãºu±ibÀ_timeout
(
wq
, 
c⁄dôi⁄
, 
__ªt
); \

635 
__ªt
; \

636 })

	)

646 #i‡(
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2, 6, 24))

647 
	#DEV_PRIV
(
dev
Ë(dev->
¥iv
)

	)

649 
	#DEV_PRIV
(
dev
Ë
	`√tdev_¥iv
(dev)

	)

652 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 20)

653 
	#WL_ISR
(
i
, 
d
, 
p
Ë
	`wl_i§
((i), (d))

	)

655 
	#WL_ISR
(
i
, 
d
, 
p
Ë
	`wl_i§
((i), (d), (p))

	)

658 #i‡(
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2, 6, 0))

659 
	#√tdev_¥iv
(
dev
Ëdev->
¥iv


	)

	@include/miniopt.h

27 #i‚de‡
MINI_OPT_H


28 
	#MINI_OPT_H


	)

30 #ifde‡
__˝lu•lus


37 
	#MINIOPT_MAXKEY
 128

	)

38 
	smöi›t
 {

41 c⁄° * 
«me
;

42 c⁄° * 
Êags
;

43 
boﬁ
 
l⁄gÊags
;

44 
boﬁ
 
›t_íd
;

48 
c⁄sumed
;

51 
boﬁ
 
posôi⁄Æ
;

52 
boﬁ
 
good_öt
;

55 
›t
;

56 
key
[
MINIOPT_MAXKEY
];

57 * 
vÆ°r
;

61 
uöt
 
uvÆ
;

62 
vÆ
;

63 } 
	tmöi›t_t
;

65 
möi›t_öô
(
möi›t_t
 *
t
, c⁄° * 
«me
, c⁄° * 
Êags
, 
boﬁ
 
l⁄gÊags
);

66 
möi›t
(
möi›t_t
 *
t
, **
¨gv
);

73 #ifde‡
__˝lu•lus


	@include/msgtrace.h

27 #i‚def 
_MSGTRACE_H


28 
	#_MSGTRACE_H


	)

30 #i‚de‡
_TYPEDEFS_H_


31 
	~<ty≥defs.h
>

36 
	~<∑cked_£˘i⁄_°¨t.h
>

38 
	#MSGTRACE_VERSION
 1

	)

41 
BWL_PRE_PACKED_STRUCT
 
	smsgåa˚_hdr
 {

42 
uöt8
 
	mvîsi⁄
;

43 
uöt8
 
	m•¨e
;

44 
uöt16
 
	mÀn
;

45 
uöt32
 
	m£qnum
;

48 
uöt32
 
	mdisˇrded_byãs
;

49 
uöt32
 
	mdisˇrded_¥ötf
;

50 } 
	tBWL_POST_PACKED_STRUCT
 
	tmsgåa˚_hdr_t
;

52 
	#MSGTRACE_HDRLEN
 (
msgåa˚_hdr_t
)

	)

60 
boﬁ
 
msgåa˚_hbus_åa˚
;

62 (*
	tmsgåa˚_func_£nd_t
)(*
	thdl1
, *
	thdl2
, 
	tuöt8
 *
	thdr
,

63 
	tuöt16
 
	thdæí
, 
	tuöt8
 *
	tbuf
, uöt16 
	tbuÊí
);

64 
	`msgåa˚_°¨t
();

65 
	`msgåa˚_°›
();

66 
	`msgåa˚_£¡
();

67 
	`msgåa˚_put
(*
buf
, 
cou¡
);

68 
	`msgåa˚_öô
(*
hdl1
, *
hdl2
, 
msgåa˚_func_£nd_t
 
func_£nd
);

69 
boﬁ
 
	`msgåa˚_evít_íabÀd
();

72 
	~<∑cked_£˘i⁄_íd.h
>

	@include/osl.h

27 #i‚de‡
_o¶_h_


28 
	#_o¶_h_


	)

31 
o¶_öfo
 
	to¶_t
;

32 
o¶_dmaöfo
 
	to¶dma_t
;

34 
	#OSL_PKTTAG_SZ
 32

	)

37 (*
	tpkt‰ì_cb_‚_t
)(*
	t˘x
, *
	tpkt
, 
	t°©us
);

40 (*
	to¶_ºeg_‚_t
)(*
	t˘x
, vﬁ©ûê*
	tªg
, 
	tsize
);

41 (*
	to¶_wªg_‚_t
)(*
	t˘x
, vﬁ©ûê*
	tªg
, 
	tvÆ
, 
	tsize
);

44 
	~<löux_o¶.h
>

46 #i‚de‡
PKTDBG_TRACE


47 
	#PKTDBG_TRACE
(
osh
, 
pkt
, 
bô
)

	)

50 
	#PKTCTFMAP
(
osh
, 
p
)

	)

56 
	#SET_REG
(
osh
, 
r
, 
mask
, 
vÆ
Ë
	`W_REG
((osh), (r), ((
	`R_REG
((osh),ÑË& ~(mask)Ë| (vÆ)))

	)

58 #i‚de‡
AND_REG


59 
	#AND_REG
(
osh
, 
r
, 
v
Ë
	`W_REG
(osh, (r), 
	`R_REG
(osh,ÑË& (v))

	)

62 #i‚de‡
OR_REG


63 
	#OR_REG
(
osh
, 
r
, 
v
Ë
	`W_REG
(osh, (r), 
	`R_REG
(osh,ÑË| (v))

	)

66 #i‡!
	`deföed
(
OSL_SYSUPTIME
)

67 
	#OSL_SYSUPTIME
(Ë(0)

	)

68 
	#OSL_SYSUPTIME_SUPPORT
 
FALSE


	)

70 
	#OSL_SYSUPTIME_SUPPORT
 
TRUE


	)

73 #i‡!
	`deföed
(
PKTC
)

74 
	#PKTCCNT
(
skb
Ë(0)

	)

75 
	#PKTCLEN
(
skb
Ë(0)

	)

76 
	#PKTCFLAGS
(
skb
Ë(0)

	)

77 
	#PKTCSETCNT
(
skb
, 
c
)

	)

78 
	#PKTCSETLEN
(
skb
, 
l
)

	)

79 
	#PKTCSETFLAG
(
skb
, 
fb
)

	)

80 
	#PKTCCLRFLAG
(
skb
, 
fb
)

	)

81 
	#PKTCLINK
(
skb
Ë
	`PKTLINK
(skb)

	)

82 
	#PKTSETCLINK
(
skb
, 
x
Ë
	`PKTSETLINK
((skb), (x))

	)

83 
	#PKTISCHAINED
(
skb
Ë
FALSE


	)

84 
	#FOREACH_CHAINED_PKT
(
skb
, 
nskb
) \

85 (
nskb
Ë
NULL
; (
skb
Ë!NULL; (skbË“skb))

	)

86 
	#PKTCFREE
 
PKTFREE


	)

	@include/packed_section_end.h

45 #ifde‡
BWL_PACKED_SECTION


46 #unde‡
BWL_PACKED_SECTION


58 #unde‡
BWL_PRE_PACKED_STRUCT


59 #unde‡
BWL_POST_PACKED_STRUCT


	@include/packed_section_start.h

45 #ifde‡
BWL_PACKED_SECTION


48 
	#BWL_PACKED_SECTION


	)

55 #i‡
deföed
(
__GNUC__
Ë|| deföed(
__löt
)

56 
	#BWL_PRE_PACKED_STRUCT


	)

57 
	#BWL_POST_PACKED_STRUCT
 
	`__©åibuã__
 ((
∑cked
))

	)

58 #ñi‡
deföed
(
__CC_ARM
)

59 
	#BWL_PRE_PACKED_STRUCT
 
__∑cked


	)

60 
	#BWL_POST_PACKED_STRUCT


	)

	@include/pcicfg.h

27 #i‚def 
_h_pcicfg_


28 
	#_h_pcicfg_


	)

34 
	#PCI_CFG_VID
 0

	)

35 
	#PCI_CFG_DID
 2

	)

36 
	#PCI_CFG_CMD
 4

	)

37 
	#PCI_CFG_STAT
 6

	)

38 
	#PCI_CFG_REV
 8

	)

39 
	#PCI_CFG_PROGIF
 9

	)

40 
	#PCI_CFG_SUBCL
 0xa

	)

41 
	#PCI_CFG_BASECL
 0xb

	)

42 
	#PCI_CFG_CLSZ
 0xc

	)

43 
	#PCI_CFG_LATTIM
 0xd

	)

44 
	#PCI_CFG_HDR
 0xe

	)

45 
	#PCI_CFG_BIST
 0xf

	)

46 
	#PCI_CFG_BAR0
 0x10

	)

47 
	#PCI_CFG_BAR1
 0x14

	)

48 
	#PCI_CFG_BAR2
 0x18

	)

49 
	#PCI_CFG_BAR3
 0x1c

	)

50 
	#PCI_CFG_BAR4
 0x20

	)

51 
	#PCI_CFG_BAR5
 0x24

	)

52 
	#PCI_CFG_CIS
 0x28

	)

53 
	#PCI_CFG_SVID
 0x2c

	)

54 
	#PCI_CFG_SSID
 0x2e

	)

55 
	#PCI_CFG_ROMBAR
 0x30

	)

56 
	#PCI_CFG_CAPPTR
 0x34

	)

57 
	#PCI_CFG_INT
 0x3c

	)

58 
	#PCI_CFG_PIN
 0x3d

	)

59 
	#PCI_CFG_MINGNT
 0x3e

	)

60 
	#PCI_CFG_MAXLAT
 0x3f

	)

61 
	#PCI_BAR0_WIN
 0x80

	)

62 
	#PCI_BAR1_WIN
 0x84

	)

63 
	#PCI_SPROM_CONTROL
 0x88

	)

64 
	#PCI_BAR1_CONTROL
 0x8¯

	)

65 
	#PCI_INT_STATUS
 0x90

	)

66 
	#PCI_INT_MASK
 0x94

	)

67 
	#PCI_TO_SB_MB
 0x98

	)

68 
	#PCI_BACKPLANE_ADDR
 0xa0

	)

69 
	#PCI_BACKPLANE_DATA
 0xa4

	)

70 
	#PCI_CLK_CTL_ST
 0xa8

	)

71 
	#PCI_BAR0_WIN2
 0xa¯

	)

72 
	#PCI_GPIO_IN
 0xb0

	)

73 
	#PCI_GPIO_OUT
 0xb4

	)

74 
	#PCI_GPIO_OUTEN
 0xb8

	)

76 
	#PCI_BAR0_SHADOW_OFFSET
 (2 * 1024Ë

	)

77 
	#PCI_BAR0_SPROM_OFFSET
 (4 * 1024Ë

	)

78 
	#PCI_BAR0_PCIREGS_OFFSET
 (6 * 1024Ë

	)

79 
	#PCI_BAR0_PCISBR_OFFSET
 (4 * 1024Ë

	)

88 
	#PCIE2_BAR0_WIN2
 0x70

	)

89 
	#PCIE2_BAR0_CORE2_WIN
 0x74

	)

90 
	#PCIE2_BAR0_CORE2_WIN2
 0x78

	)

92 
	#PCI_BAR0_WINSZ
 (16 * 1024Ë

	)

94 
	#PCI_16KB0_PCIREGS_OFFSET
 (8 * 1024Ë

	)

95 
	#PCI_16KB0_CCREGS_OFFSET
 (12 * 1024Ë

	)

96 
	#PCI_16KBB0_WINSZ
 (16 * 1024Ë

	)

99 
	#PCI_CONFIG_SPACE_SIZE
 256

	)

	@include/proto/802.11.h

27 #i‚de‡
_802_11_H_


28 
	#_802_11_H_


	)

30 #i‚de‡
_TYPEDEFS_H_


31 
	~<ty≥defs.h
>

34 #i‚de‡
_NET_ETHERNET_H_


35 
	~<¥Ÿo/ëhî√t.h
>

38 
	~<¥Ÿo/w∑.h
>

41 
	~<∑cked_£˘i⁄_°¨t.h
>

44 
	#DOT11_TU_TO_US
 1024

	)

47 
	#DOT11_A3_HDR_LEN
 24

	)

48 
	#DOT11_A4_HDR_LEN
 30

	)

49 
	#DOT11_MAC_HDR_LEN
 
DOT11_A3_HDR_LEN


	)

50 
	#DOT11_FCS_LEN
 4

	)

51 
	#DOT11_ICV_LEN
 4

	)

52 
	#DOT11_ICV_AES_LEN
 8

	)

53 
	#DOT11_QOS_LEN
 2

	)

54 
	#DOT11_HTC_LEN
 4

	)

56 
	#DOT11_KEY_INDEX_SHIFT
 6

	)

57 
	#DOT11_IV_LEN
 4

	)

58 
	#DOT11_IV_TKIP_LEN
 8

	)

59 
	#DOT11_IV_AES_OCB_LEN
 4

	)

60 
	#DOT11_IV_AES_CCM_LEN
 8

	)

61 
	#DOT11_IV_MAX_LEN
 8

	)

64 
	#DOT11_MAX_MPDU_BODY_LEN
 2304

	)

66 
	#DOT11_MAX_MPDU_LEN
 (
DOT11_A4_HDR_LEN
 + \

67 
DOT11_QOS_LEN
 + \

68 
DOT11_IV_AES_CCM_LEN
 + \

69 
DOT11_MAX_MPDU_BODY_LEN
 + \

70 
DOT11_ICV_LEN
 + \

71 
DOT11_FCS_LEN
Ë

	)

73 
	#DOT11_MAX_SSID_LEN
 32

	)

76 
	#DOT11_DEFAULT_RTS_LEN
 2347

	)

77 
	#DOT11_MAX_RTS_LEN
 2347

	)

80 
	#DOT11_MIN_FRAG_LEN
 256

	)

81 
	#DOT11_MAX_FRAG_LEN
 2346

	)

84 
	#DOT11_DEFAULT_FRAG_LEN
 2346

	)

87 
	#DOT11_MIN_BEACON_PERIOD
 1

	)

88 
	#DOT11_MAX_BEACON_PERIOD
 0xFFFF

	)

91 
	#DOT11_MIN_DTIM_PERIOD
 1

	)

92 
	#DOT11_MAX_DTIM_PERIOD
 0xFF

	)

95 
	#DOT11_LLC_SNAP_HDR_LEN
 8

	)

96 
	#DOT11_OUI_LEN
 3

	)

97 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_Œc_¢≠_hódî
 {

98 
uöt8
 
	mdßp
;

99 
uöt8
 
	msßp
;

100 
uöt8
 
	m˘l
;

101 
uöt8
 
	moui
[
DOT11_OUI_LEN
];

104 
uöt16
 
	mty≥
;

105 } 
	gBWL_POST_PACKED_STRUCT
;

108 
	#RFC1042_HDR_LEN
 (
ETHER_HDR_LEN
 + 
DOT11_LLC_SNAP_HDR_LEN
Ë

	)

116 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_hódî
 {

117 
uöt16
 
	mfc
;

118 
uöt16
 
	mdurid
;

119 
ëhî_addr
 
	ma1
;

120 
ëhî_addr
 
	ma2
;

121 
ëhî_addr
 
	ma3
;

122 
uöt16
 
	m£q
;

123 
ëhî_addr
 
	ma4
;

124 } 
	gBWL_POST_PACKED_STRUCT
;

128 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_πs_‰ame
 {

129 
uöt16
 
	mfc
;

130 
uöt16
 
	mdurid
;

131 
ëhî_addr
 
	mø
;

132 
ëhî_addr
 
	mè
;

133 } 
	gBWL_POST_PACKED_STRUCT
;

134 
	#DOT11_RTS_LEN
 16

	)

136 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_˘s_‰ame
 {

137 
uöt16
 
	mfc
;

138 
uöt16
 
	mdurid
;

139 
ëhî_addr
 
	mø
;

140 } 
	gBWL_POST_PACKED_STRUCT
;

141 
	#DOT11_CTS_LEN
 10

	)

143 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_ack_‰ame
 {

144 
uöt16
 
	mfc
;

145 
uöt16
 
	mdurid
;

146 
ëhî_addr
 
	mø
;

147 } 
	gBWL_POST_PACKED_STRUCT
;

148 
	#DOT11_ACK_LEN
 10

	)

150 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_ps_pﬁl_‰ame
 {

151 
uöt16
 
	mfc
;

152 
uöt16
 
	mdurid
;

153 
ëhî_addr
 
	mbssid
;

154 
ëhî_addr
 
	mè
;

155 } 
	gBWL_POST_PACKED_STRUCT
;

156 
	#DOT11_PS_POLL_LEN
 16

	)

158 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_cf_íd_‰ame
 {

159 
uöt16
 
	mfc
;

160 
uöt16
 
	mdurid
;

161 
ëhî_addr
 
	mø
;

162 
ëhî_addr
 
	mbssid
;

163 } 
	gBWL_POST_PACKED_STRUCT
;

164 
	#DOT11_CS_END_LEN
 16

	)

169 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_a˘i⁄_wifi_víd‹_•ecific
 {

170 
uöt8
 
	mˇãg‹y
;

171 
uöt8
 
	mOUI
[3];

172 
uöt8
 
	mty≥
;

173 
uöt8
 
	msubty≥
;

174 
uöt8
 
	md©a
[1040];

175 } 
	gBWL_POST_PACKED_STRUCT
;

176 
dŸ11_a˘i⁄_wifi_víd‹_•ecific
 
	tdŸ11_a˘i⁄_wifi_víd‹_•ecific_t
;

179 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_a˘i⁄_vs_‰mhdr
 {

180 
uöt8
 
	mˇãg‹y
;

181 
uöt8
 
	mOUI
[3];

182 
uöt8
 
	mty≥
;

183 
uöt8
 
	msubty≥
;

184 
uöt8
 
	md©a
[1];

185 } 
	gBWL_POST_PACKED_STRUCT
;

186 
dŸ11_a˘i⁄_vs_‰mhdr
 
	tdŸ11_a˘i⁄_vs_‰mhdr_t
;

187 
	#DOT11_ACTION_VS_HDR_LEN
 6

	)

189 
	#BCM_ACTION_OUI_BYTE0
 0x00

	)

190 
	#BCM_ACTION_OUI_BYTE1
 0x90

	)

191 
	#BCM_ACTION_OUI_BYTE2
 0x4c

	)

194 
	#DOT11_BA_CTL_POLICY_NORMAL
 0x0000

	)

195 
	#DOT11_BA_CTL_POLICY_NOACK
 0x0001

	)

196 
	#DOT11_BA_CTL_POLICY_MASK
 0x0001

	)

198 
	#DOT11_BA_CTL_MTID
 0x0002

	)

199 
	#DOT11_BA_CTL_COMPRESSED
 0x0004

	)

201 
	#DOT11_BA_CTL_NUMMSDU_MASK
 0x0FC0

	)

202 
	#DOT11_BA_CTL_NUMMSDU_SHIFT
 6

	)

204 
	#DOT11_BA_CTL_TID_MASK
 0xF000

	)

205 
	#DOT11_BA_CTL_TID_SHIFT
 12

	)

208 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_˘l_hódî
 {

209 
uöt16
 
	mfc
;

210 
uöt16
 
	mdurid
;

211 
ëhî_addr
 
	mø
;

212 
ëhî_addr
 
	mè
;

213 } 
	gBWL_POST_PACKED_STRUCT
;

214 
	#DOT11_CTL_HDR_LEN
 16

	)

217 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_b¨
 {

218 
uöt16
 
	mb¨_c⁄åﬁ
;

219 
uöt16
 
	m£qnum
;

220 } 
	gBWL_POST_PACKED_STRUCT
;

221 
	#DOT11_BAR_LEN
 4

	)

223 
	#DOT11_BA_BITMAP_LEN
 128

	)

224 
	#DOT11_BA_CMP_BITMAP_LEN
 8

	)

226 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_ba
 {

227 
uöt16
 
	mba_c⁄åﬁ
;

228 
uöt16
 
	m£qnum
;

229 
uöt8
 
	mbôm≠
[
DOT11_BA_BITMAP_LEN
];

230 } 
	gBWL_POST_PACKED_STRUCT
;

231 
	#DOT11_BA_LEN
 4

	)

234 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_m™agemít_hódî
 {

235 
uöt16
 
	mfc
;

236 
uöt16
 
	mdurid
;

237 
ëhî_addr
 
	mda
;

238 
ëhî_addr
 
	mß
;

239 
ëhî_addr
 
	mbssid
;

240 
uöt16
 
	m£q
;

241 } 
	gBWL_POST_PACKED_STRUCT
;

242 
	#DOT11_MGMT_HDR_LEN
 24

	)

246 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_b˙_¥b
 {

247 
uöt32
 
	mtime°amp
[2];

248 
uöt16
 
	mbóc⁄_öãrvÆ
;

249 
uöt16
 
	mˇ∑bûôy
;

250 } 
	gBWL_POST_PACKED_STRUCT
;

251 
	#DOT11_BCN_PRB_LEN
 12

	)

252 
	#DOT11_BCN_PRB_FIXED_LEN
 12

	)

254 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_auth
 {

255 
uöt16
 
	mÆg
;

256 
uöt16
 
	m£q
;

257 
uöt16
 
	m°©us
;

258 } 
	gBWL_POST_PACKED_STRUCT
;

259 
	#DOT11_AUTH_FIXED_LEN
 6

	)

261 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_assoc_ªq
 {

262 
uöt16
 
	mˇ∑bûôy
;

263 
uöt16
 
	mli°í
;

264 } 
	gBWL_POST_PACKED_STRUCT
;

265 
	#DOT11_ASSOC_REQ_FIXED_LEN
 4

	)

267 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_ªassoc_ªq
 {

268 
uöt16
 
	mˇ∑bûôy
;

269 
uöt16
 
	mli°í
;

270 
ëhî_addr
 
	m≠
;

271 } 
	gBWL_POST_PACKED_STRUCT
;

272 
	#DOT11_REASSOC_REQ_FIXED_LEN
 10

	)

274 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_assoc_ª•
 {

275 
uöt16
 
	mˇ∑bûôy
;

276 
uöt16
 
	m°©us
;

277 
uöt16
 
	maid
;

278 } 
	gBWL_POST_PACKED_STRUCT
;

279 
	#DOT11_ASSOC_RESP_FIXED_LEN
 6

	)

281 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_a˘i⁄_mósuª
 {

282 
uöt8
 
	mˇãg‹y
;

283 
uöt8
 
	ma˘i⁄
;

284 
uöt8
 
	mtokí
;

285 
uöt8
 
	md©a
[1];

286 } 
	gBWL_POST_PACKED_STRUCT
;

287 
	#DOT11_ACTION_MEASURE_LEN
 3

	)

289 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_a˘i⁄_ht_ch_width
 {

290 
uöt8
 
	mˇãg‹y
;

291 
uöt8
 
	ma˘i⁄
;

292 
uöt8
 
	mch_width
;

293 } 
	gBWL_POST_PACKED_STRUCT
;

295 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_a˘i⁄_ht_mim›s
 {

296 
uöt8
 
	mˇãg‹y
;

297 
uöt8
 
	ma˘i⁄
;

298 
uöt8
 
	mc⁄åﬁ
;

299 } 
	gBWL_POST_PACKED_STRUCT
;

301 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_a˘i⁄_ß_quîy
 {

302 
uöt8
 
	mˇãg‹y
;

303 
uöt8
 
	ma˘i⁄
;

304 
uöt16
 
	mid
;

305 } 
	gBWL_POST_PACKED_STRUCT
;

307 
	#SM_PWRSAVE_ENABLE
 1

	)

308 
	#SM_PWRSAVE_MODE
 2

	)

311 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_powî_˙°
 {

312 
uöt8
 
	mid
;

313 
uöt8
 
	mÀn
;

314 
uöt8
 
	mpowî
;

315 } 
	gBWL_POST_PACKED_STRUCT
;

316 
dŸ11_powî_˙°
 
	tdŸ11_powî_˙°_t
;

318 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_powî_ˇp
 {

319 
uöt8
 
	mmö
;

320 
uöt8
 
	mmax
;

321 } 
	gBWL_POST_PACKED_STRUCT
;

322 
dŸ11_powî_ˇp
 
	tdŸ11_powî_ˇp_t
;

324 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_çc_ªp
 {

325 
uöt8
 
	mid
;

326 
uöt8
 
	mÀn
;

327 
uöt8
 
	mtx_pwr
;

328 
uöt8
 
	mm¨gö
;

329 } 
	gBWL_POST_PACKED_STRUCT
;

330 
dŸ11_çc_ªp
 
	tdŸ11_çc_ªp_t
;

331 
	#DOT11_MNG_IE_TPC_REPORT_LEN
 2

	)

333 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_suµ_ch™√ls
 {

334 
uöt8
 
	mid
;

335 
uöt8
 
	mÀn
;

336 
uöt8
 
	mfú°_ch™√l
;

337 
uöt8
 
	mnum_ch™√ls
;

338 } 
	gBWL_POST_PACKED_STRUCT
;

339 
dŸ11_suµ_ch™√ls
 
	tdŸ11_suµ_ch™√ls_t
;

347 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_extch
 {

348 
uöt8
 
	mid
;

349 
uöt8
 
	mÀn
;

350 
uöt8
 
	mextch
;

351 } 
	gBWL_POST_PACKED_STRUCT
;

352 
dŸ11_extch
 
	tdŸ11_extch_õ_t
;

354 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_brcm_extch
 {

355 
uöt8
 
	mid
;

356 
uöt8
 
	mÀn
;

357 
uöt8
 
	moui
[3];

358 
uöt8
 
	mty≥
;

359 
uöt8
 
	mextch
;

360 } 
	gBWL_POST_PACKED_STRUCT
;

361 
dŸ11_brcm_extch
 
	tdŸ11_brcm_extch_õ_t
;

363 
	#BRCM_EXTCH_IE_LEN
 5

	)

364 
	#BRCM_EXTCH_IE_TYPE
 53

	)

365 
	#DOT11_EXTCH_IE_LEN
 1

	)

366 
	#DOT11_EXT_CH_MASK
 0x03

	)

367 
	#DOT11_EXT_CH_UPPER
 0x01

	)

368 
	#DOT11_EXT_CH_LOWER
 0x03

	)

369 
	#DOT11_EXT_CH_NONE
 0x00

	)

371 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_a˘i⁄_‰mhdr
 {

372 
uöt8
 
	mˇãg‹y
;

373 
uöt8
 
	ma˘i⁄
;

374 
uöt8
 
	md©a
[1];

375 } 
	gBWL_POST_PACKED_STRUCT
;

376 
	#DOT11_ACTION_FRMHDR_LEN
 2

	)

379 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_ch™√l_swôch
 {

380 
uöt8
 
	mid
;

381 
uöt8
 
	mÀn
;

382 
uöt8
 
	mmode
;

383 
uöt8
 
	mch™√l
;

384 
uöt8
 
	mcou¡
;

385 } 
	gBWL_POST_PACKED_STRUCT
;

386 
dŸ11_ch™√l_swôch
 
	tdŸ11_ch™_swôch_õ_t
;

388 
	#DOT11_SWITCH_IE_LEN
 3

	)

390 
	#DOT11_CSA_MODE_ADVISORY
 0

	)

391 
	#DOT11_CSA_MODE_NO_TX
 1

	)

393 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_a˘i⁄_swôch_ch™√l
 {

394 
uöt8
 
	mˇãg‹y
;

395 
uöt8
 
	ma˘i⁄
;

396 
dŸ11_ch™_swôch_õ_t
 
	mch™_swôch_õ
;

397 
dŸ11_brcm_extch_õ_t
 
	mextch_õ
;

398 } 
	gBWL_POST_PACKED_STRUCT
;

400 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_cß_body
 {

401 
uöt8
 
	mmode
;

402 
uöt8
 
	mªg
;

403 
uöt8
 
	mch™√l
;

404 
uöt8
 
	mcou¡
;

405 } 
	gBWL_POST_PACKED_STRUCT
;

408 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_ext_cß
 {

409 
uöt8
 
	mid
;

410 
uöt8
 
	mÀn
;

411 
dŸ11_cß_body
 
	mb
;

412 } 
	gBWL_POST_PACKED_STRUCT
;

413 
dŸ11_ext_cß
 
	tdŸ11_ext_cß_õ_t
;

414 
	#DOT11_EXT_CSA_IE_LEN
 4

	)

416 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_a˘i⁄_ext_cß
 {

417 
uöt8
 
	mˇãg‹y
;

418 
uöt8
 
	ma˘i⁄
;

419 
dŸ11_ext_cß_õ_t
 
	mch™_swôch_õ
;

420 } 
	gBWL_POST_PACKED_STRUCT
;

422 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11y_a˘i⁄_ext_cß
 {

423 
uöt8
 
	mˇãg‹y
;

424 
uöt8
 
	ma˘i⁄
;

425 
dŸ11_cß_body
 
	mb
;

426 } 
	gBWL_POST_PACKED_STRUCT
;

428 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_obss_c€x
 {

429 
uöt8
 
	mid
;

430 
uöt8
 
	mÀn
;

431 
uöt8
 
	möfo
;

432 } 
	gBWL_POST_PACKED_STRUCT
;

433 
dŸ11_obss_c€x
 
	tdŸ11_obss_c€x_t
;

434 
	#DOT11_OBSS_COEXINFO_LEN
 1

	)

436 
	#DOT11_OBSS_COEX_INFO_REQ
 0x01

	)

437 
	#DOT11_OBSS_COEX_40MHZ_INTOLERANT
 0x02

	)

438 
	#DOT11_OBSS_COEX_20MHZ_WIDTH_REQ
 0x04

	)

440 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_obss_ch™li°
 {

441 
uöt8
 
	mid
;

442 
uöt8
 
	mÀn
;

443 
uöt8
 
	mªg˛ass
;

444 
uöt8
 
	mch™li°
[1];

445 } 
	gBWL_POST_PACKED_STRUCT
;

446 
dŸ11_obss_ch™li°
 
	tdŸ11_obss_ch™li°_t
;

447 
	#DOT11_OBSS_CHANLIST_FIXED_LEN
 1

	)

449 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_extˇp_õ
 {

450 
uöt8
 
	mid
;

451 
uöt8
 
	mÀn
;

452 
uöt8
 
	mˇp
[1];

453 } 
	gBWL_POST_PACKED_STRUCT
;

454 
dŸ11_extˇp_õ
 
	tdŸ11_extˇp_õ_t
;

456 
	#DOT11_EXTCAP_LEN_MAX
 7

	)

457 
	#DOT11_EXTCAP_LEN_COEX
 1

	)

458 
	#DOT11_EXTCAP_LEN_BT
 3

	)

459 
	#DOT11_EXTCAP_LEN_IW
 4

	)

460 
	#DOT11_EXTCAP_LEN_SI
 6

	)

462 
	#DOT11_EXTCAP_LEN_TDLS
 5

	)

463 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_extˇp
 {

464 
uöt8
 
	mextˇp
[
DOT11_EXTCAP_LEN_TDLS
];

465 } 
	gBWL_POST_PACKED_STRUCT
;

466 
dŸ11_extˇp
 
	tdŸ11_extˇp_t
;

469 
	#TDLS_CAP_TDLS
 37

	)

470 
	#TDLS_CAP_PU_BUFFER_STA
 28

	)

471 
	#TDLS_CAP_PEER_PSM
 20

	)

472 
	#TDLS_CAP_CH_SW
 30

	)

473 
	#TDLS_CAP_PROH
 38

	)

474 
	#TDLS_CAP_CH_SW_PROH
 39

	)

476 
	#TDLS_CAP_MAX_BIT
 39

	)

480 
	#DOT11_MEASURE_TYPE_BASIC
 0

	)

481 
	#DOT11_MEASURE_TYPE_CCA
 1

	)

482 
	#DOT11_MEASURE_TYPE_RPI
 2

	)

483 
	#DOT11_MEASURE_TYPE_CHLOAD
 3

	)

484 
	#DOT11_MEASURE_TYPE_NOISE
 4

	)

485 
	#DOT11_MEASURE_TYPE_BEACON
 5

	)

486 
	#DOT11_MEASURE_TYPE_FRAME
 6

	)

487 
	#DOT11_MEASURE_TYPE_STATS
 7

	)

488 
	#DOT11_MEASURE_TYPE_LCI
 8

	)

489 
	#DOT11_MEASURE_TYPE_TXSTREAM
 9

	)

490 
	#DOT11_MEASURE_TYPE_PAUSE
 255

	)

493 
	#DOT11_MEASURE_MODE_PARALLEL
 (1<<0Ë

	)

494 
	#DOT11_MEASURE_MODE_ENABLE
 (1<<1Ë

	)

495 
	#DOT11_MEASURE_MODE_REQUEST
 (1<<2Ë

	)

496 
	#DOT11_MEASURE_MODE_REPORT
 (1<<3Ë

	)

497 
	#DOT11_MEASURE_MODE_DUR
 (1<<4Ë

	)

499 
	#DOT11_MEASURE_MODE_LATE
 (1<<0Ë

	)

500 
	#DOT11_MEASURE_MODE_INCAPABLE
 (1<<1Ë

	)

501 
	#DOT11_MEASURE_MODE_REFUSED
 (1<<2Ë

	)

503 
	#DOT11_MEASURE_BASIC_MAP_BSS
 ((
uöt8
)(1<<0)Ë

	)

504 
	#DOT11_MEASURE_BASIC_MAP_OFDM
 ((
uöt8
)(1<<1)Ë

	)

505 
	#DOT11_MEASURE_BASIC_MAP_UKNOWN
 ((
uöt8
)(1<<2)Ë

	)

506 
	#DOT11_MEASURE_BASIC_MAP_RADAR
 ((
uöt8
)(1<<3)Ë

	)

507 
	#DOT11_MEASURE_BASIC_MAP_UNMEAS
 ((
uöt8
)(1<<4)Ë

	)

509 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_mós_ªq
 {

510 
uöt8
 
	mid
;

511 
uöt8
 
	mÀn
;

512 
uöt8
 
	mtokí
;

513 
uöt8
 
	mmode
;

514 
uöt8
 
	mty≥
;

515 
uöt8
 
	mch™√l
;

516 
uöt8
 
	m°¨t_time
[8];

517 
uöt16
 
	mduøti⁄
;

518 } 
	gBWL_POST_PACKED_STRUCT
;

519 
dŸ11_mós_ªq
 
	tdŸ11_mós_ªq_t
;

520 
	#DOT11_MNG_IE_MREQ_LEN
 14

	)

522 
	#DOT11_MNG_IE_MREQ_FIXED_LEN
 3

	)

524 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_mós_ªp
 {

525 
uöt8
 
	mid
;

526 
uöt8
 
	mÀn
;

527 
uöt8
 
	mtokí
;

528 
uöt8
 
	mmode
;

529 
uöt8
 
	mty≥
;

530 
BWL_PRE_PACKED_STRUCT
 union

532 
BWL_PRE_PACKED_STRUCT
 struct {

533 
uöt8
 
	mch™√l
;

534 
uöt8
 
	m°¨t_time
[8];

535 
uöt16
 
	mduøti⁄
;

536 
uöt8
 
	mm≠
;

537 } 
BWL_POST_PACKED_STRUCT
 
	mbasic
;

538 
uöt8
 
	md©a
[1];

539 } 
BWL_POST_PACKED_STRUCT
 
	mªp
;

540 } 
	gBWL_POST_PACKED_STRUCT
;

541 
dŸ11_mós_ªp
 
	tdŸ11_mós_ªp_t
;

544 
	#DOT11_MNG_IE_MREP_FIXED_LEN
 3

	)

546 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_mós_ªp_basic
 {

547 
uöt8
 
	mch™√l
;

548 
uöt8
 
	m°¨t_time
[8];

549 
uöt16
 
	mduøti⁄
;

550 
uöt8
 
	mm≠
;

551 } 
	gBWL_POST_PACKED_STRUCT
;

552 
dŸ11_mós_ªp_basic
 
	tdŸ11_mós_ªp_basic_t
;

553 
	#DOT11_MEASURE_BASIC_REP_LEN
 12

	)

555 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_quõt
 {

556 
uöt8
 
	mid
;

557 
uöt8
 
	mÀn
;

558 
uöt8
 
	mcou¡
;

559 
uöt8
 
	m≥riod
;

560 
uöt16
 
	mduøti⁄
;

561 
uöt16
 
	moff£t
;

562 } 
	gBWL_POST_PACKED_STRUCT
;

563 
dŸ11_quõt
 
	tdŸ11_quõt_t
;

565 
BWL_PRE_PACKED_STRUCT
 
	sch™_m≠_tu∂e
 {

566 
uöt8
 
	mch™√l
;

567 
uöt8
 
	mm≠
;

568 } 
	gBWL_POST_PACKED_STRUCT
;

569 
ch™_m≠_tu∂e
 
	tch™_m≠_tu∂e_t
;

571 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_ibss_dfs
 {

572 
uöt8
 
	mid
;

573 
uöt8
 
	mÀn
;

574 
uöt8
 
	móddr
[
ETHER_ADDR_LEN
];

575 
uöt8
 
	möãrvÆ
;

576 
ch™_m≠_tu∂e_t
 
	mm≠
[1];

577 } 
	gBWL_POST_PACKED_STRUCT
;

578 
dŸ11_ibss_dfs
 
	tdŸ11_ibss_dfs_t
;

581 
	#WME_OUI
 "\x00\x50\xf2"

	)

582 
	#WME_OUI_LEN
 3

	)

583 
	#WME_OUI_TYPE
 2

	)

584 
	#WME_TYPE
 2

	)

585 
	#WME_SUBTYPE_IE
 0

	)

586 
	#WME_SUBTYPE_PARAM_IE
 1

	)

587 
	#WME_SUBTYPE_TSPEC
 2

	)

588 
	#WME_VER
 1

	)

591 
	#AC_BE
 0

	)

592 
	#AC_BK
 1

	)

593 
	#AC_VI
 2

	)

594 
	#AC_VO
 3

	)

595 
	#AC_COUNT
 4

	)

597 
uöt8
 
	tac_bôm≠_t
;

599 
	#AC_BITMAP_NONE
 0x0

	)

600 
	#AC_BITMAP_ALL
 0x‡

	)

601 
	#AC_BITMAP_TST
(
ab
, 
ac
Ë((◊bË& (1 << (ac))Ë!0)

	)

602 
	#AC_BITMAP_SET
(
ab
, 
ac
Ë((◊bË|(1 << (ac))))

	)

603 
	#AC_BITMAP_RESET
(
ab
, 
ac
Ë((◊bË&~(1 << (ac))))

	)

606 
BWL_PRE_PACKED_STRUCT
 
	swme_õ
 {

607 
uöt8
 
	moui
[3];

608 
uöt8
 
	mty≥
;

609 
uöt8
 
	msubty≥
;

610 
uöt8
 
	mvîsi⁄
;

611 
uöt8
 
	mqosöfo
;

612 } 
	gBWL_POST_PACKED_STRUCT
;

613 
wme_õ
 
	twme_õ_t
;

614 
	#WME_IE_LEN
 7

	)

616 
BWL_PRE_PACKED_STRUCT
 
	sedcf_a˝¨am
 {

617 
uöt8
 
	mACI
;

618 
uöt8
 
	mECW
;

619 
uöt16
 
	mTXOP
;

620 } 
	gBWL_POST_PACKED_STRUCT
;

621 
edcf_a˝¨am
 
	tedcf_a˝¨am_t
;

624 
BWL_PRE_PACKED_STRUCT
 
	swme_∑øm_õ
 {

625 
uöt8
 
	moui
[3];

626 
uöt8
 
	mty≥
;

627 
uöt8
 
	msubty≥
;

628 
uöt8
 
	mvîsi⁄
;

629 
uöt8
 
	mqosöfo
;

630 
uöt8
 
	mrsvd
;

631 
edcf_a˝¨am_t
 
	ma˝¨am
[
AC_COUNT
];

632 } 
	gBWL_POST_PACKED_STRUCT
;

633 
wme_∑øm_õ
 
	twme_∑øm_õ_t
;

634 
	#WME_PARAM_IE_LEN
 24

	)

637 
	#WME_QI_AP_APSD_MASK
 0x80

	)

638 
	#WME_QI_AP_APSD_SHIFT
 7

	)

639 
	#WME_QI_AP_COUNT_MASK
 0x0‡

	)

640 
	#WME_QI_AP_COUNT_SHIFT
 0

	)

643 
	#WME_QI_STA_MAXSPLEN_MASK
 0x60

	)

644 
	#WME_QI_STA_MAXSPLEN_SHIFT
 5

	)

645 
	#WME_QI_STA_APSD_ALL_MASK
 0x‡

	)

646 
	#WME_QI_STA_APSD_ALL_SHIFT
 0

	)

647 
	#WME_QI_STA_APSD_BE_MASK
 0x8

	)

648 
	#WME_QI_STA_APSD_BE_SHIFT
 3

	)

649 
	#WME_QI_STA_APSD_BK_MASK
 0x4

	)

650 
	#WME_QI_STA_APSD_BK_SHIFT
 2

	)

651 
	#WME_QI_STA_APSD_VI_MASK
 0x2

	)

652 
	#WME_QI_STA_APSD_VI_SHIFT
 1

	)

653 
	#WME_QI_STA_APSD_VO_MASK
 0x1

	)

654 
	#WME_QI_STA_APSD_VO_SHIFT
 0

	)

657 
	#EDCF_AIFSN_MIN
 1

	)

658 
	#EDCF_AIFSN_MAX
 15

	)

659 
	#EDCF_AIFSN_MASK
 0x0‡

	)

660 
	#EDCF_ACM_MASK
 0x10

	)

661 
	#EDCF_ACI_MASK
 0x60

	)

662 
	#EDCF_ACI_SHIFT
 5

	)

663 
	#EDCF_AIFSN_SHIFT
 12

	)

666 
	#EDCF_ECW_MIN
 0

	)

667 
	#EDCF_ECW_MAX
 15

	)

668 
	#EDCF_ECW2CW
(
exp
Ë((1 << (exp)Ë- 1)

	)

669 
	#EDCF_ECWMIN_MASK
 0x0‡

	)

670 
	#EDCF_ECWMAX_MASK
 0xf0

	)

671 
	#EDCF_ECWMAX_SHIFT
 4

	)

674 
	#EDCF_TXOP_MIN
 0

	)

675 
	#EDCF_TXOP_MAX
 65535

	)

676 
	#EDCF_TXOP2USEC
(
tx›
Ë(—x›Ë<< 5)

	)

679 
	#NON_EDCF_AC_BE_ACI_STA
 0x02

	)

682 
	#EDCF_AC_BE_ACI_STA
 0x03

	)

683 
	#EDCF_AC_BE_ECW_STA
 0xA4

	)

684 
	#EDCF_AC_BE_TXOP_STA
 0x0000

	)

685 
	#EDCF_AC_BK_ACI_STA
 0x27

	)

686 
	#EDCF_AC_BK_ECW_STA
 0xA4

	)

687 
	#EDCF_AC_BK_TXOP_STA
 0x0000

	)

688 
	#EDCF_AC_VI_ACI_STA
 0x42

	)

689 
	#EDCF_AC_VI_ECW_STA
 0x43

	)

690 
	#EDCF_AC_VI_TXOP_STA
 0x005ê

	)

691 
	#EDCF_AC_VO_ACI_STA
 0x62

	)

692 
	#EDCF_AC_VO_ECW_STA
 0x32

	)

693 
	#EDCF_AC_VO_TXOP_STA
 0x002‡

	)

696 
	#EDCF_AC_BE_ACI_AP
 0x03

	)

697 
	#EDCF_AC_BE_ECW_AP
 0x64

	)

698 
	#EDCF_AC_BE_TXOP_AP
 0x0000

	)

699 
	#EDCF_AC_BK_ACI_AP
 0x27

	)

700 
	#EDCF_AC_BK_ECW_AP
 0xA4

	)

701 
	#EDCF_AC_BK_TXOP_AP
 0x0000

	)

702 
	#EDCF_AC_VI_ACI_AP
 0x41

	)

703 
	#EDCF_AC_VI_ECW_AP
 0x43

	)

704 
	#EDCF_AC_VI_TXOP_AP
 0x005ê

	)

705 
	#EDCF_AC_VO_ACI_AP
 0x61

	)

706 
	#EDCF_AC_VO_ECW_AP
 0x32

	)

707 
	#EDCF_AC_VO_TXOP_AP
 0x002‡

	)

710 
BWL_PRE_PACKED_STRUCT
 
	sedˇ_∑øm_õ
 {

711 
uöt8
 
	mqosöfo
;

712 
uöt8
 
	mrsvd
;

713 
edcf_a˝¨am_t
 
	ma˝¨am
[
AC_COUNT
];

714 } 
	gBWL_POST_PACKED_STRUCT
;

715 
edˇ_∑øm_õ
 
	tedˇ_∑øm_õ_t
;

716 
	#EDCA_PARAM_IE_LEN
 18

	)

719 
BWL_PRE_PACKED_STRUCT
 
	sqos_ˇp_õ
 {

720 
uöt8
 
	mqosöfo
;

721 } 
	gBWL_POST_PACKED_STRUCT
;

722 
qos_ˇp_õ
 
	tqos_ˇp_õ_t
;

724 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_qbss_lﬂd_õ
 {

725 
uöt8
 
	mid
;

726 
uöt8
 
	mÀngth
;

727 
uöt16
 
	m°©i⁄_cou¡
;

728 
uöt8
 
	mch™√l_utûiz©i⁄
;

729 
uöt16
 
	mØc
;

730 } 
	gBWL_POST_PACKED_STRUCT
;

731 
dŸ11_qbss_lﬂd_õ
 
	tdŸ11_qbss_lﬂd_õ_t
;

732 
	#BSS_LOAD_IE_SIZE
 7

	)

735 
	#FIXED_MSDU_SIZE
 0x8000

	)

736 
	#MSDU_SIZE_MASK
 0x7ff‡

	)

740 
	#INTEGER_SHIFT
 13

	)

741 
	#FRACTION_MASK
 0x1FFF

	)

744 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_m™agemít_nŸifiˇti⁄
 {

745 
uöt8
 
	mˇãg‹y
;

746 
uöt8
 
	ma˘i⁄
;

747 
uöt8
 
	mtokí
;

748 
uöt8
 
	m°©us
;

749 
uöt8
 
	md©a
[1];

750 } 
	gBWL_POST_PACKED_STRUCT
;

751 
	#DOT11_MGMT_NOTIFICATION_LEN
 4

	)

754 
BWL_PRE_PACKED_STRUCT
 
	sti_õ
 {

755 
uöt8
 
	mti_ty≥
;

756 
uöt32
 
	mti_vÆ
;

757 } 
	gBWL_POST_PACKED_STRUCT
;

758 
ti_õ
 
	tti_õ_t
;

759 
	#TI_TYPE_REASSOC_DEADLINE
 1

	)

760 
	#TI_TYPE_KEY_LIFETIME
 2

	)

763 
	#WME_ADDTS_REQUEST
 0

	)

764 
	#WME_ADDTS_RESPONSE
 1

	)

765 
	#WME_DELTS_REQUEST
 2

	)

768 
	#WME_ADMISSION_ACCEPTED
 0

	)

769 
	#WME_INVALID_PARAMETERS
 1

	)

770 
	#WME_ADMISSION_REFUSED
 3

	)

775 
	#BCN_PRB_SSID
(
body
Ë((*)(bodyË+ 
DOT11_BCN_PRB_LEN
)

	)

778 
	#DOT11_OPEN_SYSTEM
 0

	)

779 
	#DOT11_SHARED_KEY
 1

	)

780 
	#DOT11_FAST_BSS
 2

	)

781 
	#DOT11_CHALLENGE_LEN
 128

	)

784 
	#FC_PVER_MASK
 0x3

	)

785 
	#FC_PVER_SHIFT
 0

	)

786 
	#FC_TYPE_MASK
 0xC

	)

787 
	#FC_TYPE_SHIFT
 2

	)

788 
	#FC_SUBTYPE_MASK
 0xF0

	)

789 
	#FC_SUBTYPE_SHIFT
 4

	)

790 
	#FC_TODS
 0x100

	)

791 
	#FC_TODS_SHIFT
 8

	)

792 
	#FC_FROMDS
 0x200

	)

793 
	#FC_FROMDS_SHIFT
 9

	)

794 
	#FC_MOREFRAG
 0x400

	)

795 
	#FC_MOREFRAG_SHIFT
 10

	)

796 
	#FC_RETRY
 0x800

	)

797 
	#FC_RETRY_SHIFT
 11

	)

798 
	#FC_PM
 0x1000

	)

799 
	#FC_PM_SHIFT
 12

	)

800 
	#FC_MOREDATA
 0x2000

	)

801 
	#FC_MOREDATA_SHIFT
 13

	)

802 
	#FC_WEP
 0x4000

	)

803 
	#FC_WEP_SHIFT
 14

	)

804 
	#FC_ORDER
 0x8000

	)

805 
	#FC_ORDER_SHIFT
 15

	)

808 
	#SEQNUM_SHIFT
 4

	)

809 
	#SEQNUM_MAX
 0x1000

	)

810 
	#FRAGNUM_MASK
 0xF

	)

815 
	#FC_TYPE_MNG
 0

	)

816 
	#FC_TYPE_CTL
 1

	)

817 
	#FC_TYPE_DATA
 2

	)

820 
	#FC_SUBTYPE_ASSOC_REQ
 0

	)

821 
	#FC_SUBTYPE_ASSOC_RESP
 1

	)

822 
	#FC_SUBTYPE_REASSOC_REQ
 2

	)

823 
	#FC_SUBTYPE_REASSOC_RESP
 3

	)

824 
	#FC_SUBTYPE_PROBE_REQ
 4

	)

825 
	#FC_SUBTYPE_PROBE_RESP
 5

	)

826 
	#FC_SUBTYPE_BEACON
 8

	)

827 
	#FC_SUBTYPE_ATIM
 9

	)

828 
	#FC_SUBTYPE_DISASSOC
 10

	)

829 
	#FC_SUBTYPE_AUTH
 11

	)

830 
	#FC_SUBTYPE_DEAUTH
 12

	)

831 
	#FC_SUBTYPE_ACTION
 13

	)

832 
	#FC_SUBTYPE_ACTION_NOACK
 14

	)

835 
	#FC_SUBTYPE_CTL_WRAPPER
 7

	)

836 
	#FC_SUBTYPE_BLOCKACK_REQ
 8

	)

837 
	#FC_SUBTYPE_BLOCKACK
 9

	)

838 
	#FC_SUBTYPE_PS_POLL
 10

	)

839 
	#FC_SUBTYPE_RTS
 11

	)

840 
	#FC_SUBTYPE_CTS
 12

	)

841 
	#FC_SUBTYPE_ACK
 13

	)

842 
	#FC_SUBTYPE_CF_END
 14

	)

843 
	#FC_SUBTYPE_CF_END_ACK
 15

	)

846 
	#FC_SUBTYPE_DATA
 0

	)

847 
	#FC_SUBTYPE_DATA_CF_ACK
 1

	)

848 
	#FC_SUBTYPE_DATA_CF_POLL
 2

	)

849 
	#FC_SUBTYPE_DATA_CF_ACK_POLL
 3

	)

850 
	#FC_SUBTYPE_NULL
 4

	)

851 
	#FC_SUBTYPE_CF_ACK
 5

	)

852 
	#FC_SUBTYPE_CF_POLL
 6

	)

853 
	#FC_SUBTYPE_CF_ACK_POLL
 7

	)

854 
	#FC_SUBTYPE_QOS_DATA
 8

	)

855 
	#FC_SUBTYPE_QOS_DATA_CF_ACK
 9

	)

856 
	#FC_SUBTYPE_QOS_DATA_CF_POLL
 10

	)

857 
	#FC_SUBTYPE_QOS_DATA_CF_ACK_POLL
 11

	)

858 
	#FC_SUBTYPE_QOS_NULL
 12

	)

859 
	#FC_SUBTYPE_QOS_CF_POLL
 14

	)

860 
	#FC_SUBTYPE_QOS_CF_ACK_POLL
 15

	)

863 
	#FC_SUBTYPE_ANY_QOS
(
s
Ë(((sË& 8Ë!0)

	)

864 
	#FC_SUBTYPE_ANY_NULL
(
s
Ë(((sË& 4Ë!0)

	)

865 
	#FC_SUBTYPE_ANY_CF_POLL
(
s
Ë(((sË& 2Ë!0)

	)

866 
	#FC_SUBTYPE_ANY_CF_ACK
(
s
Ë(((sË& 1Ë!0)

	)

869 
	#FC_KIND_MASK
 (
FC_TYPE_MASK
 | 
FC_SUBTYPE_MASK
Ë

	)

871 
	#FC_KIND
(
t
, 
s
Ë((—Ë<< 
FC_TYPE_SHIFT
Ë| ((sË<< 
FC_SUBTYPE_SHIFT
)Ë

	)

873 
	#FC_SUBTYPE
(
fc
Ë(((fcË& 
FC_SUBTYPE_MASK
Ë>> 
FC_SUBTYPE_SHIFT
Ë

	)

874 
	#FC_TYPE
(
fc
Ë(((fcË& 
FC_TYPE_MASK
Ë>> 
FC_TYPE_SHIFT
Ë

	)

876 
	#FC_ASSOC_REQ
 
	`FC_KIND
(
FC_TYPE_MNG
, 
FC_SUBTYPE_ASSOC_REQ
Ë

	)

877 
	#FC_ASSOC_RESP
 
	`FC_KIND
(
FC_TYPE_MNG
, 
FC_SUBTYPE_ASSOC_RESP
Ë

	)

878 
	#FC_REASSOC_REQ
 
	`FC_KIND
(
FC_TYPE_MNG
, 
FC_SUBTYPE_REASSOC_REQ
Ë

	)

879 
	#FC_REASSOC_RESP
 
	`FC_KIND
(
FC_TYPE_MNG
, 
FC_SUBTYPE_REASSOC_RESP
Ë

	)

880 
	#FC_PROBE_REQ
 
	`FC_KIND
(
FC_TYPE_MNG
, 
FC_SUBTYPE_PROBE_REQ
Ë

	)

881 
	#FC_PROBE_RESP
 
	`FC_KIND
(
FC_TYPE_MNG
, 
FC_SUBTYPE_PROBE_RESP
Ë

	)

882 
	#FC_BEACON
 
	`FC_KIND
(
FC_TYPE_MNG
, 
FC_SUBTYPE_BEACON
Ë

	)

883 
	#FC_DISASSOC
 
	`FC_KIND
(
FC_TYPE_MNG
, 
FC_SUBTYPE_DISASSOC
Ë

	)

884 
	#FC_AUTH
 
	`FC_KIND
(
FC_TYPE_MNG
, 
FC_SUBTYPE_AUTH
Ë

	)

885 
	#FC_DEAUTH
 
	`FC_KIND
(
FC_TYPE_MNG
, 
FC_SUBTYPE_DEAUTH
Ë

	)

886 
	#FC_ACTION
 
	`FC_KIND
(
FC_TYPE_MNG
, 
FC_SUBTYPE_ACTION
Ë

	)

887 
	#FC_ACTION_NOACK
 
	`FC_KIND
(
FC_TYPE_MNG
, 
FC_SUBTYPE_ACTION_NOACK
Ë

	)

889 
	#FC_CTL_WRAPPER
 
	`FC_KIND
(
FC_TYPE_CTL
, 
FC_SUBTYPE_CTL_WRAPPER
Ë

	)

890 
	#FC_BLOCKACK_REQ
 
	`FC_KIND
(
FC_TYPE_CTL
, 
FC_SUBTYPE_BLOCKACK_REQ
Ë

	)

891 
	#FC_BLOCKACK
 
	`FC_KIND
(
FC_TYPE_CTL
, 
FC_SUBTYPE_BLOCKACK
Ë

	)

892 
	#FC_PS_POLL
 
	`FC_KIND
(
FC_TYPE_CTL
, 
FC_SUBTYPE_PS_POLL
Ë

	)

893 
	#FC_RTS
 
	`FC_KIND
(
FC_TYPE_CTL
, 
FC_SUBTYPE_RTS
Ë

	)

894 
	#FC_CTS
 
	`FC_KIND
(
FC_TYPE_CTL
, 
FC_SUBTYPE_CTS
Ë

	)

895 
	#FC_ACK
 
	`FC_KIND
(
FC_TYPE_CTL
, 
FC_SUBTYPE_ACK
Ë

	)

896 
	#FC_CF_END
 
	`FC_KIND
(
FC_TYPE_CTL
, 
FC_SUBTYPE_CF_END
Ë

	)

897 
	#FC_CF_END_ACK
 
	`FC_KIND
(
FC_TYPE_CTL
, 
FC_SUBTYPE_CF_END_ACK
Ë

	)

899 
	#FC_DATA
 
	`FC_KIND
(
FC_TYPE_DATA
, 
FC_SUBTYPE_DATA
Ë

	)

900 
	#FC_NULL_DATA
 
	`FC_KIND
(
FC_TYPE_DATA
, 
FC_SUBTYPE_NULL
Ë

	)

901 
	#FC_DATA_CF_ACK
 
	`FC_KIND
(
FC_TYPE_DATA
, 
FC_SUBTYPE_DATA_CF_ACK
Ë

	)

902 
	#FC_QOS_DATA
 
	`FC_KIND
(
FC_TYPE_DATA
, 
FC_SUBTYPE_QOS_DATA
Ë

	)

903 
	#FC_QOS_NULL
 
	`FC_KIND
(
FC_TYPE_DATA
, 
FC_SUBTYPE_QOS_NULL
Ë

	)

908 
	#QOS_PRIO_SHIFT
 0

	)

909 
	#QOS_PRIO_MASK
 0x0007

	)

910 
	#QOS_PRIO
(
qos
Ë(((qosË& 
QOS_PRIO_MASK
Ë>> 
QOS_PRIO_SHIFT
Ë

	)

913 
	#QOS_TID_SHIFT
 0

	)

914 
	#QOS_TID_MASK
 0x000‡

	)

915 
	#QOS_TID
(
qos
Ë(((qosË& 
QOS_TID_MASK
Ë>> 
QOS_TID_SHIFT
Ë

	)

918 
	#QOS_EOSP_SHIFT
 4

	)

919 
	#QOS_EOSP_MASK
 0x0010

	)

920 
	#QOS_EOSP
(
qos
Ë(((qosË& 
QOS_EOSP_MASK
Ë>> 
QOS_EOSP_SHIFT
Ë

	)

923 
	#QOS_ACK_NORMAL_ACK
 0

	)

924 
	#QOS_ACK_NO_ACK
 1

	)

925 
	#QOS_ACK_NO_EXP_ACK
 2

	)

926 
	#QOS_ACK_BLOCK_ACK
 3

	)

927 
	#QOS_ACK_SHIFT
 5

	)

928 
	#QOS_ACK_MASK
 0x0060

	)

929 
	#QOS_ACK
(
qos
Ë(((qosË& 
QOS_ACK_MASK
Ë>> 
QOS_ACK_SHIFT
Ë

	)

932 
	#QOS_AMSDU_SHIFT
 7

	)

933 
	#QOS_AMSDU_MASK
 0x0080

	)

940 
	#DOT11_MNG_AUTH_ALGO_LEN
 2

	)

941 
	#DOT11_MNG_AUTH_SEQ_LEN
 2

	)

942 
	#DOT11_MNG_BEACON_INT_LEN
 2

	)

943 
	#DOT11_MNG_CAP_LEN
 2

	)

944 
	#DOT11_MNG_AP_ADDR_LEN
 6

	)

945 
	#DOT11_MNG_LISTEN_INT_LEN
 2

	)

946 
	#DOT11_MNG_REASON_LEN
 2

	)

947 
	#DOT11_MNG_AID_LEN
 2

	)

948 
	#DOT11_MNG_STATUS_LEN
 2

	)

949 
	#DOT11_MNG_TIMESTAMP_LEN
 8

	)

952 
	#DOT11_AID_MASK
 0x3ff‡

	)

955 
	#DOT11_RC_RESERVED
 0

	)

956 
	#DOT11_RC_UNSPECIFIED
 1

	)

957 
	#DOT11_RC_AUTH_INVAL
 2

	)

958 
	#DOT11_RC_DEAUTH_LEAVING
 3

	)

961 
	#DOT11_RC_INACTIVITY
 4

	)

962 
	#DOT11_RC_BUSY
 5

	)

965 
	#DOT11_RC_INVAL_CLASS_2
 6

	)

968 
	#DOT11_RC_INVAL_CLASS_3
 7

	)

971 
	#DOT11_RC_DISASSOC_LEAVING
 8

	)

974 
	#DOT11_RC_NOT_AUTH
 9

	)

977 
	#DOT11_RC_BAD_PC
 10

	)

978 
	#DOT11_RC_BAD_CHANNELS
 11

	)

982 
	#DOT11_RC_UNSPECIFIED_QOS
 32

	)

983 
	#DOT11_RC_INSUFFCIENT_BW
 33

	)

984 
	#DOT11_RC_EXCESSIVE_FRAMES
 34

	)

985 
	#DOT11_RC_TX_OUTSIDE_TXOP
 35

	)

986 
	#DOT11_RC_LEAVING_QBSS
 36

	)

987 
	#DOT11_RC_BAD_MECHANISM
 37

	)

988 
	#DOT11_RC_SETUP_NEEDED
 38

	)

989 
	#DOT11_RC_TIMEOUT
 39

	)

991 
	#DOT11_RC_MAX
 23

	)

993 
	#DOT11_RC_TDLS_PEER_UNREACH
 25

	)

994 
	#DOT11_RC_TDLS_DOWN_UNSPECIFIED
 26

	)

997 
	#DOT11_SC_SUCCESS
 0

	)

998 
	#DOT11_SC_FAILURE
 1

	)

999 
	#DOT11_SC_TDLS_WAKEUP_SCH_ALT
 2

	)

1001 
	#DOT11_SC_TDLS_WAKEUP_SCH_REJ
 3

	)

1002 
	#DOT11_SC_TDLS_SEC_DISABLED
 5

	)

1003 
	#DOT11_SC_LIFETIME_REJ
 6

	)

1004 
	#DOT11_SC_NOT_SAME_BSS
 7

	)

1005 
	#DOT11_SC_CAP_MISMATCH
 10

	)

1009 
	#DOT11_SC_REASSOC_FAIL
 11

	)

1012 
	#DOT11_SC_ASSOC_FAIL
 12

	)

1015 
	#DOT11_SC_AUTH_MISMATCH
 13

	)

1019 
	#DOT11_SC_AUTH_SEQ
 14

	)

1024 
	#DOT11_SC_AUTH_CHALLENGE_FAIL
 15

	)

1027 
	#DOT11_SC_AUTH_TIMEOUT
 16

	)

1030 
	#DOT11_SC_ASSOC_BUSY_FAIL
 17

	)

1034 
	#DOT11_SC_ASSOC_RATE_MISMATCH
 18

	)

1039 
	#DOT11_SC_ASSOC_SHORT_REQUIRED
 19

	)

1043 
	#DOT11_SC_ASSOC_PBCC_REQUIRED
 20

	)

1047 
	#DOT11_SC_ASSOC_AGILITY_REQUIRED
 21

	)

1051 
	#DOT11_SC_ASSOC_SPECTRUM_REQUIRED
 22

	)

1054 
	#DOT11_SC_ASSOC_BAD_POWER_CAP
 23

	)

1058 
	#DOT11_SC_ASSOC_BAD_SUP_CHANNELS
 24

	)

1062 
	#DOT11_SC_ASSOC_SHORTSLOT_REQUIRED
 25

	)

1066 
	#DOT11_SC_ASSOC_ERPBCC_REQUIRED
 26

	)

1070 
	#DOT11_SC_ASSOC_DSSOFDM_REQUIRED
 27

	)

1074 
	#DOT11_SC_ASSOC_R0KH_UNREACHABLE
 28

	)

1077 
	#DOT11_SC_ASSOC_TRY_LATER
 30

	)

1079 
	#DOT11_SC_ASSOC_MFP_VIOLATION
 31

	)

1083 
	#DOT11_SC_DECLINED
 37

	)

1084 
	#DOT11_SC_INVALID_PARAMS
 38

	)

1085 
	#DOT11_SC_INVALID_PAIRWISE_CIPHER
 42

	)

1086 
	#DOT11_SC_INVALID_AKMP
 43

	)

1087 
	#DOT11_SC_INVALID_RSNIE_CAP
 45

	)

1088 
	#DOT11_SC_DLS_NOT_ALLOWED
 48

	)

1089 
	#DOT11_SC_INVALID_PMKID
 53

	)

1090 
	#DOT11_SC_INVALID_MDID
 54

	)

1091 
	#DOT11_SC_INVALID_FTIE
 55

	)

1093 
	#DOT11_SC_UNEXP_MSG
 70

	)

1094 
	#DOT11_SC_INVALID_SNONCE
 71

	)

1095 
	#DOT11_SC_INVALID_RSNIE
 72

	)

1098 
	#DOT11_MNG_DS_PARAM_LEN
 1

	)

1099 
	#DOT11_MNG_IBSS_PARAM_LEN
 2

	)

1104 
	#DOT11_MNG_TIM_FIXED_LEN
 3

	)

1105 
	#DOT11_MNG_TIM_DTIM_COUNT
 0

	)

1106 
	#DOT11_MNG_TIM_DTIM_PERIOD
 1

	)

1107 
	#DOT11_MNG_TIM_BITMAP_CTL
 2

	)

1108 
	#DOT11_MNG_TIM_PVB
 3

	)

1111 
	#TLV_TAG_OFF
 0

	)

1112 
	#TLV_LEN_OFF
 1

	)

1113 
	#TLV_HDR_LEN
 2

	)

1114 
	#TLV_BODY_OFF
 2

	)

1117 
	#DOT11_MNG_SSID_ID
 0

	)

1118 
	#DOT11_MNG_RATES_ID
 1

	)

1119 
	#DOT11_MNG_FH_PARMS_ID
 2

	)

1120 
	#DOT11_MNG_DS_PARMS_ID
 3

	)

1121 
	#DOT11_MNG_CF_PARMS_ID
 4

	)

1122 
	#DOT11_MNG_TIM_ID
 5

	)

1123 
	#DOT11_MNG_IBSS_PARMS_ID
 6

	)

1124 
	#DOT11_MNG_COUNTRY_ID
 7

	)

1125 
	#DOT11_MNG_HOPPING_PARMS_ID
 8

	)

1126 
	#DOT11_MNG_HOPPING_TABLE_ID
 9

	)

1127 
	#DOT11_MNG_REQUEST_ID
 10

	)

1128 
	#DOT11_MNG_QBSS_LOAD_ID
 11

	)

1129 
	#DOT11_MNG_EDCA_PARAM_ID
 12

	)

1130 
	#DOT11_MNG_CHALLENGE_ID
 16

	)

1131 
	#DOT11_MNG_PWR_CONSTRAINT_ID
 32

	)

1132 
	#DOT11_MNG_PWR_CAP_ID
 33

	)

1133 
	#DOT11_MNG_TPC_REQUEST_ID
 34

	)

1134 
	#DOT11_MNG_TPC_REPORT_ID
 35

	)

1135 
	#DOT11_MNG_SUPP_CHANNELS_ID
 36

	)

1136 
	#DOT11_MNG_CHANNEL_SWITCH_ID
 37

	)

1137 
	#DOT11_MNG_MEASURE_REQUEST_ID
 38

	)

1138 
	#DOT11_MNG_MEASURE_REPORT_ID
 39

	)

1139 
	#DOT11_MNG_QUIET_ID
 40

	)

1140 
	#DOT11_MNG_IBSS_DFS_ID
 41

	)

1141 
	#DOT11_MNG_ERP_ID
 42

	)

1142 
	#DOT11_MNG_TS_DELAY_ID
 43

	)

1143 
	#DOT11_MNG_HT_CAP
 45

	)

1144 
	#DOT11_MNG_QOS_CAP_ID
 46

	)

1145 
	#DOT11_MNG_NONERP_ID
 47

	)

1146 
	#DOT11_MNG_RSN_ID
 48

	)

1147 
	#DOT11_MNG_EXT_RATES_ID
 50

	)

1148 
	#DOT11_MNG_AP_CHREP_ID
 51

	)

1149 
	#DOT11_MNG_NBR_REP_ID
 52

	)

1150 
	#DOT11_MNG_MDIE_ID
 54

	)

1151 
	#DOT11_MNG_FTIE_ID
 55

	)

1152 
	#DOT11_MNG_FT_TI_ID
 56

	)

1153 
	#DOT11_MNG_REGCLASS_ID
 59

	)

1154 
	#DOT11_MNG_EXT_CSA_ID
 60

	)

1155 
	#DOT11_MNG_HT_ADD
 61

	)

1156 
	#DOT11_MNG_EXT_CHANNEL_OFFSET
 62

	)

1157 
	#DOT11_MNG_WAPI_ID
 68

	)

1158 
	#DOT11_MNG_TIME_ADVERTISE_ID
 69

	)

1159 
	#DOT11_MNG_RRM_CAP_ID
 70

	)

1160 
	#DOT11_MNG_HT_BSS_COEXINFO_ID
 72

	)

1161 
	#DOT11_MNG_HT_BSS_CHANNEL_REPORT_ID
 73

	)

1162 
	#DOT11_MNG_HT_OBSS_ID
 74

	)

1163 
	#DOT11_MNG_CHANNEL_USAGE
 97

	)

1164 
	#DOT11_MNG_TIME_ZONE_ID
 98

	)

1165 
	#DOT11_MNG_LINK_IDENTIFIER_ID
 101

	)

1166 
	#DOT11_MNG_WAKEUP_SCHEDULE_ID
 102

	)

1167 
	#DOT11_MNG_CHANNEL_SWITCH_TIMING_ID
 104

	)

1168 
	#DOT11_MNG_PTI_CONTROL_ID
 105

	)

1169 
	#DOT11_MNG_PU_BUFFER_STATUS_ID
 106

	)

1170 
	#DOT11_MNG_INTERWORKING_ID
 107

	)

1171 
	#DOT11_MNG_ADVERTISEMENT_ID
 108

	)

1172 
	#DOT11_MNG_EXP_BW_REQ_ID
 109

	)

1173 
	#DOT11_MNG_QOS_MAP_ID
 110

	)

1174 
	#DOT11_MNG_ROAM_CONSORT_ID
 111

	)

1175 
	#DOT11_MNG_EMERGCY_ALERT_ID
 112

	)

1176 
	#DOT11_MNG_EXT_CAP_ID
 127

	)

1177 
	#DOT11_MNG_VHT_CAP_ID
 191

	)

1178 
	#DOT11_MNG_VHT_OPERATION_ID
 192

	)

1180 
	#DOT11_MNG_WPA_ID
 221

	)

1181 
	#DOT11_MNG_PROPR_ID
 221

	)

1183 
	#DOT11_MNG_VS_ID
 221

	)

1186 
	#DOT11_RATE_BASIC
 0x80

	)

1187 
	#DOT11_RATE_MASK
 0x7F

	)

1190 
	#DOT11_MNG_ERP_LEN
 1

	)

1191 
	#DOT11_MNG_NONERP_PRESENT
 0x01

	)

1194 
	#DOT11_MNG_USE_PROTECTION
 0x02

	)

1197 
	#DOT11_MNG_BARKER_PREAMBLE
 0x04

	)

1201 
	#DOT11_MGN_TS_DELAY_LEN
 4

	)

1202 
	#TS_DELAY_FIELD_SIZE
 4

	)

1205 
	#DOT11_CAP_ESS
 0x0001

	)

1206 
	#DOT11_CAP_IBSS
 0x0002

	)

1207 
	#DOT11_CAP_POLLABLE
 0x0004

	)

1208 
	#DOT11_CAP_POLL_RQ
 0x0008

	)

1209 
	#DOT11_CAP_PRIVACY
 0x0010

	)

1210 
	#DOT11_CAP_SHORT
 0x0020

	)

1211 
	#DOT11_CAP_PBCC
 0x0040

	)

1212 
	#DOT11_CAP_AGILITY
 0x0080

	)

1213 
	#DOT11_CAP_SPECTRUM
 0x0100

	)

1214 
	#DOT11_CAP_SHORTSLOT
 0x0400

	)

1215 
	#DOT11_CAP_RRM
 0x1000

	)

1216 
	#DOT11_CAP_CCK_OFDM
 0x2000

	)

1220 
	#DOT11_EXT_CAP_OBSS_COEX_MGMT
 0

	)

1222 
	#DOT11_EXT_CAP_SPSMP
 6

	)

1224 
	#DOT11_EXT_CAP_BSS_TRANSITION_MGMT
 19

	)

1226 
	#DOT11_EXT_CAP_IW
 31

	)

1228 
	#DOT11_EXT_CAP_SI
 41

	)

1229 
	#DOT11_EXT_CAP_SI_MASK
 0x0E

	)

1234 
	#DOT11_ACTION_HDR_LEN
 2

	)

1235 
	#DOT11_ACTION_CAT_OFF
 0

	)

1236 
	#DOT11_ACTION_ACT_OFF
 1

	)

1239 
	#DOT11_ACTION_CAT_ERR_MASK
 0x80

	)

1240 
	#DOT11_ACTION_CAT_MASK
 0x7F

	)

1241 
	#DOT11_ACTION_CAT_SPECT_MNG
 0

	)

1242 
	#DOT11_ACTION_CAT_QOS
 1

	)

1243 
	#DOT11_ACTION_CAT_DLS
 2

	)

1244 
	#DOT11_ACTION_CAT_BLOCKACK
 3

	)

1245 
	#DOT11_ACTION_CAT_PUBLIC
 4

	)

1246 
	#DOT11_ACTION_CAT_RRM
 5

	)

1247 
	#DOT11_ACTION_CAT_FBT
 6

	)

1248 
	#DOT11_ACTION_CAT_HT
 7

	)

1249 
	#DOT11_ACTION_CAT_SA_QUERY
 8

	)

1250 
	#DOT11_ACTION_CAT_PDPA
 9

	)

1251 
	#DOT11_ACTION_CAT_BSSMGMT
 10

	)

1252 
	#DOT11_ACTION_NOTIFICATION
 17

	)

1253 
	#DOT11_ACTION_CAT_VSP
 126

	)

1254 
	#DOT11_ACTION_CAT_VS
 127

	)

1257 
	#DOT11_SM_ACTION_M_REQ
 0

	)

1258 
	#DOT11_SM_ACTION_M_REP
 1

	)

1259 
	#DOT11_SM_ACTION_TPC_REQ
 2

	)

1260 
	#DOT11_SM_ACTION_TPC_REP
 3

	)

1261 
	#DOT11_SM_ACTION_CHANNEL_SWITCH
 4

	)

1262 
	#DOT11_SM_ACTION_EXT_CSA
 5

	)

1265 
	#DOT11_ACTION_ID_HT_CH_WIDTH
 0

	)

1266 
	#DOT11_ACTION_ID_HT_MIMO_PS
 1

	)

1269 
	#DOT11_PUB_ACTION_BSS_COEX_MNG
 0

	)

1270 
	#DOT11_PUB_ACTION_CHANNEL_SWITCH
 4

	)

1273 
	#DOT11_BA_ACTION_ADDBA_REQ
 0

	)

1274 
	#DOT11_BA_ACTION_ADDBA_RESP
 1

	)

1275 
	#DOT11_BA_ACTION_DELBA
 2

	)

1278 
	#DOT11_ADDBA_PARAM_AMSDU_SUP
 0x0001

	)

1279 
	#DOT11_ADDBA_PARAM_POLICY_MASK
 0x0002

	)

1280 
	#DOT11_ADDBA_PARAM_POLICY_SHIFT
 1

	)

1281 
	#DOT11_ADDBA_PARAM_TID_MASK
 0x003¯

	)

1282 
	#DOT11_ADDBA_PARAM_TID_SHIFT
 2

	)

1283 
	#DOT11_ADDBA_PARAM_BSIZE_MASK
 0xffc0

	)

1284 
	#DOT11_ADDBA_PARAM_BSIZE_SHIFT
 6

	)

1286 
	#DOT11_ADDBA_POLICY_DELAYED
 0

	)

1287 
	#DOT11_ADDBA_POLICY_IMMEDIATE
 1

	)

1290 
	#DOT11_FT_ACTION_FT_RESERVED
 0

	)

1291 
	#DOT11_FT_ACTION_FT_REQ
 1

	)

1292 
	#DOT11_FT_ACTION_FT_RES
 2

	)

1293 
	#DOT11_FT_ACTION_FT_CON
 3

	)

1294 
	#DOT11_FT_ACTION_FT_ACK
 4

	)

1297 
	#DOT11_DLS_ACTION_REQ
 0

	)

1298 
	#DOT11_DLS_ACTION_RESP
 1

	)

1299 
	#DOT11_DLS_ACTION_TD
 2

	)

1302 
	#DOT11_WNM_ACTION_EVENT_REQ
 0

	)

1303 
	#DOT11_WNM_ACTION_EVENT_REP
 1

	)

1304 
	#DOT11_WNM_ACTION_DIAG_REQ
 2

	)

1305 
	#DOT11_WNM_ACTION_DIAG_REP
 3

	)

1306 
	#DOT11_WNM_ACTION_LOC_CFG_REQ
 4

	)

1307 
	#DOT11_WNM_ACTION_LOC_RFG_RESP
 5

	)

1308 
	#DOT11_WNM_ACTION_BSS_TRANS_QURY
 6

	)

1309 
	#DOT11_WNM_ACTION_BSS_TRANS_REQ
 7

	)

1310 
	#DOT11_WNM_ACTION_BSS_TRANS_RESP
 8

	)

1311 
	#DOT11_WNM_ACTION_FMS_REQ
 9

	)

1312 
	#DOT11_WNM_ACTION_FMS_RESP
 10

	)

1313 
	#DOT11_WNM_ACTION_COL_INTRFRNCE_REQ
 11

	)

1314 
	#DOT11_WNM_ACTION_COL_INTRFRNCE_REP
 12

	)

1315 
	#DOT11_WNM_ACTION_TFS_REQ
 13

	)

1316 
	#DOT11_WNM_ACTION_TFS_RESP
 14

	)

1317 
	#DOT11_WNM_ACTION_TFS_NOTIFY
 15

	)

1318 
	#DOT11_WNM_ACTION_WNM_SLEEP_REQ
 16

	)

1319 
	#DOT11_WNM_ACTION_WNM_SLEEP_RESP
 17

	)

1320 
	#DOT11_WNM_ACTION_TIM_BCAST_REQ
 18

	)

1321 
	#DOT11_WNM_ACTION_TIM_BCAST_RESP
 19

	)

1322 
	#DOT11_WNM_ACTION_QOS_TRFC_CAP_UPD
 20

	)

1323 
	#DOT11_WNM_ACTION_CHAN_USAGE_REQ
 21

	)

1324 
	#DOT11_WNM_ACTION_CHAN_USAGE_RESP
 22

	)

1325 
	#DOT11_WNM_ACTION_DMS_REQ
 23

	)

1326 
	#DOT11_WNM_ACTION_DMS_RESP
 24

	)

1327 
	#DOT11_WNM_ACTION_TMNG_MEASUR_REQ
 25

	)

1328 
	#DOT11_WNM_ACTION_NOTFCTN_REQ
 26

	)

1329 
	#DOT11_WNM_ACTION_NOTFCTN_RES
 27

	)

1331 
	#DOT11_MNG_COUNTRY_ID_LEN
 3

	)

1334 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_dls_ªq
 {

1335 
uöt8
 
	mˇãg‹y
;

1336 
uöt8
 
	ma˘i⁄
;

1337 
ëhî_addr
 
	mda
;

1338 
ëhî_addr
 
	mß
;

1339 
uöt16
 
	mˇp
;

1340 
uöt16
 
	mtimeout
;

1341 
uöt8
 
	md©a
[1];

1342 } 
	gBWL_POST_PACKED_STRUCT
;

1343 
dŸ11_dls_ªq
 
	tdŸ11_dls_ªq_t
;

1344 
	#DOT11_DLS_REQ_LEN
 18

	)

1347 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_dls_ª•
 {

1348 
uöt8
 
	mˇãg‹y
;

1349 
uöt8
 
	ma˘i⁄
;

1350 
uöt16
 
	m°©us
;

1351 
ëhî_addr
 
	mda
;

1352 
ëhî_addr
 
	mß
;

1353 
uöt8
 
	md©a
[1];

1354 } 
	gBWL_POST_PACKED_STRUCT
;

1355 
dŸ11_dls_ª•
 
	tdŸ11_dls_ª•_t
;

1356 
	#DOT11_DLS_RESP_LEN
 16

	)

1360 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_bss_å™s_quîy
 {

1361 
uöt8
 
	mˇãg‹y
;

1362 
uöt8
 
	ma˘i⁄
;

1363 
uöt8
 
	mtokí
;

1364 
uöt8
 
	mªas⁄
;

1365 
uöt8
 
	md©a
[1];

1366 } 
	gBWL_POST_PACKED_STRUCT
;

1367 
dŸ11_bss_å™s_quîy
 
	tdŸ11_bss_å™s_quîy_t
;

1368 
	#DOT11_BSS_TRANS_QUERY_LEN
 4

	)

1371 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_bss_å™s_ªq
 {

1372 
uöt8
 
	mˇãg‹y
;

1373 
uöt8
 
	ma˘i⁄
;

1374 
uöt8
 
	mtokí
;

1375 
uöt8
 
	mªqmode
;

1376 
uöt16
 
	mdißssoc_tmr
;

1377 
uöt8
 
	mvÆidôy_öåvl
;

1378 
uöt8
 
	md©a
[1];

1380 } 
	gBWL_POST_PACKED_STRUCT
;

1381 
dŸ11_bss_å™s_ªq
 
	tdŸ11_bss_å™s_ªq_t
;

1382 
	#DOT11_BSS_TRANS_REQ_LEN
 7

	)

1384 
	#DOT11_BSS_TERM_DUR_LEN
 12

	)

1388 
	#DOT11_BSS_TRNS_REQMODE_PREF_LIST_INCL
 0x01

	)

1389 
	#DOT11_BSS_TRNS_REQMODE_ABRIDGED
 0x02

	)

1390 
	#DOT11_BSS_TRNS_REQMODE_DISASSOC_IMMINENT
 0x04

	)

1391 
	#DOT11_BSS_TRNS_REQMODE_BSS_TERM_INCL
 0x08

	)

1392 
	#DOT11_BSS_TRNS_REQMODE_ESS_DISASSOC_IMNT
 0x10

	)

1396 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_bss_å™s_ªs
 {

1397 
uöt8
 
	mˇãg‹y
;

1398 
uöt8
 
	ma˘i⁄
;

1399 
uöt8
 
	mtokí
;

1400 
uöt8
 
	m°©us
;

1401 
uöt8
 
	mãrm_dñay
;

1402 
uöt8
 
	md©a
[1];

1404 } 
	gBWL_POST_PACKED_STRUCT
;

1405 
dŸ11_bss_å™s_ªs
 
	tdŸ11_bss_å™s_ªs_t
;

1406 
	#DOT11_BSS_TRANS_RES_LEN
 5

	)

1409 
	#DOT11_BSS_TRNS_RES_STATUS_ACCEPT
 0

	)

1410 
	#DOT11_BSS_TRNS_RES_STATUS_REJECT
 1

	)

1411 
	#DOT11_BSS_TRNS_RES_STATUS_REJ_INSUFF_BCN
 2

	)

1412 
	#DOT11_BSS_TRNS_RES_STATUS_REJ_INSUFF_CAP
 3

	)

1413 
	#DOT11_BSS_TRNS_RES_STATUS_REJ_TERM_UNDESIRED
 4

	)

1414 
	#DOT11_BSS_TRNS_RES_STATUS_REJ_TERM_DELAY_REQ
 5

	)

1415 
	#DOT11_BSS_TRNS_RES_STATUS_REJ_BSS_LIST_PROVIDED
 6

	)

1416 
	#DOT11_BSS_TRNS_RES_STATUS_REJ_NO_SUITABLE_BSS
 7

	)

1417 
	#DOT11_BSS_TRNS_RES_STATUS_REJ_LEAVING_ESS
 8

	)

1421 
	#DOT11_NBR_RPRT_BSSID_INFO_REACHABILTY
 0x0003

	)

1422 
	#DOT11_NBR_RPRT_BSSID_INFO_SEC
 0x0004

	)

1423 
	#DOT11_NBR_RPRT_BSSID_INFO_KEY_SCOPE
 0x0008

	)

1424 
	#DOT11_NBR_RPRT_BSSID_INFO_CAP
 0x03f0

	)

1426 
	#DOT11_NBR_RPRT_BSSID_INFO_CAP_SPEC_MGMT
 0x0010

	)

1427 
	#DOT11_NBR_RPRT_BSSID_INFO_CAP_QOS
 0x0020

	)

1428 
	#DOT11_NBR_RPRT_BSSID_INFO_CAP_APSD
 0x0040

	)

1429 
	#DOT11_NBR_RPRT_BSSID_INFO_CAP_RDIO_MSMT
 0x0080

	)

1430 
	#DOT11_NBR_RPRT_BSSID_INFO_CAP_DEL_BA
 0x0100

	)

1431 
	#DOT11_NBR_RPRT_BSSID_INFO_CAP_IMM_BA
 0x0200

	)

1434 
	#DOT11_NBR_RPRT_SUBELEM_BSS_CANDDT_PREF_ID
 3

	)

1437 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_addba_ªq
 {

1438 
uöt8
 
	mˇãg‹y
;

1439 
uöt8
 
	ma˘i⁄
;

1440 
uöt8
 
	mtokí
;

1441 
uöt16
 
	maddba_∑øm_£t
;

1442 
uöt16
 
	mtimeout
;

1443 
uöt16
 
	m°¨t_£qnum
;

1444 } 
	gBWL_POST_PACKED_STRUCT
;

1445 
dŸ11_addba_ªq
 
	tdŸ11_addba_ªq_t
;

1446 
	#DOT11_ADDBA_REQ_LEN
 9

	)

1448 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_addba_ª•
 {

1449 
uöt8
 
	mˇãg‹y
;

1450 
uöt8
 
	ma˘i⁄
;

1451 
uöt8
 
	mtokí
;

1452 
uöt16
 
	m°©us
;

1453 
uöt16
 
	maddba_∑øm_£t
;

1454 
uöt16
 
	mtimeout
;

1455 } 
	gBWL_POST_PACKED_STRUCT
;

1456 
dŸ11_addba_ª•
 
	tdŸ11_addba_ª•_t
;

1457 
	#DOT11_ADDBA_RESP_LEN
 9

	)

1460 
	#DOT11_DELBA_PARAM_INIT_MASK
 0x0800

	)

1461 
	#DOT11_DELBA_PARAM_INIT_SHIFT
 11

	)

1462 
	#DOT11_DELBA_PARAM_TID_MASK
 0xf000

	)

1463 
	#DOT11_DELBA_PARAM_TID_SHIFT
 12

	)

1465 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_dñba
 {

1466 
uöt8
 
	mˇãg‹y
;

1467 
uöt8
 
	ma˘i⁄
;

1468 
uöt16
 
	mdñba_∑øm_£t
;

1469 
uöt16
 
	mªas⁄
;

1470 } 
	gBWL_POST_PACKED_STRUCT
;

1471 
dŸ11_dñba
 
	tdŸ11_dñba_t
;

1472 
	#DOT11_DELBA_LEN
 6

	)

1475 
	#SA_QUERY_REQUEST
 0

	)

1476 
	#SA_QUERY_RESPONSE
 1

	)

1481 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_·_ªq
 {

1482 
uöt8
 
	mˇãg‹y
;

1483 
uöt8
 
	ma˘i⁄
;

1484 
uöt8
 
	m°a_addr
[
ETHER_ADDR_LEN
];

1485 
uöt8
 
	mtgt_≠_addr
[
ETHER_ADDR_LEN
];

1486 
uöt8
 
	md©a
[1];

1487 } 
	gBWL_POST_PACKED_STRUCT
;

1488 
dŸ11_·_ªq
 
	tdŸ11_·_ªq_t
;

1489 
	#DOT11_FT_REQ_FIXED_LEN
 14

	)

1492 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_·_ªs
 {

1493 
uöt8
 
	mˇãg‹y
;

1494 
uöt8
 
	ma˘i⁄
;

1495 
uöt8
 
	m°a_addr
[
ETHER_ADDR_LEN
];

1496 
uöt8
 
	mtgt_≠_addr
[
ETHER_ADDR_LEN
];

1497 
uöt16
 
	m°©us
;

1498 
uöt8
 
	md©a
[1];

1499 } 
	gBWL_POST_PACKED_STRUCT
;

1500 
dŸ11_·_ªs
 
	tdŸ11_·_ªs_t
;

1501 
	#DOT11_FT_RES_FIXED_LEN
 16

	)

1508 
	#DOT11_RRM_CAP_LEN
 5

	)

1509 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_ºm_ˇp_õ
 {

1510 
uöt8
 
	mˇp
[
DOT11_RRM_CAP_LEN
];

1511 } 
	gBWL_POST_PACKED_STRUCT
;

1512 
dŸ11_ºm_ˇp_õ
 
	tdŸ11_ºm_ˇp_õ_t
;

1515 
	#DOT11_RRM_CAP_LINK
 0

	)

1516 
	#DOT11_RRM_CAP_NEIGHBOR_REPORT
 1

	)

1517 
	#DOT11_RRM_CAP_PARALLEL
 2

	)

1518 
	#DOT11_RRM_CAP_REPEATED
 3

	)

1519 
	#DOT11_RRM_CAP_BCN_PASSIVE
 4

	)

1520 
	#DOT11_RRM_CAP_BCN_ACTIVE
 5

	)

1521 
	#DOT11_RRM_CAP_BCN_TABLE
 6

	)

1522 
	#DOT11_RRM_CAP_BCN_REP_COND
 7

	)

1523 
	#DOT11_RRM_CAP_AP_CHANREP
 16

	)

1527 
	#DOT11_OP_CLASS_NONE
 255

	)

1531 
	#DOT11_RM_ACTION_RM_REQ
 0

	)

1532 
	#DOT11_RM_ACTION_RM_REP
 1

	)

1533 
	#DOT11_RM_ACTION_LM_REQ
 2

	)

1534 
	#DOT11_RM_ACTION_LM_REP
 3

	)

1535 
	#DOT11_RM_ACTION_NR_REQ
 4

	)

1536 
	#DOT11_RM_ACTION_NR_REP
 5

	)

1539 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_rm_a˘i⁄
 {

1540 
uöt8
 
	mˇãg‹y
;

1541 
uöt8
 
	ma˘i⁄
;

1542 
uöt8
 
	mtokí
;

1543 
uöt8
 
	md©a
[1];

1544 } 
	gBWL_POST_PACKED_STRUCT
;

1545 
dŸ11_rm_a˘i⁄
 
	tdŸ11_rm_a˘i⁄_t
;

1546 
	#DOT11_RM_ACTION_LEN
 3

	)

1548 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_rmªq
 {

1549 
uöt8
 
	mˇãg‹y
;

1550 
uöt8
 
	ma˘i⁄
;

1551 
uöt8
 
	mtokí
;

1552 
uöt16
 
	mªps
;

1553 } 
	gBWL_POST_PACKED_STRUCT
;

1554 
dŸ11_rmªq
 
	tdŸ11_rmªq_t
;

1555 
	#DOT11_RMREQ_LEN
 5

	)

1557 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_rm_õ
 {

1558 
uöt8
 
	mid
;

1559 
uöt8
 
	mÀn
;

1560 
uöt8
 
	mtokí
;

1561 
uöt8
 
	mmode
;

1562 
uöt8
 
	mty≥
;

1563 } 
	gBWL_POST_PACKED_STRUCT
;

1564 
dŸ11_rm_õ
 
	tdŸ11_rm_õ_t
;

1565 
	#DOT11_RM_IE_LEN
 5

	)

1568 
	#DOT11_RMREQ_MODE_PARALLEL
 1

	)

1569 
	#DOT11_RMREQ_MODE_ENABLE
 2

	)

1570 
	#DOT11_RMREQ_MODE_REQUEST
 4

	)

1571 
	#DOT11_RMREQ_MODE_REPORT
 8

	)

1572 
	#DOT11_RMREQ_MODE_DURMAND
 0x10

	)

1575 
	#DOT11_RMREP_MODE_LATE
 1

	)

1576 
	#DOT11_RMREP_MODE_INCAPABLE
 2

	)

1577 
	#DOT11_RMREP_MODE_REFUSED
 4

	)

1579 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_rmªq_b˙
 {

1580 
uöt8
 
	mid
;

1581 
uöt8
 
	mÀn
;

1582 
uöt8
 
	mtokí
;

1583 
uöt8
 
	mmode
;

1584 
uöt8
 
	mty≥
;

1585 
uöt8
 
	mªg
;

1586 
uöt8
 
	mch™√l
;

1587 
uöt16
 
	möãrvÆ
;

1588 
uöt16
 
	mduøti⁄
;

1589 
uöt8
 
	mb˙_mode
;

1590 
ëhî_addr
 
	mbssid
;

1591 } 
	gBWL_POST_PACKED_STRUCT
;

1592 
dŸ11_rmªq_b˙
 
	tdŸ11_rmªq_b˙_t
;

1593 
	#DOT11_RMREQ_BCN_LEN
 18

	)

1595 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_rmªp_b˙
 {

1596 
uöt8
 
	mªg
;

1597 
uöt8
 
	mch™√l
;

1598 
uöt32
 
	m°¨âime
[2];

1599 
uöt16
 
	mduøti⁄
;

1600 
uöt8
 
	m‰ame_öfo
;

1601 
uöt8
 
	mr˝i
;

1602 
uöt8
 
	mr¢i
;

1603 
ëhî_addr
 
	mbssid
;

1604 
uöt8
 
	m™ã¬a_id
;

1605 
uöt32
 
	m∑ª¡_tsf
;

1606 } 
	gBWL_POST_PACKED_STRUCT
;

1607 
dŸ11_rmªp_b˙
 
	tdŸ11_rmªp_b˙_t
;

1608 
	#DOT11_RMREP_BCN_LEN
 26

	)

1611 
	#DOT11_RMREQ_BCN_PASSIVE
 0

	)

1612 
	#DOT11_RMREQ_BCN_ACTIVE
 1

	)

1613 
	#DOT11_RMREQ_BCN_TABLE
 2

	)

1616 
	#DOT11_RMREQ_BCN_SSID_ID
 0

	)

1617 
	#DOT11_RMREQ_BCN_REPINFO_ID
 1

	)

1618 
	#DOT11_RMREQ_BCN_REPDET_ID
 2

	)

1619 
	#DOT11_RMREQ_BCN_REQUEST_ID
 10

	)

1620 
	#DOT11_RMREQ_BCN_APCHREP_ID
 51

	)

1623 
	#DOT11_RMREQ_BCN_REPDET_FIXED
 0

	)

1624 
	#DOT11_RMREQ_BCN_REPDET_REQUEST
 1

	)

1625 
	#DOT11_RMREQ_BCN_REPDET_ALL
 2

	)

1628 
	#DOT11_RMREP_BCN_FRM_BODY
 1

	)

1631 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_rmªp_nbr
 {

1632 
ëhî_addr
 
	mbssid
;

1633 
uöt32
 
	mbssid_öfo
;

1634 
uöt8
 
	mªg
;

1635 
uöt8
 
	mch™√l
;

1636 
uöt8
 
	mphyty≥
;

1637 
uch¨
 
	msub_ñemíts
[1];

1638 } 
	gBWL_POST_PACKED_STRUCT
;

1639 
dŸ11_rmªp_nbr
 
	tdŸ11_rmªp_nbr_t
;

1640 
	#DOT11_RMREP_NBR_LEN
 13

	)

1643 
	#DOT11_BSSTYPE_INFRASTRUCTURE
 0

	)

1644 
	#DOT11_BSSTYPE_INDEPENDENT
 1

	)

1645 
	#DOT11_BSSTYPE_ANY
 2

	)

1646 
	#DOT11_SCANTYPE_ACTIVE
 0

	)

1647 
	#DOT11_SCANTYPE_PASSIVE
 1

	)

1650 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_lmªq
 {

1651 
uöt8
 
	mˇãg‹y
;

1652 
uöt8
 
	ma˘i⁄
;

1653 
uöt8
 
	mtokí
;

1654 
uöt8
 
	mtxpwr
;

1655 
uöt8
 
	mmaxtxpwr
;

1656 } 
	gBWL_POST_PACKED_STRUCT
;

1657 
dŸ11_lmªq
 
	tdŸ11_lmªq_t
;

1658 
	#DOT11_LMREQ_LEN
 5

	)

1660 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_lmªp
 {

1661 
uöt8
 
	mˇãg‹y
;

1662 
uöt8
 
	ma˘i⁄
;

1663 
uöt8
 
	mtokí
;

1664 
dŸ11_çc_ªp_t
 
	mçc
;

1665 
uöt8
 
	mrx™t
;

1666 
uöt8
 
	mtx™t
;

1667 
uöt8
 
	mr˝i
;

1668 
uöt8
 
	mr¢i
;

1669 } 
	gBWL_POST_PACKED_STRUCT
;

1670 
dŸ11_lmªp
 
	tdŸ11_lmªp_t
;

1671 
	#DOT11_LMREP_LEN
 11

	)

1674 
	#PREN_PREAMBLE
 24

	)

1675 
	#PREN_MM_EXT
 12

	)

1676 
	#PREN_PREAMBLE_EXT
 4

	)

1679 
	#RIFS_11N_TIME
 2

	)

1685 
	#HT_SIG1_MCS_MASK
 0x00007F

	)

1686 
	#HT_SIG1_CBW
 0x000080

	)

1687 
	#HT_SIG1_HT_LENGTH
 0xFFFF00

	)

1690 
	#HT_SIG2_SMOOTHING
 0x000001

	)

1691 
	#HT_SIG2_NOT_SOUNDING
 0x000002

	)

1692 
	#HT_SIG2_RESERVED
 0x000004

	)

1693 
	#HT_SIG2_AGGREGATION
 0x000008

	)

1694 
	#HT_SIG2_STBC_MASK
 0x000030

	)

1695 
	#HT_SIG2_STBC_SHIFT
 4

	)

1696 
	#HT_SIG2_FEC_CODING
 0x000040

	)

1697 
	#HT_SIG2_SHORT_GI
 0x000080

	)

1698 
	#HT_SIG2_ESS_MASK
 0x000300

	)

1699 
	#HT_SIG2_ESS_SHIFT
 8

	)

1700 
	#HT_SIG2_CRC
 0x03FC00

	)

1701 
	#HT_SIG2_TAIL
 0x1C0000

	)

1704 
	#APHY_SLOT_TIME
 9

	)

1705 
	#APHY_SIFS_TIME
 16

	)

1706 
	#APHY_DIFS_TIME
 (
APHY_SIFS_TIME
 + (2 * 
APHY_SLOT_TIME
)Ë

	)

1707 
	#APHY_PREAMBLE_TIME
 16

	)

1708 
	#APHY_SIGNAL_TIME
 4

	)

1709 
	#APHY_SYMBOL_TIME
 4

	)

1710 
	#APHY_SERVICE_NBITS
 16

	)

1711 
	#APHY_TAIL_NBITS
 6

	)

1712 
	#APHY_CWMIN
 15

	)

1715 
	#BPHY_SLOT_TIME
 20

	)

1716 
	#BPHY_SIFS_TIME
 10

	)

1717 
	#BPHY_DIFS_TIME
 50

	)

1718 
	#BPHY_PLCP_TIME
 192

	)

1719 
	#BPHY_PLCP_SHORT_TIME
 96

	)

1720 
	#BPHY_CWMIN
 31

	)

1723 
	#DOT11_OFDM_SIGNAL_EXTENSION
 6

	)

1725 
	#PHY_CWMAX
 1023

	)

1727 
	#DOT11_MAXNUMFRAGS
 16

	)

1731 
	tvht_group_id_t
;

1735 
	#VHT_SIGA1_CONST_MASK
 0x800004

	)

1737 
	#VHT_SIGA1_20MHZ_VAL
 0x000000

	)

1738 
	#VHT_SIGA1_40MHZ_VAL
 0x000001

	)

1739 
	#VHT_SIGA1_80MHZ_VAL
 0x000002

	)

1740 
	#VHT_SIGA1_160MHZ_VAL
 0x000003

	)

1742 
	#VHT_SIGA1_STBC
 0x000008

	)

1744 
	#VHT_SIGA1_GID_MAX_GID
 0x3f

	)

1745 
	#VHT_SIGA1_GID_SHIFT
 4

	)

1746 
	#VHT_SIGA1_GID_TO_AP
 0x00

	)

1747 
	#VHT_SIGA1_GID_NOT_TO_AP
 0x3f

	)

1749 
	#VHT_SIGA1_NSTS_SHIFT
 10

	)

1750 
	#VHT_SIGA1_NSTS_SHIFT_MASK_USER0
 0x001C00

	)

1752 
	#VHT_SIGA1_PARTIAL_AID_SHIFT
 13

	)

1755 
	#VHT_SIGA2_GI_NONE
 0x000000

	)

1756 
	#VHT_SIGA2_GI_SHORT
 0x000001

	)

1757 
	#VHT_SIGA2_GI_W_MOD10
 0x000002

	)

1758 
	#VHT_SIGA2_CODING_LDPC
 0x000004

	)

1759 
	#VHT_SIGA2_BEAMFORM_ENABLE
 0x000100

	)

1760 
	#VHT_SIGA2_MCS_SHIFT
 4

	)

1762 
	#VHT_SIGA2_B9_RESERVED
 0x000200

	)

1763 
	#VHT_SIGA2_TAIL_MASK
 0xfc0000

	)

1764 
	#VHT_SIGA2_TAIL_VALUE
 0x000000

	)

1766 
	#VHT_SIGA2_SVC_BITS
 16

	)

1767 
	#VHT_SIGA2_TAIL_BITS
 6

	)

1771 
	sd11˙t
 {

1772 
uöt32
 
	mtx‰ag
;

1773 
uöt32
 
	mtxmu…i
;

1774 
uöt32
 
	mtxÁû
;

1775 
uöt32
 
	mtxªåy
;

1776 
uöt32
 
	mtxªåõ
;

1777 
uöt32
 
	mrxdup
;

1778 
uöt32
 
	mtxπs
;

1779 
uöt32
 
	mtxno˘s
;

1780 
uöt32
 
	mtxnﬂck
;

1781 
uöt32
 
	mrx‰ag
;

1782 
uöt32
 
	mrxmu…i
;

1783 
uöt32
 
	mrx¸c
;

1784 
uöt32
 
	mtx‰m¢t
;

1785 
uöt32
 
	mrxundec
;

1786 } 
	td11˙t_t
;

1789 
	#BRCM_PROP_OUI
 "\x00\x90\x4C"

	)

1793 
	#BRCM_OUI
 "\x00\x10\x18"

	)

1796 
BWL_PRE_PACKED_STRUCT
 
	sbrcm_õ
 {

1797 
uöt8
 
	mid
;

1798 
uöt8
 
	mÀn
;

1799 
uöt8
 
	moui
[3];

1800 
uöt8
 
	mvî
;

1801 
uöt8
 
	massoc
;

1802 
uöt8
 
	mÊags
;

1803 
uöt8
 
	mÊags1
;

1804 
uöt16
 
	mamsdu_mtu_¥ef
;

1805 } 
	gBWL_POST_PACKED_STRUCT
;

1806 
brcm_õ
 
	tbrcm_õ_t
;

1807 
	#BRCM_IE_LEN
 11

	)

1808 
	#BRCM_IE_VER
 2

	)

1809 
	#BRCM_IE_LEGACY_AES_VER
 1

	)

1812 
	#BRF_LZWDS
 0x4

	)

1813 
	#BRF_BLOCKACK
 0x8

	)

1816 
	#BRF1_AMSDU
 0x1

	)

1817 
	#BRF1_WMEPS
 0x4

	)

1818 
	#BRF1_PSOFIX
 0x8

	)

1819 
	#BRF1_RX_LARGE_AGG
 0x10

	)

1820 
	#BRF1_RFAWARE_DCS
 0x20

	)

1821 
	#BRF1_SOFTAP
 0x40

	)

1824 
BWL_PRE_PACKED_STRUCT
 
	svndr_õ
 {

1825 
uch¨
 
	mid
;

1826 
uch¨
 
	mÀn
;

1827 
uch¨
 
	moui
 [3];

1828 
uch¨
 
	md©a
 [1];

1829 } 
	gBWL_POST_PACKED_STRUCT
;

1830 
vndr_õ
 
	tvndr_õ_t
;

1832 
	#VNDR_IE_HDR_LEN
 2

	)

1833 
	#VNDR_IE_MIN_LEN
 3

	)

1834 
	#VNDR_IE_FIXED_LEN
 (
VNDR_IE_HDR_LEN
 + 
VNDR_IE_MIN_LEN
)

	)

1835 
	#VNDR_IE_MAX_LEN
 256

	)

1838 
	#MCSSET_LEN
 16

	)

1839 
	#MAX_MCS_NUM
 (128Ë

	)

1841 
BWL_PRE_PACKED_STRUCT
 
	sht_ˇp_õ
 {

1842 
uöt16
 
	mˇp
;

1843 
uöt8
 
	m∑øms
;

1844 
uöt8
 
	msuµ_mcs
[
MCSSET_LEN
];

1845 
uöt16
 
	mext_htˇp
;

1846 
uöt32
 
	mtxbf_ˇp
;

1847 
uöt8
 
	mas_ˇp
;

1848 } 
	gBWL_POST_PACKED_STRUCT
;

1849 
ht_ˇp_õ
 
	tht_ˇp_õ_t
;

1853 
BWL_PRE_PACKED_STRUCT
 
	sht_¥›_ˇp_õ
 {

1854 
uöt8
 
	mid
;

1855 
uöt8
 
	mÀn
;

1856 
uöt8
 
	moui
[3];

1857 
uöt8
 
	mty≥
;

1858 
ht_ˇp_õ_t
 
	mˇp_õ
;

1859 } 
	gBWL_POST_PACKED_STRUCT
;

1860 
ht_¥›_ˇp_õ
 
	tht_¥›_ˇp_õ_t
;

1862 
	#HT_PROP_IE_OVERHEAD
 4

	)

1863 
	#HT_CAP_IE_LEN
 26

	)

1864 
	#HT_CAP_IE_TYPE
 51

	)

1866 
	#HT_CAP_LDPC_CODING
 0x0001

	)

1867 
	#HT_CAP_40MHZ
 0x0002

	)

1868 
	#HT_CAP_MIMO_PS_MASK
 0x000C

	)

1869 
	#HT_CAP_MIMO_PS_SHIFT
 0x0002

	)

1870 
	#HT_CAP_MIMO_PS_OFF
 0x0003

	)

1871 
	#HT_CAP_MIMO_PS_RTS
 0x0001

	)

1872 
	#HT_CAP_MIMO_PS_ON
 0x0000

	)

1873 
	#HT_CAP_GF
 0x0010

	)

1874 
	#HT_CAP_SHORT_GI_20
 0x0020

	)

1875 
	#HT_CAP_SHORT_GI_40
 0x0040

	)

1876 
	#HT_CAP_TX_STBC
 0x0080

	)

1877 
	#HT_CAP_RX_STBC_MASK
 0x0300

	)

1878 
	#HT_CAP_RX_STBC_SHIFT
 8

	)

1879 
	#HT_CAP_DELAYED_BA
 0x0400

	)

1880 
	#HT_CAP_MAX_AMSDU
 0x0800

	)

1882 
	#HT_CAP_DSSS_CCK
 0x1000

	)

1883 
	#HT_CAP_PSMP
 0x2000

	)

1884 
	#HT_CAP_40MHZ_INTOLERANT
 0x4000

	)

1885 
	#HT_CAP_LSIG_TXOP
 0x8000

	)

1887 
	#HT_CAP_RX_STBC_NO
 0x0

	)

1888 
	#HT_CAP_RX_STBC_ONE_STREAM
 0x1

	)

1889 
	#HT_CAP_RX_STBC_TWO_STREAM
 0x2

	)

1890 
	#HT_CAP_RX_STBC_THREE_STREAM
 0x3

	)

1892 
	#VHT_MAX_MPDU
 11454

	)

1893 
	#VHT_MPDU_MSDU_DELTA
 56

	)

1895 
	#VHT_MAX_AMSDU
 (
VHT_MAX_MPDU
 - 
VHT_MPDU_MSDU_DELTA
)

	)

1897 
	#HT_MAX_AMSDU
 7935

	)

1898 
	#HT_MIN_AMSDU
 3835

	)

1900 
	#HT_PARAMS_RX_FACTOR_MASK
 0x03

	)

1901 
	#HT_PARAMS_DENSITY_MASK
 0x1C

	)

1902 
	#HT_PARAMS_DENSITY_SHIFT
 2

	)

1905 
	#AMPDU_MAX_MPDU_DENSITY
 7

	)

1906 
	#AMPDU_DENSITY_NONE
 0

	)

1907 
	#AMPDU_DENSITY_1ovî4_US
 1

	)

1908 
	#AMPDU_DENSITY_1ovî2_US
 2

	)

1909 
	#AMPDU_DENSITY_1_US
 3

	)

1910 
	#AMPDU_DENSITY_2_US
 4

	)

1911 
	#AMPDU_DENSITY_4_US
 5

	)

1912 
	#AMPDU_DENSITY_8_US
 6

	)

1913 
	#AMPDU_DENSITY_16_US
 7

	)

1914 
	#AMPDU_RX_FACTOR_8K
 0

	)

1915 
	#AMPDU_RX_FACTOR_16K
 1

	)

1916 
	#AMPDU_RX_FACTOR_32K
 2

	)

1917 
	#AMPDU_RX_FACTOR_64K
 3

	)

1918 
	#AMPDU_RX_FACTOR_BASE
 8*1024

	)

1920 
	#AMPDU_DELIMITER_LEN
 4

	)

1921 
	#AMPDU_DELIMITER_LEN_MAX
 63

	)

1923 
	#HT_CAP_EXT_PCO
 0x0001

	)

1924 
	#HT_CAP_EXT_PCO_TTIME_MASK
 0x0006

	)

1925 
	#HT_CAP_EXT_PCO_TTIME_SHIFT
 1

	)

1926 
	#HT_CAP_EXT_MCS_FEEDBACK_MASK
 0x0300

	)

1927 
	#HT_CAP_EXT_MCS_FEEDBACK_SHIFT
 8

	)

1928 
	#HT_CAP_EXT_HTC
 0x0400

	)

1929 
	#HT_CAP_EXT_RD_RESP
 0x0800

	)

1931 
BWL_PRE_PACKED_STRUCT
 
	sht_add_õ
 {

1932 
uöt8
 
	m˘l_ch
;

1933 
uöt8
 
	mbyã1
;

1934 
uöt16
 
	m›mode
;

1935 
uöt16
 
	mmisc_bôs
;

1936 
uöt8
 
	mbasic_mcs
[
MCSSET_LEN
];

1937 } 
	gBWL_POST_PACKED_STRUCT
;

1938 
ht_add_õ
 
	tht_add_õ_t
;

1942 
BWL_PRE_PACKED_STRUCT
 
	sht_¥›_add_õ
 {

1943 
uöt8
 
	mid
;

1944 
uöt8
 
	mÀn
;

1945 
uöt8
 
	moui
[3];

1946 
uöt8
 
	mty≥
;

1947 
ht_add_õ_t
 
	madd_õ
;

1948 } 
	gBWL_POST_PACKED_STRUCT
;

1949 
ht_¥›_add_õ
 
	tht_¥›_add_õ_t
;

1951 
	#HT_ADD_IE_LEN
 22

	)

1952 
	#HT_ADD_IE_TYPE
 52

	)

1955 
	#HT_BW_ANY
 0x04

	)

1956 
	#HT_RIFS_PERMITTED
 0x08

	)

1959 
	#HT_OPMODE_MASK
 0x0003

	)

1960 
	#HT_OPMODE_SHIFT
 0

	)

1961 
	#HT_OPMODE_PURE
 0x0000

	)

1962 
	#HT_OPMODE_OPTIONAL
 0x0001

	)

1963 
	#HT_OPMODE_HT20IN40
 0x0002

	)

1964 
	#HT_OPMODE_MIXED
 0x0003

	)

1965 
	#HT_OPMODE_NONGF
 0x0004

	)

1966 
	#DOT11N_TXBURST
 0x0008

	)

1967 
	#DOT11N_OBSS_NONHT
 0x0010

	)

1970 
	#HT_BASIC_STBC_MCS
 0x007‡

	)

1971 
	#HT_DUAL_STBC_PROT
 0x0080

	)

1972 
	#HT_SECOND_BCN
 0x0100

	)

1973 
	#HT_LSIG_TXOP
 0x0200

	)

1974 
	#HT_PCO_ACTIVE
 0x0400

	)

1975 
	#HT_PCO_PHASE
 0x0800

	)

1976 
	#HT_DUALCTS_PROTECTION
 0x0080

	)

1979 
	#DOT11N_2G_TXBURST_LIMIT
 6160

	)

1980 
	#DOT11N_5G_TXBURST_LIMIT
 3080

	)

1983 
	#GET_HT_OPMODE
(
add_õ
Ë((
	`…oh16_ua
(&add_õ->
›mode
Ë& 
HT_OPMODE_MASK
) \

1984 >> 
HT_OPMODE_SHIFT
)

	)

1985 
	#HT_MIXEDMODE_PRESENT
(
add_õ
Ë((
	`…oh16_ua
(&add_õ->
›mode
Ë& 
HT_OPMODE_MASK
) \

1986 =
HT_OPMODE_MIXED
Ë

	)

1987 
	#HT_HT20_PRESENT
(
add_õ
Ë((
	`…oh16_ua
(&add_õ->
›mode
Ë& 
HT_OPMODE_MASK
) \

1988 =
HT_OPMODE_HT20IN40
Ë

	)

1989 
	#HT_OPTIONAL_PRESENT
(
add_õ
Ë((
	`…oh16_ua
(&add_õ->
›mode
Ë& 
HT_OPMODE_MASK
) \

1990 =
HT_OPMODE_OPTIONAL
Ë

	)

1991 
	#HT_USE_PROTECTION
(
add_õ
Ë(
	`HT_HT20_PRESENT
((add_ie)) || \

1992 
	`HT_MIXEDMODE_PRESENT
((
add_õ
))Ë

	)

1993 
	#HT_NONGF_PRESENT
(
add_õ
Ë((
	`…oh16_ua
(&add_õ->
›mode
Ë& 
HT_OPMODE_NONGF
) \

1994 =
HT_OPMODE_NONGF
Ë

	)

1995 
	#DOT11N_TXBURST_PRESENT
(
add_õ
Ë((
	`…oh16_ua
(&add_õ->
›mode
Ë& 
DOT11N_TXBURST
) \

1996 =
DOT11N_TXBURST
Ë

	)

1997 
	#DOT11N_OBSS_NONHT_PRESENT
(
add_õ
Ë((
	`…oh16_ua
(&add_õ->
›mode
Ë& 
DOT11N_OBSS_NONHT
) \

1998 =
DOT11N_OBSS_NONHT
Ë

	)

2000 
BWL_PRE_PACKED_STRUCT
 
	sobss_∑øms
 {

2001 
uöt16
 
	m∑ssive_dwñl
;

2002 
uöt16
 
	ma˘ive_dwñl
;

2003 
uöt16
 
	mbss_widthsˇn_öãrvÆ
;

2004 
uöt16
 
	m∑ssive_tŸÆ
;

2005 
uöt16
 
	ma˘ive_tŸÆ
;

2006 
uöt16
 
	mch™width_å™sôi⁄_dly
;

2007 
uöt16
 
	ma˘ivôy_thªshﬁd
;

2008 } 
	gBWL_POST_PACKED_STRUCT
;

2009 
obss_∑øms
 
	tobss_∑øms_t
;

2011 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_obss_õ
 {

2012 
uöt8
 
	mid
;

2013 
uöt8
 
	mÀn
;

2014 
obss_∑øms_t
 
	mobss_∑øms
;

2015 } 
	gBWL_POST_PACKED_STRUCT
;

2016 
dŸ11_obss_õ
 
	tdŸ11_obss_õ_t
;

2017 
	#DOT11_OBSS_SCAN_IE_LEN
 (
obss_∑øms_t
Ë

	)

2020 
	#HT_CTRL_LA_TRQ
 0x00000002

	)

2021 
	#HT_CTRL_LA_MAI
 0x0000003C

	)

2022 
	#HT_CTRL_LA_MAI_SHIFT
 2

	)

2023 
	#HT_CTRL_LA_MAI_MRQ
 0x00000004

	)

2024 
	#HT_CTRL_LA_MAI_MSI
 0x00000038

	)

2025 
	#HT_CTRL_LA_MFSI
 0x000001C0

	)

2026 
	#HT_CTRL_LA_MFSI_SHIFT
 6

	)

2027 
	#HT_CTRL_LA_MFB_ASELC
 0x0000FE00

	)

2028 
	#HT_CTRL_LA_MFB_ASELC_SH
 9

	)

2029 
	#HT_CTRL_LA_ASELC_CMD
 0x00000C00

	)

2030 
	#HT_CTRL_LA_ASELC_DATA
 0x0000F000

	)

2031 
	#HT_CTRL_CAL_POS
 0x00030000

	)

2032 
	#HT_CTRL_CAL_SEQ
 0x000C0000

	)

2033 
	#HT_CTRL_CSI_STEERING
 0x00C00000

	)

2034 
	#HT_CTRL_CSI_STEER_SHIFT
 22

	)

2035 
	#HT_CTRL_CSI_STEER_NFB
 0

	)

2036 
	#HT_CTRL_CSI_STEER_CSI
 1

	)

2037 
	#HT_CTRL_CSI_STEER_NCOM
 2

	)

2038 
	#HT_CTRL_CSI_STEER_COM
 3

	)

2039 
	#HT_CTRL_NDP_ANNOUNCE
 0x01000000

	)

2040 
	#HT_CTRL_AC_CONSTRAINT
 0x40000000

	)

2041 
	#HT_CTRL_RDG_MOREPPDU
 0x80000000

	)

2043 
	#HT_OPMODE_OPTIONAL
 0x0001

	)

2044 
	#HT_OPMODE_HT20IN40
 0x0002

	)

2045 
	#HT_OPMODE_MIXED
 0x0003

	)

2046 
	#HT_OPMODE_NONGF
 0x0004

	)

2047 
	#DOT11N_TXBURST
 0x0008

	)

2048 
	#DOT11N_OBSS_NONHT
 0x0010

	)

2052 
BWL_PRE_PACKED_STRUCT
 
	svht_ˇp_õ
 {

2053 
uöt32
 
	mvht_ˇp_öfo
;

2055 
uöt16
 
	mrx_mcs_m≠
;

2056 
uöt16
 
	mrx_max_øã
;

2057 
uöt16
 
	mtx_mcs_m≠
;

2058 
uöt16
 
	mtx_max_øã
;

2059 } 
	gBWL_POST_PACKED_STRUCT
;

2060 
vht_ˇp_õ
 
	tvht_ˇp_õ_t
;

2062 
	#VHT_CAP_IE_LEN
 12

	)

2064 
	#VHT_CAP_INFO_MAX_MPDU_LEN_MASK
 0x00000003

	)

2065 
	#VHT_CAP_INFO_SUPP_CHAN_WIDTH_MASK
 0x0000000c

	)

2066 
	#VHT_CAP_INFO_LDPC
 0x00000010

	)

2067 
	#VHT_CAP_INFO_SGI_80MHZ
 0x00000020

	)

2069 
	#VHT_CAP_INFO_SGI_160MHZ
 0x00000040

	)

2070 
	#VHT_CAP_INFO_TX_STBC
 0x00000080

	)

2072 
	#VHT_CAP_INFO_RX_STBC_MASK
 0x00000700

	)

2073 
	#VHT_CAP_INFO_RX_STBC_SHIFT
 8

	)

2074 
	#VHT_CAP_INFO_SU_BEAMFMR
 0x00000800

	)

2075 
	#VHT_CAP_INFO_SU_BEAMFMEE
 0x00001000

	)

2076 
	#VHT_CAP_INFO_NUM_BMFMR_ANT_MASK
 0x0000e000

	)

2077 
	#VHT_CAP_INFO_NUM_BMFMR_ANT_SHIFT
 13

	)

2079 
	#VHT_CAP_INFO_NUM_SOUNDING_DIM_MASK
 0x00070000

	)

2080 
	#VHT_CAP_INFO_NUM_SOUNDING_DIM_SHIFT
 16

	)

2081 
	#VHT_CAP_INFO_MU_BEAMFMR
 0x00080000

	)

2082 
	#VHT_CAP_INFO_MU_BEAMFMEE
 0x00100000

	)

2083 
	#VHT_CAP_INFO_TXOPPS
 0x00200000

	)

2084 
	#VHT_CAP_INFO_HTCVHT
 0x00400000

	)

2085 
	#VHT_CAP_INFO_AMPDU_MAXLEN_EXP_MASK
 0x03800000

	)

2086 
	#VHT_CAP_INFO_AMPDU_MAXLEN_EXP_SHIFT
 23

	)

2088 
	#VHT_CAP_INFO_LINK_ADAPT_CAP_MASK
 0x0c000000

	)

2089 
	#VHT_CAP_INFO_LINK_ADAPT_CAP_SHIFT
 26

	)

2092 
	#VHT_CAP_SUPP_MCS_RX_HIGHEST_RATE_MASK
 0x1fff

	)

2093 
	#VHT_CAP_SUPP_MCS_RX_HIGHEST_RATE_SHIFT
 0

	)

2095 
	#VHT_CAP_SUPP_MCS_TX_HIGHEST_RATE_MASK
 0x1fff

	)

2096 
	#VHT_CAP_SUPP_MCS_TX_HIGHEST_RATE_SHIFT
 0

	)

2098 
	#VHT_CAP_MCS_MAP_0_7
 0

	)

2099 
	#VHT_CAP_MCS_MAP_0_8
 1

	)

2100 
	#VHT_CAP_MCS_MAP_0_9
 2

	)

2101 
	#VHT_CAP_MCS_MAP_NONE
 3

	)

2103 
	#VHT_CAP_MCS_MAP_NSS_MAX
 8

	)

2106 
	evht_ˇp_ch™_width
 {

2107 
	mVHT_CAP_CHAN_WIDTH_20_40
 = 0x00,

2108 
	mVHT_CAP_CHAN_WIDTH_80
 = 0x04,

2109 
	mVHT_CAP_CHAN_WIDTH_160
 = 0x08

2110 } 
	tvht_ˇp_ch™_width_t
;

2113 
	evht_ˇp_max_mpdu_Àn
 {

2114 
	mVHT_CAP_MPDU_MAX_4K
 = 0x00,

2115 
	mVHT_CAP_MPDU_MAX_8K
 = 0x01,

2116 
	mVHT_CAP_MPDU_MAX_11K
 = 0x02

2117 } 
	tvht_ˇp_max_mpdu_Àn_t
;

2120 
BWL_PRE_PACKED_STRUCT
 
	svht_›_õ
 {

2121 
uöt8
 
	mch™_width
;

2122 
uöt8
 
	mch™1
;

2123 
uöt8
 
	mch™2
;

2124 
uöt16
 
	msuµ_mcs
;

2125 } 
	gBWL_POST_PACKED_STRUCT
;

2126 
vht_›_õ
 
	tvht_›_õ_t
;

2128 
	#VHT_OP_IE_LEN
 5

	)

2130 
	evht_›_ch™_width
 {

2131 
	mVHT_OP_CHAN_WIDTH_20_40
 = 0,

2132 
	mVHT_OP_CHAN_WIDTH_80
 = 1,

2133 
	mVHT_OP_CHAN_WIDTH_160
 = 2,

2134 
	mVHT_OP_CHAN_WIDTH_80_80
 = 3

2135 } 
	tvht_›_ch™_width_t
;

2138 
	#VHT_MCS_MAP_GET_SS_IDX
(
nss
Ë((“ss)-1)*2)

	)

2139 
	#VHT_MCS_MAP_GET_MCS_PER_SS
(
nss
, 
mcsM≠
) \

2140 (((
mcsM≠
Ë>> 
	`VHT_MCS_MAP_GET_SS_IDX
(
nss
)Ë& 0x3)

	)

2141 
	#VHT_MCS_MAP_SET_MCS_PER_SS
(
nss
, 
numMcs
, 
mcsM≠
) \

2142 ((
mcsM≠
Ë|(((
numMcs
Ë& 0x3Ë<< 
	`VHT_MCS_MAP_GET_SS_IDX
(
nss
)))

	)

2145 
	#WPA_OUI
 "\x00\x50\xF2"

	)

2146 
	#WPA_OUI_LEN
 3

	)

2147 
	#WPA_OUI_TYPE
 1

	)

2148 
	#WPA_VERSION
 1

	)

2149 
	#WPA2_OUI
 "\x00\x0F\xAC"

	)

2150 
	#WPA2_OUI_LEN
 3

	)

2151 
	#WPA2_VERSION
 1

	)

2152 
	#WPA2_VERSION_LEN
 2

	)

2155 
	#WPS_OUI
 "\x00\x50\xF2"

	)

2156 
	#WPS_OUI_LEN
 3

	)

2157 
	#WPS_OUI_TYPE
 4

	)

2161 #ifde‡
P2P_IE_OVRD


2162 
	#WFA_OUI
 
MAC_OUI


	)

2164 
	#WFA_OUI
 "\x50\x6F\x9A"

	)

2166 
	#WFA_OUI_LEN
 3

	)

2167 #ifde‡
P2P_IE_OVRD


2168 
	#WFA_OUI_TYPE_P2P
 
MAC_OUI_TYPE_P2P


	)

2170 
	#WFA_OUI_TYPE_P2P
 9

	)

2173 
	#WFA_OUI_TYPE_TPC
 8

	)

2174 #ifde‡
WLTDLS


2175 
	#WFA_OUI_TYPE_WFD
 10

	)

2179 
	#RSN_AKM_NONE
 0

	)

2180 
	#RSN_AKM_UNSPECIFIED
 1

	)

2181 
	#RSN_AKM_PSK
 2

	)

2182 
	#RSN_AKM_FBT_1X
 3

	)

2183 
	#RSN_AKM_FBT_PSK
 4

	)

2184 
	#RSN_AKM_MFP_1X
 5

	)

2185 
	#RSN_AKM_MFP_PSK
 6

	)

2186 
	#RSN_AKM_TPK
 7

	)

2189 
	#DOT11_MAX_DEFAULT_KEYS
 4

	)

2190 
	#DOT11_MAX_KEY_SIZE
 32

	)

2191 
	#DOT11_MAX_IV_SIZE
 16

	)

2192 
	#DOT11_EXT_IV_FLAG
 (1<<5Ë

	)

2193 
	#DOT11_WPA_KEY_RSC_LEN
 8

	)

2195 
	#WEP1_KEY_SIZE
 5

	)

2196 
	#WEP1_KEY_HEX_SIZE
 10

	)

2197 
	#WEP128_KEY_SIZE
 13

	)

2198 
	#WEP128_KEY_HEX_SIZE
 26

	)

2199 
	#TKIP_MIC_SIZE
 8

	)

2200 
	#TKIP_EOM_SIZE
 7

	)

2201 
	#TKIP_EOM_FLAG
 0x5®

	)

2202 
	#TKIP_KEY_SIZE
 32

	)

2203 
	#TKIP_MIC_AUTH_TX
 16

	)

2204 
	#TKIP_MIC_AUTH_RX
 24

	)

2205 
	#TKIP_MIC_SUP_RX
 
TKIP_MIC_AUTH_TX


	)

2206 
	#TKIP_MIC_SUP_TX
 
TKIP_MIC_AUTH_RX


	)

2207 
	#AES_KEY_SIZE
 16

	)

2208 
	#AES_MIC_SIZE
 8

	)

2209 
	#BIP_KEY_SIZE
 16

	)

2212 
	#WCN_OUI
 "\x00\x50\xf2"

	)

2213 
	#WCN_TYPE
 4

	)

2219 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_mdid_õ
 {

2220 
uöt8
 
	mid
;

2221 
uöt8
 
	mÀn
;

2222 
uöt16
 
	mmdid
;

2223 
uöt8
 
	mˇp
;

2224 } 
	gBWL_POST_PACKED_STRUCT
;

2225 
dŸ11_mdid_õ
 
	tdŸ11_mdid_õ_t
;

2227 
	#FBT_MDID_CAP_OVERDS
 0x01

	)

2228 
	#FBT_MDID_CAP_RRP
 0x02

	)

2231 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_·_õ
 {

2232 
uöt8
 
	mid
;

2233 
uöt8
 
	mÀn
;

2234 
uöt16
 
	mmic_c⁄åﬁ
;

2235 
uöt8
 
	mmic
[16];

2236 
uöt8
 
	m™⁄˚
[32];

2237 
uöt8
 
	m¢⁄˚
[32];

2238 } 
	gBWL_POST_PACKED_STRUCT
;

2239 
dŸ11_·_õ
 
	tdŸ11_·_õ_t
;

2241 
	#TIE_TYPE_RESERVED
 0

	)

2242 
	#TIE_TYPE_REASSOC_DEADLINE
 1

	)

2243 
	#TIE_TYPE_KEY_LIEFTIME
 2

	)

2244 
	#TIE_TYPE_ASSOC_COMEBACK
 3

	)

2245 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_timeout_õ
 {

2246 
uöt8
 
	mid
;

2247 
uöt8
 
	mÀn
;

2248 
uöt8
 
	mty≥
;

2249 
uöt32
 
	mvÆue
;

2250 } 
	gBWL_POST_PACKED_STRUCT
;

2251 
dŸ11_timeout_õ
 
	tdŸ11_timeout_õ_t
;

2255 
BWL_PRE_PACKED_STRUCT
 
	sdŸ11_gtk_õ
 {

2256 
uöt8
 
	mid
;

2257 
uöt8
 
	mÀn
;

2258 
uöt16
 
	mkey_öfo
;

2259 
uöt8
 
	mkey_Àn
;

2260 
uöt8
 
	mrsc
[8];

2261 
uöt8
 
	md©a
[1];

2262 } 
	gBWL_POST_PACKED_STRUCT
;

2263 
dŸ11_gtk_õ
 
	tdŸ11_gtk_õ_t
;

2265 
	#BSSID_INVALID
 "\x00\x00\x00\x00\x00\x00"

	)

2266 
	#BSSID_BROADCAST
 "\xFF\xFF\xFF\xFF\xFF\xFF"

	)

2270 
	#WMM_OUI
 "\x00\x50\xF2"

	)

2271 
	#WMM_OUI_LEN
 3

	)

2272 
	#WMM_OUI_TYPE
 2

	)

2273 
	#WMM_VERSION
 1

	)

2274 
	#WMM_VERSION_LEN
 1

	)

2277 
	#WMM_OUI_SUBTYPE_PARAMETER
 1

	)

2278 
	#WMM_PARAMETER_IE_LEN
 24

	)

2281 
BWL_PRE_PACKED_STRUCT
 
	slök_id_õ
 {

2282 
uöt8
 
	mid
;

2283 
uöt8
 
	mÀn
;

2284 
ëhî_addr
 
	mbssid
;

2285 
ëhî_addr
 
	mtdls_öô_mac
;

2286 
ëhî_addr
 
	mtdls_ª•_mac
;

2287 } 
	gBWL_POST_PACKED_STRUCT
;

2288 
lök_id_õ
 
	tlök_id_õ_t
;

2289 
	#TDLS_LINK_ID_IE_LEN
 18

	)

2292 
BWL_PRE_PACKED_STRUCT
 
	swakeup_sch_õ
 {

2293 
uöt8
 
	mid
;

2294 
uöt8
 
	mÀn
;

2295 
uöt32
 
	moff£t
;

2296 
uöt32
 
	möãrvÆ
;

2297 
uöt32
 
	mawake_wö_¶Ÿs
;

2298 
uöt32
 
	mmax_wake_wö
;

2299 
uöt16
 
	midÀ_˙t
;

2300 } 
	gBWL_POST_PACKED_STRUCT
;

2301 
wakeup_sch_õ
 
	twakeup_sch_õ_t
;

2302 
	#TDLS_WAKEUP_SCH_IE_LEN
 18

	)

2305 
BWL_PRE_PACKED_STRUCT
 
	sch™√l_swôch_timög_õ
 {

2306 
uöt8
 
	mid
;

2307 
uöt8
 
	mÀn
;

2308 
uöt16
 
	mswôch_time
;

2309 
uöt16
 
	mswôch_timeout
;

2310 } 
	gBWL_POST_PACKED_STRUCT
;

2311 
ch™√l_swôch_timög_õ
 
	tch™√l_swôch_timög_õ_t
;

2312 
	#TDLS_CHANNEL_SWITCH_TIMING_IE_LEN
 4

	)

2315 
BWL_PRE_PACKED_STRUCT
 
	s±i_c⁄åﬁ_õ
 {

2316 
uöt8
 
	mid
;

2317 
uöt8
 
	mÀn
;

2318 
uöt8
 
	mtid
;

2319 
uöt16
 
	m£q_c⁄åﬁ
;

2320 } 
	gBWL_POST_PACKED_STRUCT
;

2321 
±i_c⁄åﬁ_õ
 
	t±i_c⁄åﬁ_õ_t
;

2322 
	#TDLS_PTI_CONTROL_IE_LEN
 3

	)

2325 
BWL_PRE_PACKED_STRUCT
 
	spu_buf„r_°©us_õ
 {

2326 
uöt8
 
	mid
;

2327 
uöt8
 
	mÀn
;

2328 
uöt8
 
	m°©us
;

2329 } 
	gBWL_POST_PACKED_STRUCT
;

2330 
pu_buf„r_°©us_õ
 
	tpu_buf„r_°©us_õ_t
;

2331 
	#TDLS_PU_BUFFER_STATUS_IE_LEN
 1

	)

2332 
	#TDLS_PU_BUFFER_STATUS_AC_BK
 1

	)

2333 
	#TDLS_PU_BUFFER_STATUS_AC_BE
 2

	)

2334 
	#TDLS_PU_BUFFER_STATUS_AC_VI
 4

	)

2335 
	#TDLS_PU_BUFFER_STATUS_AC_VO
 8

	)

2338 
	~<∑cked_£˘i⁄_íd.h
>

	@include/proto/802.11_bta.h

27 #i‚de‡
_802_11_BTA_H_


28 
	#_802_11_BTA_H_


	)

30 
	#BT_SIG_SNAP_MPROT
 "\xAA\xAA\x03\x00\x19\x58"

	)

33 
	#BTA_PROT_L2CAP
 1

	)

34 
	#BTA_PROT_ACTIVITY_REPORT
 2

	)

35 
	#BTA_PROT_SECURITY
 3

	)

36 
	#BTA_PROT_LINK_SUPERVISION_REQUEST
 4

	)

37 
	#BTA_PROT_LINK_SUPERVISION_REPLY
 5

	)

40 
	#BTA_TYPE_ID_MAC_ADDRESS
 1

	)

41 
	#BTA_TYPE_ID_PREFERRED_CHANNELS
 2

	)

42 
	#BTA_TYPE_ID_CONNECTED_CHANNELS
 3

	)

43 
	#BTA_TYPE_ID_CAPABILITIES
 4

	)

44 
	#BTA_TYPE_ID_VERSION
 5

	)

	@include/proto/802.11e.h

27 #i‚de‡
_802_11e_H_


28 
	#_802_11e_H_


	)

30 #i‚de‡
_TYPEDEFS_H_


31 
	~<ty≥defs.h
>

35 
	~<∑cked_£˘i⁄_°¨t.h
>

39 
	#WME_TSPEC_HDR_LEN
 2

	)

40 
	#WME_TSPEC_BODY_OFF
 2

	)

42 
	#WME_CATEGORY_CODE_OFFSET
 0

	)

43 
	#WME_ACTION_CODE_OFFSET
 1

	)

44 
	#WME_TOKEN_CODE_OFFSET
 2

	)

45 
	#WME_STATUS_CODE_OFFSET
 3

	)

47 
BWL_PRE_PACKED_STRUCT
 
	stsöfo
 {

48 
uöt8
 
	mo˘ës
[3];

49 } 
	gBWL_POST_PACKED_STRUCT
;

51 
tsöfo
 
	ttsöfo_t
;

54 
BWL_PRE_PACKED_STRUCT
 
	st•ec
 {

55 
uöt8
 
	moui
[
DOT11_OUI_LEN
];

56 
uöt8
 
	mty≥
;

57 
uöt8
 
	msubty≥
;

58 
uöt8
 
	mvîsi⁄
;

59 
tsöfo_t
 
	mtsöfo
;

60 
uöt16
 
	mnom_msdu_size
;

61 
uöt16
 
	mmax_msdu_size
;

62 
uöt32
 
	mmö_§v_öãrvÆ
;

63 
uöt32
 
	mmax_§v_öãrvÆ
;

64 
uöt32
 
	möa˘ivôy_öãrvÆ
;

65 
uöt32
 
	msu•ísi⁄_öãrvÆ
;

66 
uöt32
 
	m§v_°¨t_time
;

67 
uöt32
 
	mmö_d©a_øã
;

68 
uöt32
 
	mmón_d©a_øã
;

69 
uöt32
 
	m≥ak_d©a_øã
;

70 
uöt32
 
	mmax_bur°_size
;

71 
uöt32
 
	mdñay_bound
;

72 
uöt32
 
	mmö_phy_øã
;

73 
uöt16
 
	msuΩlus_bw
;

74 
uöt16
 
	mmedium_time
;

75 } 
	tBWL_POST_PACKED_STRUCT
 
	tt•ec_t
;

77 
	#WME_TSPEC_LEN
 ((
t•ec_t
)Ë

	)

81 
	#TS_INFO_TID_SHIFT
 1

	)

82 
	#TS_INFO_TID_MASK
 (0x‡<< 
TS_INFO_TID_SHIFT
Ë

	)

83 
	#TS_INFO_CONTENTION_SHIFT
 7

	)

84 
	#TS_INFO_CONTENTION_MASK
 (0x1 << 
TS_INFO_CONTENTION_SHIFT
Ë

	)

85 
	#TS_INFO_DIRECTION_SHIFT
 5

	)

86 
	#TS_INFO_DIRECTION_MASK
 (0x3 << 
TS_INFO_DIRECTION_SHIFT
Ë

	)

87 
	#TS_INFO_PSB_SHIFT
 2

	)

88 
	#TS_INFO_PSB_MASK
 (1 << 
TS_INFO_PSB_SHIFT
Ë

	)

89 
	#TS_INFO_UPLINK
 (0 << 
TS_INFO_DIRECTION_SHIFT
Ë

	)

90 
	#TS_INFO_DOWNLINK
 (1 << 
TS_INFO_DIRECTION_SHIFT
Ë

	)

91 
	#TS_INFO_BIDIRECTIONAL
 (3 << 
TS_INFO_DIRECTION_SHIFT
Ë

	)

92 
	#TS_INFO_USER_PRIO_SHIFT
 3

	)

94 
	#TS_INFO_USER_PRIO_MASK
 (0x7 << 
TS_INFO_USER_PRIO_SHIFT
)

	)

97 
	#WLC_CAC_GET_TID
(
±
Ë(((’t).
o˘ës
[0]Ë& 
TS_INFO_TID_MASK
Ë>> 
TS_INFO_TID_SHIFT
)

	)

98 
	#WLC_CAC_GET_DIR
(
±
Ë(((’t).
o˘ës
[0]) & \

99 
TS_INFO_DIRECTION_MASK
Ë>> 
TS_INFO_DIRECTION_SHIFT
)

	)

100 
	#WLC_CAC_GET_PSB
(
±
Ë(((’t).
o˘ës
[1]Ë& 
TS_INFO_PSB_MASK
Ë>> 
TS_INFO_PSB_SHIFT
)

	)

101 
	#WLC_CAC_GET_USER_PRIO
(
±
Ë(((’t).
o˘ës
[1]) & \

102 
TS_INFO_USER_PRIO_MASK
Ë>> 
TS_INFO_USER_PRIO_SHIFT
)

	)

104 
	#WLC_CAC_SET_TID
(
±
, 
id
Ë(((’t).
o˘ës
[0]Ë& (~
TS_INFO_TID_MASK
)) | \

105 ((
id
Ë<< 
TS_INFO_TID_SHIFT
))

	)

106 
	#WLC_CAC_SET_USER_PRIO
(
±
, 
¥io
Ë(((’t).
o˘ës
[0]Ë& (~
TS_INFO_USER_PRIO_MASK
)) | \

107 ((
¥io
Ë<< 
TS_INFO_USER_PRIO_SHIFT
))

	)

110 
	#QBSS_LOAD_IE_LEN
 5

	)

111 
	#QBSS_LOAD_AAC_OFF
 3

	)

113 
	#CAC_ADDTS_RESP_TIMEOUT
 300

	)

116 
	#DOT11E_STATUS_ADMISSION_ACCEPTED
 0

	)

117 
	#DOT11E_STATUS_ADDTS_INVALID_PARAM
 1

	)

118 
	#DOT11E_STATUS_ADDTS_REFUSED_NSBW
 3

	)

119 
	#DOT11E_STATUS_ADDTS_REFUSED_AWHILE
 47

	)

122 
	#DOT11E_STATUS_QSTA_LEAVE_QBSS
 36

	)

123 
	#DOT11E_STATUS_END_TS
 37

	)

124 
	#DOT11E_STATUS_UNKNOWN_TS
 38

	)

125 
	#DOT11E_STATUS_QSTA_REQ_TIMEOUT
 39

	)

129 
	~<∑cked_£˘i⁄_íd.h
>

	@include/proto/802.1d.h

27 #i‚de‡
_802_1_D_


28 
	#_802_1_D_


	)

31 
	#PRIO_8021D_NONE
 2

	)

32 
	#PRIO_8021D_BK
 1

	)

33 
	#PRIO_8021D_BE
 0

	)

34 
	#PRIO_8021D_EE
 3

	)

35 
	#PRIO_8021D_CL
 4

	)

36 
	#PRIO_8021D_VI
 5

	)

37 
	#PRIO_8021D_VO
 6

	)

38 
	#PRIO_8021D_NC
 7

	)

39 
	#MAXPRIO
 7

	)

40 
	#NUMPRIO
 (
MAXPRIO
 + 1)

	)

42 
	#ALLPRIO
 -1

	)

47 
	#PRIO2PREC
(
¥io
) \

48 (((
¥io
Ë=
PRIO_8021D_NONE
 || (¥ioË=
PRIO_8021D_BE
Ë? (’rio^2)Ë: (¥io))

	)

	@include/proto/bcmeth.h

31 #i‚de‡
_BCMETH_H_


32 
	#_BCMETH_H_


	)

34 #i‚de‡
_TYPEDEFS_H_


35 
	~<ty≥defs.h
>

39 
	~<∑cked_£˘i⁄_°¨t.h
>

72 
	#BCMILCP_SUBTYPE_RATE
 1

	)

73 
	#BCMILCP_SUBTYPE_LINK
 2

	)

74 
	#BCMILCP_SUBTYPE_CSA
 3

	)

75 
	#BCMILCP_SUBTYPE_LARQ
 4

	)

76 
	#BCMILCP_SUBTYPE_VENDOR
 5

	)

77 
	#BCMILCP_SUBTYPE_FLH
 17

	)

79 
	#BCMILCP_SUBTYPE_VENDOR_LONG
 32769

	)

80 
	#BCMILCP_SUBTYPE_CERT
 32770

	)

81 
	#BCMILCP_SUBTYPE_SES
 32771

	)

84 
	#BCMILCP_BCM_SUBTYPE_RESERVED
 0

	)

85 
	#BCMILCP_BCM_SUBTYPE_EVENT
 1

	)

86 
	#BCMILCP_BCM_SUBTYPE_SES
 2

	)

92 
	#BCMILCP_BCM_SUBTYPE_DPT
 4

	)

94 
	#BCMILCP_BCM_SUBTYPEHDR_MINLENGTH
 8

	)

95 
	#BCMILCP_BCM_SUBTYPEHDR_VERSION
 0

	)

98 
BWL_PRE_PACKED_STRUCT
 
	sbcmëh_hdr


100 
uöt16
 
	msubty≥
;

101 
uöt16
 
	mÀngth
;

102 
uöt8
 
	mvîsi⁄
;

103 
uöt8
 
	moui
[3];

105 
uöt16
 
	mu§_subty≥
;

106 } 
	tBWL_POST_PACKED_STRUCT
 
	tbcmëh_hdr_t
;

110 
	~<∑cked_£˘i⁄_íd.h
>

	@include/proto/bcmevent.h

35 #i‚de‡
_BCMEVENT_H_


36 
	#_BCMEVENT_H_


	)

38 #i‚de‡
_TYPEDEFS_H_


39 
	~<ty≥defs.h
>

43 
	~<∑cked_£˘i⁄_°¨t.h
>

45 
	#BCM_EVENT_MSG_VERSION
 2

	)

46 
	#BCM_MSG_IFNAME_MAX
 16

	)

49 
	#WLC_EVENT_MSG_LINK
 0x01

	)

50 
	#WLC_EVENT_MSG_FLUSHTXQ
 0x02

	)

51 
	#WLC_EVENT_MSG_GROUP
 0x04

	)

52 
	#WLC_EVENT_MSG_UNKBSS
 0x08

	)

53 
	#WLC_EVENT_MSG_UNKIF
 0x10

	)

58 
BWL_PRE_PACKED_STRUCT
 struct

60 
uöt16
 
	mvîsi⁄
;

61 
uöt16
 
	mÊags
;

62 
uöt32
 
	mevít_ty≥
;

63 
uöt32
 
	m°©us
;

64 
uöt32
 
	mªas⁄
;

65 
uöt32
 
	mauth_ty≥
;

66 
uöt32
 
	md©Æí
;

67 
ëhî_addr
 
	maddr
;

68 
	mi‚ame
[
BCM_MSG_IFNAME_MAX
];

69 } 
	tBWL_POST_PACKED_STRUCT
 
	twl_evít_msg_v1_t
;

72 
BWL_PRE_PACKED_STRUCT
 struct

74 
uöt16
 
	mvîsi⁄
;

75 
uöt16
 
	mÊags
;

76 
uöt32
 
	mevít_ty≥
;

77 
uöt32
 
	m°©us
;

78 
uöt32
 
	mªas⁄
;

79 
uöt32
 
	mauth_ty≥
;

80 
uöt32
 
	md©Æí
;

81 
ëhî_addr
 
	maddr
;

82 
	mi‚ame
[
BCM_MSG_IFNAME_MAX
];

83 
uöt8
 
	mifidx
;

84 
uöt8
 
	mbsscfgidx
;

85 } 
	tBWL_POST_PACKED_STRUCT
 
	twl_evít_msg_t
;

88 
BWL_PRE_PACKED_STRUCT
 
	sbcm_evít
 {

89 
ëhî_hódî
 
	mëh
;

90 
bcmëh_hdr_t
 
	mbcm_hdr
;

91 
wl_evít_msg_t
 
	mevít
;

93 } 
	tBWL_POST_PACKED_STRUCT
 
	tbcm_evít_t
;

95 
	#BCM_MSG_LEN
 ((
bcm_evít_t
Ë- (
bcmëh_hdr_t
Ë- (
ëhî_hódî
))

	)

98 
	#WLC_E_SET_SSID
 0

	)

99 
	#WLC_E_JOIN
 1

	)

100 
	#WLC_E_START
 2

	)

101 
	#WLC_E_AUTH
 3

	)

102 
	#WLC_E_AUTH_IND
 4

	)

103 
	#WLC_E_DEAUTH
 5

	)

104 
	#WLC_E_DEAUTH_IND
 6

	)

105 
	#WLC_E_ASSOC
 7

	)

106 
	#WLC_E_ASSOC_IND
 8

	)

107 
	#WLC_E_REASSOC
 9

	)

108 
	#WLC_E_REASSOC_IND
 10

	)

109 
	#WLC_E_DISASSOC
 11

	)

110 
	#WLC_E_DISASSOC_IND
 12

	)

111 
	#WLC_E_QUIET_START
 13

	)

112 
	#WLC_E_QUIET_END
 14

	)

113 
	#WLC_E_BEACON_RX
 15

	)

114 
	#WLC_E_LINK
 16

	)

115 
	#WLC_E_MIC_ERROR
 17

	)

116 
	#WLC_E_NDIS_LINK
 18

	)

117 
	#WLC_E_ROAM
 19

	)

118 
	#WLC_E_TXFAIL
 20

	)

119 
	#WLC_E_PMKID_CACHE
 21

	)

120 
	#WLC_E_RETROGRADE_TSF
 22

	)

121 
	#WLC_E_PRUNE
 23

	)

122 
	#WLC_E_AUTOAUTH
 24

	)

123 
	#WLC_E_EAPOL_MSG
 25

	)

124 
	#WLC_E_SCAN_COMPLETE
 26

	)

125 
	#WLC_E_ADDTS_IND
 27

	)

126 
	#WLC_E_DELTS_IND
 28

	)

127 
	#WLC_E_BCNSENT_IND
 29

	)

128 
	#WLC_E_BCNRX_MSG
 30

	)

129 
	#WLC_E_BCNLOST_MSG
 31

	)

130 
	#WLC_E_ROAM_PREP
 32

	)

131 
	#WLC_E_PFN_NET_FOUND
 33

	)

132 
	#WLC_E_PFN_NET_LOST
 34

	)

133 
	#WLC_E_RESET_COMPLETE
 35

	)

134 
	#WLC_E_JOIN_START
 36

	)

135 
	#WLC_E_ROAM_START
 37

	)

136 
	#WLC_E_ASSOC_START
 38

	)

137 
	#WLC_E_IBSS_ASSOC
 39

	)

138 
	#WLC_E_RADIO
 40

	)

139 
	#WLC_E_PSM_WATCHDOG
 41

	)

140 
	#WLC_E_PROBREQ_MSG
 44

	)

141 
	#WLC_E_SCAN_CONFIRM_IND
 45

	)

142 
	#WLC_E_PSK_SUP
 46

	)

143 
	#WLC_E_COUNTRY_CODE_CHANGED
 47

	)

144 
	#WLC_E_EXCEEDED_MEDIUM_TIME
 48

	)

145 
	#WLC_E_ICV_ERROR
 49

	)

146 
	#WLC_E_UNICAST_DECODE_ERROR
 50

	)

147 
	#WLC_E_MULTICAST_DECODE_ERROR
 51

	)

148 
	#WLC_E_TRACE
 52

	)

149 #ifde‡
WLBTAMP


150 
	#WLC_E_BTA_HCI_EVENT
 53

	)

152 
	#WLC_E_IF
 54

	)

153 
	#WLC_E_P2P_DISC_LISTEN_COMPLETE
 55

	)

154 
	#WLC_E_RSSI
 56

	)

155 
	#WLC_E_PFN_SCAN_COMPLETE
 57

	)

156 
	#WLC_E_EXTLOG_MSG
 58

	)

157 
	#WLC_E_ACTION_FRAME
 59

	)

158 
	#WLC_E_ACTION_FRAME_COMPLETE
 60

	)

159 
	#WLC_E_PRE_ASSOC_IND
 61

	)

160 
	#WLC_E_PRE_REASSOC_IND
 62

	)

161 
	#WLC_E_CHANNEL_ADOPTED
 63

	)

162 
	#WLC_E_AP_STARTED
 64

	)

163 
	#WLC_E_DFS_AP_STOP
 65

	)

164 
	#WLC_E_DFS_AP_RESUME
 66

	)

165 
	#WLC_E_WAI_STA_EVENT
 67

	)

166 
	#WLC_E_WAI_MSG
 68

	)

167 
	#WLC_E_ESCAN_RESULT
 69

	)

168 
	#WLC_E_ACTION_FRAME_OFF_CHAN_COMPLETE
 70

	)

169 
	#WLC_E_PROBRESP_MSG
 71

	)

170 
	#WLC_E_P2P_PROBREQ_MSG
 72

	)

171 
	#WLC_E_DCS_REQUEST
 73

	)

173 
	#WLC_E_FIFO_CREDIT_MAP
 74

	)

175 
	#WLC_E_ACTION_FRAME_RX
 75

	)

178 
	#WLC_E_WAKE_EVENT
 76

	)

179 
	#WLC_E_RM_COMPLETE
 77

	)

180 
	#WLC_E_HTSFSYNC
 78

	)

181 
	#WLC_E_OVERLAY_REQ
 79

	)

182 
	#WLC_E_CSA_COMPLETE_IND
 80

	)

183 
	#WLC_E_EXCESS_PM_WAKE_EVENT
 81

	)

184 
	#WLC_E_PFN_SCAN_NONE
 82

	)

185 
	#WLC_E_PFN_SCAN_ALLGONE
 83

	)

186 
	#WLC_E_GTK_PLUMBED
 84

	)

187 
	#WLC_E_ASSOC_IND_NDIS
 85

	)

188 
	#WLC_E_REASSOC_IND_NDIS
 86

	)

189 
	#WLC_E_ASSOC_REQ_IE
 87

	)

190 
	#WLC_E_ASSOC_RESP_IE
 88

	)

191 
	#WLC_E_ASSOC_RECREATED
 89

	)

192 
	#WLC_E_ACTION_FRAME_RX_NDIS
 90

	)

193 
	#WLC_E_AUTH_REQ
 91

	)

194 
	#WLC_E_TDLS_PEER_EVENT
 92

	)

195 
	#WLC_E_SPEEDY_RECREATE_FAIL
 93

	)

196 
	#WLC_E_SERVICE_FOUND
 102

	)

197 
	#WLC_E_GAS_FRAGMENT_RX
 103

	)

198 
	#WLC_E_GAS_COMPLETE
 104

	)

199 
	#WLC_E_P2PO_ADD_DEVICE
 105

	)

200 
	#WLC_E_P2PO_DEL_DEVICE
 106

	)

201 
	#WLC_E_LAST
 107

	)

206 
uöt
 
	mevít
;

207 c⁄° *
	m«me
;

208 } 
	tbcmevít_«me_t
;

210 c⁄° 
bcmevít_«me_t
 
bcmevít_«mes
[];

211 c⁄° 
bcmevít_«mes_size
;

214 
	#WLC_E_STATUS_SUCCESS
 0

	)

215 
	#WLC_E_STATUS_FAIL
 1

	)

216 
	#WLC_E_STATUS_TIMEOUT
 2

	)

217 
	#WLC_E_STATUS_NO_NETWORKS
 3

	)

218 
	#WLC_E_STATUS_ABORT
 4

	)

219 
	#WLC_E_STATUS_NO_ACK
 5

	)

220 
	#WLC_E_STATUS_UNSOLICITED
 6

	)

221 
	#WLC_E_STATUS_ATTEMPT
 7

	)

222 
	#WLC_E_STATUS_PARTIAL
 8

	)

223 
	#WLC_E_STATUS_NEWSCAN
 9

	)

224 
	#WLC_E_STATUS_NEWASSOC
 10

	)

225 
	#WLC_E_STATUS_11HQUIET
 11

	)

226 
	#WLC_E_STATUS_SUPPRESS
 12

	)

227 
	#WLC_E_STATUS_NOCHANS
 13

	)

228 
	#WLC_E_STATUS_CS_ABORT
 15

	)

229 
	#WLC_E_STATUS_ERROR
 16

	)

232 
	#WLC_E_REASON_INITIAL_ASSOC
 0

	)

233 
	#WLC_E_REASON_LOW_RSSI
 1

	)

234 
	#WLC_E_REASON_DEAUTH
 2

	)

235 
	#WLC_E_REASON_DISASSOC
 3

	)

236 
	#WLC_E_REASON_BCNS_LOST
 4

	)

237 
	#WLC_E_REASON_MINTXRATE
 9

	)

238 
	#WLC_E_REASON_TXFAIL
 10

	)

241 
	#WLC_E_REASON_FAST_ROAM_FAILED
 5

	)

242 
	#WLC_E_REASON_DIRECTED_ROAM
 6

	)

243 
	#WLC_E_REASON_TSPEC_REJECTED
 7

	)

244 
	#WLC_E_REASON_BETTER_AP
 8

	)

247 
	#WLC_E_REASON_REQUESTED_ROAM
 11

	)

250 
	#WLC_E_PRUNE_ENCR_MISMATCH
 1

	)

251 
	#WLC_E_PRUNE_BCAST_BSSID
 2

	)

252 
	#WLC_E_PRUNE_MAC_DENY
 3

	)

253 
	#WLC_E_PRUNE_MAC_NA
 4

	)

254 
	#WLC_E_PRUNE_REG_PASSV
 5

	)

255 
	#WLC_E_PRUNE_SPCT_MGMT
 6

	)

256 
	#WLC_E_PRUNE_RADAR
 7

	)

257 
	#WLC_E_RSN_MISMATCH
 8

	)

258 
	#WLC_E_PRUNE_NO_COMMON_RATES
 9

	)

259 
	#WLC_E_PRUNE_BASIC_RATES
 10

	)

260 
	#WLC_E_PRUNE_CIPHER_NA
 12

	)

261 
	#WLC_E_PRUNE_KNOWN_STA
 13

	)

262 
	#WLC_E_PRUNE_WDS_PEER
 15

	)

263 
	#WLC_E_PRUNE_QBSS_LOAD
 16

	)

264 
	#WLC_E_PRUNE_HOME_AP
 17

	)

267 
	#WLC_E_SUP_OTHER
 0

	)

268 
	#WLC_E_SUP_DECRYPT_KEY_DATA
 1

	)

269 
	#WLC_E_SUP_BAD_UCAST_WEP128
 2

	)

270 
	#WLC_E_SUP_BAD_UCAST_WEP40
 3

	)

271 
	#WLC_E_SUP_UNSUP_KEY_LEN
 4

	)

272 
	#WLC_E_SUP_PW_KEY_CIPHER
 5

	)

273 
	#WLC_E_SUP_MSG3_TOO_MANY_IE
 6

	)

274 
	#WLC_E_SUP_MSG3_IE_MISMATCH
 7

	)

275 
	#WLC_E_SUP_NO_INSTALL_FLAG
 8

	)

276 
	#WLC_E_SUP_MSG3_NO_GTK
 9

	)

277 
	#WLC_E_SUP_GRP_KEY_CIPHER
 10

	)

278 
	#WLC_E_SUP_GRP_MSG1_NO_GTK
 11

	)

279 
	#WLC_E_SUP_GTK_DECRYPT_FAIL
 12

	)

280 
	#WLC_E_SUP_SEND_FAIL
 13

	)

281 
	#WLC_E_SUP_DEAUTH
 14

	)

282 
	#WLC_E_SUP_WPA_PSK_TMO
 15

	)

289 
BWL_PRE_PACKED_STRUCT
 
	swl_evít_rx_‰ame_d©a
 {

290 
uöt16
 
	mvîsi⁄
;

291 
uöt16
 
	mch™√l
;

292 
öt32
 
	mrssi
;

293 
uöt32
 
	mma˘ime
;

294 
uöt32
 
	møã
;

295 } 
	tBWL_POST_PACKED_STRUCT
 
	twl_evít_rx_‰ame_d©a_t
;

297 
	#BCM_RX_FRAME_DATA_VERSION
 1

	)

300 
	swl_evít_d©a_if
 {

301 
uöt8
 
	mifidx
;

302 
uöt8
 
	m›code
;

303 
uöt8
 
	mª£rved
;

304 
uöt8
 
	mbssidx
;

305 
uöt8
 
	mrﬁe
;

306 } 
	twl_evít_d©a_if_t
;

309 
	#WLC_E_IF_ADD
 1

	)

310 
	#WLC_E_IF_DEL
 2

	)

311 
	#WLC_E_IF_CHANGE
 3

	)

314 
	#WLC_E_IF_ROLE_STA
 0

	)

315 
	#WLC_E_IF_ROLE_AP
 1

	)

316 
	#WLC_E_IF_ROLE_WDS
 2

	)

317 
	#WLC_E_IF_ROLE_P2P_GO
 3

	)

318 
	#WLC_E_IF_ROLE_P2P_CLIENT
 4

	)

319 #ifde‡
WLBTAMP


320 
	#WLC_E_IF_ROLE_BTA_CREATOR
 5

	)

321 
	#WLC_E_IF_ROLE_BTA_ACCEPTOR
 6

	)

325 
	#WLC_E_LINK_BCN_LOSS
 1

	)

326 
	#WLC_E_LINK_DISASSOC
 2

	)

327 
	#WLC_E_LINK_ASSOC_REC
 3

	)

328 
	#WLC_E_LINK_BSSCFG_DIS
 4

	)

331 
	#WLC_E_OVL_DOWNLOAD
 0

	)

332 
	#WLC_E_OVL_UPDATE_IND
 1

	)

335 
	#WLC_E_TDLS_PEER_DISCOVERED
 0

	)

336 
	#WLC_E_TDLS_PEER_CONNECTED
 1

	)

337 
	#WLC_E_TDLS_PEER_DISCONNECTED
 2

	)

340 
BWL_PRE_PACKED_STRUCT
 
	swl_evít_gas
 {

341 
uöt16
 
	mch™√l
;

342 
uöt8
 
	mdülog_tokí
;

343 
uöt8
 
	m‰agmít_id
;

344 
uöt16
 
	m°©us_code
;

345 
uöt16
 
	md©a_Àn
;

346 
uöt8
 
	md©a
[1];

347 } 
	tBWL_POST_PACKED_STRUCT
 
	twl_evít_gas_t
;

350 
BWL_PRE_PACKED_STRUCT
 
	swl_sd_év
 {

351 
uöt16
 
	mÀngth
;

352 
uöt8
 
	m¥Ÿocﬁ
;

353 
uöt8
 
	må™ß˘i⁄_id
;

354 
uöt8
 
	m°©us_code
;

355 
uöt8
 
	md©a
[1];

356 } 
	tBWL_POST_PACKED_STRUCT
 
	twl_sd_év_t
;

359 
BWL_PRE_PACKED_STRUCT
 
	swl_evít_sd
 {

360 
uöt16
 
	mch™√l
;

361 
uöt8
 
	mcou¡
;

362 
wl_sd_év_t
 
	mév
[1];

363 } 
	tBWL_POST_PACKED_STRUCT
 
	twl_evít_sd_t
;

366 
	~<∑cked_£˘i⁄_íd.h
>

	@include/proto/bcmip.h

27 #i‚de‡
_bcmù_h_


28 
	#_bcmù_h_


	)

30 #i‚de‡
_TYPEDEFS_H_


31 
	~<ty≥defs.h
>

35 
	~<∑cked_£˘i⁄_°¨t.h
>

39 
	#IP_VER_OFFSET
 0x0

	)

40 
	#IP_VER_MASK
 0xf0

	)

41 
	#IP_VER_SHIFT
 4

	)

42 
	#IP_VER_4
 4

	)

43 
	#IP_VER_6
 6

	)

45 
	#IP_VER
(
ù_body
) \

46 ((((
uöt8
 *)(
ù_body
))[
IP_VER_OFFSET
] & 
IP_VER_MASK
Ë>> 
IP_VER_SHIFT
)

	)

48 
	#IP_PROT_ICMP
 0x1

	)

49 
	#IP_PROT_IGMP
 0x2

	)

50 
	#IP_PROT_TCP
 0x6

	)

51 
	#IP_PROT_UDP
 0x11

	)

52 
	#IP_PROT_ICMP6
 0x3®

	)

55 
	#IPV4_VER_HL_OFFSET
 0

	)

56 
	#IPV4_TOS_OFFSET
 1

	)

57 
	#IPV4_PKTLEN_OFFSET
 2

	)

58 
	#IPV4_PKTFLAG_OFFSET
 6

	)

59 
	#IPV4_PROT_OFFSET
 9

	)

60 
	#IPV4_CHKSUM_OFFSET
 10

	)

61 
	#IPV4_SRC_IP_OFFSET
 12

	)

62 
	#IPV4_DEST_IP_OFFSET
 16

	)

63 
	#IPV4_OPTIONS_OFFSET
 20

	)

66 
	#IPV4_VER_MASK
 0xf0

	)

67 
	#IPV4_VER_SHIFT
 4

	)

69 
	#IPV4_HLEN_MASK
 0x0‡

	)

70 
	#IPV4_HLEN
(
ùv4_body
Ë(4 * (((
uöt8
 *)(ùv4_body))[
IPV4_VER_HL_OFFSET
] & 
IPV4_HLEN_MASK
))

	)

72 
	#IPV4_ADDR_LEN
 4

	)

74 
	#IPV4_ADDR_NULL
(
a
Ë((((
uöt8
 *)(a))[0] | ((uint8 *)(a))[1] | \

75 ((
uöt8
 *)(
a
))[2] | ((uöt8 *)◊))[3]Ë=0)

	)

77 
	#IPV4_ADDR_BCAST
(
a
Ë((((
uöt8
 *)(a))[0] & ((uint8 *)(a))[1] & \

78 ((
uöt8
 *)(
a
))[2] & ((uöt8 *)◊))[3]Ë=0xff)

	)

80 
	#IPV4_TOS_DSCP_MASK
 0xf¯

	)

81 
	#IPV4_TOS_DSCP_SHIFT
 2

	)

83 
	#IPV4_TOS
(
ùv4_body
Ë(((
uöt8
 *)(ùv4_body))[
IPV4_TOS_OFFSET
])

	)

85 
	#IPV4_TOS_PREC_MASK
 0xe0

	)

86 
	#IPV4_TOS_PREC_SHIFT
 5

	)

88 
	#IPV4_TOS_LOWDELAY
 0x10

	)

89 
	#IPV4_TOS_THROUGHPUT
 0x8

	)

90 
	#IPV4_TOS_RELIABILITY
 0x4

	)

92 
	#IPV4_PROT
(
ùv4_body
Ë(((
uöt8
 *)(ùv4_body))[
IPV4_PROT_OFFSET
])

	)

94 
	#IPV4_FRAG_RESV
 0x8000

	)

95 
	#IPV4_FRAG_DONT
 0x4000

	)

96 
	#IPV4_FRAG_MORE
 0x2000

	)

97 
	#IPV4_FRAG_OFFSET_MASK
 0x1ff‡

	)

99 
	#IPV4_ADDR_STR_LEN
 16

	)

102 
BWL_PRE_PACKED_STRUCT
 
	sùv4_addr
 {

103 
uöt8
 
	maddr
[
IPV4_ADDR_LEN
];

104 } 
	gBWL_POST_PACKED_STRUCT
;

106 
BWL_PRE_PACKED_STRUCT
 
	sùv4_hdr
 {

107 
uöt8
 
	mvîsi⁄_ihl
;

108 
uöt8
 
	mtos
;

109 
uöt16
 
	mtŸ_Àn
;

110 
uöt16
 
	mid
;

111 
uöt16
 
	m‰ag
;

112 
uöt8
 
	mâl
;

113 
uöt8
 
	m¥Ÿ
;

114 
uöt16
 
	mhdr_chksum
;

115 
uöt8
 
	m§c_ù
[
IPV4_ADDR_LEN
];

116 
uöt8
 
	md°_ù
[
IPV4_ADDR_LEN
];

117 } 
	gBWL_POST_PACKED_STRUCT
;

120 
	#IPV6_PAYLOAD_LEN_OFFSET
 4

	)

121 
	#IPV6_NEXT_HDR_OFFSET
 6

	)

122 
	#IPV6_HOP_LIMIT_OFFSET
 7

	)

123 
	#IPV6_SRC_IP_OFFSET
 8

	)

124 
	#IPV6_DEST_IP_OFFSET
 24

	)

127 
	#IPV6_TRAFFIC_CLASS
(
ùv6_body
) \

128 (((((
uöt8
 *)(
ùv6_body
))[0] & 0x0f) << 4) | \

129 ((((
uöt8
 *)(
ùv6_body
))[1] & 0xf0Ë>> 4))

	)

131 
	#IPV6_FLOW_LABEL
(
ùv6_body
) \

132 (((((
uöt8
 *)(
ùv6_body
))[1] & 0x0f) << 16) | \

133 (((
uöt8
 *)(
ùv6_body
))[2] << 8) | \

134 (((
uöt8
 *)(
ùv6_body
))[3]))

	)

136 
	#IPV6_PAYLOAD_LEN
(
ùv6_body
) \

137 ((((
uöt8
 *)(
ùv6_body
))[
IPV6_PAYLOAD_LEN_OFFSET
 + 0] << 8) | \

138 ((
uöt8
 *)(
ùv6_body
))[
IPV6_PAYLOAD_LEN_OFFSET
 + 1])

	)

140 
	#IPV6_NEXT_HDR
(
ùv6_body
) \

141 (((
uöt8
 *)(
ùv6_body
))[
IPV6_NEXT_HDR_OFFSET
])

	)

143 
	#IPV6_PROT
(
ùv6_body
Ë
	`IPV6_NEXT_HDR
(ùv6_body)

	)

145 
	#IPV6_ADDR_LEN
 16

	)

148 
	#IP_TOS46
(
ù_body
) \

149 (
	`IP_VER
(
ù_body
Ë=
IP_VER_4
 ? 
	`IPV4_TOS
(ip_body) : \

150 
	`IP_VER
(
ù_body
Ë=
IP_VER_6
 ? 
	`IPV6_TRAFFIC_CLASS
(ù_bodyË: 0)

	)

153 
	#IPV6_EXTHDR_HOP
 0

	)

154 
	#IPV6_EXTHDR_ROUTING
 43

	)

155 
	#IPV6_EXTHDR_FRAGMENT
 44

	)

156 
	#IPV6_EXTHDR_AUTH
 51

	)

157 
	#IPV6_EXTHDR_NONE
 59

	)

158 
	#IPV6_EXTHDR_DEST
 60

	)

160 
	#IPV6_EXTHDR
(
¥Ÿ
Ë((’rŸË=
IPV6_EXTHDR_HOP
) || \

161 ((
¥Ÿ
Ë=
IPV6_EXTHDR_ROUTING
) || \

162 ((
¥Ÿ
Ë=
IPV6_EXTHDR_FRAGMENT
) || \

163 ((
¥Ÿ
Ë=
IPV6_EXTHDR_AUTH
) || \

164 ((
¥Ÿ
Ë=
IPV6_EXTHDR_NONE
) || \

165 ((
¥Ÿ
Ë=
IPV6_EXTHDR_DEST
))

	)

167 
	#IPV6_MIN_HLEN
 40

	)

169 
	#IPV6_EXTHDR_LEN
(
eh
Ë((((
ùv6_exthdr
 *)”h))->
hdæí
 + 1Ë<< 3)

	)

171 
BWL_PRE_PACKED_STRUCT
 
	sùv6_exthdr
 {

172 
uöt8
 
	m√xthdr
;

173 
uöt8
 
	mhdæí
;

174 } 
	gBWL_POST_PACKED_STRUCT
;

176 
BWL_PRE_PACKED_STRUCT
 
	sùv6_exthdr_‰ag
 {

177 
uöt8
 
	m√xthdr
;

178 
uöt8
 
	mrsvd
;

179 
uöt16
 
	m‰ag_off
;

180 
uöt32
 
	midít
;

181 } 
	gBWL_POST_PACKED_STRUCT
;

183 
INLINE
 
öt32


184 
	$ùv6_exthdr_Àn
(
uöt8
 *
h
, uöt8 *
¥Ÿo
)

186 
uöt16
 
Àn
 = 0, 
hÀn
;

187 
ùv6_exthdr
 *
eh
 = (ùv6_exthd∏*)
h
;

189 
	`IPV6_EXTHDR
(
eh
->
√xthdr
)) {

190 i‡(
eh
->
√xthdr
 =
IPV6_EXTHDR_NONE
)

192 i‡(
eh
->
√xthdr
 =
IPV6_EXTHDR_FRAGMENT
)

193 
hÀn
 = 8;

194 i‡(
eh
->
√xthdr
 =
IPV6_EXTHDR_AUTH
)

195 
hÀn
 = (
eh
->
hdæí
 + 2) << 2;

197 
hÀn
 = 
	`IPV6_EXTHDR_LEN
(
eh
);

199 
Àn
 +
hÀn
;

200 
eh
 = (
ùv6_exthdr
 *)(
h
 + 
Àn
);

203 *
¥Ÿo
 = 
eh
->
√xthdr
;

204  
Àn
;

205 
	}
}

208 
	~<∑cked_£˘i⁄_íd.h
>

	@include/proto/bt_amp_hci.h

27 #i‚de‡
_bt_amp_hci_h


28 
	#_bt_amp_hci_h


	)

31 
	~<∑cked_£˘i⁄_°¨t.h
>

35 
BWL_PRE_PACKED_STRUCT
 
	samp_hci_cmd
 {

36 
uöt16
 
	m›code
;

37 
uöt8
 
	m∂í
;

38 
uöt8
 
	m∑rms
[1];

39 } 
	tBWL_POST_PACKED_STRUCT
 
	tamp_hci_cmd_t
;

41 
	#HCI_CMD_PREAMBLE_SIZE
 
	`OFFSETOF
(
amp_hci_cmd_t
, 
∑rms
)

	)

42 
	#HCI_CMD_DATA_SIZE
 255

	)

45 
	#HCI_CMD_OPCODE
(
ogf
, 
ocf
Ë((((ogfË& 0x3FË<< 10Ë| ((ocfË& 0x03FF))

	)

46 
	#HCI_CMD_OGF
(
›code
Ë((
uöt8
)(((›codeË>> 10Ë& 0x3F))

	)

47 
	#HCI_CMD_OCF
(
›code
Ë((›codeË& 0x03FF)

	)

50 
	#HCI_Ród_Faûed_C⁄è˘_Cou¡î
 
	`HCI_CMD_OPCODE
(0x05, 0x0001)

	)

51 
	#HCI_Re£t_Faûed_C⁄è˘_Cou¡î
 
	`HCI_CMD_OPCODE
(0x05, 0x0002)

	)

52 
	#HCI_Ród_Lök_QuÆôy
 
	`HCI_CMD_OPCODE
(0x05, 0x0003)

	)

53 
	#HCI_Ród_Loˇl_AMP_Info
 
	`HCI_CMD_OPCODE
(0x05, 0x0009)

	)

54 
	#HCI_Ród_Loˇl_AMP_ASSOC
 
	`HCI_CMD_OPCODE
(0x05, 0x000A)

	)

55 
	#HCI_Wrôe_RemŸe_AMP_ASSOC
 
	`HCI_CMD_OPCODE
(0x05, 0x000B)

	)

56 
	#HCI_Cª©e_Physiˇl_Lök
 
	`HCI_CMD_OPCODE
(0x01, 0x0035)

	)

57 
	#HCI_Ac˚±_Physiˇl_Lök_Reque°
 
	`HCI_CMD_OPCODE
(0x01, 0x0036)

	)

58 
	#HCI_Disc⁄√˘_Physiˇl_Lök
 
	`HCI_CMD_OPCODE
(0x01, 0x0037)

	)

59 
	#HCI_Cª©e_Logiˇl_Lök
 
	`HCI_CMD_OPCODE
(0x01, 0x0038)

	)

60 
	#HCI_Ac˚±_Logiˇl_Lök
 
	`HCI_CMD_OPCODE
(0x01, 0x0039)

	)

61 
	#HCI_Disc⁄√˘_Logiˇl_Lök
 
	`HCI_CMD_OPCODE
(0x01, 0x003A)

	)

62 
	#HCI_Logiˇl_Lök_C™˚l
 
	`HCI_CMD_OPCODE
(0x01, 0x003B)

	)

63 
	#HCI_Flow_S≥c_Modify
 
	`HCI_CMD_OPCODE
(0x01, 0x003C)

	)

64 
	#HCI_Wrôe_Flow_C⁄åﬁ_Mode
 
	`HCI_CMD_OPCODE
(0x01, 0x0067)

	)

65 
	#HCI_Ród_Be°_Eff‹t_Flush_Timeout
 
	`HCI_CMD_OPCODE
(0x01, 0x0069)

	)

66 
	#HCI_Wrôe_Be°_Eff‹t_Flush_Timeout
 
	`HCI_CMD_OPCODE
(0x01, 0x006A)

	)

67 
	#HCI_Sh‹t_R™ge_Mode
 
	`HCI_CMD_OPCODE
(0x01, 0x006B)

	)

68 
	#HCI_Re£t
 
	`HCI_CMD_OPCODE
(0x03, 0x0003)

	)

69 
	#HCI_Ród_C⁄√˘i⁄_Ac˚±_Timeout
 
	`HCI_CMD_OPCODE
(0x03, 0x0015)

	)

70 
	#HCI_Wrôe_C⁄√˘i⁄_Ac˚±_Timeout
 
	`HCI_CMD_OPCODE
(0x03, 0x0016)

	)

71 
	#HCI_Ród_Lök_Su≥rvisi⁄_Timeout
 
	`HCI_CMD_OPCODE
(0x03, 0x0036)

	)

72 
	#HCI_Wrôe_Lök_Su≥rvisi⁄_Timeout
 
	`HCI_CMD_OPCODE
(0x03, 0x0037)

	)

73 
	#HCI_Enh™˚d_Flush
 
	`HCI_CMD_OPCODE
(0x03, 0x005F)

	)

74 
	#HCI_Ród_Logiˇl_Lök_Ac˚±_Timeout
 
	`HCI_CMD_OPCODE
(0x03, 0x0061)

	)

75 
	#HCI_Wrôe_Logiˇl_Lök_Ac˚±_Timeout
 
	`HCI_CMD_OPCODE
(0x03, 0x0062)

	)

76 
	#HCI_Së_Evít_Mask_Page_2
 
	`HCI_CMD_OPCODE
(0x03, 0x0063)

	)

77 
	#HCI_Ród_Loˇti⁄_D©a_Comm™d
 
	`HCI_CMD_OPCODE
(0x03, 0x0064)

	)

78 
	#HCI_Wrôe_Loˇti⁄_D©a_Comm™d
 
	`HCI_CMD_OPCODE
(0x03, 0x0065)

	)

79 
	#HCI_Ród_Loˇl_Vîsi⁄_Info
 
	`HCI_CMD_OPCODE
(0x04, 0x0001)

	)

80 
	#HCI_Ród_Loˇl_Suµ‹ãd_Comm™ds
 
	`HCI_CMD_OPCODE
(0x04, 0x0002)

	)

81 
	#HCI_Ród_Buf„r_Size
 
	`HCI_CMD_OPCODE
(0x04, 0x0005)

	)

82 
	#HCI_Ród_D©a_Block_Size
 
	`HCI_CMD_OPCODE
(0x04, 0x000A)

	)

85 
BWL_PRE_PACKED_STRUCT
 
	sªad_loˇl_cmd_∑rms
 {

86 
uöt8
 
	m∂h
;

87 
uöt8
 
	moff£t
[2];

88 
uöt8
 
	mmax_ªmŸe
[2];

89 } 
	tBWL_POST_PACKED_STRUCT
 
	tªad_loˇl_cmd_∑rms_t
;

91 
BWL_PRE_PACKED_STRUCT
 
	swrôe_ªmŸe_cmd_∑rms
 {

92 
uöt8
 
	m∂h
;

93 
uöt8
 
	moff£t
[2];

94 
uöt8
 
	mÀn
[2];

95 
uöt8
 
	m‰ag
[1];

96 } 
	tBWL_POST_PACKED_STRUCT
 
	twrôe_ªmŸe_cmd_∑rms_t
;

98 
BWL_PRE_PACKED_STRUCT
 
	sphy_lök_cmd_∑rms
 {

99 
uöt8
 
	m∂h
;

100 
uöt8
 
	mkey_Àngth
;

101 
uöt8
 
	mkey_ty≥
;

102 
uöt8
 
	mkey
[1];

103 } 
	tBWL_POST_PACKED_STRUCT
 
	tphy_lök_cmd_∑rms_t
;

105 
BWL_PRE_PACKED_STRUCT
 
	sdis_phy_lök_cmd_∑rms
 {

106 
uöt8
 
	m∂h
;

107 
uöt8
 
	mªas⁄
;

108 } 
	tBWL_POST_PACKED_STRUCT
 
	tdis_phy_lök_cmd_∑rms_t
;

110 
BWL_PRE_PACKED_STRUCT
 
	slog_lök_cmd_∑rms
 {

111 
uöt8
 
	m∂h
;

112 
uöt8
 
	mtxÊow
[16];

113 
uöt8
 
	mrxÊow
[16];

114 } 
	tBWL_POST_PACKED_STRUCT
 
	tlog_lök_cmd_∑rms_t
;

116 
BWL_PRE_PACKED_STRUCT
 
	sext_Êow_•ec
 {

117 
uöt8
 
	mid
;

118 
uöt8
 
	m£rvi˚_ty≥
;

119 
uöt8
 
	mmax_sdu
[2];

120 
uöt8
 
	msdu_ü_time
[4];

121 
uöt8
 
	mac˚ss_œãncy
[4];

122 
uöt8
 
	mÊush_timeout
[4];

123 } 
	tBWL_POST_PACKED_STRUCT
 
	text_Êow_•ec_t
;

125 
BWL_PRE_PACKED_STRUCT
 
	slog_lök_ˇn˚l_cmd_∑rms
 {

126 
uöt8
 
	m∂h
;

127 
uöt8
 
	mtx_fs_ID
;

128 } 
	tBWL_POST_PACKED_STRUCT
 
	tlog_lök_ˇn˚l_cmd_∑rms_t
;

130 
BWL_PRE_PACKED_STRUCT
 
	sÊow_•ec_mod_cmd_∑rms
 {

131 
uöt8
 
	mŒh
[2];

132 
uöt8
 
	mtxÊow
[16];

133 
uöt8
 
	mrxÊow
[16];

134 } 
	tBWL_POST_PACKED_STRUCT
 
	tÊow_•ec_mod_cmd_∑rms_t
;

136 
BWL_PRE_PACKED_STRUCT
 
	s∂h_∑d
 {

137 
uöt8
 
	m∂h
;

138 
uöt8
 
	m∑d
;

139 } 
	tBWL_POST_PACKED_STRUCT
 
	t∂h_∑d_t
;

141 
BWL_PRE_PACKED_STRUCT
 
	uhci_h™dÀ
 {

142 
uöt16
 
	mbªdr
;

143 
∂h_∑d_t
 
	mamp
;

144 } 
	tBWL_POST_PACKED_STRUCT
 
	thci_h™dÀ_t
;

146 
BWL_PRE_PACKED_STRUCT
 
	sls_to_cmd_∑rms
 {

147 
hci_h™dÀ_t
 
	mh™dÀ
;

148 
uöt8
 
	mtimeout
[2];

149 } 
	tBWL_POST_PACKED_STRUCT
 
	tls_to_cmd_∑rms_t
;

151 
BWL_PRE_PACKED_STRUCT
 
	sbe·o_cmd_∑rms
 {

152 
uöt8
 
	mŒh
[2];

153 
uöt8
 
	mbe·o
[4];

154 } 
	tBWL_POST_PACKED_STRUCT
 
	tbe·o_cmd_∑rms_t
;

156 
BWL_PRE_PACKED_STRUCT
 
	s§m_cmd_∑rms
 {

157 
uöt8
 
	m∂h
;

158 
uöt8
 
	m§m
;

159 } 
	tBWL_POST_PACKED_STRUCT
 
	t§m_cmd_∑rms_t
;

161 
BWL_PRE_PACKED_STRUCT
 
	sld_cmd_∑rms
 {

162 
uöt8
 
	mld_aw¨e
;

163 
uöt8
 
	mld
[2];

164 
uöt8
 
	mld_›ts
;

165 
uöt8
 
	ml_›ts
;

166 } 
	tBWL_POST_PACKED_STRUCT
 
	tld_cmd_∑rms_t
;

168 
BWL_PRE_PACKED_STRUCT
 
	seÊush_cmd_∑rms
 {

169 
uöt8
 
	mŒh
[2];

170 
uöt8
 
	m∑ckë_ty≥
;

171 } 
	tBWL_POST_PACKED_STRUCT
 
	teÊush_cmd_∑rms_t
;

174 
	#EFS_SVCTYPE_NO_TRAFFIC
 0

	)

175 
	#EFS_SVCTYPE_BEST_EFFORT
 1

	)

176 
	#EFS_SVCTYPE_GUARANTEED
 2

	)

179 
BWL_PRE_PACKED_STRUCT
 
	samp_hci_evít
 {

180 
uöt8
 
	mecode
;

181 
uöt8
 
	m∂í
;

182 
uöt8
 
	m∑rms
[1];

183 } 
	tBWL_POST_PACKED_STRUCT
 
	tamp_hci_evít_t
;

185 
	#HCI_EVT_PREAMBLE_SIZE
 
	`OFFSETOF
(
amp_hci_evít_t
, 
∑rms
)

	)

188 
	#HCI_Comm™d_Com∂ëe
 0x0E

	)

189 
	#HCI_Comm™d_Sètus
 0x0F

	)

190 
	#HCI_Flush_Occuºed
 0x11

	)

191 
	#HCI_Enh™˚d_Flush_Com∂ëe
 0x39

	)

192 
	#HCI_Physiˇl_Lök_Com∂ëe
 0x40

	)

193 
	#HCI_Ch™√l_Sñe˘
 0x41

	)

194 
	#HCI_Disc⁄√˘_Physiˇl_Lök_Com∂ëe
 0x42

	)

195 
	#HCI_Logiˇl_Lök_Com∂ëe
 0x45

	)

196 
	#HCI_Disc⁄√˘_Logiˇl_Lök_Com∂ëe
 0x46

	)

197 
	#HCI_Flow_S≥c_Modify_Com∂ëe
 0x47

	)

198 
	#HCI_Numbî_of_Com∂ëed_D©a_Blocks
 0x48

	)

199 
	#HCI_Sh‹t_R™ge_Mode_Ch™ge_Com∂ëe
 0x4C

	)

200 
	#HCI_Sètus_Ch™ge_Evít
 0x4D

	)

201 
	#HCI_Víd‹_S≥cific
 0xFF

	)

204 
	#HCI_Physiˇl_Lök_Com∂ëe_Evít_Mask
 0x0001

	)

205 
	#HCI_Ch™√l_Sñe˘_Evít_Mask
 0x0002

	)

206 
	#HCI_Disc⁄√˘_Physiˇl_Lök_Com∂ëe_Evít_Mask
 0x0004

	)

207 
	#HCI_Logiˇl_Lök_Com∂ëe_Evít_Mask
 0x0020

	)

208 
	#HCI_Disc⁄√˘_Logiˇl_Lök_Com∂ëe_Evít_Mask
 0x0040

	)

209 
	#HCI_Flow_S≥c_Modify_Com∂ëe_Evít_Mask
 0x0080

	)

210 
	#HCI_Numbî_of_Com∂ëed_D©a_Blocks_Evít_Mask
 0x0100

	)

211 
	#HCI_Sh‹t_R™ge_Mode_Ch™ge_Com∂ëe_Evít_Mask
 0x1000

	)

212 
	#HCI_Sètus_Ch™ge_Evít_Mask
 0x2000

	)

213 
	#HCI_AŒ_Evít_Mask
 0x31e7

	)

215 
BWL_PRE_PACKED_STRUCT
 
	scmd_°©us_∑rms
 {

216 
uöt8
 
	m°©us
;

217 
uöt8
 
	mcmdpkts
;

218 
uöt16
 
	m›code
;

219 } 
	tBWL_POST_PACKED_STRUCT
 
	tcmd_°©us_∑rms_t
;

221 
BWL_PRE_PACKED_STRUCT
 
	scmd_com∂ëe_∑rms
 {

222 
uöt8
 
	mcmdpkts
;

223 
uöt16
 
	m›code
;

224 
uöt8
 
	m∑rms
[1];

225 } 
	tBWL_POST_PACKED_STRUCT
 
	tcmd_com∂ëe_∑rms_t
;

227 
BWL_PRE_PACKED_STRUCT
 
	sÊush_occuºed_evt_∑rms
 {

228 
uöt16
 
	mh™dÀ
;

229 } 
	tBWL_POST_PACKED_STRUCT
 
	tÊush_occuºed_evt_∑rms_t
;

231 
BWL_PRE_PACKED_STRUCT
 
	swrôe_ªmŸe_evt_∑rms
 {

232 
uöt8
 
	m°©us
;

233 
uöt8
 
	m∂h
;

234 } 
	tBWL_POST_PACKED_STRUCT
 
	twrôe_ªmŸe_evt_∑rms_t
;

236 
BWL_PRE_PACKED_STRUCT
 
	sªad_loˇl_evt_∑rms
 {

237 
uöt8
 
	m°©us
;

238 
uöt8
 
	m∂h
;

239 
uöt16
 
	mÀn
;

240 
uöt8
 
	m‰ag
[1];

241 } 
	tBWL_POST_PACKED_STRUCT
 
	tªad_loˇl_evt_∑rms_t
;

243 
BWL_PRE_PACKED_STRUCT
 
	sªad_loˇl_öfo_evt_∑rms
 {

244 
uöt8
 
	m°©us
;

245 
uöt8
 
	mAMP_°©us
;

246 
uöt32
 
	mb™dwidth
;

247 
uöt32
 
	mgb™dwidth
;

248 
uöt32
 
	mœãncy
;

249 
uöt32
 
	mPDU_size
;

250 
uöt8
 
	m˘æ_ty≥
;

251 
uöt16
 
	mPAL_ˇp
;

252 
uöt16
 
	mAMP_ASSOC_Àn
;

253 
uöt32
 
	mmax_Êush_timeout
;

254 
uöt32
 
	mbe_Êush_timeout
;

255 } 
	tBWL_POST_PACKED_STRUCT
 
	tªad_loˇl_öfo_evt_∑rms_t
;

257 
BWL_PRE_PACKED_STRUCT
 
	slog_lök_evt_∑rms
 {

258 
uöt8
 
	m°©us
;

259 
uöt16
 
	mŒh
;

260 
uöt8
 
	m∂h
;

261 
uöt8
 
	mtx_fs_ID
;

262 } 
	tBWL_POST_PACKED_STRUCT
 
	tlog_lök_evt_∑rms_t
;

264 
BWL_PRE_PACKED_STRUCT
 
	sdisc_log_lök_evt_∑rms
 {

265 
uöt8
 
	m°©us
;

266 
uöt16
 
	mŒh
;

267 
uöt8
 
	mªas⁄
;

268 } 
	tBWL_POST_PACKED_STRUCT
 
	tdisc_log_lök_evt_∑rms_t
;

270 
BWL_PRE_PACKED_STRUCT
 
	slog_lök_ˇn˚l_evt_∑rms
 {

271 
uöt8
 
	m°©us
;

272 
uöt8
 
	m∂h
;

273 
uöt8
 
	mtx_fs_ID
;

274 } 
	tBWL_POST_PACKED_STRUCT
 
	tlog_lök_ˇn˚l_evt_∑rms_t
;

276 
BWL_PRE_PACKED_STRUCT
 
	sÊow_•ec_mod_evt_∑rms
 {

277 
uöt8
 
	m°©us
;

278 
uöt16
 
	mŒh
;

279 } 
	tBWL_POST_PACKED_STRUCT
 
	tÊow_•ec_mod_evt_∑rms_t
;

281 
BWL_PRE_PACKED_STRUCT
 
	sphy_lök_evt_∑rms
 {

282 
uöt8
 
	m°©us
;

283 
uöt8
 
	m∂h
;

284 } 
	tBWL_POST_PACKED_STRUCT
 
	tphy_lök_evt_∑rms_t
;

286 
BWL_PRE_PACKED_STRUCT
 
	sdis_phy_lök_evt_∑rms
 {

287 
uöt8
 
	m°©us
;

288 
uöt8
 
	m∂h
;

289 
uöt8
 
	mªas⁄
;

290 } 
	tBWL_POST_PACKED_STRUCT
 
	tdis_phy_lök_evt_∑rms_t
;

292 
BWL_PRE_PACKED_STRUCT
 
	sªad_ls_to_evt_∑rms
 {

293 
uöt8
 
	m°©us
;

294 
hci_h™dÀ_t
 
	mh™dÀ
;

295 
uöt16
 
	mtimeout
;

296 } 
	tBWL_POST_PACKED_STRUCT
 
	tªad_ls_to_evt_∑rms_t
;

298 
BWL_PRE_PACKED_STRUCT
 
	sªad_Œa_ˇ_to_evt_∑rms
 {

299 
uöt8
 
	m°©us
;

300 
uöt16
 
	mtimeout
;

301 } 
	tBWL_POST_PACKED_STRUCT
 
	tªad_Œa_ˇ_to_evt_∑rms_t
;

303 
BWL_PRE_PACKED_STRUCT
 
	sªad_d©a_block_size_evt_∑rms
 {

304 
uöt8
 
	m°©us
;

305 
uöt16
 
	mACL_pkt_Àn
;

306 
uöt16
 
	md©a_block_Àn
;

307 
uöt16
 
	md©a_block_num
;

308 } 
	tBWL_POST_PACKED_STRUCT
 
	tªad_d©a_block_size_evt_∑rms_t
;

310 
BWL_PRE_PACKED_STRUCT
 
	sd©a_blocks
 {

311 
uöt16
 
	mh™dÀ
;

312 
uöt16
 
	mpkts
;

313 
uöt16
 
	mblocks
;

314 } 
	tBWL_POST_PACKED_STRUCT
 
	td©a_blocks_t
;

316 
BWL_PRE_PACKED_STRUCT
 
	snum_com∂ëed_d©a_blocks_evt_∑rms
 {

317 
uöt16
 
	mnum_blocks
;

318 
uöt8
 
	mnum_h™dÀs
;

319 
d©a_blocks_t
 
	mcom∂ëed
[1];

320 } 
	tBWL_POST_PACKED_STRUCT
 
	tnum_com∂ëed_d©a_blocks_evt_∑rms_t
;

322 
BWL_PRE_PACKED_STRUCT
 
	sbe·o_evt_∑rms
 {

323 
uöt8
 
	m°©us
;

324 
uöt32
 
	mbe·o
;

325 } 
	tBWL_POST_PACKED_STRUCT
 
	tbe·o_evt_∑rms_t
;

327 
BWL_PRE_PACKED_STRUCT
 
	s§m_evt_∑rms
 {

328 
uöt8
 
	m°©us
;

329 
uöt8
 
	m∂h
;

330 
uöt8
 
	m§m
;

331 } 
	tBWL_POST_PACKED_STRUCT
 
	t§m_evt_∑rms_t
;

333 
BWL_PRE_PACKED_STRUCT
 
	sc⁄è˘_cou¡î_evt_∑rms
 {

334 
uöt8
 
	m°©us
;

335 
uöt8
 
	mŒh
[2];

336 
uöt16
 
	mcou¡î
;

337 } 
	tBWL_POST_PACKED_STRUCT
 
	tc⁄è˘_cou¡î_evt_∑rms_t
;

339 
BWL_PRE_PACKED_STRUCT
 
	sc⁄è˘_cou¡î_ª£t_evt_∑rms
 {

340 
uöt8
 
	m°©us
;

341 
uöt8
 
	mŒh
[2];

342 } 
	tBWL_POST_PACKED_STRUCT
 
	tc⁄è˘_cou¡î_ª£t_evt_∑rms_t
;

344 
BWL_PRE_PACKED_STRUCT
 
	sªad_lökq_evt_∑rms
 {

345 
uöt8
 
	m°©us
;

346 
hci_h™dÀ_t
 
	mh™dÀ
;

347 
uöt8
 
	mlök_quÆôy
;

348 } 
	tBWL_POST_PACKED_STRUCT
 
	tªad_lökq_evt_∑rms_t
;

350 
BWL_PRE_PACKED_STRUCT
 
	sld_evt_∑rms
 {

351 
uöt8
 
	m°©us
;

352 
uöt8
 
	mld_aw¨e
;

353 
uöt8
 
	mld
[2];

354 
uöt8
 
	mld_›ts
;

355 
uöt8
 
	ml_›ts
;

356 } 
	tBWL_POST_PACKED_STRUCT
 
	tld_evt_∑rms_t
;

358 
BWL_PRE_PACKED_STRUCT
 
	seÊush_com∂ëe_evt_∑rms
 {

359 
uöt16
 
	mh™dÀ
;

360 } 
	tBWL_POST_PACKED_STRUCT
 
	teÊush_com∂ëe_evt_∑rms_t
;

362 
BWL_PRE_PACKED_STRUCT
 
	svíd‹_•ecific_evt_∑rms
 {

363 
uöt8
 
	mÀn
;

364 
uöt8
 
	m∑rms
[1];

365 } 
	tBWL_POST_PACKED_STRUCT
 
	tvíd‹_•ecific_evt_∑rms_t
;

367 
BWL_PRE_PACKED_STRUCT
 
	sloˇl_vîsi⁄_öfo_evt_∑rms
 {

368 
uöt8
 
	m°©us
;

369 
uöt8
 
	mhci_vîsi⁄
;

370 
uöt16
 
	mhci_ªvisi⁄
;

371 
uöt8
 
	m∑l_vîsi⁄
;

372 
uöt16
 
	mmfg_«me
;

373 
uöt16
 
	m∑l_subvîsi⁄
;

374 } 
	tBWL_POST_PACKED_STRUCT
 
	tloˇl_vîsi⁄_öfo_evt_∑rms_t
;

376 
	#MAX_SUPPORTED_CMD_BYTE
 64

	)

377 
BWL_PRE_PACKED_STRUCT
 
	sloˇl_suµ‹ãd_cmd_evt_∑rms
 {

378 
uöt8
 
	m°©us
;

379 
uöt8
 
	mcmd
[
MAX_SUPPORTED_CMD_BYTE
];

380 } 
	tBWL_POST_PACKED_STRUCT
 
	tloˇl_suµ‹ãd_cmd_evt_∑rms_t
;

382 
BWL_PRE_PACKED_STRUCT
 
	s°©us_ch™ge_evt_∑rms
 {

383 
uöt8
 
	m°©us
;

384 
uöt8
 
	mamp_°©us
;

385 } 
	tBWL_POST_PACKED_STRUCT
 
	t°©us_ch™ge_evt_∑rms_t
;

388 
	#HCI_SUCCESS
 0x00

	)

389 
	#HCI_ERR_ILLEGAL_COMMAND
 0x01

	)

390 
	#HCI_ERR_NO_CONNECTION
 0x02

	)

391 
	#HCI_ERR_MEMORY_FULL
 0x07

	)

392 
	#HCI_ERR_CONNECTION_TIMEOUT
 0x08

	)

393 
	#HCI_ERR_MAX_NUM_OF_CONNECTIONS
 0x09

	)

394 
	#HCI_ERR_CONNECTION_EXISTS
 0x0B

	)

395 
	#HCI_ERR_CONNECTION_DISALLOWED
 0x0C

	)

396 
	#HCI_ERR_CONNECTION_ACCEPT_TIMEOUT
 0x10

	)

397 
	#HCI_ERR_UNSUPPORTED_VALUE
 0x11

	)

398 
	#HCI_ERR_ILLEGAL_PARAMETER_FMT
 0x12

	)

399 
	#HCI_ERR_CONN_TERM_BY_LOCAL_HOST
 0x16

	)

400 
	#HCI_ERR_UNSPECIFIED
 0x1F

	)

401 
	#HCI_ERR_UNIT_KEY_USED
 0x26

	)

402 
	#HCI_ERR_QOS_REJECTED
 0x2D

	)

403 
	#HCI_ERR_PARAM_OUT_OF_RANGE
 0x30

	)

404 
	#HCI_ERR_NO_SUITABLE_CHANNEL
 0x39

	)

405 
	#HCI_ERR_CHANNEL_MOVE
 0xFF

	)

408 
BWL_PRE_PACKED_STRUCT
 
	samp_hci_ACL_d©a
 {

409 
uöt16
 
	mh™dÀ
;

410 
uöt16
 
	mdÀn
;

411 
uöt8
 
	md©a
[1];

412 } 
	tBWL_POST_PACKED_STRUCT
 
	tamp_hci_ACL_d©a_t
;

414 
	#HCI_ACL_DATA_PREAMBLE_SIZE
 
	`OFFSETOF
(
amp_hci_ACL_d©a_t
, 
d©a
)

	)

416 
	#HCI_ACL_DATA_BC_FLAGS
 (0x0 << 14)

	)

417 
	#HCI_ACL_DATA_PB_FLAGS
 (0x3 << 12)

	)

419 
	#HCI_ACL_DATA_HANDLE
(
h™dÀ
Ë((h™dÀË& 0x0fff)

	)

420 
	#HCI_ACL_DATA_FLAGS
(
h™dÀ
Ë((h™dÀË>> 12)

	)

423 
BWL_PRE_PACKED_STRUCT
 
	samp_hci_a˘ivôy_ªp‹t
 {

424 
uöt8
 
	mScheduÀKnown
;

425 
uöt8
 
	mNumRï‹ts
;

426 
uöt8
 
	md©a
[1];

427 } 
	tBWL_POST_PACKED_STRUCT
 
	tamp_hci_a˘ivôy_ªp‹t_t
;

429 
BWL_PRE_PACKED_STRUCT
 
	samp_hci_a˘ivôy_ªp‹t_åùÀ
 {

430 
uöt32
 
	mSèπTime
;

431 
uöt32
 
	mDuøti⁄
;

432 
uöt32
 
	mPîiodicôy
;

433 } 
	tBWL_POST_PACKED_STRUCT
 
	tamp_hci_a˘ivôy_ªp‹t_åùÀ_t
;

435 
	#HCI_AR_SCHEDULE_KNOWN
 0x01

	)

439 
	~<∑cked_£˘i⁄_íd.h
>

	@include/proto/eapol.h

13 #i‚de‡
_ópﬁ_h_


14 
	#_ópﬁ_h_


	)

16 #i‚de‡
_TYPEDEFS_H_


17 
	~<ty≥defs.h
>

21 
	~<∑cked_£˘i⁄_°¨t.h
>

23 
	~<bcm¸y±o/´skeywøp.h
>

26 
BWL_PRE_PACKED_STRUCT
 struct {

27 
ëhî_hódî
 
	mëh
;

28 
	mvîsi⁄
;

29 
	mty≥
;

30 
	mÀngth
;

31 
	mbody
[1];

32 } 
	tBWL_POST_PACKED_STRUCT
 
	tópﬁ_hódî_t
;

34 
	#EAPOL_HEADER_LEN
 18

	)

37 
	mvîsi⁄
;

38 
	mty≥
;

39 
	mÀngth
;

40 } 
	tópﬁ_hdr_t
;

42 
	#EAPOL_HDR_LEN
 4

	)

45 
	#WPA2_EAPOL_VERSION
 2

	)

46 
	#WPA_EAPOL_VERSION
 1

	)

47 
	#LEAP_EAPOL_VERSION
 1

	)

48 
	#SES_EAPOL_VERSION
 1

	)

51 
	#EAP_PACKET
 0

	)

52 
	#EAPOL_START
 1

	)

53 
	#EAPOL_LOGOFF
 2

	)

54 
	#EAPOL_KEY
 3

	)

55 
	#EAPOL_ASF
 4

	)

58 
	#EAPOL_RC4_KEY
 1

	)

59 
	#EAPOL_WPA2_KEY
 2

	)

60 
	#EAPOL_WPA_KEY
 254

	)

63 
	#EAPOL_KEY_REPLAY_LEN
 8

	)

64 
	#EAPOL_KEY_IV_LEN
 16

	)

65 
	#EAPOL_KEY_SIG_LEN
 16

	)

68 
BWL_PRE_PACKED_STRUCT
 struct {

69 
	mty≥
;

70 
	mÀngth
;

71 
	mª∂ay
[
EAPOL_KEY_REPLAY_LEN
];

72 
	miv
[
EAPOL_KEY_IV_LEN
];

73 
	mödex
;

74 
	msig«tuª
[
EAPOL_KEY_SIG_LEN
];

75 
	mkey
[1];

76 } 
	tBWL_POST_PACKED_STRUCT
 
	tópﬁ_key_hódî_t
;

78 
	#EAPOL_KEY_HEADER_LEN
 44

	)

81 
	#EAPOL_KEY_FLAGS_MASK
 0x80

	)

82 
	#EAPOL_KEY_BROADCAST
 0

	)

83 
	#EAPOL_KEY_UNICAST
 0x80

	)

86 
	#EAPOL_KEY_INDEX_MASK
 0x7f

	)

89 
	#EAPOL_WPA_KEY_REPLAY_LEN
 8

	)

90 
	#EAPOL_WPA_KEY_NONCE_LEN
 32

	)

91 
	#EAPOL_WPA_KEY_IV_LEN
 16

	)

92 
	#EAPOL_WPA_KEY_RSC_LEN
 8

	)

93 
	#EAPOL_WPA_KEY_ID_LEN
 8

	)

94 
	#EAPOL_WPA_KEY_MIC_LEN
 16

	)

95 
	#EAPOL_WPA_KEY_DATA_LEN
 (
EAPOL_WPA_MAX_KEY_SIZE
 + 
AKW_BLOCK_LEN
)

	)

96 
	#EAPOL_WPA_MAX_KEY_SIZE
 32

	)

99 
BWL_PRE_PACKED_STRUCT
 struct {

100 
	mty≥
;

101 
	mkey_öfo
;

102 
	mkey_Àn
;

103 
	mª∂ay
[
EAPOL_WPA_KEY_REPLAY_LEN
];

104 
	mn⁄˚
[
EAPOL_WPA_KEY_NONCE_LEN
];

105 
	miv
[
EAPOL_WPA_KEY_IV_LEN
];

106 
	mrsc
[
EAPOL_WPA_KEY_RSC_LEN
];

107 
	mid
[
EAPOL_WPA_KEY_ID_LEN
];

108 
	mmic
[
EAPOL_WPA_KEY_MIC_LEN
];

109 
	md©a_Àn
;

110 
	md©a
[
EAPOL_WPA_KEY_DATA_LEN
];

111 } 
	tBWL_POST_PACKED_STRUCT
 
	tópﬁ_w∑_key_hódî_t
;

113 
	#EAPOL_WPA_KEY_LEN
 95

	)

116 
	#WPA_KEY_DESC_V1
 0x01

	)

117 
	#WPA_KEY_DESC_V2
 0x02

	)

118 
	#WPA_KEY_DESC_V3
 0x03

	)

119 
	#WPA_KEY_PAIRWISE
 0x08

	)

120 
	#WPA_KEY_INSTALL
 0x40

	)

121 
	#WPA_KEY_ACK
 0x80

	)

122 
	#WPA_KEY_MIC
 0x100

	)

123 
	#WPA_KEY_SECURE
 0x200

	)

124 
	#WPA_KEY_ERROR
 0x400

	)

125 
	#WPA_KEY_REQ
 0x800

	)

127 
	#WPA_KEY_DESC_V2_OR_V3
 
WPA_KEY_DESC_V2


	)

130 
	#WPA_KEY_INDEX_0
 0x00

	)

131 
	#WPA_KEY_INDEX_1
 0x10

	)

132 
	#WPA_KEY_INDEX_2
 0x20

	)

133 
	#WPA_KEY_INDEX_3
 0x30

	)

134 
	#WPA_KEY_INDEX_MASK
 0x30

	)

135 
	#WPA_KEY_INDEX_SHIFT
 0x04

	)

138 
	#WPA_KEY_ENCRYPTED_DATA
 0x1000

	)

141 
BWL_PRE_PACKED_STRUCT
 struct {

142 
uöt8
 
	mty≥
;

143 
uöt8
 
	mÀngth
;

144 
uöt8
 
	moui
[3];

145 
uöt8
 
	msubty≥
;

146 
uöt8
 
	md©a
[1];

147 } 
	tBWL_POST_PACKED_STRUCT
 
	tópﬁ_w∑2_íˇp_d©a_t
;

149 
	#EAPOL_WPA2_ENCAP_DATA_HDR_LEN
 6

	)

151 
	#WPA2_KEY_DATA_SUBTYPE_GTK
 1

	)

152 
	#WPA2_KEY_DATA_SUBTYPE_STAKEY
 2

	)

153 
	#WPA2_KEY_DATA_SUBTYPE_MAC
 3

	)

154 
	#WPA2_KEY_DATA_SUBTYPE_PMKID
 4

	)

155 
	#WPA2_KEY_DATA_SUBTYPE_IGTK
 9

	)

158 
BWL_PRE_PACKED_STRUCT
 struct {

159 
uöt8
 
	mÊags
;

160 
uöt8
 
	mª£rved
;

161 
uöt8
 
	mgtk
[
EAPOL_WPA_MAX_KEY_SIZE
];

162 } 
	tBWL_POST_PACKED_STRUCT
 
	tópﬁ_w∑2_key_gtk_íˇp_t
;

164 
	#EAPOL_WPA2_KEY_GTK_ENCAP_HDR_LEN
 2

	)

166 
	#WPA2_GTK_INDEX_MASK
 0x03

	)

167 
	#WPA2_GTK_INDEX_SHIFT
 0x00

	)

169 
	#WPA2_GTK_TRANSMIT
 0x04

	)

172 
BWL_PRE_PACKED_STRUCT
 struct {

173 
uöt16
 
	mkey_id
;

174 
uöt8
 
	mùn
[6];

175 
uöt8
 
	mkey
[
EAPOL_WPA_MAX_KEY_SIZE
];

176 } 
	tBWL_POST_PACKED_STRUCT
 
	tópﬁ_w∑2_key_igtk_íˇp_t
;

178 
	#EAPOL_WPA2_KEY_IGTK_ENCAP_HDR_LEN
 8

	)

181 
BWL_PRE_PACKED_STRUCT
 struct {

182 
uöt8
 
	mª£rved
[2];

183 
uöt8
 
	mmac
[
ETHER_ADDR_LEN
];

184 
uöt8
 
	m°akey
[
EAPOL_WPA_MAX_KEY_SIZE
];

185 } 
	tBWL_POST_PACKED_STRUCT
 
	tópﬁ_w∑2_key_°akey_íˇp_t
;

187 
	#WPA2_KEY_DATA_PAD
 0xdd

	)

191 
	~<∑cked_£˘i⁄_íd.h
>

	@include/proto/ethernet.h

27 #i‚de‡
_NET_ETHERNET_H_


28 
	#_NET_ETHERNET_H_


	)

30 #i‚de‡
_TYPEDEFS_H_


31 
	~"ty≥defs.h
"

35 
	~<∑cked_£˘i⁄_°¨t.h
>

41 
	#ETHER_ADDR_LEN
 6

	)

46 
	#ETHER_TYPE_LEN
 2

	)

51 
	#ETHER_CRC_LEN
 4

	)

56 
	#ETHER_HDR_LEN
 (
ETHER_ADDR_LEN
 * 2 + 
ETHER_TYPE_LEN
)

	)

61 
	#ETHER_MIN_LEN
 64

	)

66 
	#ETHER_MIN_DATA
 46

	)

71 
	#ETHER_MAX_LEN
 1518

	)

76 
	#ETHER_MAX_DATA
 1500

	)

79 
	#ETHER_TYPE_MIN
 0x0600

	)

80 
	#ETHER_TYPE_IP
 0x0800

	)

81 
	#ETHER_TYPE_ARP
 0x0806

	)

82 
	#ETHER_TYPE_8021Q
 0x8100

	)

83 
	#ETHER_TYPE_IPV6
 0x86dd

	)

84 
	#ETHER_TYPE_BRCM
 0x886¯

	)

85 
	#ETHER_TYPE_802_1X
 0x888ê

	)

86 
	#ETHER_TYPE_802_1X_PREAUTH
 0x88c7

	)

87 
	#ETHER_TYPE_WAI
 0x88b4

	)

88 
	#ETHER_TYPE_89_0D
 0x890d

	)

90 
	#ETHER_TYPE_IPV6
 0x86dd

	)

93 
	#ETHER_BRCM_SUBTYPE_LEN
 4

	)

96 
	#ETHER_DEST_OFFSET
 (0 * 
ETHER_ADDR_LEN
Ë

	)

97 
	#ETHER_SRC_OFFSET
 (1 * 
ETHER_ADDR_LEN
Ë

	)

98 
	#ETHER_TYPE_OFFSET
 (2 * 
ETHER_ADDR_LEN
Ë

	)

103 
	#ETHER_IS_VALID_LEN
(
foo
) \

104 ((
foo
Ë>
ETHER_MIN_LEN
 && (fooË<
ETHER_MAX_LEN
)

	)

106 
	#ETHER_FILL_MCAST_ADDR_FROM_IP
(
ó
, 
mgΩ_ù
) { \

107 ((
uöt8
 *)
ó
)[0] = 0x01; \

108 ((
uöt8
 *)
ó
)[1] = 0x00; \

109 ((
uöt8
 *)
ó
)[2] = 0x5e; \

110 ((
uöt8
 *)
ó
)[3] = ((
mgΩ_ù
) >> 16) & 0x7f; \

111 ((
uöt8
 *)
ó
)[4] = ((
mgΩ_ù
) >> 8) & 0xff; \

112 ((
uöt8
 *)
ó
)[5] = ((
mgΩ_ù
) >> 0) & 0xff; \

113 }

	)

115 #i‚de‡
__INCif_ëhîh


119 
BWL_PRE_PACKED_STRUCT
 
	sëhî_hódî
 {

120 
uöt8
 
	mëhî_dho°
[
ETHER_ADDR_LEN
];

121 
uöt8
 
	mëhî_sho°
[
ETHER_ADDR_LEN
];

122 
uöt16
 
	mëhî_ty≥
;

123 } 
	gBWL_POST_PACKED_STRUCT
;

128 
BWL_PRE_PACKED_STRUCT
 
	sëhî_addr
 {

129 
uöt8
 
	mo˘ë
[
ETHER_ADDR_LEN
];

130 } 
	gBWL_POST_PACKED_STRUCT
;

137 
	#ETHER_SET_LOCALADDR
(
ó
Ë(((
uöt8
 *)”a))[0] = (((uöt8 *)”a))[0] | 2))

	)

138 
	#ETHER_IS_LOCALADDR
(
ó
Ë(((
uöt8
 *)”a))[0] & 2)

	)

139 
	#ETHER_CLR_LOCALADDR
(
ó
Ë(((
uöt8
 *)”a))[0] = (((uöt8 *)”a))[0] & 0xfd))

	)

140 
	#ETHER_TOGGLE_LOCALADDR
(
ó
Ë(((
uöt8
 *)”a))[0] = (((uöt8 *)”a))[0] ^ 2))

	)

143 
	#ETHER_SET_UNICAST
(
ó
Ë(((
uöt8
 *)”a))[0] = (((uöt8 *)”a))[0] & ~1))

	)

149 
	#ETHER_ISMULTI
(
ó
Ë(((c⁄° 
uöt8
 *)”a))[0] & 1)

	)

153 
	#ëhî_cmp
(
a
, 
b
) (!(((*)(a))[0] == ((*)(b))[0]) | \

154 !(((*)(
a
))[1] =((*)(
b
))[1]) | \

155 !(((*)(
a
))[2] =((*)(
b
))[2]))

	)

158 
	#ëhî_c›y
(
s
, 
d
) { \

159 ((*)(
d
))[0] = ((c⁄° *)(
s
))[0]; \

160 ((*)(
d
))[1] = ((c⁄° *)(
s
))[1]; \

161 ((*)(
d
))[2] = ((c⁄° *)(
s
))[2]; }

	)

164 c⁄° 
ëhî_addr
 
	gëhî_bˇ°
 = {{255, 255, 255, 255, 255, 255}};

165 c⁄° 
ëhî_addr
 
	gëhî_nuŒ
 = {{0, 0, 0, 0, 0, 0}};

167 
	#ETHER_ISBCAST
(
ó
Ë((((
uöt8
 *)(ea))[0] & \

168 ((
uöt8
 *)(
ó
))[1] & \

169 ((
uöt8
 *)(
ó
))[2] & \

170 ((
uöt8
 *)(
ó
))[3] & \

171 ((
uöt8
 *)(
ó
))[4] & \

172 ((
uöt8
 *)(
ó
))[5]Ë=0xff)

	)

173 
	#ETHER_ISNULLADDR
(
ó
Ë((((
uöt8
 *)(ea))[0] | \

174 ((
uöt8
 *)(
ó
))[1] | \

175 ((
uöt8
 *)(
ó
))[2] | \

176 ((
uöt8
 *)(
ó
))[3] | \

177 ((
uöt8
 *)(
ó
))[4] | \

178 ((
uöt8
 *)(
ó
))[5]Ë=0)

	)

180 
	#ETHER_MOVE_HDR
(
d
, 
s
) \

182 
ëhî_hódî
 
t
; \

183 
t
 = *(
ëhî_hódî
 *)(
s
); \

184 *(
ëhî_hódî
 *)(
d
Ë
t
; \

185 } 0)

	)

188 
	~<∑cked_£˘i⁄_íd.h
>

	@include/proto/p2p.h

27 #i‚de‡
_P2P_H_


28 
	#_P2P_H_


	)

30 #i‚de‡
_TYPEDEFS_H_


31 
	~<ty≥defs.h
>

33 
	~<wlio˘l.h
>

34 
	~<¥Ÿo/802.11.h
>

37 
	~<∑cked_£˘i⁄_°¨t.h
>

41 
	#P2P_OUI
 
WFA_OUI


	)

42 
	#P2P_VER
 
WFA_OUI_TYPE_P2P


	)

44 
	#P2P_IE_ID
 0xdd

	)

47 
BWL_PRE_PACKED_STRUCT
 
	swifi_p2p_õ
 {

48 
uöt8
 
	mid
;

49 
uöt8
 
	mÀn
;

50 
uöt8
 
	mOUI
[3];

51 
uöt8
 
	moui_ty≥
;

52 
uöt8
 
	msubñts
[1];

53 } 
	gBWL_POST_PACKED_STRUCT
;

54 
wifi_p2p_õ
 
	twifi_p2p_õ_t
;

56 
	#P2P_IE_FIXED_LEN
 6

	)

58 
	#P2P_ATTR_ID_OFF
 0

	)

59 
	#P2P_ATTR_LEN_OFF
 1

	)

60 
	#P2P_ATTR_DATA_OFF
 3

	)

62 
	#P2P_ATTR_ID_LEN
 1

	)

63 
	#P2P_ATTR_LEN_LEN
 2

	)

64 
	#P2P_ATTR_HDR_LEN
 3

	)

67 
	#P2P_SEID_STATUS
 0

	)

68 
	#P2P_SEID_MINOR_RC
 1

	)

69 
	#P2P_SEID_P2P_INFO
 2

	)

70 
	#P2P_SEID_DEV_ID
 3

	)

71 
	#P2P_SEID_INTENT
 4

	)

72 
	#P2P_SEID_CFG_TIMEOUT
 5

	)

73 
	#P2P_SEID_CHANNEL
 6

	)

74 
	#P2P_SEID_GRP_BSSID
 7

	)

75 
	#P2P_SEID_XT_TIMING
 8

	)

76 
	#P2P_SEID_INTINTADDR
 9

	)

77 
	#P2P_SEID_P2P_MGBTY
 10

	)

78 
	#P2P_SEID_CHAN_LIST
 11

	)

79 
	#P2P_SEID_ABSENCE
 12

	)

80 
	#P2P_SEID_DEV_INFO
 13

	)

81 
	#P2P_SEID_GROUP_INFO
 14

	)

82 
	#P2P_SEID_GROUP_ID
 15

	)

83 
	#P2P_SEID_P2P_IF
 16

	)

84 
	#P2P_SEID_OP_CHANNEL
 17

	)

85 
	#P2P_SEID_INVITE_FLAGS
 18

	)

86 
	#P2P_SEID_VNDR
 221

	)

88 
	#P2P_SE_VS_ID_SERVICES
 0x1b

	)

92 
BWL_PRE_PACKED_STRUCT
 
	swifi_p2p_öfo_£_s
 {

93 
uöt8
 
	mñtId
;

94 
uöt8
 
	mÀn
[2];

95 
uöt8
 
	mdev
;

96 
uöt8
 
	mgroup
;

97 } 
	gBWL_POST_PACKED_STRUCT
;

98 
wifi_p2p_öfo_£_s
 
	twifi_p2p_öfo_£_t
;

101 
	#P2P_CAPSE_DEV_SERVICE_DIS
 0x1

	)

102 
	#P2P_CAPSE_DEV_CLIENT_DIS
 0x2

	)

103 
	#P2P_CAPSE_DEV_CONCURRENT
 0x4

	)

104 
	#P2P_CAPSE_DEV_INFRA_MAN
 0x8

	)

105 
	#P2P_CAPSE_DEV_LIMIT
 0x10

	)

106 
	#P2P_CAPSE_INVITE_PROC
 0x20

	)

109 
	#P2P_CAPSE_GRP_OWNER
 0x1

	)

110 
	#P2P_CAPSE_PERSIST_GRP
 0x2

	)

111 
	#P2P_CAPSE_GRP_LIMIT
 0x4

	)

112 
	#P2P_CAPSE_GRP_INTRA_BSS
 0x8

	)

113 
	#P2P_CAPSE_GRP_X_CONNECT
 0x10

	)

114 
	#P2P_CAPSE_GRP_PERSISTENT
 0x20

	)

115 
	#P2P_CAPSE_GRP_FORMATION
 0x40

	)

119 
BWL_PRE_PACKED_STRUCT
 
	swifi_p2p_öã¡_£_s
 {

120 
uöt8
 
	mñtId
;

121 
uöt8
 
	mÀn
[2];

122 
uöt8
 
	möã¡
;

123 } 
	gBWL_POST_PACKED_STRUCT
;

124 
wifi_p2p_öã¡_£_s
 
	twifi_p2p_öã¡_£_t
;

127 
BWL_PRE_PACKED_STRUCT
 
	swifi_p2p_cfg_tmo_£_s
 {

128 
uöt8
 
	mñtId
;

129 
uöt8
 
	mÀn
[2];

130 
uöt8
 
	mgo_tmo
;

131 
uöt8
 
	m˛õ¡_tmo
;

132 } 
	gBWL_POST_PACKED_STRUCT
;

133 
wifi_p2p_cfg_tmo_£_s
 
	twifi_p2p_cfg_tmo_£_t
;

136 
BWL_PRE_PACKED_STRUCT
 
	swifi_p2p_li°í_ch™√l_£_s
 {

137 
uöt8
 
	mñtId
;

138 
uöt8
 
	mÀn
[2];

139 
uöt8
 
	mcou¡ry
[3];

140 
uöt8
 
	m›_˛ass
;

141 
uöt8
 
	mch™√l
;

142 } 
	gBWL_POST_PACKED_STRUCT
;

143 
wifi_p2p_li°í_ch™√l_£_s
 
	twifi_p2p_li°í_ch™√l_£_t
;

146 
BWL_PRE_PACKED_STRUCT
 
	swifi_p2p_gΩ_bssid_£_s
 {

147 
uöt8
 
	mñtId
;

148 
uöt8
 
	mÀn
[2];

149 
uöt8
 
	mmac
[6];

150 } 
	gBWL_POST_PACKED_STRUCT
;

151 
wifi_p2p_gΩ_bssid_£_s
 
	twifi_p2p_gΩ_bssid_£_t
;

154 
BWL_PRE_PACKED_STRUCT
 
	swifi_p2p_gΩ_id_£_s
 {

155 
uöt8
 
	mñtId
;

156 
uöt8
 
	mÀn
[2];

157 
uöt8
 
	mmac
[6];

158 
uöt8
 
	mssid
[1];

159 } 
	gBWL_POST_PACKED_STRUCT
;

160 
wifi_p2p_gΩ_id_£_s
 
	twifi_p2p_gΩ_id_£_t
;

163 
BWL_PRE_PACKED_STRUCT
 
	swifi_p2p_ötf_£_s
 {

164 
uöt8
 
	mñtId
;

165 
uöt8
 
	mÀn
[2];

166 
uöt8
 
	mmac
[6];

167 
uöt8
 
	miÁddrs
;

168 
uöt8
 
	miÁddr
[1][6];

169 } 
	gBWL_POST_PACKED_STRUCT
;

170 
wifi_p2p_ötf_£_s
 
	twifi_p2p_ötf_£_t
;

173 
BWL_PRE_PACKED_STRUCT
 
	swifi_p2p_°©us_£_s
 {

174 
uöt8
 
	mñtId
;

175 
uöt8
 
	mÀn
[2];

176 
uöt8
 
	m°©us
;

177 } 
	gBWL_POST_PACKED_STRUCT
;

178 
wifi_p2p_°©us_£_s
 
	twifi_p2p_°©us_£_t
;

181 
	#P2P_STATSE_SUCCESS
 0

	)

183 
	#P2P_STATSE_FAIL_INFO_CURR_UNAVAIL
 1

	)

185 
	#P2P_STATSE_PASSED_UP
 
P2P_STATSE_FAIL_INFO_CURR_UNAVAIL


	)

187 
	#P2P_STATSE_FAIL_INCOMPAT_PARAMS
 2

	)

189 
	#P2P_STATSE_FAIL_LIMIT_REACHED
 3

	)

191 
	#P2P_STATSE_FAIL_INVALID_PARAMS
 4

	)

193 
	#P2P_STATSE_FAIL_UNABLE_TO_ACCOM
 5

	)

195 
	#P2P_STATSE_FAIL_PROTO_ERROR
 6

	)

197 
	#P2P_STATSE_FAIL_NO_COMMON_CHAN
 7

	)

199 
	#P2P_STATSE_FAIL_UNKNOWN_GROUP
 8

	)

201 
	#P2P_STATSE_FAIL_INTENT
 9

	)

203 
	#P2P_STATSE_FAIL_INCOMPAT_PROVIS
 10

	)

205 
	#P2P_STATSE_FAIL_USER_REJECT
 11

	)

209 
BWL_PRE_PACKED_STRUCT
 
	swifi_p2p_ext_£_s
 {

210 
uöt8
 
	mñtId
;

211 
uöt8
 
	mÀn
[2];

212 
uöt8
 
	mavaû
[2];

213 
uöt8
 
	möãrvÆ
[2];

214 } 
	gBWL_POST_PACKED_STRUCT
;

215 
wifi_p2p_ext_£_s
 
	twifi_p2p_ext_£_t
;

217 
	#P2P_EXT_MIN
 10

	)

220 
BWL_PRE_PACKED_STRUCT
 
	swifi_p2p_ötöèd_£_s
 {

221 
uöt8
 
	mñtId
;

222 
uöt8
 
	mÀn
[2];

223 
uöt8
 
	mmac
[6];

224 } 
	gBWL_POST_PACKED_STRUCT
;

225 
wifi_p2p_ötöèd_£_s
 
	twifi_p2p_ötöèd_£_t
;

228 
BWL_PRE_PACKED_STRUCT
 
	swifi_p2p_ch™√l_£_s
 {

229 
uöt8
 
	mñtId
;

230 
uöt8
 
	mÀn
[2];

231 
uöt8
 
	mb™d
;

232 
uöt8
 
	mch™√l
;

233 } 
	gBWL_POST_PACKED_STRUCT
;

234 
wifi_p2p_ch™√l_£_s
 
	twifi_p2p_ch™√l_£_t
;

238 
BWL_PRE_PACKED_STRUCT
 
	swifi_p2p_ch™li°_íåy_s
 {

239 
uöt8
 
	mb™d
;

240 
uöt8
 
	mnum_ch™√ls
;

241 
uöt8
 
	mch™√ls
[
WL_NUMCHANNELS
];

242 } 
	gBWL_POST_PACKED_STRUCT
;

243 
wifi_p2p_ch™li°_íåy_s
 
	twifi_p2p_ch™li°_íåy_t
;

244 
	#WIFI_P2P_CHANLIST_SE_MAX_ENTRIES
 2

	)

247 
BWL_PRE_PACKED_STRUCT
 
	swifi_p2p_ch™li°_£_s
 {

248 
uöt8
 
	mñtId
;

249 
uöt8
 
	mÀn
[2];

250 
uöt8
 
	mcou¡ry
[3];

251 
uöt8
 
	mnum_íåõs
;

252 
wifi_p2p_ch™li°_íåy_t
 
	míåõs
[
WIFI_P2P_CHANLIST_SE_MAX_ENTRIES
];

254 } 
	gBWL_POST_PACKED_STRUCT
;

255 
wifi_p2p_ch™li°_£_s
 
	twifi_p2p_ch™li°_£_t
;

258 
BWL_PRE_PACKED_STRUCT
 
	swifi_p2p_¥i_devty≥_s
 {

259 
uöt16
 
	mˇt_id
;

260 
uöt8
 
	mOUI
[3];

261 
uöt8
 
	moui_ty≥
;

262 
uöt16
 
	msub_ˇt_id
;

263 } 
	gBWL_POST_PACKED_STRUCT
;

264 
wifi_p2p_¥i_devty≥_s
 
	twifi_p2p_¥i_devty≥_t
;

267 
BWL_PRE_PACKED_STRUCT
 
	swifi_p2p_devöfo_£_s
 {

268 
uöt8
 
	mñtId
;

269 
uöt8
 
	mÀn
[2];

270 
uöt8
 
	mmac
[6];

271 
uöt16
 
	mwps_cfg_mëhs
;

272 
uöt8
 
	m¥i_devty≥
[8];

273 } 
	gBWL_POST_PACKED_STRUCT
;

274 
wifi_p2p_devöfo_£_s
 
	twifi_p2p_devöfo_£_t
;

276 
	#P2P_DEV_TYPE_LEN
 8

	)

279 
BWL_PRE_PACKED_STRUCT
 
	swifi_p2p_cid_fixed_s
 {

280 
uöt8
 
	mÀn
;

281 
uöt8
 
	mdevaddr
[
ETHER_ADDR_LEN
];

282 
uöt8
 
	miÁddr
[
ETHER_ADDR_LEN
];

283 
uöt8
 
	mdevˇp
;

284 
uöt8
 
	mcfg_mëhs
[2];

285 
uöt8
 
	m¥idt
[
P2P_DEV_TYPE_LEN
];

286 
uöt8
 
	m£cdts
;

287 } 
	gBWL_POST_PACKED_STRUCT
;

288 
wifi_p2p_cid_fixed_s
 
	twifi_p2p_cid_fixed_t
;

291 
BWL_PRE_PACKED_STRUCT
 
	swifi_p2p_devid_£_s
 {

292 
uöt8
 
	mñtId
;

293 
uöt8
 
	mÀn
[2];

294 
ëhî_addr
 
	maddr
;

295 } 
	gBWL_POST_PACKED_STRUCT
;

296 
wifi_p2p_devid_£_s
 
	twifi_p2p_devid_£_t
;

299 
BWL_PRE_PACKED_STRUCT
 
	swifi_p2p_mgbt_£_s
 {

300 
uöt8
 
	mñtId
;

301 
uöt8
 
	mÀn
[2];

302 
uöt8
 
	mmg_bôm≠
;

303 } 
	gBWL_POST_PACKED_STRUCT
;

304 
wifi_p2p_mgbt_£_s
 
	twifi_p2p_mgbt_£_t
;

306 
	#P2P_MGBTSE_P2PDEVMGMT_FLAG
 0x1

	)

309 
BWL_PRE_PACKED_STRUCT
 
	swifi_p2p_gΩöfo_£_s
 {

310 
uöt8
 
	mñtId
;

311 
uöt8
 
	mÀn
[2];

312 } 
	gBWL_POST_PACKED_STRUCT
;

313 
wifi_p2p_gΩöfo_£_s
 
	twifi_p2p_gΩöfo_£_t
;

316 
BWL_PRE_PACKED_STRUCT
 
	swifi_p2p_›_ch™√l_£_s
 {

317 
uöt8
 
	mñtId
;

318 
uöt8
 
	mÀn
[2];

319 
uöt8
 
	mcou¡ry
[3];

320 
uöt8
 
	m›_˛ass
;

321 
uöt8
 
	mch™√l
;

322 } 
	gBWL_POST_PACKED_STRUCT
;

323 
wifi_p2p_›_ch™√l_£_s
 
	twifi_p2p_›_ch™√l_£_t
;

326 
BWL_PRE_PACKED_STRUCT
 
	swifi_p2p_övôe_Êags_£_s
 {

327 
uöt8
 
	mñtId
;

328 
uöt8
 
	mÀn
[2];

329 
uöt8
 
	mÊags
;

330 } 
	gBWL_POST_PACKED_STRUCT
;

331 
wifi_p2p_övôe_Êags_£_s
 
	twifi_p2p_övôe_Êags_£_t
;

334 
BWL_PRE_PACKED_STRUCT
 
	swifi_p2p_a˘i⁄_‰ame
 {

335 
uöt8
 
	mˇãg‹y
;

336 
uöt8
 
	mOUI
[3];

337 
uöt8
 
	mty≥
;

338 
uöt8
 
	msubty≥
;

339 
uöt8
 
	mdülog_tokí
;

340 
uöt8
 
	mñts
[1];

343 } 
	gBWL_POST_PACKED_STRUCT
;

344 
wifi_p2p_a˘i⁄_‰ame
 
	twifi_p2p_a˘i⁄_‰ame_t
;

345 
	#P2P_AF_CATEGORY
 0x7f

	)

347 
	#P2P_AF_FIXED_LEN
 7

	)

350 
	#P2P_AF_NOTICE_OF_ABSENCE
 0

	)

351 
	#P2P_AF_PRESENCE_REQ
 1

	)

352 
	#P2P_AF_PRESENCE_RSP
 2

	)

353 
	#P2P_AF_GO_DISC_REQ
 3

	)

357 
BWL_PRE_PACKED_STRUCT
 
	swifi_p2p_pub_a˘_‰ame
 {

358 
uöt8
 
	mˇãg‹y
;

359 
uöt8
 
	ma˘i⁄
;

360 
uöt8
 
	moui
[3];

361 
uöt8
 
	moui_ty≥
;

362 
uöt8
 
	msubty≥
;

363 
uöt8
 
	mdülog_tokí
;

364 
uöt8
 
	mñts
[1];

367 } 
	gBWL_POST_PACKED_STRUCT
;

368 
wifi_p2p_pub_a˘_‰ame
 
	twifi_p2p_pub_a˘_‰ame_t
;

369 
	#P2P_PUB_AF_FIXED_LEN
 8

	)

370 
	#P2P_PUB_AF_CATEGORY
 0x04

	)

371 
	#P2P_PUB_AF_ACTION
 0x09

	)

374 
	#P2P_PAF_GON_REQ
 0

	)

375 
	#P2P_PAF_GON_RSP
 1

	)

376 
	#P2P_PAF_GON_CONF
 2

	)

377 
	#P2P_PAF_INVITE_REQ
 3

	)

378 
	#P2P_PAF_INVITE_RSP
 4

	)

379 
	#P2P_PAF_DEVDIS_REQ
 5

	)

380 
	#P2P_PAF_DEVDIS_RSP
 6

	)

381 
	#P2P_PAF_PROVDIS_REQ
 7

	)

382 
	#P2P_PAF_PROVDIS_RSP
 8

	)

383 
	#P2P_PAF_SUBTYPE_INVALID
 255

	)

386 
	#P2P_TYPE_MNREQ
 
P2P_PAF_GON_REQ


	)

387 
	#P2P_TYPE_MNRSP
 
P2P_PAF_GON_RSP


	)

388 
	#P2P_TYPE_MNCONF
 
P2P_PAF_GON_CONF


	)

391 
BWL_PRE_PACKED_STRUCT
 
	swifi_p2p_nﬂ_desc
 {

392 
uöt8
 
	m˙t_ty≥
;

393 
uöt32
 
	mduøti⁄
;

394 
uöt32
 
	möãrvÆ
;

395 
uöt32
 
	m°¨t
;

396 } 
	gBWL_POST_PACKED_STRUCT
;

397 
wifi_p2p_nﬂ_desc
 
	twifi_p2p_nﬂ_desc_t
;

399 
BWL_PRE_PACKED_STRUCT
 
	swifi_p2p_nﬂ_£
 {

400 
uöt8
 
	mñtId
;

401 
uöt8
 
	mÀn
[2];

402 
uöt8
 
	mödex
;

403 
uöt8
 
	m›s_˘w_∑rms
;

404 
wifi_p2p_nﬂ_desc_t
 
	mdesc
[1];

405 } 
	gBWL_POST_PACKED_STRUCT
;

406 
wifi_p2p_nﬂ_£
 
	twifi_p2p_nﬂ_£_t
;

408 
	#P2P_NOA_SE_FIXED_LEN
 5

	)

411 
	#P2P_NOA_DESC_CNT_RESERVED
 0

	)

412 
	#P2P_NOA_DESC_CNT_REPEAT
 255

	)

413 
	#P2P_NOA_DESC_TYPE_PREFERRED
 1

	)

414 
	#P2P_NOA_DESC_TYPE_ACCEPTABLE
 2

	)

417 
	#P2P_NOA_CTW_MASK
 0x7f

	)

418 
	#P2P_NOA_OPS_MASK
 0x80

	)

419 
	#P2P_NOA_OPS_SHIFT
 7

	)

421 
	#P2P_CTW_MIN
 10

	)

426 
	#P2PSD_ACTION_CATEGORY
 0x04

	)

428 
	#P2PSD_ACTION_ID_GAS_IREQ
 0x0a

	)

430 
	#P2PSD_ACTION_ID_GAS_IRESP
 0x0b

	)

432 
	#P2PSD_ACTION_ID_GAS_CREQ
 0x0c

	)

434 
	#P2PSD_ACTION_ID_GAS_CRESP
 0x0d

	)

436 
	#P2PSD_AD_EID
 0x6c

	)

438 
	#P2PSD_ADP_TUPLE_QLMT_PAMEBI
 0x00

	)

440 
	#P2PSD_ADP_PROTO_ID
 0x00

	)

442 
	#P2PSD_GAS_OUI
 
P2P_OUI


	)

444 
	#P2PSD_GAS_OUI_SUBTYPE
 
P2P_VER


	)

446 
	#P2PSD_GAS_NQP_INFOID
 0xDDDD

	)

448 
	#P2PSD_GAS_COMEBACKDEALY
 0x00

	)

452 
	ep2psd_svc_¥Ÿy≥
 {

453 
	mSVC_RPOTYPE_ALL
 = 0,

454 
	mSVC_RPOTYPE_BONJOUR
 = 1,

455 
	mSVC_RPOTYPE_UPNP
 = 2,

456 
	mSVC_RPOTYPE_WSD
 = 3,

457 
	mSVC_RPOTYPE_VENDOR
 = 255

458 } 
	tp2psd_svc_¥Ÿy≥_t
;

462 
	mP2PSD_RESP_STATUS_SUCCESS
 = 0,

463 
	mP2PSD_RESP_STATUS_PROTYPE_NA
 = 1,

464 
	mP2PSD_RESP_STATUS_DATA_NA
 = 2,

465 
	mP2PSD_RESP_STATUS_BAD_REQUEST
 = 3

466 } 
	tp2psd_ª•_°©us_t
;

469 
BWL_PRE_PACKED_STRUCT
 
	swifi_p2psd_adp_çl
 {

470 
uöt8
 
	mŒm_∑mebi
;

473 
uöt8
 
	madp_id
;

474 } 
	gBWL_POST_PACKED_STRUCT
;

475 
wifi_p2psd_adp_çl
 
	twifi_p2psd_adp_çl_t
;

478 
BWL_PRE_PACKED_STRUCT
 
	swifi_p2psd_adp_õ
 {

479 
uöt8
 
	mid
;

480 
uöt8
 
	mÀn
;

481 
wifi_p2psd_adp_çl_t
 
	madp_çl
;

484 } 
	gBWL_POST_PACKED_STRUCT
;

485 
wifi_p2psd_adp_õ
 
	twifi_p2psd_adp_õ_t
;

488 
BWL_PRE_PACKED_STRUCT
 
	swifi_p2psd_nqp_quîy_vsc
 {

489 
uöt8
 
	moui_subty≥
;

490 
uöt16
 
	msvc_updi
;

491 
uöt8
 
	msvc_évs
[1];

494 } 
	gBWL_POST_PACKED_STRUCT
;

495 
wifi_p2psd_nqp_quîy_vsc
 
	twifi_p2psd_nqp_quîy_vsc_t
;

498 
BWL_PRE_PACKED_STRUCT
 
	swifi_p2psd_qªq_év
 {

499 
uöt16
 
	mÀn
;

500 
uöt8
 
	msvc_¥Ÿ
;

501 
uöt8
 
	msvc_tscid
;

502 
uöt8
 
	mquîy_d©a
[1];

503 } 
	gBWL_POST_PACKED_STRUCT
;

504 
wifi_p2psd_qªq_év
 
	twifi_p2psd_qªq_év_t
;

507 
BWL_PRE_PACKED_STRUCT
 
	swifi_p2psd_qªq_‰ame
 {

508 
uöt16
 
	möfo_id
;

509 
uöt16
 
	mÀn
;

510 
uöt8
 
	moui
[3];

511 
uöt8
 
	mqªq_vsc
[1];

513 } 
	gBWL_POST_PACKED_STRUCT
;

514 
wifi_p2psd_qªq_‰ame
 
	twifi_p2psd_qªq_‰ame_t
;

517 
BWL_PRE_PACKED_STRUCT
 
	swifi_p2psd_gas_úeq_‰ame
 {

518 
wifi_p2psd_adp_õ_t
 
	madp_õ
;

519 
uöt16
 
	mqªq_Àn
;

520 
uöt8
 
	mqªq_‰m
[1];

521 } 
	gBWL_POST_PACKED_STRUCT
;

522 
wifi_p2psd_gas_úeq_‰ame
 
	twifi_p2psd_gas_úeq_‰ame_t
;

525 
BWL_PRE_PACKED_STRUCT
 
	swifi_p2psd_qª•_év
 {

526 
uöt16
 
	mÀn
;

527 
uöt8
 
	msvc_¥Ÿ
;

528 
uöt8
 
	msvc_tscid
;

529 
uöt8
 
	m°©us
;

530 
uöt8
 
	mquîy_d©a
[1];

531 } 
	gBWL_POST_PACKED_STRUCT
;

532 
wifi_p2psd_qª•_év
 
	twifi_p2psd_qª•_év_t
;

535 
BWL_PRE_PACKED_STRUCT
 
	swifi_p2psd_qª•_‰ame
 {

536 
uöt16
 
	möfo_id
;

537 
uöt16
 
	mÀn
;

538 
uöt8
 
	moui
[3];

539 
uöt8
 
	mqª•_vsc
[1];

541 } 
	gBWL_POST_PACKED_STRUCT
;

542 
wifi_p2psd_qª•_‰ame
 
	twifi_p2psd_qª•_‰ame_t
;

545 
BWL_PRE_PACKED_STRUCT
 
	swifi_p2psd_gas_úe•_‰ame
 {

546 
uöt16
 
	m°©us
;

547 
uöt16
 
	mcb_dñay
;

548 
wifi_p2psd_adp_õ_t
 
	madp_õ
;

549 
uöt16
 
	mqª•_Àn
;

550 
uöt8
 
	mqª•_‰m
[1];

551 } 
	gBWL_POST_PACKED_STRUCT
;

552 
wifi_p2psd_gas_úe•_‰ame
 
	twifi_p2psd_gas_úe•_‰ame_t
;

555 
BWL_PRE_PACKED_STRUCT
 
	swifi_p2psd_gas_¸e•_‰ame
 {

556 
uöt16
 
	m°©us
;

557 
uöt8
 
	m‰agmít_id
;

558 
uöt16
 
	mcb_dñay
;

559 
wifi_p2psd_adp_õ_t
 
	madp_õ
;

560 
uöt16
 
	mqª•_Àn
;

561 
uöt8
 
	mqª•_‰m
[1];

562 } 
	gBWL_POST_PACKED_STRUCT
;

563 
wifi_p2psd_gas_¸e•_‰ame
 
	twifi_p2psd_gas_¸e•_‰ame_t
;

566 
BWL_PRE_PACKED_STRUCT
 
	swifi_p2psd_gas_pub_a˘_‰ame
 {

567 
uöt8
 
	mˇãg‹y
;

568 
uöt8
 
	ma˘i⁄
;

569 
uöt8
 
	mdülog_tokí
;

570 
uöt8
 
	mquîy_d©a
[1];

573 } 
	gBWL_POST_PACKED_STRUCT
;

574 
wifi_p2psd_gas_pub_a˘_‰ame
 
	twifi_p2psd_gas_pub_a˘_‰ame_t
;

577 
	~<∑cked_£˘i⁄_íd.h
>

	@include/proto/sdspi.h

26 #i‚def 
_SD_SPI_H


27 
	#_SD_SPI_H


	)

29 
	#SPI_START_M
 
	`BITFIELD_MASK
(1Ë

	)

30 
	#SPI_START_S
 31

	)

31 
	#SPI_DIR_M
 
	`BITFIELD_MASK
(1Ë

	)

32 
	#SPI_DIR_S
 30

	)

33 
	#SPI_CMD_INDEX_M
 
	`BITFIELD_MASK
(6Ë

	)

34 
	#SPI_CMD_INDEX_S
 24

	)

35 
	#SPI_RW_M
 
	`BITFIELD_MASK
(1Ë

	)

36 
	#SPI_RW_S
 23

	)

37 
	#SPI_FUNC_M
 
	`BITFIELD_MASK
(3Ë

	)

38 
	#SPI_FUNC_S
 20

	)

39 
	#SPI_RAW_M
 
	`BITFIELD_MASK
(1Ë

	)

40 
	#SPI_RAW_S
 19

	)

41 
	#SPI_STUFF_M
 
	`BITFIELD_MASK
(1Ë

	)

42 
	#SPI_STUFF_S
 18

	)

43 
	#SPI_BLKMODE_M
 
	`BITFIELD_MASK
(1Ë

	)

44 
	#SPI_BLKMODE_S
 19

	)

45 
	#SPI_OPCODE_M
 
	`BITFIELD_MASK
(1Ë

	)

46 
	#SPI_OPCODE_S
 18

	)

47 
	#SPI_ADDR_M
 
	`BITFIELD_MASK
(17Ë

	)

48 
	#SPI_ADDR_S
 1

	)

49 
	#SPI_STUFF0_M
 
	`BITFIELD_MASK
(1Ë

	)

50 
	#SPI_STUFF0_S
 0

	)

52 
	#SPI_RSP_START_M
 
	`BITFIELD_MASK
(1Ë

	)

53 
	#SPI_RSP_START_S
 7

	)

54 
	#SPI_RSP_PARAM_ERR_M
 
	`BITFIELD_MASK
(1Ë

	)

55 
	#SPI_RSP_PARAM_ERR_S
 6

	)

56 
	#SPI_RSP_RFU5_M
 
	`BITFIELD_MASK
(1Ë

	)

57 
	#SPI_RSP_RFU5_S
 5

	)

58 
	#SPI_RSP_FUNC_ERR_M
 
	`BITFIELD_MASK
(1Ë

	)

59 
	#SPI_RSP_FUNC_ERR_S
 4

	)

60 
	#SPI_RSP_CRC_ERR_M
 
	`BITFIELD_MASK
(1Ë

	)

61 
	#SPI_RSP_CRC_ERR_S
 3

	)

62 
	#SPI_RSP_ILL_CMD_M
 
	`BITFIELD_MASK
(1Ë

	)

63 
	#SPI_RSP_ILL_CMD_S
 2

	)

64 
	#SPI_RSP_RFU1_M
 
	`BITFIELD_MASK
(1Ë

	)

65 
	#SPI_RSP_RFU1_S
 1

	)

66 
	#SPI_RSP_IDLE_M
 
	`BITFIELD_MASK
(1Ë

	)

67 
	#SPI_RSP_IDLE_S
 0

	)

70 
	#SDSPI_COMMAND_LEN
 6

	)

71 
	#SDSPI_START_BLOCK
 0xFE

	)

72 
	#SDSPI_IDLE_PAD
 0xFF

	)

73 
	#SDSPI_START_BIT_MASK
 0x80

	)

	@include/proto/vlan.h

27 #i‚de‡
_vœn_h_


28 
	#_vœn_h_


	)

30 #i‚de‡
_TYPEDEFS_H_


31 
	~<ty≥defs.h
>

35 
	~<∑cked_£˘i⁄_°¨t.h
>

37 
	#VLAN_VID_MASK
 0xff‡

	)

38 
	#VLAN_CFI_SHIFT
 12

	)

39 
	#VLAN_PRI_SHIFT
 13

	)

41 
	#VLAN_PRI_MASK
 7

	)

43 
	#VLAN_TAG_LEN
 4

	)

44 
	#VLAN_TAG_OFFSET
 (2 * 
ETHER_ADDR_LEN
Ë

	)

46 
	#VLAN_TPID
 0x8100

	)

48 
	sëhîvœn_hódî
 {

49 
uöt8
 
	mëhî_dho°
[
ETHER_ADDR_LEN
];

50 
uöt8
 
	mëhî_sho°
[
ETHER_ADDR_LEN
];

51 
uöt16
 
	mvœn_ty≥
;

52 
uöt16
 
	mvœn_èg
;

53 
uöt16
 
	mëhî_ty≥
;

56 
	#ETHERVLAN_HDR_LEN
 (
ETHER_HDR_LEN
 + 
VLAN_TAG_LEN
)

	)

60 
	~<∑cked_£˘i⁄_íd.h
>

62 
	#ETHERVLAN_MOVE_HDR
(
d
, 
s
) \

64 
ëhîvœn_hódî
 
t
; \

65 
t
 = *(
ëhîvœn_hódî
 *)(
s
); \

66 *(
ëhîvœn_hódî
 *)(
d
Ë
t
; \

67 } 0)

	)

	@include/proto/wpa.h

27 #i‚de‡
_¥Ÿo_w∑_h_


28 
	#_¥Ÿo_w∑_h_


	)

30 
	~<ty≥defs.h
>

31 
	~<¥Ÿo/ëhî√t.h
>

35 
	~<∑cked_£˘i⁄_°¨t.h
>

40 
	#DOT11_RC_INVALID_WPA_IE
 13

	)

41 
	#DOT11_RC_MIC_FAILURE
 14

	)

42 
	#DOT11_RC_4WH_TIMEOUT
 15

	)

43 
	#DOT11_RC_GTK_UPDATE_TIMEOUT
 16

	)

44 
	#DOT11_RC_WPA_IE_MISMATCH
 17

	)

47 
	#DOT11_RC_INVALID_MC_CIPHER
 18

	)

48 
	#DOT11_RC_INVALID_UC_CIPHER
 19

	)

49 
	#DOT11_RC_INVALID_AKMP
 20

	)

50 
	#DOT11_RC_BAD_WPA_VERSION
 21

	)

51 
	#DOT11_RC_INVALID_WPA_CAP
 22

	)

52 
	#DOT11_RC_8021X_AUTH_FAIL
 23

	)

54 
	#WPA2_PMKID_LEN
 16

	)

57 
BWL_PRE_PACKED_STRUCT
 struct

59 
uöt8
 
	mèg
;

60 
uöt8
 
	mÀngth
;

61 
uöt8
 
	moui
[3];

62 
uöt8
 
	moui_ty≥
;

63 
BWL_PRE_PACKED_STRUCT
 struct {

64 
uöt8
 
	mlow
;

65 
uöt8
 
	mhigh
;

66 } 
BWL_POST_PACKED_STRUCT
 
	mvîsi⁄
;

67 } 
	tBWL_POST_PACKED_STRUCT
 
	tw∑_õ_fixed_t
;

68 
	#WPA_IE_OUITYPE_LEN
 4

	)

69 
	#WPA_IE_FIXED_LEN
 8

	)

70 
	#WPA_IE_TAG_FIXED_LEN
 6

	)

72 
BWL_PRE_PACKED_STRUCT
 struct {

73 
uöt8
 
	mèg
;

74 
uöt8
 
	mÀngth
;

75 
BWL_PRE_PACKED_STRUCT
 struct {

76 
uöt8
 
	mlow
;

77 
uöt8
 
	mhigh
;

78 } 
BWL_POST_PACKED_STRUCT
 
	mvîsi⁄
;

79 } 
	tBWL_POST_PACKED_STRUCT
 
	tw∑_r¢_õ_fixed_t
;

80 
	#WPA_RSN_IE_FIXED_LEN
 4

	)

81 
	#WPA_RSN_IE_TAG_FIXED_LEN
 2

	)

82 
uöt8
 
	tw∑_pmkid_t
[
WPA2_PMKID_LEN
];

85 
BWL_PRE_PACKED_STRUCT
 struct

87 
uöt8
 
	moui
[3];

88 
uöt8
 
	mty≥
;

89 } 
	tBWL_POST_PACKED_STRUCT
 
	tw∑_suôe_t
, 
	tw∑_suôe_mˇ°_t
;

90 
	#WPA_SUITE_LEN
 4

	)

93 
BWL_PRE_PACKED_STRUCT
 struct

95 
BWL_PRE_PACKED_STRUCT
 struct {

96 
uöt8
 
	mlow
;

97 
uöt8
 
	mhigh
;

98 } 
BWL_POST_PACKED_STRUCT
 
	mcou¡
;

99 
w∑_suôe_t
 
	mli°
[1];

100 } 
	tBWL_POST_PACKED_STRUCT
 
	tw∑_suôe_uˇ°_t
, 
	tw∑_suôe_auth_key_mgmt_t
;

101 
	#WPA_IE_SUITE_COUNT_LEN
 2

	)

102 
BWL_PRE_PACKED_STRUCT
 struct

104 
BWL_PRE_PACKED_STRUCT
 struct {

105 
uöt8
 
	mlow
;

106 
uöt8
 
	mhigh
;

107 } 
BWL_POST_PACKED_STRUCT
 
	mcou¡
;

108 
w∑_pmkid_t
 
	mli°
[1];

109 } 
	tBWL_POST_PACKED_STRUCT
 
	tw∑_pmkid_li°_t
;

112 
	#WPA_CIPHER_NONE
 0

	)

113 
	#WPA_CIPHER_WEP_40
 1

	)

114 
	#WPA_CIPHER_TKIP
 2

	)

115 
	#WPA_CIPHER_AES_OCB
 3

	)

116 
	#WPA_CIPHER_AES_CCM
 4

	)

117 
	#WPA_CIPHER_WEP_104
 5

	)

118 
	#WPA_CIPHER_BIP
 6

	)

119 
	#WPA_CIPHER_TPK
 7

	)

122 
	#IS_WPA_CIPHER
(
cùhî
Ë((cùhîË=
WPA_CIPHER_NONE
 || \

123 (
cùhî
Ë=
WPA_CIPHER_WEP_40
 || \

124 (
cùhî
Ë=
WPA_CIPHER_WEP_104
 || \

125 (
cùhî
Ë=
WPA_CIPHER_TKIP
 || \

126 (
cùhî
Ë=
WPA_CIPHER_AES_OCB
 || \

127 (
cùhî
Ë=
WPA_CIPHER_AES_CCM
 || \

128 (
cùhî
Ë=
WPA_CIPHER_TPK
)

	)

132 
	#WPA_TKIP_CM_DETECT
 60

	)

133 
	#WPA_TKIP_CM_BLOCK
 60

	)

136 
	#RSN_CAP_LEN
 2

	)

139 
	#RSN_CAP_PREAUTH
 0x0001

	)

140 
	#RSN_CAP_NOPAIRWISE
 0x0002

	)

141 
	#RSN_CAP_PTK_REPLAY_CNTR_MASK
 0x000C

	)

142 
	#RSN_CAP_PTK_REPLAY_CNTR_SHIFT
 2

	)

143 
	#RSN_CAP_GTK_REPLAY_CNTR_MASK
 0x0030

	)

144 
	#RSN_CAP_GTK_REPLAY_CNTR_SHIFT
 4

	)

145 
	#RSN_CAP_1_REPLAY_CNTR
 0

	)

146 
	#RSN_CAP_2_REPLAY_CNTRS
 1

	)

147 
	#RSN_CAP_4_REPLAY_CNTRS
 2

	)

148 
	#RSN_CAP_16_REPLAY_CNTRS
 3

	)

149 #ifde‡
MFP


150 
	#RSN_CAP_MFPR
 0x0040

	)

151 
	#RSN_CAP_MFPC
 0x0080

	)

155 
	#WPA_CAP_4_REPLAY_CNTRS
 
RSN_CAP_4_REPLAY_CNTRS


	)

156 
	#WPA_CAP_16_REPLAY_CNTRS
 
RSN_CAP_16_REPLAY_CNTRS


	)

157 
	#WPA_CAP_REPLAY_CNTR_SHIFT
 
RSN_CAP_PTK_REPLAY_CNTR_SHIFT


	)

158 
	#WPA_CAP_REPLAY_CNTR_MASK
 
RSN_CAP_PTK_REPLAY_CNTR_MASK


	)

161 
	#WPA_CAP_PEER_KEY_ENABLE
 (0x1 << 1Ë

	)

164 
	#WPA_CAP_LEN
 
RSN_CAP_LEN


	)

165 
	#WPA_PMKID_CNT_LEN
 2

	)

167 
	#WPA_CAP_WPA2_PREAUTH
 
RSN_CAP_PREAUTH


	)

169 
	#WPA2_PMKID_COUNT_LEN
 2

	)

173 
	~<∑cked_£˘i⁄_íd.h
>

	@include/sbchipc.h

31 #i‚def 
_SBCHIPC_H


32 
	#_SBCHIPC_H


	)

34 #i‚de‡
_LANGUAGE_ASSEMBLY


37 #i‚de‡
PAD


38 
	#_PADLINE
(
löe
Ë
∑d
 ## 
	)
line

39 
	#_XSTR
(
löe
Ë
	`_PADLINE
÷öe)

	)

40 
	#PAD
 
	`_XSTR
(
__LINE__
)

	)

43 
	seci_¥îev35
 {

44 
uöt32
 
	meci_ouçut
;

45 
uöt32
 
	meci_c⁄åﬁ
;

46 
uöt32
 
	meci_öpuéo
;

47 
uöt32
 
	meci_öputmi
;

48 
uöt32
 
	meci_öputhi
;

49 
uöt32
 
	meci_öputöçﬁ¨ôylo
;

50 
uöt32
 
	meci_öputöçﬁ¨ôymi
;

51 
uöt32
 
	meci_öputöçﬁ¨ôyhi
;

52 
uöt32
 
	meci_ötmasklo
;

53 
uöt32
 
	meci_ötmaskmi
;

54 
uöt32
 
	meci_ötmaskhi
;

55 
uöt32
 
	meci_evíéo
;

56 
uöt32
 
	meci_evítmi
;

57 
uöt32
 
	meci_evíthi
;

58 
uöt32
 
	meci_evítmasklo
;

59 
uöt32
 
	meci_evítmaskmi
;

60 
uöt32
 
	meci_evítmaskhi
;

61 
uöt32
 
	mPAD
[3];

62 } 
	teci_¥îev35_t
;

64 
	seci_ªv35
 {

65 
uöt32
 
	meci_ouçuéo
;

66 
uöt32
 
	meci_ouçuthi
;

67 
uöt32
 
	meci_c⁄åﬁlo
;

68 
uöt32
 
	meci_c⁄åﬁhi
;

69 
uöt32
 
	meci_öpuéo
;

70 
uöt32
 
	meci_öputhi
;

71 
uöt32
 
	meci_öputöçﬁ¨ôylo
;

72 
uöt32
 
	meci_öputöçﬁ¨ôyhi
;

73 
uöt32
 
	meci_ötmasklo
;

74 
uöt32
 
	meci_ötmaskhi
;

75 
uöt32
 
	meci_evíéo
;

76 
uöt32
 
	meci_evíthi
;

77 
uöt32
 
	meci_evítmasklo
;

78 
uöt32
 
	meci_evítmaskhi
;

79 
uöt32
 
	meci_auxtx
;

80 
uöt32
 
	meci_auxrx
;

81 
uöt32
 
	meci_d©©ag
;

82 
uöt32
 
	meci_u¨ãscvÆue
;

83 
uöt32
 
	meci_autobaud˘r
;

84 
uöt32
 
	meci_u¨tfifﬁevñ
;

85 } 
	teci_ªv35_t
;

87 
	sÊash_c⁄fig
 {

88 
uöt32
 
	mPAD
[19];

90 
uöt32
 
	mÊash°rc⁄fig
;

91 } 
	tÊash_c⁄fig_t
;

94 
uöt32
 
	mchùid
;

95 
uöt32
 
	mˇ∑bûôõs
;

96 
uöt32
 
	mc‹ec⁄åﬁ
;

97 
uöt32
 
	mbi°
;

100 
uöt32
 
	mŸp°©us
;

101 
uöt32
 
	mŸpc⁄åﬁ
;

102 
uöt32
 
	mŸµrog
;

103 
uöt32
 
	mŸ∂ayout
;

106 
uöt32
 
	möt°©us
;

107 
uöt32
 
	mötmask
;

110 
uöt32
 
	mchùc⁄åﬁ
;

111 
uöt32
 
	mchù°©us
;

114 
uöt32
 
	mjègcmd
;

115 
uöt32
 
	mjègú
;

116 
uöt32
 
	mjègdr
;

117 
uöt32
 
	mjèg˘æ
;

120 
uöt32
 
	mÊashc⁄åﬁ
;

121 
uöt32
 
	mÊashaddªss
;

122 
uöt32
 
	mÊashd©a
;

123 
uöt32
 
	mŸ∂ayouãxãnsi⁄
;

126 
uöt32
 
	mbrﬂdˇ°addªss
;

127 
uöt32
 
	mbrﬂdˇ°d©a
;

130 
uöt32
 
	mgpi›uŒup
;

131 
uöt32
 
	mgpi›uŒdown
;

132 
uöt32
 
	mgpioö
;

133 
uöt32
 
	mgpioout
;

134 
uöt32
 
	mgpioouãn
;

135 
uöt32
 
	mgpioc⁄åﬁ
;

136 
uöt32
 
	mgpioöçﬁ¨ôy
;

137 
uöt32
 
	mgpioötmask
;

140 
uöt32
 
	mgpi€vít
;

141 
uöt32
 
	mgpi€vítötmask
;

144 
uöt32
 
	mw©chdog
;

147 
uöt32
 
	mgpi€vítöçﬁ¨ôy
;

150 
uöt32
 
	mgpiŸimîvÆ
;

151 
uöt32
 
	mgpiŸimîoutmask
;

154 
uöt32
 
	m˛ockc⁄åﬁ_n
;

155 
uöt32
 
	m˛ockc⁄åﬁ_sb
;

156 
uöt32
 
	m˛ockc⁄åﬁ_pci
;

157 
uöt32
 
	m˛ockc⁄åﬁ_m2
;

158 
uöt32
 
	m˛ockc⁄åﬁ_m3
;

159 
uöt32
 
	m˛kdiv
;

160 
uöt32
 
	mgpiodebug£l
;

161 
uöt32
 
	mˇ∑bûôõs_ext
;

164 
uöt32
 
	m∂l_⁄_dñay
;

165 
uöt32
 
	m‰ef_£l_dñay
;

166 
uöt32
 
	m¶ow_˛k_˘l
;

167 
uöt32
 
	mPAD
;

170 
uöt32
 
	msy°em_˛k_˘l
;

171 
uöt32
 
	m˛k°©e°ªtch
;

172 
uöt32
 
	mPAD
[2];

175 
uöt32
 
	mbp_addæow
;

176 
uöt32
 
	mbp_addrhigh
;

177 
uöt32
 
	mbp_d©a
;

178 
uöt32
 
	mPAD
;

179 
uöt32
 
	mbp_ödac˚ss
;

181 
uöt32
 
	mgsio˘æ
;

182 
uöt32
 
	mgsiﬂddªss
;

183 
uöt32
 
	mgsiod©a
;

186 
uöt32
 
	m˛kdiv2
;

188 
uöt32
 
	mŸpc⁄åﬁ1
;

189 
uöt32
 
	mÁbid
;

192 
uöt32
 
	mîom±r
;

195 
uöt32
 
	mpcmcü_c⁄fig
;

196 
uöt32
 
	mpcmcü_memwaô
;

197 
uöt32
 
	mpcmcü_©åwaô
;

198 
uöt32
 
	mpcmcü_iowaô
;

199 
uöt32
 
	mide_c⁄fig
;

200 
uöt32
 
	mide_memwaô
;

201 
uöt32
 
	mide_©åwaô
;

202 
uöt32
 
	mide_iowaô
;

203 
uöt32
 
	m¥og_c⁄fig
;

204 
uöt32
 
	m¥og_waôcou¡
;

205 
uöt32
 
	mÊash_c⁄fig
;

206 
uöt32
 
	mÊash_waôcou¡
;

207 
uöt32
 
	mSECI_c⁄fig
;

208 
uöt32
 
	mSECI_°©us
;

209 
uöt32
 
	mSECI_°©usmask
;

210 
uöt32
 
	mSECI_rxnibch™ged
;

212 
uöt32
 
	mPAD
[20];

215 
uöt32
 
	m§omc⁄åﬁ
;

216 
uöt32
 
	m§omaddªss
;

217 
uöt32
 
	m§omd©a
;

218 
uöt32
 
	mPAD
[1];

220 
uöt32
 
	mnÊash˘æ
;

221 
uöt32
 
	mnÊashc⁄f
;

222 
uöt32
 
	mnÊashcﬁaddr
;

223 
uöt32
 
	mnÊashrowaddr
;

224 
uöt32
 
	mnÊashd©a
;

225 
uöt32
 
	mnÊashwaô˙t0
;

226 
uöt32
 
	mPAD
[2];

228 
uöt32
 
	m£ci_u¨t_d©a
;

229 
uöt32
 
	m£ci_u¨t_bauddiv
;

230 
uöt32
 
	m£ci_u¨t_f¸
;

231 
uöt32
 
	m£ci_u¨t_l¸
;

232 
uöt32
 
	m£ci_u¨t_m¸
;

233 
uöt32
 
	m£ci_u¨t_l§
;

234 
uöt32
 
	m£ci_u¨t_m§
;

235 
uöt32
 
	m£ci_u¨t_baudadj
;

237 
uöt32
 
	m˛k_˘l_°
;

238 
uöt32
 
	mhw_w¨
;

239 
uöt32
 
	mPAD
[70];

242 
uöt8
 
	mu¨t0d©a
;

243 
uöt8
 
	mu¨t0imr
;

244 
uöt8
 
	mu¨t0f¸
;

245 
uöt8
 
	mu¨t0l¸
;

246 
uöt8
 
	mu¨t0m¸
;

247 
uöt8
 
	mu¨t0l§
;

248 
uöt8
 
	mu¨t0m§
;

249 
uöt8
 
	mu¨t0s¸©ch
;

250 
uöt8
 
	mPAD
[248];

252 
uöt8
 
	mu¨t1d©a
;

253 
uöt8
 
	mu¨t1imr
;

254 
uöt8
 
	mu¨t1f¸
;

255 
uöt8
 
	mu¨t1l¸
;

256 
uöt8
 
	mu¨t1m¸
;

257 
uöt8
 
	mu¨t1l§
;

258 
uöt8
 
	mu¨t1m§
;

259 
uöt8
 
	mu¨t1s¸©ch
;

260 
uöt32
 
	mPAD
[126];

266 
uöt32
 
	mpmuc⁄åﬁ
;

267 
uöt32
 
	mpmuˇ∑bûôõs
;

268 
uöt32
 
	mpmu°©us
;

269 
uöt32
 
	mªs_°©e
;

270 
uöt32
 
	mªs_≥ndög
;

271 
uöt32
 
	mpmutimî
;

272 
uöt32
 
	mmö_ªs_mask
;

273 
uöt32
 
	mmax_ªs_mask
;

274 
uöt32
 
	mªs_èbÀ_£l
;

275 
uöt32
 
	mªs_dï_mask
;

276 
uöt32
 
	mªs_updn_timî
;

277 
uöt32
 
	mªs_timî
;

278 
uöt32
 
	m˛k°ªtch
;

279 
uöt32
 
	mpmuw©chdog
;

280 
uöt32
 
	mgpio£l
;

281 
uöt32
 
	mgpi€«bÀ
;

282 
uöt32
 
	mªs_ªq_timî_£l
;

283 
uöt32
 
	mªs_ªq_timî
;

284 
uöt32
 
	mªs_ªq_mask
;

285 
uöt32
 
	mPAD
;

286 
uöt32
 
	mchùc⁄åﬁ_addr
;

287 
uöt32
 
	mchùc⁄åﬁ_d©a
;

288 
uöt32
 
	mªgc⁄åﬁ_addr
;

289 
uöt32
 
	mªgc⁄åﬁ_d©a
;

290 
uöt32
 
	m∂lc⁄åﬁ_addr
;

291 
uöt32
 
	m∂lc⁄åﬁ_d©a
;

292 
uöt32
 
	mpmu°øp›t
;

293 
uöt32
 
	mpmu_xèl‰eq
;

294 
uöt32
 
	mªã¡i⁄_˘l
;

295 
uöt32
 
	mPAD
[3];

296 
uöt32
 
	mªã¡i⁄_gΩidx
;

297 
uöt32
 
	mªã¡i⁄_gΩ˘l
;

298 
uöt32
 
	mPAD
[94];

299 
uöt16
 
	m§omŸp
[512];

300 #ifde‡
NFLASH_SUPPORT


302 
uöt32
 
	m«nd_ªvisi⁄
;

303 
uöt32
 
	m«nd_cmd_°¨t
;

304 
uöt32
 
	m«nd_cmd_addr_x
;

305 
uöt32
 
	m«nd_cmd_addr
;

306 
uöt32
 
	m«nd_cmd_íd_addr
;

307 
uöt32
 
	m«nd_cs_«nd_£À˘
;

308 
uöt32
 
	m«nd_cs_«nd_x‹
;

309 
uöt32
 
	mPAD
;

310 
uöt32
 
	m«nd_•¨e_rd0
;

311 
uöt32
 
	m«nd_•¨e_rd4
;

312 
uöt32
 
	m«nd_•¨e_rd8
;

313 
uöt32
 
	m«nd_•¨e_rd12
;

314 
uöt32
 
	m«nd_•¨e_wr0
;

315 
uöt32
 
	m«nd_•¨e_wr4
;

316 
uöt32
 
	m«nd_•¨e_wr8
;

317 
uöt32
 
	m«nd_•¨e_wr12
;

318 
uöt32
 
	m«nd_acc_c⁄åﬁ
;

319 
uöt32
 
	mPAD
;

320 
uöt32
 
	m«nd_c⁄fig
;

321 
uöt32
 
	mPAD
;

322 
uöt32
 
	m«nd_timög_1
;

323 
uöt32
 
	m«nd_timög_2
;

324 
uöt32
 
	m«nd_£m≠h‹e
;

325 
uöt32
 
	mPAD
;

326 
uöt32
 
	m«nd_devid
;

327 
uöt32
 
	m«nd_devid_x
;

328 
uöt32
 
	m«nd_block_lock_°©us
;

329 
uöt32
 
	m«nd_ötfc_°©us
;

330 
uöt32
 
	m«nd_ecc_c‹r_addr_x
;

331 
uöt32
 
	m«nd_ecc_c‹r_addr
;

332 
uöt32
 
	m«nd_ecc_unc_addr_x
;

333 
uöt32
 
	m«nd_ecc_unc_addr
;

334 
uöt32
 
	m«nd_ªad_îr‹_cou¡
;

335 
uöt32
 
	m«nd_c‹r_°©_thªshﬁd
;

336 
uöt32
 
	mPAD
[2];

337 
uöt32
 
	m«nd_ªad_addr_x
;

338 
uöt32
 
	m«nd_ªad_addr
;

339 
uöt32
 
	m«nd_∑ge_¥ogøm_addr_x
;

340 
uöt32
 
	m«nd_∑ge_¥ogøm_addr
;

341 
uöt32
 
	m«nd_c›y_back_addr_x
;

342 
uöt32
 
	m«nd_c›y_back_addr
;

343 
uöt32
 
	m«nd_block_îa£_addr_x
;

344 
uöt32
 
	m«nd_block_îa£_addr
;

345 
uöt32
 
	m«nd_öv_ªad_addr_x
;

346 
uöt32
 
	m«nd_öv_ªad_addr
;

347 
uöt32
 
	mPAD
[2];

348 
uöt32
 
	m«nd_blk_wr_¥Ÿe˘
;

349 
uöt32
 
	mPAD
[3];

350 
uöt32
 
	m«nd_acc_c⁄åﬁ_cs1
;

351 
uöt32
 
	m«nd_c⁄fig_cs1
;

352 
uöt32
 
	m«nd_timög_1_cs1
;

353 
uöt32
 
	m«nd_timög_2_cs1
;

354 
uöt32
 
	mPAD
[20];

355 
uöt32
 
	m«nd_•¨e_rd16
;

356 
uöt32
 
	m«nd_•¨e_rd20
;

357 
uöt32
 
	m«nd_•¨e_rd24
;

358 
uöt32
 
	m«nd_•¨e_rd28
;

359 
uöt32
 
	m«nd_ˇche_addr
;

360 
uöt32
 
	m«nd_ˇche_d©a
;

361 
uöt32
 
	m«nd_˘æ_c⁄fig
;

362 
uöt32
 
	m«nd_˘æ_°©us
;

364 
uöt32
 
	mgci_c‹eˇps0
;

365 
uöt32
 
	mgci_c‹eˇps1
;

366 
uöt32
 
	mgci_c‹eˇps2
;

367 
uöt32
 
	mgci_c‹e˘æ
;

368 
uöt32
 
	mgci_c‹e°©
;

369 
uöt32
 
	mPAD
[11];

370 
uöt32
 
	mgci_ödúe˘_addr
;

371 
uöt32
 
	mPAD
[111];

372 
uöt32
 
	mgci_chù˘æ
;

373 } 
	tchù¸egs_t
;

378 
	#CC_CHIPID
 0

	)

379 
	#CC_CAPABILITIES
 4

	)

380 
	#CC_CHIPST
 0x2c

	)

381 
	#CC_EROMPTR
 0xfc

	)

383 
	#CC_OTPST
 0x10

	)

384 
	#CC_JTAGCMD
 0x30

	)

385 
	#CC_JTAGIR
 0x34

	)

386 
	#CC_JTAGDR
 0x38

	)

387 
	#CC_JTAGCTRL
 0x3c

	)

388 
	#CC_GPIOPU
 0x58

	)

389 
	#CC_GPIOPD
 0x5c

	)

390 
	#CC_GPIOIN
 0x60

	)

391 
	#CC_GPIOOUT
 0x64

	)

392 
	#CC_GPIOOUTEN
 0x68

	)

393 
	#CC_GPIOCTRL
 0x6c

	)

394 
	#CC_GPIOPOL
 0x70

	)

395 
	#CC_GPIOINTM
 0x74

	)

396 
	#CC_WATCHDOG
 0x80

	)

397 
	#CC_CLKC_N
 0x90

	)

398 
	#CC_CLKC_M0
 0x94

	)

399 
	#CC_CLKC_M1
 0x98

	)

400 
	#CC_CLKC_M2
 0x9c

	)

401 
	#CC_CLKC_M3
 0xa0

	)

402 
	#CC_CLKDIV
 0xa4

	)

403 
	#CC_SYS_CLK_CTL
 0xc0

	)

404 
	#CC_CLK_CTL_ST
 
SI_CLK_CTL_ST


	)

405 
	#PMU_CTL
 0x600

	)

406 
	#PMU_CAP
 0x604

	)

407 
	#PMU_ST
 0x608

	)

408 
	#PMU_RES_STATE
 0x60c

	)

409 
	#PMU_TIMER
 0x614

	)

410 
	#PMU_MIN_RES_MASK
 0x618

	)

411 
	#PMU_MAX_RES_MASK
 0x61c

	)

412 
	#CC_CHIPCTL_ADDR
 0x650

	)

413 
	#CC_CHIPCTL_DATA
 0x654

	)

414 
	#PMU_REG_CONTROL_ADDR
 0x658

	)

415 
	#PMU_REG_CONTROL_DATA
 0x65C

	)

416 
	#PMU_PLL_CONTROL_ADDR
 0x660

	)

417 
	#PMU_PLL_CONTROL_DATA
 0x664

	)

418 
	#CC_SROM_OTP
 0x800

	)

419 
	#CC_GCI_INDIRECT_ADDR_REG
 0xC40

	)

420 
	#CC_GCI_CHIP_CTRL_REG
 0xE00

	)

421 
	#CC_GCI_CC_OFFSET_2
 2

	)

422 
	#CC_GCI_CC_OFFSET_5
 5

	)

424 #ifde‡
NFLASH_SUPPORT


426 
	#CC_NAND_REVISION
 0xC00

	)

427 
	#CC_NAND_CMD_START
 0xC04

	)

428 
	#CC_NAND_CMD_ADDR
 0xC0C

	)

429 
	#CC_NAND_SPARE_RD_0
 0xC20

	)

430 
	#CC_NAND_SPARE_RD_4
 0xC24

	)

431 
	#CC_NAND_SPARE_RD_8
 0xC28

	)

432 
	#CC_NAND_SPARE_RD_C
 0xC2C

	)

433 
	#CC_NAND_CONFIG
 0xC48

	)

434 
	#CC_NAND_DEVID
 0xC60

	)

435 
	#CC_NAND_DEVID_EXT
 0xC64

	)

436 
	#CC_NAND_INTFC_STATUS
 0xC6C

	)

440 
	#CID_ID_MASK
 0x0000fff‡

	)

441 
	#CID_REV_MASK
 0x000f0000

	)

442 
	#CID_REV_SHIFT
 16

	)

443 
	#CID_PKG_MASK
 0x00f00000

	)

444 
	#CID_PKG_SHIFT
 20

	)

445 
	#CID_CC_MASK
 0x0f000000

	)

446 
	#CID_CC_SHIFT
 24

	)

447 
	#CID_TYPE_MASK
 0xf0000000

	)

448 
	#CID_TYPE_SHIFT
 28

	)

451 
	#CC_CAP_UARTS_MASK
 0x00000003

	)

452 
	#CC_CAP_MIPSEB
 0x00000004

	)

453 
	#CC_CAP_UCLKSEL
 0x00000018

	)

454 
	#CC_CAP_UINTCLK
 0x00000008

	)

455 
	#CC_CAP_UARTGPIO
 0x00000020

	)

456 
	#CC_CAP_EXTBUS_MASK
 0x000000c0

	)

457 
	#CC_CAP_EXTBUS_NONE
 0x00000000

	)

458 
	#CC_CAP_EXTBUS_FULL
 0x00000040

	)

459 
	#CC_CAP_EXTBUS_PROG
 0x00000080

	)

460 
	#CC_CAP_FLASH_MASK
 0x00000700

	)

461 
	#CC_CAP_PLL_MASK
 0x00038000

	)

462 
	#CC_CAP_PWR_CTL
 0x00040000

	)

463 
	#CC_CAP_OTPSIZE
 0x00380000

	)

464 
	#CC_CAP_OTPSIZE_SHIFT
 19

	)

465 
	#CC_CAP_OTPSIZE_BASE
 5

	)

466 
	#CC_CAP_JTAGP
 0x00400000

	)

467 
	#CC_CAP_ROM
 0x00800000

	)

468 
	#CC_CAP_BKPLN64
 0x08000000

	)

469 
	#CC_CAP_PMU
 0x10000000

	)

470 
	#CC_CAP_ECI
 0x20000000

	)

471 
	#CC_CAP_SROM
 0x40000000

	)

472 
	#CC_CAP_NFLASH
 0x80000000

	)

474 
	#CC_CAP2_SECI
 0x00000001

	)

475 
	#CC_CAP2_GSIO
 0x00000002

	)

478 
	#CC_CAP_EXT_SECI_PRESENT
 0x00000001

	)

481 
	#PLL_NONE
 0x00000000

	)

482 
	#PLL_TYPE1
 0x00010000

	)

483 
	#PLL_TYPE2
 0x00020000

	)

484 
	#PLL_TYPE3
 0x00030000

	)

485 
	#PLL_TYPE4
 0x00008000

	)

486 
	#PLL_TYPE5
 0x00018000

	)

487 
	#PLL_TYPE6
 0x00028000

	)

488 
	#PLL_TYPE7
 0x00038000

	)

491 
	#ILP_CLOCK
 32000

	)

494 
	#ALP_CLOCK
 20000000

	)

497 
	#HT_CLOCK
 80000000

	)

500 
	#CC_UARTCLKO
 0x00000001

	)

501 
	#CC_SE
 0x00000002

	)

502 
	#CC_ASYNCGPIO
 0x00000004

	)

503 
	#CC_UARTCLKEN
 0x00000008

	)

506 
	#CHIPCTRL_4321A0_DEFAULT
 0x3a4

	)

507 
	#CHIPCTRL_4321A1_DEFAULT
 0x0a4

	)

508 
	#CHIPCTRL_4321_PLL_DOWN
 0x800000

	)

511 
	#OTPS_OL_MASK
 0x000000ff

	)

512 
	#OTPS_OL_MFG
 0x00000001

	)

513 
	#OTPS_OL_OR1
 0x00000002

	)

514 
	#OTPS_OL_OR2
 0x00000004

	)

515 
	#OTPS_OL_GU
 0x00000008

	)

516 
	#OTPS_GUP_MASK
 0x00000f00

	)

517 
	#OTPS_GUP_SHIFT
 8

	)

518 
	#OTPS_GUP_HW
 0x00000100

	)

519 
	#OTPS_GUP_SW
 0x00000200

	)

520 
	#OTPS_GUP_CI
 0x00000400

	)

521 
	#OTPS_GUP_FUSE
 0x00000800

	)

522 
	#OTPS_READY
 0x00001000

	)

523 
	#OTPS_RV
(
x
Ë(1 << (16 + (x))Ë

	)

524 
	#OTPS_RV_MASK
 0x0fff0000

	)

525 
	#OTPS_PROGOK
 0x40000000

	)

528 
	#OTPC_PROGSEL
 0x00000001

	)

529 
	#OTPC_PCOUNT_MASK
 0x0000000e

	)

530 
	#OTPC_PCOUNT_SHIFT
 1

	)

531 
	#OTPC_VSEL_MASK
 0x000000f0

	)

532 
	#OTPC_VSEL_SHIFT
 4

	)

533 
	#OTPC_TMM_MASK
 0x00000700

	)

534 
	#OTPC_TMM_SHIFT
 8

	)

535 
	#OTPC_ODM
 0x00000800

	)

536 
	#OTPC_PROGEN
 0x80000000

	)

539 
	#OTPC_40NM_PROGSEL_SHIFT
 0

	)

540 
	#OTPC_40NM_PCOUNT_SHIFT
 1

	)

541 
	#OTPC_40NM_PCOUNT_WR
 0xA

	)

542 
	#OTPC_40NM_PCOUNT_V1X
 0xB

	)

543 
	#OTPC_40NM_REGCSEL_SHIFT
 5

	)

544 
	#OTPC_40NM_REGCSEL_DEF
 0x4

	)

545 
	#OTPC_40NM_PROGIN_SHIFT
 8

	)

546 
	#OTPC_40NM_R2X_SHIFT
 10

	)

547 
	#OTPC_40NM_ODM_SHIFT
 11

	)

548 
	#OTPC_40NM_DF_SHIFT
 15

	)

549 
	#OTPC_40NM_VSEL_SHIFT
 16

	)

550 
	#OTPC_40NM_VSEL_WR
 0xA

	)

551 
	#OTPC_40NM_VSEL_V1X
 0xA

	)

552 
	#OTPC_40NM_VSEL_R1X
 0x5

	)

553 
	#OTPC_40NM_COFAIL_SHIFT
 30

	)

555 
	#OTPC1_CPCSEL_SHIFT
 0

	)

556 
	#OTPC1_CPCSEL_DEF
 6

	)

557 
	#OTPC1_TM_SHIFT
 8

	)

558 
	#OTPC1_TM_WR
 0x84

	)

559 
	#OTPC1_TM_V1X
 0x84

	)

560 
	#OTPC1_TM_R1X
 0x4

	)

563 
	#OTPP_COL_MASK
 0x000000ff

	)

564 
	#OTPP_COL_SHIFT
 0

	)

565 
	#OTPP_ROW_MASK
 0x0000ff00

	)

566 
	#OTPP_ROW_SHIFT
 8

	)

567 
	#OTPP_OC_MASK
 0x0f000000

	)

568 
	#OTPP_OC_SHIFT
 24

	)

569 
	#OTPP_READERR
 0x10000000

	)

570 
	#OTPP_VALUE_MASK
 0x20000000

	)

571 
	#OTPP_VALUE_SHIFT
 29

	)

572 
	#OTPP_START_BUSY
 0x80000000

	)

573 
	#OTPP_READ
 0x40000000

	)

576 
	#OTPL_HWRGN_OFF_MASK
 0x00000FFF

	)

577 
	#OTPL_HWRGN_OFF_SHIFT
 0

	)

578 
	#OTPL_WRAP_REVID_MASK
 0x00F80000

	)

579 
	#OTPL_WRAP_REVID_SHIFT
 19

	)

580 
	#OTPL_WRAP_TYPE_MASK
 0x00070000

	)

581 
	#OTPL_WRAP_TYPE_SHIFT
 16

	)

582 
	#OTPL_WRAP_TYPE_65NM
 0

	)

583 
	#OTPL_WRAP_TYPE_40NM
 1

	)

586 
	#OTP_CISFORMAT_NEW
 0x80000000

	)

589 
	#OTPPOC_READ
 0

	)

590 
	#OTPPOC_BIT_PROG
 1

	)

591 
	#OTPPOC_VERIFY
 3

	)

592 
	#OTPPOC_INIT
 4

	)

593 
	#OTPPOC_SET
 5

	)

594 
	#OTPPOC_RESET
 6

	)

595 
	#OTPPOC_OCST
 7

	)

596 
	#OTPPOC_ROW_LOCK
 8

	)

597 
	#OTPPOC_PRESCN_TEST
 9

	)

600 
	#OTPPOC_READ_40NM
 0

	)

601 
	#OTPPOC_PROG_ENABLE_40NM
 1

	)

602 
	#OTPPOC_PROG_DISABLE_40NM
 2

	)

603 
	#OTPPOC_VERIFY_40NM
 3

	)

604 
	#OTPPOC_WORD_VERIFY_1_40NM
 4

	)

605 
	#OTPPOC_ROW_LOCK_40NM
 5

	)

606 
	#OTPPOC_STBY_40NM
 6

	)

607 
	#OTPPOC_WAKEUP_40NM
 7

	)

608 
	#OTPPOC_WORD_VERIFY_0_40NM
 8

	)

609 
	#OTPPOC_PRESCN_TEST_40NM
 9

	)

610 
	#OTPPOC_BIT_PROG_40NM
 10

	)

611 
	#OTPPOC_WORDPROG_40NM
 11

	)

612 
	#OTPPOC_BURNIN_40NM
 12

	)

613 
	#OTPPOC_AUTORELOAD_40NM
 13

	)

614 
	#OTPPOC_OVST_READ_40NM
 14

	)

615 
	#OTPPOC_OVST_PROG_40NM
 15

	)

618 
	#OTPLAYOUTEXT_FUSE_MASK
 0x3FF

	)

622 
	#JTAGM_CREV_OLD
 10

	)

623 
	#JTAGM_CREV_IRP
 22

	)

624 
	#JTAGM_CREV_RTI
 28

	)

627 
	#JCMD_START
 0x80000000

	)

628 
	#JCMD_BUSY
 0x80000000

	)

629 
	#JCMD_STATE_MASK
 0x60000000

	)

630 
	#JCMD_STATE_TLR
 0x00000000

	)

631 
	#JCMD_STATE_PIR
 0x20000000

	)

632 
	#JCMD_STATE_PDR
 0x40000000

	)

633 
	#JCMD_STATE_RTI
 0x60000000

	)

634 
	#JCMD0_ACC_MASK
 0x0000f000

	)

635 
	#JCMD0_ACC_IRDR
 0x00000000

	)

636 
	#JCMD0_ACC_DR
 0x00001000

	)

637 
	#JCMD0_ACC_IR
 0x00002000

	)

638 
	#JCMD0_ACC_RESET
 0x00003000

	)

639 
	#JCMD0_ACC_IRPDR
 0x00004000

	)

640 
	#JCMD0_ACC_PDR
 0x00005000

	)

641 
	#JCMD0_IRW_MASK
 0x00000f00

	)

642 
	#JCMD_ACC_MASK
 0x000f0000

	)

643 
	#JCMD_ACC_IRDR
 0x00000000

	)

644 
	#JCMD_ACC_DR
 0x00010000

	)

645 
	#JCMD_ACC_IR
 0x00020000

	)

646 
	#JCMD_ACC_RESET
 0x00030000

	)

647 
	#JCMD_ACC_IRPDR
 0x00040000

	)

648 
	#JCMD_ACC_PDR
 0x00050000

	)

649 
	#JCMD_ACC_PIR
 0x00060000

	)

650 
	#JCMD_ACC_IRDR_I
 0x00070000

	)

651 
	#JCMD_ACC_DR_I
 0x00080000

	)

652 
	#JCMD_IRW_MASK
 0x00001f00

	)

653 
	#JCMD_IRW_SHIFT
 8

	)

654 
	#JCMD_DRW_MASK
 0x0000003f

	)

657 
	#JCTRL_FORCE_CLK
 4

	)

658 
	#JCTRL_EXT_EN
 2

	)

659 
	#JCTRL_EN
 1

	)

662 
	#CLKD_SFLASH
 0x0f000000

	)

663 
	#CLKD_SFLASH_SHIFT
 24

	)

664 
	#CLKD_OTP
 0x000f0000

	)

665 
	#CLKD_OTP_SHIFT
 16

	)

666 
	#CLKD_JTAG
 0x00000f00

	)

667 
	#CLKD_JTAG_SHIFT
 8

	)

668 
	#CLKD_UART
 0x000000ff

	)

670 
	#CLKD2_SROM
 0x00000003

	)

673 
	#CI_GPIO
 0x00000001

	)

674 
	#CI_EI
 0x00000002

	)

675 
	#CI_TEMP
 0x00000004

	)

676 
	#CI_SIRQ
 0x00000008

	)

677 
	#CI_ECI
 0x00000010

	)

678 
	#CI_PMU
 0x00000020

	)

679 
	#CI_UART
 0x00000040

	)

680 
	#CI_WDRESET
 0x80000000

	)

683 
	#SCC_SS_MASK
 0x00000007

	)

684 
	#SCC_SS_LPO
 0x00000000

	)

685 
	#SCC_SS_XTAL
 0x00000001

	)

686 
	#SCC_SS_PCI
 0x00000002

	)

687 
	#SCC_LF
 0x00000200

	)

688 
	#SCC_LP
 0x00000400

	)

691 
	#SCC_FS
 0x00000800

	)

694 
	#SCC_IP
 0x00001000

	)

697 
	#SCC_XC
 0x00002000

	)

700 
	#SCC_XP
 0x00004000

	)

701 
	#SCC_CD_MASK
 0xffff0000

	)

702 
	#SCC_CD_SHIFT
 16

	)

705 
	#SYCC_IE
 0x00000001

	)

706 
	#SYCC_AE
 0x00000002

	)

707 
	#SYCC_FP
 0x00000004

	)

708 
	#SYCC_AR
 0x00000008

	)

709 
	#SYCC_HR
 0x00000010

	)

710 
	#SYCC_CD_MASK
 0xffff0000

	)

711 
	#SYCC_CD_SHIFT
 16

	)

714 
	#BPIA_BYTEEN
 0x0000000f

	)

715 
	#BPIA_SZ1
 0x00000001

	)

716 
	#BPIA_SZ2
 0x00000003

	)

717 
	#BPIA_SZ4
 0x00000007

	)

718 
	#BPIA_SZ8
 0x0000000f

	)

719 
	#BPIA_WRITE
 0x00000100

	)

720 
	#BPIA_START
 0x00000200

	)

721 
	#BPIA_BUSY
 0x00000200

	)

722 
	#BPIA_ERROR
 0x00000400

	)

725 
	#CF_EN
 0x00000001

	)

726 
	#CF_EM_MASK
 0x0000000ê

	)

727 
	#CF_EM_SHIFT
 1

	)

728 
	#CF_EM_FLASH
 0

	)

729 
	#CF_EM_SYNC
 2

	)

730 
	#CF_EM_PCMCIA
 4

	)

731 
	#CF_DS
 0x00000010

	)

732 
	#CF_BS
 0x00000020

	)

733 
	#CF_CD_MASK
 0x000000c0

	)

734 
	#CF_CD_SHIFT
 6

	)

735 
	#CF_CD_DIV2
 0x00000000

	)

736 
	#CF_CD_DIV3
 0x00000040

	)

737 
	#CF_CD_DIV4
 0x00000080

	)

738 
	#CF_CE
 0x00000100

	)

739 
	#CF_SB
 0x00000200

	)

742 
	#PM_W0_MASK
 0x0000003‡

	)

743 
	#PM_W1_MASK
 0x00001f00

	)

744 
	#PM_W1_SHIFT
 8

	)

745 
	#PM_W2_MASK
 0x001f0000

	)

746 
	#PM_W2_SHIFT
 16

	)

747 
	#PM_W3_MASK
 0x1f000000

	)

748 
	#PM_W3_SHIFT
 24

	)

751 
	#PA_W0_MASK
 0x0000003‡

	)

752 
	#PA_W1_MASK
 0x00001f00

	)

753 
	#PA_W1_SHIFT
 8

	)

754 
	#PA_W2_MASK
 0x001f0000

	)

755 
	#PA_W2_SHIFT
 16

	)

756 
	#PA_W3_MASK
 0x1f000000

	)

757 
	#PA_W3_SHIFT
 24

	)

760 
	#PI_W0_MASK
 0x0000003‡

	)

761 
	#PI_W1_MASK
 0x00001f00

	)

762 
	#PI_W1_SHIFT
 8

	)

763 
	#PI_W2_MASK
 0x001f0000

	)

764 
	#PI_W2_SHIFT
 16

	)

765 
	#PI_W3_MASK
 0x1f000000

	)

766 
	#PI_W3_SHIFT
 24

	)

769 
	#PW_W0_MASK
 0x0000001‡

	)

770 
	#PW_W1_MASK
 0x00001f00

	)

771 
	#PW_W1_SHIFT
 8

	)

772 
	#PW_W2_MASK
 0x001f0000

	)

773 
	#PW_W2_SHIFT
 16

	)

774 
	#PW_W3_MASK
 0x1f000000

	)

775 
	#PW_W3_SHIFT
 24

	)

777 
	#PW_W0
 0x0000000c

	)

778 
	#PW_W1
 0x00000a00

	)

779 
	#PW_W2
 0x00020000

	)

780 
	#PW_W3
 0x01000000

	)

783 
	#FW_W0_MASK
 0x0000003‡

	)

784 
	#FW_W1_MASK
 0x00001f00

	)

785 
	#FW_W1_SHIFT
 8

	)

786 
	#FW_W2_MASK
 0x001f0000

	)

787 
	#FW_W2_SHIFT
 16

	)

788 
	#FW_W3_MASK
 0x1f000000

	)

789 
	#FW_W3_SHIFT
 24

	)

792 
	#SRC_START
 0x80000000

	)

793 
	#SRC_BUSY
 0x80000000

	)

794 
	#SRC_OPCODE
 0x60000000

	)

795 
	#SRC_OP_READ
 0x00000000

	)

796 
	#SRC_OP_WRITE
 0x20000000

	)

797 
	#SRC_OP_WRDIS
 0x40000000

	)

798 
	#SRC_OP_WREN
 0x60000000

	)

799 
	#SRC_OTPSEL
 0x00000010

	)

800 
	#SRC_LOCK
 0x00000008

	)

801 
	#SRC_SIZE_MASK
 0x00000006

	)

802 
	#SRC_SIZE_1K
 0x00000000

	)

803 
	#SRC_SIZE_4K
 0x00000002

	)

804 
	#SRC_SIZE_16K
 0x00000004

	)

805 
	#SRC_SIZE_SHIFT
 1

	)

806 
	#SRC_PRESENT
 0x00000001

	)

809 
	#PCTL_ILP_DIV_MASK
 0xffff0000

	)

810 
	#PCTL_ILP_DIV_SHIFT
 16

	)

811 
	#PCTL_PLL_PLLCTL_UPD
 0x00000400

	)

812 
	#PCTL_NOILP_ON_WAIT
 0x00000200

	)

813 
	#PCTL_HT_REQ_EN
 0x00000100

	)

814 
	#PCTL_ALP_REQ_EN
 0x00000080

	)

815 
	#PCTL_XTALFREQ_MASK
 0x0000007c

	)

816 
	#PCTL_XTALFREQ_SHIFT
 2

	)

817 
	#PCTL_ILP_DIV_EN
 0x00000002

	)

818 
	#PCTL_LPO_SEL
 0x00000001

	)

821 
	#CSTRETCH_HT
 0xffff0000

	)

822 
	#CSTRETCH_ALP
 0x0000ffff

	)

825 
	#GPIO_ONTIME_SHIFT
 16

	)

828 
	#CN_N1_MASK
 0x3‡

	)

829 
	#CN_N2_MASK
 0x3f00

	)

830 
	#CN_N2_SHIFT
 8

	)

831 
	#CN_PLLC_MASK
 0xf0000

	)

832 
	#CN_PLLC_SHIFT
 16

	)

835 
	#CC_M1_MASK
 0x3‡

	)

836 
	#CC_M2_MASK
 0x3f00

	)

837 
	#CC_M2_SHIFT
 8

	)

838 
	#CC_M3_MASK
 0x3f0000

	)

839 
	#CC_M3_SHIFT
 16

	)

840 
	#CC_MC_MASK
 0x1f000000

	)

841 
	#CC_MC_SHIFT
 24

	)

844 
	#CC_F6_2
 0x02

	)

845 
	#CC_F6_3
 0x03

	)

846 
	#CC_F6_4
 0x05

	)

847 
	#CC_F6_5
 0x09

	)

848 
	#CC_F6_6
 0x11

	)

849 
	#CC_F6_7
 0x21

	)

851 
	#CC_F5_BIAS
 5

	)

853 
	#CC_MC_BYPASS
 0x08

	)

854 
	#CC_MC_M1
 0x04

	)

855 
	#CC_MC_M1M2
 0x02

	)

856 
	#CC_MC_M1M2M3
 0x01

	)

857 
	#CC_MC_M1M3
 0x11

	)

860 
	#CC_T2_BIAS
 2

	)

861 
	#CC_T2M2_BIAS
 3

	)

863 
	#CC_T2MC_M1BYP
 1

	)

864 
	#CC_T2MC_M2BYP
 2

	)

865 
	#CC_T2MC_M3BYP
 4

	)

868 
	#CC_T6_MMASK
 1

	)

869 
	#CC_T6_M0
 120000000

	)

870 
	#CC_T6_M1
 100000000

	)

871 
	#SB2MIPS_T6
(
sb
Ë(2 * (sb))

	)

874 
	#CC_CLOCK_BASE1
 24000000

	)

875 
	#CC_CLOCK_BASE2
 12500000

	)

878 
	#CLKC_5350_N
 0x0311

	)

879 
	#CLKC_5350_M
 0x04020009

	)

882 
	#FLASH_NONE
 0x000

	)

883 
	#SFLASH_ST
 0x100

	)

884 
	#SFLASH_AT
 0x200

	)

885 
	#NFLASH
 0x300

	)

886 
	#PFLASH
 0x700

	)

889 
	#CC_CFG_EN
 0x0001

	)

890 
	#CC_CFG_EM_MASK
 0x000ê

	)

891 
	#CC_CFG_EM_ASYNC
 0x0000

	)

892 
	#CC_CFG_EM_SYNC
 0x0002

	)

893 
	#CC_CFG_EM_PCMCIA
 0x0004

	)

894 
	#CC_CFG_EM_IDE
 0x0006

	)

895 
	#CC_CFG_DS
 0x0010

	)

896 
	#CC_CFG_CD_MASK
 0x00e0

	)

897 
	#CC_CFG_CE
 0x0100

	)

898 
	#CC_CFG_SB
 0x0200

	)

899 
	#CC_CFG_IS
 0x0400

	)

902 
	#CC_EB_BASE
 0x1a000000

	)

903 
	#CC_EB_PCMCIA_MEM
 0x1a000000

	)

904 
	#CC_EB_PCMCIA_IO
 0x1a200000

	)

905 
	#CC_EB_PCMCIA_CFG
 0x1a400000

	)

906 
	#CC_EB_IDE
 0x1a800000

	)

907 
	#CC_EB_PCMCIA1_MEM
 0x1a800000

	)

908 
	#CC_EB_PCMCIA1_IO
 0x1Ø00000

	)

909 
	#CC_EB_PCMCIA1_CFG
 0x1ac00000

	)

910 
	#CC_EB_PROGIF
 0x1b000000

	)

914 
	#SFLASH_OPCODE
 0x000000ff

	)

915 
	#SFLASH_ACTION
 0x00000700

	)

916 
	#SFLASH_CS_ACTIVE
 0x00001000

	)

917 
	#SFLASH_START
 0x80000000

	)

918 
	#SFLASH_BUSY
 
SFLASH_START


	)

921 
	#SFLASH_ACT_OPONLY
 0x0000

	)

922 
	#SFLASH_ACT_OP1D
 0x0100

	)

923 
	#SFLASH_ACT_OP3A
 0x0200

	)

924 
	#SFLASH_ACT_OP3A1D
 0x0300

	)

925 
	#SFLASH_ACT_OP3A4D
 0x0400

	)

926 
	#SFLASH_ACT_OP3A4X4D
 0x0500

	)

927 
	#SFLASH_ACT_OP3A1X4D
 0x0700

	)

930 
	#SFLASH_ST_WREN
 0x0006

	)

931 
	#SFLASH_ST_WRDIS
 0x0004

	)

932 
	#SFLASH_ST_RDSR
 0x0105

	)

933 
	#SFLASH_ST_WRSR
 0x0101

	)

934 
	#SFLASH_ST_READ
 0x0303

	)

935 
	#SFLASH_ST_PP
 0x0302

	)

936 
	#SFLASH_ST_SE
 0x02d8

	)

937 
	#SFLASH_ST_BE
 0x00c7

	)

938 
	#SFLASH_ST_DP
 0x00b9

	)

939 
	#SFLASH_ST_RES
 0x03ab

	)

940 
	#SFLASH_ST_CSA
 0x1000

	)

941 
	#SFLASH_ST_SSE
 0x0220

	)

943 
	#SFLASH_MXIC_RDID
 0x0390

	)

944 
	#SFLASH_MXIC_MFID
 0xc2

	)

947 
	#SFLASH_ST_WIP
 0x01

	)

948 
	#SFLASH_ST_WEL
 0x02

	)

949 
	#SFLASH_ST_BP_MASK
 0x1¯

	)

950 
	#SFLASH_ST_BP_SHIFT
 2

	)

951 
	#SFLASH_ST_SRWD
 0x80

	)

954 
	#SFLASH_AT_READ
 0x07e8

	)

955 
	#SFLASH_AT_PAGE_READ
 0x07d2

	)

956 
	#SFLASH_AT_BUF1_READ


	)

957 
	#SFLASH_AT_BUF2_READ


	)

958 
	#SFLASH_AT_STATUS
 0x01d7

	)

959 
	#SFLASH_AT_BUF1_WRITE
 0x0384

	)

960 
	#SFLASH_AT_BUF2_WRITE
 0x0387

	)

961 
	#SFLASH_AT_BUF1_ERASE_PROGRAM
 0x0283

	)

962 
	#SFLASH_AT_BUF2_ERASE_PROGRAM
 0x0286

	)

963 
	#SFLASH_AT_BUF1_PROGRAM
 0x0288

	)

964 
	#SFLASH_AT_BUF2_PROGRAM
 0x0289

	)

965 
	#SFLASH_AT_PAGE_ERASE
 0x0281

	)

966 
	#SFLASH_AT_BLOCK_ERASE
 0x0250

	)

967 
	#SFLASH_AT_BUF1_WRITE_ERASE_PROGRAM
 0x0382

	)

968 
	#SFLASH_AT_BUF2_WRITE_ERASE_PROGRAM
 0x0385

	)

969 
	#SFLASH_AT_BUF1_LOAD
 0x0253

	)

970 
	#SFLASH_AT_BUF2_LOAD
 0x0255

	)

971 
	#SFLASH_AT_BUF1_COMPARE
 0x0260

	)

972 
	#SFLASH_AT_BUF2_COMPARE
 0x0261

	)

973 
	#SFLASH_AT_BUF1_REPROGRAM
 0x0258

	)

974 
	#SFLASH_AT_BUF2_REPROGRAM
 0x0259

	)

977 
	#SFLASH_AT_READY
 0x80

	)

978 
	#SFLASH_AT_MISMATCH
 0x40

	)

979 
	#SFLASH_AT_ID_MASK
 0x38

	)

980 
	#SFLASH_AT_ID_SHIFT
 3

	)

983 
	#GSIO_START
 0x80000000

	)

984 
	#GSIO_BUSY
 
GSIO_START


	)

992 
	#UART_RX
 0

	)

993 
	#UART_TX
 0

	)

994 
	#UART_DLL
 0

	)

995 
	#UART_IER
 1

	)

996 
	#UART_DLM
 1

	)

997 
	#UART_IIR
 2

	)

998 
	#UART_FCR
 2

	)

999 
	#UART_LCR
 3

	)

1000 
	#UART_MCR
 4

	)

1001 
	#UART_LSR
 5

	)

1002 
	#UART_MSR
 6

	)

1003 
	#UART_SCR
 7

	)

1004 
	#UART_LCR_DLAB
 0x80

	)

1005 
	#UART_LCR_WLEN8
 0x03

	)

1006 
	#UART_MCR_OUT2
 0x08

	)

1007 
	#UART_MCR_LOOP
 0x10

	)

1008 
	#UART_LSR_RX_FIFO
 0x80

	)

1009 
	#UART_LSR_TDHR
 0x40

	)

1010 
	#UART_LSR_THRE
 0x20

	)

1011 
	#UART_LSR_BREAK
 0x10

	)

1012 
	#UART_LSR_FRAMING
 0x08

	)

1013 
	#UART_LSR_PARITY
 0x04

	)

1014 
	#UART_LSR_OVERRUN
 0x02

	)

1015 
	#UART_LSR_RXRDY
 0x01

	)

1016 
	#UART_FCR_FIFO_ENABLE
 1

	)

1019 
	#UART_IIR_FIFO_MASK
 0xc0

	)

1020 
	#UART_IIR_INT_MASK
 0x‡

	)

1021 
	#UART_IIR_MDM_CHG
 0x0

	)

1022 
	#UART_IIR_NOINT
 0x1

	)

1023 
	#UART_IIR_THRE
 0x2

	)

1024 
	#UART_IIR_RCVD_DATA
 0x4

	)

1025 
	#UART_IIR_RCVR_STATUS
 0x6

	)

1026 
	#UART_IIR_CHAR_TIME
 0x¯

	)

1029 
	#UART_IER_EDSSI
 8

	)

1030 
	#UART_IER_ELSI
 4

	)

1031 
	#UART_IER_ETBEI
 2

	)

1032 
	#UART_IER_ERBFI
 1

	)

1035 
	#PST_EXTLPOAVAIL
 0x0100

	)

1036 
	#PST_WDRESET
 0x0080

	)

1037 
	#PST_INTPEND
 0x0040

	)

1038 
	#PST_SBCLKST
 0x0030

	)

1039 
	#PST_SBCLKST_ILP
 0x0010

	)

1040 
	#PST_SBCLKST_ALP
 0x0020

	)

1041 
	#PST_SBCLKST_HT
 0x0030

	)

1042 
	#PST_ALPAVAIL
 0x0008

	)

1043 
	#PST_HTAVAIL
 0x0004

	)

1044 
	#PST_RESINIT
 0x0003

	)

1047 
	#PCAP_REV_MASK
 0x000000ff

	)

1048 
	#PCAP_RC_MASK
 0x00001f00

	)

1049 
	#PCAP_RC_SHIFT
 8

	)

1050 
	#PCAP_TC_MASK
 0x0001e000

	)

1051 
	#PCAP_TC_SHIFT
 13

	)

1052 
	#PCAP_PC_MASK
 0x001e0000

	)

1053 
	#PCAP_PC_SHIFT
 17

	)

1054 
	#PCAP_VC_MASK
 0x01e00000

	)

1055 
	#PCAP_VC_SHIFT
 21

	)

1056 
	#PCAP_CC_MASK
 0x1e000000

	)

1057 
	#PCAP_CC_SHIFT
 25

	)

1058 
	#PCAP5_PC_MASK
 0x003e0000

	)

1059 
	#PCAP5_PC_SHIFT
 17

	)

1060 
	#PCAP5_VC_MASK
 0x07c00000

	)

1061 
	#PCAP5_VC_SHIFT
 22

	)

1062 
	#PCAP5_CC_MASK
 0xf8000000

	)

1063 
	#PCAP5_CC_SHIFT
 27

	)

1067 
	#PRRT_TIME_MASK
 0x03ff

	)

1068 
	#PRRT_INTEN
 0x0400

	)

1069 
	#PRRT_REQ_ACTIVE
 0x0800

	)

1070 
	#PRRT_ALP_REQ
 0x1000

	)

1071 
	#PRRT_HT_REQ
 0x2000

	)

1072 
	#PRRT_HQ_REQ
 0x4000

	)

1075 
	#PMURES_BIT
(
bô
Ë(1 << (bô))

	)

1078 
	#PMURES_MAX_RESNUM
 30

	)

1081 
	#PMU_CHIPCTL0
 0

	)

1084 
	#PMU_CC1_CLKREQ_TYPE_SHIFT
 19

	)

1085 
	#PMU_CC1_CLKREQ_TYPE_MASK
 (1 << 
PMU_CC1_CLKREQ_TYPE_SHIFT
)

	)

1087 
	#CLKREQ_TYPE_CONFIG_OPENDRAIN
 0

	)

1088 
	#CLKREQ_TYPE_CONFIG_PUSHPULL
 1

	)

1091 
	#PMU_CHIPCTL1
 1

	)

1092 
	#PMU_CC1_RXC_DLL_BYPASS
 0x00010000

	)

1094 
	#PMU_CC1_IF_TYPE_MASK
 0x00000030

	)

1095 
	#PMU_CC1_IF_TYPE_RMII
 0x00000000

	)

1096 
	#PMU_CC1_IF_TYPE_MII
 0x00000010

	)

1097 
	#PMU_CC1_IF_TYPE_RGMII
 0x00000020

	)

1099 
	#PMU_CC1_SW_TYPE_MASK
 0x000000c0

	)

1100 
	#PMU_CC1_SW_TYPE_EPHY
 0x00000000

	)

1101 
	#PMU_CC1_SW_TYPE_EPHYMII
 0x00000040

	)

1102 
	#PMU_CC1_SW_TYPE_EPHYRMII
 0x00000080

	)

1103 
	#PMU_CC1_SW_TYPE_RGMII
 0x000000c0

	)

1106 
	#PMU_CHIPCTL2
 2

	)

1109 
	#PMU_CHIPCTL3
 3

	)

1111 
	#PMU_CC3_ENABLE_SDIO_WAKEUP_SHIFT
 19

	)

1112 
	#PMU_CC3_ENABLE_RF_SHIFT
 22

	)

1113 
	#PMU_CC3_RF_DISABLE_IVALUE_SHIFT
 23

	)

1122 
	#PMU0_PLL0_PLLCTL0
 0

	)

1123 
	#PMU0_PLL0_PC0_PDIV_MASK
 1

	)

1124 
	#PMU0_PLL0_PC0_PDIV_FREQ
 25000

	)

1125 
	#PMU0_PLL0_PC0_DIV_ARM_MASK
 0x00000038

	)

1126 
	#PMU0_PLL0_PC0_DIV_ARM_SHIFT
 3

	)

1127 
	#PMU0_PLL0_PC0_DIV_ARM_BASE
 8

	)

1130 
	#PMU0_PLL0_PC0_DIV_ARM_110MHZ
 0

	)

1131 
	#PMU0_PLL0_PC0_DIV_ARM_97_7MHZ
 1

	)

1132 
	#PMU0_PLL0_PC0_DIV_ARM_88MHZ
 2

	)

1133 
	#PMU0_PLL0_PC0_DIV_ARM_80MHZ
 3

	)

1134 
	#PMU0_PLL0_PC0_DIV_ARM_73_3MHZ
 4

	)

1135 
	#PMU0_PLL0_PC0_DIV_ARM_67_7MHZ
 5

	)

1136 
	#PMU0_PLL0_PC0_DIV_ARM_62_9MHZ
 6

	)

1137 
	#PMU0_PLL0_PC0_DIV_ARM_58_6MHZ
 7

	)

1140 
	#PMU0_PLL0_PLLCTL1
 1

	)

1141 
	#PMU0_PLL0_PC1_WILD_INT_MASK
 0xf0000000

	)

1142 
	#PMU0_PLL0_PC1_WILD_INT_SHIFT
 28

	)

1143 
	#PMU0_PLL0_PC1_WILD_FRAC_MASK
 0x0fffff00

	)

1144 
	#PMU0_PLL0_PC1_WILD_FRAC_SHIFT
 8

	)

1145 
	#PMU0_PLL0_PC1_STOP_MOD
 0x00000040

	)

1148 
	#PMU0_PLL0_PLLCTL2
 2

	)

1149 
	#PMU0_PLL0_PC2_WILD_INT_MASK
 0xf

	)

1150 
	#PMU0_PLL0_PC2_WILD_INT_SHIFT
 4

	)

1154 
	#PMU1_PLL0_PLLCTL0
 0

	)

1155 
	#PMU1_PLL0_PC0_P1DIV_MASK
 0x00f00000

	)

1156 
	#PMU1_PLL0_PC0_P1DIV_SHIFT
 20

	)

1157 
	#PMU1_PLL0_PC0_P2DIV_MASK
 0x0f000000

	)

1158 
	#PMU1_PLL0_PC0_P2DIV_SHIFT
 24

	)

1161 
	#PMU1_PLL0_PLLCTL1
 1

	)

1162 
	#PMU1_PLL0_PC1_M1DIV_MASK
 0x000000ff

	)

1163 
	#PMU1_PLL0_PC1_M1DIV_SHIFT
 0

	)

1164 
	#PMU1_PLL0_PC1_M2DIV_MASK
 0x0000ff00

	)

1165 
	#PMU1_PLL0_PC1_M2DIV_SHIFT
 8

	)

1166 
	#PMU1_PLL0_PC1_M3DIV_MASK
 0x00ff0000

	)

1167 
	#PMU1_PLL0_PC1_M3DIV_SHIFT
 16

	)

1168 
	#PMU1_PLL0_PC1_M4DIV_MASK
 0xff000000

	)

1169 
	#PMU1_PLL0_PC1_M4DIV_SHIFT
 24

	)

1170 
	#PMU1_PLL0_PC1_M4DIV_BY_9
 9

	)

1171 
	#PMU1_PLL0_PC1_M4DIV_BY_18
 0x12

	)

1172 
	#PMU1_PLL0_PC1_M4DIV_BY_36
 0x24

	)

1174 
	#DOT11MAC_880MHZ_CLK_DIVISOR_SHIFT
 8

	)

1175 
	#DOT11MAC_880MHZ_CLK_DIVISOR_MASK
 (0xFF << 
DOT11MAC_880MHZ_CLK_DIVISOR_SHIFT
)

	)

1176 
	#DOT11MAC_880MHZ_CLK_DIVISOR_VAL
 (0xE << 
DOT11MAC_880MHZ_CLK_DIVISOR_SHIFT
)

	)

1179 
	#PMU1_PLL0_PLLCTL2
 2

	)

1180 
	#PMU1_PLL0_PC2_M5DIV_MASK
 0x000000ff

	)

1181 
	#PMU1_PLL0_PC2_M5DIV_SHIFT
 0

	)

1182 
	#PMU1_PLL0_PC2_M5DIV_BY_12
 0xc

	)

1183 
	#PMU1_PLL0_PC2_M5DIV_BY_18
 0x12

	)

1184 
	#PMU1_PLL0_PC2_M5DIV_BY_36
 0x24

	)

1185 
	#PMU1_PLL0_PC2_M6DIV_MASK
 0x0000ff00

	)

1186 
	#PMU1_PLL0_PC2_M6DIV_SHIFT
 8

	)

1187 
	#PMU1_PLL0_PC2_M6DIV_BY_18
 0x12

	)

1188 
	#PMU1_PLL0_PC2_M6DIV_BY_36
 0x24

	)

1189 
	#PMU1_PLL0_PC2_NDIV_MODE_MASK
 0x000e0000

	)

1190 
	#PMU1_PLL0_PC2_NDIV_MODE_SHIFT
 17

	)

1191 
	#PMU1_PLL0_PC2_NDIV_MODE_MASH
 1

	)

1192 
	#PMU1_PLL0_PC2_NDIV_MODE_MFB
 2

	)

1193 
	#PMU1_PLL0_PC2_NDIV_INT_MASK
 0x1ff00000

	)

1194 
	#PMU1_PLL0_PC2_NDIV_INT_SHIFT
 20

	)

1197 
	#PMU1_PLL0_PLLCTL3
 3

	)

1198 
	#PMU1_PLL0_PC3_NDIV_FRAC_MASK
 0x00ffffff

	)

1199 
	#PMU1_PLL0_PC3_NDIV_FRAC_SHIFT
 0

	)

1202 
	#PMU1_PLL0_PLLCTL4
 4

	)

1205 
	#PMU1_PLL0_PLLCTL5
 5

	)

1206 
	#PMU1_PLL0_PC5_CLK_DRV_MASK
 0xffffff00

	)

1207 
	#PMU1_PLL0_PC5_CLK_DRV_SHIFT
 8

	)

1210 
	#PMU2_PHY_PLL_PLLCTL
 4

	)

1211 
	#PMU2_SI_PLL_PLLCTL
 10

	)

1216 
	#PMU2_PLL_PLLCTL0
 0

	)

1217 
	#PMU2_PLL_PC0_P1DIV_MASK
 0x00f00000

	)

1218 
	#PMU2_PLL_PC0_P1DIV_SHIFT
 20

	)

1219 
	#PMU2_PLL_PC0_P2DIV_MASK
 0x0f000000

	)

1220 
	#PMU2_PLL_PC0_P2DIV_SHIFT
 24

	)

1223 
	#PMU2_PLL_PLLCTL1
 1

	)

1224 
	#PMU2_PLL_PC1_M1DIV_MASK
 0x000000ff

	)

1225 
	#PMU2_PLL_PC1_M1DIV_SHIFT
 0

	)

1226 
	#PMU2_PLL_PC1_M2DIV_MASK
 0x0000ff00

	)

1227 
	#PMU2_PLL_PC1_M2DIV_SHIFT
 8

	)

1228 
	#PMU2_PLL_PC1_M3DIV_MASK
 0x00ff0000

	)

1229 
	#PMU2_PLL_PC1_M3DIV_SHIFT
 16

	)

1230 
	#PMU2_PLL_PC1_M4DIV_MASK
 0xff000000

	)

1231 
	#PMU2_PLL_PC1_M4DIV_SHIFT
 24

	)

1234 
	#PMU2_PLL_PLLCTL2
 2

	)

1235 
	#PMU2_PLL_PC2_M5DIV_MASK
 0x000000ff

	)

1236 
	#PMU2_PLL_PC2_M5DIV_SHIFT
 0

	)

1237 
	#PMU2_PLL_PC2_M6DIV_MASK
 0x0000ff00

	)

1238 
	#PMU2_PLL_PC2_M6DIV_SHIFT
 8

	)

1239 
	#PMU2_PLL_PC2_NDIV_MODE_MASK
 0x000e0000

	)

1240 
	#PMU2_PLL_PC2_NDIV_MODE_SHIFT
 17

	)

1241 
	#PMU2_PLL_PC2_NDIV_INT_MASK
 0x1ff00000

	)

1242 
	#PMU2_PLL_PC2_NDIV_INT_SHIFT
 20

	)

1245 
	#PMU2_PLL_PLLCTL3
 3

	)

1246 
	#PMU2_PLL_PC3_NDIV_FRAC_MASK
 0x00ffffff

	)

1247 
	#PMU2_PLL_PC3_NDIV_FRAC_SHIFT
 0

	)

1250 
	#PMU2_PLL_PLLCTL4
 4

	)

1253 
	#PMU2_PLL_PLLCTL5
 5

	)

1254 
	#PMU2_PLL_PC5_CLKDRIVE_CH1_MASK
 0x00000f00

	)

1255 
	#PMU2_PLL_PC5_CLKDRIVE_CH1_SHIFT
 8

	)

1256 
	#PMU2_PLL_PC5_CLKDRIVE_CH2_MASK
 0x0000f000

	)

1257 
	#PMU2_PLL_PC5_CLKDRIVE_CH2_SHIFT
 12

	)

1258 
	#PMU2_PLL_PC5_CLKDRIVE_CH3_MASK
 0x000f0000

	)

1259 
	#PMU2_PLL_PC5_CLKDRIVE_CH3_SHIFT
 16

	)

1260 
	#PMU2_PLL_PC5_CLKDRIVE_CH4_MASK
 0x00f00000

	)

1261 
	#PMU2_PLL_PC5_CLKDRIVE_CH4_SHIFT
 20

	)

1262 
	#PMU2_PLL_PC5_CLKDRIVE_CH5_MASK
 0x0f000000

	)

1263 
	#PMU2_PLL_PC5_CLKDRIVE_CH5_SHIFT
 24

	)

1264 
	#PMU2_PLL_PC5_CLKDRIVE_CH6_MASK
 0xf0000000

	)

1265 
	#PMU2_PLL_PC5_CLKDRIVE_CH6_SHIFT
 28

	)

1268 
	#PMU5_PLL_P1P2_OFF
 0

	)

1269 
	#PMU5_PLL_P1_MASK
 0x0f000000

	)

1270 
	#PMU5_PLL_P1_SHIFT
 24

	)

1271 
	#PMU5_PLL_P2_MASK
 0x00f00000

	)

1272 
	#PMU5_PLL_P2_SHIFT
 20

	)

1273 
	#PMU5_PLL_M14_OFF
 1

	)

1274 
	#PMU5_PLL_MDIV_MASK
 0x000000ff

	)

1275 
	#PMU5_PLL_MDIV_WIDTH
 8

	)

1276 
	#PMU5_PLL_NM5_OFF
 2

	)

1277 
	#PMU5_PLL_NDIV_MASK
 0xfff00000

	)

1278 
	#PMU5_PLL_NDIV_SHIFT
 20

	)

1279 
	#PMU5_PLL_NDIV_MODE_MASK
 0x000e0000

	)

1280 
	#PMU5_PLL_NDIV_MODE_SHIFT
 17

	)

1281 
	#PMU5_PLL_FMAB_OFF
 3

	)

1282 
	#PMU5_PLL_MRAT_MASK
 0xf0000000

	)

1283 
	#PMU5_PLL_MRAT_SHIFT
 28

	)

1284 
	#PMU5_PLL_ABRAT_MASK
 0x08000000

	)

1285 
	#PMU5_PLL_ABRAT_SHIFT
 27

	)

1286 
	#PMU5_PLL_FDIV_MASK
 0x07ffffff

	)

1287 
	#PMU5_PLL_PLLCTL_OFF
 4

	)

1288 
	#PMU5_PLL_PCHI_OFF
 5

	)

1289 
	#PMU5_PLL_PCHI_MASK
 0x0000003f

	)

1292 
	#PMU_XTALFREQ_REG_ILPCTR_MASK
 0x00001FFF

	)

1293 
	#PMU_XTALFREQ_REG_MEASURE_MASK
 0x80000000

	)

1294 
	#PMU_XTALFREQ_REG_MEASURE_SHIFT
 31

	)

1297 
	#PMU5_MAINPLL_CPU
 1

	)

1298 
	#PMU5_MAINPLL_MEM
 2

	)

1299 
	#PMU5_MAINPLL_SI
 3

	)

1302 
	#PMU4706_MAINPLL_PLL0
 0

	)

1303 
	#PMU6_4706_PROCPLL_OFF
 4

	)

1304 
	#PMU6_4706_PROC_P2DIV_MASK
 0x000f0000

	)

1305 
	#PMU6_4706_PROC_P2DIV_SHIFT
 16

	)

1306 
	#PMU6_4706_PROC_P1DIV_MASK
 0x0000f000

	)

1307 
	#PMU6_4706_PROC_P1DIV_SHIFT
 12

	)

1308 
	#PMU6_4706_PROC_NDIV_INT_MASK
 0x00000ff8

	)

1309 
	#PMU6_4706_PROC_NDIV_INT_SHIFT
 3

	)

1310 
	#PMU6_4706_PROC_NDIV_MODE_MASK
 0x00000007

	)

1311 
	#PMU6_4706_PROC_NDIV_MODE_SHIFT
 0

	)

1313 
	#PMU7_PLL_PLLCTL7
 7

	)

1314 
	#PMU7_PLL_CTL7_M4DIV_MASK
 0xff000000

	)

1315 
	#PMU7_PLL_CTL7_M4DIV_SHIFT
 24

	)

1316 
	#PMU7_PLL_CTL7_M4DIV_BY_6
 6

	)

1317 
	#PMU7_PLL_CTL7_M4DIV_BY_12
 0xc

	)

1318 
	#PMU7_PLL_CTL7_M4DIV_BY_24
 0x18

	)

1319 
	#PMU7_PLL_PLLCTL8
 8

	)

1320 
	#PMU7_PLL_CTL8_M5DIV_MASK
 0x000000ff

	)

1321 
	#PMU7_PLL_CTL8_M5DIV_SHIFT
 0

	)

1322 
	#PMU7_PLL_CTL8_M5DIV_BY_8
 8

	)

1323 
	#PMU7_PLL_CTL8_M5DIV_BY_12
 0xc

	)

1324 
	#PMU7_PLL_CTL8_M5DIV_BY_24
 0x18

	)

1325 
	#PMU7_PLL_CTL8_M6DIV_MASK
 0x0000ff00

	)

1326 
	#PMU7_PLL_CTL8_M6DIV_SHIFT
 8

	)

1327 
	#PMU7_PLL_CTL8_M6DIV_BY_12
 0xc

	)

1328 
	#PMU7_PLL_CTL8_M6DIV_BY_24
 0x18

	)

1329 
	#PMU7_PLL_PLLCTL11
 11

	)

1330 
	#PMU7_PLL_PLLCTL11_MASK
 0xffffff00

	)

1331 
	#PMU7_PLL_PLLCTL11_VAL
 0x22222200

	)

1334 
	#PMU15_PLL_PLLCTL0
 0

	)

1335 
	#PMU15_PLL_PC0_CLKSEL_MASK
 0x00000003

	)

1336 
	#PMU15_PLL_PC0_CLKSEL_SHIFT
 0

	)

1337 
	#PMU15_PLL_PC0_FREQTGT_MASK
 0x003FFFFC

	)

1338 
	#PMU15_PLL_PC0_FREQTGT_SHIFT
 2

	)

1339 
	#PMU15_PLL_PC0_PRESCALE_MASK
 0x00C00000

	)

1340 
	#PMU15_PLL_PC0_PRESCALE_SHIFT
 22

	)

1341 
	#PMU15_PLL_PC0_KPCTRL_MASK
 0x07000000

	)

1342 
	#PMU15_PLL_PC0_KPCTRL_SHIFT
 24

	)

1343 
	#PMU15_PLL_PC0_FCNTCTRL_MASK
 0x38000000

	)

1344 
	#PMU15_PLL_PC0_FCNTCTRL_SHIFT
 27

	)

1345 
	#PMU15_PLL_PC0_FDCMODE_MASK
 0x40000000

	)

1346 
	#PMU15_PLL_PC0_FDCMODE_SHIFT
 30

	)

1347 
	#PMU15_PLL_PC0_CTRLBIAS_MASK
 0x80000000

	)

1348 
	#PMU15_PLL_PC0_CTRLBIAS_SHIFT
 31

	)

1350 
	#PMU15_PLL_PLLCTL1
 1

	)

1351 
	#PMU15_PLL_PC1_BIAS_CTLM_MASK
 0x00000060

	)

1352 
	#PMU15_PLL_PC1_BIAS_CTLM_SHIFT
 5

	)

1353 
	#PMU15_PLL_PC1_BIAS_CTLM_RST_MASK
 0x00000040

	)

1354 
	#PMU15_PLL_PC1_BIAS_CTLM_RST_SHIFT
 6

	)

1355 
	#PMU15_PLL_PC1_BIAS_SS_DIVR_MASK
 0x0001FF80

	)

1356 
	#PMU15_PLL_PC1_BIAS_SS_DIVR_SHIFT
 7

	)

1357 
	#PMU15_PLL_PC1_BIAS_SS_RSTVAL_MASK
 0x03FE0000

	)

1358 
	#PMU15_PLL_PC1_BIAS_SS_RSTVAL_SHIFT
 17

	)

1359 
	#PMU15_PLL_PC1_BIAS_INTG_BW_MASK
 0x0C000000

	)

1360 
	#PMU15_PLL_PC1_BIAS_INTG_BW_SHIFT
 26

	)

1361 
	#PMU15_PLL_PC1_BIAS_INTG_BYP_MASK
 0x10000000

	)

1362 
	#PMU15_PLL_PC1_BIAS_INTG_BYP_SHIFT
 28

	)

1363 
	#PMU15_PLL_PC1_OPENLP_EN_MASK
 0x40000000

	)

1364 
	#PMU15_PLL_PC1_OPENLP_EN_SHIFT
 30

	)

1366 
	#PMU15_PLL_PLLCTL2
 2

	)

1367 
	#PMU15_PLL_PC2_CTEN_MASK
 0x00000001

	)

1368 
	#PMU15_PLL_PC2_CTEN_SHIFT
 0

	)

1370 
	#PMU15_PLL_PLLCTL3
 3

	)

1371 
	#PMU15_PLL_PC3_DITHER_EN_MASK
 0x00000001

	)

1372 
	#PMU15_PLL_PC3_DITHER_EN_SHIFT
 0

	)

1373 
	#PMU15_PLL_PC3_DCOCTLSP_MASK
 0xFE000000

	)

1374 
	#PMU15_PLL_PC3_DCOCTLSP_SHIFT
 25

	)

1375 
	#PMU15_PLL_PC3_DCOCTLSP_DIV2EN_MASK
 0x01

	)

1376 
	#PMU15_PLL_PC3_DCOCTLSP_DIV2EN_SHIFT
 0

	)

1377 
	#PMU15_PLL_PC3_DCOCTLSP_CH0EN_MASK
 0x02

	)

1378 
	#PMU15_PLL_PC3_DCOCTLSP_CH0EN_SHIFT
 1

	)

1379 
	#PMU15_PLL_PC3_DCOCTLSP_CH1EN_MASK
 0x04

	)

1380 
	#PMU15_PLL_PC3_DCOCTLSP_CH1EN_SHIFT
 2

	)

1381 
	#PMU15_PLL_PC3_DCOCTLSP_CH0SEL_MASK
 0x18

	)

1382 
	#PMU15_PLL_PC3_DCOCTLSP_CH0SEL_SHIFT
 3

	)

1383 
	#PMU15_PLL_PC3_DCOCTLSP_CH1SEL_MASK
 0x60

	)

1384 
	#PMU15_PLL_PC3_DCOCTLSP_CH1SEL_SHIFT
 5

	)

1385 
	#PMU15_PLL_PC3_DCOCTLSP_CHSEL_OUTP_DIV1
 0

	)

1386 
	#PMU15_PLL_PC3_DCOCTLSP_CHSEL_OUTP_DIV2
 1

	)

1387 
	#PMU15_PLL_PC3_DCOCTLSP_CHSEL_OUTP_DIV3
 2

	)

1388 
	#PMU15_PLL_PC3_DCOCTLSP_CHSEL_OUTP_DIV5
 3

	)

1390 
	#PMU15_PLL_PLLCTL4
 4

	)

1391 
	#PMU15_PLL_PC4_FLLCLK1_DIV_MASK
 0x00000007

	)

1392 
	#PMU15_PLL_PC4_FLLCLK1_DIV_SHIFT
 0

	)

1393 
	#PMU15_PLL_PC4_FLLCLK2_DIV_MASK
 0x00000038

	)

1394 
	#PMU15_PLL_PC4_FLLCLK2_DIV_SHIFT
 3

	)

1395 
	#PMU15_PLL_PC4_FLLCLK3_DIV_MASK
 0x000001C0

	)

1396 
	#PMU15_PLL_PC4_FLLCLK3_DIV_SHIFT
 6

	)

1397 
	#PMU15_PLL_PC4_DBGMODE_MASK
 0x00000E00

	)

1398 
	#PMU15_PLL_PC4_DBGMODE_SHIFT
 9

	)

1399 
	#PMU15_PLL_PC4_FLL480_CTLSP_LK_MASK
 0x00001000

	)

1400 
	#PMU15_PLL_PC4_FLL480_CTLSP_LK_SHIFT
 12

	)

1401 
	#PMU15_PLL_PC4_FLL480_CTLSP_MASK
 0x000FE000

	)

1402 
	#PMU15_PLL_PC4_FLL480_CTLSP_SHIFT
 13

	)

1403 
	#PMU15_PLL_PC4_DINPOL_MASK
 0x00100000

	)

1404 
	#PMU15_PLL_PC4_DINPOL_SHIFT
 20

	)

1405 
	#PMU15_PLL_PC4_CLKOUT_PD_MASK
 0x00200000

	)

1406 
	#PMU15_PLL_PC4_CLKOUT_PD_SHIFT
 21

	)

1407 
	#PMU15_PLL_PC4_CLKDIV2_PD_MASK
 0x00400000

	)

1408 
	#PMU15_PLL_PC4_CLKDIV2_PD_SHIFT
 22

	)

1409 
	#PMU15_PLL_PC4_CLKDIV4_PD_MASK
 0x00800000

	)

1410 
	#PMU15_PLL_PC4_CLKDIV4_PD_SHIFT
 23

	)

1411 
	#PMU15_PLL_PC4_CLKDIV8_PD_MASK
 0x01000000

	)

1412 
	#PMU15_PLL_PC4_CLKDIV8_PD_SHIFT
 24

	)

1413 
	#PMU15_PLL_PC4_CLKDIV16_PD_MASK
 0x02000000

	)

1414 
	#PMU15_PLL_PC4_CLKDIV16_PD_SHIFT
 25

	)

1415 
	#PMU15_PLL_PC4_TEST_EN_MASK
 0x04000000

	)

1416 
	#PMU15_PLL_PC4_TEST_EN_SHIFT
 26

	)

1418 
	#PMU15_PLL_PLLCTL5
 5

	)

1419 
	#PMU15_PLL_PC5_FREQTGT_MASK
 0x000FFFFF

	)

1420 
	#PMU15_PLL_PC5_FREQTGT_SHIFT
 0

	)

1421 
	#PMU15_PLL_PC5_DCOCTLSP_MASK
 0x07F00000

	)

1422 
	#PMU15_PLL_PC5_DCOCTLSP_SHIFT
 20

	)

1423 
	#PMU15_PLL_PC5_PRESCALE_MASK
 0x18000000

	)

1424 
	#PMU15_PLL_PC5_PRESCALE_SHIFT
 27

	)

1426 
	#PMU15_PLL_PLLCTL6
 6

	)

1427 
	#PMU15_PLL_PC6_FREQTGT_MASK
 0x000FFFFF

	)

1428 
	#PMU15_PLL_PC6_FREQTGT_SHIFT
 0

	)

1429 
	#PMU15_PLL_PC6_DCOCTLSP_MASK
 0x07F00000

	)

1430 
	#PMU15_PLL_PC6_DCOCTLSP_SHIFT
 20

	)

1431 
	#PMU15_PLL_PC6_PRESCALE_MASK
 0x18000000

	)

1432 
	#PMU15_PLL_PC6_PRESCALE_SHIFT
 27

	)

1434 
	#PMU15_FREQTGT_480_DEFAULT
 0x19AB1

	)

1435 
	#PMU15_FREQTGT_492_DEFAULT
 0x1A4F5

	)

1436 
	#PMU15_ARM_96MHZ
 96000000

	)

1437 
	#PMU15_ARM_98MHZ
 98400000

	)

1438 
	#PMU15_ARM_97MHZ
 97000000

	)

1441 
	#PMU17_PLLCTL2_NDIVTYPE_MASK
 0x00000070

	)

1442 
	#PMU17_PLLCTL2_NDIVTYPE_SHIFT
 4

	)

1444 
	#PMU17_PLLCTL2_NDIV_MODE_INT
 0

	)

1445 
	#PMU17_PLLCTL2_NDIV_MODE_INT1B8
 1

	)

1446 
	#PMU17_PLLCTL2_NDIV_MODE_MASH111
 2

	)

1447 
	#PMU17_PLLCTL2_NDIV_MODE_MASH111B8
 3

	)

1449 
	#PMU17_PLLCTL0_BBPLL_PWRDWN
 0

	)

1450 
	#PMU17_PLLCTL0_BBPLL_DRST
 3

	)

1451 
	#PMU17_PLLCTL0_BBPLL_DISBL_CLK
 8

	)

1454 
	#PMU4716_MAINPLL_PLL0
 12

	)

1457 
	#PMU5356_MAINPLL_PLL0
 0

	)

1458 
	#PMU5357_MAINPLL_PLL0
 0

	)

1461 
	#RES4716_PROC_PLL_ON
 0x00000040

	)

1462 
	#RES4716_PROC_HT_AVAIL
 0x00000080

	)

1465 
	#CCTRL_471X_I2S_PINS_ENABLE
 0x0080

	)

1469 
	#CCTRL_5357_I2S_PINS_ENABLE
 0x00040000

	)

1470 
	#CCTRL_5357_I2CSPI_PINS_ENABLE
 0x00080000

	)

1473 
	#RES5354_EXT_SWITCHER_PWM
 0

	)

1474 
	#RES5354_BB_SWITCHER_PWM
 1

	)

1475 
	#RES5354_BB_SWITCHER_BURST
 2

	)

1476 
	#RES5354_BB_EXT_SWITCHER_BURST
 3

	)

1477 
	#RES5354_ILP_REQUEST
 4

	)

1478 
	#RES5354_RADIO_SWITCHER_PWM
 5

	)

1479 
	#RES5354_RADIO_SWITCHER_BURST
 6

	)

1480 
	#RES5354_ROM_SWITCH
 7

	)

1481 
	#RES5354_PA_REF_LDO
 8

	)

1482 
	#RES5354_RADIO_LDO
 9

	)

1483 
	#RES5354_AFE_LDO
 10

	)

1484 
	#RES5354_PLL_LDO
 11

	)

1485 
	#RES5354_BG_FILTBYP
 12

	)

1486 
	#RES5354_TX_FILTBYP
 13

	)

1487 
	#RES5354_RX_FILTBYP
 14

	)

1488 
	#RES5354_XTAL_PU
 15

	)

1489 
	#RES5354_XTAL_EN
 16

	)

1490 
	#RES5354_BB_PLL_FILTBYP
 17

	)

1491 
	#RES5354_RF_PLL_FILTBYP
 18

	)

1492 
	#RES5354_BB_PLL_PU
 19

	)

1495 
	#CCTRL5357_EXTPA
 (1<<14Ë

	)

1496 
	#CCTRL5357_ANT_MUX_2o3
 (1<<15Ë

	)

1497 
	#CCTRL5357_NFLASH
 (1<<16Ë

	)

1500 
	#CCTRL43217_EXTPA_C0
 (1<<13Ë

	)

1501 
	#CCTRL43217_EXTPA_C1
 (1<<8Ë

	)

1504 
	#RES4328_EXT_SWITCHER_PWM
 0

	)

1505 
	#RES4328_BB_SWITCHER_PWM
 1

	)

1506 
	#RES4328_BB_SWITCHER_BURST
 2

	)

1507 
	#RES4328_BB_EXT_SWITCHER_BURST
 3

	)

1508 
	#RES4328_ILP_REQUEST
 4

	)

1509 
	#RES4328_RADIO_SWITCHER_PWM
 5

	)

1510 
	#RES4328_RADIO_SWITCHER_BURST
 6

	)

1511 
	#RES4328_ROM_SWITCH
 7

	)

1512 
	#RES4328_PA_REF_LDO
 8

	)

1513 
	#RES4328_RADIO_LDO
 9

	)

1514 
	#RES4328_AFE_LDO
 10

	)

1515 
	#RES4328_PLL_LDO
 11

	)

1516 
	#RES4328_BG_FILTBYP
 12

	)

1517 
	#RES4328_TX_FILTBYP
 13

	)

1518 
	#RES4328_RX_FILTBYP
 14

	)

1519 
	#RES4328_XTAL_PU
 15

	)

1520 
	#RES4328_XTAL_EN
 16

	)

1521 
	#RES4328_BB_PLL_FILTBYP
 17

	)

1522 
	#RES4328_RF_PLL_FILTBYP
 18

	)

1523 
	#RES4328_BB_PLL_PU
 19

	)

1526 
	#RES4325_BUCK_BOOST_BURST
 0

	)

1527 
	#RES4325_CBUCK_BURST
 1

	)

1528 
	#RES4325_CBUCK_PWM
 2

	)

1529 
	#RES4325_CLDO_CBUCK_BURST
 3

	)

1530 
	#RES4325_CLDO_CBUCK_PWM
 4

	)

1531 
	#RES4325_BUCK_BOOST_PWM
 5

	)

1532 
	#RES4325_ILP_REQUEST
 6

	)

1533 
	#RES4325_ABUCK_BURST
 7

	)

1534 
	#RES4325_ABUCK_PWM
 8

	)

1535 
	#RES4325_LNLDO1_PU
 9

	)

1536 
	#RES4325_OTP_PU
 10

	)

1537 
	#RES4325_LNLDO3_PU
 11

	)

1538 
	#RES4325_LNLDO4_PU
 12

	)

1539 
	#RES4325_XTAL_PU
 13

	)

1540 
	#RES4325_ALP_AVAIL
 14

	)

1541 
	#RES4325_RX_PWRSW_PU
 15

	)

1542 
	#RES4325_TX_PWRSW_PU
 16

	)

1543 
	#RES4325_RFPLL_PWRSW_PU
 17

	)

1544 
	#RES4325_LOGEN_PWRSW_PU
 18

	)

1545 
	#RES4325_AFE_PWRSW_PU
 19

	)

1546 
	#RES4325_BBPLL_PWRSW_PU
 20

	)

1547 
	#RES4325_HT_AVAIL
 21

	)

1550 
	#RES4325B0_CBUCK_LPOM
 1

	)

1551 
	#RES4325B0_CBUCK_BURST
 2

	)

1552 
	#RES4325B0_CBUCK_PWM
 3

	)

1553 
	#RES4325B0_CLDO_PU
 4

	)

1556 
	#RES4325C1_LNLDO2_PU
 12

	)

1559 
	#CST4325_SPROM_OTP_SEL_MASK
 0x00000003

	)

1560 
	#CST4325_DEFCIS_SEL
 0

	)

1561 
	#CST4325_SPROM_SEL
 1

	)

1562 
	#CST4325_OTP_SEL
 2

	)

1563 
	#CST4325_OTP_PWRDN
 3

	)

1564 
	#CST4325_SDIO_USB_MODE_MASK
 0x00000004

	)

1565 
	#CST4325_SDIO_USB_MODE_SHIFT
 2

	)

1566 
	#CST4325_RCAL_VALID_MASK
 0x00000008

	)

1567 
	#CST4325_RCAL_VALID_SHIFT
 3

	)

1568 
	#CST4325_RCAL_VALUE_MASK
 0x000001f0

	)

1569 
	#CST4325_RCAL_VALUE_SHIFT
 4

	)

1570 
	#CST4325_PMUTOP_2B_MASK
 0x00000200

	)

1571 
	#CST4325_PMUTOP_2B_SHIFT
 9

	)

1573 
	#RES4329_RESERVED0
 0

	)

1574 
	#RES4329_CBUCK_LPOM
 1

	)

1575 
	#RES4329_CBUCK_BURST
 2

	)

1576 
	#RES4329_CBUCK_PWM
 3

	)

1577 
	#RES4329_CLDO_PU
 4

	)

1578 
	#RES4329_PALDO_PU
 5

	)

1579 
	#RES4329_ILP_REQUEST
 6

	)

1580 
	#RES4329_RESERVED7
 7

	)

1581 
	#RES4329_RESERVED8
 8

	)

1582 
	#RES4329_LNLDO1_PU
 9

	)

1583 
	#RES4329_OTP_PU
 10

	)

1584 
	#RES4329_RESERVED11
 11

	)

1585 
	#RES4329_LNLDO2_PU
 12

	)

1586 
	#RES4329_XTAL_PU
 13

	)

1587 
	#RES4329_ALP_AVAIL
 14

	)

1588 
	#RES4329_RX_PWRSW_PU
 15

	)

1589 
	#RES4329_TX_PWRSW_PU
 16

	)

1590 
	#RES4329_RFPLL_PWRSW_PU
 17

	)

1591 
	#RES4329_LOGEN_PWRSW_PU
 18

	)

1592 
	#RES4329_AFE_PWRSW_PU
 19

	)

1593 
	#RES4329_BBPLL_PWRSW_PU
 20

	)

1594 
	#RES4329_HT_AVAIL
 21

	)

1596 
	#CST4329_SPROM_OTP_SEL_MASK
 0x00000003

	)

1597 
	#CST4329_DEFCIS_SEL
 0

	)

1598 
	#CST4329_SPROM_SEL
 1

	)

1599 
	#CST4329_OTP_SEL
 2

	)

1600 
	#CST4329_OTP_PWRDN
 3

	)

1601 
	#CST4329_SPI_SDIO_MODE_MASK
 0x00000004

	)

1602 
	#CST4329_SPI_SDIO_MODE_SHIFT
 2

	)

1605 
	#CST4312_SPROM_OTP_SEL_MASK
 0x00000003

	)

1606 
	#CST4312_DEFCIS_SEL
 0

	)

1607 
	#CST4312_SPROM_SEL
 1

	)

1608 
	#CST4312_OTP_SEL
 2

	)

1609 
	#CST4312_OTP_BAD
 3

	)

1612 
	#RES4312_SWITCHER_BURST
 0

	)

1613 
	#RES4312_SWITCHER_PWM
 1

	)

1614 
	#RES4312_PA_REF_LDO
 2

	)

1615 
	#RES4312_CORE_LDO_BURST
 3

	)

1616 
	#RES4312_CORE_LDO_PWM
 4

	)

1617 
	#RES4312_RADIO_LDO
 5

	)

1618 
	#RES4312_ILP_REQUEST
 6

	)

1619 
	#RES4312_BG_FILTBYP
 7

	)

1620 
	#RES4312_TX_FILTBYP
 8

	)

1621 
	#RES4312_RX_FILTBYP
 9

	)

1622 
	#RES4312_XTAL_PU
 10

	)

1623 
	#RES4312_ALP_AVAIL
 11

	)

1624 
	#RES4312_BB_PLL_FILTBYP
 12

	)

1625 
	#RES4312_RF_PLL_FILTBYP
 13

	)

1626 
	#RES4312_HT_AVAIL
 14

	)

1629 
	#RES4322_RF_LDO
 0

	)

1630 
	#RES4322_ILP_REQUEST
 1

	)

1631 
	#RES4322_XTAL_PU
 2

	)

1632 
	#RES4322_ALP_AVAIL
 3

	)

1633 
	#RES4322_SI_PLL_ON
 4

	)

1634 
	#RES4322_HT_SI_AVAIL
 5

	)

1635 
	#RES4322_PHY_PLL_ON
 6

	)

1636 
	#RES4322_HT_PHY_AVAIL
 7

	)

1637 
	#RES4322_OTP_PU
 8

	)

1640 
	#CST4322_XTAL_FREQ_20_40MHZ
 0x00000020

	)

1641 
	#CST4322_SPROM_OTP_SEL_MASK
 0x000000c0

	)

1642 
	#CST4322_SPROM_OTP_SEL_SHIFT
 6

	)

1643 
	#CST4322_NO_SPROM_OTP
 0

	)

1644 
	#CST4322_SPROM_PRESENT
 1

	)

1645 
	#CST4322_OTP_PRESENT
 2

	)

1646 
	#CST4322_PCI_OR_USB
 0x00000100

	)

1647 
	#CST4322_BOOT_MASK
 0x00000600

	)

1648 
	#CST4322_BOOT_SHIFT
 9

	)

1649 
	#CST4322_BOOT_FROM_SRAM
 0

	)

1650 
	#CST4322_BOOT_FROM_ROM
 1

	)

1651 
	#CST4322_BOOT_FROM_FLASH
 2

	)

1652 
	#CST4322_BOOT_FROM_INVALID
 3

	)

1653 
	#CST4322_ILP_DIV_EN
 0x00000800

	)

1654 
	#CST4322_FLASH_TYPE_MASK
 0x00001000

	)

1655 
	#CST4322_FLASH_TYPE_SHIFT
 12

	)

1656 
	#CST4322_FLASH_TYPE_SHIFT_ST
 0

	)

1657 
	#CST4322_FLASH_TYPE_SHIFT_ATMEL
 1

	)

1658 
	#CST4322_ARM_TAP_SEL
 0x00002000

	)

1659 
	#CST4322_RES_INIT_MODE_MASK
 0x0000c000

	)

1660 
	#CST4322_RES_INIT_MODE_SHIFT
 14

	)

1661 
	#CST4322_RES_INIT_MODE_ILPAVAIL
 0

	)

1662 
	#CST4322_RES_INIT_MODE_ILPREQ
 1

	)

1663 
	#CST4322_RES_INIT_MODE_ALPAVAIL
 2

	)

1664 
	#CST4322_RES_INIT_MODE_HTAVAIL
 3

	)

1665 
	#CST4322_PCIPLLCLK_GATING
 0x00010000

	)

1666 
	#CST4322_CLK_SWITCH_PCI_TO_ALP
 0x00020000

	)

1667 
	#CST4322_PCI_CARDBUS_MODE
 0x00040000

	)

1670 
	#CCTRL43224_GPIO_TOGGLE
 0x8000

	)

1671 
	#CCTRL_43224A0_12MA_LED_DRIVE
 0x00F000F0

	)

1672 
	#CCTRL_43224B0_12MA_LED_DRIVE
 0xF0

	)

1675 
	#RES43236_REGULATOR
 0

	)

1676 
	#RES43236_ILP_REQUEST
 1

	)

1677 
	#RES43236_XTAL_PU
 2

	)

1678 
	#RES43236_ALP_AVAIL
 3

	)

1679 
	#RES43236_SI_PLL_ON
 4

	)

1680 
	#RES43236_HT_SI_AVAIL
 5

	)

1683 
	#CCTRL43236_BT_COEXIST
 (1<<0Ë

	)

1684 
	#CCTRL43236_SECI
 (1<<1Ë

	)

1685 
	#CCTRL43236_EXT_LNA
 (1<<2Ë

	)

1686 
	#CCTRL43236_ANT_MUX_2o3
 (1<<3Ë

	)

1687 
	#CCTRL43236_GSIO
 (1<<4Ë

	)

1690 
	#CST43236_SFLASH_MASK
 0x00000040

	)

1691 
	#CST43236_OTP_SEL_MASK
 0x00000080

	)

1692 
	#CST43236_OTP_SEL_SHIFT
 7

	)

1693 
	#CST43236_HSIC_MASK
 0x00000100

	)

1694 
	#CST43236_BP_CLK
 0x00000200

	)

1695 
	#CST43236_BOOT_MASK
 0x00001800

	)

1696 
	#CST43236_BOOT_SHIFT
 11

	)

1697 
	#CST43236_BOOT_FROM_SRAM
 0

	)

1698 
	#CST43236_BOOT_FROM_ROM
 1

	)

1699 
	#CST43236_BOOT_FROM_FLASH
 2

	)

1700 
	#CST43236_BOOT_FROM_INVALID
 3

	)

1703 
	#RES43237_REGULATOR
 0

	)

1704 
	#RES43237_ILP_REQUEST
 1

	)

1705 
	#RES43237_XTAL_PU
 2

	)

1706 
	#RES43237_ALP_AVAIL
 3

	)

1707 
	#RES43237_SI_PLL_ON
 4

	)

1708 
	#RES43237_HT_SI_AVAIL
 5

	)

1711 
	#CCTRL43237_BT_COEXIST
 (1<<0Ë

	)

1712 
	#CCTRL43237_SECI
 (1<<1Ë

	)

1713 
	#CCTRL43237_EXT_LNA
 (1<<2Ë

	)

1714 
	#CCTRL43237_ANT_MUX_2o3
 (1<<3Ë

	)

1715 
	#CCTRL43237_GSIO
 (1<<4Ë

	)

1718 
	#CST43237_SFLASH_MASK
 0x00000040

	)

1719 
	#CST43237_OTP_SEL_MASK
 0x00000080

	)

1720 
	#CST43237_OTP_SEL_SHIFT
 7

	)

1721 
	#CST43237_HSIC_MASK
 0x00000100

	)

1722 
	#CST43237_BP_CLK
 0x00000200

	)

1723 
	#CST43237_BOOT_MASK
 0x00001800

	)

1724 
	#CST43237_BOOT_SHIFT
 11

	)

1725 
	#CST43237_BOOT_FROM_SRAM
 0

	)

1726 
	#CST43237_BOOT_FROM_ROM
 1

	)

1727 
	#CST43237_BOOT_FROM_FLASH
 2

	)

1728 
	#CST43237_BOOT_FROM_INVALID
 3

	)

1731 
	#RES43239_OTP_PU
 9

	)

1732 
	#RES43239_MACPHY_CLKAVAIL
 23

	)

1733 
	#RES43239_HT_AVAIL
 24

	)

1736 
	#CST43239_SPROM_MASK
 0x00000002

	)

1737 
	#CST43239_SFLASH_MASK
 0x00000004

	)

1738 
	#CST43239_RES_INIT_MODE_SHIFT
 7

	)

1739 
	#CST43239_RES_INIT_MODE_MASK
 0x000001f0

	)

1740 
	#CST43239_CHIPMODE_SDIOD
(
cs
Ë((csË& (1 << 15)Ë

	)

1741 
	#CST43239_CHIPMODE_USB20D
(
cs
Ë(~(csË& (1 << 15)Ë

	)

1742 
	#CST43239_CHIPMODE_SDIO
(
cs
Ë(((csË& (1 << 0)Ë=0Ë

	)

1743 
	#CST43239_CHIPMODE_GSPI
(
cs
Ë(((csË& (1 << 0)Ë=(1 << 0)Ë

	)

1746 
	#RES4324_OTP_PU
 10

	)

1747 
	#RES4324_HT_AVAIL
 29

	)

1748 
	#RES4324_MACPHY_CLKAVAIL
 30

	)

1751 
	#CST4324_SPROM_MASK
 0x00000080

	)

1752 
	#CST4324_SFLASH_MASK
 0x00400000

	)

1753 
	#CST4324_RES_INIT_MODE_SHIFT
 10

	)

1754 
	#CST4324_RES_INIT_MODE_MASK
 0x00000c00

	)

1755 
	#CST4324_CHIPMODE_MASK
 0x7

	)

1756 
	#CST4324_CHIPMODE_SDIOD
(
cs
Ë((~(cs)Ë& (1 << 2)Ë

	)

1757 
	#CST4324_CHIPMODE_USB20D
(
cs
Ë(((csË& 
CST4324_CHIPMODE_MASK
Ë=0x6Ë

	)

1760 
	#RES4331_REGULATOR
 0

	)

1761 
	#RES4331_ILP_REQUEST
 1

	)

1762 
	#RES4331_XTAL_PU
 2

	)

1763 
	#RES4331_ALP_AVAIL
 3

	)

1764 
	#RES4331_SI_PLL_ON
 4

	)

1765 
	#RES4331_HT_SI_AVAIL
 5

	)

1768 
	#CCTRL4331_BT_COEXIST
 (1<<0Ë

	)

1769 
	#CCTRL4331_SECI
 (1<<1Ë

	)

1770 
	#CCTRL4331_EXT_LNA_G
 (1<<2Ë

	)

1771 
	#CCTRL4331_SPROM_GPIO13_15
 (1<<3Ë

	)

1772 
	#CCTRL4331_EXTPA_EN
 (1<<4Ë

	)

1773 
	#CCTRL4331_GPIOCLK_ON_SPROMCS
 (1<<5Ë

	)

1774 
	#CCTRL4331_PCIE_MDIO_ON_SPROMCS
 (1<<6Ë

	)

1775 
	#CCTRL4331_EXTPA_ON_GPIO2_5
 (1<<7Ë

	)

1776 
	#CCTRL4331_OVR_PIPEAUXCLKEN
 (1<<8Ë

	)

1777 
	#CCTRL4331_OVR_PIPEAUXPWRDOWN
 (1<<9Ë

	)

1778 
	#CCTRL4331_PCIE_AUXCLKEN
 (1<<10Ë

	)

1779 
	#CCTRL4331_PCIE_PIPE_PLLDOWN
 (1<<11Ë

	)

1780 
	#CCTRL4331_EXTPA_EN2
 (1<<12Ë

	)

1781 
	#CCTRL4331_EXT_LNA_A
 (1<<13Ë

	)

1782 
	#CCTRL4331_BT_SHD0_ON_GPIO4
 (1<<16Ë

	)

1783 
	#CCTRL4331_BT_SHD1_ON_GPIO5
 (1<<17Ë

	)

1784 
	#CCTRL4331_EXTPA_ANA_EN
 (1<<24Ë

	)

1787 
	#CST4331_XTAL_FREQ
 0x00000001

	)

1788 
	#CST4331_SPROM_OTP_SEL_MASK
 0x00000006

	)

1789 
	#CST4331_SPROM_OTP_SEL_SHIFT
 1

	)

1790 
	#CST4331_SPROM_PRESENT
 0x00000002

	)

1791 
	#CST4331_OTP_PRESENT
 0x00000004

	)

1792 
	#CST4331_LDO_RF
 0x00000008

	)

1793 
	#CST4331_LDO_PAR
 0x00000010

	)

1796 
	#RES4315_CBUCK_LPOM
 1

	)

1797 
	#RES4315_CBUCK_BURST
 2

	)

1798 
	#RES4315_CBUCK_PWM
 3

	)

1799 
	#RES4315_CLDO_PU
 4

	)

1800 
	#RES4315_PALDO_PU
 5

	)

1801 
	#RES4315_ILP_REQUEST
 6

	)

1802 
	#RES4315_LNLDO1_PU
 9

	)

1803 
	#RES4315_OTP_PU
 10

	)

1804 
	#RES4315_LNLDO2_PU
 12

	)

1805 
	#RES4315_XTAL_PU
 13

	)

1806 
	#RES4315_ALP_AVAIL
 14

	)

1807 
	#RES4315_RX_PWRSW_PU
 15

	)

1808 
	#RES4315_TX_PWRSW_PU
 16

	)

1809 
	#RES4315_RFPLL_PWRSW_PU
 17

	)

1810 
	#RES4315_LOGEN_PWRSW_PU
 18

	)

1811 
	#RES4315_AFE_PWRSW_PU
 19

	)

1812 
	#RES4315_BBPLL_PWRSW_PU
 20

	)

1813 
	#RES4315_HT_AVAIL
 21

	)

1816 
	#CST4315_SPROM_OTP_SEL_MASK
 0x00000003

	)

1817 
	#CST4315_DEFCIS_SEL
 0x00000000

	)

1818 
	#CST4315_SPROM_SEL
 0x00000001

	)

1819 
	#CST4315_OTP_SEL
 0x00000002

	)

1820 
	#CST4315_OTP_PWRDN
 0x00000003

	)

1821 
	#CST4315_SDIO_MODE
 0x00000004

	)

1822 
	#CST4315_RCAL_VALID
 0x00000008

	)

1823 
	#CST4315_RCAL_VALUE_MASK
 0x000001f0

	)

1824 
	#CST4315_RCAL_VALUE_SHIFT
 4

	)

1825 
	#CST4315_PALDO_EXTPNP
 0x00000200

	)

1826 
	#CST4315_CBUCK_MODE_MASK
 0x00000c00

	)

1827 
	#CST4315_CBUCK_MODE_BURST
 0x00000400

	)

1828 
	#CST4315_CBUCK_MODE_LPBURST
 0x00000c00

	)

1831 
	#RES4319_CBUCK_LPOM
 1

	)

1832 
	#RES4319_CBUCK_BURST
 2

	)

1833 
	#RES4319_CBUCK_PWM
 3

	)

1834 
	#RES4319_CLDO_PU
 4

	)

1835 
	#RES4319_PALDO_PU
 5

	)

1836 
	#RES4319_ILP_REQUEST
 6

	)

1837 
	#RES4319_LNLDO1_PU
 9

	)

1838 
	#RES4319_OTP_PU
 10

	)

1839 
	#RES4319_LNLDO2_PU
 12

	)

1840 
	#RES4319_XTAL_PU
 13

	)

1841 
	#RES4319_ALP_AVAIL
 14

	)

1842 
	#RES4319_RX_PWRSW_PU
 15

	)

1843 
	#RES4319_TX_PWRSW_PU
 16

	)

1844 
	#RES4319_RFPLL_PWRSW_PU
 17

	)

1845 
	#RES4319_LOGEN_PWRSW_PU
 18

	)

1846 
	#RES4319_AFE_PWRSW_PU
 19

	)

1847 
	#RES4319_BBPLL_PWRSW_PU
 20

	)

1848 
	#RES4319_HT_AVAIL
 21

	)

1851 
	#CST4319_SPI_CPULESSUSB
 0x00000001

	)

1852 
	#CST4319_SPI_CLK_POL
 0x00000002

	)

1853 
	#CST4319_SPI_CLK_PH
 0x00000008

	)

1854 
	#CST4319_SPROM_OTP_SEL_MASK
 0x000000c0

	)

1855 
	#CST4319_SPROM_OTP_SEL_SHIFT
 6

	)

1856 
	#CST4319_DEFCIS_SEL
 0x00000000

	)

1857 
	#CST4319_SPROM_SEL
 0x00000040

	)

1858 
	#CST4319_OTP_SEL
 0x00000080

	)

1859 
	#CST4319_OTP_PWRDN
 0x000000c0

	)

1860 
	#CST4319_SDIO_USB_MODE
 0x00000100

	)

1861 
	#CST4319_REMAP_SEL_MASK
 0x00000600

	)

1862 
	#CST4319_ILPDIV_EN
 0x00000800

	)

1863 
	#CST4319_XTAL_PD_POL
 0x00001000

	)

1864 
	#CST4319_LPO_SEL
 0x00002000

	)

1865 
	#CST4319_RES_INIT_MODE
 0x0000c000

	)

1866 
	#CST4319_PALDO_EXTPNP
 0x00010000

	)

1867 
	#CST4319_CBUCK_MODE_MASK
 0x00060000

	)

1868 
	#CST4319_CBUCK_MODE_BURST
 0x00020000

	)

1869 
	#CST4319_CBUCK_MODE_LPBURST
 0x00060000

	)

1870 
	#CST4319_RCAL_VALID
 0x01000000

	)

1871 
	#CST4319_RCAL_VALUE_MASK
 0x3e000000

	)

1872 
	#CST4319_RCAL_VALUE_SHIFT
 25

	)

1874 
	#PMU1_PLL0_CHIPCTL0
 0

	)

1875 
	#PMU1_PLL0_CHIPCTL1
 1

	)

1876 
	#PMU1_PLL0_CHIPCTL2
 2

	)

1877 
	#CCTL_4319USB_XTAL_SEL_MASK
 0x00180000

	)

1878 
	#CCTL_4319USB_XTAL_SEL_SHIFT
 19

	)

1879 
	#CCTL_4319USB_48MHZ_PLL_SEL
 1

	)

1880 
	#CCTL_4319USB_24MHZ_PLL_SEL
 2

	)

1883 
	#RES4336_CBUCK_LPOM
 0

	)

1884 
	#RES4336_CBUCK_BURST
 1

	)

1885 
	#RES4336_CBUCK_LP_PWM
 2

	)

1886 
	#RES4336_CBUCK_PWM
 3

	)

1887 
	#RES4336_CLDO_PU
 4

	)

1888 
	#RES4336_DIS_INT_RESET_PD
 5

	)

1889 
	#RES4336_ILP_REQUEST
 6

	)

1890 
	#RES4336_LNLDO_PU
 7

	)

1891 
	#RES4336_LDO3P3_PU
 8

	)

1892 
	#RES4336_OTP_PU
 9

	)

1893 
	#RES4336_XTAL_PU
 10

	)

1894 
	#RES4336_ALP_AVAIL
 11

	)

1895 
	#RES4336_RADIO_PU
 12

	)

1896 
	#RES4336_BG_PU
 13

	)

1897 
	#RES4336_VREG1p4_PU_PU
 14

	)

1898 
	#RES4336_AFE_PWRSW_PU
 15

	)

1899 
	#RES4336_RX_PWRSW_PU
 16

	)

1900 
	#RES4336_TX_PWRSW_PU
 17

	)

1901 
	#RES4336_BB_PWRSW_PU
 18

	)

1902 
	#RES4336_SYNTH_PWRSW_PU
 19

	)

1903 
	#RES4336_MISC_PWRSW_PU
 20

	)

1904 
	#RES4336_LOGEN_PWRSW_PU
 21

	)

1905 
	#RES4336_BBPLL_PWRSW_PU
 22

	)

1906 
	#RES4336_MACPHY_CLKAVAIL
 23

	)

1907 
	#RES4336_HT_AVAIL
 24

	)

1908 
	#RES4336_RSVD
 25

	)

1911 
	#CST4336_SPI_MODE_MASK
 0x00000001

	)

1912 
	#CST4336_SPROM_PRESENT
 0x00000002

	)

1913 
	#CST4336_OTP_PRESENT
 0x00000004

	)

1914 
	#CST4336_ARMREMAP_0
 0x00000008

	)

1915 
	#CST4336_ILPDIV_EN_MASK
 0x00000010

	)

1916 
	#CST4336_ILPDIV_EN_SHIFT
 4

	)

1917 
	#CST4336_XTAL_PD_POL_MASK
 0x00000020

	)

1918 
	#CST4336_XTAL_PD_POL_SHIFT
 5

	)

1919 
	#CST4336_LPO_SEL_MASK
 0x00000040

	)

1920 
	#CST4336_LPO_SEL_SHIFT
 6

	)

1921 
	#CST4336_RES_INIT_MODE_MASK
 0x00000180

	)

1922 
	#CST4336_RES_INIT_MODE_SHIFT
 7

	)

1923 
	#CST4336_CBUCK_MODE_MASK
 0x00000600

	)

1924 
	#CST4336_CBUCK_MODE_SHIFT
 9

	)

1927 
	#PCTL_4336_SERIAL_ENAB
 (1 << 24)

	)

1930 
	#RES4330_CBUCK_LPOM
 0

	)

1931 
	#RES4330_CBUCK_BURST
 1

	)

1932 
	#RES4330_CBUCK_LP_PWM
 2

	)

1933 
	#RES4330_CBUCK_PWM
 3

	)

1934 
	#RES4330_CLDO_PU
 4

	)

1935 
	#RES4330_DIS_INT_RESET_PD
 5

	)

1936 
	#RES4330_ILP_REQUEST
 6

	)

1937 
	#RES4330_LNLDO_PU
 7

	)

1938 
	#RES4330_LDO3P3_PU
 8

	)

1939 
	#RES4330_OTP_PU
 9

	)

1940 
	#RES4330_XTAL_PU
 10

	)

1941 
	#RES4330_ALP_AVAIL
 11

	)

1942 
	#RES4330_RADIO_PU
 12

	)

1943 
	#RES4330_BG_PU
 13

	)

1944 
	#RES4330_VREG1p4_PU_PU
 14

	)

1945 
	#RES4330_AFE_PWRSW_PU
 15

	)

1946 
	#RES4330_RX_PWRSW_PU
 16

	)

1947 
	#RES4330_TX_PWRSW_PU
 17

	)

1948 
	#RES4330_BB_PWRSW_PU
 18

	)

1949 
	#RES4330_SYNTH_PWRSW_PU
 19

	)

1950 
	#RES4330_MISC_PWRSW_PU
 20

	)

1951 
	#RES4330_LOGEN_PWRSW_PU
 21

	)

1952 
	#RES4330_BBPLL_PWRSW_PU
 22

	)

1953 
	#RES4330_MACPHY_CLKAVAIL
 23

	)

1954 
	#RES4330_HT_AVAIL
 24

	)

1955 
	#RES4330_5gRX_PWRSW_PU
 25

	)

1956 
	#RES4330_5gTX_PWRSW_PU
 26

	)

1957 
	#RES4330_5g_LOGEN_PWRSW_PU
 27

	)

1960 
	#CST4330_CHIPMODE_SDIOD
(
cs
Ë(((csË& 0x7Ë< 6Ë

	)

1961 
	#CST4330_CHIPMODE_USB20D
(
cs
Ë(((csË& 0x7Ë>6Ë

	)

1962 
	#CST4330_CHIPMODE_SDIO
(
cs
Ë(((csË& 0x4Ë=0Ë

	)

1963 
	#CST4330_CHIPMODE_GSPI
(
cs
Ë(((csË& 0x6Ë=4Ë

	)

1964 
	#CST4330_CHIPMODE_USB
(
cs
Ë(((csË& 0x7Ë=6Ë

	)

1965 
	#CST4330_CHIPMODE_USBDA
(
cs
Ë(((csË& 0x7Ë=7Ë

	)

1966 
	#CST4330_OTP_PRESENT
 0x00000010

	)

1967 
	#CST4330_LPO_AUTODET_EN
 0x00000020

	)

1968 
	#CST4330_ARMREMAP_0
 0x00000040

	)

1969 
	#CST4330_SPROM_PRESENT
 0x00000080

	)

1970 
	#CST4330_ILPDIV_EN
 0x00000100

	)

1971 
	#CST4330_LPO_SEL
 0x00000200

	)

1972 
	#CST4330_RES_INIT_MODE_SHIFT
 10

	)

1973 
	#CST4330_RES_INIT_MODE_MASK
 0x00000c00

	)

1974 
	#CST4330_CBUCK_MODE_SHIFT
 12

	)

1975 
	#CST4330_CBUCK_MODE_MASK
 0x00003000

	)

1976 
	#CST4330_CBUCK_POWER_OK
 0x00004000

	)

1977 
	#CST4330_BB_PLL_LOCKED
 0x00008000

	)

1978 
	#SOCDEVRAM_BP_ADDR
 0x1E000000

	)

1979 
	#SOCDEVRAM_ARM_ADDR
 0x00800000

	)

1982 
	#PCTL_4330_SERIAL_ENAB
 (1 << 24)

	)

1985 
	#CCTRL_4330_GPIO_SEL
 0x00000001

	)

1986 
	#CCTRL_4330_ERCX_SEL
 0x00000002

	)

1987 
	#CCTRL_4330_SDIO_HOST_WAKE
 0x00000004

	)

1988 
	#CCTRL_4330_JTAG_DISABLE
 0x00000008

	)

1990 
	#PMU_VREG0_ADDR
 0

	)

1991 
	#PMU_VREG0_DISABLE_PULLD_BT_SHIFT
 2

	)

1992 
	#PMU_VREG0_DISABLE_PULLD_WL_SHIFT
 3

	)

1995 
	#RES4334_LPLDO_PU
 0

	)

1996 
	#RES4334_RESET_PULLDN_DIS
 1

	)

1997 
	#RES4334_PMU_BG_PU
 2

	)

1998 
	#RES4334_HSIC_LDO_PU
 3

	)

1999 
	#RES4334_CBUCK_LPOM_PU
 4

	)

2000 
	#RES4334_CBUCK_PFM_PU
 5

	)

2001 
	#RES4334_CLDO_PU
 6

	)

2002 
	#RES4334_LPLDO2_LVM
 7

	)

2003 
	#RES4334_LNLDO_PU
 8

	)

2004 
	#RES4334_LDO3P3_PU
 9

	)

2005 
	#RES4334_OTP_PU
 10

	)

2006 
	#RES4334_XTAL_PU
 11

	)

2007 
	#RES4334_WL_PWRSW_PU
 12

	)

2008 
	#RES4334_LQ_AVAIL
 13

	)

2009 
	#RES4334_LOGIC_RET
 14

	)

2010 
	#RES4334_MEM_SLEEP
 15

	)

2011 
	#RES4334_MACPHY_RET
 16

	)

2012 
	#RES4334_WL_CORE_READY
 17

	)

2013 
	#RES4334_ILP_REQ
 18

	)

2014 
	#RES4334_ALP_AVAIL
 19

	)

2015 
	#RES4334_MISC_PWRSW_PU
 20

	)

2016 
	#RES4334_SYNTH_PWRSW_PU
 21

	)

2017 
	#RES4334_RX_PWRSW_PU
 22

	)

2018 
	#RES4334_RADIO_PU
 23

	)

2019 
	#RES4334_WL_PMU_PU
 24

	)

2020 
	#RES4334_VCO_LDO_PU
 25

	)

2021 
	#RES4334_AFE_LDO_PU
 26

	)

2022 
	#RES4334_RX_LDO_PU
 27

	)

2023 
	#RES4334_TX_LDO_PU
 28

	)

2024 
	#RES4334_HT_AVAIL
 29

	)

2025 
	#RES4334_MACPHY_CLK_AVAIL
 30

	)

2028 
	#CST4334_CHIPMODE_MASK
 7

	)

2029 
	#CST4334_SDIO_MODE
 0x00000000

	)

2030 
	#CST4334_SPI_MODE
 0x00000004

	)

2031 
	#CST4334_HSIC_MODE
 0x00000006

	)

2032 
	#CST4334_BLUSB_MODE
 0x00000007

	)

2033 
	#CST4334_CHIPMODE_HSIC
(
cs
Ë(((csË& 
CST4334_CHIPMODE_MASK
Ë=
CST4334_HSIC_MODE
)

	)

2034 
	#CST4334_OTP_PRESENT
 0x00000010

	)

2035 
	#CST4334_LPO_AUTODET_EN
 0x00000020

	)

2036 
	#CST4334_ARMREMAP_0
 0x00000040

	)

2037 
	#CST4334_SPROM_PRESENT
 0x00000080

	)

2038 
	#CST4334_ILPDIV_EN_MASK
 0x00000100

	)

2039 
	#CST4334_ILPDIV_EN_SHIFT
 8

	)

2040 
	#CST4334_LPO_SEL_MASK
 0x00000200

	)

2041 
	#CST4334_LPO_SEL_SHIFT
 9

	)

2042 
	#CST4334_RES_INIT_MODE_MASK
 0x00000C00

	)

2043 
	#CST4334_RES_INIT_MODE_SHIFT
 10

	)

2046 
	#PCTL_4334_GPIO3_ENAB
 (1 << 3)

	)

2049 
	#CCTRL4334_HSIC_LDO_PU
 (1 << 23)

	)

2052 
	#CCTRL1_4324_GPIO_SEL
 (1 << 0Ë

	)

2053 
	#CCTRL1_4324_SDIO_HOST_WAKE
 (1 << 2Ë

	)

2057 
	#RES4313_BB_PU_RSRC
 0

	)

2058 
	#RES4313_ILP_REQ_RSRC
 1

	)

2059 
	#RES4313_XTAL_PU_RSRC
 2

	)

2060 
	#RES4313_ALP_AVAIL_RSRC
 3

	)

2061 
	#RES4313_RADIO_PU_RSRC
 4

	)

2062 
	#RES4313_BG_PU_RSRC
 5

	)

2063 
	#RES4313_VREG1P4_PU_RSRC
 6

	)

2064 
	#RES4313_AFE_PWRSW_RSRC
 7

	)

2065 
	#RES4313_RX_PWRSW_RSRC
 8

	)

2066 
	#RES4313_TX_PWRSW_RSRC
 9

	)

2067 
	#RES4313_BB_PWRSW_RSRC
 10

	)

2068 
	#RES4313_SYNTH_PWRSW_RSRC
 11

	)

2069 
	#RES4313_MISC_PWRSW_RSRC
 12

	)

2070 
	#RES4313_BB_PLL_PWRSW_RSRC
 13

	)

2071 
	#RES4313_HT_AVAIL_RSRC
 14

	)

2072 
	#RES4313_MACPHY_CLK_AVAIL_RSRC
 15

	)

2075 
	#CST4313_SPROM_PRESENT
 1

	)

2076 
	#CST4313_OTP_PRESENT
 2

	)

2077 
	#CST4313_SPROM_OTP_SEL_MASK
 0x00000002

	)

2078 
	#CST4313_SPROM_OTP_SEL_SHIFT
 0

	)

2081 
	#CCTRL_4313_12MA_LED_DRIVE
 0x00000007

	)

2084 
	#RES4314_LPLDO_PU
 0

	)

2085 
	#RES4314_PMU_SLEEP_DIS
 1

	)

2086 
	#RES4314_PMU_BG_PU
 2

	)

2087 
	#RES4314_CBUCK_LPOM_PU
 3

	)

2088 
	#RES4314_CBUCK_PFM_PU
 4

	)

2089 
	#RES4314_CLDO_PU
 5

	)

2090 
	#RES4314_LPLDO2_LVM
 6

	)

2091 
	#RES4314_WL_PMU_PU
 7

	)

2092 
	#RES4314_LNLDO_PU
 8

	)

2093 
	#RES4314_LDO3P3_PU
 9

	)

2094 
	#RES4314_OTP_PU
 10

	)

2095 
	#RES4314_XTAL_PU
 11

	)

2096 
	#RES4314_WL_PWRSW_PU
 12

	)

2097 
	#RES4314_LQ_AVAIL
 13

	)

2098 
	#RES4314_LOGIC_RET
 14

	)

2099 
	#RES4314_MEM_SLEEP
 15

	)

2100 
	#RES4314_MACPHY_RET
 16

	)

2101 
	#RES4314_WL_CORE_READY
 17

	)

2102 
	#RES4314_ILP_REQ
 18

	)

2103 
	#RES4314_ALP_AVAIL
 19

	)

2104 
	#RES4314_MISC_PWRSW_PU
 20

	)

2105 
	#RES4314_SYNTH_PWRSW_PU
 21

	)

2106 
	#RES4314_RX_PWRSW_PU
 22

	)

2107 
	#RES4314_RADIO_PU
 23

	)

2108 
	#RES4314_VCO_LDO_PU
 24

	)

2109 
	#RES4314_AFE_LDO_PU
 25

	)

2110 
	#RES4314_RX_LDO_PU
 26

	)

2111 
	#RES4314_TX_LDO_PU
 27

	)

2112 
	#RES4314_HT_AVAIL
 28

	)

2113 
	#RES4314_MACPHY_CLK_AVAIL
 29

	)

2116 
	#CST4314_OTP_ENABLED
 0x00200000

	)

2119 
	#RES43228_NOT_USED
 0

	)

2120 
	#RES43228_ILP_REQUEST
 1

	)

2121 
	#RES43228_XTAL_PU
 2

	)

2122 
	#RES43228_ALP_AVAIL
 3

	)

2123 
	#RES43228_PLL_EN
 4

	)

2124 
	#RES43228_HT_PHY_AVAIL
 5

	)

2127 
	#CST43228_ILP_DIV_EN
 0x1

	)

2128 
	#CST43228_OTP_PRESENT
 0x2

	)

2129 
	#CST43228_SERDES_REFCLK_PADSEL
 0x4

	)

2130 
	#CST43228_SDIO_MODE
 0x8

	)

2131 
	#CST43228_SDIO_OTP_PRESENT
 0x10

	)

2132 
	#CST43228_SDIO_RESET
 0x20

	)

2135 
	#CST4706_PKG_OPTION
 (1<<0Ë

	)

2136 
	#CST4706_SFLASH_PRESENT
 (1<<1Ë

	)

2137 
	#CST4706_SFLASH_TYPE
 (1<<2Ë

	)

2138 
	#CST4706_MIPS_BENDIAN
 (1<<3Ë

	)

2139 
	#CST4706_PCIE1_DISABLE
 (1<<5Ë

	)

2142 
	#FLSTRCF4706_MASK
 0x000000ff

	)

2143 
	#FLSTRCF4706_SF1
 0x00000001

	)

2144 
	#FLSTRCF4706_PF1
 0x00000002

	)

2145 
	#FLSTRCF4706_SF1_TYPE
 0x00000004

	)

2146 
	#FLSTRCF4706_NF1
 0x00000008

	)

2147 
	#FLSTRCF4706_1ST_MADDR_SEG_MASK
 0x000000f0

	)

2148 
	#FLSTRCF4706_1ST_MADDR_SEG_4MB
 0x00000010

	)

2149 
	#FLSTRCF4706_1ST_MADDR_SEG_8MB
 0x00000020

	)

2150 
	#FLSTRCF4706_1ST_MADDR_SEG_16MB
 0x00000030

	)

2151 
	#FLSTRCF4706_1ST_MADDR_SEG_32MB
 0x00000040

	)

2152 
	#FLSTRCF4706_1ST_MADDR_SEG_64MB
 0x00000050

	)

2153 
	#FLSTRCF4706_1ST_MADDR_SEG_128MB
 0x00000060

	)

2154 
	#FLSTRCF4706_1ST_MADDR_SEG_256MB
 0x00000070

	)

2157 
	#CCTRL4360_SECI_MODE
 (1 << 2)

	)

2158 
	#CCTRL4360_BTSWCTRL_MODE
 (1 << 3)

	)

2159 
	#CCTRL4360_EXTRA_FEMCTRL_MODE
 (1 << 8)

	)

2160 
	#CCTRL4360_BT_LGCY_MODE
 (1 << 9)

	)

2161 
	#CCTRL4360_CORE2FEMCTRL4_ON
 (1 << 21)

	)

2164 
	#RES4360_REGULATOR
 0

	)

2165 
	#RES4360_ILP_AVAIL
 1

	)

2166 
	#RES4360_ILP_REQ
 2

	)

2167 
	#RES4360_XTAL_LDO_PU
 3

	)

2168 
	#RES4360_XTAL_PU
 4

	)

2169 
	#RES4360_ALP_AVAIL
 5

	)

2170 
	#RES4360_BBPLLPWRSW_PU
 6

	)

2171 
	#RES4360_HT_AVAIL
 7

	)

2172 
	#RES4360_OTP_PU
 8

	)

2174 
	#CST4360_XTAL_40MZ
 0x00000001

	)

2175 
	#CST4360_SFLASH
 0x00000002

	)

2176 
	#CST4360_SPROM_PRESENT
 0x00000004

	)

2177 
	#CST4360_SFLASH_TYPE
 0x00000004

	)

2178 
	#CST4360_OTP_ENABLED
 0x00000008

	)

2179 
	#CST4360_REMAP_ROM
 0x00000010

	)

2180 
	#CST4360_RSRC_INIT_MODE_MASK
 0x00000060

	)

2181 
	#CST4360_RSRC_INIT_MODE_SHIFT
 5

	)

2182 
	#CST4360_ILP_DIVEN
 0x00000080

	)

2183 
	#CST4360_MODE_USB
 0x00000100

	)

2184 
	#CST4360_SPROM_SIZE_MASK
 0x00000600

	)

2185 
	#CST4360_SPROM_SIZE_SHIFT
 9

	)

2186 
	#CST4360_BBPLL_LOCK
 0x00000800

	)

2187 
	#CST4360_AVBBPLL_LOCK
 0x00001000

	)

2188 
	#CST4360_USBBBPLL_LOCK
 0x00002000

	)

2190 
	#CCTRL_4360_UART_SEL
 0x2

	)

2193 
	#RES4335_LPLDO_PO
 0

	)

2194 
	#RES4335_PMU_BG_PU
 1

	)

2195 
	#RES4335_PMU_SLEEP
 2

	)

2196 
	#RES4335_RSVD_3
 3

	)

2197 
	#RES4335_CBUCK_LPOM_PU
 4

	)

2198 
	#RES4335_CBUCK_PFM_PU
 5

	)

2199 
	#RES4335_RSVD_6
 6

	)

2200 
	#RES4335_RSVD_7
 7

	)

2201 
	#RES4335_LNLDO_PU
 8

	)

2202 
	#RES4335_XTALLDO_PU
 9

	)

2203 
	#RES4335_LDO3P3_PU
 10

	)

2204 
	#RES4335_OTP_PU
 11

	)

2205 
	#RES4335_XTAL_PU
 12

	)

2206 
	#RES4335_SR_CLK_START
 13

	)

2207 
	#RES4335_LQ_AVAIL
 14

	)

2208 
	#RES4335_LQ_START
 15

	)

2209 
	#RES4335_RSVD_16
 16

	)

2210 
	#RES4335_WL_CORE_RDY
 17

	)

2211 
	#RES4335_ILP_REQ
 18

	)

2212 
	#RES4335_ALP_AVAIL
 19

	)

2213 
	#RES4335_MINI_PMU
 20

	)

2214 
	#RES4335_RADIO_PU
 21

	)

2215 
	#RES4335_SR_CLK_STABLE
 22

	)

2216 
	#RES4335_SR_SAVE_RESTORE
 23

	)

2217 
	#RES4335_SR_PHY_PWRSW
 24

	)

2218 
	#RES4335_SR_VDDM_PWRSW
 25

	)

2219 
	#RES4335_SR_SUBCORE_PWRSW
 26

	)

2220 
	#RES4335_SR_SLEEP
 27

	)

2221 
	#RES4335_HT_START
 28

	)

2222 
	#RES4335_HT_AVAIL
 29

	)

2223 
	#RES4335_MACPHY_CLKAVAIL
 30

	)

2226 
	#CST4335_SPROM_MASK
 0x00000020

	)

2227 
	#CST4335_SFLASH_MASK
 0x00000040

	)

2228 
	#CST4335_RES_INIT_MODE_SHIFT
 7

	)

2229 
	#CST4335_RES_INIT_MODE_MASK
 0x00000180

	)

2230 
	#CST4335_CHIPMODE_MASK
 0xF

	)

2231 
	#CST4335_CHIPMODE_SDIOD
(
cs
Ë(((csË& (1 << 0)Ë!0Ë

	)

2232 
	#CST4335_CHIPMODE_GSPI
(
cs
Ë(((csË& (1 << 1)Ë!0Ë

	)

2233 
	#CST4335_CHIPMODE_USB20D
(
cs
Ë(((csË& (1 << 2)Ë!0Ë

	)

2234 
	#CST4335_CHIPMODE_PCIE
(
cs
Ë(((csË& (1 << 3)Ë!0Ë

	)

2237 
	#CCTRL1_4335_GPIO_SEL
 (1 << 0Ë

	)

2238 
	#CCTRL1_4335_SDIO_HOST_WAKE
 (1 << 2Ë

	)

2241 
	#CR4_RAM_BASE
 (0x180000)

	)

2246 
	#CC_GCI_CHIPCTRL_00
 (0)

	)

2247 
	#CC_GCI_CHIPCTRL_01
 (1)

	)

2248 
	#CC_GCI_CHIPCTRL_02
 (2)

	)

2249 
	#CC_GCI_CHIPCTRL_03
 (3)

	)

2250 
	#CC_GCI_CHIPCTRL_04
 (4)

	)

2251 
	#CC_GCI_CHIPCTRL_05
 (5)

	)

2252 
	#CC_GCI_CHIPCTRL_06
 (6)

	)

2253 
	#CC_GCI_CHIPCTRL_07
 (7)

	)

2254 
	#CC_GCI_CHIPCTRL_08
 (8)

	)

2256 
	#CC_GCI_NUMCHIPCTRLREGS
(
ˇp1
Ë((ˇp1 & 0xF00Ë>> 8)

	)

2261 
	#CC4335_PIN_GPIO_00
 (0)

	)

2262 
	#CC4335_PIN_GPIO_01
 (1)

	)

2263 
	#CC4335_PIN_GPIO_02
 (2)

	)

2264 
	#CC4335_PIN_GPIO_03
 (3)

	)

2265 
	#CC4335_PIN_GPIO_04
 (4)

	)

2266 
	#CC4335_PIN_GPIO_05
 (5)

	)

2267 
	#CC4335_PIN_GPIO_06
 (6)

	)

2268 
	#CC4335_PIN_GPIO_07
 (7)

	)

2269 
	#CC4335_PIN_GPIO_08
 (8)

	)

2270 
	#CC4335_PIN_GPIO_09
 (9)

	)

2271 
	#CC4335_PIN_GPIO_10
 (10)

	)

2272 
	#CC4335_PIN_GPIO_11
 (11)

	)

2273 
	#CC4335_PIN_GPIO_12
 (12)

	)

2274 
	#CC4335_PIN_GPIO_13
 (13)

	)

2275 
	#CC4335_PIN_GPIO_14
 (14)

	)

2276 
	#CC4335_PIN_GPIO_15
 (15)

	)

2277 
	#CC4335_PIN_SDIO_CLK
 (16)

	)

2278 
	#CC4335_PIN_SDIO_CMD
 (17)

	)

2279 
	#CC4335_PIN_SDIO_DATA0
 (18)

	)

2280 
	#CC4335_PIN_SDIO_DATA1
 (19)

	)

2281 
	#CC4335_PIN_SDIO_DATA2
 (20)

	)

2282 
	#CC4335_PIN_SDIO_DATA3
 (21)

	)

2283 
	#CC4335_PIN_RF_SW_CTRL_0
 (22)

	)

2284 
	#CC4335_PIN_RF_SW_CTRL_1
 (23)

	)

2285 
	#CC4335_PIN_RF_SW_CTRL_2
 (24)

	)

2286 
	#CC4335_PIN_RF_SW_CTRL_3
 (25)

	)

2287 
	#CC4335_PIN_RF_SW_CTRL_4
 (26)

	)

2288 
	#CC4335_PIN_RF_SW_CTRL_5
 (27)

	)

2289 
	#CC4335_PIN_RF_SW_CTRL_6
 (28)

	)

2290 
	#CC4335_PIN_RF_SW_CTRL_7
 (29)

	)

2291 
	#CC4335_PIN_RF_SW_CTRL_8
 (30)

	)

2292 
	#CC4335_PIN_RF_SW_CTRL_9
 (31)

	)

2296 
	#CC4335_FNSEL_HWDEF
 (0)

	)

2297 
	#CC4335_FNSEL_SAMEASPIN
 (1)

	)

2298 
	#CC4335_FNSEL_GPIO0
 (2)

	)

2299 
	#CC4335_FNSEL_GPIO1
 (3)

	)

2300 
	#CC4335_FNSEL_GCI0
 (4)

	)

2301 
	#CC4335_FNSEL_GCI1
 (5)

	)

2302 
	#CC4335_FNSEL_UART
 (6)

	)

2303 
	#CC4335_FNSEL_SFLASH
 (7)

	)

2304 
	#CC4335_FNSEL_SPROM
 (8)

	)

2305 
	#CC4335_FNSEL_MISC0
 (9)

	)

2306 
	#CC4335_FNSEL_MISC1
 (10)

	)

2307 
	#CC4335_FNSEL_MISC2
 (11)

	)

2308 
	#CC4335_FNSEL_IND
 (12)

	)

2309 
	#CC4335_FNSEL_PDN
 (13)

	)

2310 
	#CC4335_FNSEL_PUP
 (14)

	)

2311 
	#CC4335_FNSEL_TRI
 (15)

	)

2314 
	#GCIMASK
(
pos
Ë(((
uöt32
)0xFË<<Öos)

	)

2317 
	#GCIPOSVAL
(
vÆ
, 
pos
Ë((((
uöt32
)vÆË<<ÖosË& 
	`GCIMASK
’os))

	)

2322 
	#MUXENAB4335_UART_MASK
 (0x0000000f)

	)

2326 
	#CHIP_HOSTIF_USB
(
sih
Ë(
	`si_chù_ho°if
(sihË& 
CST4360_MODE_USB
)

	)

2332 
	#PMU_MAX_TRANSITION_DLY
 15000

	)

2335 
	#PMURES_UP_TRANSITION
 2

	)

2339 
	#SECI_MODE_UART
 0x0

	)

2340 
	#SECI_MODE_SECI
 0x1

	)

2341 
	#SECI_MODE_LEGACY_3WIRE_BT
 0x2

	)

2342 
	#SECI_MODE_LEGACY_3WIRE_WLAN
 0x3

	)

2343 
	#SECI_MODE_HALF_SECI
 0x4

	)

2345 
	#SECI_RESET
 (1 << 0)

	)

2346 
	#SECI_RESET_BAR_UART
 (1 << 1)

	)

2347 
	#SECI_ENAB_SECI_ECI
 (1 << 2)

	)

2348 
	#SECI_ENAB_SECIOUT_DIS
 (1 << 3)

	)

2349 
	#SECI_MODE_MASK
 0x7

	)

2350 
	#SECI_MODE_SHIFT
 4

	)

2351 
	#SECI_UPD_SECI
 (1 << 7)

	)

2353 
	#SECI_SIGNOFF_0
 0xDB

	)

2354 
	#SECI_SIGNOFF_1
 0

	)

2357 
	#CLKCTL_STS_SECI_CLK_REQ
 (1 << 8)

	)

2358 
	#CLKCTL_STS_SECI_CLK_AVAIL
 (1 << 24)

	)

2360 
	#SECI_UART_MSR_CTS_STATE
 (1 << 0)

	)

2361 
	#SECI_UART_MSR_RTS_STATE
 (1 << 1)

	)

2362 
	#SECI_UART_SECI_IN_STATE
 (1 << 2)

	)

2363 
	#SECI_UART_SECI_IN2_STATE
 (1 << 3)

	)

2366 
	#SECI_UART_LCR_STOP_BITS
 (1 << 0Ë

	)

2367 
	#SECI_UART_LCR_PARITY_EN
 (1 << 1)

	)

2368 
	#SECI_UART_LCR_PARITY
 (1 << 2Ë

	)

2369 
	#SECI_UART_LCR_RX_EN
 (1 << 3)

	)

2370 
	#SECI_UART_LCR_LBRK_CTRL
 (1 << 4Ë

	)

2371 
	#SECI_UART_LCR_TXO_EN
 (1 << 5)

	)

2372 
	#SECI_UART_LCR_RTSO_EN
 (1 << 6)

	)

2373 
	#SECI_UART_LCR_SLIPMODE_EN
 (1 << 7)

	)

2374 
	#SECI_UART_LCR_RXCRC_CHK
 (1 << 8)

	)

2375 
	#SECI_UART_LCR_TXCRC_INV
 (1 << 9)

	)

2376 
	#SECI_UART_LCR_TXCRC_LSBF
 (1 << 10)

	)

2377 
	#SECI_UART_LCR_TXCRC_EN
 (1 << 11)

	)

2379 
	#SECI_UART_MCR_TX_EN
 (1 << 0)

	)

2380 
	#SECI_UART_MCR_PRTS
 (1 << 1)

	)

2381 
	#SECI_UART_MCR_SWFLCTRL_EN
 (1 << 2)

	)

2382 
	#SECI_UART_MCR_HIGHRATE_EN
 (1 << 3)

	)

2383 
	#SECI_UART_MCR_LOOPBK_EN
 (1 << 4)

	)

2384 
	#SECI_UART_MCR_AUTO_RTS
 (1 << 5)

	)

2385 
	#SECI_UART_MCR_AUTO_TX_DIS
 (1 << 6)

	)

2386 
	#SECI_UART_MCR_BAUD_ADJ_EN
 (1 << 7)

	)

2387 
	#SECI_UART_MCR_XONOFF_RPT
 (1 << 9)

	)

2392 
	#ECI_BW_20
 0x0

	)

2393 
	#ECI_BW_25
 0x1

	)

2394 
	#ECI_BW_30
 0x2

	)

2395 
	#ECI_BW_35
 0x3

	)

2396 
	#ECI_BW_40
 0x4

	)

2397 
	#ECI_BW_45
 0x5

	)

2398 
	#ECI_BW_50
 0x6

	)

2399 
	#ECI_BW_ALL
 0x7

	)

2402 
	#WLAN_NUM_ANT1
 
TXANT_0


	)

2403 
	#WLAN_NUM_ANT2
 
TXANT_1


	)

	@include/sbconfig.h

27 #i‚def 
_SBCONFIG_H


28 
	#_SBCONFIG_H


	)

31 #i‚de‡
PAD


32 
	#_PADLINE
(
löe
Ë
∑d
 ## 
	)
line

33 
	#_XSTR
(
löe
Ë
	`_PADLINE
÷öe)

	)

34 
	#PAD
 
	`_XSTR
(
__LINE__
)

	)

40 
	#SB_BUS_SIZE
 0x10000

	)

41 
	#SB_BUS_BASE
(
b
Ë(
SI_ENUM_BASE
 + (bË* 
SB_BUS_SIZE
)

	)

42 
	#SB_BUS_MAXCORES
 (
SB_BUS_SIZE
 / 
SI_CORE_SIZE
Ë

	)

47 
	#SBCONFIGOFF
 0xf00

	)

48 
	#SBCONFIGSIZE
 256

	)

50 
	#SBIPSFLAG
 0x08

	)

51 
	#SBTPSFLAG
 0x18

	)

52 
	#SBTMERRLOGA
 0x48

	)

53 
	#SBTMERRLOG
 0x50

	)

54 
	#SBADMATCH3
 0x60

	)

55 
	#SBADMATCH2
 0x68

	)

56 
	#SBADMATCH1
 0x70

	)

57 
	#SBIMSTATE
 0x90

	)

58 
	#SBINTVEC
 0x94

	)

59 
	#SBTMSTATELOW
 0x98

	)

60 
	#SBTMSTATEHIGH
 0x9c

	)

61 
	#SBBWA0
 0xa0

	)

62 
	#SBIMCONFIGLOW
 0xa8

	)

63 
	#SBIMCONFIGHIGH
 0xac

	)

64 
	#SBADMATCH0
 0xb0

	)

65 
	#SBTMCONFIGLOW
 0xb8

	)

66 
	#SBTMCONFIGHIGH
 0xbc

	)

67 
	#SBBCONFIG
 0xc0

	)

68 
	#SBBSTATE
 0xc8

	)

69 
	#SBACTCNFG
 0xd8

	)

70 
	#SBFLAGST
 0xe8

	)

71 
	#SBIDLOW
 0xf8

	)

72 
	#SBIDHIGH
 0xfc

	)

79 
	#SBIMERRLOGA
 0xó8

	)

80 
	#SBIMERRLOG
 0xeb0

	)

81 
	#SBTMPORTCONNID0
 0xed8

	)

82 
	#SBTMPORTLOCK0
 0xef8

	)

84 #i‚de‡
_LANGUAGE_ASSEMBLY


86 vﬁ©ûê
	s_sbc⁄fig
 {

87 
uöt32
 
	mPAD
[2];

88 
uöt32
 
	msbùsÊag
;

89 
uöt32
 
	mPAD
[3];

90 
uöt32
 
	msbçsÊag
;

91 
uöt32
 
	mPAD
[11];

92 
uöt32
 
	msbtmîæoga
;

93 
uöt32
 
	mPAD
;

94 
uöt32
 
	msbtmîæog
;

95 
uöt32
 
	mPAD
[3];

96 
uöt32
 
	msbadm©ch3
;

97 
uöt32
 
	mPAD
;

98 
uöt32
 
	msbadm©ch2
;

99 
uöt32
 
	mPAD
;

100 
uöt32
 
	msbadm©ch1
;

101 
uöt32
 
	mPAD
[7];

102 
uöt32
 
	msbim°©e
;

103 
uöt32
 
	msbötvec
;

104 
uöt32
 
	msbtm°©ñow
;

105 
uöt32
 
	msbtm°©ehigh
;

106 
uöt32
 
	msbbwa0
;

107 
uöt32
 
	mPAD
;

108 
uöt32
 
	msbimc⁄figlow
;

109 
uöt32
 
	msbimc⁄fighigh
;

110 
uöt32
 
	msbadm©ch0
;

111 
uöt32
 
	mPAD
;

112 
uöt32
 
	msbtmc⁄figlow
;

113 
uöt32
 
	msbtmc⁄fighigh
;

114 
uöt32
 
	msbbc⁄fig
;

115 
uöt32
 
	mPAD
;

116 
uöt32
 
	msbb°©e
;

117 
uöt32
 
	mPAD
[3];

118 
uöt32
 
	msba˘˙fg
;

119 
uöt32
 
	mPAD
[3];

120 
uöt32
 
	msbÊag°
;

121 
uöt32
 
	mPAD
[3];

122 
uöt32
 
	msbidlow
;

123 
uöt32
 
	msbidhigh
;

124 } 
	tsbc⁄fig_t
;

129 
	#SBIPS_INT1_MASK
 0x3‡

	)

130 
	#SBIPS_INT1_SHIFT
 0

	)

131 
	#SBIPS_INT2_MASK
 0x3f00

	)

132 
	#SBIPS_INT2_SHIFT
 8

	)

133 
	#SBIPS_INT3_MASK
 0x3f0000

	)

134 
	#SBIPS_INT3_SHIFT
 16

	)

135 
	#SBIPS_INT4_MASK
 0x3f000000

	)

136 
	#SBIPS_INT4_SHIFT
 24

	)

139 
	#SBTPS_NUM0_MASK
 0x3‡

	)

140 
	#SBTPS_F0EN0
 0x40

	)

143 
	#SBTMEL_CM
 0x00000007

	)

144 
	#SBTMEL_CI
 0x0000ff00

	)

145 
	#SBTMEL_EC
 0x0f000000

	)

146 
	#SBTMEL_ME
 0x80000000

	)

149 
	#SBIM_PC
 0x‡

	)

150 
	#SBIM_AP_MASK
 0x30

	)

151 
	#SBIM_AP_BOTH
 0x00

	)

152 
	#SBIM_AP_TS
 0x10

	)

153 
	#SBIM_AP_TK
 0x20

	)

154 
	#SBIM_AP_RSV
 0x30

	)

155 
	#SBIM_IBE
 0x20000

	)

156 
	#SBIM_TO
 0x40000

	)

157 
	#SBIM_BY
 0x01800000

	)

158 
	#SBIM_RJ
 0x02000000

	)

161 
	#SBTML_RESET
 0x0001

	)

162 
	#SBTML_REJ_MASK
 0x0006

	)

163 
	#SBTML_REJ
 0x0002

	)

164 
	#SBTML_TMPREJ
 0x0004

	)

166 
	#SBTML_SICF_SHIFT
 16

	)

169 
	#SBTMH_SERR
 0x0001

	)

170 
	#SBTMH_INT
 0x0002

	)

171 
	#SBTMH_BUSY
 0x0004

	)

172 
	#SBTMH_TO
 0x0020

	)

174 
	#SBTMH_SISF_SHIFT
 16

	)

177 
	#SBBWA_TAB0_MASK
 0xfff‡

	)

178 
	#SBBWA_TAB1_MASK
 0xfff‡

	)

179 
	#SBBWA_TAB1_SHIFT
 16

	)

182 
	#SBIMCL_STO_MASK
 0x7

	)

183 
	#SBIMCL_RTO_MASK
 0x70

	)

184 
	#SBIMCL_RTO_SHIFT
 4

	)

185 
	#SBIMCL_CID_MASK
 0xff0000

	)

186 
	#SBIMCL_CID_SHIFT
 16

	)

189 
	#SBIMCH_IEM_MASK
 0x¯

	)

190 
	#SBIMCH_TEM_MASK
 0x30

	)

191 
	#SBIMCH_TEM_SHIFT
 4

	)

192 
	#SBIMCH_BEM_MASK
 0xc0

	)

193 
	#SBIMCH_BEM_SHIFT
 6

	)

196 
	#SBAM_TYPE_MASK
 0x3

	)

197 
	#SBAM_AD64
 0x4

	)

198 
	#SBAM_ADINT0_MASK
 0xf8

	)

199 
	#SBAM_ADINT0_SHIFT
 3

	)

200 
	#SBAM_ADINT1_MASK
 0x1f8

	)

201 
	#SBAM_ADINT1_SHIFT
 3

	)

202 
	#SBAM_ADINT2_MASK
 0x1f8

	)

203 
	#SBAM_ADINT2_SHIFT
 3

	)

204 
	#SBAM_ADEN
 0x400

	)

205 
	#SBAM_ADNEG
 0x800

	)

206 
	#SBAM_BASE0_MASK
 0xffffff00

	)

207 
	#SBAM_BASE0_SHIFT
 8

	)

208 
	#SBAM_BASE1_MASK
 0xfffff000

	)

209 
	#SBAM_BASE1_SHIFT
 12

	)

210 
	#SBAM_BASE2_MASK
 0xffff0000

	)

211 
	#SBAM_BASE2_SHIFT
 16

	)

214 
	#SBTMCL_CD_MASK
 0xf‡

	)

215 
	#SBTMCL_CO_MASK
 0xf800

	)

216 
	#SBTMCL_CO_SHIFT
 11

	)

217 
	#SBTMCL_IF_MASK
 0xfc0000

	)

218 
	#SBTMCL_IF_SHIFT
 18

	)

219 
	#SBTMCL_IM_MASK
 0x3000000

	)

220 
	#SBTMCL_IM_SHIFT
 24

	)

223 
	#SBTMCH_BM_MASK
 0x3

	)

224 
	#SBTMCH_RM_MASK
 0x3

	)

225 
	#SBTMCH_RM_SHIFT
 2

	)

226 
	#SBTMCH_SM_MASK
 0x30

	)

227 
	#SBTMCH_SM_SHIFT
 4

	)

228 
	#SBTMCH_EM_MASK
 0x300

	)

229 
	#SBTMCH_EM_SHIFT
 8

	)

230 
	#SBTMCH_IM_MASK
 0xc00

	)

231 
	#SBTMCH_IM_SHIFT
 10

	)

234 
	#SBBC_LAT_MASK
 0x3

	)

235 
	#SBBC_MAX0_MASK
 0xf0000

	)

236 
	#SBBC_MAX0_SHIFT
 16

	)

237 
	#SBBC_MAX1_MASK
 0xf00000

	)

238 
	#SBBC_MAX1_SHIFT
 20

	)

241 
	#SBBS_SRD
 0x1

	)

242 
	#SBBS_HRD
 0x2

	)

245 
	#SBIDL_CS_MASK
 0x3

	)

246 
	#SBIDL_AR_MASK
 0x38

	)

247 
	#SBIDL_AR_SHIFT
 3

	)

248 
	#SBIDL_SYNCH
 0x40

	)

249 
	#SBIDL_INIT
 0x80

	)

250 
	#SBIDL_MINLAT_MASK
 0xf00

	)

251 
	#SBIDL_MINLAT_SHIFT
 8

	)

252 
	#SBIDL_MAXLAT
 0xf000

	)

253 
	#SBIDL_MAXLAT_SHIFT
 12

	)

254 
	#SBIDL_FIRST
 0x10000

	)

255 
	#SBIDL_CW_MASK
 0xc0000

	)

256 
	#SBIDL_CW_SHIFT
 18

	)

257 
	#SBIDL_TP_MASK
 0xf00000

	)

258 
	#SBIDL_TP_SHIFT
 20

	)

259 
	#SBIDL_IP_MASK
 0xf000000

	)

260 
	#SBIDL_IP_SHIFT
 24

	)

261 
	#SBIDL_RV_MASK
 0xf0000000

	)

262 
	#SBIDL_RV_SHIFT
 28

	)

263 
	#SBIDL_RV_2_2
 0x00000000

	)

264 
	#SBIDL_RV_2_3
 0x10000000

	)

267 
	#SBIDH_RC_MASK
 0x000‡

	)

268 
	#SBIDH_RCE_MASK
 0x7000

	)

269 
	#SBIDH_RCE_SHIFT
 8

	)

270 
	#SBCOREREV
(
sbidh
) \

271 ((((
sbidh
Ë& 
SBIDH_RCE_MASK
Ë>> 
SBIDH_RCE_SHIFT
Ë| ((sbidhË& 
SBIDH_RC_MASK
))

	)

272 
	#SBIDH_CC_MASK
 0x8ff0

	)

273 
	#SBIDH_CC_SHIFT
 4

	)

274 
	#SBIDH_VC_MASK
 0xffff0000

	)

275 
	#SBIDH_VC_SHIFT
 16

	)

277 
	#SB_COMMIT
 0xfd8

	)

280 
	#SB_VEND_BCM
 0x4243

	)

	@include/sbhnddma.h

28 #i‚def 
_sbhnddma_h_


29 
	#_sbhnddma_h_


	)

42 
uöt32
 
	mc⁄åﬁ
;

43 
uöt32
 
	maddr
;

44 
uöt32
 
	m±r
;

45 
uöt32
 
	m°©us
;

46 } 
	tdma32ªgs_t
;

49 
dma32ªgs_t
 
	mxmt
;

50 
dma32ªgs_t
 
	mrcv
;

51 } 
	tdma32ªgp_t
;

54 
uöt32
 
	mfifﬂddr
;

55 
uöt32
 
	mfifod©Æow
;

56 
uöt32
 
	mfifod©ahigh
;

57 
uöt32
 
	m∑d
;

58 } 
	tdma32düg_t
;

65 
uöt32
 
	m˘æ
;

66 
uöt32
 
	maddr
;

67 } 
	tdma32dd_t
;

72 
	#D32RINGALIGN_BITS
 12

	)

73 
	#D32MAXRINGSZ
 (1 << 
D32RINGALIGN_BITS
)

	)

74 
	#D32RINGALIGN
 (1 << 
D32RINGALIGN_BITS
)

	)

76 
	#D32MAXDD
 (
D32MAXRINGSZ
 /  (
dma32dd_t
))

	)

79 
	#XC_XE
 ((
uöt32
)1 << 0Ë

	)

80 
	#XC_SE
 ((
uöt32
)1 << 1Ë

	)

81 
	#XC_LE
 ((
uöt32
)1 << 2Ë

	)

82 
	#XC_FL
 ((
uöt32
)1 << 4Ë

	)

83 
	#XC_MR_MASK
 0x000000C0

	)

84 
	#XC_MR_SHIFT
 6

	)

85 
	#XC_PD
 ((
uöt32
)1 << 11Ë

	)

86 
	#XC_AE
 ((
uöt32
)3 << 16Ë

	)

87 
	#XC_AE_SHIFT
 16

	)

88 
	#XC_BL_MASK
 0x001C0000

	)

89 
	#XC_BL_SHIFT
 18

	)

90 
	#XC_PC_MASK
 0x00E00000

	)

91 
	#XC_PC_SHIFT
 21

	)

92 
	#XC_PT_MASK
 0x03000000

	)

93 
	#XC_PT_SHIFT
 24

	)

96 
	#DMA_MR_1
 0

	)

97 
	#DMA_MR_2
 1

	)

101 
	#DMA_BL_16
 0

	)

102 
	#DMA_BL_32
 1

	)

103 
	#DMA_BL_64
 2

	)

104 
	#DMA_BL_128
 3

	)

105 
	#DMA_BL_256
 4

	)

106 
	#DMA_BL_512
 5

	)

107 
	#DMA_BL_1024
 6

	)

110 
	#DMA_PC_0
 0

	)

111 
	#DMA_PC_4
 1

	)

112 
	#DMA_PC_8
 2

	)

113 
	#DMA_PC_16
 3

	)

117 
	#DMA_PT_1
 0

	)

118 
	#DMA_PT_2
 1

	)

119 
	#DMA_PT_4
 2

	)

120 
	#DMA_PT_8
 3

	)

123 
	#XP_LD_MASK
 0xff‡

	)

126 
	#XS_CD_MASK
 0x0ff‡

	)

127 
	#XS_XS_MASK
 0xf000

	)

128 
	#XS_XS_SHIFT
 12

	)

129 
	#XS_XS_DISABLED
 0x0000

	)

130 
	#XS_XS_ACTIVE
 0x1000

	)

131 
	#XS_XS_IDLE
 0x2000

	)

132 
	#XS_XS_STOPPED
 0x3000

	)

133 
	#XS_XS_SUSP
 0x4000

	)

134 
	#XS_XE_MASK
 0xf0000

	)

135 
	#XS_XE_SHIFT
 16

	)

136 
	#XS_XE_NOERR
 0x00000

	)

137 
	#XS_XE_DPE
 0x10000

	)

138 
	#XS_XE_DFU
 0x20000

	)

139 
	#XS_XE_BEBR
 0x30000

	)

140 
	#XS_XE_BEDA
 0x40000

	)

141 
	#XS_AD_MASK
 0xfff00000

	)

142 
	#XS_AD_SHIFT
 20

	)

145 
	#RC_RE
 ((
uöt32
)1 << 0Ë

	)

146 
	#RC_RO_MASK
 0x„

	)

147 
	#RC_RO_SHIFT
 1

	)

148 
	#RC_FM
 ((
uöt32
)1 << 8Ë

	)

149 
	#RC_SH
 ((
uöt32
)1 << 9Ë

	)

150 
	#RC_OC
 ((
uöt32
)1 << 10Ë

	)

151 
	#RC_PD
 ((
uöt32
)1 << 11Ë

	)

152 
	#RC_AE
 ((
uöt32
)3 << 16Ë

	)

153 
	#RC_AE_SHIFT
 16

	)

154 
	#RC_BL_MASK
 0x001C0000

	)

155 
	#RC_BL_SHIFT
 18

	)

156 
	#RC_PC_MASK
 0x00E00000

	)

157 
	#RC_PC_SHIFT
 21

	)

158 
	#RC_PT_MASK
 0x03000000

	)

159 
	#RC_PT_SHIFT
 24

	)

162 
	#RP_LD_MASK
 0xff‡

	)

165 
	#RS_CD_MASK
 0x0ff‡

	)

166 
	#RS_RS_MASK
 0xf000

	)

167 
	#RS_RS_SHIFT
 12

	)

168 
	#RS_RS_DISABLED
 0x0000

	)

169 
	#RS_RS_ACTIVE
 0x1000

	)

170 
	#RS_RS_IDLE
 0x2000

	)

171 
	#RS_RS_STOPPED
 0x3000

	)

172 
	#RS_RE_MASK
 0xf0000

	)

173 
	#RS_RE_SHIFT
 16

	)

174 
	#RS_RE_NOERR
 0x00000

	)

175 
	#RS_RE_DPE
 0x10000

	)

176 
	#RS_RE_DFO
 0x20000

	)

177 
	#RS_RE_BEBW
 0x30000

	)

178 
	#RS_RE_BEDA
 0x40000

	)

179 
	#RS_AD_MASK
 0xfff00000

	)

180 
	#RS_AD_SHIFT
 20

	)

183 
	#FA_OFF_MASK
 0xfff‡

	)

184 
	#FA_SEL_MASK
 0xf0000

	)

185 
	#FA_SEL_SHIFT
 16

	)

186 
	#FA_SEL_XDD
 0x00000

	)

187 
	#FA_SEL_XDP
 0x10000

	)

188 
	#FA_SEL_RDD
 0x40000

	)

189 
	#FA_SEL_RDP
 0x50000

	)

190 
	#FA_SEL_XFD
 0x80000

	)

191 
	#FA_SEL_XFP
 0x90000

	)

192 
	#FA_SEL_RFD
 0xc0000

	)

193 
	#FA_SEL_RFP
 0xd0000

	)

194 
	#FA_SEL_RSD
 0xe0000

	)

195 
	#FA_SEL_RSP
 0xf0000

	)

198 
	#CTRL_BC_MASK
 0x00001ff‡

	)

199 
	#CTRL_AE
 ((
uöt32
)3 << 16Ë

	)

200 
	#CTRL_AE_SHIFT
 16

	)

201 
	#CTRL_PARITY
 ((
uöt32
)3 << 18Ë

	)

202 
	#CTRL_EOT
 ((
uöt32
)1 << 28Ë

	)

203 
	#CTRL_IOC
 ((
uöt32
)1 << 29Ë

	)

204 
	#CTRL_EOF
 ((
uöt32
)1 << 30Ë

	)

205 
	#CTRL_SOF
 ((
uöt32
)1 << 31Ë

	)

208 
	#CTRL_CORE_MASK
 0x0ff00000

	)

214 
uöt32
 
	mc⁄åﬁ
;

215 
uöt32
 
	m±r
;

216 
uöt32
 
	maddæow
;

217 
uöt32
 
	maddrhigh
;

218 
uöt32
 
	m°©us0
;

219 
uöt32
 
	m°©us1
;

220 } 
	tdma64ªgs_t
;

223 
dma64ªgs_t
 
	mtx
;

224 
dma64ªgs_t
 
	mrx
;

225 } 
	tdma64ªgp_t
;

228 
uöt32
 
	mfifﬂddr
;

229 
uöt32
 
	mfifod©Æow
;

230 
uöt32
 
	mfifod©ahigh
;

231 
uöt32
 
	m∑d
;

232 } 
	tdma64düg_t
;

239 
uöt32
 
	m˘æ1
;

240 
uöt32
 
	m˘æ2
;

241 
uöt32
 
	maddæow
;

242 
uöt32
 
	maddrhigh
;

243 } 
	tdma64dd_t
;

248 
	#D64RINGALIGN_BITS
 13

	)

249 
	#D64MAXRINGSZ
 (1 << 
D64RINGALIGN_BITS
)

	)

250 
	#D64RINGALIGN
 (1 << 
D64RINGALIGN_BITS
)

	)

252 
	#D64MAXDD
 (
D64MAXRINGSZ
 /  (
dma64dd_t
))

	)

255 
	#D64_XC_XE
 0x00000001

	)

256 
	#D64_XC_SE
 0x00000002

	)

257 
	#D64_XC_LE
 0x00000004

	)

258 
	#D64_XC_FL
 0x00000010

	)

259 
	#D64_XC_MR_MASK
 0x000000C0

	)

260 
	#D64_XC_MR_SHIFT
 6

	)

261 
	#D64_XC_PD
 0x00000800

	)

262 
	#D64_XC_AE
 0x00030000

	)

263 
	#D64_XC_AE_SHIFT
 16

	)

264 
	#D64_XC_BL_MASK
 0x001C0000

	)

265 
	#D64_XC_BL_SHIFT
 18

	)

266 
	#D64_XC_PC_MASK
 0x00E00000

	)

267 
	#D64_XC_PC_SHIFT
 21

	)

268 
	#D64_XC_PT_MASK
 0x03000000

	)

269 
	#D64_XC_PT_SHIFT
 24

	)

272 
	#D64_XP_LD_MASK
 0x00001ff‡

	)

275 
	#D64_XS0_CD_MASK
 0x00001ff‡

	)

276 
	#D64_XS0_XS_MASK
 0xf0000000

	)

277 
	#D64_XS0_XS_SHIFT
 28

	)

278 
	#D64_XS0_XS_DISABLED
 0x00000000

	)

279 
	#D64_XS0_XS_ACTIVE
 0x10000000

	)

280 
	#D64_XS0_XS_IDLE
 0x20000000

	)

281 
	#D64_XS0_XS_STOPPED
 0x30000000

	)

282 
	#D64_XS0_XS_SUSP
 0x40000000

	)

284 
	#D64_XS1_AD_MASK
 0x00001ff‡

	)

285 
	#D64_XS1_XE_MASK
 0xf0000000

	)

286 
	#D64_XS1_XE_SHIFT
 28

	)

287 
	#D64_XS1_XE_NOERR
 0x00000000

	)

288 
	#D64_XS1_XE_DPE
 0x10000000

	)

289 
	#D64_XS1_XE_DFU
 0x20000000

	)

290 
	#D64_XS1_XE_DTE
 0x30000000

	)

291 
	#D64_XS1_XE_DESRE
 0x40000000

	)

292 
	#D64_XS1_XE_COREE
 0x50000000

	)

295 
	#D64_RC_RE
 0x00000001

	)

296 
	#D64_RC_RO_MASK
 0x000000„

	)

297 
	#D64_RC_RO_SHIFT
 1

	)

298 
	#D64_RC_FM
 0x00000100

	)

299 
	#D64_RC_SH
 0x00000200

	)

300 
	#D64_RC_OC
 0x00000400

	)

301 
	#D64_RC_PD
 0x00000800

	)

302 
	#D64_RC_AE
 0x00030000

	)

303 
	#D64_RC_AE_SHIFT
 16

	)

304 
	#D64_RC_BL_MASK
 0x001C0000

	)

305 
	#D64_RC_BL_SHIFT
 18

	)

306 
	#D64_RC_PC_MASK
 0x00E00000

	)

307 
	#D64_RC_PC_SHIFT
 21

	)

308 
	#D64_RC_PT_MASK
 0x03000000

	)

309 
	#D64_RC_PT_SHIFT
 24

	)

312 
	#DMA_CTRL_PEN
 (1 << 0Ë

	)

313 
	#DMA_CTRL_ROC
 (1 << 1Ë

	)

314 
	#DMA_CTRL_RXMULTI
 (1 << 2Ë

	)

315 
	#DMA_CTRL_UNFRAMED
 (1 << 3Ë

	)

316 
	#DMA_CTRL_USB_BOUNDRY4KB_WAR
 (1 << 4)

	)

317 
	#DMA_CTRL_DMA_AVOIDANCE_WAR
 (1 << 5Ë

	)

320 
	#D64_RP_LD_MASK
 0x00001ff‡

	)

323 
	#D64_RS0_CD_MASK
 0x00001ff‡

	)

324 
	#D64_RS0_RS_MASK
 0xf0000000

	)

325 
	#D64_RS0_RS_SHIFT
 28

	)

326 
	#D64_RS0_RS_DISABLED
 0x00000000

	)

327 
	#D64_RS0_RS_ACTIVE
 0x10000000

	)

328 
	#D64_RS0_RS_IDLE
 0x20000000

	)

329 
	#D64_RS0_RS_STOPPED
 0x30000000

	)

330 
	#D64_RS0_RS_SUSP
 0x40000000

	)

332 
	#D64_RS1_AD_MASK
 0x0001fff‡

	)

333 
	#D64_RS1_RE_MASK
 0xf0000000

	)

334 
	#D64_RS1_RE_SHIFT
 28

	)

335 
	#D64_RS1_RE_NOERR
 0x00000000

	)

336 
	#D64_RS1_RE_DPO
 0x10000000

	)

337 
	#D64_RS1_RE_DFU
 0x20000000

	)

338 
	#D64_RS1_RE_DTE
 0x30000000

	)

339 
	#D64_RS1_RE_DESRE
 0x40000000

	)

340 
	#D64_RS1_RE_COREE
 0x50000000

	)

343 
	#D64_FA_OFF_MASK
 0xfff‡

	)

344 
	#D64_FA_SEL_MASK
 0xf0000

	)

345 
	#D64_FA_SEL_SHIFT
 16

	)

346 
	#D64_FA_SEL_XDD
 0x00000

	)

347 
	#D64_FA_SEL_XDP
 0x10000

	)

348 
	#D64_FA_SEL_RDD
 0x40000

	)

349 
	#D64_FA_SEL_RDP
 0x50000

	)

350 
	#D64_FA_SEL_XFD
 0x80000

	)

351 
	#D64_FA_SEL_XFP
 0x90000

	)

352 
	#D64_FA_SEL_RFD
 0xc0000

	)

353 
	#D64_FA_SEL_RFP
 0xd0000

	)

354 
	#D64_FA_SEL_RSD
 0xe0000

	)

355 
	#D64_FA_SEL_RSP
 0xf0000

	)

358 
	#D64_CTRL_COREFLAGS
 0x0ff00000

	)

359 
	#D64_CTRL1_EOT
 ((
uöt32
)1 << 28Ë

	)

360 
	#D64_CTRL1_IOC
 ((
uöt32
)1 << 29Ë

	)

361 
	#D64_CTRL1_EOF
 ((
uöt32
)1 << 30Ë

	)

362 
	#D64_CTRL1_SOF
 ((
uöt32
)1 << 31Ë

	)

365 
	#D64_CTRL2_BC_MASK
 0x00007ff‡

	)

366 
	#D64_CTRL2_AE
 0x00030000

	)

367 
	#D64_CTRL2_AE_SHIFT
 16

	)

368 
	#D64_CTRL2_PARITY
 0x00040000

	)

371 
	#D64_CTRL_CORE_MASK
 0x0ff00000

	)

373 
	#D64_RX_FRM_STS_LEN
 0x0000fff‡

	)

374 
	#D64_RX_FRM_STS_OVFL
 0x00800000

	)

375 
	#D64_RX_FRM_STS_DSCRCNT
 0x0f000000

	)

376 
	#D64_RX_FRM_STS_DATATYPE
 0xf0000000

	)

380 
uöt16
 
	mÀn
;

381 
uöt16
 
	mÊags
;

382 } 
	tdma_rxh_t
;

	@include/sbpcmcia.h

27 #i‚def 
_SBPCMCIA_H


28 
	#_SBPCMCIA_H


	)

38 
	#PCMCIA_FCR
 (0x700 / 2)

	)

40 
	#FCR0_OFF
 0

	)

41 
	#FCR1_OFF
 (0x40 / 2)

	)

42 
	#FCR2_OFF
 (0x80 / 2)

	)

43 
	#FCR3_OFF
 (0xc0 / 2)

	)

45 
	#PCMCIA_FCR0
 (0x700 / 2)

	)

46 
	#PCMCIA_FCR1
 (0x740 / 2)

	)

47 
	#PCMCIA_FCR2
 (0x780 / 2)

	)

48 
	#PCMCIA_FCR3
 (0x7c0 / 2)

	)

52 
	#PCMCIA_COR
 0

	)

54 
	#COR_RST
 0x80

	)

55 
	#COR_LEV
 0x40

	)

56 
	#COR_IRQEN
 0x04

	)

57 
	#COR_BLREN
 0x01

	)

58 
	#COR_FUNEN
 0x01

	)

61 
	#PCICIA_FCSR
 (2 / 2)

	)

62 
	#PCICIA_PRR
 (4 / 2)

	)

63 
	#PCICIA_SCR
 (6 / 2)

	)

64 
	#PCICIA_ESR
 (8 / 2)

	)

67 
	#PCM_MEMOFF
 0x0000

	)

68 
	#F0_MEMOFF
 0x1000

	)

69 
	#F1_MEMOFF
 0x2000

	)

70 
	#F2_MEMOFF
 0x3000

	)

71 
	#F3_MEMOFF
 0x4000

	)

74 
	#MEM_ADDR0
 (0x728 / 2)

	)

75 
	#MEM_ADDR1
 (0x72®/ 2)

	)

76 
	#MEM_ADDR2
 (0x72¯/ 2)

	)

79 
	#PCMCIA_ADDR0
 (0x072ê/ 2)

	)

80 
	#PCMCIA_ADDR1
 (0x0730 / 2)

	)

81 
	#PCMCIA_ADDR2
 (0x0732 / 2)

	)

83 
	#MEM_SEG
 (0x0734 / 2)

	)

84 
	#SROM_CS
 (0x0736 / 2)

	)

85 
	#SROM_DATAL
 (0x0738 / 2)

	)

86 
	#SROM_DATAH
 (0x073®/ 2)

	)

87 
	#SROM_ADDRL
 (0x073¯/ 2)

	)

88 
	#SROM_ADDRH
 (0x073ê/ 2)

	)

89 
	#SROM_INFO2
 (0x0772 / 2Ë

	)

90 
	#SROM_INFO
 (0x07bê/ 2Ë

	)

93 
	#SROM_IDLE
 0

	)

94 
	#SROM_WRITE
 1

	)

95 
	#SROM_READ
 2

	)

96 
	#SROM_WEN
 4

	)

97 
	#SROM_WDS
 7

	)

98 
	#SROM_DONE
 8

	)

101 
	#SRI_SZ_MASK
 0x03

	)

102 
	#SRI_BLANK
 0x04

	)

103 
	#SRI_OTP
 0x80

	)

107 
	#SBTML_INT_ACK
 0x40000

	)

108 
	#SBTML_INT_EN
 0x20000

	)

111 
	#SBTMH_INT_STATUS
 0x40000

	)

	@include/sbsdio.h

30 #i‚def 
_SBSDIO_H


31 
	#_SBSDIO_H


	)

33 
	#SBSDIO_NUM_FUNCTION
 3

	)

36 
	#SBSDIO_SPROM_CS
 0x10000

	)

37 
	#SBSDIO_SPROM_INFO
 0x10001

	)

38 
	#SBSDIO_SPROM_DATA_LOW
 0x10002

	)

39 
	#SBSDIO_SPROM_DATA_HIGH
 0x10003

	)

40 
	#SBSDIO_SPROM_ADDR_LOW
 0x10004

	)

41 
	#SBSDIO_SPROM_ADDR_HIGH
 0x10005

	)

42 
	#SBSDIO_CHIP_CTRL_DATA
 0x10006

	)

43 
	#SBSDIO_CHIP_CTRL_EN
 0x10007

	)

44 
	#SBSDIO_WATERMARK
 0x10008

	)

45 
	#SBSDIO_DEVICE_CTL
 0x10009

	)

48 
	#SBSDIO_FUNC1_SBADDRLOW
 0x1000A

	)

49 
	#SBSDIO_FUNC1_SBADDRMID
 0x1000B

	)

50 
	#SBSDIO_FUNC1_SBADDRHIGH
 0x1000C

	)

51 
	#SBSDIO_FUNC1_FRAMECTRL
 0x1000D

	)

52 
	#SBSDIO_FUNC1_CHIPCLKCSR
 0x1000E

	)

53 
	#SBSDIO_FUNC1_SDIOPULLUP
 0x1000F

	)

54 
	#SBSDIO_FUNC1_WFRAMEBCLO
 0x10019

	)

55 
	#SBSDIO_FUNC1_WFRAMEBCHI
 0x1001A

	)

56 
	#SBSDIO_FUNC1_RFRAMEBCLO
 0x1001B

	)

57 
	#SBSDIO_FUNC1_RFRAMEBCHI
 0x1001C

	)

58 
	#SBSDIO_FUNC1_MESBUSYCTRL
 0x1001D

	)

60 
	#SBSDIO_FUNC1_MISC_REG_START
 0x10000

	)

61 
	#SBSDIO_FUNC1_MISC_REG_LIMIT
 0x1001C

	)

64 
	#SBSDIO_FUNC1_WAKEUPCTRL
 0x1001E

	)

65 
	#SBSDIO_FUNC1_WCTRL_ALPWAIT_MASK
 0x1

	)

66 
	#SBSDIO_FUNC1_WCTRL_ALPWAIT_SHIFT
 0

	)

67 
	#SBSDIO_FUNC1_WCTRL_HTWAIT_MASK
 0x2

	)

68 
	#SBSDIO_FUNC1_WCTRL_HTWAIT_SHIFT
 1

	)

69 
	#SBSDIO_FUNC1_SLEEPCSR
 0x1001F

	)

70 
	#SBSDIO_FUNC1_SLEEPCSR_KSO_MASK
 0x1

	)

71 
	#SBSDIO_FUNC1_SLEEPCSR_KSO_SHIFT
 0

	)

72 
	#SBSDIO_FUNC1_SLEEPCSR_KSO_EN
 1

	)

73 
	#SBSDIO_FUNC1_SLEEPCSR_DEVON_MASK
 0x2

	)

74 
	#SBSDIO_FUNC1_SLEEPCSR_DEVON_SHIFT
 1

	)

77 
	#SBSDIO_SPROM_IDLE
 0

	)

78 
	#SBSDIO_SPROM_WRITE
 1

	)

79 
	#SBSDIO_SPROM_READ
 2

	)

80 
	#SBSDIO_SPROM_WEN
 4

	)

81 
	#SBSDIO_SPROM_WDS
 7

	)

82 
	#SBSDIO_SPROM_DONE
 8

	)

85 
	#SROM_SZ_MASK
 0x03

	)

86 
	#SROM_BLANK
 0x04

	)

87 
	#SROM_OTP
 0x80

	)

90 
	#SBSDIO_CHIP_CTRL_XTAL
 0x01

	)

95 
	#SBSDIO_WATERMARK_MASK
 0x7‡

	)

103 
	#SBSDIO_MESBUSYCTRL_MASK
 0x7f

	)

106 
	#SBSDIO_DEVCTL_SETBUSY
 0x01

	)

109 
	#SBSDIO_DEVCTL_SPI_INTR_SYNC
 0x02

	)

112 
	#SBSDIO_DEVCTL_CA_INT_ONLY
 0x04

	)

115 
	#SBSDIO_DEVCTL_PADS_ISO
 0x08

	)

119 
	#SBSDIO_DEVCTL_SB_RST_CTL
 0x30

	)

120 
	#SBSDIO_DEVCTL_RST_CORECTL
 0x00

	)

121 
	#SBSDIO_DEVCTL_RST_BPRESET
 0x10

	)

122 
	#SBSDIO_DEVCTL_RST_NOBPRESET
 0x20

	)

123 
	#SBSDIO_DEVCTL_EN_F2_BLK_WATERMARK
 0x10

	)

127 
	#SBSDIO_FORCE_ALP
 0x01

	)

128 
	#SBSDIO_FORCE_HT
 0x02

	)

129 
	#SBSDIO_FORCE_ILP
 0x04

	)

130 
	#SBSDIO_ALP_AVAIL_REQ
 0x08

	)

131 
	#SBSDIO_HT_AVAIL_REQ
 0x10

	)

132 
	#SBSDIO_FORCE_HW_CLKREQ_OFF
 0x20

	)

133 
	#SBSDIO_ALP_AVAIL
 0x40

	)

134 
	#SBSDIO_HT_AVAIL
 0x80

	)

136 
	#SBSDIO_Rev8_HT_AVAIL
 0x40

	)

137 
	#SBSDIO_Rev8_ALP_AVAIL
 0x80

	)

138 
	#SBSDIO_CSR_MASK
 0x1F

	)

140 
	#SBSDIO_AVBITS
 (
SBSDIO_HT_AVAIL
 | 
SBSDIO_ALP_AVAIL
)

	)

141 
	#SBSDIO_ALPAV
(
ªgvÆ
Ë(‘egvÆË& 
SBSDIO_AVBITS
)

	)

142 
	#SBSDIO_HTAV
(
ªgvÆ
Ë((‘egvÆË& 
SBSDIO_AVBITS
Ë=SBSDIO_AVBITS)

	)

143 
	#SBSDIO_ALPONLY
(
ªgvÆ
Ë(
	`SBSDIO_ALPAV
‘egvÆË&& !
	`SBSDIO_HTAV
‘egvÆ))

	)

144 
	#SBSDIO_CLKAV
(
ªgvÆ
, 
Æp⁄ly
Ë(
	`SBSDIO_ALPAV
(regval) && \

145 (
Æp⁄ly
 ? 1 : 
	`SBSDIO_HTAV
(
ªgvÆ
)))

	)

148 
	#SBSDIO_PULLUP_D0
 0x01

	)

149 
	#SBSDIO_PULLUP_D1
 0x02

	)

150 
	#SBSDIO_PULLUP_D2
 0x04

	)

151 
	#SBSDIO_PULLUP_CMD
 0x08

	)

152 
	#SBSDIO_PULLUP_ALL
 0x0‡

	)

155 
	#SBSDIO_SB_OFT_ADDR_MASK
 0x07FFF

	)

156 
	#SBSDIO_SB_OFT_ADDR_LIMIT
 0x08000

	)

157 
	#SBSDIO_SB_ACCESS_2_4B_FLAG
 0x08000

	)

161 
	#SBSDIO_SBADDRLOW_MASK
 0x80

	)

162 
	#SBSDIO_SBADDRMID_MASK
 0xf‡

	)

163 
	#SBSDIO_SBADDRHIGH_MASK
 0xffU

	)

164 
	#SBSDIO_SBWINDOW_MASK
 0xffff8000

	)

167 
	#SBSDIO_CIS_BASE_COMMON
 0x1000

	)

168 
	#SBSDIO_CIS_SIZE_LIMIT
 0x200

	)

169 
	#SBSDIO_OTP_CIS_SIZE_LIMIT
 0x078

	)

171 
	#SBSDIO_CIS_OFT_ADDR_MASK
 0x1FFFF

	)

173 
	#SBSDIO_CIS_MANFID_TUPLE_LEN
 6

	)

178 
	#SBSDIO_SPROM_CIS_OFFSET
 0x8

	)

182 
	#SBSDIO_BYTEMODE_DATALEN_MAX
 64

	)

186 
	#SBSDIO_CORE_ADDR_MASK
 0x1FFFF

	)

	@include/sbsdpcmdev.h

28 #i‚def 
_sbsdpcmdev_h_


29 
	#_sbsdpcmdev_h_


	)

32 #i‚de‡
PAD


33 
	#_PADLINE
(
löe
Ë
∑d
 ## 
	)
line

34 
	#_XSTR
(
löe
Ë
	`_PADLINE
÷öe)

	)

35 
	#PAD
 
	`_XSTR
(
__LINE__
)

	)

40 
dma64ªgs_t
 
	mxmt
;

41 
uöt32
 
	mPAD
[2];

42 
dma64ªgs_t
 
	mrcv
;

43 
uöt32
 
	mPAD
[2];

44 } 
	tdma64p_t
;

48 
dma64p_t
 
	mdma64ªgs
[2];

49 
dma64düg_t
 
	mdmafifo
;

50 
uöt32
 
	mPAD
[92];

51 } 
	tsdiodma64_t
;

55 
dma32ªgp_t
 
	mdma32ªgs
[2];

56 
dma32düg_t
 
	mdmafifo
;

57 
uöt32
 
	mPAD
[108];

58 } 
	tsdiodma32_t
;

62 
dma32ªgp_t
 
	mdm¨egs
;

63 
dma32düg_t
 
	mdmafifo
;

64 
uöt32
 
	mPAD
[116];

65 } 
	tpcmdma32_t
;

69 
uöt32
 
	mc‹ec⁄åﬁ
;

70 
uöt32
 
	mc‹e°©us
;

71 
uöt32
 
	mPAD
[1];

72 
uöt32
 
	mbi°°©us
;

75 
uöt16
 
	mpcmcüme•‹èœddr
;

76 
uöt16
 
	mPAD
[1];

77 
uöt16
 
	mpcmcüme•‹èlmask
;

78 
uöt16
 
	mPAD
[1];

79 
uöt16
 
	mpcmcüwr‰amebc
;

80 
uöt16
 
	mPAD
[1];

81 
uöt16
 
	mpcmcüundîÊowtimî
;

82 
uöt16
 
	mPAD
[1];

85 
uöt32
 
	möt°©us
;

86 
uöt32
 
	mho°ötmask
;

87 
uöt32
 
	mötmask
;

88 
uöt32
 
	msböt°©us
;

89 
uöt32
 
	msbötmask
;

90 
uöt32
 
	mfuncötmask
;

91 
uöt32
 
	mPAD
[2];

92 
uöt32
 
	mtosbmaûbox
;

93 
uöt32
 
	mtoho°maûbox
;

94 
uöt32
 
	mtosbmaûboxd©a
;

95 
uöt32
 
	mtoho°maûboxd©a
;

98 
uöt32
 
	msdiﬂc˚ss
;

99 
uöt32
 
	mPAD
[3];

102 
uöt8
 
	mpcmcü‰ame˘æ
;

103 
uöt8
 
	mPAD
[3];

104 
uöt8
 
	mpcmcüw©îm¨k
;

105 
uöt8
 
	mPAD
[155];

108 
uöt32
 
	möåcvœzy
;

109 
uöt32
 
	mPAD
[3];

112 
uöt32
 
	mcmd52rd
;

113 
uöt32
 
	mcmd52wr
;

114 
uöt32
 
	mcmd53rd
;

115 
uöt32
 
	mcmd53wr
;

116 
uöt32
 
	mab‹t
;

117 
uöt32
 
	md©a¸˚º‹
;

118 
uöt32
 
	mrdoutofsync
;

119 
uöt32
 
	mwroutofsync
;

120 
uöt32
 
	mwrôebusy
;

121 
uöt32
 
	mªadwaô
;

122 
uöt32
 
	mªadãrm
;

123 
uöt32
 
	mwrôëîm
;

124 
uöt32
 
	mPAD
[40];

125 
uöt32
 
	m˛ock˘l°©us
;

126 
uöt32
 
	mPAD
[7];

130 
pcmdma32_t
 
	mpcm32
;

131 
sdiodma32_t
 
	msdiod32
;

132 
sdiodma64_t
 
	msdiod64
;

133 } 
	mdma
;

136 
	mcis
[512];

139 
	mpcmcüf¸
[256];

140 
uöt16
 
	mPAD
[55];

143 
uöt16
 
	mback∂™ec§
;

144 
uöt16
 
	mback∂™óddr0
;

145 
uöt16
 
	mback∂™óddr1
;

146 
uöt16
 
	mback∂™óddr2
;

147 
uöt16
 
	mback∂™óddr3
;

148 
uöt16
 
	mback∂™ed©a0
;

149 
uöt16
 
	mback∂™ed©a1
;

150 
uöt16
 
	mback∂™ed©a2
;

151 
uöt16
 
	mback∂™ed©a3
;

152 
uöt16
 
	mPAD
[31];

155 
uöt16
 
	m•rom°©us
;

156 
uöt32
 
	mPAD
[464];

159 
sbc⁄fig_t
 
	msbc⁄fig
;

160 } 
	tsdpcmd_ªgs_t
;

163 
	#CC_CISRDY
 (1 << 0Ë

	)

164 
	#CC_BPRESEN
 (1 << 1Ë

	)

165 
	#CC_F2RDY
 (1 << 2Ë

	)

166 
	#CC_CLRPADSISO
 (1 << 3Ë

	)

167 
	#CC_XMTDATAAVAIL_MODE
 (1 << 4Ë

	)

168 
	#CC_XMTDATAAVAIL_CTRL
 (1 << 5Ë

	)

171 
	#CS_PCMCIAMODE
 (1 << 0Ë

	)

172 
	#CS_SMARTDEV
 (1 << 1Ë

	)

173 
	#CS_F2ENABLED
 (1 << 2Ë

	)

175 
	#PCMCIA_MES_PA_MASK
 0x7ff‡

	)

176 
	#PCMCIA_MES_PM_MASK
 0x7ff‡

	)

177 
	#PCMCIA_WFBC_MASK
 0xfff‡

	)

178 
	#PCMCIA_UT_MASK
 0x07f‡

	)

181 
	#I_SMB_SW0
 (1 << 0Ë

	)

182 
	#I_SMB_SW1
 (1 << 1Ë

	)

183 
	#I_SMB_SW2
 (1 << 2Ë

	)

184 
	#I_SMB_SW3
 (1 << 3Ë

	)

185 
	#I_SMB_SW_MASK
 0x0000000‡

	)

186 
	#I_SMB_SW_SHIFT
 0

	)

187 
	#I_HMB_SW0
 (1 << 4Ë

	)

188 
	#I_HMB_SW1
 (1 << 5Ë

	)

189 
	#I_HMB_SW2
 (1 << 6Ë

	)

190 
	#I_HMB_SW3
 (1 << 7Ë

	)

191 
	#I_HMB_SW_MASK
 0x000000f0

	)

192 
	#I_HMB_SW_SHIFT
 4

	)

193 
	#I_WR_OOSYNC
 (1 << 8Ë

	)

194 
	#I_RD_OOSYNC
 (1 << 9Ë

	)

195 
	#I_PC
 (1 << 10Ë

	)

196 
	#I_PD
 (1 << 11Ë

	)

197 
	#I_DE
 (1 << 12Ë

	)

198 
	#I_RU
 (1 << 13Ë

	)

199 
	#I_RO
 (1 << 14Ë

	)

200 
	#I_XU
 (1 << 15Ë

	)

201 
	#I_RI
 (1 << 16Ë

	)

202 
	#I_BUSPWR
 (1 << 17Ë

	)

203 
	#I_XMTDATA_AVAIL
 (1 << 23Ë

	)

204 
	#I_XI
 (1 << 24Ë

	)

205 
	#I_RF_TERM
 (1 << 25Ë

	)

206 
	#I_WF_TERM
 (1 << 26Ë

	)

207 
	#I_PCMCIA_XU
 (1 << 27Ë

	)

208 
	#I_SBINT
 (1 << 28Ë

	)

209 
	#I_CHIPACTIVE
 (1 << 29Ë

	)

210 
	#I_SRESET
 (1 << 30Ë

	)

211 
	#I_IOE2
 (1U << 31Ë

	)

212 
	#I_ERRORS
 (
I_PC
 | 
I_PD
 | 
I_DE
 | 
I_RU
 | 
I_RO
 | 
I_XU
Ë

	)

213 
	#I_DMA
 (
I_RI
 | 
I_XI
 | 
I_ERRORS
)

	)

216 
	#I_SB_SERR
 (1 << 8Ë

	)

217 
	#I_SB_RESPERR
 (1 << 9Ë

	)

218 
	#I_SB_SPROMERR
 (1 << 10Ë

	)

221 
	#SDA_DATA_MASK
 0x000000f‡

	)

222 
	#SDA_ADDR_MASK
 0x000fff00

	)

223 
	#SDA_ADDR_SHIFT
 8

	)

224 
	#SDA_WRITE
 0x01000000

	)

225 
	#SDA_READ
 0x00000000

	)

226 
	#SDA_BUSY
 0x80000000

	)

229 
	#SDA_CCCR_SPACE
 0x000

	)

230 
	#SDA_F1_FBR_SPACE
 0x100

	)

231 
	#SDA_F2_FBR_SPACE
 0x200

	)

232 
	#SDA_F1_REG_SPACE
 0x300

	)

235 
	#SDA_CHIPCONTROLDATA
 0x006

	)

236 
	#SDA_CHIPCONTROLENAB
 0x007

	)

237 
	#SDA_F2WATERMARK
 0x008

	)

238 
	#SDA_DEVICECONTROL
 0x009

	)

239 
	#SDA_SBADDRLOW
 0x00®

	)

240 
	#SDA_SBADDRMID
 0x00b

	)

241 
	#SDA_SBADDRHIGH
 0x00¯

	)

242 
	#SDA_FRAMECTRL
 0x00d

	)

243 
	#SDA_CHIPCLOCKCSR
 0x00ê

	)

244 
	#SDA_SDIOPULLUP
 0x00‡

	)

245 
	#SDA_SDIOWRFRAMEBCLOW
 0x019

	)

246 
	#SDA_SDIOWRFRAMEBCHIGH
 0x01®

	)

247 
	#SDA_SDIORDFRAMEBCLOW
 0x01b

	)

248 
	#SDA_SDIORDFRAMEBCHIGH
 0x01¯

	)

251 
	#SDA_F2WATERMARK_MASK
 0x7‡

	)

254 
	#SDA_SBADDRLOW_MASK
 0x80

	)

257 
	#SDA_SBADDRMID_MASK
 0xf‡

	)

260 
	#SDA_SBADDRHIGH_MASK
 0xf‡

	)

263 
	#SFC_RF_TERM
 (1 << 0Ë

	)

264 
	#SFC_WF_TERM
 (1 << 1Ë

	)

265 
	#SFC_CRC4WOOS
 (1 << 2Ë

	)

266 
	#SFC_ABORTALL
 (1 << 3Ë

	)

269 
	#PFC_RF_TERM
 (1 << 0Ë

	)

270 
	#PFC_WF_TERM
 (1 << 1Ë

	)

273 
	#IRL_TO_MASK
 0x00fffff‡

	)

274 
	#IRL_FC_MASK
 0xff000000

	)

275 
	#IRL_FC_SHIFT
 24

	)

279 
uöt16
 
	mÀn
;

280 
uöt16
 
	mÊags
;

281 } 
	tsdpcmd_rxh_t
;

284 
	#RXF_CRC
 0x0001

	)

285 
	#RXF_WOOS
 0x0002

	)

286 
	#RXF_WF_TERM
 0x0004

	)

287 
	#RXF_ABORT
 0x0008

	)

288 
	#RXF_DISCARD
 (
RXF_CRC
 | 
RXF_WOOS
 | 
RXF_WF_TERM
 | 
RXF_ABORT
Ë

	)

291 
	#SDPCM_FRAMETAG_LEN
 4

	)

293 
	#SDPCM_HWEXT_LEN
 8

	)

	@include/sbsocram.h

27 #i‚def 
_SBSOCRAM_H


28 
	#_SBSOCRAM_H


	)

30 #i‚de‡
_LANGUAGE_ASSEMBLY


33 #i‚de‡
PAD


34 
	#_PADLINE
(
löe
Ë
∑d
 ## 
	)
line

35 
	#_XSTR
(
löe
Ë
	`_PADLINE
÷öe)

	)

36 
	#PAD
 
	`_XSTR
(
__LINE__
)

	)

40 vﬁ©ûê
	ssbso¸amªgs
 {

41 
uöt32
 
	mc‹eöfo
;

42 
uöt32
 
	mbwÆloc
;

43 
uöt32
 
	mexåac‹eöfo
;

44 
uöt32
 
	mbi°°©
;

45 
uöt32
 
	mb™kidx
;

46 
uöt32
 
	m°™dby˘æ
;

48 
uöt32
 
	mîæog°©us
;

49 
uöt32
 
	mîæogaddr
;

51 
uöt32
 
	mˇmb™kidx
;

52 
uöt32
 
	mˇmb™k°™dby˘æ
;

53 
uöt32
 
	mˇmb™k∑tch˘æ
;

54 
uöt32
 
	mˇmb™k∑tchtblba£addr
;

55 
uöt32
 
	mˇmb™kcmdªg
;

56 
uöt32
 
	mˇmb™kd©¨eg
;

57 
uöt32
 
	mˇmb™kmaskªg
;

58 
uöt32
 
	mPAD
[1];

59 
uöt32
 
	mb™köfo
;

60 
uöt32
 
	mPAD
[15];

61 
uöt32
 
	mextmemc⁄fig
;

62 
uöt32
 
	mextmem∑rôyc§
;

63 
uöt32
 
	mextmem∑rôyîrd©a
;

64 
uöt32
 
	mextmem∑rôyîr˙t
;

65 
uöt32
 
	mextmemwr˘æ™dsize
;

66 
uöt32
 
	mPAD
[84];

67 
uöt32
 
	mw‹k¨ound
;

68 
uöt32
 
	mpwr˘l
;

69 
uöt32
 
	mPAD
[133];

70 
uöt32
 
	m§_c⁄åﬁ
;

71 
uöt32
 
	m§_°©us
;

72 
uöt32
 
	m§_addªss
;

73 
uöt32
 
	m§_d©a
;

74 } 
	tsbso¸amªgs_t
;

79 
	#SR_COREINFO
 0x00

	)

80 
	#SR_BWALLOC
 0x04

	)

81 
	#SR_BISTSTAT
 0x0c

	)

82 
	#SR_BANKINDEX
 0x10

	)

83 
	#SR_BANKSTBYCTL
 0x14

	)

84 
	#SR_PWRCTL
 0x1e8

	)

87 
	#SRCI_PT_MASK
 0x00070000

	)

88 
	#SRCI_PT_SHIFT
 16

	)

90 
	#SRCI_PT_OCP_OCP
 0

	)

91 
	#SRCI_PT_AXI_OCP
 1

	)

92 
	#SRCI_PT_ARM7AHB_OCP
 2

	)

93 
	#SRCI_PT_CM3AHB_OCP
 3

	)

94 
	#SRCI_PT_AXI_AXI
 4

	)

95 
	#SRCI_PT_AHB_AXI
 5

	)

97 
	#SRCI_LSS_MASK
 0x00f00000

	)

98 
	#SRCI_LSS_SHIFT
 20

	)

99 
	#SRCI_LRS_MASK
 0x0f000000

	)

100 
	#SRCI_LRS_SHIFT
 24

	)

105 
	#SRCI_MS0_MASK
 0xf

	)

106 
	#SR_MS0_BASE
 16

	)

113 
	#SRCI_ROMNB_MASK
 0xf000

	)

114 
	#SRCI_ROMNB_SHIFT
 12

	)

115 
	#SRCI_ROMBSZ_MASK
 0xf00

	)

116 
	#SRCI_ROMBSZ_SHIFT
 8

	)

117 
	#SRCI_SRNB_MASK
 0xf0

	)

118 
	#SRCI_SRNB_SHIFT
 4

	)

119 
	#SRCI_SRBSZ_MASK
 0xf

	)

120 
	#SRCI_SRBSZ_SHIFT
 0

	)

122 
	#SR_BSZ_BASE
 14

	)

125 
	#SRSC_SBYOVR_MASK
 0x80000000

	)

126 
	#SRSC_SBYOVR_SHIFT
 31

	)

127 
	#SRSC_SBYOVRVAL_MASK
 0x60000000

	)

128 
	#SRSC_SBYOVRVAL_SHIFT
 29

	)

129 
	#SRSC_SBYEN_MASK
 0x01000000

	)

130 
	#SRSC_SBYEN_SHIFT
 24

	)

133 
	#SRPC_PMU_STBYDIS_MASK
 0x00000010

	)

134 
	#SRPC_PMU_STBYDIS_SHIFT
 4

	)

135 
	#SRPC_STBYOVRVAL_MASK
 0x00000008

	)

136 
	#SRPC_STBYOVRVAL_SHIFT
 3

	)

137 
	#SRPC_STBYOVR_MASK
 0x00000007

	)

138 
	#SRPC_STBYOVR_SHIFT
 0

	)

141 
	#SRECC_NUM_BANKS_MASK
 0x000000F0

	)

142 
	#SRECC_NUM_BANKS_SHIFT
 4

	)

143 
	#SRECC_BANKSIZE_MASK
 0x0000000F

	)

144 
	#SRECC_BANKSIZE_SHIFT
 0

	)

146 
	#SRECC_BANKSIZE
(
vÆue
Ë(1 << (vÆue))

	)

149 
	#SRCBPC_PATCHENABLE
 0x80000000

	)

151 
	#SRP_ADDRESS
 0x0001FFFC

	)

152 
	#SRP_VALID
 0x8000

	)

155 
	#SRCMD_WRITE
 0x00020000

	)

156 
	#SRCMD_READ
 0x00010000

	)

157 
	#SRCMD_DONE
 0x80000000

	)

159 
	#SRCMD_DONE_DLY
 1000

	)

162 
	#SOCRAM_BANKINFO_SZMASK
 0x7f

	)

163 
	#SOCRAM_BANKIDX_ROM_MASK
 0x100

	)

165 
	#SOCRAM_BANKIDX_MEMTYPE_SHIFT
 8

	)

167 
	#SOCRAM_MEMTYPE_RAM
 0

	)

168 
	#SOCRAM_MEMTYPE_R0M
 1

	)

169 
	#SOCRAM_MEMTYPE_DEVRAM
 2

	)

171 
	#SOCRAM_BANKINFO_REG
 0x40

	)

172 
	#SOCRAM_BANKIDX_REG
 0x10

	)

173 
	#SOCRAM_BANKINFO_STDBY_MASK
 0x400

	)

174 
	#SOCRAM_BANKINFO_STDBY_TIMER
 0x800

	)

177 
	#SOCRAM_BANKINFO_DEVRAMSEL_SHIFT
 13

	)

178 
	#SOCRAM_BANKINFO_DEVRAMSEL_MASK
 0x2000

	)

179 
	#SOCRAM_BANKINFO_DEVRAMPRO_SHIFT
 14

	)

180 
	#SOCRAM_BANKINFO_DEVRAMPRO_MASK
 0x4000

	)

181 
	#SOCRAM_BANKINFO_SLPSUPP_SHIFT
 15

	)

182 
	#SOCRAM_BANKINFO_SLPSUPP_MASK
 0x8000

	)

183 
	#SOCRAM_BANKINFO_RETNTRAM_SHIFT
 16

	)

184 
	#SOCRAM_BANKINFO_RETNTRAM_MASK
 0x00010000

	)

185 
	#SOCRAM_BANKINFO_PDASZ_SHIFT
 17

	)

186 
	#SOCRAM_BANKINFO_PDASZ_MASK
 0x003E0000

	)

187 
	#SOCRAM_BANKINFO_DEVRAMREMAP_SHIFT
 24

	)

188 
	#SOCRAM_BANKINFO_DEVRAMREMAP_MASK
 0x01000000

	)

191 
	#SOCRAM_DEVRAMBANK_MASK
 0xF000

	)

192 
	#SOCRAM_DEVRAMBANK_SHIFT
 12

	)

195 
	#SOCRAM_BANKINFO_SZBASE
 8192

	)

196 
	#SOCRAM_BANKSIZE_SHIFT
 13

	)

	@include/sdio.h

28 #i‚def 
_SDIO_H


29 
	#_SDIO_H


	)

34 
uöt8
 
	mcc¸_sdio_ªv
;

35 
uöt8
 
	msd_ªv
;

36 
uöt8
 
	mio_í
;

37 
uöt8
 
	mio_rdy
;

38 
uöt8
 
	möå_˘l
;

39 
uöt8
 
	möå_°©us
;

40 
uöt8
 
	mio_ab‹t
;

41 
uöt8
 
	mbus_öãr
;

42 
uöt8
 
	mˇ∑bûôy
;

44 
uöt8
 
	mcis_ba£_low
;

45 
uöt8
 
	mcis_ba£_mid
;

46 
uöt8
 
	mcis_ba£_high
;

49 
uöt8
 
	mbus_su•íd
;

50 
uöt8
 
	mfunc_£À˘
;

51 
uöt8
 
	mexec_Êag
;

52 
uöt8
 
	mªady_Êag
;

54 
uöt8
 
	m‚0_blk_size
[2];

56 
uöt8
 
	mpowî_c⁄åﬁ
;

58 
uöt8
 
	m•ìd_c⁄åﬁ
;

59 } 
	tsdio_ªgs_t
;

62 
	#SDIOD_CCCR_REV
 0x00

	)

63 
	#SDIOD_CCCR_SDREV
 0x01

	)

64 
	#SDIOD_CCCR_IOEN
 0x02

	)

65 
	#SDIOD_CCCR_IORDY
 0x03

	)

66 
	#SDIOD_CCCR_INTEN
 0x04

	)

67 
	#SDIOD_CCCR_INTPEND
 0x05

	)

68 
	#SDIOD_CCCR_IOABORT
 0x06

	)

69 
	#SDIOD_CCCR_BICTRL
 0x07

	)

70 
	#SDIOD_CCCR_CAPABLITIES
 0x08

	)

71 
	#SDIOD_CCCR_CISPTR_0
 0x09

	)

72 
	#SDIOD_CCCR_CISPTR_1
 0x0A

	)

73 
	#SDIOD_CCCR_CISPTR_2
 0x0B

	)

74 
	#SDIOD_CCCR_BUSSUSP
 0x0C

	)

75 
	#SDIOD_CCCR_FUNCSEL
 0x0D

	)

76 
	#SDIOD_CCCR_EXECFLAGS
 0x0E

	)

77 
	#SDIOD_CCCR_RDYFLAGS
 0x0F

	)

78 
	#SDIOD_CCCR_BLKSIZE_0
 0x10

	)

79 
	#SDIOD_CCCR_BLKSIZE_1
 0x11

	)

80 
	#SDIOD_CCCR_POWER_CONTROL
 0x12

	)

81 
	#SDIOD_CCCR_SPEED_CONTROL
 0x13

	)

82 
	#SDIOD_CCCR_UHSI_SUPPORT
 0x14

	)

83 
	#SDIOD_CCCR_DRIVER_STRENGTH
 0x15

	)

84 
	#SDIOD_CCCR_INTR_EXTN
 0x16

	)

87 
	#SDIOD_CCCR_BRCM_CARDCAP
 0xf0

	)

88 
	#SDIOD_CCCR_BRCM_CARDCAP_CMD14_SUPPORT
 0x02

	)

89 
	#SDIOD_CCCR_BRCM_CARDCAP_CMD14_EXT
 0x04

	)

90 
	#SDIOD_CCCR_BRCM_CARDCAP_CMD_NODEC
 0x08

	)

91 
	#SDIOD_CCCR_BRCM_CARDCTL
 0xf1

	)

92 
	#SDIOD_CCCR_BRCM_SEPINT
 0xf2

	)

95 
	#SDIO_REV_SDIOID_MASK
 0xf0

	)

96 
	#SDIO_REV_CCCRID_MASK
 0x0‡

	)

99 
	#SD_REV_PHY_MASK
 0x0‡

	)

102 
	#SDIO_FUNC_ENABLE_1
 0x02

	)

103 
	#SDIO_FUNC_ENABLE_2
 0x04

	)

106 
	#SDIO_FUNC_READY_1
 0x02

	)

107 
	#SDIO_FUNC_READY_2
 0x04

	)

110 
	#INTR_CTL_MASTER_EN
 0x1

	)

111 
	#INTR_CTL_FUNC1_EN
 0x2

	)

112 
	#INTR_CTL_FUNC2_EN
 0x4

	)

115 
	#INTR_STATUS_FUNC1
 0x2

	)

116 
	#INTR_STATUS_FUNC2
 0x4

	)

119 
	#IO_ABORT_RESET_ALL
 0x08

	)

120 
	#IO_ABORT_FUNC_MASK
 0x07

	)

123 
	#BUS_CARD_DETECT_DIS
 0x80

	)

124 
	#BUS_SPI_CONT_INTR_CAP
 0x40

	)

125 
	#BUS_SPI_CONT_INTR_EN
 0x20

	)

126 
	#BUS_SD_DATA_WIDTH_MASK
 0x03

	)

127 
	#BUS_SD_DATA_WIDTH_4BIT
 0x02

	)

128 
	#BUS_SD_DATA_WIDTH_1BIT
 0x00

	)

131 
	#SDIO_CAP_4BLS
 0x80

	)

132 
	#SDIO_CAP_LSC
 0x40

	)

133 
	#SDIO_CAP_E4MI
 0x20

	)

134 
	#SDIO_CAP_S4MI
 0x10

	)

135 
	#SDIO_CAP_SBS
 0x08

	)

136 
	#SDIO_CAP_SRW
 0x04

	)

137 
	#SDIO_CAP_SMB
 0x02

	)

138 
	#SDIO_CAP_SDC
 0x01

	)

141 
	#SDIO_POWER_SMPC
 0x01

	)

142 
	#SDIO_POWER_EMPC
 0x02

	)

145 
	#SDIO_SPEED_SHS
 0x01

	)

146 
	#SDIO_SPEED_EHS
 0x02

	)

149 
	#SDIO_BUS_SPEED_UHSISEL_M
 
	`BITFIELD_MASK
(3)

	)

150 
	#SDIO_BUS_SPEED_UHSISEL_S
 1

	)

153 
	#SDIO_BUS_SPEED_UHSICAP_M
 
	`BITFIELD_MASK
(3)

	)

154 
	#SDIO_BUS_SPEED_UHSICAP_S
 0

	)

157 
	#SDIO_BUS_DRVR_TYPE_CAP_M
 
	`BITFIELD_MASK
(3)

	)

158 
	#SDIO_BUS_DRVR_TYPE_CAP_S
 0

	)

161 
	#SDIO_BUS_DRVR_TYPE_SEL_M
 
	`BITFIELD_MASK
(2)

	)

162 
	#SDIO_BUS_DRVR_TYPE_SEL_S
 4

	)

165 
	#SDIO_BUS_ASYNCINT_CAP_M
 
	`BITFIELD_MASK
(1)

	)

166 
	#SDIO_BUS_ASYNCINT_CAP_S
 0

	)

169 
	#SDIO_BUS_ASYNCINT_SEL_M
 
	`BITFIELD_MASK
(1)

	)

170 
	#SDIO_BUS_ASYNCINT_SEL_S
 1

	)

173 
	#SDIO_SEPINT_MASK
 0x01

	)

174 
	#SDIO_SEPINT_OE
 0x02

	)

175 
	#SDIO_SEPINT_ACT_HI
 0x04

	)

179 
uöt8
 
	mdev˘r
;

180 
uöt8
 
	mext_dev
;

181 
uöt8
 
	mpwr_£l
;

182 
uöt8
 
	mPAD
[6];

184 
uöt8
 
	mcis_low
;

185 
uöt8
 
	mcis_mid
;

186 
uöt8
 
	mcis_high
;

187 
uöt8
 
	mcß_low
;

188 
uöt8
 
	mcß_mid
;

189 
uöt8
 
	mcß_high
;

190 
uöt8
 
	mcß_d©_wö
;

192 
uöt8
 
	m‚x_blk_size
[2];

193 } 
	tsdio_fbr_t
;

196 
	#SDIOD_MAX_FUNCS
 8

	)

197 
	#SDIOD_MAX_IOFUNCS
 7

	)

200 
	#SDIOD_FBR_STARTADDR
 0x100

	)

203 
	#SDIOD_FBR_SIZE
 0x100

	)

206 
	#SDIOD_FBR_BASE
(
n
Ë(“Ë* 0x100)

	)

209 
	#SDIOD_FBR_DEVCTR
 0x00

	)

210 
	#SDIOD_FBR_EXT_DEV
 0x01

	)

211 
	#SDIOD_FBR_PWR_SEL
 0x02

	)

214 
	#SDIOD_FBR_CISPTR_0
 0x09

	)

215 
	#SDIOD_FBR_CISPTR_1
 0x0A

	)

216 
	#SDIOD_FBR_CISPTR_2
 0x0B

	)

219 
	#SDIOD_FBR_CSA_ADDR_0
 0x0C

	)

220 
	#SDIOD_FBR_CSA_ADDR_1
 0x0D

	)

221 
	#SDIOD_FBR_CSA_ADDR_2
 0x0E

	)

222 
	#SDIOD_FBR_CSA_DATA
 0x0F

	)

225 
	#SDIOD_FBR_BLKSIZE_0
 0x10

	)

226 
	#SDIOD_FBR_BLKSIZE_1
 0x11

	)

229 
	#SDIOD_FBR_DEVCTR_DIC
 0x0‡

	)

230 
	#SDIOD_FBR_DECVTR_CSA
 0x40

	)

231 
	#SDIOD_FBR_DEVCTR_CSA_EN
 0x80

	)

233 
	#SDIOD_DIC_NONE
 0

	)

234 
	#SDIOD_DIC_UART
 1

	)

235 
	#SDIOD_DIC_BLUETOOTH_A
 2

	)

236 
	#SDIOD_DIC_BLUETOOTH_B
 3

	)

237 
	#SDIOD_DIC_GPS
 4

	)

238 
	#SDIOD_DIC_CAMERA
 5

	)

239 
	#SDIOD_DIC_PHS
 6

	)

240 
	#SDIOD_DIC_WLAN
 7

	)

241 
	#SDIOD_DIC_EXT
 0x‡

	)

244 
	#SDIOD_PWR_SEL_SPS
 0x01

	)

245 
	#SDIOD_PWR_SEL_EPS
 0x02

	)

248 
	#SDIO_FUNC_0
 0

	)

249 
	#SDIO_FUNC_1
 1

	)

250 
	#SDIO_FUNC_2
 2

	)

251 
	#SDIO_FUNC_3
 3

	)

252 
	#SDIO_FUNC_4
 4

	)

253 
	#SDIO_FUNC_5
 5

	)

254 
	#SDIO_FUNC_6
 6

	)

255 
	#SDIO_FUNC_7
 7

	)

257 
	#SD_CARD_TYPE_UNKNOWN
 0

	)

258 
	#SD_CARD_TYPE_IO
 1

	)

259 
	#SD_CARD_TYPE_MEMORY
 2

	)

260 
	#SD_CARD_TYPE_COMBO
 3

	)

262 
	#SDIO_MAX_BLOCK_SIZE
 2048

	)

263 
	#SDIO_MIN_BLOCK_SIZE
 1

	)

266 
	#CARDREG_STATUS_BIT_OUTOFRANGE
 31

	)

267 
	#CARDREG_STATUS_BIT_COMCRCERROR
 23

	)

268 
	#CARDREG_STATUS_BIT_ILLEGALCOMMAND
 22

	)

269 
	#CARDREG_STATUS_BIT_ERROR
 19

	)

270 
	#CARDREG_STATUS_BIT_IOCURRENTSTATE3
 12

	)

271 
	#CARDREG_STATUS_BIT_IOCURRENTSTATE2
 11

	)

272 
	#CARDREG_STATUS_BIT_IOCURRENTSTATE1
 10

	)

273 
	#CARDREG_STATUS_BIT_IOCURRENTSTATE0
 9

	)

274 
	#CARDREG_STATUS_BIT_FUN_NUM_ERROR
 4

	)

278 
	#SD_CMD_GO_IDLE_STATE
 0

	)

279 
	#SD_CMD_SEND_OPCOND
 1

	)

280 
	#SD_CMD_MMC_SET_RCA
 3

	)

281 
	#SD_CMD_IO_SEND_OP_COND
 5

	)

282 
	#SD_CMD_SELECT_DESELECT_CARD
 7

	)

283 
	#SD_CMD_SEND_CSD
 9

	)

284 
	#SD_CMD_SEND_CID
 10

	)

285 
	#SD_CMD_STOP_TRANSMISSION
 12

	)

286 
	#SD_CMD_SEND_STATUS
 13

	)

287 
	#SD_CMD_GO_INACTIVE_STATE
 15

	)

288 
	#SD_CMD_SET_BLOCKLEN
 16

	)

289 
	#SD_CMD_READ_SINGLE_BLOCK
 17

	)

290 
	#SD_CMD_READ_MULTIPLE_BLOCK
 18

	)

291 
	#SD_CMD_WRITE_BLOCK
 24

	)

292 
	#SD_CMD_WRITE_MULTIPLE_BLOCK
 25

	)

293 
	#SD_CMD_PROGRAM_CSD
 27

	)

294 
	#SD_CMD_SET_WRITE_PROT
 28

	)

295 
	#SD_CMD_CLR_WRITE_PROT
 29

	)

296 
	#SD_CMD_SEND_WRITE_PROT
 30

	)

297 
	#SD_CMD_ERASE_WR_BLK_START
 32

	)

298 
	#SD_CMD_ERASE_WR_BLK_END
 33

	)

299 
	#SD_CMD_ERASE
 38

	)

300 
	#SD_CMD_LOCK_UNLOCK
 42

	)

301 
	#SD_CMD_IO_RW_DIRECT
 52

	)

302 
	#SD_CMD_IO_RW_EXTENDED
 53

	)

303 
	#SD_CMD_APP_CMD
 55

	)

304 
	#SD_CMD_GEN_CMD
 56

	)

305 
	#SD_CMD_READ_OCR
 58

	)

306 
	#SD_CMD_CRC_ON_OFF
 59

	)

307 
	#SD_ACMD_SD_STATUS
 13

	)

308 
	#SD_ACMD_SEND_NUM_WR_BLOCKS
 22

	)

309 
	#SD_ACMD_SET_WR_BLOCK_ERASE_CNT
 23

	)

310 
	#SD_ACMD_SD_SEND_OP_COND
 41

	)

311 
	#SD_ACMD_SET_CLR_CARD_DETECT
 42

	)

312 
	#SD_ACMD_SEND_SCR
 51

	)

315 
	#SD_IO_OP_READ
 0

	)

316 
	#SD_IO_OP_WRITE
 1

	)

317 
	#SD_IO_RW_NORMAL
 0

	)

318 
	#SD_IO_RW_RAW
 1

	)

319 
	#SD_IO_BYTE_MODE
 0

	)

320 
	#SD_IO_BLOCK_MODE
 1

	)

321 
	#SD_IO_FIXED_ADDRESS
 0

	)

322 
	#SD_IO_INCREMENT_ADDRESS
 1

	)

325 
	#SDIO_IO_RW_DIRECT_ARG
(
rw
, 
øw
, 
func
, 
addr
, 
d©a
) \

326 ((((
rw
Ë& 1Ë<< 31Ë| (((
func
Ë& 0x7Ë<< 28Ë| (((
øw
) & 1) << 27) | \

327 (((
addr
Ë& 0x1FFFFË<< 9Ë| ((
d©a
Ë& 0xFF))

	)

330 
	#SDIO_IO_RW_EXTENDED_ARG
(
rw
, 
blk
, 
func
, 
addr
, 
öc_addr
, 
cou¡
) \

331 ((((
rw
Ë& 1Ë<< 31Ë| (((
func
Ë& 0x7Ë<< 28Ë| (((
blk
) & 1) << 27) | \

332 (((
öc_addr
Ë& 1Ë<< 26Ë| (((
addr
Ë& 0x1FFFFË<< 9Ë| ((
cou¡
Ë& 0x1FF))

	)

335 
	#SD_RSP_NO_NONE
 0

	)

336 
	#SD_RSP_NO_1
 1

	)

337 
	#SD_RSP_NO_2
 2

	)

338 
	#SD_RSP_NO_3
 3

	)

339 
	#SD_RSP_NO_4
 4

	)

340 
	#SD_RSP_NO_5
 5

	)

341 
	#SD_RSP_NO_6
 6

	)

344 
	#SD_RSP_MR6_COM_CRC_ERROR
 0x8000

	)

345 
	#SD_RSP_MR6_ILLEGAL_COMMAND
 0x4000

	)

346 
	#SD_RSP_MR6_ERROR
 0x2000

	)

349 
	#SD_RSP_MR1_SBIT
 0x80

	)

350 
	#SD_RSP_MR1_PARAMETER_ERROR
 0x40

	)

351 
	#SD_RSP_MR1_RFU5
 0x20

	)

352 
	#SD_RSP_MR1_FUNC_NUM_ERROR
 0x10

	)

353 
	#SD_RSP_MR1_COM_CRC_ERROR
 0x08

	)

354 
	#SD_RSP_MR1_ILLEGAL_COMMAND
 0x04

	)

355 
	#SD_RSP_MR1_RFU1
 0x02

	)

356 
	#SD_RSP_MR1_IDLE_STATE
 0x01

	)

359 
	#SD_RSP_R5_COM_CRC_ERROR
 0x80

	)

360 
	#SD_RSP_R5_ILLEGAL_COMMAND
 0x40

	)

361 
	#SD_RSP_R5_IO_CURRENTSTATE1
 0x20

	)

362 
	#SD_RSP_R5_IO_CURRENTSTATE0
 0x10

	)

363 
	#SD_RSP_R5_ERROR
 0x08

	)

364 
	#SD_RSP_R5_RFU
 0x04

	)

365 
	#SD_RSP_R5_FUNC_NUM_ERROR
 0x02

	)

366 
	#SD_RSP_R5_OUT_OF_RANGE
 0x01

	)

368 
	#SD_RSP_R5_ERRBITS
 0xCB

	)

380 
	#SDIOH_CMD_0
 0

	)

381 
	#SDIOH_CMD_3
 3

	)

382 
	#SDIOH_CMD_5
 5

	)

383 
	#SDIOH_CMD_7
 7

	)

384 
	#SDIOH_CMD_11
 11

	)

385 
	#SDIOH_CMD_14
 14

	)

386 
	#SDIOH_CMD_15
 15

	)

387 
	#SDIOH_CMD_19
 19

	)

388 
	#SDIOH_CMD_52
 52

	)

389 
	#SDIOH_CMD_53
 53

	)

390 
	#SDIOH_CMD_59
 59

	)

393 
	#SDIOH_RSP_NONE
 0

	)

394 
	#SDIOH_RSP_R1
 1

	)

395 
	#SDIOH_RSP_R2
 2

	)

396 
	#SDIOH_RSP_R3
 3

	)

397 
	#SDIOH_RSP_R4
 4

	)

398 
	#SDIOH_RSP_R5
 5

	)

399 
	#SDIOH_RSP_R6
 6

	)

404 
	#SDIOH_RSP5_ERROR_FLAGS
 0xCB

	)

413 
	#CMD5_OCR_M
 
	`BITFIELD_MASK
(24)

	)

414 
	#CMD5_OCR_S
 0

	)

416 
	#CMD5_S18R_M
 
	`BITFIELD_MASK
(1)

	)

417 
	#CMD5_S18R_S
 24

	)

419 
	#CMD7_RCA_M
 
	`BITFIELD_MASK
(16)

	)

420 
	#CMD7_RCA_S
 16

	)

422 
	#CMD14_RCA_M
 
	`BITFIELD_MASK
(16)

	)

423 
	#CMD14_RCA_S
 16

	)

424 
	#CMD14_SLEEP_M
 
	`BITFIELD_MASK
(1)

	)

425 
	#CMD14_SLEEP_S
 15

	)

427 
	#CMD_15_RCA_M
 
	`BITFIELD_MASK
(16)

	)

428 
	#CMD_15_RCA_S
 16

	)

430 
	#CMD52_DATA_M
 
	`BITFIELD_MASK
(8Ë

	)

432 
	#CMD52_DATA_S
 0

	)

433 
	#CMD52_REG_ADDR_M
 
	`BITFIELD_MASK
(17Ë

	)

434 
	#CMD52_REG_ADDR_S
 9

	)

435 
	#CMD52_RAW_M
 
	`BITFIELD_MASK
(1Ë

	)

436 
	#CMD52_RAW_S
 27

	)

437 
	#CMD52_FUNCTION_M
 
	`BITFIELD_MASK
(3Ë

	)

438 
	#CMD52_FUNCTION_S
 28

	)

439 
	#CMD52_RW_FLAG_M
 
	`BITFIELD_MASK
(1Ë

	)

440 
	#CMD52_RW_FLAG_S
 31

	)

443 
	#CMD53_BYTE_BLK_CNT_M
 
	`BITFIELD_MASK
(9Ë

	)

444 
	#CMD53_BYTE_BLK_CNT_S
 0

	)

445 
	#CMD53_REG_ADDR_M
 
	`BITFIELD_MASK
(17Ë

	)

446 
	#CMD53_REG_ADDR_S
 9

	)

447 
	#CMD53_OP_CODE_M
 
	`BITFIELD_MASK
(1Ë

	)

448 
	#CMD53_OP_CODE_S
 26

	)

449 
	#CMD53_BLK_MODE_M
 
	`BITFIELD_MASK
(1Ë

	)

450 
	#CMD53_BLK_MODE_S
 27

	)

451 
	#CMD53_FUNCTION_M
 
	`BITFIELD_MASK
(3Ë

	)

452 
	#CMD53_FUNCTION_S
 28

	)

453 
	#CMD53_RW_FLAG_M
 
	`BITFIELD_MASK
(1Ë

	)

454 
	#CMD53_RW_FLAG_S
 31

	)

460 
	#RSP4_IO_OCR_M
 
	`BITFIELD_MASK
(24Ë

	)

461 
	#RSP4_IO_OCR_S
 0

	)

463 
	#RSP4_S18A_M
 
	`BITFIELD_MASK
(1Ë

	)

464 
	#RSP4_S18A_S
 24

	)

466 
	#RSP4_STUFF_M
 
	`BITFIELD_MASK
(3Ë

	)

467 
	#RSP4_STUFF_S
 24

	)

468 
	#RSP4_MEM_PRESENT_M
 
	`BITFIELD_MASK
(1Ë

	)

469 
	#RSP4_MEM_PRESENT_S
 27

	)

470 
	#RSP4_NUM_FUNCS_M
 
	`BITFIELD_MASK
(3Ë

	)

471 
	#RSP4_NUM_FUNCS_S
 28

	)

472 
	#RSP4_CARD_READY_M
 
	`BITFIELD_MASK
(1Ë

	)

473 
	#RSP4_CARD_READY_S
 31

	)

475 
	#RSP6_STATUS_M
 
	`BITFIELD_MASK
(16Ë

	)

477 
	#RSP6_STATUS_S
 0

	)

478 
	#RSP6_IO_RCA_M
 
	`BITFIELD_MASK
(16Ë

	)

479 
	#RSP6_IO_RCA_S
 16

	)

481 
	#RSP1_AKE_SEQ_ERROR_M
 
	`BITFIELD_MASK
(1Ë

	)

482 
	#RSP1_AKE_SEQ_ERROR_S
 3

	)

483 
	#RSP1_APP_CMD_M
 
	`BITFIELD_MASK
(1Ë

	)

484 
	#RSP1_APP_CMD_S
 5

	)

485 
	#RSP1_READY_FOR_DATA_M
 
	`BITFIELD_MASK
(1Ë

	)

486 
	#RSP1_READY_FOR_DATA_S
 8

	)

487 
	#RSP1_CURR_STATE_M
 
	`BITFIELD_MASK
(4Ë

	)

490 
	#RSP1_CURR_STATE_S
 9

	)

491 
	#RSP1_EARSE_RESET_M
 
	`BITFIELD_MASK
(1Ë

	)

492 
	#RSP1_EARSE_RESET_S
 13

	)

493 
	#RSP1_CARD_ECC_DISABLE_M
 
	`BITFIELD_MASK
(1Ë

	)

494 
	#RSP1_CARD_ECC_DISABLE_S
 14

	)

495 
	#RSP1_WP_ERASE_SKIP_M
 
	`BITFIELD_MASK
(1Ë

	)

496 
	#RSP1_WP_ERASE_SKIP_S
 15

	)

497 
	#RSP1_CID_CSD_OVERW_M
 
	`BITFIELD_MASK
(1Ë

	)

500 
	#RSP1_CID_CSD_OVERW_S
 16

	)

501 
	#RSP1_ERROR_M
 
	`BITFIELD_MASK
(1Ë

	)

502 
	#RSP1_ERROR_S
 19

	)

503 
	#RSP1_CC_ERROR_M
 
	`BITFIELD_MASK
(1Ë

	)

504 
	#RSP1_CC_ERROR_S
 20

	)

505 
	#RSP1_CARD_ECC_FAILED_M
 
	`BITFIELD_MASK
(1Ë

	)

508 
	#RSP1_CARD_ECC_FAILED_S
 21

	)

509 
	#RSP1_ILLEGAL_CMD_M
 
	`BITFIELD_MASK
(1Ë

	)

510 
	#RSP1_ILLEGAL_CMD_S
 22

	)

511 
	#RSP1_COM_CRC_ERROR_M
 
	`BITFIELD_MASK
(1Ë

	)

513 
	#RSP1_COM_CRC_ERROR_S
 23

	)

514 
	#RSP1_LOCK_UNLOCK_FAIL_M
 
	`BITFIELD_MASK
(1Ë

	)

515 
	#RSP1_LOCK_UNLOCK_FAIL_S
 24

	)

516 
	#RSP1_CARD_LOCKED_M
 
	`BITFIELD_MASK
(1Ë

	)

517 
	#RSP1_CARD_LOCKED_S
 25

	)

518 
	#RSP1_WP_VIOLATION_M
 
	`BITFIELD_MASK
(1Ë

	)

521 
	#RSP1_WP_VIOLATION_S
 26

	)

522 
	#RSP1_ERASE_PARAM_M
 
	`BITFIELD_MASK
(1Ë

	)

523 
	#RSP1_ERASE_PARAM_S
 27

	)

524 
	#RSP1_ERASE_SEQ_ERR_M
 
	`BITFIELD_MASK
(1Ë

	)

525 
	#RSP1_ERASE_SEQ_ERR_S
 28

	)

526 
	#RSP1_BLK_LEN_ERR_M
 
	`BITFIELD_MASK
(1Ë

	)

527 
	#RSP1_BLK_LEN_ERR_S
 29

	)

528 
	#RSP1_ADDR_ERR_M
 
	`BITFIELD_MASK
(1Ë

	)

529 
	#RSP1_ADDR_ERR_S
 30

	)

530 
	#RSP1_OUT_OF_RANGE_M
 
	`BITFIELD_MASK
(1Ë

	)

531 
	#RSP1_OUT_OF_RANGE_S
 31

	)

534 
	#RSP5_DATA_M
 
	`BITFIELD_MASK
(8Ë

	)

535 
	#RSP5_DATA_S
 0

	)

536 
	#RSP5_FLAGS_M
 
	`BITFIELD_MASK
(8Ë

	)

537 
	#RSP5_FLAGS_S
 8

	)

538 
	#RSP5_STUFF_M
 
	`BITFIELD_MASK
(16Ë

	)

539 
	#RSP5_STUFF_S
 16

	)

545 
	#SPIRSP4_IO_OCR_M
 
	`BITFIELD_MASK
(16Ë

	)

546 
	#SPIRSP4_IO_OCR_S
 0

	)

547 
	#SPIRSP4_STUFF_M
 
	`BITFIELD_MASK
(3Ë

	)

548 
	#SPIRSP4_STUFF_S
 16

	)

549 
	#SPIRSP4_MEM_PRESENT_M
 
	`BITFIELD_MASK
(1Ë

	)

550 
	#SPIRSP4_MEM_PRESENT_S
 19

	)

551 
	#SPIRSP4_NUM_FUNCS_M
 
	`BITFIELD_MASK
(3Ë

	)

552 
	#SPIRSP4_NUM_FUNCS_S
 20

	)

553 
	#SPIRSP4_CARD_READY_M
 
	`BITFIELD_MASK
(1Ë

	)

554 
	#SPIRSP4_CARD_READY_S
 23

	)

555 
	#SPIRSP4_IDLE_STATE_M
 
	`BITFIELD_MASK
(1Ë

	)

556 
	#SPIRSP4_IDLE_STATE_S
 24

	)

557 
	#SPIRSP4_ILLEGAL_CMD_M
 
	`BITFIELD_MASK
(1Ë

	)

558 
	#SPIRSP4_ILLEGAL_CMD_S
 26

	)

559 
	#SPIRSP4_COM_CRC_ERROR_M
 
	`BITFIELD_MASK
(1Ë

	)

560 
	#SPIRSP4_COM_CRC_ERROR_S
 27

	)

561 
	#SPIRSP4_FUNC_NUM_ERROR_M
 
	`BITFIELD_MASK
(1Ë

	)

563 
	#SPIRSP4_FUNC_NUM_ERROR_S
 28

	)

564 
	#SPIRSP4_PARAM_ERROR_M
 
	`BITFIELD_MASK
(1Ë

	)

565 
	#SPIRSP4_PARAM_ERROR_S
 30

	)

566 
	#SPIRSP4_START_BIT_M
 
	`BITFIELD_MASK
(1Ë

	)

567 
	#SPIRSP4_START_BIT_S
 31

	)

569 
	#SPIRSP5_DATA_M
 
	`BITFIELD_MASK
(8Ë

	)

570 
	#SPIRSP5_DATA_S
 16

	)

571 
	#SPIRSP5_IDLE_STATE_M
 
	`BITFIELD_MASK
(1Ë

	)

572 
	#SPIRSP5_IDLE_STATE_S
 24

	)

573 
	#SPIRSP5_ILLEGAL_CMD_M
 
	`BITFIELD_MASK
(1Ë

	)

574 
	#SPIRSP5_ILLEGAL_CMD_S
 26

	)

575 
	#SPIRSP5_COM_CRC_ERROR_M
 
	`BITFIELD_MASK
(1Ë

	)

576 
	#SPIRSP5_COM_CRC_ERROR_S
 27

	)

577 
	#SPIRSP5_FUNC_NUM_ERROR_M
 
	`BITFIELD_MASK
(1Ë

	)

579 
	#SPIRSP5_FUNC_NUM_ERROR_S
 28

	)

580 
	#SPIRSP5_PARAM_ERROR_M
 
	`BITFIELD_MASK
(1Ë

	)

581 
	#SPIRSP5_PARAM_ERROR_S
 30

	)

582 
	#SPIRSP5_START_BIT_M
 
	`BITFIELD_MASK
(1Ë

	)

583 
	#SPIRSP5_START_BIT_S
 31

	)

586 
	#RSP6STAT_AKE_SEQ_ERROR_M
 
	`BITFIELD_MASK
(1Ë

	)

588 
	#RSP6STAT_AKE_SEQ_ERROR_S
 3

	)

589 
	#RSP6STAT_APP_CMD_M
 
	`BITFIELD_MASK
(1Ë

	)

590 
	#RSP6STAT_APP_CMD_S
 5

	)

591 
	#RSP6STAT_READY_FOR_DATA_M
 
	`BITFIELD_MASK
(1Ë

	)

594 
	#RSP6STAT_READY_FOR_DATA_S
 8

	)

595 
	#RSP6STAT_CURR_STATE_M
 
	`BITFIELD_MASK
(4Ë

	)

598 
	#RSP6STAT_CURR_STATE_S
 9

	)

599 
	#RSP6STAT_ERROR_M
 
	`BITFIELD_MASK
(1Ë

	)

601 
	#RSP6STAT_ERROR_S
 13

	)

602 
	#RSP6STAT_ILLEGAL_CMD_M
 
	`BITFIELD_MASK
(1Ë

	)

605 
	#RSP6STAT_ILLEGAL_CMD_S
 14

	)

606 
	#RSP6STAT_COM_CRC_ERROR_M
 
	`BITFIELD_MASK
(1Ë

	)

609 
	#RSP6STAT_COM_CRC_ERROR_S
 15

	)

611 
	#SDIOH_XFER_TYPE_READ
 
SD_IO_OP_READ


	)

612 
	#SDIOH_XFER_TYPE_WRITE
 
SD_IO_OP_WRITE


	)

615 
	#CMD_OPTION_DEFAULT
 0

	)

616 
	#CMD_OPTION_TUNING
 1

	)

	@include/sdioh.h

28 #i‚def 
_SDIOH_H


29 
	#_SDIOH_H


	)

31 
	#SD_SysAddr
 0x000

	)

32 
	#SD_BlockSize
 0x004

	)

33 
	#SD_BlockCou¡
 0x006

	)

34 
	#SD_Arg0
 0x008

	)

35 
	#SD_Arg1
 0x00A

	)

36 
	#SD_Tøns„rMode
 0x00C

	)

37 
	#SD_Comm™d
 0x00E

	)

38 
	#SD_Re•⁄£0
 0x010

	)

39 
	#SD_Re•⁄£1
 0x012

	)

40 
	#SD_Re•⁄£2
 0x014

	)

41 
	#SD_Re•⁄£3
 0x016

	)

42 
	#SD_Re•⁄£4
 0x018

	)

43 
	#SD_Re•⁄£5
 0x01A

	)

44 
	#SD_Re•⁄£6
 0x01C

	)

45 
	#SD_Re•⁄£7
 0x01E

	)

46 
	#SD_Buf„rD©aP‹t0
 0x020

	)

47 
	#SD_Buf„rD©aP‹t1
 0x022

	)

48 
	#SD_Pª£¡Sèã
 0x024

	)

49 
	#SD_Ho°C¡æ
 0x028

	)

50 
	#SD_PwrC¡æ
 0x029

	)

51 
	#SD_BlockG≠C¡æ
 0x02A

	)

52 
	#SD_WakeupC¡æ
 0x02B

	)

53 
	#SD_ClockC¡æ
 0x02C

	)

54 
	#SD_TimeoutC¡æ
 0x02E

	)

55 
	#SD_So·w¨eRe£t
 0x02F

	)

56 
	#SD_I¡rSètus
 0x030

	)

57 
	#SD_Eº‹I¡rSètus
 0x032

	)

58 
	#SD_I¡rSètusE«bÀ
 0x034

	)

59 
	#SD_Eº‹I¡rSètusE«bÀ
 0x036

	)

60 
	#SD_I¡rSig«lE«bÀ
 0x038

	)

61 
	#SD_Eº‹I¡rSig«lE«bÀ
 0x03A

	)

62 
	#SD_CMD12Eº‹Sètus
 0x03C

	)

63 
	#SD_C≠abûôõs
 0x040

	)

64 
	#SD_C≠abûôõs3
 0x044

	)

65 
	#SD_MaxCurC≠
 0x048

	)

66 
	#SD_MaxCurC≠_Re£rved
 0x04C

	)

67 
	#SD_ADMA_EºSètus
 0x054

	)

68 
	#SD_ADMA_SysAddr
 0x58

	)

69 
	#SD_SlŸI¡îru±Sètus
 0x0FC

	)

70 
	#SD_Ho°C⁄åﬁÀrVîsi⁄
 0x0FE

	)

71 
	#SD_GPIO_Reg
 0x100

	)

72 
	#SD_GPIO_OE
 0x104

	)

73 
	#SD_GPIO_E«bÀ
 0x108

	)

76 
	#SD_SlŸInfo
 0x40

	)

79 
	#SD3_Ho°C¡æ2
 0x03E

	)

81 
	#SD3_Pª£tVÆSèπ
 0x060

	)

82 
	#SD3_Pª£tVÆCou¡
 8

	)

84 
	#SD3_Pª£tVÆ_öô
 0x060

	)

85 
	#SD3_Pª£tVÆ_deÁu…
 0x062

	)

86 
	#SD3_Pª£tVÆ_HS
 0x064

	)

87 
	#SD3_Pª£tVÆ_SDR12
 0x066

	)

88 
	#SD3_Pª£tVÆ_SDR25
 0x068

	)

89 
	#SD3_Pª£tVÆ_SDR50
 0x06a

	)

90 
	#SD3_Pª£tVÆ_SDR104
 0x06c

	)

91 
	#SD3_Pª£tVÆ_DDR50
 0x06e

	)

93 
	#SD3_Tunög_Info_Regi°î
 0x0EC

	)

94 
	#SD3_WL_BT_ª£t_ªgi°î
 0x0F0

	)

98 
	#SD3_PRESETVAL_INITIAL_IX
 0

	)

99 
	#SD3_PRESETVAL_DESPEED_IX
 1

	)

100 
	#SD3_PRESETVAL_HISPEED_IX
 2

	)

101 
	#SD3_PRESETVAL_SDR12_IX
 3

	)

102 
	#SD3_PRESETVAL_SDR25_IX
 4

	)

103 
	#SD3_PRESETVAL_SDR50_IX
 5

	)

104 
	#SD3_PRESETVAL_SDR104_IX
 6

	)

105 
	#SD3_PRESETVAL_DDR50_IX
 7

	)

108 
	#CAP_TO_CLKFREQ_M
 
	`BITFIELD_MASK
(6)

	)

109 
	#CAP_TO_CLKFREQ_S
 0

	)

110 
	#CAP_TO_CLKUNIT_M
 
	`BITFIELD_MASK
(1)

	)

111 
	#CAP_TO_CLKUNIT_S
 7

	)

115 
	#CAP_BASECLK_M
 
	`BITFIELD_MASK
(8)

	)

116 
	#CAP_BASECLK_S
 8

	)

117 
	#CAP_MAXBLOCK_M
 
	`BITFIELD_MASK
(2)

	)

118 
	#CAP_MAXBLOCK_S
 16

	)

119 
	#CAP_ADMA2_M
 
	`BITFIELD_MASK
(1)

	)

120 
	#CAP_ADMA2_S
 19

	)

121 
	#CAP_ADMA1_M
 
	`BITFIELD_MASK
(1)

	)

122 
	#CAP_ADMA1_S
 20

	)

123 
	#CAP_HIGHSPEED_M
 
	`BITFIELD_MASK
(1)

	)

124 
	#CAP_HIGHSPEED_S
 21

	)

125 
	#CAP_DMA_M
 
	`BITFIELD_MASK
(1)

	)

126 
	#CAP_DMA_S
 22

	)

127 
	#CAP_SUSPEND_M
 
	`BITFIELD_MASK
(1)

	)

128 
	#CAP_SUSPEND_S
 23

	)

129 
	#CAP_VOLT_3_3_M
 
	`BITFIELD_MASK
(1)

	)

130 
	#CAP_VOLT_3_3_S
 24

	)

131 
	#CAP_VOLT_3_0_M
 
	`BITFIELD_MASK
(1)

	)

132 
	#CAP_VOLT_3_0_S
 25

	)

133 
	#CAP_VOLT_1_8_M
 
	`BITFIELD_MASK
(1)

	)

134 
	#CAP_VOLT_1_8_S
 26

	)

135 
	#CAP_64BIT_HOST_M
 
	`BITFIELD_MASK
(1)

	)

136 
	#CAP_64BIT_HOST_S
 28

	)

138 
	#SDIO_OCR_READ_FAIL
 (2)

	)

141 
	#CAP_ASYNCINT_SUP_M
 
	`BITFIELD_MASK
(1)

	)

142 
	#CAP_ASYNCINT_SUP_S
 29

	)

144 
	#CAP_SLOTTYPE_M
 
	`BITFIELD_MASK
(2)

	)

145 
	#CAP_SLOTTYPE_S
 30

	)

147 
	#CAP3_MSBôs_OFFSET
 (32)

	)

152 
	#CAP3_SDR50_SUP_M
 
	`BITFIELD_MASK
(1)

	)

153 
	#CAP3_SDR50_SUP_S
 (32 - 
CAP3_MSBôs_OFFSET
)

	)

155 
	#CAP3_SDR104_SUP_M
 
	`BITFIELD_MASK
(1)

	)

156 
	#CAP3_SDR104_SUP_S
 (33 - 
CAP3_MSBôs_OFFSET
)

	)

158 
	#CAP3_DDR50_SUP_M
 
	`BITFIELD_MASK
(1)

	)

159 
	#CAP3_DDR50_SUP_S
 (34 - 
CAP3_MSBôs_OFFSET
)

	)

162 
	#CAP3_30CLKCAP_M
 
	`BITFIELD_MASK
(3)

	)

163 
	#CAP3_30CLKCAP_S
 (32 - 
CAP3_MSBôs_OFFSET
)

	)

165 
	#CAP3_DRIVTYPE_A_M
 
	`BITFIELD_MASK
(1)

	)

166 
	#CAP3_DRIVTYPE_A_S
 (36 - 
CAP3_MSBôs_OFFSET
)

	)

168 
	#CAP3_DRIVTYPE_C_M
 
	`BITFIELD_MASK
(1)

	)

169 
	#CAP3_DRIVTYPE_C_S
 (37 - 
CAP3_MSBôs_OFFSET
)

	)

171 
	#CAP3_DRIVTYPE_D_M
 
	`BITFIELD_MASK
(1)

	)

172 
	#CAP3_DRIVTYPE_D_S
 (38 - 
CAP3_MSBôs_OFFSET
)

	)

174 
	#CAP3_RETUNING_TC_M
 
	`BITFIELD_MASK
(4)

	)

175 
	#CAP3_RETUNING_TC_S
 (40 - 
CAP3_MSBôs_OFFSET
)

	)

177 
	#CAP3_TUNING_SDR50_M
 
	`BITFIELD_MASK
(1)

	)

178 
	#CAP3_TUNING_SDR50_S
 (45 - 
CAP3_MSBôs_OFFSET
)

	)

180 
	#CAP3_RETUNING_MODES_M
 
	`BITFIELD_MASK
(2)

	)

181 
	#CAP3_RETUNING_MODES_S
 (46 - 
CAP3_MSBôs_OFFSET
)

	)

183 
	#CAP3_CLK_MULT_M
 
	`BITFIELD_MASK
(8)

	)

184 
	#CAP3_CLK_MULT_S
 (48 - 
CAP3_MSBôs_OFFSET
)

	)

186 
	#PRESET_DRIVR_SELECT_M
 
	`BITFIELD_MASK
(2)

	)

187 
	#PRESET_DRIVR_SELECT_S
 14

	)

189 
	#PRESET_CLK_DIV_M
 
	`BITFIELD_MASK
(10)

	)

190 
	#PRESET_CLK_DIV_S
 0

	)

193 
	#CAP_CURR_3_3_M
 
	`BITFIELD_MASK
(8)

	)

194 
	#CAP_CURR_3_3_S
 0

	)

195 
	#CAP_CURR_3_0_M
 
	`BITFIELD_MASK
(8)

	)

196 
	#CAP_CURR_3_0_S
 8

	)

197 
	#CAP_CURR_1_8_M
 
	`BITFIELD_MASK
(8)

	)

198 
	#CAP_CURR_1_8_S
 16

	)

203 
	#BLKSZ_BLKSZ_M
 
	`BITFIELD_MASK
(12)

	)

204 
	#BLKSZ_BLKSZ_S
 0

	)

205 
	#BLKSZ_BNDRY_M
 
	`BITFIELD_MASK
(3)

	)

206 
	#BLKSZ_BNDRY_S
 12

	)

212 
	#XFER_DMA_ENABLE_M
 
	`BITFIELD_MASK
(1)

	)

213 
	#XFER_DMA_ENABLE_S
 0

	)

214 
	#XFER_BLK_COUNT_EN_M
 
	`BITFIELD_MASK
(1)

	)

215 
	#XFER_BLK_COUNT_EN_S
 1

	)

216 
	#XFER_CMD_12_EN_M
 
	`BITFIELD_MASK
(1)

	)

217 
	#XFER_CMD_12_EN_S
 2

	)

218 
	#XFER_DATA_DIRECTION_M
 
	`BITFIELD_MASK
(1)

	)

219 
	#XFER_DATA_DIRECTION_S
 4

	)

220 
	#XFER_MULTI_BLOCK_M
 
	`BITFIELD_MASK
(1)

	)

221 
	#XFER_MULTI_BLOCK_S
 5

	)

225 
	#RESP_TYPE_NONE
 0

	)

226 
	#RESP_TYPE_136
 1

	)

227 
	#RESP_TYPE_48
 2

	)

228 
	#RESP_TYPE_48_BUSY
 3

	)

230 
	#CMD_TYPE_NORMAL
 0

	)

231 
	#CMD_TYPE_SUSPEND
 1

	)

232 
	#CMD_TYPE_RESUME
 2

	)

233 
	#CMD_TYPE_ABORT
 3

	)

235 
	#CMD_RESP_TYPE_M
 
	`BITFIELD_MASK
(2Ë

	)

236 
	#CMD_RESP_TYPE_S
 0

	)

237 
	#CMD_CRC_EN_M
 
	`BITFIELD_MASK
(1Ë

	)

238 
	#CMD_CRC_EN_S
 3

	)

239 
	#CMD_INDEX_EN_M
 
	`BITFIELD_MASK
(1Ë

	)

240 
	#CMD_INDEX_EN_S
 4

	)

241 
	#CMD_DATA_EN_M
 
	`BITFIELD_MASK
(1Ë

	)

242 
	#CMD_DATA_EN_S
 5

	)

243 
	#CMD_TYPE_M
 
	`BITFIELD_MASK
(2Ë

	)

245 
	#CMD_TYPE_S
 6

	)

246 
	#CMD_INDEX_M
 
	`BITFIELD_MASK
(6Ë

	)

247 
	#CMD_INDEX_S
 8

	)

252 
	#PRES_CMD_INHIBIT_M
 
	`BITFIELD_MASK
(1Ë

	)

253 
	#PRES_CMD_INHIBIT_S
 0

	)

254 
	#PRES_DAT_INHIBIT_M
 
	`BITFIELD_MASK
(1Ë

	)

255 
	#PRES_DAT_INHIBIT_S
 1

	)

256 
	#PRES_DAT_BUSY_M
 
	`BITFIELD_MASK
(1Ë

	)

257 
	#PRES_DAT_BUSY_S
 2

	)

258 
	#PRES_PRESENT_RSVD_M
 
	`BITFIELD_MASK
(5Ë

	)

259 
	#PRES_PRESENT_RSVD_S
 3

	)

260 
	#PRES_WRITE_ACTIVE_M
 
	`BITFIELD_MASK
(1Ë

	)

261 
	#PRES_WRITE_ACTIVE_S
 8

	)

262 
	#PRES_READ_ACTIVE_M
 
	`BITFIELD_MASK
(1Ë

	)

263 
	#PRES_READ_ACTIVE_S
 9

	)

264 
	#PRES_WRITE_DATA_RDY_M
 
	`BITFIELD_MASK
(1Ë

	)

265 
	#PRES_WRITE_DATA_RDY_S
 10

	)

266 
	#PRES_READ_DATA_RDY_M
 
	`BITFIELD_MASK
(1Ë

	)

267 
	#PRES_READ_DATA_RDY_S
 11

	)

268 
	#PRES_CARD_PRESENT_M
 
	`BITFIELD_MASK
(1Ë

	)

269 
	#PRES_CARD_PRESENT_S
 16

	)

270 
	#PRES_CARD_STABLE_M
 
	`BITFIELD_MASK
(1Ë

	)

271 
	#PRES_CARD_STABLE_S
 17

	)

272 
	#PRES_CARD_PRESENT_RAW_M
 
	`BITFIELD_MASK
(1Ë

	)

273 
	#PRES_CARD_PRESENT_RAW_S
 18

	)

274 
	#PRES_WRITE_ENABLED_M
 
	`BITFIELD_MASK
(1Ë

	)

275 
	#PRES_WRITE_ENABLED_S
 19

	)

276 
	#PRES_DAT_SIGNAL_M
 
	`BITFIELD_MASK
(4Ë

	)

277 
	#PRES_DAT_SIGNAL_S
 20

	)

278 
	#PRES_CMD_SIGNAL_M
 
	`BITFIELD_MASK
(1Ë

	)

279 
	#PRES_CMD_SIGNAL_S
 24

	)

282 
	#HOST_LED_M
 
	`BITFIELD_MASK
(1Ë

	)

283 
	#HOST_LED_S
 0

	)

284 
	#HOST_DATA_WIDTH_M
 
	`BITFIELD_MASK
(1Ë

	)

285 
	#HOST_DATA_WIDTH_S
 1

	)

286 
	#HOST_HI_SPEED_EN_M
 
	`BITFIELD_MASK
(1Ë

	)

287 
	#HOST_DMA_SEL_S
 3

	)

288 
	#HOST_DMA_SEL_M
 
	`BITFIELD_MASK
(2Ë

	)

289 
	#HOST_HI_SPEED_EN_S
 2

	)

292 
	#HOSTCål2_PRESVAL_EN_M
 
	`BITFIELD_MASK
(1Ë

	)

293 
	#HOSTCål2_PRESVAL_EN_S
 15

	)

295 
	#HOSTCål2_ASYINT_EN_M
 
	`BITFIELD_MASK
(1Ë

	)

296 
	#HOSTCål2_ASYINT_EN_S
 14

	)

298 
	#HOSTCål2_SAMPCLK_SEL_M
 
	`BITFIELD_MASK
(1Ë

	)

299 
	#HOSTCål2_SAMPCLK_SEL_S
 7

	)

301 
	#HOSTCål2_EXEC_TUNING_M
 
	`BITFIELD_MASK
(1Ë

	)

302 
	#HOSTCål2_EXEC_TUNING_S
 6

	)

304 
	#HOSTCål2_DRIVSTRENGTH_SEL_M
 
	`BITFIELD_MASK
(2Ë

	)

305 
	#HOSTCål2_DRIVSTRENGTH_SEL_S
 4

	)

307 
	#HOSTCål2_1_8SIG_EN_M
 
	`BITFIELD_MASK
(1Ë

	)

308 
	#HOSTCål2_1_8SIG_EN_S
 3

	)

310 
	#HOSTCål2_UHSMODE_SEL_M
 
	`BITFIELD_MASK
(3Ë

	)

311 
	#HOSTCål2_UHSMODE_SEL_S
 0

	)

313 
	#HOST_CONTR_VER_2
 (1)

	)

314 
	#HOST_CONTR_VER_3
 (2)

	)

317 
	#SD1_MODE
 0x1

	)

318 
	#SD4_MODE
 0x2

	)

321 
	#PWR_BUS_EN_M
 
	`BITFIELD_MASK
(1Ë

	)

322 
	#PWR_BUS_EN_S
 0

	)

323 
	#PWR_VOLTS_M
 
	`BITFIELD_MASK
(3Ë

	)

324 
	#PWR_VOLTS_S
 1

	)

327 
	#SW_RESET_ALL_M
 
	`BITFIELD_MASK
(1Ë

	)

328 
	#SW_RESET_ALL_S
 0

	)

329 
	#SW_RESET_CMD_M
 
	`BITFIELD_MASK
(1Ë

	)

330 
	#SW_RESET_CMD_S
 1

	)

331 
	#SW_RESET_DAT_M
 
	`BITFIELD_MASK
(1Ë

	)

332 
	#SW_RESET_DAT_S
 2

	)

336 
	#INTSTAT_CMD_COMPLETE_M
 
	`BITFIELD_MASK
(1Ë

	)

337 
	#INTSTAT_CMD_COMPLETE_S
 0

	)

338 
	#INTSTAT_XFER_COMPLETE_M
 
	`BITFIELD_MASK
(1)

	)

339 
	#INTSTAT_XFER_COMPLETE_S
 1

	)

340 
	#INTSTAT_BLOCK_GAP_EVENT_M
 
	`BITFIELD_MASK
(1)

	)

341 
	#INTSTAT_BLOCK_GAP_EVENT_S
 2

	)

342 
	#INTSTAT_DMA_INT_M
 
	`BITFIELD_MASK
(1)

	)

343 
	#INTSTAT_DMA_INT_S
 3

	)

344 
	#INTSTAT_BUF_WRITE_READY_M
 
	`BITFIELD_MASK
(1)

	)

345 
	#INTSTAT_BUF_WRITE_READY_S
 4

	)

346 
	#INTSTAT_BUF_READ_READY_M
 
	`BITFIELD_MASK
(1)

	)

347 
	#INTSTAT_BUF_READ_READY_S
 5

	)

348 
	#INTSTAT_CARD_INSERTION_M
 
	`BITFIELD_MASK
(1)

	)

349 
	#INTSTAT_CARD_INSERTION_S
 6

	)

350 
	#INTSTAT_CARD_REMOVAL_M
 
	`BITFIELD_MASK
(1)

	)

351 
	#INTSTAT_CARD_REMOVAL_S
 7

	)

352 
	#INTSTAT_CARD_INT_M
 
	`BITFIELD_MASK
(1)

	)

353 
	#INTSTAT_CARD_INT_S
 8

	)

354 
	#INTSTAT_RETUNING_INT_M
 
	`BITFIELD_MASK
(1Ë

	)

355 
	#INTSTAT_RETUNING_INT_S
 12

	)

356 
	#INTSTAT_ERROR_INT_M
 
	`BITFIELD_MASK
(1Ë

	)

357 
	#INTSTAT_ERROR_INT_S
 15

	)

361 
	#ERRINT_CMD_TIMEOUT_M
 
	`BITFIELD_MASK
(1)

	)

362 
	#ERRINT_CMD_TIMEOUT_S
 0

	)

363 
	#ERRINT_CMD_CRC_M
 
	`BITFIELD_MASK
(1)

	)

364 
	#ERRINT_CMD_CRC_S
 1

	)

365 
	#ERRINT_CMD_ENDBIT_M
 
	`BITFIELD_MASK
(1)

	)

366 
	#ERRINT_CMD_ENDBIT_S
 2

	)

367 
	#ERRINT_CMD_INDEX_M
 
	`BITFIELD_MASK
(1)

	)

368 
	#ERRINT_CMD_INDEX_S
 3

	)

369 
	#ERRINT_DATA_TIMEOUT_M
 
	`BITFIELD_MASK
(1)

	)

370 
	#ERRINT_DATA_TIMEOUT_S
 4

	)

371 
	#ERRINT_DATA_CRC_M
 
	`BITFIELD_MASK
(1)

	)

372 
	#ERRINT_DATA_CRC_S
 5

	)

373 
	#ERRINT_DATA_ENDBIT_M
 
	`BITFIELD_MASK
(1)

	)

374 
	#ERRINT_DATA_ENDBIT_S
 6

	)

375 
	#ERRINT_CURRENT_LIMIT_M
 
	`BITFIELD_MASK
(1)

	)

376 
	#ERRINT_CURRENT_LIMIT_S
 7

	)

377 
	#ERRINT_AUTO_CMD12_M
 
	`BITFIELD_MASK
(1)

	)

378 
	#ERRINT_AUTO_CMD12_S
 8

	)

379 
	#ERRINT_VENDOR_M
 
	`BITFIELD_MASK
(4)

	)

380 
	#ERRINT_VENDOR_S
 12

	)

381 
	#ERRINT_ADMA_M
 
	`BITFIELD_MASK
(1)

	)

382 
	#ERRINT_ADMA_S
 9

	)

385 
	#ERRINT_CMD_TIMEOUT_BIT
 0x0001

	)

386 
	#ERRINT_CMD_CRC_BIT
 0x0002

	)

387 
	#ERRINT_CMD_ENDBIT_BIT
 0x0004

	)

388 
	#ERRINT_CMD_INDEX_BIT
 0x0008

	)

389 
	#ERRINT_DATA_TIMEOUT_BIT
 0x0010

	)

390 
	#ERRINT_DATA_CRC_BIT
 0x0020

	)

391 
	#ERRINT_DATA_ENDBIT_BIT
 0x0040

	)

392 
	#ERRINT_CURRENT_LIMIT_BIT
 0x0080

	)

393 
	#ERRINT_AUTO_CMD12_BIT
 0x0100

	)

394 
	#ERRINT_ADMA_BIT
 0x0200

	)

397 
	#ERRINT_CMD_ERRS
 (
ERRINT_CMD_TIMEOUT_BIT
 | 
ERRINT_CMD_CRC_BIT
 |\

398 
ERRINT_CMD_ENDBIT_BIT
 | 
ERRINT_CMD_INDEX_BIT
)

	)

399 
	#ERRINT_DATA_ERRS
 (
ERRINT_DATA_TIMEOUT_BIT
 | 
ERRINT_DATA_CRC_BIT
 |\

400 
ERRINT_DATA_ENDBIT_BIT
 | 
ERRINT_ADMA_BIT
)

	)

401 
	#ERRINT_TRANSFER_ERRS
 (
ERRINT_CMD_ERRS
 | 
ERRINT_DATA_ERRS
)

	)

420 
	#SDIOH_SDMA_MODE
 0

	)

421 
	#SDIOH_ADMA1_MODE
 1

	)

422 
	#SDIOH_ADMA2_MODE
 2

	)

423 
	#SDIOH_ADMA2_64_MODE
 3

	)

425 
	#ADMA2_ATTRIBUTE_VALID
 (1 << 0Ë

	)

426 
	#ADMA2_ATTRIBUTE_END
 (1 << 1Ë

	)

427 
	#ADMA2_ATTRIBUTE_INT
 (1 << 2Ë

	)

428 
	#ADMA2_ATTRIBUTE_ACT_NOP
 (0 << 4Ë

	)

429 
	#ADMA2_ATTRIBUTE_ACT_RSV
 (1 << 4Ë

	)

430 
	#ADMA1_ATTRIBUTE_ACT_SET
 (1 << 4Ë

	)

431 
	#ADMA2_ATTRIBUTE_ACT_TRAN
 (2 << 4Ë

	)

432 
	#ADMA2_ATTRIBUTE_ACT_LINK
 (3 << 4Ë

	)

435 
	sadma2_ds¸_32b
 {

436 
uöt32
 
	mÀn_©å
;

437 
uöt32
 
	mphys_addr
;

438 } 
	tadma2_ds¸_32b_t
;

441 
	sadma1_ds¸
 {

442 
uöt32
 
	mphys_addr_©å
;

443 } 
	tadma1_ds¸_t
;

	@include/sdiovar.h

28 #i‚de‡
_sdiov¨_h_


29 
	#_sdiov¨_h_


	)

31 
	~<ty≥defs.h
>

34 
	#BWL_DEFAULT_PACKING


	)

35 
	~<∑cked_£˘i⁄_°¨t.h
>

37 
	ssdªg
 {

38 
	mfunc
;

39 
	moff£t
;

40 
	mvÆue
;

41 } 
	tsdªg_t
;

44 
	#SDH_ERROR_VAL
 0x0001

	)

45 
	#SDH_TRACE_VAL
 0x0002

	)

46 
	#SDH_INFO_VAL
 0x0004

	)

47 
	#SDH_DEBUG_VAL
 0x0008

	)

48 
	#SDH_DATA_VAL
 0x0010

	)

49 
	#SDH_CTRL_VAL
 0x0020

	)

50 
	#SDH_LOG_VAL
 0x0040

	)

51 
	#SDH_DMA_VAL
 0x0080

	)

53 
	#NUM_PREV_TRANSACTIONS
 16

	)

56 
	~<∑cked_£˘i⁄_íd.h
>

	@include/siutils.h

28 #i‚def 
_siutûs_h_


29 
	#_siutûs_h_


	)

35 
	ssi_pub
 {

36 
uöt
 
	msocôy≥
;

38 
uöt
 
	mbu°y≥
;

39 
uöt
 
	mbusc‹ëy≥
;

40 
uöt
 
	mbusc‹îev
;

41 
uöt
 
	mbusc‹eidx
;

42 
	mc¸ev
;

43 
uöt32
 
	mccˇps
;

44 
uöt32
 
	mccˇps_ext
;

45 
	mpmuªv
;

46 
uöt32
 
	mpmuˇps
;

47 
uöt
 
	mbﬂrdty≥
;

48 
uöt
 
	mbﬂrdªv
;

49 
uöt
 
	mbﬂrdvíd‹
;

50 
uöt
 
	mbﬂrdÊags
;

51 
uöt
 
	mbﬂrdÊags2
;

52 
uöt
 
	mchù
;

53 
uöt
 
	mchùªv
;

54 
uöt
 
	mchùpkg
;

55 
uöt32
 
	mchù°
;

56 
boﬁ
 
	missim
;

57 
uöt
 
	msocúev
;

58 
boﬁ
 
	mpci_¥32414
;

65 c⁄° 
	tsi_pub
 
	tsi_t
;

75 
	#SI_OSH
 
NULL


	)

77 
	#BADIDX
 (
SI_MAXCORES
 + 1)

	)

80 
	#XTAL
 0x1

	)

81 
	#PLL
 0x2

	)

84 
	#CLK_FAST
 0

	)

85 
	#CLK_DYNAMIC
 2

	)

88 
	#GPIO_DRV_PRIORITY
 0

	)

89 
	#GPIO_APP_PRIORITY
 1

	)

90 
	#GPIO_HI_PRIORITY
 2

	)

93 
	#GPIO_PULLUP
 0

	)

94 
	#GPIO_PULLDN
 1

	)

97 
	#GPIO_REGEVT
 0

	)

98 
	#GPIO_REGEVT_INTMSK
 1

	)

99 
	#GPIO_REGEVT_INTPOL
 2

	)

102 
	#SI_DEVPATH_BUFSZ
 16

	)

105 
	#SI_DOATTACH
 1

	)

106 
	#SI_PCIDOWN
 2

	)

107 
	#SI_PCIUP
 3

	)

109 
	#ISSIM_ENAB
(
sih
Ë0

	)

112 #i‡
deföed
(
BCMPMUCTL
)

113 
	#PMUCTL_ENAB
(
sih
Ë(
BCMPMUCTL
)

	)

115 
	#PMUCTL_ENAB
(
sih
Ë((sih)->
ccˇps
 & 
CC_CAP_PMU
)

	)

119 #i‡
deföed
(
BCMPMUCTL
) && BCMPMUCTL

120 
	#CCCTL_ENAB
(
sih
Ë(0)

	)

121 
	#CCPLL_ENAB
(
sih
Ë(0)

	)

123 
	#CCCTL_ENAB
(
sih
Ë((sih)->
ccˇps
 & 
CC_CAP_PWR_CTL
)

	)

124 
	#CCPLL_ENAB
(
sih
Ë((sih)->
ccˇps
 & 
CC_CAP_PLL_MASK
)

	)

127 (*
	tgpio_h™dÀr_t
)(
	tuöt32
 
	t°©
, *
	t¨g
);

129 
	#CC_BTCOEX_EN_MASK
 0x01

	)

131 
	#GPIO_CTRL_EPA_EN_MASK
 0x40

	)

133 
	#GPIO_CTRL_5_6_EN_MASK
 0x60

	)

134 
	#GPIO_CTRL_7_6_EN_MASK
 0xC0

	)

135 
	#GPIO_OUT_7_EN_MASK
 0x80

	)

139 
	#SI_CR4_CAP
 (0x04)

	)

140 
	#SI_CR4_BANKIDX
 (0x40)

	)

141 
	#SI_CR4_BANKINFO
 (0x44)

	)

143 
	#ARMCR4_TCBBNB_MASK
 0xf0

	)

144 
	#ARMCR4_TCBBNB_SHIFT
 4

	)

145 
	#ARMCR4_TCBANB_MASK
 0xf

	)

146 
	#ARMCR4_TCBANB_SHIFT
 0

	)

148 
	#SICF_CPUHALT
 (0x0020)

	)

149 
	#ARMCR4_BSZ_MASK
 0x3f

	)

150 
	#ARMCR4_BSZ_MULT
 8192

	)

154 
si_t
 *
	`si_©èch
(
uöt
 
pcidev
, 
o¶_t
 *
osh
, *
ªgs
, uöà
bu°y≥
,

155 *
sdh
, **
v¨s
, 
uöt
 *
v¨sz
);

156 
si_t
 *
	`si_k©èch
(
o¶_t
 *
osh
);

157 
	`si_dëach
(
si_t
 *
sih
);

158 
boﬁ
 
	`si_pci_w¨16165
(
si_t
 *
sih
);

160 
uöt
 
	`si_c‹ñi°
(
si_t
 *
sih
, uöà
c‹eid
[]);

161 
uöt
 
	`si_c‹eid
(
si_t
 *
sih
);

162 
uöt
 
	`si_Êag
(
si_t
 *
sih
);

163 
uöt
 
	`si_ötÊag
(
si_t
 *
sih
);

164 
uöt
 
	`si_c‹eidx
(
si_t
 *
sih
);

165 
uöt
 
	`si_c‹eunô
(
si_t
 *
sih
);

166 
uöt
 
	`si_c‹evíd‹
(
si_t
 *
sih
);

167 
uöt
 
	`si_c‹îev
(
si_t
 *
sih
);

168 *
	`si_osh
(
si_t
 *
sih
);

169 
	`si_£tosh
(
si_t
 *
sih
, 
o¶_t
 *
osh
);

170 
uöt
 
	`si_c‹îeg
(
si_t
 *
sih
, uöà
c‹eidx
, uöà
ªgoff
, uöà
mask
, uöà
vÆ
);

171 *
	`si_c‹îegs
(
si_t
 *
sih
);

172 
uöt
 
	`si_wøµîªg
(
si_t
 *
sih
, 
uöt32
 
off£t
, uöt32 
mask
, uöt32 
vÆ
);

173 
uöt32
 
	`si_c‹e_cÊags
(
si_t
 *
sih
, uöt32 
mask
, uöt32 
vÆ
);

174 
	`si_c‹e_cÊags_wo
(
si_t
 *
sih
, 
uöt32
 
mask
, uöt32 
vÆ
);

175 
uöt32
 
	`si_c‹e_sÊags
(
si_t
 *
sih
, uöt32 
mask
, uöt32 
vÆ
);

176 
boﬁ
 
	`si_isc‹eup
(
si_t
 *
sih
);

177 
uöt
 
	`si_födc‹eidx
(
si_t
 *
sih
, uöà
c‹eid
, uöà
c‹eunô
);

178 *
	`si_£tc‹eidx
(
si_t
 *
sih
, 
uöt
 
c‹eidx
);

179 *
	`si_£tc‹e
(
si_t
 *
sih
, 
uöt
 
c‹eid
, uöà
c‹eunô
);

180 *
	`si_swôch_c‹e
(
si_t
 *
sih
, 
uöt
 
c‹eid
, uöà*
‹igidx
, uöà*
öå_vÆ
);

181 
	`si_ª°‹e_c‹e
(
si_t
 *
sih
, 
uöt
 
c‹eid
, uöà
öå_vÆ
);

182 
	`si_numaddr•a˚s
(
si_t
 *
sih
);

183 
uöt32
 
	`si_addr•a˚
(
si_t
 *
sih
, 
uöt
 
asidx
);

184 
uöt32
 
	`si_addr•a˚size
(
si_t
 *
sih
, 
uöt
 
asidx
);

185 
	`si_c‹óddr•a˚X
(
si_t
 *
sih
, 
uöt
 
asidx
, 
uöt32
 *
addr
, uöt32 *
size
);

186 
	`si_c‹ebi°
(
si_t
 *
sih
);

187 
	`si_c‹e_ª£t
(
si_t
 *
sih
, 
uöt32
 
bôs
, uöt32 
ª£tbôs
);

188 
	`si_c‹e_dißbÀ
(
si_t
 *
sih
, 
uöt32
 
bôs
);

189 
uöt32
 
	`si_˛ock_øã
(uöt32 
∂l_ty≥
, uöt32 
n
, uöt32 
m
);

190 
boﬁ
 
	`si_ªad_pmu_aut›Œ
(
si_t
 *
sih
);

191 
uöt32
 
	`si_˛ock
(
si_t
 *
sih
);

192 
uöt32
 
	`si_Æp_˛ock
(
si_t
 *
sih
);

193 
uöt32
 
	`si_ûp_˛ock
(
si_t
 *
sih
);

194 
	`si_pci_£tup
(
si_t
 *
sih
, 
uöt
 
c‹emask
);

195 
	`si_pcmcü_öô
(
si_t
 *
sih
);

196 
	`si_£töt
(
si_t
 *
sih
, 
siÊag
);

197 
boﬁ
 
	`si_back∂™e64
(
si_t
 *
sih
);

198 
	`si_ªgi°î_öå_ˇŒback
(
si_t
 *
sih
, *
öåsoff_‚
, *
öå§e°‹e_‚
,

199 *
öå£«bÀd_‚
, *
öå_¨g
);

200 
	`si_dîegi°î_öå_ˇŒback
(
si_t
 *
sih
);

201 
	`si_˛k˘l_öô
(
si_t
 *
sih
);

202 
uöt16
 
	`si_˛k˘l_Á°_pwrup_dñay
(
si_t
 *
sih
);

203 
boﬁ
 
	`si_˛k˘l_cc
(
si_t
 *
sih
, 
uöt
 
mode
);

204 
	`si_˛k˘l_xèl
(
si_t
 *
sih
, 
uöt
 
wh©
, 
boﬁ
 
⁄
);

205 
uöt32
 
	`si_gpiŸimîvÆ
(
si_t
 *
sih
, uöt32 
mask
, uöt32 
vÆ
);

206 
	`si_btcgpiow¨
(
si_t
 *
sih
);

207 
boﬁ
 
	`si_devi˚ªmoved
(
si_t
 *
sih
);

208 
uöt32
 
	`si_so¸am_size
(
si_t
 *
sih
);

209 
uöt32
 
	`si_socdevøm_size
(
si_t
 *
sih
);

210 
uöt32
 
	`si_so¸am_§mem_size
(
si_t
 *
sih
);

211 
	`si_socdevøm
(
si_t
 *
sih
, 
boﬁ
 
£t
, 
uöt8
 *
í«bÀ
, uöt8 *
¥Ÿe˘
, uöt8 *
ªm≠
);

212 
boﬁ
 
	`si_socdevøm_pkg
(
si_t
 *
sih
);

213 
boﬁ
 
	`si_socdevøm_ªm≠_i£nb
(
si_t
 *
sih
);

214 
uöt32
 
	`si_socdevøm_ªm≠_size
(
si_t
 *
sih
);

216 
	`si_w©chdog
(
si_t
 *
sih
, 
uöt
 
ticks
);

217 
	`si_w©chdog_ms
(
si_t
 *
sih
, 
uöt32
 
ms
);

218 
uöt32
 
	`si_w©chdog_m°icks
();

219 *
	`si_gpio£tc‹e
(
si_t
 *
sih
);

220 
uöt32
 
	`si_gpioc⁄åﬁ
(
si_t
 *
sih
, uöt32 
mask
, uöt32 
vÆ
, 
uöt8
 
¥i‹ôy
);

221 
uöt32
 
	`si_gpioouãn
(
si_t
 *
sih
, uöt32 
mask
, uöt32 
vÆ
, 
uöt8
 
¥i‹ôy
);

222 
uöt32
 
	`si_gpioout
(
si_t
 *
sih
, uöt32 
mask
, uöt32 
vÆ
, 
uöt8
 
¥i‹ôy
);

223 
uöt32
 
	`si_gpioö
(
si_t
 *
sih
);

224 
uöt32
 
	`si_gpioöçﬁ¨ôy
(
si_t
 *
sih
, uöt32 
mask
, uöt32 
vÆ
, 
uöt8
 
¥i‹ôy
);

225 
uöt32
 
	`si_gpioötmask
(
si_t
 *
sih
, uöt32 
mask
, uöt32 
vÆ
, 
uöt8
 
¥i‹ôy
);

226 
uöt32
 
	`si_gpiﬁed
(
si_t
 *
sih
, uöt32 
mask
, uöt32 
vÆ
);

227 
uöt32
 
	`si_gpi‹e£rve
(
si_t
 *
sih
, uöt32 
gpio_num
, 
uöt8
 
¥i‹ôy
);

228 
uöt32
 
	`si_gpi‹ñó£
(
si_t
 *
sih
, uöt32 
gpio_num
, 
uöt8
 
¥i‹ôy
);

229 
uöt32
 
	`si_gpi›uŒ
(
si_t
 *
sih
, 
boﬁ
 
updown
, uöt32 
mask
, uöt32 
vÆ
);

230 
uöt32
 
	`si_gpi€vít
(
si_t
 *
sih
, 
uöt
 
ªgty≥
, uöt32 
mask
, uöt32 
vÆ
);

231 
uöt32
 
	`si_gpio_öt_íabÀ
(
si_t
 *
sih
, 
boﬁ
 
íabÀ
);

234 *
	`si_gpio_h™dÀr_ªgi°î
(
si_t
 *
sih
, 
uöt32
 
e
, 
boﬁ
 
Àv
, 
gpio_h™dÀr_t
 
cb
, *
¨g
);

235 
	`si_gpio_h™dÀr_uƒegi°î
(
si_t
 *
sih
, * 
gpioh
);

236 
	`si_gpio_h™dÀr_¥o˚ss
(
si_t
 *
sih
);

239 
boﬁ
 
	`si_pci_pmeˇp
(
si_t
 *
sih
);

240 
o¶_öfo
;

241 
boﬁ
 
	`si_pci_Á°pmeˇp
(
o¶_öfo
 *
osh
);

242 
boﬁ
 
	`si_pci_pme°©
(
si_t
 *
sih
);

243 
	`si_pci_pme˛r
(
si_t
 *
sih
);

244 
	`si_pci_pmìn
(
si_t
 *
sih
);

245 
	`si_pci_pme°©˛r
(
si_t
 *
sih
);

246 
uöt
 
	`si_pcõ_ªadªg
(*
sih
, uöà
addπy≥
, uöà
off£t
);

248 
	`si_sdio_öô
(
si_t
 *
sih
);

250 
uöt16
 
	`si_d11_devid
(
si_t
 *
sih
);

251 
	`si_c‹ïciid
(
si_t
 *
sih
, 
uöt
 
func
, 
uöt16
 *
pcivíd‹
, uöt16 *
pcidevi˚
,

252 
uöt8
 *
pci˛ass
, uöt8 *
pcisub˛ass
, uöt8 *
pcùrogif
, uöt8 *
pcihódî
);

254 
	#si_eci
(
sih
Ë0

	)

255 
INLINE
 * 
	$si_eci_öô
(
si_t
 *
sih
Ë{ 
NULL
;
	}
}

256 
	#si_eci_nŸify_bt
(
sih
, 
ty≥
, 
vÆ
Ë(0)

	)

257 
	#si_£ci
(
sih
Ë0

	)

258 
	#si_£ci_upd
(
sih
, 
a
Ëdÿ{} 0)

	)

259 
INLINE
 * 
	$si_£ci_öô
(
si_t
 *
sih
, 
uöt8
 
u£_£ci
Ë{ 
NULL
;
	}
}

260 
	#si_£ci_down
(
sih
Ëdÿ{} 0)

	)

263 
boﬁ
 
si_is_Ÿp_dißbÀd
(
si_t
 *
sih
);

264 
boﬁ
 
si_is_Ÿp_powîed
(
si_t
 *
sih
);

265 
si_Ÿp_powî
(
si_t
 *
sih
, 
boﬁ
 
⁄
);

268 
boﬁ
 
si_is_•rom_avaûabÀ
(
si_t
 *
sih
);

269 
boﬁ
 
si_is_•rom_íabÀd
(
si_t
 *
sih
);

270 
si_•rom_íabÀ
(
si_t
 *
sih
, 
boﬁ
 
íabÀ
);

273 
si_cis_sour˚
(
si_t
 *
sih
);

274 
	#CIS_DEFAULT
 0

	)

275 
	#CIS_SROM
 1

	)

276 
	#CIS_OTP
 2

	)

279 
	#DEFAULT_FAB
 0x0

	)

280 
	#CSM_FAB7
 0x1

	)

281 
	#TSMC_FAB12
 0x2

	)

282 
	#SMIC_FAB4
 0x3

	)

283 
si_Ÿp_Ábid
(
si_t
 *
sih
, 
uöt16
 *
Ábid
, 
boﬁ
 
rw
);

284 
uöt16
 
si_Ábid
(
si_t
 *
sih
);

291 
si_dev∑th
(
si_t
 *
sih
, *
∑th
, 
size
);

293 *
si_gëdev∑thv¨
(
si_t
 *
sih
, c⁄° *
«me
);

294 
si_gëdev∑thötv¨
(
si_t
 *
sih
, c⁄° *
«me
);

295 *
si_coded_dev∑thv¨
(
si_t
 *
sih
, *
v¨«me
, 
v¨_Àn
, c⁄° *
«me
);

298 
uöt8
 
si_pcõ˛kªq
(
si_t
 *
sih
, 
uöt32
 
mask
, uöt32 
vÆ
);

299 
uöt32
 
si_pcõl¸eg
(
si_t
 *
sih
, uöt32 
mask
, uöt32 
vÆ
);

300 
si_w¨42780_˛kªq
(
si_t
 *
sih
, 
boﬁ
 
˛kªq
);

301 
si_pci_down
(
si_t
 *
sih
);

302 
si_pci_up
(
si_t
 *
sih
);

303 
si_pci_¶ìp
(
si_t
 *
sih
);

304 
si_pcõ_w¨_ovr_upd©e
(
si_t
 *
sih
, 
uöt8
 
a•m
);

305 
si_pcõ_powî_ßve_íabÀ
(
si_t
 *
sih
, 
boﬁ
 
íabÀ
);

306 
si_pcõ_exãndL1timî
(
si_t
 *
sih
, 
boﬁ
 
exãnd
);

307 
si_pci_fixcfg
(
si_t
 *
sih
);

308 
si_chùpkg_£t
(
si_t
 *
sih
, 
uöt
);

310 
si_chùc⁄ål_btshd0_4331
(
si_t
 *
sih
, 
boﬁ
 
⁄
);

311 
si_chùc⁄ål_ª°‹e
(
si_t
 *
sih
, 
uöt32
 
vÆ
);

312 
uöt32
 
si_chùc⁄ål_ªad
(
si_t
 *
sih
);

313 
si_chùc⁄ål_ïa4331
(
si_t
 *
sih
, 
boﬁ
 
⁄
);

314 
si_chùc⁄ål_ïa4331_wowl
(
si_t
 *
sih
, 
boﬁ
 
íãr_wowl
);

315 
si_chùc⁄ål_§om4360
(
si_t
 *
sih
, 
boﬁ
 
⁄
);

317 
si_ïa_4313w¨
(
si_t
 *
sih
);

318 
si_btc_íabÀ_chùc⁄åﬁ
(
si_t
 *
sih
);

320 
si_btcombo_p250_4313_w¨
(
si_t
 *
sih
);

321 
si_btcombo_43228_w¨
(
si_t
 *
sih
);

322 
si_˛k_pmu_hèvaû_£t
(
si_t
 *
sih
, 
boﬁ
 
£t_˛ór
);

323 
uöt
 
si_∂l_ª£t
(
si_t
 *
sih
);

326 
boﬁ
 
si_è˛ór
(
si_t
 *
sih
, boﬁ 
dëaûs
);

330 
uöt32
 
si_pcõªg
(
si_t
 *
sih
, uöt32 
off£t
, uöt32 
mask
, uöt32 
vÆ
, 
uöt
 
ty≥
);

331 
uöt32
 
si_pcõ£rde§eg
(
si_t
 *
sih
, uöt32 
mdio¶ave
, uöt32 
off£t
, uöt32 
mask
, uöt32 
vÆ
);

332 
si_pcõ_£t_ªque°_size
(
si_t
 *
sih
, 
uöt16
 
size
);

333 
uöt16
 
si_pcõ_gë_ªque°_size
(
si_t
 *
sih
);

334 
uöt16
 
si_pcõ_gë_ssid
(
si_t
 *
sih
);

335 
uöt32
 
si_pcõ_gë_b¨0
(
si_t
 *
sih
);

336 
si_pcõ_c⁄fig•a˚_ˇche
(
si_t
 *
sih
);

337 
si_pcõ_c⁄fig•a˚_ª°‹e
(
si_t
 *
sih
);

338 
si_pcõ_c⁄fig•a˚_gë
(
si_t
 *
sih
, 
uöt8
 *
buf
, 
uöt
 
size
);

340 *
si_gënvømÊv¨
(
si_t
 *
sih
, c⁄° *
«me
);

343 
uöt32
 
si_tcm_size
(
si_t
 *
sih
);

345 
si_£t_§om˘l
(
si_t
 *
sih
, 
uöt32
 
vÆue
);

346 
uöt32
 
si_gë_§om˘l
(
si_t
 *
sih
);

	@include/trxhdr.h

27 #i‚de‡
_TRX_HDR_H


28 
	#_TRX_HDR_H


	)

30 
	~<ty≥defs.h
>

32 
	#TRX_MAGIC
 0x30524448

	)

33 
	#TRX_VERSION
 1

	)

34 
	#TRX_MAX_LEN
 0x3B0000

	)

35 
	#TRX_NO_HEADER
 1

	)

36 
	#TRX_GZ_FILES
 0x2

	)

37 
	#TRX_EMBED_UCODE
 0x8

	)

38 
	#TRX_ROMSIM_IMAGE
 0x10

	)

39 
	#TRX_UNCOMP_IMAGE
 0x20

	)

40 
	#TRX_MAX_OFFSET
 3

	)

42 
	såx_hódî
 {

43 
uöt32
 
	mmagic
;

44 
uöt32
 
	mÀn
;

45 
uöt32
 
	m¸c32
;

46 
uöt32
 
	mÊag_vîsi⁄
;

47 
uöt32
 
	moff£ts
[
TRX_MAX_OFFSET
];

51 
åx_hódî
 
	tTRXHDR
, *
	tPTRXHDR
;

	@include/typedefs.h

24 #i‚de‡
_TYPEDEFS_H_


25 
	#_TYPEDEFS_H_


	)

27 #ifde‡
SITE_TYPEDEFS


43 
	~"sôe_ty≥defs.h
"

53 #ifde‡
__˝lu•lus


55 
	#TYPEDEF_BOOL


	)

56 #i‚de‡
FALSE


57 
	#FALSE
 
Ál£


	)

59 #i‚de‡
TRUE


60 
	#TRUE
 
åue


	)

68 #i‡
deföed
(
__x86_64__
)

69 
	#TYPEDEF_UINTPTR


	)

70 
	tuöçå
;

77 #i‡
deföed
(
_NEED_SIZE_T_
)

78 
	tsize_t
;

84 #i‡
deföed
(
__•¨c__
)

85 
	#TYPEDEF_ULONG


	)

96 #i‡!
deföed
(
LINUX_HYBRID
Ë|| deföed(
LINUX_PORT
)

97 
	#TYPEDEF_UINT


	)

98 #i‚de‡
TARGETENV_™droid


99 
	#TYPEDEF_USHORT


	)

100 
	#TYPEDEF_ULONG


	)

102 #ifde‡
__KERNEL__


103 
	~<löux/vîsi⁄.h
>

104 #i‡(
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 19))

105 
	#TYPEDEF_BOOL


	)

108 #i‡(
LINUX_VERSION_CODE
 =
KERNEL_VERSION
(2, 6, 18))

109 
	~<löux/compûî.h
>

110 #ifde‡
noölöe_f‹_°ack


111 
	#TYPEDEF_BOOL


	)

121 #i‡
deföed
(
__GNUC__
Ë&& deföed(
__STRICT_ANSI__
)

122 
	#TYPEDEF_INT64


	)

123 
	#TYPEDEF_UINT64


	)

129 #i‡
deföed
(
__ICL
)

131 
	#TYPEDEF_INT64


	)

133 #i‡
deföed
(
__STDC__
)

134 
	#TYPEDEF_UINT64


	)

139 #i‡!
deföed
(
__DJGPP__
)

142 #i‡
deföed
(
__KERNEL__
)

145 #i‡!
deföed
(
LINUX_HYBRID
Ë|| deföed(
LINUX_PORT
)

146 
	~<löux/ty≥s.h
>

152 
	~<sys/ty≥s.h
>

161 
	#USE_TYPEDEF_DEFAULTS


	)

170 #ifde‡
USE_TYPEDEF_DEFAULTS


171 #unde‡
USE_TYPEDEF_DEFAULTS


173 #i‚de‡
TYPEDEF_BOOL


174 
	tboﬁ
;

179 #i‚de‡
TYPEDEF_UCHAR


180 
	tuch¨
;

183 #i‚de‡
TYPEDEF_USHORT


184 
	tush‹t
;

187 #i‚de‡
TYPEDEF_UINT


188 
	tuöt
;

191 #i‚de‡
TYPEDEF_ULONG


192 
	tul⁄g
;

197 #i‚de‡
TYPEDEF_UINT8


198 
	tuöt8
;

201 #i‚de‡
TYPEDEF_UINT16


202 
	tuöt16
;

205 #i‚de‡
TYPEDEF_UINT32


206 
	tuöt32
;

209 #i‚de‡
TYPEDEF_UINT64


210 
	tuöt64
;

213 #i‚de‡
TYPEDEF_UINTPTR


214 
	tuöçå
;

217 #i‚de‡
TYPEDEF_INT8


218 sig√d 
	töt8
;

221 #i‚de‡
TYPEDEF_INT16


222 sig√d 
	töt16
;

225 #i‚de‡
TYPEDEF_INT32


226 sig√d 
	töt32
;

229 #i‚de‡
TYPEDEF_INT64


230 sig√d 
	töt64
;

235 #i‚de‡
TYPEDEF_FLOAT32


236 
	tÊﬂt32
;

239 #i‚de‡
TYPEDEF_FLOAT64


240 
	tÊﬂt64
;

249 #i‚de‡
TYPEDEF_FLOAT_T


251 #i‡
deföed
(
FLOAT32
)

252 
Êﬂt32
 
	tÊﬂt_t
;

254 
Êﬂt64
 
	tÊﬂt_t
;

261 #i‚de‡
FALSE


262 
	#FALSE
 0

	)

265 #i‚de‡
TRUE


266 
	#TRUE
 1

	)

269 #i‚de‡
NULL


270 
	#NULL
 0

	)

273 #i‚de‡
OFF


274 
	#OFF
 0

	)

277 #i‚de‡
ON


278 
	#ON
 1

	)

281 
	#AUTO
 (-1Ë

	)

285 #i‚de‡
PTRSZ


286 
	#PTRSZ
 (*)

	)

291 #i‡
deföed
(
__GNUC__
Ë|| deföed(
__löt
)

292 
	#BWL_COMPILER_GNU


	)

293 #ñi‡
deföed
(
__CC_ARM
) && __CC_ARM

294 
	#BWL_COMPILER_ARMCC


	)

300 #i‚de‡
INLINE


301 #i‡
deföed
(
BWL_COMPILER_MICROSOFT
)

302 
	#INLINE
 
__ölöe


	)

303 #ñi‡
deföed
(
BWL_COMPILER_GNU
)

304 
	#INLINE
 
__ölöe__


	)

305 #ñi‡
deföed
(
BWL_COMPILER_ARMCC
)

306 
	#INLINE
 
__ölöe


	)

308 
	#INLINE


	)

312 #unde‡
TYPEDEF_BOOL


313 #unde‡
TYPEDEF_UCHAR


314 #unde‡
TYPEDEF_USHORT


315 #unde‡
TYPEDEF_UINT


316 #unde‡
TYPEDEF_ULONG


317 #unde‡
TYPEDEF_UINT8


318 #unde‡
TYPEDEF_UINT16


319 #unde‡
TYPEDEF_UINT32


320 #unde‡
TYPEDEF_UINT64


321 #unde‡
TYPEDEF_UINTPTR


322 #unde‡
TYPEDEF_INT8


323 #unde‡
TYPEDEF_INT16


324 #unde‡
TYPEDEF_INT32


325 #unde‡
TYPEDEF_INT64


326 #unde‡
TYPEDEF_FLOAT32


327 #unde‡
TYPEDEF_FLOAT64


328 #unde‡
TYPEDEF_FLOAT_T


333 
	#UNUSED_PARAMETER
(
x
Ë()(x)

	)

336 
	#DISCARD_QUAL
(
±r
, 
ty≥
Ë(—y≥ *)(
uöçå
)’å))

	)

342 
	~<bcmdefs.h
>

	@include/usbrdl.h

15 #i‚de‡
_USB_RDL_H


16 
	#_USB_RDL_H


	)

19 
	#DL_GETSTATE
 0

	)

20 
	#DL_CHECK_CRC
 1

	)

21 
	#DL_GO
 2

	)

22 
	#DL_START
 3

	)

23 
	#DL_REBOOT
 4

	)

24 
	#DL_GETVER
 5

	)

25 
	#DL_GO_PROTECTED
 6

	)

26 
	#DL_EXEC
 7

	)

27 
	#DL_RESETCFG
 8

	)

28 
	#DL_DEFER_RESP_OK
 9

	)

30 
	#DL_HWCMD_MASK
 0xfc

	)

31 
	#DL_RDHW
 0x10

	)

32 
	#DL_RDHW32
 0x10

	)

33 
	#DL_RDHW16
 0x11

	)

34 
	#DL_RDHW8
 0x12

	)

35 
	#DL_WRHW
 0x14

	)

36 
	#DL_WRHW_BLK
 0x13

	)

38 
	#DL_CMD_RDHW
 1

	)

39 
	#DL_CMD_WRHW
 2

	)

43 
	#DL_WAITING
 0

	)

44 
	#DL_READY
 1

	)

45 
	#DL_BAD_HDR
 2

	)

46 
	#DL_BAD_CRC
 3

	)

47 
	#DL_RUNNABLE
 4

	)

48 
	#DL_START_FAIL
 5

	)

49 
	#DL_NVRAM_TOOBIG
 6

	)

50 
	#DL_IMAGE_TOOBIG
 7

	)

52 
	#TIMEOUT
 5000

	)

54 
	sbcm_devi˚_id
 {

55 *
	m«me
;

56 
uöt32
 
	mvíd
;

57 
uöt32
 
	m¥od
;

61 
uöt32
 
	m°©e
;

62 
uöt32
 
	mbyãs
;

63 } 
	trdl_°©e_t
;

66 
uöt32
 
	mchù
;

67 
uöt32
 
	mchùªv
;

68 
uöt32
 
	mømsize
;

69 
uöt32
 
	mªm≠ba£
;

70 
uöt32
 
	mbﬂrdty≥
;

71 
uöt32
 
	mbﬂrdªv
;

72 } 
	tboŸrom_id_t
;

76 
uöt32
 
	mcmd
;

77 
uöt32
 
	maddr
;

78 
uöt32
 
	mÀn
;

79 
uöt32
 
	md©a
;

80 } 
	thwacc_t
;

84 
uöt32
 
	mcmd
;

85 
uöt32
 
	maddr
;

86 
uöt32
 
	mÀn
;

87 
uöt8
 
	md©a
[1];

88 } 
	thwacc_blk_t
;

92 
	#QUERY_STRING_MAX
 32

	)

94 
uöt32
 
	mcmd
;

95 
	mv¨
[
QUERY_STRING_MAX
];

96 } 
	tnv∑øm_t
;

98 (*
	texec_‚_t
)(*
	tsih
);

100 
	#USB_CTRL_IN
 (
USB_TYPE_VENDOR
 | 0x80 | 
USB_RECIP_INTERFACE
)

	)

101 
	#USB_CTRL_OUT
 (
USB_TYPE_VENDOR
 | 0 | 
USB_RECIP_INTERFACE
)

	)

103 
	#USB_CTRL_EP_TIMEOUT
 500

	)

105 
	#RDL_CHUNK
 1500

	)

108 
	#TRX_OFFSETS_DLFWLEN_IDX
 0

	)

109 
	#TRX_OFFSETS_JUMPTO_IDX
 1

	)

110 
	#TRX_OFFSETS_NVM_LEN_IDX
 2

	)

112 
	#TRX_OFFSETS_DLBASE_IDX
 0

	)

	@include/wlfc_proto.h

24 #i‚de‡
__wlfc_¥Ÿo_deföôi⁄s_h__


25 
	#__wlfc_¥Ÿo_deföôi⁄s_h__


	)

77 
	#WLFC_CTL_TYPE_MAC_OPEN
 1

	)

78 
	#WLFC_CTL_TYPE_MAC_CLOSE
 2

	)

79 
	#WLFC_CTL_TYPE_MAC_REQUEST_CREDIT
 3

	)

80 
	#WLFC_CTL_TYPE_TXSTATUS
 4

	)

81 
	#WLFC_CTL_TYPE_PKTTAG
 5

	)

83 
	#WLFC_CTL_TYPE_MACDESC_ADD
 6

	)

84 
	#WLFC_CTL_TYPE_MACDESC_DEL
 7

	)

85 
	#WLFC_CTL_TYPE_RSSI
 8

	)

87 
	#WLFC_CTL_TYPE_INTERFACE_OPEN
 9

	)

88 
	#WLFC_CTL_TYPE_INTERFACE_CLOSE
 10

	)

90 
	#WLFC_CTL_TYPE_FIFO_CREDITBACK
 11

	)

92 
	#WLFC_CTL_TYPE_PENDING_TRAFFIC_BMP
 12

	)

93 
	#WLFC_CTL_TYPE_MAC_REQUEST_PACKET
 13

	)

94 
	#WLFC_CTL_TYPE_HOST_REORDER_RXPKTS
 14

	)

96 
	#WLFC_CTL_TYPE_NIC_PRD_START
 15

	)

97 
	#WLFC_CTL_TYPE_NIC_PRD_END
 16

	)

98 
	#WLFC_CTL_TYPE_AF_TXS
 17

	)

99 
	#WLFC_CTL_TYPE_TRANS_ID
 18

	)

100 
	#WLFC_CTL_TYPE_COMP_TXSTATUS
 19

	)

102 
	#WLFC_CTL_TYPE_FILLER
 255

	)

104 
	#WLFC_CTL_VALUE_LEN_MACDESC
 8

	)

106 
	#WLFC_CTL_VALUE_LEN_MAC
 1

	)

107 
	#WLFC_CTL_VALUE_LEN_RSSI
 1

	)

109 
	#WLFC_CTL_VALUE_LEN_INTERFACE
 1

	)

110 
	#WLFC_CTL_VALUE_LEN_PENDING_TRAFFIC_BMP
 2

	)

112 
	#WLFC_CTL_VALUE_LEN_TXSTATUS
 4

	)

113 
	#WLFC_CTL_VALUE_LEN_PKTTAG
 4

	)

116 
	#WLFC_CTL_VALUE_LEN_FIFO_CREDITBACK
 6

	)

118 
	#WLFC_CTL_VALUE_LEN_REQUEST_CREDIT
 3

	)

119 
	#WLFC_CTL_VALUE_LEN_REQUEST_PACKET
 3

	)

121 
	#WLFC_CTL_VALUE_LEN_NIC_PRD_START
 1

	)

122 
	#WLFC_CTL_VALUE_LEN_NIC_PRD_END
 1

	)

123 
	#WLFC_CTL_VALUE_LEN_AF_TXS
 3

	)

126 
	#WLFC_PKTID_GEN_MASK
 0x80000000

	)

127 
	#WLFC_PKTID_GEN_SHIFT
 31

	)

129 
	#WLFC_PKTID_GEN
(
x
Ë(((xË& 
WLFC_PKTID_GEN_MASK
Ë>> 
WLFC_PKTID_GEN_SHIFT
)

	)

130 
	#WLFC_PKTID_SETGEN
(
x
, 
gí
Ë(xË((xË& ~
WLFC_PKTID_GEN_MASK
) | \

131 (((
gí
Ë<< 
WLFC_PKTID_GEN_SHIFT
Ë& 
WLFC_PKTID_GEN_MASK
)

	)

133 
	#WLFC_PKTFLAG_PKTFROMHOST
 0x01

	)

134 
	#WLFC_PKTFLAG_PKT_REQUESTED
 0x02

	)

136 
	#WL_TXSTATUS_FLAGS_MASK
 0x‡

	)

137 
	#WL_TXSTATUS_FLAGS_SHIFT
 27

	)

139 
	#WL_TXSTATUS_SET_FLAGS
(
x
, 
Êags
) ((x) = \

140 ((
x
Ë& ~(
WL_TXSTATUS_FLAGS_MASK
 << 
WL_TXSTATUS_FLAGS_SHIFT
)) | \

141 (((
Êags
Ë& 
WL_TXSTATUS_FLAGS_MASK
Ë<< 
WL_TXSTATUS_FLAGS_SHIFT
))

	)

142 
	#WL_TXSTATUS_GET_FLAGS
(
x
Ë(((xË>> 
WL_TXSTATUS_FLAGS_SHIFT
) & \

143 
WL_TXSTATUS_FLAGS_MASK
)

	)

145 
	#WL_TXSTATUS_FIFO_MASK
 0x7

	)

146 
	#WL_TXSTATUS_FIFO_SHIFT
 24

	)

148 
	#WL_TXSTATUS_SET_FIFO
(
x
, 
Êags
) ((x) = \

149 ((
x
Ë& ~(
WL_TXSTATUS_FIFO_MASK
 << 
WL_TXSTATUS_FIFO_SHIFT
)) | \

150 (((
Êags
Ë& 
WL_TXSTATUS_FIFO_MASK
Ë<< 
WL_TXSTATUS_FIFO_SHIFT
))

	)

151 
	#WL_TXSTATUS_GET_FIFO
(
x
Ë(((xË>> 
WL_TXSTATUS_FIFO_SHIFT
Ë& 
WL_TXSTATUS_FIFO_MASK
)

	)

153 
	#WL_TXSTATUS_PKTID_MASK
 0xfffff‡

	)

154 
	#WL_TXSTATUS_SET_PKTID
(
x
, 
num
) ((x) = \

155 ((
x
Ë& ~
WL_TXSTATUS_PKTID_MASK
Ë| (
num
))

	)

156 
	#WL_TXSTATUS_GET_PKTID
(
x
Ë((xË& 
WL_TXSTATUS_PKTID_MASK
)

	)

159 
	#WLFC_MAC_DESC_TABLE_SIZE
 32

	)

160 
	#WLFC_MAX_IFNUM
 16

	)

161 
	#WLFC_MAC_DESC_ID_INVALID
 0xff

	)

164 
	#WLFC_MAC_DESC_GET_LOOKUP_INDEX
(
x
Ë((xË& 0x1f)

	)

166 
	#WLFC_PKTFLAG_SET_PKTREQUESTED
(
x
) (x) |= \

167 (
WLFC_PKTFLAG_PKT_REQUESTED
 << 
WL_TXSTATUS_FLAGS_SHIFT
)

	)

169 
	#WLFC_PKTFLAG_CLR_PKTREQUESTED
(
x
) (x) &= \

170 ~(
WLFC_PKTFLAG_PKT_REQUESTED
 << 
WL_TXSTATUS_FLAGS_SHIFT
)

	)

172 
	#WL_TXSTATUS_GENERATION_MASK
 1

	)

173 
	#WL_TXSTATUS_GENERATION_SHIFT
 31

	)

175 
	#WLFC_PKTFLAG_SET_GENERATION
(
x
, 
gí
) ((x) = \

176 ((
x
Ë& ~(
WL_TXSTATUS_GENERATION_MASK
 << 
WL_TXSTATUS_GENERATION_SHIFT
)) | \

177 (((
gí
Ë& 
WL_TXSTATUS_GENERATION_MASK
Ë<< 
WL_TXSTATUS_GENERATION_SHIFT
))

	)

179 
	#WLFC_PKTFLAG_GENERATION
(
x
Ë(((xË>> 
WL_TXSTATUS_GENERATION_SHIFT
) & \

180 
WL_TXSTATUS_GENERATION_MASK
)

	)

182 
	#WLFC_MAX_PENDING_DATALEN
 120

	)

185 
	#WLFC_CTL_PKTFLAG_DISCARD
 0

	)

187 
	#WLFC_CTL_PKTFLAG_D11SUPPRESS
 1

	)

191 
	#WLFC_CTL_PKTFLAG_WLSUPPRESS
 2

	)

193 
	#WLFC_CTL_PKTFLAG_TOSSED_BYWLC
 3

	)

195 
	#WLFC_D11_STATUS_INTERPRET
(
txs
) \

196 (((
txs
)->
°©us
.
suµr_öd
 !0Ë? 
WLFC_CTL_PKTFLAG_D11SUPPRESS
 : 
WLFC_CTL_PKTFLAG_DISCARD
)

	)

198 #ifde‡
PROP_TXSTATUS_DEBUG


199 
	#WLFC_DBGMESG
(
x
Ë
¥ötf
 
	)
x

201 
	#WLFC_BREADCRUMB
(
x
Ëdÿ{i‡((xË=
NULL
) \

202 {
	`¥ötf
("WLFC: %s():%d:caller:%p\n", \

203 
__FUNCTION__
, 
__LINE__
, 
	`__buûtö_ªtu∫_addªss
(0));}} 0)

	)

204 
	#WLFC_PRINTMAC
(
b™√r
, 
ó
Ëdÿ{
	`¥ötf
("%s MAC: [%02x:%02x:%02x:%02x:%02x:%02x]\n", \

205 
b™√r
, 
ó
[0],Éa[1],Éa[2],Éa[3],Éa[4],Éa[5]); } 0)

	)

206 
	#WLFC_WHEREIS
(
s
Ë
	`¥ötf
("WLFC:áà%s():%d, %s\n", 
__FUNCTION__
, 
__LINE__
, (s))

	)

208 
	#WLFC_DBGMESG
(
x
)

	)

209 
	#WLFC_BREADCRUMB
(
x
)

	)

210 
	#WLFC_PRINTMAC
(
b™√r
, 
ó
)

	)

211 
	#WLFC_WHEREIS
(
s
)

	)

215 
	#WLHOST_REORDERDATA_MAXFLOWS
 256

	)

216 
	#WLHOST_REORDERDATA_LEN
 10

	)

217 
	#WLHOST_REORDERDATA_TOTLEN
 (
WLHOST_REORDERDATA_LEN
 + 1 + 1Ë

	)

219 
	#WLHOST_REORDERDATA_FLOWID_OFFSET
 0

	)

220 
	#WLHOST_REORDERDATA_MAXIDX_OFFSET
 2

	)

221 
	#WLHOST_REORDERDATA_FLAGS_OFFSET
 4

	)

222 
	#WLHOST_REORDERDATA_CURIDX_OFFSET
 6

	)

223 
	#WLHOST_REORDERDATA_EXPIDX_OFFSET
 8

	)

225 
	#WLHOST_REORDERDATA_DEL_FLOW
 0x01

	)

226 
	#WLHOST_REORDERDATA_FLUSH_ALL
 0x02

	)

227 
	#WLHOST_REORDERDATA_CURIDX_VALID
 0x04

	)

228 
	#WLHOST_REORDERDATA_EXPIDX_VALID
 0x08

	)

229 
	#WLHOST_REORDERDATA_NEW_HOLE
 0x10

	)

231 
	#WLFC_CTL_TRANS_ID_LEN
 6

	)

	@include/wlioctl.h

30 #i‚de‡
_wlio˘l_h_


31 
	#_wlio˘l_h_


	)

33 
	~<ty≥defs.h
>

34 
	~<¥Ÿo/ëhî√t.h
>

35 
	~<¥Ÿo/bcmëh.h
>

36 
	~<¥Ÿo/bcmevít.h
>

37 
	~<¥Ÿo/802.11.h
>

38 
	~<bcmwifi_ch™√ls.h
>

39 
	~<bcmwifi_øãs.h
>

41 #i‚de‡
LINUX_POSTMOGRIFY_REMOVAL


42 
	~<bcm_mpoﬁ_pub.h
>

43 
	~<bcmcdc.h
>

52 #i‚de‡
LINUX_POSTMOGRIFY_REMOVAL


54 #i‚de‡
INTF_NAME_SIZ


55 
	#INTF_NAME_SIZ
 16

	)

59 
	sªmŸe_io˘l
 {

60 
cdc_io˘l_t
 
	mmsg
;

61 
uöt
 
	md©a_Àn
;

62 
	mötf_«me
[
INTF_NAME_SIZ
];

63 } 
	tªm_io˘l_t
;

64 
	#REMOTE_SIZE
 (
ªm_io˘l_t
)

	)

66 
	#ACTION_FRAME_SIZE
 1800

	)

68 
	swl_a˘i⁄_‰ame
 {

69 
ëhî_addr
 
	mda
;

70 
uöt16
 
	mÀn
;

71 
uöt32
 
	m∑ckëId
;

72 
uöt8
 
	md©a
[
ACTION_FRAME_SIZE
];

73 } 
	twl_a˘i⁄_‰ame_t
;

75 
	#WL_WIFI_ACTION_FRAME_SIZE
 (
wl_a˘i⁄_‰ame
)

	)

77 
	sssid_öfo


79 
uöt8
 
	mssid_Àn
;

80 
uöt8
 
	mssid
[32];

81 } 
	tssid_öfo_t
;

83 
	swl_af_∑øms
 {

84 
uöt32
 
	mch™√l
;

85 
öt32
 
	mdwñl_time
;

86 
ëhî_addr
 
	mBSSID
;

87 
wl_a˘i⁄_‰ame_t
 
	ma˘i⁄_‰ame
;

88 } 
	twl_af_∑øms_t
;

90 
	#WL_WIFI_AF_PARAMS_SIZE
 (
wl_af_∑øms
)

	)

92 
	#MFP_TEST_FLAG_NORMAL
 0

	)

93 
	#MFP_TEST_FLAG_ANY_KEY
 1

	)

94 
	swl_ß_quîy
 {

95 
uöt32
 
	mÊag
;

96 
uöt8
 
	ma˘i⁄
;

97 
uöt16
 
	mid
;

98 
ëhî_addr
 
	mda
;

99 } 
	twl_ß_quîy_t
;

104 
	#BWL_DEFAULT_PACKING


	)

105 
	~<∑cked_£˘i⁄_°¨t.h
>

108 #i‚de‡
LINUX_POSTMOGRIFY_REMOVAL


111 
	#LEGACY_WL_BSS_INFO_VERSION
 107

	)

113 
	swl_bss_öfo_107
 {

114 
uöt32
 
	mvîsi⁄
;

115 
uöt32
 
	mÀngth
;

118 
ëhî_addr
 
	mBSSID
;

119 
uöt16
 
	mbóc⁄_≥riod
;

120 
uöt16
 
	mˇ∑bûôy
;

121 
uöt8
 
	mSSID_Àn
;

122 
uöt8
 
	mSSID
[32];

124 
uöt
 
	mcou¡
;

125 
uöt8
 
	møãs
[16];

126 } 
	møã£t
;

127 
uöt8
 
	mch™√l
;

128 
uöt16
 
	m©im_wödow
;

129 
uöt8
 
	mdtim_≥riod
;

130 
öt16
 
	mRSSI
;

131 
öt8
 
	mphy_noi£
;

132 
uöt32
 
	mõ_Àngth
;

134 } 
	twl_bss_öfo_107_t
;

140 
	#LEGACY2_WL_BSS_INFO_VERSION
 108

	)

146 
	swl_bss_öfo_108
 {

147 
uöt32
 
	mvîsi⁄
;

148 
uöt32
 
	mÀngth
;

151 
ëhî_addr
 
	mBSSID
;

152 
uöt16
 
	mbóc⁄_≥riod
;

153 
uöt16
 
	mˇ∑bûôy
;

154 
uöt8
 
	mSSID_Àn
;

155 
uöt8
 
	mSSID
[32];

157 
uöt
 
	mcou¡
;

158 
uöt8
 
	møãs
[16];

159 } 
	møã£t
;

160 
ch™•ec_t
 
	mch™•ec
;

161 
uöt16
 
	m©im_wödow
;

162 
uöt8
 
	mdtim_≥riod
;

163 
öt16
 
	mRSSI
;

164 
öt8
 
	mphy_noi£
;

166 
uöt8
 
	mn_ˇp
;

167 
uöt32
 
	mnbss_ˇp
;

168 
uöt8
 
	m˘l_ch
;

169 
uöt32
 
	mª£rved32
[1];

170 
uöt8
 
	mÊags
;

171 
uöt8
 
	mª£rved
[3];

172 
uöt8
 
	mbasic_mcs
[
MCSSET_LEN
];

174 
uöt16
 
	mõ_off£t
;

175 
uöt32
 
	mõ_Àngth
;

178 } 
	twl_bss_öfo_108_t
;

182 
	#WL_BSS_INFO_VERSION
 109

	)

188 
	swl_bss_öfo
 {

189 
uöt32
 
	mvîsi⁄
;

190 
uöt32
 
	mÀngth
;

193 
ëhî_addr
 
	mBSSID
;

194 
uöt16
 
	mbóc⁄_≥riod
;

195 
uöt16
 
	mˇ∑bûôy
;

196 
uöt8
 
	mSSID_Àn
;

197 
uöt8
 
	mSSID
[32];

199 
uöt
 
	mcou¡
;

200 
uöt8
 
	møãs
[16];

201 } 
	møã£t
;

202 
ch™•ec_t
 
	mch™•ec
;

203 
uöt16
 
	m©im_wödow
;

204 
uöt8
 
	mdtim_≥riod
;

205 
öt16
 
	mRSSI
;

206 
öt8
 
	mphy_noi£
;

208 
uöt8
 
	mn_ˇp
;

209 
uöt32
 
	mnbss_ˇp
;

210 
uöt8
 
	m˘l_ch
;

211 
uöt8
 
	m∑ddög1
[3];

212 
uöt16
 
	mvht_rxmcsm≠
;

213 
uöt16
 
	mvht_txmcsm≠
;

214 
uöt8
 
	mÊags
;

215 
uöt8
 
	mvht_ˇp
;

216 
uöt8
 
	mª£rved
[2];

217 
uöt8
 
	mbasic_mcs
[
MCSSET_LEN
];

219 
uöt16
 
	mõ_off£t
;

220 
uöt32
 
	mõ_Àngth
;

221 
öt16
 
	mSNR
;

224 } 
	twl_bss_öfo_t
;

227 
	#WL_BSS_FLAGS_FROM_BEACON
 0x01

	)

228 
	#WL_BSS_FLAGS_FROM_CACHE
 0x02

	)

229 
	#WL_BSS_FLAGS_RSSI_ONCHANNEL
 0x04

	)

232 
	#VHT_BI_SGI_80MHZ
 0x00000100

	)

234 #i‚de‡
LINUX_POSTMOGRIFY_REMOVAL


236 
	swl_bsscfg
 {

237 
uöt32
 
	mw£c
;

238 
uöt32
 
	mWPA_auth
;

239 
uöt32
 
	mw£c_ödex
;

240 
uöt32
 
	massocüãd
;

241 
uöt32
 
	mBSS
;

242 
uöt32
 
	mphyã°_⁄
;

243 
ëhî_addr
 
	m¥ev_BSSID
;

244 
ëhî_addr
 
	mBSSID
;

245 
uöt32
 
	mèrgëbss_w∑2_Êags
;

246 
uöt32
 
	massoc_ty≥
;

247 
uöt32
 
	massoc_°©e
;

248 } 
	twl_bsscfg_t
;

250 
	swl_bss_c⁄fig
 {

251 
uöt32
 
	m©im_wödow
;

252 
uöt32
 
	mbóc⁄_≥riod
;

253 
uöt32
 
	mch™•ec
;

254 } 
	twl_bss_c⁄fig_t
;

256 
	#DLOAD_HANDLER_VER
 1

	)

257 
	#DLOAD_FLAG_VER_MASK
 0xf000

	)

258 
	#DLOAD_FLAG_VER_SHIFT
 12

	)

260 
	#DL_CRC_NOT_INUSE
 0x0001

	)

264 
	mDL_TYPE_UCODE
 = 1,

265 
	mDL_TYPE_CLM
 = 2

270 
	mUCODE_FW
,

271 
	mINIT_VALS
,

272 
	mBS_INIT_VALS


275 
	swl_dlﬂd_d©a
 {

276 
uöt16
 
	mÊag
;

277 
uöt16
 
	mdlﬂd_ty≥
;

278 
uöt32
 
	mÀn
;

279 
uöt32
 
	m¸c
;

280 
uöt8
 
	md©a
[1];

282 
wl_dlﬂd_d©a
 
	twl_dlﬂd_d©a_t
;

284 
	swl_ucode_öfo
 {

285 
uöt32
 
	mucode_ty≥
;

286 
uöt32
 
	mnum_chunks
;

287 
uöt32
 
	mchunk_Àn
;

288 
uöt32
 
	mchunk_num
;

289 
uöt8
 
	md©a_chunk
[1];

291 
wl_ucode_öfo
 
	twl_ucode_öfo_t
;

293 
	swl_˛m_dlﬂd_öfo
 {

294 
uöt32
 
	mds_id
;

295 
uöt32
 
	m˛m_tŸÆ_Àn
;

296 
uöt32
 
	mnum_chunks
;

297 
uöt32
 
	mchunk_Àn
;

298 
uöt32
 
	mchunk_off£t
;

299 
uöt8
 
	md©a_chunk
[1];

301 
wl_˛m_dlﬂd_öfo
 
	twl_˛m_dlﬂd_öfo_t
;

305 
	swlc_ssid
 {

306 
uöt32
 
	mSSID_Àn
;

307 
uch¨
 
	mSSID
[32];

308 } 
	twlc_ssid_t
;

310 #i‚de‡
LINUX_POSTMOGRIFY_REMOVAL


312 
	#MAX_PREFERRED_AP_NUM
 5

	)

313 
	swlc_Á°ssidöfo
 {

314 
uöt32
 
	mSSID_ch™√l
[
MAX_PREFERRED_AP_NUM
];

315 
wlc_ssid_t
 
	mSSID_öfo
[
MAX_PREFERRED_AP_NUM
];

316 } 
	twlc_Á°ssidöfo_t
;

318 
BWL_PRE_PACKED_STRUCT
 
	swnm_uæ
 {

319 
uöt8
 
	mÀn
;

320 
uöt8
 
	md©a
[1];

321 } 
	tBWL_POST_PACKED_STRUCT
 
	twnm_uæ_t
;

323 
	sch™_sˇnd©a
 {

324 
uöt8
 
	mtxpowî
;

325 
uöt8
 
	m∑d
;

326 
ch™•ec_t
 
	mch™√l
;

327 
uöt32
 
	mch™√l_mötime
;

328 
uöt32
 
	mch™√l_maxtime
;

329 } 
	tch™_sˇnd©a_t
;

331 
	ewl_sˇn_ty≥
 {

332 
	mEXTDSCAN_FOREGROUND_SCAN
,

333 
	mEXTDSCAN_BACKGROUND_SCAN
,

334 
	mEXTDSCAN_FORCEDBACKGROUND_SCAN


335 } 
	twl_sˇn_ty≥_t
;

337 
	#WLC_EXTDSCAN_MAX_SSID
 5

	)

339 
	swl_extdsˇn_∑øms
 {

340 
öt8
 
	m≈robes
;

341 
öt8
 
	m•lô_sˇn
;

342 
öt8
 
	mb™d
;

343 
öt8
 
	m∑d
;

344 
wlc_ssid_t
 
	mssid
[
WLC_EXTDSCAN_MAX_SSID
];

345 
uöt32
 
	mtx_øã
;

346 
wl_sˇn_ty≥_t
 
	msˇn_ty≥
;

347 
öt32
 
	mch™√l_num
;

348 
ch™_sˇnd©a_t
 
	mch™√l_li°
[1];

349 } 
	twl_extdsˇn_∑øms_t
;

351 
	#WL_EXTDSCAN_PARAMS_FIXED_SIZE
 ((
wl_extdsˇn_∑øms_t
Ë- (
ch™_sˇnd©a_t
))

	)

353 
	#WL_BSSTYPE_INFRA
 1

	)

354 
	#WL_BSSTYPE_INDEP
 0

	)

355 
	#WL_BSSTYPE_ANY
 2

	)

358 
	#WL_SCANFLAGS_PASSIVE
 0x01

	)

359 
	#WL_SCANFLAGS_RESERVED
 0x02

	)

360 
	#WL_SCANFLAGS_PROHIBITED
 0x04

	)

362 
	#WL_SCAN_PARAMS_SSID_MAX
 10

	)

364 
	swl_sˇn_∑øms
 {

365 
wlc_ssid_t
 
	mssid
;

366 
ëhî_addr
 
	mbssid
;

367 
öt8
 
	mbss_ty≥
;

370 
uöt8
 
	msˇn_ty≥
;

371 
öt32
 
	m≈robes
;

372 
öt32
 
	ma˘ive_time
;

375 
öt32
 
	m∑ssive_time
;

378 
öt32
 
	mhome_time
;

381 
öt32
 
	mch™√l_num
;

395 
uöt16
 
	mch™√l_li°
[1];

396 } 
	twl_sˇn_∑øms_t
;

399 
	#WL_SCAN_PARAMS_FIXED_SIZE
 64

	)

402 
	#WL_SCAN_PARAMS_COUNT_MASK
 0x0000ffff

	)

403 
	#WL_SCAN_PARAMS_NSSID_SHIFT
 16

	)

405 
	#WL_SCAN_ACTION_START
 1

	)

406 
	#WL_SCAN_ACTION_CONTINUE
 2

	)

407 
	#WL_SCAN_ACTION_ABORT
 3

	)

409 
	#ISCAN_REQ_VERSION
 1

	)

412 
	swl_isˇn_∑øms
 {

413 
uöt32
 
	mvîsi⁄
;

414 
uöt16
 
	ma˘i⁄
;

415 
uöt16
 
	msˇn_duøti⁄
;

416 
wl_sˇn_∑øms_t
 
	m∑øms
;

417 } 
	twl_isˇn_∑øms_t
;

420 
	#WL_ISCAN_PARAMS_FIXED_SIZE
 (
	`OFFSETOF
(
wl_isˇn_∑øms_t
, 
∑øms
Ë+ (
wlc_ssid_t
))

	)

423 
	swl_sˇn_ªsu…s
 {

424 
uöt32
 
	mbuÊí
;

425 
uöt32
 
	mvîsi⁄
;

426 
uöt32
 
	mcou¡
;

427 
wl_bss_öfo_t
 
	mbss_öfo
[1];

428 } 
	twl_sˇn_ªsu…s_t
;

430 #i‚de‡
LINUX_POSTMOGRIFY_REMOVAL


432 
	#WL_SCAN_RESULTS_FIXED_SIZE
 ((
wl_sˇn_ªsu…s_t
Ë- (
wl_bss_öfo_t
))

	)

435 
	#WL_SCAN_RESULTS_SUCCESS
 0

	)

436 
	#WL_SCAN_RESULTS_PARTIAL
 1

	)

437 
	#WL_SCAN_RESULTS_PENDING
 2

	)

438 
	#WL_SCAN_RESULTS_ABORTED
 3

	)

439 
	#WL_SCAN_RESULTS_NO_MEM
 4

	)

442 
	#DNGL_RXCTXT_SIZE
 45

	)

445 
	#ESCAN_REQ_VERSION
 1

	)

447 
	swl_esˇn_∑øms
 {

448 
uöt32
 
	mvîsi⁄
;

449 
uöt16
 
	ma˘i⁄
;

450 
uöt16
 
	msync_id
;

451 
wl_sˇn_∑øms_t
 
	m∑øms
;

452 } 
	twl_esˇn_∑øms_t
;

454 
	#WL_ESCAN_PARAMS_FIXED_SIZE
 (
	`OFFSETOF
(
wl_esˇn_∑øms_t
, 
∑øms
Ë+ (
wlc_ssid_t
))

	)

456 
	swl_esˇn_ªsu…
 {

457 
uöt32
 
	mbuÊí
;

458 
uöt32
 
	mvîsi⁄
;

459 
uöt16
 
	msync_id
;

460 
uöt16
 
	mbss_cou¡
;

461 
wl_bss_öfo_t
 
	mbss_öfo
[1];

462 } 
	twl_esˇn_ªsu…_t
;

464 
	#WL_ESCAN_RESULTS_FIXED_SIZE
 ((
wl_esˇn_ªsu…_t
Ë- (
wl_bss_öfo_t
))

	)

467 
	swl_isˇn_ªsu…s
 {

468 
uöt32
 
	m°©us
;

469 
wl_sˇn_ªsu…s_t
 
	mªsu…s
;

470 } 
	twl_isˇn_ªsu…s_t
;

473 
	#WL_ISCAN_RESULTS_FIXED_SIZE
 \

474 (
WL_SCAN_RESULTS_FIXED_SIZE
 + 
	`OFFSETOF
(
wl_isˇn_ªsu…s_t
, 
ªsu…s
))

	)

476 
	swl_¥obe_∑øms
 {

477 
wlc_ssid_t
 
	mssid
;

478 
ëhî_addr
 
	mbssid
;

479 
ëhî_addr
 
	mmac
;

480 } 
	twl_¥obe_∑øms_t
;

483 
	#WL_MAXRATES_IN_SET
 16

	)

484 
	swl_øã£t
 {

485 
uöt32
 
	mcou¡
;

486 
uöt8
 
	møãs
[
WL_MAXRATES_IN_SET
];

487 } 
	twl_øã£t_t
;

489 
	swl_øã£t_¨gs
 {

490 
uöt32
 
	mcou¡
;

491 
uöt8
 
	møãs
[
WL_MAXRATES_IN_SET
];

492 
uöt8
 
	mmcs
[
MCSSET_LEN
];

493 } 
	twl_øã£t_¨gs_t
;

496 
	swl_uöt32_li°
 {

498 
uöt32
 
	mcou¡
;

500 
uöt32
 
	mñemít
[1];

501 } 
	twl_uöt32_li°_t
;

504 
	swl_assoc_∑øms
 {

505 
ëhî_addr
 
	mbssid
;

506 
uöt16
 
	mbssid_˙t
;

510 
öt32
 
	mch™•ec_num
;

513 
ch™•ec_t
 
	mch™•ec_li°
[1];

514 } 
	twl_assoc_∑øms_t
;

515 
	#WL_ASSOC_PARAMS_FIXED_SIZE
 
	`OFFSETOF
(
wl_assoc_∑øms_t
, 
ch™•ec_li°
)

	)

518 
wl_assoc_∑øms_t
 
	twl_ªassoc_∑øms_t
;

519 
	#WL_REASSOC_PARAMS_FIXED_SIZE
 
WL_ASSOC_PARAMS_FIXED_SIZE


	)

522 
wl_assoc_∑øms_t
 
	twl_joö_assoc_∑øms_t
;

523 
	#WL_JOIN_ASSOC_PARAMS_FIXED_SIZE
 
WL_ASSOC_PARAMS_FIXED_SIZE


	)

526 
	swl_joö_∑øms
 {

527 
wlc_ssid_t
 
	mssid
;

528 
wl_assoc_∑øms_t
 
	m∑øms
;

531 } 
	twl_joö_∑øms_t
;

533 #i‚de‡ 
LINUX_POSTMOGRIFY_REMOVAL


534 
	#WL_JOIN_PARAMS_FIXED_SIZE
 (
	`OFFSETOF
(
wl_joö_∑øms_t
, 
∑øms
) + \

535 
WL_ASSOC_PARAMS_FIXED_SIZE
)

	)

537 
	swl_joö_sˇn_∑øms
 {

538 
uöt8
 
	msˇn_ty≥
;

539 
öt32
 
	m≈robes
;

540 
öt32
 
	ma˘ive_time
;

543 
öt32
 
	m∑ssive_time
;

546 
öt32
 
	mhome_time
;

549 } 
	twl_joö_sˇn_∑øms_t
;

552 
	swl_extjoö_∑øms
 {

553 
wlc_ssid_t
 
	mssid
;

554 
wl_joö_sˇn_∑øms_t
 
	msˇn
;

555 
wl_joö_assoc_∑øms_t
 
	massoc
;

559 } 
	twl_extjoö_∑øms_t
;

560 
	#WL_EXTJOIN_PARAMS_FIXED_SIZE
 (
	`OFFSETOF
(
wl_extjoö_∑øms_t
, 
assoc
) + \

561 
WL_JOIN_ASSOC_PARAMS_FIXED_SIZE
)

	)

564 #unde‡
D11AC_IOTYPES


565 
	#D11AC_IOTYPES


	)

567 #i‚de‡
D11AC_IOTYPES


570 
	#NRATE_MCS_INUSE
 0x00000080

	)

571 
	#NRATE_RATE_MASK
 0x0000007‡

	)

572 
	#NRATE_STF_MASK
 0x0000ff00

	)

573 
	#NRATE_STF_SHIFT
 8

	)

574 
	#NRATE_OVERRIDE
 0x80000000

	)

575 
	#NRATE_OVERRIDE_MCS_ONLY
 0x40000000

	)

576 
	#NRATE_SGI_MASK
 0x00800000

	)

577 
	#NRATE_SGI_SHIFT
 23

	)

578 
	#NRATE_LDPC_CODING
 0x00400000

	)

579 
	#NRATE_LDPC_SHIFT
 22

	)

581 
	#NRATE_STF_SISO
 0

	)

582 
	#NRATE_STF_CDD
 1

	)

583 
	#NRATE_STF_STBC
 2

	)

584 
	#NRATE_STF_SDM
 3

	)

589 
	#WL_RSPEC_RATE_MASK
 0x000000FF

	)

590 
	#WL_RSPEC_VHT_MCS_MASK
 0x0000000F

	)

591 
	#WL_RSPEC_VHT_NSS_MASK
 0x000000F0

	)

592 
	#WL_RSPEC_VHT_NSS_SHIFT
 4

	)

593 
	#WL_RSPEC_TXEXP_MASK
 0x00000300

	)

594 
	#WL_RSPEC_TXEXP_SHIFT
 8

	)

595 
	#WL_RSPEC_BW_MASK
 0x00070000

	)

596 
	#WL_RSPEC_BW_SHIFT
 16

	)

597 
	#WL_RSPEC_STBC
 0x00100000

	)

598 
	#WL_RSPEC_LDPC
 0x00400000

	)

599 
	#WL_RSPEC_SGI
 0x00800000

	)

600 
	#WL_RSPEC_ENCODING_MASK
 0x03000000

	)

601 
	#WL_RSPEC_OVERRIDE_RATE
 0x40000000

	)

602 
	#WL_RSPEC_OVERRIDE_MODE
 0x80000000

	)

605 
	#WL_RSPEC_ENCODE_RATE
 0x00000000

	)

606 
	#WL_RSPEC_ENCODE_HT
 0x01000000

	)

607 
	#WL_RSPEC_ENCODE_VHT
 0x02000000

	)

610 
	#WL_RSPEC_BW_UNSPECIFIED
 0

	)

611 
	#WL_RSPEC_BW_20MHZ
 0x00010000

	)

612 
	#WL_RSPEC_BW_40MHZ
 0x00020000

	)

613 
	#WL_RSPEC_BW_80MHZ
 0x00030000

	)

614 
	#WL_RSPEC_BW_160MHZ
 0x00040000

	)

617 
	#OLD_NRATE_MCS_INUSE
 0x00000080

	)

618 
	#OLD_NRATE_RATE_MASK
 0x0000007‡

	)

619 
	#OLD_NRATE_STF_MASK
 0x0000ff00

	)

620 
	#OLD_NRATE_STF_SHIFT
 8

	)

621 
	#OLD_NRATE_OVERRIDE
 0x80000000

	)

622 
	#OLD_NRATE_OVERRIDE_MCS_ONLY
 0x40000000

	)

623 
	#OLD_NRATE_SGI
 0x00800000

	)

624 
	#OLD_NRATE_LDPC_CODING
 0x00400000

	)

626 
	#OLD_NRATE_STF_SISO
 0

	)

627 
	#OLD_NRATE_STF_CDD
 1

	)

628 
	#OLD_NRATE_STF_STBC
 2

	)

629 
	#OLD_NRATE_STF_SDM
 3

	)

633 
	#ANTENNA_NUM_1
 1

	)

634 
	#ANTENNA_NUM_2
 2

	)

635 
	#ANTENNA_NUM_3
 3

	)

636 
	#ANTENNA_NUM_4
 4

	)

638 
	#ANT_SELCFG_AUTO
 0x80

	)

639 
	#ANT_SELCFG_MASK
 0x33

	)

640 
	#ANT_SELCFG_MAX
 4

	)

641 
	#ANT_SELCFG_TX_UNICAST
 0

	)

642 
	#ANT_SELCFG_RX_UNICAST
 1

	)

643 
	#ANT_SELCFG_TX_DEF
 2

	)

644 
	#ANT_SELCFG_RX_DEF
 3

	)

646 
	#MAX_STREAMS_SUPPORTED
 4

	)

649 
uöt8
 
	m™t_c⁄fig
[
ANT_SELCFG_MAX
];

650 
uöt8
 
	mnum_™tcfg
;

651 } 
	twlc_™t£lcfg_t
;

653 
	#HIGHEST_SINGLE_STREAM_MCS
 7

	)

655 
	#MAX_CCA_CHANNELS
 38

	)

656 
	#MAX_CCA_SECS
 60

	)

658 
	#IBSS_MED
 15

	)

659 
	#IBSS_HI
 25

	)

660 
	#OBSS_MED
 12

	)

661 
	#OBSS_HI
 25

	)

662 
	#INTERFER_MED
 5

	)

663 
	#INTERFER_HI
 10

	)

665 
	#CCA_FLAG_2G_ONLY
 0x01

	)

666 
	#CCA_FLAG_5G_ONLY
 0x02

	)

667 
	#CCA_FLAG_IGNORE_DURATION
 0x04

	)

668 
	#CCA_FLAGS_PREFER_1_6_11
 0x10

	)

669 
	#CCA_FLAG_IGNORE_INTERFER
 0x20

	)

671 
	#CCA_ERRNO_BAND
 1

	)

672 
	#CCA_ERRNO_DURATION
 2

	)

673 
	#CCA_ERRNO_PREF_CHAN
 3

	)

674 
	#CCA_ERRNO_INTERFER
 4

	)

675 
	#CCA_ERRNO_TOO_FEW
 5

	)

678 
uöt32
 
	mduøti⁄
;

679 
uöt32
 
	mc⁄ge°_ibss
;

681 
uöt32
 
	mc⁄ge°_obss
;

682 
uöt32
 
	möãr„ªn˚
;

683 
uöt32
 
	mtime°amp
;

684 } 
	tcˇ_c⁄ge°_t
;

687 
ch™•ec_t
 
	mch™•ec
;

688 
uöt8
 
	mnum_£cs
;

689 
cˇ_c⁄ge°_t
 
	m£cs
[1];

690 } 
	tcˇ_c⁄ge°_ch™√l_ªq_t
;

693 
	#ITFR_MODE_DISABLE
 0

	)

694 
	#ITFR_MODE_MANUAL_ENABLE
 1

	)

695 
	#ITFR_MODE_AUTO_ENABLE
 2

	)

698 
	eöãr„ªn˚_sour˚
 {

699 
	mITFR_NONE
 = 0,

700 
	mITFR_PHONE
,

701 
	mITFR_VIDEO_CAMERA
,

702 
	mITFR_MICROWAVE_OVEN
,

703 
	mITFR_BABY_MONITOR
,

704 
	mITFR_BLUETOOTH
,

705 
	mITFR_VIDEO_CAMERA_OR_BABY_MONITOR
,

706 
	mITFR_BLUETOOTH_OR_BABY_MONITOR
,

707 
	mITFR_VIDEO_CAMERA_OR_PHONE
,

708 
	mITFR_UNIDENTIFIED


713 
uöt32
 
	mÊags
;

714 
uöt32
 
	msour˚
;

715 
uöt32
 
	mtime°amp
;

716 } 
	töãr„ªn˚_sour˚_ªp_t
;

719 
	#ITFR_INTERFERENCED
 1

	)

720 
	#ITFR_HOME_CHANNEL
 2

	)

721 
	#ITFR_NOISY_ENVIRONMENT
 4

	)

725 
	#WLC_CNTRY_BUF_SZ
 4

	)

727 #i‚de‡
LINUX_POSTMOGRIFY_REMOVAL


729 
	swl_cou¡ry
 {

730 
	mcou¡ry_abbªv
[
WLC_CNTRY_BUF_SZ
];

733 
öt32
 
	mªv
;

737 
	mccode
[
WLC_CNTRY_BUF_SZ
];

742 } 
	twl_cou¡ry_t
;

744 
	swl_ch™√ls_ö_cou¡ry
 {

745 
uöt32
 
	mbuÊí
;

746 
uöt32
 
	mb™d
;

747 
	mcou¡ry_abbªv
[
WLC_CNTRY_BUF_SZ
];

748 
uöt32
 
	mcou¡
;

749 
uöt32
 
	mch™√l
[1];

750 } 
	twl_ch™√ls_ö_cou¡ry_t
;

752 
	swl_cou¡ry_li°
 {

753 
uöt32
 
	mbuÊí
;

754 
uöt32
 
	mb™d_£t
;

755 
uöt32
 
	mb™d
;

756 
uöt32
 
	mcou¡
;

757 
	mcou¡ry_abbªv
[1];

758 } 
	twl_cou¡ry_li°_t
;

760 
	#WL_NUM_RPI_BINS
 8

	)

761 
	#WL_RM_TYPE_BASIC
 1

	)

762 
	#WL_RM_TYPE_CCA
 2

	)

763 
	#WL_RM_TYPE_RPI
 3

	)

765 
	#WL_RM_FLAG_PARALLEL
 (1<<0)

	)

767 
	#WL_RM_FLAG_LATE
 (1<<1)

	)

768 
	#WL_RM_FLAG_INCAPABLE
 (1<<2)

	)

769 
	#WL_RM_FLAG_REFUSED
 (1<<3)

	)

771 
	swl_rm_ªq_ñt
 {

772 
öt8
 
	mty≥
;

773 
öt8
 
	mÊags
;

774 
ch™•ec_t
 
	mch™•ec
;

775 
uöt32
 
	mtokí
;

776 
uöt32
 
	mtsf_h
;

777 
uöt32
 
	mtsf_l
;

778 
uöt32
 
	mdur
;

779 } 
	twl_rm_ªq_ñt_t
;

781 
	swl_rm_ªq
 {

782 
uöt32
 
	mtokí
;

783 
uöt32
 
	mcou¡
;

784 *
	mcb
;

785 *
	mcb_¨g
;

786 
wl_rm_ªq_ñt_t
 
	mªq
[1];

787 } 
	twl_rm_ªq_t
;

788 
	#WL_RM_REQ_FIXED_LEN
 
	`OFFSETOF
(
wl_rm_ªq_t
, 
ªq
)

	)

790 
	swl_rm_ªp_ñt
 {

791 
öt8
 
	mty≥
;

792 
öt8
 
	mÊags
;

793 
ch™•ec_t
 
	mch™•ec
;

794 
uöt32
 
	mtokí
;

795 
uöt32
 
	mtsf_h
;

796 
uöt32
 
	mtsf_l
;

797 
uöt32
 
	mdur
;

798 
uöt32
 
	mÀn
;

799 
uöt8
 
	md©a
[1];

800 } 
	twl_rm_ªp_ñt_t
;

801 
	#WL_RM_REP_ELT_FIXED_LEN
 24

	)

803 
	#WL_RPI_REP_BIN_NUM
 8

	)

804 
	swl_rm_Ωi_ªp
 {

805 
uöt8
 
	mΩi
[
WL_RPI_REP_BIN_NUM
];

806 
öt8
 
	mΩi_max
[
WL_RPI_REP_BIN_NUM
];

807 } 
	twl_rm_Ωi_ªp_t
;

809 
	swl_rm_ªp
 {

810 
uöt32
 
	mtokí
;

811 
uöt32
 
	mÀn
;

812 
wl_rm_ªp_ñt_t
 
	mªp
[1];

813 } 
	twl_rm_ªp_t
;

814 
	#WL_RM_REP_FIXED_LEN
 8

	)

817 
	esup_auth_°©us
 {

819 
	mWLC_SUP_DISCONNECTED
 = 0,

820 
	mWLC_SUP_CONNECTING
,

821 
	mWLC_SUP_IDREQUIRED
,

822 
	mWLC_SUP_AUTHENTICATING
,

823 
	mWLC_SUP_AUTHENTICATED
,

824 
	mWLC_SUP_KEYXCHANGE
,

825 
	mWLC_SUP_KEYED
,

826 
	mWLC_SUP_TIMEOUT
,

827 
	mWLC_SUP_LAST_BASIC_STATE
,

831 
	mWLC_SUP_KEYXCHANGE_WAIT_M1
 = 
WLC_SUP_AUTHENTICATED
,

833 
	mWLC_SUP_KEYXCHANGE_PREP_M2
 = 
WLC_SUP_KEYXCHANGE
,

835 
	mWLC_SUP_KEYXCHANGE_WAIT_M3
 = 
WLC_SUP_LAST_BASIC_STATE
,

836 
	mWLC_SUP_KEYXCHANGE_PREP_M4
,

837 
	mWLC_SUP_KEYXCHANGE_WAIT_G1
,

838 
	mWLC_SUP_KEYXCHANGE_PREP_G2


839 } 
	tsup_auth_°©us_t
;

843 
	#CRYPTO_ALGO_OFF
 0

	)

844 
	#CRYPTO_ALGO_WEP1
 1

	)

845 
	#CRYPTO_ALGO_TKIP
 2

	)

846 
	#CRYPTO_ALGO_WEP128
 3

	)

847 
	#CRYPTO_ALGO_AES_CCM
 4

	)

848 
	#CRYPTO_ALGO_AES_OCB_MSDU
 5

	)

849 
	#CRYPTO_ALGO_AES_OCB_MPDU
 6

	)

850 #i‡!
deföed
(
BCMEXTCCX
)

851 
	#CRYPTO_ALGO_NALG
 7

	)

853 
	#CRYPTO_ALGO_CKIP
 7

	)

854 
	#CRYPTO_ALGO_CKIP_MMH
 8

	)

855 
	#CRYPTO_ALGO_WEP_MMH
 9

	)

856 
	#CRYPTO_ALGO_NALG
 10

	)

858 
	#CRYPTO_ALGO_PMK
 12

	)

860 
	#WSEC_GEN_MIC_ERROR
 0x0001

	)

861 
	#WSEC_GEN_REPLAY
 0x0002

	)

862 
	#WSEC_GEN_ICV_ERROR
 0x0004

	)

863 
	#WSEC_GEN_MFP_ACT_ERROR
 0x0008

	)

864 
	#WSEC_GEN_MFP_DISASSOC_ERROR
 0x0010

	)

865 
	#WSEC_GEN_MFP_DEAUTH_ERROR
 0x0020

	)

867 
	#WL_SOFT_KEY
 (1 << 0Ë

	)

868 
	#WL_PRIMARY_KEY
 (1 << 1Ë

	)

869 #i‡
deföed
(
BCMEXTCCX
)

870 
	#WL_CKIP_KP
 (1 << 4Ë

	)

871 
	#WL_CKIP_MMH
 (1 << 5Ë

	)

873 
	#WL_KF_RES_4
 (1 << 4Ë

	)

874 
	#WL_KF_RES_5
 (1 << 5Ë

	)

876 
	#WL_IBSS_PEER_GROUP_KEY
 (1 << 6Ë

	)

878 
	swl_w£c_key
 {

879 
uöt32
 
	mödex
;

880 
uöt32
 
	mÀn
;

881 
uöt8
 
	md©a
[
DOT11_MAX_KEY_SIZE
];

882 
uöt32
 
	m∑d_1
[18];

883 
uöt32
 
	mÆgo
;

884 
uöt32
 
	mÊags
;

885 
uöt32
 
	m∑d_2
[2];

886 
	m∑d_3
;

887 
	miv_öôülized
;

888 
	m∑d_4
;

891 
uöt32
 
	mhi
;

892 
uöt16
 
	mlo
;

893 } 
	mrxiv
;

894 
uöt32
 
	m∑d_5
[2];

895 
ëhî_addr
 
	mó
;

896 } 
	twl_w£c_key_t
;

898 
	#WSEC_MIN_PSK_LEN
 8

	)

899 
	#WSEC_MAX_PSK_LEN
 64

	)

902 
	#WSEC_PASSPHRASE
 (1<<0)

	)

906 
ush‹t
 
	mkey_Àn
;

907 
ush‹t
 
	mÊags
;

908 
uöt8
 
	mkey
[
WSEC_MAX_PSK_LEN
];

909 } 
	tw£c_pmk_t
;

912 
	#WEP_ENABLED
 0x0001

	)

913 
	#TKIP_ENABLED
 0x0002

	)

914 
	#AES_ENABLED
 0x0004

	)

915 
	#WSEC_SWFLAG
 0x0008

	)

916 
	#SES_OW_ENABLED
 0x0040

	)

919 
	#WSEC_WEP_ENABLED
(
w£c
Ë((w£cË& 
WEP_ENABLED
)

	)

920 
	#WSEC_TKIP_ENABLED
(
w£c
Ë((w£cË& 
TKIP_ENABLED
)

	)

921 
	#WSEC_AES_ENABLED
(
w£c
Ë((w£cË& 
AES_ENABLED
)

	)

923 
	#WSEC_ENABLED
(
w£c
Ë((w£cË& (
WEP_ENABLED
 | 
TKIP_ENABLED
 | 
AES_ENABLED
))

	)

924 
	#WSEC_SES_OW_ENABLED
(
w£c
Ë((w£cË& 
SES_OW_ENABLED
)

	)

926 #ifde‡
MFP


927 
	#MFP_CAPABLE
 0x0200

	)

928 
	#MFP_REQUIRED
 0x0400

	)

929 
	#MFP_SHA256
 0x0800

	)

933 
	#WPA_AUTH_DISABLED
 0x0000

	)

934 
	#WPA_AUTH_NONE
 0x0001

	)

935 
	#WPA_AUTH_UNSPECIFIED
 0x0002

	)

936 
	#WPA_AUTH_PSK
 0x0004

	)

937 #i‡
deföed
(
BCMEXTCCX
)

938 
	#WPA_AUTH_CCKM
 0x0008

	)

939 
	#WPA2_AUTH_CCKM
 0x0010

	)

942 
	#WPA2_AUTH_UNSPECIFIED
 0x0040

	)

943 
	#WPA2_AUTH_PSK
 0x0080

	)

944 
	#BRCM_AUTH_PSK
 0x0100

	)

945 
	#BRCM_AUTH_DPT
 0x0200

	)

946 
	#WPA2_AUTH_MFP
 0x1000

	)

947 
	#WPA2_AUTH_TPK
 0x2000

	)

948 
	#WPA2_AUTH_FT
 0x4000

	)

949 
	#WPA_AUTH_PFN_ANY
 0xfffffff‡

	)

952 
	#MAXPMKID
 16

	)

954 
	s_pmkid
 {

955 
ëhî_addr
 
	mBSSID
;

956 
uöt8
 
	mPMKID
[
WPA2_PMKID_LEN
];

957 } 
	tpmkid_t
;

959 
	s_pmkid_li°
 {

960 
uöt32
 
	m≈mkid
;

961 
pmkid_t
 
	mpmkid
[1];

962 } 
	tpmkid_li°_t
;

964 
	s_pmkid_ˇnd
 {

965 
ëhî_addr
 
	mBSSID
;

966 
uöt8
 
	m¥óuth
;

967 } 
	tpmkid_ˇnd_t
;

969 
	s_pmkid_ˇnd_li°
 {

970 
uöt32
 
	m≈mkid_ˇnd
;

971 
pmkid_ˇnd_t
 
	mpmkid_ˇnd
[1];

972 } 
	tpmkid_ˇnd_li°_t
;

974 #i‚de‡
LINUX_POSTMOGRIFY_REMOVAL


975 
	swl_assoc_öfo
 {

976 
uöt32
 
	mªq_Àn
;

977 
uöt32
 
	mª•_Àn
;

978 
uöt32
 
	mÊags
;

979 
dŸ11_assoc_ªq
 
	mªq
;

980 
ëhî_addr
 
	mªassoc_bssid
;

981 
dŸ11_assoc_ª•
 
	mª•
;

982 } 
	twl_assoc_öfo_t
;

985 
	#WLC_ASSOC_REQ_IS_REASSOC
 0x01

	)

987 
	swl_Àd_öfo
 {

988 
uöt32
 
	mödex
;

989 
uöt32
 
	mbehavi‹
;

990 
uöt8
 
	ma˘ivehi
;

991 } 
	twl_Àd_öfo_t
;

996 
uöt
 
	mbyãoff
;

997 
uöt
 
	mnbyãs
;

998 
uöt16
 
	mbuf
[1];

999 } 
	t§om_rw_t
;

1003 
uöt32
 
	msour˚
;

1004 
uöt32
 
	mbyãoff
;

1005 
uöt32
 
	mnbyãs
;

1007 } 
	tcis_rw_t
;

1009 
	#WLC_CIS_DEFAULT
 0

	)

1010 
	#WLC_CIS_SROM
 1

	)

1011 
	#WLC_CIS_OTP
 2

	)

1015 
uöt32
 
	mbyãoff
;

1016 
uöt32
 
	mvÆ
;

1017 
uöt32
 
	msize
;

1018 
uöt
 
	mb™d
;

1019 } 
	trw_ªg_t
;

1024 
	#WL_ATTEN_APP_INPUT_PCL_OFF
 0

	)

1025 
	#WL_ATTEN_PCL_ON
 1

	)

1027 
	#WL_ATTEN_PCL_OFF
 2

	)

1030 
uöt16
 
	mauto_˘æ
;

1031 
uöt16
 
	mbb
;

1032 
uöt16
 
	mødio
;

1033 
uöt16
 
	mtx˘l1
;

1034 } 
	t©ãn_t
;

1037 
	swme_tx_∑øms_s
 {

1038 
uöt8
 
	msh‹t_ªåy
;

1039 
uöt8
 
	msh‹t_ÁŒback
;

1040 
uöt8
 
	ml⁄g_ªåy
;

1041 
uöt8
 
	ml⁄g_ÁŒback
;

1042 
uöt16
 
	mmax_øã
;

1045 
wme_tx_∑øms_s
 
	twme_tx_∑øms_t
;

1047 
	#WL_WME_TX_PARAMS_IO_BYTES
 ((
wme_tx_∑øms_t
Ë* 
AC_COUNT
)

	)

1051 
	#WL_PWRIDX_PCL_OFF
 -2

	)

1052 
	#WL_PWRIDX_PCL_ON
 -1

	)

1053 
	#WL_PWRIDX_LOWER_LIMIT
 -2

	)

1054 
	#WL_PWRIDX_UPPER_LIMIT
 63

	)

1062 
	mac
;

1063 
uöt8
 
	mvÆ
;

1064 
ëhî_addr
 
	mó
;

1065 } 
	tlök_vÆ_t
;

1067 
	#BCM_MAC_STATUS_INDICATION
 (0x40010200L)

	)

1070 
uöt16
 
	mvî
;

1071 
uöt16
 
	mÀn
;

1072 
uöt16
 
	mˇp
;

1073 
uöt32
 
	mÊags
;

1074 
uöt32
 
	midÀ
;

1075 
ëhî_addr
 
	mó
;

1076 
wl_øã£t_t
 
	møã£t
;

1077 
uöt32
 
	mö
;

1078 
uöt32
 
	mli°í_öãrvÆ_öms
;

1079 
uöt32
 
	mtx_pkts
;

1080 
uöt32
 
	mtx_Áûuªs
;

1081 
uöt32
 
	mrx_uˇ°_pkts
;

1082 
uöt32
 
	mrx_mˇ°_pkts
;

1083 
uöt32
 
	mtx_øã
;

1084 
uöt32
 
	mrx_øã
;

1085 
uöt32
 
	mrx_de¸y±_suc˚eds
;

1086 
uöt32
 
	mrx_de¸y±_Áûuªs
;

1087 } 
	t°a_öfo_t
;

1089 
	#WL_OLD_STAINFO_SIZE
 
	`OFFSETOF
(
°a_öfo_t
, 
tx_pkts
)

	)

1091 
	#WL_STA_VER
 3

	)

1094 
	#WL_STA_BRCM
 0x1

	)

1095 
	#WL_STA_WME
 0x2

	)

1096 
	#WL_STA_UNUSED
 0x4

	)

1097 
	#WL_STA_AUTHE
 0x8

	)

1098 
	#WL_STA_ASSOC
 0x10

	)

1099 
	#WL_STA_AUTHO
 0x20

	)

1100 
	#WL_STA_WDS
 0x40

	)

1101 
	#WL_STA_WDS_LINKUP
 0x80

	)

1102 
	#WL_STA_PS
 0x100

	)

1103 
	#WL_STA_APSD_BE
 0x200

	)

1104 
	#WL_STA_APSD_BK
 0x400

	)

1105 
	#WL_STA_APSD_VI
 0x800

	)

1106 
	#WL_STA_APSD_VO
 0x1000

	)

1107 
	#WL_STA_N_CAP
 0x2000

	)

1108 
	#WL_STA_SCBSTATS
 0x4000

	)

1110 
	#WL_WDS_LINKUP
 
WL_STA_WDS_LINKUP


	)

1113 
	#WLC_TXFILTER_OVERRIDE_DISABLED
 0

	)

1114 
	#WLC_TXFILTER_OVERRIDE_ENABLED
 1

	)

1120 
uöt32
 
	mvÆ
;

1121 
ëhî_addr
 
	mó
;

1122 } 
	tscb_vÆ_t
;

1126 
uöt32
 
	mcode
;

1127 
scb_vÆ_t
 
	mio˘l_¨gs
;

1128 } 
	tauth›s_t
;

1131 
	sch™√l_öfo
 {

1132 
	mhw_ch™√l
;

1133 
	mèrgë_ch™√l
;

1134 
	msˇn_ch™√l
;

1135 } 
	tch™√l_öfo_t
;

1138 
	sma˛i°
 {

1139 
uöt
 
	mcou¡
;

1140 
ëhî_addr
 
	mó
[1];

1143 #i‚de‡
LINUX_POSTMOGRIFY_REMOVAL


1145 
	sgë_pkt˙t
 {

1146 
uöt
 
	mrx_good_pkt
;

1147 
uöt
 
	mrx_bad_pkt
;

1148 
uöt
 
	mtx_good_pkt
;

1149 
uöt
 
	mtx_bad_pkt
;

1150 
uöt
 
	mrx_oˇ°_good_pkt
;

1151 } 
	tgë_pkt˙t_t
;

1154 
	#LQ_IDX_MIN
 0

	)

1155 
	#LQ_IDX_MAX
 1

	)

1156 
	#LQ_IDX_AVG
 2

	)

1157 
	#LQ_IDX_SUM
 2

	)

1158 
	#LQ_IDX_LAST
 3

	)

1159 
	#LQ_STOP_MONITOR
 0

	)

1160 
	#LQ_START_MONITOR
 1

	)

1164 
	mrssi
[
LQ_IDX_LAST
];

1165 
	m¢r
[
LQ_IDX_LAST
];

1166 
	misvÆid
;

1167 } 
	twl_lq_t
;

1169 
	ewl_wakeup_ªas⁄_ty≥
 {

1170 
	mLCD_ON
 = 1,

1171 
	mLCD_OFF
,

1172 
	mDRC1_WAKE
,

1173 
	mDRC2_WAKE
,

1174 
	mREASON_LAST


1175 } 
	twl_wr_ty≥_t
;

1179 
uöt32
 
	mid
;

1182 
uöt8
 
	mªas⁄
;

1183 } 
	twl_wr_t
;

1187 
ëhî_addr
 
	mó
;

1188 
uöt8
 
	mac_ˇt
;

1189 
uöt8
 
	mnum_pkts
;

1190 } 
	twl_mac_øãhi°o_cmd_t
;

1194 
uöt32
 
	møã
[
WLC_MAXRATE
 + 1];

1195 
uöt32
 
	mmcs
[
WL_RATESET_SZ_HT_MCS
 * 
WL_TX_CHAINS_MAX
];

1196 
uöt32
 
	mvht
[
WL_RATESET_SZ_VHT_MCS
][
WL_TX_CHAINS_MAX
];

1197 
uöt32
 
	mtsf_timî
[2][2];

1198 } 
	twl_mac_øãhi°o_ªs_t
;

1201 
	#WLC_TXFILTER_OVERRIDE_DISABLED
 0

	)

1202 
	#WLC_TXFILTER_OVERRIDE_ENABLED
 1

	)

1204 
	#WL_IOCTL_ACTION_GET
 0x0

	)

1205 
	#WL_IOCTL_ACTION_SET
 0x1

	)

1206 
	#WL_IOCTL_ACTION_OVL_IDX_MASK
 0x1e

	)

1207 
	#WL_IOCTL_ACTION_OVL_RSV
 0x20

	)

1208 
	#WL_IOCTL_ACTION_OVL
 0x40

	)

1209 
	#WL_IOCTL_ACTION_MASK
 0x7e

	)

1210 
	#WL_IOCTL_ACTION_OVL_SHIFT
 1

	)

1215 
	swl_io˘l
 {

1216 
uöt
 
	mcmd
;

1217 *
	mbuf
;

1218 
uöt
 
	mÀn
;

1219 
uöt8
 
	m£t
;

1220 
uöt
 
	mu£d
;

1221 
uöt
 
	m√eded
;

1222 } 
	twl_io˘l_t
;

1224 #i‚de‡
LINUX_POSTMOGRIFY_REMOVAL


1227 
	#io˘l_subty≥
 
£t


	)

1228 
	#io˘l_pid
 
u£d


	)

1229 
	#io˘l_°©us
 
√eded


	)

1235 
	swlc_ªv_öfo
 {

1236 
uöt
 
	mvíd‹id
;

1237 
uöt
 
	mdevi˚id
;

1238 
uöt
 
	mødi‹ev
;

1239 
uöt
 
	mchùªv
;

1240 
uöt
 
	mc‹îev
;

1241 
uöt
 
	mbﬂrdid
;

1242 
uöt
 
	mbﬂrdvíd‹
;

1243 
uöt
 
	mbﬂrdªv
;

1244 
uöt
 
	mdrivîªv
;

1245 
uöt
 
	mucodîev
;

1246 
uöt
 
	mbus
;

1247 
uöt
 
	mchùnum
;

1248 
uöt
 
	mphyty≥
;

1249 
uöt
 
	mphyªv
;

1250 
uöt
 
	m™¨ev
;

1251 
uöt
 
	mchùpkg
;

1252 } 
	twlc_ªv_öfo_t
;

1254 
	#WL_REV_INFO_LEGACY_LENGTH
 48

	)

1256 
	#WL_BRAND_MAX
 10

	)

1257 
	swl_ö°™˚_öfo
 {

1258 
uöt
 
	mö°™˚
;

1259 
	mbønd
[
WL_BRAND_MAX
];

1260 } 
	twl_ö°™˚_öfo_t
;

1263 
	swl_txfifo_sz
 {

1264 
uöt16
 
	mmagic
;

1265 
uöt16
 
	mfifo
;

1266 
uöt16
 
	msize
;

1267 } 
	twl_txfifo_sz_t
;

1269 
	#WL_TXFIFO_SZ_MAGIC
 0xa5a5

	)

1273 
	#WLC_IOV_NAME_LEN
 30

	)

1274 
	swlc_iov_åx_s
 {

1275 
uöt8
 
	mmoduÀ
;

1276 
uöt8
 
	mty≥
;

1277 
	m«me
[
WLC_IOV_NAME_LEN
];

1278 } 
	twlc_iov_åx_t
;

1281 
	#WLC_IOCTL_MAGIC
 0x14e46c77

	)

1284 #ifde‡
D11AC_IOTYPES


1285 
	#WLC_IOCTL_VERSION
 2

	)

1286 
	#WLC_IOCTL_VERSION_LEGACY_IOTYPES
 1

	)

1288 
	#WLC_IOCTL_VERSION
 1

	)

1292 
	#WLC_IOCTL_MAXLEN
 8192

	)

1293 
	#WLC_IOCTL_SMLEN
 256

	)

1294 
	#WLC_IOCTL_MEDLEN
 1536

	)

1295 #i‡
deföed
(
LCNCONF
Ë|| deföed(
LCN40CONF
)

1296 
	#WLC_SAMPLECOLLECT_MAXLEN
 8192

	)

1298 
	#WLC_SAMPLECOLLECT_MAXLEN
 10240

	)

1302 
	#WLC_GET_MAGIC
 0

	)

1303 
	#WLC_GET_VERSION
 1

	)

1304 
	#WLC_UP
 2

	)

1305 
	#WLC_DOWN
 3

	)

1306 
	#WLC_GET_LOOP
 4

	)

1307 
	#WLC_SET_LOOP
 5

	)

1308 
	#WLC_DUMP
 6

	)

1309 
	#WLC_GET_MSGLEVEL
 7

	)

1310 
	#WLC_SET_MSGLEVEL
 8

	)

1311 
	#WLC_GET_PROMISC
 9

	)

1312 
	#WLC_SET_PROMISC
 10

	)

1314 
	#WLC_GET_RATE
 12

	)

1315 
	#WLC_GET_MAX_RATE
 13

	)

1316 
	#WLC_GET_INSTANCE
 14

	)

1321 
	#WLC_GET_INFRA
 19

	)

1322 
	#WLC_SET_INFRA
 20

	)

1323 
	#WLC_GET_AUTH
 21

	)

1324 
	#WLC_SET_AUTH
 22

	)

1325 
	#WLC_GET_BSSID
 23

	)

1326 
	#WLC_SET_BSSID
 24

	)

1327 
	#WLC_GET_SSID
 25

	)

1328 
	#WLC_SET_SSID
 26

	)

1329 
	#WLC_RESTART
 27

	)

1330 
	#WLC_TERMINATED
 28

	)

1332 
	#WLC_GET_CHANNEL
 29

	)

1333 
	#WLC_SET_CHANNEL
 30

	)

1334 
	#WLC_GET_SRL
 31

	)

1335 
	#WLC_SET_SRL
 32

	)

1336 
	#WLC_GET_LRL
 33

	)

1337 
	#WLC_SET_LRL
 34

	)

1338 
	#WLC_GET_PLCPHDR
 35

	)

1339 
	#WLC_SET_PLCPHDR
 36

	)

1340 
	#WLC_GET_RADIO
 37

	)

1341 
	#WLC_SET_RADIO
 38

	)

1342 
	#WLC_GET_PHYTYPE
 39

	)

1343 
	#WLC_DUMP_RATE
 40

	)

1344 
	#WLC_SET_RATE_PARAMS
 41

	)

1345 
	#WLC_GET_FIXRATE
 42

	)

1346 
	#WLC_SET_FIXRATE
 43

	)

1349 
	#WLC_GET_KEY
 44

	)

1350 
	#WLC_SET_KEY
 45

	)

1351 
	#WLC_GET_REGULATORY
 46

	)

1352 
	#WLC_SET_REGULATORY
 47

	)

1353 
	#WLC_GET_PASSIVE_SCAN
 48

	)

1354 
	#WLC_SET_PASSIVE_SCAN
 49

	)

1355 
	#WLC_SCAN
 50

	)

1356 
	#WLC_SCAN_RESULTS
 51

	)

1357 
	#WLC_DISASSOC
 52

	)

1358 
	#WLC_REASSOC
 53

	)

1359 
	#WLC_GET_ROAM_TRIGGER
 54

	)

1360 
	#WLC_SET_ROAM_TRIGGER
 55

	)

1361 
	#WLC_GET_ROAM_DELTA
 56

	)

1362 
	#WLC_SET_ROAM_DELTA
 57

	)

1363 
	#WLC_GET_ROAM_SCAN_PERIOD
 58

	)

1364 
	#WLC_SET_ROAM_SCAN_PERIOD
 59

	)

1365 
	#WLC_EVM
 60

	)

1366 
	#WLC_GET_TXANT
 61

	)

1367 
	#WLC_SET_TXANT
 62

	)

1368 
	#WLC_GET_ANTDIV
 63

	)

1369 
	#WLC_SET_ANTDIV
 64

	)

1372 
	#WLC_GET_CLOSED
 67

	)

1373 
	#WLC_SET_CLOSED
 68

	)

1374 
	#WLC_GET_MACLIST
 69

	)

1375 
	#WLC_SET_MACLIST
 70

	)

1376 
	#WLC_GET_RATESET
 71

	)

1377 
	#WLC_SET_RATESET
 72

	)

1379 
	#WLC_LONGTRAIN
 74

	)

1380 
	#WLC_GET_BCNPRD
 75

	)

1381 
	#WLC_SET_BCNPRD
 76

	)

1382 
	#WLC_GET_DTIMPRD
 77

	)

1383 
	#WLC_SET_DTIMPRD
 78

	)

1384 
	#WLC_GET_SROM
 79

	)

1385 
	#WLC_SET_SROM
 80

	)

1386 
	#WLC_GET_WEP_RESTRICT
 81

	)

1387 
	#WLC_SET_WEP_RESTRICT
 82

	)

1388 
	#WLC_GET_COUNTRY
 83

	)

1389 
	#WLC_SET_COUNTRY
 84

	)

1390 
	#WLC_GET_PM
 85

	)

1391 
	#WLC_SET_PM
 86

	)

1392 
	#WLC_GET_WAKE
 87

	)

1393 
	#WLC_SET_WAKE
 88

	)

1395 
	#WLC_GET_FORCELINK
 90

	)

1396 
	#WLC_SET_FORCELINK
 91

	)

1397 
	#WLC_FREQ_ACCURACY
 92

	)

1398 
	#WLC_CARRIER_SUPPRESS
 93

	)

1399 
	#WLC_GET_PHYREG
 94

	)

1400 
	#WLC_SET_PHYREG
 95

	)

1401 
	#WLC_GET_RADIOREG
 96

	)

1402 
	#WLC_SET_RADIOREG
 97

	)

1403 
	#WLC_GET_REVINFO
 98

	)

1404 
	#WLC_GET_UCANTDIV
 99

	)

1405 
	#WLC_SET_UCANTDIV
 100

	)

1406 
	#WLC_R_REG
 101

	)

1407 
	#WLC_W_REG
 102

	)

1410 
	#WLC_GET_MACMODE
 105

	)

1411 
	#WLC_SET_MACMODE
 106

	)

1412 
	#WLC_GET_MONITOR
 107

	)

1413 
	#WLC_SET_MONITOR
 108

	)

1414 
	#WLC_GET_GMODE
 109

	)

1415 
	#WLC_SET_GMODE
 110

	)

1416 
	#WLC_GET_LEGACY_ERP
 111

	)

1417 
	#WLC_SET_LEGACY_ERP
 112

	)

1418 
	#WLC_GET_RX_ANT
 113

	)

1419 
	#WLC_GET_CURR_RATESET
 114

	)

1420 
	#WLC_GET_SCANSUPPRESS
 115

	)

1421 
	#WLC_SET_SCANSUPPRESS
 116

	)

1422 
	#WLC_GET_AP
 117

	)

1423 
	#WLC_SET_AP
 118

	)

1424 
	#WLC_GET_EAP_RESTRICT
 119

	)

1425 
	#WLC_SET_EAP_RESTRICT
 120

	)

1426 
	#WLC_SCB_AUTHORIZE
 121

	)

1427 
	#WLC_SCB_DEAUTHORIZE
 122

	)

1428 
	#WLC_GET_WDSLIST
 123

	)

1429 
	#WLC_SET_WDSLIST
 124

	)

1430 
	#WLC_GET_ATIM
 125

	)

1431 
	#WLC_SET_ATIM
 126

	)

1432 
	#WLC_GET_RSSI
 127

	)

1433 
	#WLC_GET_PHYANTDIV
 128

	)

1434 
	#WLC_SET_PHYANTDIV
 129

	)

1435 
	#WLC_AP_RX_ONLY
 130

	)

1436 
	#WLC_GET_TX_PATH_PWR
 131

	)

1437 
	#WLC_SET_TX_PATH_PWR
 132

	)

1438 
	#WLC_GET_WSEC
 133

	)

1439 
	#WLC_SET_WSEC
 134

	)

1440 
	#WLC_GET_PHY_NOISE
 135

	)

1441 
	#WLC_GET_BSS_INFO
 136

	)

1442 
	#WLC_GET_PKTCNTS
 137

	)

1443 
	#WLC_GET_LAZYWDS
 138

	)

1444 
	#WLC_SET_LAZYWDS
 139

	)

1445 
	#WLC_GET_BANDLIST
 140

	)

1447 #i‚de‡
LINUX_POSTMOGRIFY_REMOVAL


1448 
	#WLC_GET_BAND
 141

	)

1449 
	#WLC_SET_BAND
 142

	)

1450 
	#WLC_SCB_DEAUTHENTICATE
 143

	)

1451 
	#WLC_GET_SHORTSLOT
 144

	)

1452 
	#WLC_GET_SHORTSLOT_OVERRIDE
 145

	)

1453 
	#WLC_SET_SHORTSLOT_OVERRIDE
 146

	)

1454 
	#WLC_GET_SHORTSLOT_RESTRICT
 147

	)

1455 
	#WLC_SET_SHORTSLOT_RESTRICT
 148

	)

1456 
	#WLC_GET_GMODE_PROTECTION
 149

	)

1457 
	#WLC_GET_GMODE_PROTECTION_OVERRIDE
 150

	)

1458 
	#WLC_SET_GMODE_PROTECTION_OVERRIDE
 151

	)

1459 
	#WLC_UPGRADE
 152

	)

1462 
	#WLC_GET_IGNORE_BCNS
 155

	)

1463 
	#WLC_SET_IGNORE_BCNS
 156

	)

1464 
	#WLC_GET_SCB_TIMEOUT
 157

	)

1465 
	#WLC_SET_SCB_TIMEOUT
 158

	)

1466 
	#WLC_GET_ASSOCLIST
 159

	)

1467 
	#WLC_GET_CLK
 160

	)

1468 
	#WLC_SET_CLK
 161

	)

1469 
	#WLC_GET_UP
 162

	)

1470 
	#WLC_OUT
 163

	)

1471 
	#WLC_GET_WPA_AUTH
 164

	)

1472 
	#WLC_SET_WPA_AUTH
 165

	)

1473 
	#WLC_GET_UCFLAGS
 166

	)

1474 
	#WLC_SET_UCFLAGS
 167

	)

1475 
	#WLC_GET_PWRIDX
 168

	)

1476 
	#WLC_SET_PWRIDX
 169

	)

1477 
	#WLC_GET_TSSI
 170

	)

1478 
	#WLC_GET_SUP_RATESET_OVERRIDE
 171

	)

1479 
	#WLC_SET_SUP_RATESET_OVERRIDE
 172

	)

1485 
	#WLC_GET_PROTECTION_CONTROL
 178

	)

1486 
	#WLC_SET_PROTECTION_CONTROL
 179

	)

1488 
	#WLC_GET_PHYLIST
 180

	)

1489 #i‚de‡
LINUX_POSTMOGRIFY_REMOVAL


1490 
	#WLC_ENCRYPT_STRENGTH
 181

	)

1491 
	#WLC_DECRYPT_STATUS
 182

	)

1492 
	#WLC_GET_KEY_SEQ
 183

	)

1493 
	#WLC_GET_SCAN_CHANNEL_TIME
 184

	)

1494 
	#WLC_SET_SCAN_CHANNEL_TIME
 185

	)

1495 
	#WLC_GET_SCAN_UNASSOC_TIME
 186

	)

1496 
	#WLC_SET_SCAN_UNASSOC_TIME
 187

	)

1497 
	#WLC_GET_SCAN_HOME_TIME
 188

	)

1498 
	#WLC_SET_SCAN_HOME_TIME
 189

	)

1499 
	#WLC_GET_SCAN_NPROBES
 190

	)

1500 
	#WLC_SET_SCAN_NPROBES
 191

	)

1501 
	#WLC_GET_PRB_RESP_TIMEOUT
 192

	)

1502 
	#WLC_SET_PRB_RESP_TIMEOUT
 193

	)

1503 
	#WLC_GET_ATTEN
 194

	)

1504 
	#WLC_SET_ATTEN
 195

	)

1505 
	#WLC_GET_SHMEM
 196

	)

1506 
	#WLC_SET_SHMEM
 197

	)

1509 
	#WLC_SET_WSEC_TEST
 200

	)

1511 
	#WLC_SCB_DEAUTHENTICATE_FOR_REASON
 201

	)

1512 #i‚de‡
LINUX_POSTMOGRIFY_REMOVAL


1513 
	#WLC_TKIP_COUNTERMEASURES
 202

	)

1514 
	#WLC_GET_PIOMODE
 203

	)

1515 
	#WLC_SET_PIOMODE
 204

	)

1516 
	#WLC_SET_ASSOC_PREFER
 205

	)

1517 
	#WLC_GET_ASSOC_PREFER
 206

	)

1518 
	#WLC_SET_ROAM_PREFER
 207

	)

1519 
	#WLC_GET_ROAM_PREFER
 208

	)

1520 
	#WLC_SET_LED
 209

	)

1521 
	#WLC_GET_LED
 210

	)

1522 
	#WLC_GET_INTERFERENCE_MODE
 211

	)

1523 
	#WLC_SET_INTERFERENCE_MODE
 212

	)

1524 
	#WLC_GET_CHANNEL_QA
 213

	)

1525 
	#WLC_START_CHANNEL_QA
 214

	)

1526 
	#WLC_GET_CHANNEL_SEL
 215

	)

1527 
	#WLC_START_CHANNEL_SEL
 216

	)

1529 
	#WLC_GET_VALID_CHANNELS
 217

	)

1530 
	#WLC_GET_FAKEFRAG
 218

	)

1531 
	#WLC_SET_FAKEFRAG
 219

	)

1532 
	#WLC_GET_PWROUT_PERCENTAGE
 220

	)

1533 
	#WLC_SET_PWROUT_PERCENTAGE
 221

	)

1534 
	#WLC_SET_BAD_FRAME_PREEMPT
 222

	)

1535 
	#WLC_GET_BAD_FRAME_PREEMPT
 223

	)

1536 
	#WLC_SET_LEAP_LIST
 224

	)

1537 
	#WLC_GET_LEAP_LIST
 225

	)

1538 
	#WLC_GET_CWMIN
 226

	)

1539 
	#WLC_SET_CWMIN
 227

	)

1540 
	#WLC_GET_CWMAX
 228

	)

1541 
	#WLC_SET_CWMAX
 229

	)

1542 
	#WLC_GET_WET
 230

	)

1543 
	#WLC_SET_WET
 231

	)

1544 
	#WLC_GET_PUB
 232

	)

1547 
	#WLC_GET_KEY_PRIMARY
 235

	)

1548 
	#WLC_SET_KEY_PRIMARY
 236

	)

1550 #i‚de‡
LINUX_POSTMOGRIFY_REMOVAL


1553 
	#WLC_GET_ACI_ARGS
 238

	)

1554 
	#WLC_SET_ACI_ARGS
 239

	)

1555 
	#WLC_UNSET_CALLBACK
 240

	)

1556 
	#WLC_SET_CALLBACK
 241

	)

1557 
	#WLC_GET_RADAR
 242

	)

1558 
	#WLC_SET_RADAR
 243

	)

1559 
	#WLC_SET_SPECT_MANAGMENT
 244

	)

1560 
	#WLC_GET_SPECT_MANAGMENT
 245

	)

1561 
	#WLC_WDS_GET_REMOTE_HWADDR
 246

	)

1562 
	#WLC_WDS_GET_WPA_SUP
 247

	)

1563 
	#WLC_SET_CS_SCAN_TIMER
 248

	)

1564 
	#WLC_GET_CS_SCAN_TIMER
 249

	)

1565 
	#WLC_MEASURE_REQUEST
 250

	)

1566 
	#WLC_INIT
 251

	)

1567 
	#WLC_SEND_QUIET
 252

	)

1568 
	#WLC_KEEPALIVE
 253

	)

1569 
	#WLC_SEND_PWR_CONSTRAINT
 254

	)

1570 
	#WLC_UPGRADE_STATUS
 255

	)

1571 
	#WLC_CURRENT_PWR
 256

	)

1572 
	#WLC_GET_SCAN_PASSIVE_TIME
 257

	)

1573 
	#WLC_SET_SCAN_PASSIVE_TIME
 258

	)

1574 
	#WLC_LEGACY_LINK_BEHAVIOR
 259

	)

1575 
	#WLC_GET_CHANNELS_IN_COUNTRY
 260

	)

1576 
	#WLC_GET_COUNTRY_LIST
 261

	)

1578 
	#WLC_GET_VAR
 262

	)

1579 
	#WLC_SET_VAR
 263

	)

1580 #i‚de‡
LINUX_POSTMOGRIFY_REMOVAL


1581 
	#WLC_NVRAM_GET
 264

	)

1582 
	#WLC_NVRAM_SET
 265

	)

1583 
	#WLC_NVRAM_DUMP
 266

	)

1584 
	#WLC_REBOOT
 267

	)

1585 
	#WLC_SET_WSEC_PMK
 268

	)

1586 
	#WLC_GET_AUTH_MODE
 269

	)

1587 
	#WLC_SET_AUTH_MODE
 270

	)

1588 
	#WLC_GET_WAKEENTRY
 271

	)

1589 
	#WLC_SET_WAKEENTRY
 272

	)

1590 
	#WLC_NDCONFIG_ITEM
 273

	)

1591 
	#WLC_NVOTPW
 274

	)

1592 
	#WLC_OTPW
 275

	)

1593 
	#WLC_IOV_BLOCK_GET
 276

	)

1594 
	#WLC_IOV_MODULES_GET
 277

	)

1595 
	#WLC_SOFT_RESET
 278

	)

1596 
	#WLC_GET_ALLOW_MODE
 279

	)

1597 
	#WLC_SET_ALLOW_MODE
 280

	)

1598 
	#WLC_GET_DESIRED_BSSID
 281

	)

1599 
	#WLC_SET_DESIRED_BSSID
 282

	)

1600 
	#WLC_DISASSOC_MYAP
 283

	)

1601 
	#WLC_GET_NBANDS
 284

	)

1602 
	#WLC_GET_BANDSTATES
 285

	)

1603 
	#WLC_GET_WLC_BSS_INFO
 286

	)

1604 
	#WLC_GET_ASSOC_INFO
 287

	)

1605 
	#WLC_GET_OID_PHY
 288

	)

1606 
	#WLC_SET_OID_PHY
 289

	)

1607 
	#WLC_SET_ASSOC_TIME
 290

	)

1608 
	#WLC_GET_DESIRED_SSID
 291

	)

1609 
	#WLC_GET_CHANSPEC
 292

	)

1610 
	#WLC_GET_ASSOC_STATE
 293

	)

1611 
	#WLC_SET_PHY_STATE
 294

	)

1612 
	#WLC_GET_SCAN_PENDING
 295

	)

1613 
	#WLC_GET_SCANREQ_PENDING
 296

	)

1614 
	#WLC_GET_PREV_ROAM_REASON
 297

	)

1615 
	#WLC_SET_PREV_ROAM_REASON
 298

	)

1616 
	#WLC_GET_BANDSTATES_PI
 299

	)

1617 
	#WLC_GET_PHY_STATE
 300

	)

1618 
	#WLC_GET_BSS_WPA_RSN
 301

	)

1619 
	#WLC_GET_BSS_WPA2_RSN
 302

	)

1620 
	#WLC_GET_BSS_BCN_TS
 303

	)

1621 
	#WLC_GET_INT_DISASSOC
 304

	)

1622 
	#WLC_SET_NUM_PEERS
 305

	)

1623 
	#WLC_GET_NUM_BSS
 306

	)

1624 
	#WLC_PHY_SAMPLE_COLLECT
 307

	)

1626 
	#WLC_GET_CMD
 309

	)

1628 
	#WLC_SET_INTERFERENCE_OVERRIDE_MODE
 311

	)

1629 
	#WLC_GET_INTERFERENCE_OVERRIDE_MODE
 312

	)

1633 
	#WLC_SET_NAT_CONFIG
 316

	)

1634 
	#WLC_GET_NAT_STATE
 317

	)

1635 
	#WLC_LAST
 318

	)

1637 #i‚de‡
EPICTRL_COOKIE


1638 
	#EPICTRL_COOKIE
 0xABADCEDE

	)

1642 
	#CMN_IOCTL_OFF
 0x180

	)

1654 
	#WL_OID_BASE
 0xFFE41420

	)

1657 
	#OID_WL_GETINSTANCE
 (
WL_OID_BASE
 + 
WLC_GET_INSTANCE
)

	)

1658 
	#OID_WL_GET_FORCELINK
 (
WL_OID_BASE
 + 
WLC_GET_FORCELINK
)

	)

1659 
	#OID_WL_SET_FORCELINK
 (
WL_OID_BASE
 + 
WLC_SET_FORCELINK
)

	)

1660 
	#OID_WL_ENCRYPT_STRENGTH
 (
WL_OID_BASE
 + 
WLC_ENCRYPT_STRENGTH
)

	)

1661 
	#OID_WL_DECRYPT_STATUS
 (
WL_OID_BASE
 + 
WLC_DECRYPT_STATUS
)

	)

1662 
	#OID_LEGACY_LINK_BEHAVIOR
 (
WL_OID_BASE
 + 
WLC_LEGACY_LINK_BEHAVIOR
)

	)

1663 
	#OID_WL_NDCONFIG_ITEM
 (
WL_OID_BASE
 + 
WLC_NDCONFIG_ITEM
)

	)

1666 
	#OID_STA_CHANSPEC
 (
WL_OID_BASE
 + 
WLC_GET_CHANSPEC
)

	)

1667 
	#OID_STA_NBANDS
 (
WL_OID_BASE
 + 
WLC_GET_NBANDS
)

	)

1668 
	#OID_STA_GET_PHY
 (
WL_OID_BASE
 + 
WLC_GET_OID_PHY
)

	)

1669 
	#OID_STA_SET_PHY
 (
WL_OID_BASE
 + 
WLC_SET_OID_PHY
)

	)

1670 
	#OID_STA_ASSOC_TIME
 (
WL_OID_BASE
 + 
WLC_SET_ASSOC_TIME
)

	)

1671 
	#OID_STA_DESIRED_SSID
 (
WL_OID_BASE
 + 
WLC_GET_DESIRED_SSID
)

	)

1672 
	#OID_STA_SET_PHY_STATE
 (
WL_OID_BASE
 + 
WLC_SET_PHY_STATE
)

	)

1673 
	#OID_STA_SCAN_PENDING
 (
WL_OID_BASE
 + 
WLC_GET_SCAN_PENDING
)

	)

1674 
	#OID_STA_SCANREQ_PENDING
 (
WL_OID_BASE
 + 
WLC_GET_SCANREQ_PENDING
)

	)

1675 
	#OID_STA_GET_ROAM_REASON
 (
WL_OID_BASE
 + 
WLC_GET_PREV_ROAM_REASON
)

	)

1676 
	#OID_STA_SET_ROAM_REASON
 (
WL_OID_BASE
 + 
WLC_SET_PREV_ROAM_REASON
)

	)

1677 
	#OID_STA_GET_PHY_STATE
 (
WL_OID_BASE
 + 
WLC_GET_PHY_STATE
)

	)

1678 
	#OID_STA_INT_DISASSOC
 (
WL_OID_BASE
 + 
WLC_GET_INT_DISASSOC
)

	)

1679 
	#OID_STA_SET_NUM_PEERS
 (
WL_OID_BASE
 + 
WLC_SET_NUM_PEERS
)

	)

1680 
	#OID_STA_GET_NUM_BSS
 (
WL_OID_BASE
 + 
WLC_GET_NUM_BSS
)

	)

1683 
	#OID_NAT_SET_CONFIG
 (
WL_OID_BASE
 + 
WLC_SET_NAT_CONFIG
)

	)

1684 
	#OID_NAT_GET_STATE
 (
WL_OID_BASE
 + 
WLC_GET_NAT_STATE
)

	)

1686 
	#WL_DECRYPT_STATUS_SUCCESS
 1

	)

1687 
	#WL_DECRYPT_STATUS_FAILURE
 2

	)

1688 
	#WL_DECRYPT_STATUS_UNKNOWN
 3

	)

1691 
	#WLC_UPGRADE_SUCCESS
 0

	)

1692 
	#WLC_UPGRADE_PENDING
 1

	)

1694 #ifde‡
CONFIG_USBRNDIS_RETAIL


1697 *
	m«me
;

1698 *
	m∑øm
;

1699 } 
	tndc⁄fig_ôem_t
;

1704 
	#WL_AUTH_OPEN_SYSTEM
 0

	)

1705 
	#WL_AUTH_SHARED_KEY
 1

	)

1706 #ifde‡
BCM4330_CHIP


1707 
	#WL_AUTH_OPEN_SHARED
 2

	)

1710 
	#WL_AUTH_OPEN_SHARED
 3

	)

1715 
	#WL_RADIO_SW_DISABLE
 (1<<0)

	)

1716 
	#WL_RADIO_HW_DISABLE
 (1<<1)

	)

1717 
	#WL_RADIO_MPC_DISABLE
 (1<<2)

	)

1718 
	#WL_RADIO_COUNTRY_DISABLE
 (1<<3Ë

	)

1720 
	#WL_SPURAVOID_OFF
 0

	)

1721 
	#WL_SPURAVOID_ON1
 1

	)

1722 
	#WL_SPURAVOID_ON2
 2

	)

1725 
	#WL_TXPWR_OVERRIDE
 (1U<<31)

	)

1726 
	#WL_TXPWR_NEG
 (1U<<30)

	)

1728 #i‚de‡
LINUX_POSTMOGRIFY_REMOVAL


1729 
	#WL_PHY_PAVARS_LEN
 32

	)

1731 
	#WL_PHY_PAVAR_VER
 1

	)

1733 
	swl_po
 {

1734 
uöt16
 
	mphy_ty≥
;

1735 
uöt16
 
	mb™d
;

1736 
uöt16
 
	mcckpo
;

1737 
uöt32
 
	mofdmpo
;

1738 
uöt16
 
	mmc•o
[8];

1739 } 
	twl_po_t
;

1744 
	#WLC_TXPWR_MAX
 (127Ë

	)

1747 
	#WL_DIAG_INTERRUPT
 1

	)

1748 
	#WL_DIAG_LOOPBACK
 2

	)

1749 
	#WL_DIAG_MEMORY
 3

	)

1750 
	#WL_DIAG_LED
 4

	)

1751 
	#WL_DIAG_REG
 5

	)

1752 
	#WL_DIAG_SROM
 6

	)

1753 
	#WL_DIAG_DMA
 7

	)

1754 
	#WL_DIAG_LOOPBACK_EXT
 8

	)

1756 
	#WL_DIAGERR_SUCCESS
 0

	)

1757 
	#WL_DIAGERR_FAIL_TO_RUN
 1

	)

1758 
	#WL_DIAGERR_NOT_SUPPORTED
 2

	)

1759 
	#WL_DIAGERR_INTERRUPT_FAIL
 3

	)

1760 
	#WL_DIAGERR_LOOPBACK_FAIL
 4

	)

1761 
	#WL_DIAGERR_SROM_FAIL
 5

	)

1762 
	#WL_DIAGERR_SROM_BADCRC
 6

	)

1763 
	#WL_DIAGERR_REG_FAIL
 7

	)

1764 
	#WL_DIAGERR_MEMORY_FAIL
 8

	)

1765 
	#WL_DIAGERR_NOMEM
 9

	)

1766 
	#WL_DIAGERR_DMA_FAIL
 10

	)

1768 
	#WL_DIAGERR_MEMORY_TIMEOUT
 11

	)

1769 
	#WL_DIAGERR_MEMORY_BADPATTERN
 12

	)

1772 
	#WLC_BAND_AUTO
 0

	)

1773 
	#WLC_BAND_5G
 1

	)

1774 
	#WLC_BAND_2G
 2

	)

1775 
	#WLC_BAND_ALL
 3

	)

1778 
	#WL_CHAN_FREQ_RANGE_2G
 0

	)

1779 
	#WL_CHAN_FREQ_RANGE_5GL
 1

	)

1780 
	#WL_CHAN_FREQ_RANGE_5GM
 2

	)

1781 
	#WL_CHAN_FREQ_RANGE_5GH
 3

	)

1783 
	#WL_CHAN_FREQ_RANGE_5G_BAND0
 1

	)

1784 
	#WL_CHAN_FREQ_RANGE_5G_BAND1
 2

	)

1785 
	#WL_CHAN_FREQ_RANGE_5G_BAND2
 3

	)

1786 
	#WL_CHAN_FREQ_RANGE_5G_BAND3
 4

	)

1788 
	#WL_CHAN_FREQ_RANGE_5G_4BAND
 5

	)

1792 
	#WLC_PHY_TYPE_A
 0

	)

1793 
	#WLC_PHY_TYPE_B
 1

	)

1794 
	#WLC_PHY_TYPE_G
 2

	)

1795 
	#WLC_PHY_TYPE_N
 4

	)

1796 
	#WLC_PHY_TYPE_LP
 5

	)

1797 
	#WLC_PHY_TYPE_SSN
 6

	)

1798 
	#WLC_PHY_TYPE_HT
 7

	)

1799 
	#WLC_PHY_TYPE_LCN
 8

	)

1800 
	#WLC_PHY_TYPE_LCN40
 10

	)

1801 
	#WLC_PHY_TYPE_AC
 11

	)

1802 
	#WLC_PHY_TYPE_NULL
 0xf

	)

1805 
	#PM_OFF
 0

	)

1806 
	#PM_MAX
 1

	)

1807 
	#PM_FAST
 2

	)

1808 
	#PM_FORCE_OFF
 3

	)

1810 #i‚de‡
LINUX_POSTMOGRIFY_REMOVAL


1812 
	#WLC_MACMODE_DISABLED
 0

	)

1813 
	#WLC_MACMODE_DENY
 1

	)

1814 
	#WLC_MACMODE_ALLOW
 2

	)

1842 
	#GMODE_LEGACY_B
 0

	)

1843 
	#GMODE_AUTO
 1

	)

1844 
	#GMODE_ONLY
 2

	)

1845 
	#GMODE_B_DEFERRED
 3

	)

1846 
	#GMODE_PERFORMANCE
 4

	)

1847 
	#GMODE_LRS
 5

	)

1848 
	#GMODE_MAX
 6

	)

1851 
	#WLC_PLCP_AUTO
 -1

	)

1852 
	#WLC_PLCP_SHORT
 0

	)

1853 
	#WLC_PLCP_LONG
 1

	)

1856 
	#WLC_PROTECTION_AUTO
 -1

	)

1857 
	#WLC_PROTECTION_OFF
 0

	)

1858 
	#WLC_PROTECTION_ON
 1

	)

1859 
	#WLC_PROTECTION_MMHDR_ONLY
 2

	)

1860 
	#WLC_PROTECTION_CTS_ONLY
 3

	)

1863 
	#WLC_PROTECTION_CTL_OFF
 0

	)

1864 
	#WLC_PROTECTION_CTL_LOCAL
 1

	)

1865 
	#WLC_PROTECTION_CTL_OVERLAP
 2

	)

1868 
	#WLC_N_PROTECTION_OFF
 0

	)

1869 
	#WLC_N_PROTECTION_OPTIONAL
 1

	)

1870 
	#WLC_N_PROTECTION_20IN40
 2

	)

1871 
	#WLC_N_PROTECTION_MIXEDMODE
 3

	)

1874 
	#WLC_N_PREAMBLE_MIXEDMODE
 0

	)

1875 
	#WLC_N_PREAMBLE_GF
 1

	)

1876 
	#WLC_N_PREAMBLE_GF_BRCM
 2

	)

1879 
	#WLC_N_BW_20ALL
 0

	)

1880 
	#WLC_N_BW_40ALL
 1

	)

1881 
	#WLC_N_BW_20IN2G_40IN5G
 2

	)

1883 
	#WLC_BW_20MHZ_BIT
 (1<<0)

	)

1884 
	#WLC_BW_40MHZ_BIT
 (1<<1)

	)

1885 
	#WLC_BW_80MHZ_BIT
 (1<<2)

	)

1888 
	#WLC_BW_CAP_20MHZ
 (
WLC_BW_20MHZ_BIT
)

	)

1889 
	#WLC_BW_CAP_40MHZ
 (
WLC_BW_40MHZ_BIT
|
WLC_BW_20MHZ_BIT
)

	)

1890 
	#WLC_BW_CAP_80MHZ
 (
WLC_BW_80MHZ_BIT
|
WLC_BW_40MHZ_BIT
|
WLC_BW_20MHZ_BIT
)

	)

1891 
	#WLC_BW_CAP_UNRESTRICTED
 0xFF

	)

1893 
	#WL_BW_CAP_20MHZ
(
bw_ˇp
Ë(((bw_ˇpË& 
WLC_BW_20MHZ_BIT
Ë? 
TRUE
 : 
FALSE
)

	)

1894 
	#WL_BW_CAP_40MHZ
(
bw_ˇp
Ë(((bw_ˇpË& 
WLC_BW_40MHZ_BIT
Ë? 
TRUE
 : 
FALSE
)

	)

1895 
	#WL_BW_CAP_80MHZ
(
bw_ˇp
Ë(((bw_ˇpË& 
WLC_BW_80MHZ_BIT
Ë? 
TRUE
 : 
FALSE
)

	)

1898 
	#WLC_N_TXRX_CHAIN0
 0

	)

1899 
	#WLC_N_TXRX_CHAIN1
 1

	)

1902 
	#WLC_N_SGI_20
 0x01

	)

1903 
	#WLC_N_SGI_40
 0x02

	)

1904 
	#WLC_VHT_SGI_80
 0x04

	)

1907 
	#WLC_SGI_ALL
 0x02

	)

1909 
	#LISTEN_INTERVAL
 10

	)

1911 
	#INTERFERE_OVRRIDE_OFF
 -1

	)

1912 
	#INTERFERE_NONE
 0

	)

1913 
	#NON_WLAN
 1

	)

1914 
	#WLAN_MANUAL
 2

	)

1915 
	#WLAN_AUTO
 3

	)

1916 
	#WLAN_AUTO_W_NOISE
 4

	)

1917 
	#AUTO_ACTIVE
 (1 << 7Ë

	)

1920 
	#AP_ENV_DETECT_NOT_USED
 0

	)

1921 
	#AP_ENV_DENSE
 1

	)

1922 
	#AP_ENV_SPARSE
 2

	)

1923 
	#AP_ENV_INDETERMINATE
 3

	)

1925 
	swl_aci_¨gs
 {

1926 
	míãr_aci_thªsh
;

1927 
	mexô_aci_thªsh
;

1928 
	mu£c_•ö
;

1929 
	mglôch_dñay
;

1930 
uöt16
 
	m≈hy_ad˝wr_íãr_thªsh
;

1931 
uöt16
 
	m≈hy_ad˝wr_exô_thªsh
;

1932 
uöt16
 
	m≈hy_ª≥©_˘r
;

1933 
uöt16
 
	m≈hy_num_ßm∂es
;

1934 
uöt16
 
	m≈hy_undëe˘_wödow_sz
;

1935 
uöt16
 
	m≈hy_b_íîgy_lo_aci
;

1936 
uöt16
 
	m≈hy_b_íîgy_md_aci
;

1937 
uöt16
 
	m≈hy_b_íîgy_hi_aci
;

1938 
uöt16
 
	m≈hy_noi£_nﬂssoc_glôch_th_up
;

1939 
uöt16
 
	m≈hy_noi£_nﬂssoc_glôch_th_dn
;

1940 
uöt16
 
	m≈hy_noi£_assoc_glôch_th_up
;

1941 
uöt16
 
	m≈hy_noi£_assoc_glôch_th_dn
;

1942 
uöt16
 
	m≈hy_noi£_assoc_aci_glôch_th_up
;

1943 
uöt16
 
	m≈hy_noi£_assoc_aci_glôch_th_dn
;

1944 
uöt16
 
	m≈hy_noi£_assoc_íãr_th
;

1945 
uöt16
 
	m≈hy_noi£_nﬂssoc_íãr_th
;

1946 
uöt16
 
	m≈hy_noi£_assoc_rx_glôch_bad∂˝_íãr_th
;

1947 
uöt16
 
	m≈hy_noi£_nﬂssoc_¸sidx_ö¸
;

1948 
uöt16
 
	m≈hy_noi£_assoc_¸sidx_ö¸
;

1949 
uöt16
 
	m≈hy_noi£_¸sidx_de¸
;

1950 } 
	twl_aci_¨gs_t
;

1952 
	#TRIGGER_NOW
 0

	)

1953 
	#TRIGGER_CRS
 0x01

	)

1954 
	#TRIGGER_CRSDEASSERT
 0x02

	)

1955 
	#TRIGGER_GOODFCS
 0x04

	)

1956 
	#TRIGGER_BADFCS
 0x08

	)

1957 
	#TRIGGER_BADPLCP
 0x10

	)

1958 
	#TRIGGER_CRSGLITCH
 0x20

	)

1959 
	#WL_ACI_ARGS_LEGACY_LENGTH
 16

	)

1960 
	#WL_SAMPLECOLLECT_T_VERSION
 2

	)

1961 
	swl_ßm∂ecﬁÀ˘_¨gs
 {

1963 
uöt8
 
	mcﬁl_us
;

1964 
	mc‹es
;

1966 
uöt16
 
	mvîsi⁄
;

1967 
uöt16
 
	mÀngth
;

1968 
öt8
 
	måiggî
;

1969 
uöt16
 
	mtimeout
;

1970 
uöt16
 
	mmode
;

1971 
uöt32
 
	m¥e_dur
;

1972 
uöt32
 
	mpo°_dur
;

1973 
uöt8
 
	mgpio_£l
;

1974 
boﬁ
 
	mdownßmp
;

1975 
boﬁ
 
	mbe_dóf
;

1976 
boﬁ
 
	magc
;

1977 
boﬁ
 
	mfûãr
;

1979 
uöt8
 
	måiggî_°©e
;

1980 
uöt8
 
	mmoduÀ_£l1
;

1981 
uöt8
 
	mmoduÀ_£l2
;

1982 
uöt16
 
	mnßmps
;

1983 } 
	twl_ßm∂ecﬁÀ˘_¨gs_t
;

1985 
	#WL_SAMPLEDATA_HEADER_TYPE
 1

	)

1986 
	#WL_SAMPLEDATA_HEADER_SIZE
 80

	)

1987 
	#WL_SAMPLEDATA_TYPE
 2

	)

1988 
	#WL_SAMPLEDATA_SEQ
 0xf‡

	)

1989 
	#WL_SAMPLEDATA_MORE_DATA
 0x100

	)

1990 
	#WL_SAMPLEDATA_T_VERSION
 1

	)

1992 
	#WL_SAMPLEDATA_T_VERSION_SPEC_AN
 2

	)

1994 
	swl_ßm∂ed©a
 {

1995 
uöt16
 
	mvîsi⁄
;

1996 
uöt16
 
	msize
;

1997 
uöt16
 
	mèg
;

1998 
uöt16
 
	mÀngth
;

1999 
uöt32
 
	mÊag
;

2000 } 
	twl_ßm∂ed©a_t
;

2004 
	m≈ul£s
;

2005 
	mnc⁄tig
;

2006 
	mmö_pw
;

2007 
	mmax_pw
;

2008 
uöt16
 
	mthªsh0
;

2009 
uöt16
 
	mthªsh1
;

2010 
uöt16
 
	mbœnk
;

2011 
uöt16
 
	mfmdemodcfg
;

2012 
	m≈ul£s_Õ
;

2013 
	mmö_pw_Õ
;

2014 
	mmax_pw_Õ
;

2015 
	mmö_fm_Õ
;

2016 
	mmax_•™_Õ
;

2017 
	mmö_dñèt
;

2018 
	mmax_dñèt
;

2019 
uöt16
 
	mautoc‹r
;

2020 
uöt16
 
	m°_Àvñ_time
;

2021 
uöt16
 
	mt2_mö
;

2022 
uöt32
 
	mvîsi⁄
;

2023 
uöt32
 
	m‰a_pul£_îr
;

2024 
	m≈ul£s_‰a
;

2025 
	m≈ul£s_°g2
;

2026 
	m≈ul£s_°g3
;

2027 
uöt16
 
	m≥rˇl_mask
;

2028 
	mqu™t
;

2029 
uöt32
 
	mmö_bur°_ötv_Õ
;

2030 
uöt32
 
	mmax_bur°_ötv_Õ
;

2031 
	mnskù_r°_Õ
;

2032 
	mmax_pw_tﬁ
;

2033 
uöt16
 
	m„©uª_mask
;

2034 } 
	twl_ød¨_¨gs_t
;

2036 
	#WL_RADAR_ARGS_VERSION
 2

	)

2039 
uöt32
 
	mvîsi⁄
;

2040 
uöt16
 
	mthªsh0_20_lo
;

2041 
uöt16
 
	mthªsh1_20_lo
;

2042 
uöt16
 
	mthªsh0_40_lo
;

2043 
uöt16
 
	mthªsh1_40_lo
;

2044 
uöt16
 
	mthªsh0_80_lo
;

2045 
uöt16
 
	mthªsh1_80_lo
;

2046 
uöt16
 
	mthªsh0_160_lo
;

2047 
uöt16
 
	mthªsh1_160_lo
;

2048 
uöt16
 
	mthªsh0_20_hi
;

2049 
uöt16
 
	mthªsh1_20_hi
;

2050 
uöt16
 
	mthªsh0_40_hi
;

2051 
uöt16
 
	mthªsh1_40_hi
;

2052 
uöt16
 
	mthªsh0_80_hi
;

2053 
uöt16
 
	mthªsh1_80_hi
;

2054 
uöt16
 
	mthªsh0_160_hi
;

2055 
uöt16
 
	mthªsh1_160_hi
;

2056 } 
	twl_ød¨_thr_t
;

2058 
	#WL_RADAR_THR_VERSION
 2

	)

2059 
	#WL_THRESHOLD_LO_BAND
 70

	)

2062 
	#WL_RADAR_DETECTOR_OFF
 0

	)

2063 
	#WL_RADAR_DETECTOR_ON
 1

	)

2064 
	#WL_RADAR_SIMULATED
 2

	)

2067 
	#WL_RSSI_ANT_VERSION
 1

	)

2068 
	#WL_ANT_RX_MAX
 2

	)

2069 
	#WL_ANT_HT_RX_MAX
 3

	)

2070 
	#WL_ANT_IDX_1
 0

	)

2071 
	#WL_ANT_IDX_2
 1

	)

2073 #i‚de‡
WL_RSSI_ANT_MAX


2074 
	#WL_RSSI_ANT_MAX
 4

	)

2075 #ñi‡
WL_RSSI_ANT_MAX
 != 4

2081 
uöt32
 
	mvîsi⁄
;

2082 
uöt32
 
	mcou¡
;

2083 
öt8
 
	mrssi_™t
[
WL_RSSI_ANT_MAX
];

2084 } 
	twl_rssi_™t_t
;

2094 
	#WL_DFS_CACSTATE_IDLE
 0

	)

2095 
	#WL_DFS_CACSTATE_PREISM_CAC
 1

	)

2096 
	#WL_DFS_CACSTATE_ISM
 2

	)

2097 
	#WL_DFS_CACSTATE_CSA
 3

	)

2098 
	#WL_DFS_CACSTATE_POSTISM_CAC
 4

	)

2099 
	#WL_DFS_CACSTATE_PREISM_OOC
 5

	)

2100 
	#WL_DFS_CACSTATE_POSTISM_OOC
 6

	)

2101 
	#WL_DFS_CACSTATES
 7

	)

2105 
uöt
 
	m°©e
;

2106 
uöt
 
	mduøti⁄
;

2110 
ch™•ec_t
 
	mch™•ec_˛óªd
;

2112 
uöt16
 
	m∑d
;

2113 } 
	twl_dfs_°©us_t
;

2115 
	#NUM_PWRCTRL_RATES
 12

	)

2118 
uöt8
 
	mtxpwr_b™d_max
[
NUM_PWRCTRL_RATES
];

2119 
uöt8
 
	mtxpwr_limô
[
NUM_PWRCTRL_RATES
];

2120 
uöt8
 
	mtxpwr_loˇl_max
;

2121 
uöt8
 
	mtxpwr_loˇl_c⁄°øöt
;

2122 
uöt8
 
	mtxpwr_ch™_ªg_max
;

2123 
uöt8
 
	mtxpwr_èrgë
[2][
NUM_PWRCTRL_RATES
];

2124 
uöt8
 
	mtxpwr_e°_Pout
[2];

2125 
uöt8
 
	mtxpwr_›o
[
NUM_PWRCTRL_RATES
];

2126 
uöt8
 
	mtxpwr_bphy_cck_max
[
NUM_PWRCTRL_RATES
];

2127 
uöt8
 
	mtxpwr_bphy_ofdm_max
;

2128 
uöt8
 
	mtxpwr_≠hy_max
[
NUM_PWRCTRL_RATES
];

2129 
öt8
 
	mtxpwr_™tgaö
[2];

2130 
uöt8
 
	mtxpwr_e°_Pout_gofdm
;

2131 } 
	ttx_powî_Àgacy_t
;

2133 
	#WL_TX_POWER_RATES_LEGACY
 45

	)

2134 
	#WL_TX_POWER_MCS20_FIRST
 12

	)

2135 
	#WL_TX_POWER_MCS20_NUM
 16

	)

2136 
	#WL_TX_POWER_MCS40_FIRST
 28

	)

2137 
	#WL_TX_POWER_MCS40_NUM
 17

	)

2140 
uöt32
 
	mÊags
;

2141 
ch™•ec_t
 
	mch™•ec
;

2142 
ch™•ec_t
 
	mloˇl_ch™•ec
;

2143 
uöt8
 
	mloˇl_max
;

2144 
uöt8
 
	mloˇl_c⁄°øöt
;

2145 
öt8
 
	m™tgaö
[2];

2146 
uöt8
 
	mrf_c‹es
;

2147 
uöt8
 
	me°_Pout
[4];

2150 
uöt8
 
	me°_Pout_cck
;

2151 
uöt8
 
	mu£r_limô
[
WL_TX_POWER_RATES_LEGACY
];

2152 
uöt8
 
	mªg_limô
[
WL_TX_POWER_RATES_LEGACY
];

2153 
uöt8
 
	mbﬂrd_limô
[
WL_TX_POWER_RATES_LEGACY
];

2154 
uöt8
 
	mèrgë
[
WL_TX_POWER_RATES_LEGACY
];

2155 } 
	ttx_powî_Àgacy2_t
;

2158 
	#WL_NUM_RATES_CCK
 4

	)

2159 
	#WL_NUM_RATES_OFDM
 8

	)

2160 
	#WL_NUM_RATES_MCS_1STREAM
 8

	)

2161 
	#WL_NUM_RATES_EXTRA_VHT
 2

	)

2162 
	#WL_NUM_RATES_VHT
 10

	)

2163 
	#WL_NUM_RATES_MCS32
 1

	)

2165 
	#WLC_NUM_RATES_CCK
 
WL_NUM_RATES_CCK


	)

2166 
	#WLC_NUM_RATES_OFDM
 
WL_NUM_RATES_OFDM


	)

2167 
	#WLC_NUM_RATES_MCS_1_STREAM
 
WL_NUM_RATES_MCS_1STREAM


	)

2168 
	#WLC_NUM_RATES_MCS_2_STREAM
 
WL_NUM_RATES_MCS_1STREAM


	)

2169 
	#WLC_NUM_RATES_MCS32
 
WL_NUM_RATES_MCS32


	)

2170 
	#WL_TX_POWER_CCK_NUM
 
WL_NUM_RATES_CCK


	)

2171 
	#WL_TX_POWER_OFDM_NUM
 
WL_NUM_RATES_OFDM


	)

2172 
	#WL_TX_POWER_MCS_1_STREAM_NUM
 
WL_NUM_RATES_MCS_1STREAM


	)

2173 
	#WL_TX_POWER_MCS_2_STREAM_NUM
 
WL_NUM_RATES_MCS_1STREAM


	)

2174 
	#WL_TX_POWER_MCS_32_NUM
 
WL_NUM_RATES_MCS32


	)

2176 
	#WL_NUM_2x2_ELEMENTS
 4

	)

2177 
	#WL_NUM_3x3_ELEMENTS
 6

	)

2179 
	stxµr
 {

2181 
uöt8
 
	mb20_1x1dsss
[
WL_NUM_RATES_CCK
];

2182 
uöt8
 
	mb20_1x1ofdm
[
WL_NUM_RATES_OFDM
];

2183 
uöt8
 
	mb20_1x1mcs0
[
WL_NUM_RATES_MCS_1STREAM
];

2185 
uöt8
 
	mb20_1x2dsss
[
WL_NUM_RATES_CCK
];

2186 
uöt8
 
	mb20_1x2cdd_ofdm
[
WL_NUM_RATES_OFDM
];

2187 
uöt8
 
	mb20_1x2cdd_mcs0
[
WL_NUM_RATES_MCS_1STREAM
];

2188 
uöt8
 
	mb20_2x2°bc_mcs0
[
WL_NUM_RATES_MCS_1STREAM
];

2189 
uöt8
 
	mb20_2x2sdm_mcs8
[
WL_NUM_RATES_MCS_1STREAM
];

2191 
uöt8
 
	mb20_1x3dsss
[
WL_NUM_RATES_CCK
];

2192 
uöt8
 
	mb20_1x3cdd_ofdm
[
WL_NUM_RATES_OFDM
];

2193 
uöt8
 
	mb20_1x3cdd_mcs0
[
WL_NUM_RATES_MCS_1STREAM
];

2194 
uöt8
 
	mb20_2x3°bc_mcs0
[
WL_NUM_RATES_MCS_1STREAM
];

2195 
uöt8
 
	mb20_2x3sdm_mcs8
[
WL_NUM_RATES_MCS_1STREAM
];

2196 
uöt8
 
	mb20_3x3sdm_mcs16
[
WL_NUM_RATES_MCS_1STREAM
];

2198 
uöt8
 
	mb20_1x1vht
[
WL_NUM_RATES_EXTRA_VHT
];

2199 
uöt8
 
	mb20_1x2cdd_vht
[
WL_NUM_RATES_EXTRA_VHT
];

2200 
uöt8
 
	mb20_2x2°bc_vht
[
WL_NUM_RATES_EXTRA_VHT
];

2201 
uöt8
 
	mb20_2x2sdm_vht
[
WL_NUM_RATES_EXTRA_VHT
];

2202 
uöt8
 
	mb20_1x3cdd_vht
[
WL_NUM_RATES_EXTRA_VHT
];

2203 
uöt8
 
	mb20_2x3°bc_vht
[
WL_NUM_RATES_EXTRA_VHT
];

2204 
uöt8
 
	mb20_2x3sdm_vht
[
WL_NUM_RATES_EXTRA_VHT
];

2205 
uöt8
 
	mb20_3x3sdm_vht
[
WL_NUM_RATES_EXTRA_VHT
];

2208 
uöt8
 
	mb40_dummy1x1dsss
[
WL_NUM_RATES_CCK
];

2209 
uöt8
 
	mb40_1x1ofdm
[
WL_NUM_RATES_OFDM
];

2210 
uöt8
 
	mb40_1x1mcs0
[
WL_NUM_RATES_MCS_1STREAM
];

2212 
uöt8
 
	mb40_dummy1x2dsss
[
WL_NUM_RATES_CCK
];

2213 
uöt8
 
	mb40_1x2cdd_ofdm
[
WL_NUM_RATES_OFDM
];

2214 
uöt8
 
	mb40_1x2cdd_mcs0
[
WL_NUM_RATES_MCS_1STREAM
];

2215 
uöt8
 
	mb40_2x2°bc_mcs0
[
WL_NUM_RATES_MCS_1STREAM
];

2216 
uöt8
 
	mb40_2x2sdm_mcs8
[
WL_NUM_RATES_MCS_1STREAM
];

2218 
uöt8
 
	mb40_dummy1x3dsss
[
WL_NUM_RATES_CCK
];

2219 
uöt8
 
	mb40_1x3cdd_ofdm
[
WL_NUM_RATES_OFDM
];

2220 
uöt8
 
	mb40_1x3cdd_mcs0
[
WL_NUM_RATES_MCS_1STREAM
];

2221 
uöt8
 
	mb40_2x3°bc_mcs0
[
WL_NUM_RATES_MCS_1STREAM
];

2222 
uöt8
 
	mb40_2x3sdm_mcs8
[
WL_NUM_RATES_MCS_1STREAM
];

2223 
uöt8
 
	mb40_3x3sdm_mcs16
[
WL_NUM_RATES_MCS_1STREAM
];

2225 
uöt8
 
	mb40_1x1vht
[
WL_NUM_RATES_EXTRA_VHT
];

2226 
uöt8
 
	mb40_1x2cdd_vht
[
WL_NUM_RATES_EXTRA_VHT
];

2227 
uöt8
 
	mb40_2x2°bc_vht
[
WL_NUM_RATES_EXTRA_VHT
];

2228 
uöt8
 
	mb40_2x2sdm_vht
[
WL_NUM_RATES_EXTRA_VHT
];

2229 
uöt8
 
	mb40_1x3cdd_vht
[
WL_NUM_RATES_EXTRA_VHT
];

2230 
uöt8
 
	mb40_2x3°bc_vht
[
WL_NUM_RATES_EXTRA_VHT
];

2231 
uöt8
 
	mb40_2x3sdm_vht
[
WL_NUM_RATES_EXTRA_VHT
];

2232 
uöt8
 
	mb40_3x3sdm_vht
[
WL_NUM_RATES_EXTRA_VHT
];

2235 
uöt8
 
	mb20ö40_1x1dsss
[
WL_NUM_RATES_CCK
];

2236 
uöt8
 
	mb20ö40_1x1ofdm
[
WL_NUM_RATES_OFDM
];

2237 
uöt8
 
	mb20ö40_1x1mcs0
[
WL_NUM_RATES_MCS_1STREAM
];

2239 
uöt8
 
	mb20ö40_1x2dsss
[
WL_NUM_RATES_CCK
];

2240 
uöt8
 
	mb20ö40_1x2cdd_ofdm
[
WL_NUM_RATES_OFDM
];

2241 
uöt8
 
	mb20ö40_1x2cdd_mcs0
[
WL_NUM_RATES_MCS_1STREAM
];

2242 
uöt8
 
	mb20ö40_2x2°bc_mcs0
[
WL_NUM_RATES_MCS_1STREAM
];

2243 
uöt8
 
	mb20ö40_2x2sdm_mcs8
[
WL_NUM_RATES_MCS_1STREAM
];

2245 
uöt8
 
	mb20ö40_1x3dsss
[
WL_NUM_RATES_CCK
];

2246 
uöt8
 
	mb20ö40_1x3cdd_ofdm
[
WL_NUM_RATES_OFDM
];

2247 
uöt8
 
	mb20ö40_1x3cdd_mcs0
[
WL_NUM_RATES_MCS_1STREAM
];

2248 
uöt8
 
	mb20ö40_2x3°bc_mcs0
[
WL_NUM_RATES_MCS_1STREAM
];

2249 
uöt8
 
	mb20ö40_2x3sdm_mcs8
[
WL_NUM_RATES_MCS_1STREAM
];

2250 
uöt8
 
	mb20ö40_3x3sdm_mcs16
[
WL_NUM_RATES_MCS_1STREAM
];

2252 
uöt8
 
	mb20ö40_1x1vht
[
WL_NUM_RATES_EXTRA_VHT
];

2253 
uöt8
 
	mb20ö40_1x2cdd_vht
[
WL_NUM_RATES_EXTRA_VHT
];

2254 
uöt8
 
	mb20ö40_2x2°bc_vht
[
WL_NUM_RATES_EXTRA_VHT
];

2255 
uöt8
 
	mb20ö40_2x2sdm_vht
[
WL_NUM_RATES_EXTRA_VHT
];

2256 
uöt8
 
	mb20ö40_1x3cdd_vht
[
WL_NUM_RATES_EXTRA_VHT
];

2257 
uöt8
 
	mb20ö40_2x3°bc_vht
[
WL_NUM_RATES_EXTRA_VHT
];

2258 
uöt8
 
	mb20ö40_2x3sdm_vht
[
WL_NUM_RATES_EXTRA_VHT
];

2259 
uöt8
 
	mb20ö40_3x3sdm_vht
[
WL_NUM_RATES_EXTRA_VHT
];

2262 
uöt8
 
	mb80_dummy1x1dsss
[
WL_NUM_RATES_CCK
];

2263 
uöt8
 
	mb80_1x1ofdm
[
WL_NUM_RATES_OFDM
];

2264 
uöt8
 
	mb80_1x1mcs0
[
WL_NUM_RATES_MCS_1STREAM
];

2266 
uöt8
 
	mb80_dummy1x2dsss
[
WL_NUM_RATES_CCK
];

2267 
uöt8
 
	mb80_1x2cdd_ofdm
[
WL_NUM_RATES_OFDM
];

2268 
uöt8
 
	mb80_1x2cdd_mcs0
[
WL_NUM_RATES_MCS_1STREAM
];

2269 
uöt8
 
	mb80_2x2°bc_mcs0
[
WL_NUM_RATES_MCS_1STREAM
];

2270 
uöt8
 
	mb80_2x2sdm_mcs8
[
WL_NUM_RATES_MCS_1STREAM
];

2272 
uöt8
 
	mb80_dummy1x3dsss
[
WL_NUM_RATES_CCK
];

2273 
uöt8
 
	mb80_1x3cdd_ofdm
[
WL_NUM_RATES_OFDM
];

2274 
uöt8
 
	mb80_1x3cdd_mcs0
[
WL_NUM_RATES_MCS_1STREAM
];

2275 
uöt8
 
	mb80_2x3°bc_mcs0
[
WL_NUM_RATES_MCS_1STREAM
];

2276 
uöt8
 
	mb80_2x3sdm_mcs8
[
WL_NUM_RATES_MCS_1STREAM
];

2277 
uöt8
 
	mb80_3x3sdm_mcs16
[
WL_NUM_RATES_MCS_1STREAM
];

2279 
uöt8
 
	mb80_1x1vht
[
WL_NUM_RATES_EXTRA_VHT
];

2280 
uöt8
 
	mb80_1x2cdd_vht
[
WL_NUM_RATES_EXTRA_VHT
];

2281 
uöt8
 
	mb80_2x2°bc_vht
[
WL_NUM_RATES_EXTRA_VHT
];

2282 
uöt8
 
	mb80_2x2sdm_vht
[
WL_NUM_RATES_EXTRA_VHT
];

2283 
uöt8
 
	mb80_1x3cdd_vht
[
WL_NUM_RATES_EXTRA_VHT
];

2284 
uöt8
 
	mb80_2x3°bc_vht
[
WL_NUM_RATES_EXTRA_VHT
];

2285 
uöt8
 
	mb80_2x3sdm_vht
[
WL_NUM_RATES_EXTRA_VHT
];

2286 
uöt8
 
	mb80_3x3sdm_vht
[
WL_NUM_RATES_EXTRA_VHT
];

2289 
uöt8
 
	mb20ö80_1x1dsss
[
WL_NUM_RATES_CCK
];

2290 
uöt8
 
	mb20ö80_1x1ofdm
[
WL_NUM_RATES_OFDM
];

2291 
uöt8
 
	mb20ö80_1x1mcs0
[
WL_NUM_RATES_MCS_1STREAM
];

2293 
uöt8
 
	mb20ö80_1x2dsss
[
WL_NUM_RATES_CCK
];

2294 
uöt8
 
	mb20ö80_1x2cdd_ofdm
[
WL_NUM_RATES_OFDM
];

2295 
uöt8
 
	mb20ö80_1x2cdd_mcs0
[
WL_NUM_RATES_MCS_1STREAM
];

2296 
uöt8
 
	mb20ö80_2x2°bc_mcs0
[
WL_NUM_RATES_MCS_1STREAM
];

2297 
uöt8
 
	mb20ö80_2x2sdm_mcs8
[
WL_NUM_RATES_MCS_1STREAM
];

2299 
uöt8
 
	mb20ö80_1x3dsss
[
WL_NUM_RATES_CCK
];

2300 
uöt8
 
	mb20ö80_1x3cdd_ofdm
[
WL_NUM_RATES_OFDM
];

2301 
uöt8
 
	mb20ö80_1x3cdd_mcs0
[
WL_NUM_RATES_MCS_1STREAM
];

2302 
uöt8
 
	mb20ö80_2x3°bc_mcs0
[
WL_NUM_RATES_MCS_1STREAM
];

2303 
uöt8
 
	mb20ö80_2x3sdm_mcs8
[
WL_NUM_RATES_MCS_1STREAM
];

2304 
uöt8
 
	mb20ö80_3x3sdm_mcs16
[
WL_NUM_RATES_MCS_1STREAM
];

2306 
uöt8
 
	mb20ö80_1x1vht
[
WL_NUM_RATES_EXTRA_VHT
];

2307 
uöt8
 
	mb20ö80_1x2cdd_vht
[
WL_NUM_RATES_EXTRA_VHT
];

2308 
uöt8
 
	mb20ö80_2x2°bc_vht
[
WL_NUM_RATES_EXTRA_VHT
];

2309 
uöt8
 
	mb20ö80_2x2sdm_vht
[
WL_NUM_RATES_EXTRA_VHT
];

2310 
uöt8
 
	mb20ö80_1x3cdd_vht
[
WL_NUM_RATES_EXTRA_VHT
];

2311 
uöt8
 
	mb20ö80_2x3°bc_vht
[
WL_NUM_RATES_EXTRA_VHT
];

2312 
uöt8
 
	mb20ö80_2x3sdm_vht
[
WL_NUM_RATES_EXTRA_VHT
];

2313 
uöt8
 
	mb20ö80_3x3sdm_vht
[
WL_NUM_RATES_EXTRA_VHT
];

2316 
uöt8
 
	mb40ö80_dummy1x1dsss
[
WL_NUM_RATES_CCK
];

2317 
uöt8
 
	mb40ö80_1x1ofdm
[
WL_NUM_RATES_OFDM
];

2318 
uöt8
 
	mb40ö80_1x1mcs0
[
WL_NUM_RATES_MCS_1STREAM
];

2320 
uöt8
 
	mb40ö80_dummy1x2dsss
[
WL_NUM_RATES_CCK
];

2321 
uöt8
 
	mb40ö80_1x2cdd_ofdm
[
WL_NUM_RATES_OFDM
];

2322 
uöt8
 
	mb40ö80_1x2cdd_mcs0
[
WL_NUM_RATES_MCS_1STREAM
];

2323 
uöt8
 
	mb40ö80_2x2°bc_mcs0
[
WL_NUM_RATES_MCS_1STREAM
];

2324 
uöt8
 
	mb40ö80_2x2sdm_mcs8
[
WL_NUM_RATES_MCS_1STREAM
];

2326 
uöt8
 
	mb40ö80_dummy1x3dsss
[
WL_NUM_RATES_CCK
];

2327 
uöt8
 
	mb40ö80_1x3cdd_ofdm
[
WL_NUM_RATES_OFDM
];

2328 
uöt8
 
	mb40ö80_1x3cdd_mcs0
[
WL_NUM_RATES_MCS_1STREAM
];

2329 
uöt8
 
	mb40ö80_2x3°bc_mcs0
[
WL_NUM_RATES_MCS_1STREAM
];

2330 
uöt8
 
	mb40ö80_2x3sdm_mcs8
[
WL_NUM_RATES_MCS_1STREAM
];

2331 
uöt8
 
	mb40ö80_3x3sdm_mcs16
[
WL_NUM_RATES_MCS_1STREAM
];

2333 
uöt8
 
	mb40ö80_1x1vht
[
WL_NUM_RATES_EXTRA_VHT
];

2334 
uöt8
 
	mb40ö80_1x2cdd_vht
[
WL_NUM_RATES_EXTRA_VHT
];

2335 
uöt8
 
	mb40ö80_2x2°bc_vht
[
WL_NUM_RATES_EXTRA_VHT
];

2336 
uöt8
 
	mb40ö80_2x2sdm_vht
[
WL_NUM_RATES_EXTRA_VHT
];

2337 
uöt8
 
	mb40ö80_1x3cdd_vht
[
WL_NUM_RATES_EXTRA_VHT
];

2338 
uöt8
 
	mb40ö80_2x3°bc_vht
[
WL_NUM_RATES_EXTRA_VHT
];

2339 
uöt8
 
	mb40ö80_2x3sdm_vht
[
WL_NUM_RATES_EXTRA_VHT
];

2340 
uöt8
 
	mb40ö80_3x3sdm_vht
[
WL_NUM_RATES_EXTRA_VHT
];

2342 
uöt8
 
	mmcs32
;

2343 } 
	ttxµr_t
;

2346 
	#WL_TX_POWER_CCK_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b20_1x1dsss
)

	)

2347 
	#WL_TX_POWER_OFDM20_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b20_1x1ofdm
)

	)

2348 
	#WL_TX_POWER_MCS20_SISO_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b20_1x1mcs0
)

	)

2349 
	#WL_TX_POWER_20_S1x1_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b20_1x1mcs0
)

	)

2351 
	#WL_TX_POWER_CCK_CDD_S1x2_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b20_1x2dsss
)

	)

2352 
	#WL_TX_POWER_OFDM20_CDD_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b20_1x2cdd_ofdm
)

	)

2353 
	#WL_TX_POWER_MCS20_CDD_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b20_1x2cdd_mcs0
)

	)

2354 
	#WL_TX_POWER_20_S1x2_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b20_1x2cdd_mcs0
)

	)

2355 
	#WL_TX_POWER_MCS20_STBC_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b20_2x2°bc_mcs0
)

	)

2356 
	#WL_TX_POWER_MCS20_SDM_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b20_2x2sdm_mcs8
)

	)

2357 
	#WL_TX_POWER_20_S2x2_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b20_2x2sdm_mcs8
)

	)

2359 
	#WL_TX_POWER_CCK_CDD_S1x3_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b20_1x3dsss
)

	)

2360 
	#WL_TX_POWER_OFDM20_CDD_S1x3_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b20_1x3cdd_ofdm
)

	)

2361 
	#WL_TX_POWER_20_S1x3_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b20_1x3cdd_mcs0
)

	)

2362 
	#WL_TX_POWER_20_STBC_S2x3_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b20_2x3°bc_mcs0
)

	)

2363 
	#WL_TX_POWER_20_S2x3_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b20_2x3sdm_mcs8
)

	)

2364 
	#WL_TX_POWER_20_S3x3_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b20_3x3sdm_mcs16
)

	)

2366 
	#WL_TX_POWER_20_S1X1_VHT
 
	`OFFSETOF
(
txµr_t
, 
b20_1x1vht
)

	)

2367 
	#WL_TX_POWER_20_S1X2_CDD_VHT
 
	`OFFSETOF
(
txµr_t
, 
b20_1x2cdd_vht
)

	)

2368 
	#WL_TX_POWER_20_S2X2_STBC_VHT
 
	`OFFSETOF
(
txµr_t
, 
b20_2x2°bc_vht
)

	)

2369 
	#WL_TX_POWER_20_S2X2_VHT
 
	`OFFSETOF
(
txµr_t
, 
b20_2x2sdm_vht
)

	)

2370 
	#WL_TX_POWER_20_S1X3_CDD_VHT
 
	`OFFSETOF
(
txµr_t
, 
b20_1x3cdd_vht
)

	)

2371 
	#WL_TX_POWER_20_S2X3_STBC_VHT
 
	`OFFSETOF
(
txµr_t
, 
b20_2x3°bc_vht
)

	)

2372 
	#WL_TX_POWER_20_S2X3_VHT
 
	`OFFSETOF
(
txµr_t
, 
b20_2x3sdm_vht
)

	)

2373 
	#WL_TX_POWER_20_S3X3_VHT
 
	`OFFSETOF
(
txµr_t
, 
b20_3x3sdm_vht
)

	)

2376 
	#WL_TX_POWER_40_DUMMY_CCK_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b40_dummy1x1dsss
)

	)

2377 
	#WL_TX_POWER_OFDM40_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b40_1x1ofdm
)

	)

2378 
	#WL_TX_POWER_MCS40_SISO_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b40_1x1mcs0
)

	)

2379 
	#WL_TX_POWER_40_S1x1_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b40_1x1mcs0
)

	)

2381 
	#WL_TX_POWER_40_DUMMY_CCK_CDD_S1x2_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b40_dummy1x2dsss
)

	)

2382 
	#WL_TX_POWER_OFDM40_CDD_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b40_1x2cdd_ofdm
)

	)

2383 
	#WL_TX_POWER_MCS40_CDD_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b40_1x2cdd_mcs0
)

	)

2384 
	#WL_TX_POWER_40_S1x2_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b40_1x2cdd_mcs0
)

	)

2385 
	#WL_TX_POWER_MCS40_STBC_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b40_2x2°bc_mcs0
)

	)

2386 
	#WL_TX_POWER_MCS40_SDM_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b40_2x2sdm_mcs8
)

	)

2387 
	#WL_TX_POWER_40_S2x2_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b40_2x2sdm_mcs8
)

	)

2389 
	#WL_TX_POWER_40_DUMMY_CCK_CDD_S1x3_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b40_dummy1x3dsss
)

	)

2390 
	#WL_TX_POWER_OFDM40_CDD_S1x3_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b40_1x3cdd_ofdm
)

	)

2391 
	#WL_TX_POWER_40_S1x3_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b40_1x3cdd_mcs0
)

	)

2392 
	#WL_TX_POWER_40_STBC_S2x3_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b40_2x3°bc_mcs0
)

	)

2393 
	#WL_TX_POWER_40_S2x3_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b40_2x3sdm_mcs8
)

	)

2394 
	#WL_TX_POWER_40_S3x3_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b40_3x3sdm_mcs16
)

	)

2396 
	#WL_TX_POWER_40_S1X1_VHT
 
	`OFFSETOF
(
txµr_t
, 
b40_1x1vht
)

	)

2397 
	#WL_TX_POWER_40_S1X2_CDD_VHT
 
	`OFFSETOF
(
txµr_t
, 
b40_1x2cdd_vht
)

	)

2398 
	#WL_TX_POWER_40_S2X2_STBC_VHT
 
	`OFFSETOF
(
txµr_t
, 
b40_2x2°bc_vht
)

	)

2399 
	#WL_TX_POWER_40_S2X2_VHT
 
	`OFFSETOF
(
txµr_t
, 
b40_2x2sdm_vht
)

	)

2400 
	#WL_TX_POWER_40_S1X3_CDD_VHT
 
	`OFFSETOF
(
txµr_t
, 
b40_1x3cdd_vht
)

	)

2401 
	#WL_TX_POWER_40_S2X3_STBC_VHT
 
	`OFFSETOF
(
txµr_t
, 
b40_2x3°bc_vht
)

	)

2402 
	#WL_TX_POWER_40_S2X3_VHT
 
	`OFFSETOF
(
txµr_t
, 
b40_2x3sdm_vht
)

	)

2403 
	#WL_TX_POWER_40_S3X3_VHT
 
	`OFFSETOF
(
txµr_t
, 
b40_3x3sdm_vht
)

	)

2406 
	#WL_TX_POWER_20UL_CCK_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b20ö40_1x1dsss
)

	)

2407 
	#WL_TX_POWER_20UL_OFDM_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b20ö40_1x1ofdm
)

	)

2408 
	#WL_TX_POWER_20UL_S1x1_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b20ö40_1x1mcs0
)

	)

2410 
	#WL_TX_POWER_CCK_20U_CDD_S1x2_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b20ö40_1x2dsss
)

	)

2411 
	#WL_TX_POWER_20UL_OFDM_CDD_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b20ö40_1x2cdd_ofdm
)

	)

2412 
	#WL_TX_POWER_20UL_S1x2_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b20ö40_1x2cdd_mcs0
)

	)

2413 
	#WL_TX_POWER_20UL_STBC_S2x2_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b20ö40_2x2°bc_mcs0
)

	)

2414 
	#WL_TX_POWER_20UL_S2x2_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b20ö40_2x2sdm_mcs8
)

	)

2416 
	#WL_TX_POWER_CCK_20U_CDD_S1x3_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b20ö40_1x3dsss
)

	)

2417 
	#WL_TX_POWER_20UL_OFDM_CDD_S1x3_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b20ö40_1x3cdd_ofdm
)

	)

2418 
	#WL_TX_POWER_20UL_S1x3_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b20ö40_1x3cdd_mcs0
)

	)

2419 
	#WL_TX_POWER_20UL_STBC_S2x3_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b20ö40_2x3°bc_mcs0
)

	)

2420 
	#WL_TX_POWER_20UL_S2x3_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b20ö40_2x3sdm_mcs8
)

	)

2421 
	#WL_TX_POWER_20UL_S3x3_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b20ö40_3x3sdm_mcs16
)

	)

2423 
	#WL_TX_POWER_20UL_S1X1_VHT
 
	`OFFSETOF
(
txµr_t
, 
b20ö40_1x1vht
)

	)

2424 
	#WL_TX_POWER_20UL_S1X2_CDD_VHT
 
	`OFFSETOF
(
txµr_t
, 
b20ö40_1x2cdd_vht
)

	)

2425 
	#WL_TX_POWER_20UL_S2X2_STBC_VHT
 
	`OFFSETOF
(
txµr_t
, 
b20ö40_2x2°bc_vht
)

	)

2426 
	#WL_TX_POWER_20UL_S2X2_VHT
 
	`OFFSETOF
(
txµr_t
, 
b20ö40_2x2sdm_vht
)

	)

2427 
	#WL_TX_POWER_20UL_S1X3_CDD_VHT
 
	`OFFSETOF
(
txµr_t
, 
b20ö40_1x3cdd_vht
)

	)

2428 
	#WL_TX_POWER_20UL_S2X3_STBC_VHT
 
	`OFFSETOF
(
txµr_t
, 
b20ö40_2x3°bc_vht
)

	)

2429 
	#WL_TX_POWER_20UL_S2X3_VHT
 
	`OFFSETOF
(
txµr_t
, 
b20ö40_2x3sdm_vht
)

	)

2430 
	#WL_TX_POWER_20UL_S3X3_VHT
 
	`OFFSETOF
(
txµr_t
, 
b20ö40_3x3sdm_vht
)

	)

2433 
	#WL_TX_POWER_80_DUMMY_CCK_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b80_dummy1x1dsss
)

	)

2434 
	#WL_TX_POWER_OFDM80_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b80_1x1ofdm
)

	)

2435 
	#WL_TX_POWER_MCS80_SISO_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b80_1x1mcs0
)

	)

2436 
	#WL_TX_POWER_80_S1x1_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b80_1x1mcs0
)

	)

2438 
	#WL_TX_POWER_80_DUMMY_CCK_CDD_S1x2_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b80_dummy1x2dsss
)

	)

2439 
	#WL_TX_POWER_OFDM80_CDD_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b80_1x2cdd_ofdm
)

	)

2440 
	#WL_TX_POWER_MCS80_CDD_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b80_1x2cdd_mcs0
)

	)

2441 
	#WL_TX_POWER_80_S1x2_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b80_1x2cdd_mcs0
)

	)

2442 
	#WL_TX_POWER_MCS80_STBC_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b80_2x2°bc_mcs0
)

	)

2443 
	#WL_TX_POWER_MCS80_SDM_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b80_2x2sdm_mcs8
)

	)

2444 
	#WL_TX_POWER_80_S2x2_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b80_2x2sdm_mcs8
)

	)

2446 
	#WL_TX_POWER_80_DUMMY_CCK_CDD_S1x3_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b80_dummy1x3dsss
)

	)

2447 
	#WL_TX_POWER_OFDM80_CDD_S1x3_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b80_1x3cdd_ofdm
)

	)

2448 
	#WL_TX_POWER_80_S1x3_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b80_1x3cdd_mcs0
)

	)

2449 
	#WL_TX_POWER_80_STBC_S2x3_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b80_2x3°bc_mcs0
)

	)

2450 
	#WL_TX_POWER_80_S2x3_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b80_2x3sdm_mcs8
)

	)

2451 
	#WL_TX_POWER_80_S3x3_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b80_3x3sdm_mcs16
)

	)

2453 
	#WL_TX_POWER_80_S1X1_VHT
 
	`OFFSETOF
(
txµr_t
, 
b80_1x1vht
)

	)

2454 
	#WL_TX_POWER_80_S1X2_CDD_VHT
 
	`OFFSETOF
(
txµr_t
, 
b80_1x2cdd_vht
)

	)

2455 
	#WL_TX_POWER_80_S2X2_STBC_VHT
 
	`OFFSETOF
(
txµr_t
, 
b80_2x2°bc_vht
)

	)

2456 
	#WL_TX_POWER_80_S2X2_VHT
 
	`OFFSETOF
(
txµr_t
, 
b80_2x2sdm_vht
)

	)

2457 
	#WL_TX_POWER_80_S1X3_CDD_VHT
 
	`OFFSETOF
(
txµr_t
, 
b80_1x3cdd_vht
)

	)

2458 
	#WL_TX_POWER_80_S2X3_STBC_VHT
 
	`OFFSETOF
(
txµr_t
, 
b80_2x3°bc_vht
)

	)

2459 
	#WL_TX_POWER_80_S2X3_VHT
 
	`OFFSETOF
(
txµr_t
, 
b80_2x3sdm_vht
)

	)

2460 
	#WL_TX_POWER_80_S3X3_VHT
 
	`OFFSETOF
(
txµr_t
, 
b80_3x3sdm_vht
)

	)

2463 
	#WL_TX_POWER_20UUL_CCK_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b20ö80_1x1dsss
)

	)

2464 
	#WL_TX_POWER_20UUL_OFDM_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b20ö80_1x1ofdm
)

	)

2465 
	#WL_TX_POWER_20UUL_S1x1_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b20ö80_1x1mcs0
)

	)

2467 
	#WL_TX_POWER_CCK_20UU_CDD_S1x2_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b20ö80_1x2dsss
)

	)

2468 
	#WL_TX_POWER_20UUL_OFDM_CDD_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b20ö80_1x2cdd_ofdm
)

	)

2469 
	#WL_TX_POWER_20UUL_S1x2_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b20ö80_1x2cdd_mcs0
)

	)

2470 
	#WL_TX_POWER_20UUL_STBC_S2x2_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b20ö80_2x2°bc_mcs0
)

	)

2471 
	#WL_TX_POWER_20UUL_S2x2_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b20ö80_2x2sdm_mcs8
)

	)

2473 
	#WL_TX_POWER_CCK_20UU_CDD_S1x3_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b20ö80_1x3dsss
)

	)

2474 
	#WL_TX_POWER_20UUL_OFDM_CDD_S1x3_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b20ö80_1x3cdd_ofdm
)

	)

2475 
	#WL_TX_POWER_20UUL_S1x3_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b20ö80_1x3cdd_mcs0
)

	)

2476 
	#WL_TX_POWER_20UUL_STBC_S2x3_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b20ö80_2x3°bc_mcs0
)

	)

2477 
	#WL_TX_POWER_20UUL_S2x3_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b20ö80_2x3sdm_mcs8
)

	)

2478 
	#WL_TX_POWER_20UUL_S3x3_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b20ö80_3x3sdm_mcs16
)

	)

2480 
	#WL_TX_POWER_20UUL_S1X1_VHT
 
	`OFFSETOF
(
txµr_t
, 
b20ö80_1x1vht
)

	)

2481 
	#WL_TX_POWER_20UUL_S1X2_CDD_VHT
 
	`OFFSETOF
(
txµr_t
, 
b20ö80_1x2cdd_vht
)

	)

2482 
	#WL_TX_POWER_20UUL_S2X2_STBC_VHT
 
	`OFFSETOF
(
txµr_t
, 
b20ö80_2x2°bc_vht
)

	)

2483 
	#WL_TX_POWER_20UUL_S2X2_VHT
 
	`OFFSETOF
(
txµr_t
, 
b20ö80_2x2sdm_vht
)

	)

2484 
	#WL_TX_POWER_20UUL_S1X3_CDD_VHT
 
	`OFFSETOF
(
txµr_t
, 
b20ö80_1x3cdd_vht
)

	)

2485 
	#WL_TX_POWER_20UUL_S2X3_STBC_VHT
 
	`OFFSETOF
(
txµr_t
, 
b20ö80_2x3°bc_vht
)

	)

2486 
	#WL_TX_POWER_20UUL_S2X3_VHT
 
	`OFFSETOF
(
txµr_t
, 
b20ö80_2x3sdm_vht
)

	)

2487 
	#WL_TX_POWER_20UUL_S3X3_VHT
 
	`OFFSETOF
(
txµr_t
, 
b20ö80_3x3sdm_vht
)

	)

2490 
	#WL_TX_POWER_40UUL_DUMMY_CCK_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b40ö80_dummy1x1dsss
)

	)

2491 
	#WL_TX_POWER_40UUL_OFDM_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b40ö80_1x1ofdm
)

	)

2492 
	#WL_TX_POWER_40UUL_S1x1_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b40ö80_1x1mcs0
)

	)

2494 
	#WL_TX_POWER_CCK_40UU_DUMMY_CDD_S1x2_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b40ö80_dummy1x2dsss
)

	)

2495 
	#WL_TX_POWER_40UUL_OFDM_CDD_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b40ö80_1x2cdd_ofdm
)

	)

2496 
	#WL_TX_POWER_40UUL_S1x2_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b40ö80_1x2cdd_mcs0
)

	)

2497 
	#WL_TX_POWER_40UUL_STBC_S2x2_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b40ö80_2x2°bc_mcs0
)

	)

2498 
	#WL_TX_POWER_40UUL_S2x2_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b40ö80_2x2sdm_mcs8
)

	)

2500 
	#WL_TX_POWER_CCK_40UU_DUMMY_CDD_S1x3_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b40ö80_dummy1x3dsss
)

	)

2501 
	#WL_TX_POWER_40UUL_OFDM_CDD_S1x3_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b40ö80_1x3cdd_ofdm
)

	)

2502 
	#WL_TX_POWER_40UUL_S1x3_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b40ö80_1x3cdd_mcs0
)

	)

2503 
	#WL_TX_POWER_40UUL_STBC_S2x3_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b40ö80_2x3°bc_mcs0
)

	)

2504 
	#WL_TX_POWER_40UUL_S2x3_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b40ö80_2x3sdm_mcs8
)

	)

2505 
	#WL_TX_POWER_40UUL_S3x3_FIRST
 
	`OFFSETOF
(
txµr_t
, 
b40ö80_3x3sdm_mcs16
)

	)

2507 
	#WL_TX_POWER_40UUL_S1X1_VHT
 
	`OFFSETOF
(
txµr_t
, 
b40ö80_1x1vht
)

	)

2508 
	#WL_TX_POWER_40UUL_S1X2_CDD_VHT
 
	`OFFSETOF
(
txµr_t
, 
b40ö80_1x2cdd_vht
)

	)

2509 
	#WL_TX_POWER_40UUL_S2X2_STBC_VHT
 
	`OFFSETOF
(
txµr_t
, 
b40ö80_2x2°bc_vht
)

	)

2510 
	#WL_TX_POWER_40UUL_S2X2_VHT
 
	`OFFSETOF
(
txµr_t
, 
b40ö80_2x2sdm_vht
)

	)

2511 
	#WL_TX_POWER_40UUL_S1X3_CDD_VHT
 
	`OFFSETOF
(
txµr_t
, 
b40ö80_1x3cdd_vht
)

	)

2512 
	#WL_TX_POWER_40UUL_S2X3_STBC_VHT
 
	`OFFSETOF
(
txµr_t
, 
b40ö80_2x3°bc_vht
)

	)

2513 
	#WL_TX_POWER_40UUL_S2X3_VHT
 
	`OFFSETOF
(
txµr_t
, 
b40ö80_2x3sdm_vht
)

	)

2514 
	#WL_TX_POWER_40UUL_S3X3_VHT
 
	`OFFSETOF
(
txµr_t
, 
b40ö80_3x3sdm_vht
)

	)

2516 
	#WL_TX_POWER_MCS_32
 
	`OFFSETOF
(
txµr_t
, 
mcs32
Ë

	)

2518 
	#WL_TX_POWER_RATES
 (
txµr
)

	)

2521 
	#WL_TX_POWER_MCS20_SISO_FIRST_SSN
 
WL_TX_POWER_MCS20_SISO_FIRST


	)

2522 
	#WL_TX_POWER_MCS40_SISO_FIRST_SSN
 
WL_TX_POWER_MCS40_SISO_FIRST


	)

2525 
	#WL_TX_POWER_F_ENABLED
 1

	)

2526 
	#WL_TX_POWER_F_HW
 2

	)

2527 
	#WL_TX_POWER_F_MIMO
 4

	)

2528 
	#WL_TX_POWER_F_SISO
 8

	)

2529 
	#WL_TX_POWER_F_HT
 0x10

	)

2532 
uöt16
 
	mvî
;

2533 
uöt16
 
	mÀn
;

2534 
uöt32
 
	mÊags
;

2535 
ch™•ec_t
 
	mch™•ec
;

2536 
ch™•ec_t
 
	mloˇl_ch™•ec
;

2537 
uöt8
 
	mµr
[
WL_TX_POWER_RATES
];

2538 } 
	twl_txµr_t
;

2540 
	#WL_TXPPR_VERSION
 0

	)

2541 
	#WL_TXPPR_LENGTH
 ((
wl_txµr_t
))

	)

2542 
	#TX_POWER_T_VERSION
 43

	)

2545 
	#WL_BW_20MHZ
 0

	)

2546 
	#WL_BW_40MHZ
 1

	)

2547 
	#WL_BW_80MHZ
 2

	)

2550 #ifde‡
PPR_API


2551 
	#WL_TX_POWER2_F_ENABLED
 1

	)

2552 
	#WL_TX_POWER2_F_HW
 2

	)

2553 
	#WL_TX_POWER2_F_MIMO
 4

	)

2554 
	#WL_TX_POWER2_F_SISO
 8

	)

2555 
	#WL_TX_POWER2_F_HT
 0x10

	)

2557 
	#WL_TX_POWER_F_ENABLED
 1

	)

2558 
	#WL_TX_POWER_F_HW
 2

	)

2559 
	#WL_TX_POWER_F_MIMO
 4

	)

2560 
	#WL_TX_POWER_F_SISO
 8

	)

2561 
	#WL_TX_POWER_F_HT
 0x10

	)

2564 
uöt32
 
	mÊags
;

2565 
ch™•ec_t
 
	mch™•ec
;

2566 
ch™•ec_t
 
	mloˇl_ch™•ec
;

2567 
uöt8
 
	mloˇl_max
;

2568 
uöt8
 
	mloˇl_c⁄°øöt
;

2569 
öt8
 
	m™tgaö
[2];

2570 
uöt8
 
	mrf_c‹es
;

2571 
uöt8
 
	me°_Pout
[4];

2572 
uöt8
 
	me°_Pout_a˘
[4];

2575 
uöt8
 
	me°_Pout_cck
;

2576 
uöt8
 
	mtx_powî_max
[4];

2577 
uöt
 
	mtx_powî_max_øã_öd
[4];

2578 
uöt8
 
	mu£r_limô
[
WL_TX_POWER_RATES
];

2579 
öt8
 
	mbﬂrd_limô
[
WL_TX_POWER_RATES
];

2580 
öt8
 
	mèrgë
[
WL_TX_POWER_RATES
];

2581 
öt8
 
	m˛m_limôs
[
WL_NUMRATES
];

2582 
öt8
 
	m˛m_limôs_subch™1
[
WL_NUMRATES
];

2583 
öt8
 
	m˛m_limôs_subch™2
[
WL_NUMRATES
];

2584 
öt8
 
	mßr
;

2585 
öt8
 
	mch™√l_b™dwidth
;

2586 
uöt8
 
	mvîsi⁄
;

2587 
uöt8
 
	mdi•œy_c‹e
;

2588 #ifde‡
PPR_API


2589 } 
	ttx_powî_√w_t
;

2591 } 
	gtx_powî_t
;

2594 
	stx_ö°_powî
 {

2595 
uöt8
 
	mtxpwr_e°_Pout
[2];

2596 
uöt8
 
	mtxpwr_e°_Pout_gofdm
;

2597 } 
	ttx_ö°_powî_t
;

2601 
uöt32
 
	mÊags
;

2602 
ch™•ec_t
 
	mch™•ec
;

2603 
ch™•ec_t
 
	mloˇl_ch™•ec
;

2604 
uöt8
 
	mloˇl_max
;

2605 
uöt8
 
	mloˇl_c⁄°øöt
;

2606 
öt8
 
	m™tgaö
[2];

2607 
uöt8
 
	mrf_c‹es
;

2608 
uöt8
 
	me°_Pout
[4];

2609 
uöt8
 
	me°_Pout_a˘
[4];

2612 
uöt8
 
	me°_Pout_cck
;

2613 
uöt8
 
	mtx_powî_max
[4];

2614 
uöt
 
	mtx_powî_max_øã_öd
[4];

2615 
txµr_t
 
	mu£r_limô
;

2616 
txµr_t
 
	mªg_limô
;

2617 
txµr_t
 
	mbﬂrd_limô
;

2618 
txµr_t
 
	mèrgë
;

2619 } 
	twl_txpwr_t
;

2621 
	#WL_NUM_TXCHAIN_MAX
 4

	)

2622 
	swl_txchaö_pwr_off£ts
 {

2623 
öt8
 
	moff£t
[
WL_NUM_TXCHAIN_MAX
];

2624 } 
	twl_txchaö_pwr_off£ts_t
;

2627 
	#WLC_MEASURE_TPC
 1

	)

2628 
	#WLC_MEASURE_CHANNEL_BASIC
 2

	)

2629 
	#WLC_MEASURE_CHANNEL_CCA
 3

	)

2630 
	#WLC_MEASURE_CHANNEL_RPI
 4

	)

2633 
	#SPECT_MNGMT_OFF
 0

	)

2634 
	#SPECT_MNGMT_LOOSE_11H
 1

	)

2635 
	#SPECT_MNGMT_STRICT_11H
 2

	)

2636 
	#SPECT_MNGMT_STRICT_11D
 3

	)

2640 
	#SPECT_MNGMT_LOOSE_11H_D
 4

	)

2642 
	#WL_CHAN_VALID_HW
 (1 << 0Ë

	)

2643 
	#WL_CHAN_VALID_SW
 (1 << 1Ë

	)

2644 
	#WL_CHAN_BAND_5G
 (1 << 2Ë

	)

2645 
	#WL_CHAN_RADAR
 (1 << 3Ë

	)

2646 
	#WL_CHAN_INACTIVE
 (1 << 4Ë

	)

2647 
	#WL_CHAN_PASSIVE
 (1 << 5Ë

	)

2648 
	#WL_CHAN_RESTRICTED
 (1 << 6Ë

	)

2651 
	#WL_BTC_DISABLE
 0

	)

2652 
	#WL_BTC_FULLTDM
 1

	)

2653 
	#WL_BTC_ENABLE
 1

	)

2654 
	#WL_BTC_PREMPT
 2

	)

2655 
	#WL_BTC_LITE
 3

	)

2656 
	#WL_BTC_PARALLEL
 4

	)

2657 
	#WL_BTC_HYBRID
 5

	)

2658 
	#WL_BTC_DEFAULT
 8

	)

2659 
	#WL_INF_BTC_DISABLE
 0

	)

2660 
	#WL_INF_BTC_ENABLE
 1

	)

2661 
	#WL_INF_BTC_AUTO
 3

	)

2664 
	#WL_BTC_DEFWIRE
 0

	)

2665 
	#WL_BTC_2WIRE
 2

	)

2666 
	#WL_BTC_3WIRE
 3

	)

2667 
	#WL_BTC_4WIRE
 4

	)

2670 
	#WL_BTC_FLAG_PREMPT
 (1 << 0)

	)

2671 
	#WL_BTC_FLAG_BT_DEF
 (1 << 1)

	)

2672 
	#WL_BTC_FLAG_ACTIVE_PROT
 (1 << 2)

	)

2673 
	#WL_BTC_FLAG_SIM_RSP
 (1 << 3)

	)

2674 
	#WL_BTC_FLAG_PS_PROTECT
 (1 << 4)

	)

2675 
	#WL_BTC_FLAG_SIM_TX_LP
 (1 << 5)

	)

2676 
	#WL_BTC_FLAG_ECI
 (1 << 6)

	)

2677 
	#WL_BTC_FLAG_LIGHT
 (1 << 7)

	)

2678 
	#WL_BTC_FLAG_PARALLEL
 (1 << 8)

	)

2681 
	#WL_ERROR_VAL
 0x00000001

	)

2682 
	#WL_TRACE_VAL
 0x00000002

	)

2683 
	#WL_PRHDRS_VAL
 0x00000004

	)

2684 
	#WL_PRPKT_VAL
 0x00000008

	)

2685 
	#WL_INFORM_VAL
 0x00000010

	)

2686 
	#WL_TMP_VAL
 0x00000020

	)

2687 
	#WL_OID_VAL
 0x00000040

	)

2688 
	#WL_RATE_VAL
 0x00000080

	)

2689 
	#WL_ASSOC_VAL
 0x00000100

	)

2690 
	#WL_PRUSR_VAL
 0x00000200

	)

2691 
	#WL_PS_VAL
 0x00000400

	)

2692 
	#WL_TXPWR_VAL
 0x00000800

	)

2693 
	#WL_PORT_VAL
 0x00001000

	)

2694 
	#WL_DUAL_VAL
 0x00002000

	)

2695 
	#WL_WSEC_VAL
 0x00004000

	)

2696 
	#WL_WSEC_DUMP_VAL
 0x00008000

	)

2697 
	#WL_LOG_VAL
 0x00010000

	)

2698 
	#WL_NRSSI_VAL
 0x00020000

	)

2699 
	#WL_LOFT_VAL
 0x00040000

	)

2700 
	#WL_REGULATORY_VAL
 0x00080000

	)

2701 
	#WL_PHYCAL_VAL
 0x00100000

	)

2702 
	#WL_RADAR_VAL
 0x00200000

	)

2703 
	#WL_MPC_VAL
 0x00400000

	)

2704 
	#WL_APSTA_VAL
 0x00800000

	)

2705 
	#WL_DFS_VAL
 0x01000000

	)

2706 
	#WL_BA_VAL
 0x02000000

	)

2707 
	#WL_ACI_VAL
 0x04000000

	)

2708 
	#WL_MBSS_VAL
 0x04000000

	)

2709 
	#WL_CAC_VAL
 0x08000000

	)

2710 
	#WL_AMSDU_VAL
 0x10000000

	)

2711 
	#WL_AMPDU_VAL
 0x20000000

	)

2712 
	#WL_FFPLD_VAL
 0x40000000

	)

2717 
	#WL_DPT_VAL
 0x00000001

	)

2718 
	#WL_SCAN_VAL
 0x00000002

	)

2719 
	#WL_WOWL_VAL
 0x00000004

	)

2720 
	#WL_COEX_VAL
 0x00000008

	)

2721 
	#WL_RTDC_VAL
 0x00000010

	)

2722 
	#WL_PROTO_VAL
 0x00000020

	)

2723 
	#WL_BTA_VAL
 0x00000040

	)

2724 
	#WL_CHANINT_VAL
 0x00000080

	)

2725 
	#WL_THERMAL_VAL
 0x00000100

	)

2726 
	#WL_P2P_VAL
 0x00000200

	)

2727 
	#WL_ITFR_VAL
 0x00000400

	)

2728 
	#WL_MCHAN_VAL
 0x00000800

	)

2729 
	#WL_TDLS_VAL
 0x00001000

	)

2730 
	#WL_MCNX_VAL
 0x00002000

	)

2731 
	#WL_PROT_VAL
 0x00004000

	)

2732 
	#WL_PSTA_VAL
 0x00008000

	)

2733 
	#WL_TBTT_VAL
 0x00010000

	)

2734 
	#WL_NIC_VAL
 0x00020000

	)

2735 
	#WL_PWRSEL_VAL
 0x00040000

	)

2739 
	#WL_TIMESTAMP_VAL
 0x80000000

	)

2742 
	#WL_LED_NUMGPIO
 32

	)

2745 
	#WL_LED_OFF
 0

	)

2746 
	#WL_LED_ON
 1

	)

2747 
	#WL_LED_ACTIVITY
 2

	)

2748 
	#WL_LED_RADIO
 3

	)

2749 
	#WL_LED_ARADIO
 4

	)

2750 
	#WL_LED_BRADIO
 5

	)

2751 
	#WL_LED_BGMODE
 6

	)

2752 
	#WL_LED_WI1
 7

	)

2753 
	#WL_LED_WI2
 8

	)

2754 
	#WL_LED_WI3
 9

	)

2755 
	#WL_LED_ASSOC
 10

	)

2756 
	#WL_LED_INACTIVE
 11

	)

2757 
	#WL_LED_ASSOCACT
 12

	)

2758 
	#WL_LED_WI4
 13

	)

2759 
	#WL_LED_WI5
 14

	)

2760 
	#WL_LED_BLINKSLOW
 15

	)

2761 
	#WL_LED_BLINKMED
 16

	)

2762 
	#WL_LED_BLINKFAST
 17

	)

2763 
	#WL_LED_BLINKCUSTOM
 18

	)

2764 
	#WL_LED_BLINKPERIODIC
 19

	)

2765 
	#WL_LED_ASSOC_WITH_SEC
 20

	)

2767 
	#WL_LED_START_OFF
 21

	)

2768 
	#WL_LED_NUMBEHAVIOR
 22

	)

2771 
	#WL_LED_BEH_MASK
 0x7‡

	)

2772 
	#WL_LED_AL_MASK
 0x80

	)

2775 
	#WL_NUMCHANNELS
 64

	)

2778 
	#WL_NUMCHANSPECS
 110

	)

2781 
	#WL_WDS_WPA_ROLE_AUTH
 0

	)

2782 
	#WL_WDS_WPA_ROLE_SUP
 1

	)

2783 
	#WL_WDS_WPA_ROLE_AUTO
 255

	)

2786 
	#WL_EVENTING_MASK_LEN
 16

	)

2830 
	#WL_JOIN_PREF_RSSI
 1

	)

2831 
	#WL_JOIN_PREF_WPA
 2

	)

2832 
	#WL_JOIN_PREF_BAND
 3

	)

2833 
	#WL_JOIN_PREF_RSSI_DELTA
 4

	)

2834 
	#WL_JOIN_PREF_TRANS_PREF
 5

	)

2837 
	#WLJP_BAND_ASSOC_PREF
 255

	)

2840 
	#WL_WPA_ACP_MCS_ANY
 "\x00\x00\x00\x00"

	)

2842 
	stsöfo_¨g
 {

2843 
uöt8
 
	mo˘ës
[3];

2847 
	#NFIFO
 6

	)

2849 
	#WL_CNT_T_VERSION
 8

	)

2852 
uöt16
 
	mvîsi⁄
;

2853 
uöt16
 
	mÀngth
;

2856 
uöt32
 
	mtx‰ame
;

2857 
uöt32
 
	mtxbyã
;

2858 
uöt32
 
	mtxªå™s
;

2859 
uöt32
 
	mtxîr‹
;

2860 
uöt32
 
	mtx˘l
;

2861 
uöt32
 
	mtx¥sh‹t
;

2862 
uöt32
 
	mtx£º
;

2863 
uöt32
 
	mtxnobuf
;

2864 
uöt32
 
	mtxnﬂssoc
;

2865 
uöt32
 
	mtxru¡
;

2866 
uöt32
 
	mtxchô
;

2867 
uöt32
 
	mtxcmiss
;

2870 
uöt32
 
	mtxuÊo
;

2871 
uöt32
 
	mtxphyîr
;

2872 
uöt32
 
	mtxphy¸s
;

2875 
uöt32
 
	mrx‰ame
;

2876 
uöt32
 
	mrxbyã
;

2877 
uöt32
 
	mrxîr‹
;

2878 
uöt32
 
	mrx˘l
;

2879 
uöt32
 
	mrxnobuf
;

2880 
uöt32
 
	mrxn⁄d©a
;

2881 
uöt32
 
	mrxbadds
;

2882 
uöt32
 
	mrxbadcm
;

2883 
uöt32
 
	mrx‰agîr
;

2884 
uöt32
 
	mrxru¡
;

2885 
uöt32
 
	mrxgü¡
;

2886 
uöt32
 
	mrxnoscb
;

2887 
uöt32
 
	mrxbad¥Ÿo
;

2888 
uöt32
 
	mrxbad§cmac
;

2889 
uöt32
 
	mrxbadda
;

2890 
uöt32
 
	mrxfûãr
;

2893 
uöt32
 
	mrxoÊo
;

2894 
uöt32
 
	mrxuÊo
[
NFIFO
];

2896 
uöt32
 
	md11˙t_txπs_off
;

2897 
uöt32
 
	md11˙t_rx¸c_off
;

2898 
uöt32
 
	md11˙t_txno˘s_off
;

2901 
uöt32
 
	mdmade
;

2902 
uöt32
 
	mdmada
;

2903 
uöt32
 
	mdm≠e
;

2904 
uöt32
 
	mª£t
;

2905 
uöt32
 
	mtbâ
;

2906 
uöt32
 
	mtxdmaw¨
;

2907 
uöt32
 
	mpkt_ˇŒback_ªg_Áû
;

2910 
uöt32
 
	mtxÆl‰m
;

2913 
uöt32
 
	mtxπs‰m
;

2914 
uöt32
 
	mtx˘s‰m
;

2915 
uöt32
 
	mtxack‰m
;

2916 
uöt32
 
	mtxd∆‰m
;

2917 
uöt32
 
	mtxb˙‰m
;

2918 
uöt32
 
	mtxfunÊ
[8];

2919 
uöt32
 
	mtxçlunÊ
;

2922 
uöt32
 
	mtxphyîr‹
;

2925 
uöt32
 
	mrx‰mtoﬁ⁄g
;

2926 
uöt32
 
	mrx‰mtooshπ
;

2927 
uöt32
 
	mrxövmachdr
;

2930 
uöt32
 
	mrxbadfcs
;

2931 
uöt32
 
	mrxbad∂˝
;

2932 
uöt32
 
	mrx¸sglôch
;

2933 
uöt32
 
	mrx°π
;

2936 
uöt32
 
	mrxd‰muˇ°mbss
;

2937 
uöt32
 
	mrxm‰muˇ°mbss
;

2938 
uöt32
 
	mrxc‰muˇ°
;

2939 
uöt32
 
	mrxπsuˇ°
;

2940 
uöt32
 
	mrx˘suˇ°
;

2941 
uöt32
 
	mrxackuˇ°
;

2942 
uöt32
 
	mrxd‰moˇ°
;

2943 
uöt32
 
	mrxm‰moˇ°
;

2944 
uöt32
 
	mrxc‰moˇ°
;

2945 
uöt32
 
	mrxπsoˇ°
;

2946 
uöt32
 
	mrx˘soˇ°
;

2947 
uöt32
 
	mrxd‰mmˇ°
;

2948 
uöt32
 
	mrxm‰mmˇ°
;

2949 
uöt32
 
	mrxc‰mmˇ°
;

2952 
uöt32
 
	mrxbóc⁄mbss
;

2953 
uöt32
 
	mrxd‰muˇ°obss
;

2956 
uöt32
 
	mrxbóc⁄obss
;

2957 
uöt32
 
	mrxr•tmout
;

2960 
uöt32
 
	mb˙txˇn˛
;

2961 
uöt32
 
	mrxf0ovÊ
;

2962 
uöt32
 
	mrxf1ovÊ
;

2963 
uöt32
 
	mrxf2ovÊ
;

2964 
uöt32
 
	mtxsfovÊ
;

2965 
uöt32
 
	mpmqovÊ
;

2966 
uöt32
 
	mrxcg¥q‰m
;

2969 
uöt32
 
	mrxcg¥sqovÊ
;

2970 
uöt32
 
	mtxcg¥sÁû
;

2973 
uöt32
 
	mtxcg¥ssuc
;

2974 
uöt32
 
	m¥s_timeout
;

2978 
uöt32
 
	mrx«ck
;

2979 
uöt32
 
	m‰msc⁄s
;

2980 
uöt32
 
	mtx«ck
;

2981 
uöt32
 
	mtxglôch_«ck
;

2982 
uöt32
 
	mtxbur°
;

2985 
uöt32
 
	mtx‰ag
;

2986 
uöt32
 
	mtxmu…i
;

2987 
uöt32
 
	mtxÁû
;

2988 
uöt32
 
	mtxªåy
;

2989 
uöt32
 
	mtxªåõ
;

2990 
uöt32
 
	mrxdup
;

2991 
uöt32
 
	mtxπs
;

2992 
uöt32
 
	mtxno˘s
;

2993 
uöt32
 
	mtxnﬂck
;

2994 
uöt32
 
	mrx‰ag
;

2995 
uöt32
 
	mrxmu…i
;

2996 
uöt32
 
	mrx¸c
;

2997 
uöt32
 
	mtx‰m¢t
;

2998 
uöt32
 
	mrxundec
;

3001 
uöt32
 
	mtkùmicÁûl
;

3002 
uöt32
 
	mtkù˙åm§
;

3003 
uöt32
 
	mtkùª∂ay
;

3004 
uöt32
 
	mccmpfmãº
;

3005 
uöt32
 
	mccm¥ïœy
;

3006 
uöt32
 
	mccmpundec
;

3007 
uöt32
 
	mfourwayÁû
;

3008 
uöt32
 
	mwïundec
;

3009 
uöt32
 
	mwïicvîr
;

3010 
uöt32
 
	mdecsuc˚ss
;

3011 
uöt32
 
	mtkùicvîr
;

3012 
uöt32
 
	mwïex˛uded
;

3014 
uöt32
 
	mtxch™ªj
;

3015 
uöt32
 
	mpsmwds
;

3016 
uöt32
 
	mphyw©chdog
;

3019 
uöt32
 
	m¥q_íåõs_h™dÀd
;

3020 
uöt32
 
	m¥q_undúe˘ed_íåõs
;

3021 
uöt32
 
	m¥q_bad_íåõs
;

3022 
uöt32
 
	m©im_suµªss_cou¡
;

3023 
uöt32
 
	mb˙_ãm∂©e_nŸ_ªady
;

3024 
uöt32
 
	mb˙_ãm∂©e_nŸ_ªady_d⁄e
;

3025 
uöt32
 
	mœã_tbâ_dpc
;

3028 
uöt32
 
	mrx1mbps
;

3029 
uöt32
 
	mrx2mbps
;

3030 
uöt32
 
	mrx5mbps5
;

3031 
uöt32
 
	mrx6mbps
;

3032 
uöt32
 
	mrx9mbps
;

3033 
uöt32
 
	mrx11mbps
;

3034 
uöt32
 
	mrx12mbps
;

3035 
uöt32
 
	mrx18mbps
;

3036 
uöt32
 
	mrx24mbps
;

3037 
uöt32
 
	mrx36mbps
;

3038 
uöt32
 
	mrx48mbps
;

3039 
uöt32
 
	mrx54mbps
;

3040 
uöt32
 
	mrx108mbps
;

3041 
uöt32
 
	mrx162mbps
;

3042 
uöt32
 
	mrx216mbps
;

3043 
uöt32
 
	mrx270mbps
;

3044 
uöt32
 
	mrx324mbps
;

3045 
uöt32
 
	mrx378mbps
;

3046 
uöt32
 
	mrx432mbps
;

3047 
uöt32
 
	mrx486mbps
;

3048 
uöt32
 
	mrx540mbps
;

3051 
uöt32
 
	mpkãngrxduˇ°
;

3052 
uöt32
 
	mpkãngrxdmˇ°
;

3054 
uöt32
 
	mrfdißbÀ
;

3055 
uöt32
 
	mbphy_rx¸sglôch
;

3057 
uöt32
 
	mtxex±ime
;

3059 
uöt32
 
	mtxmpdu_sgi
;

3060 
uöt32
 
	mrxmpdu_sgi
;

3061 
uöt32
 
	mtxmpdu_°bc
;

3062 
uöt32
 
	mrxmpdu_°bc
;

3064 
uöt32
 
	mrxundec_mc°
;

3067 
uöt32
 
	mtkùmicÁûl_mc°
;

3068 
uöt32
 
	mtkù˙åm§_mc°
;

3069 
uöt32
 
	mtkùª∂ay_mc°
;

3070 
uöt32
 
	mccmpfmãº_mc°
;

3071 
uöt32
 
	mccm¥ïœy_mc°
;

3072 
uöt32
 
	mccmpundec_mc°
;

3073 
uöt32
 
	mfourwayÁû_mc°
;

3074 
uöt32
 
	mwïundec_mc°
;

3075 
uöt32
 
	mwïicvîr_mc°
;

3076 
uöt32
 
	mdecsuc˚ss_mc°
;

3077 
uöt32
 
	mtkùicvîr_mc°
;

3078 
uöt32
 
	mwïex˛uded_mc°
;

3080 
uöt32
 
	mdma_h™g
;

3081 
uöt32
 
	mªöô
;

3083 
uöt32
 
	mp°©xuˇ°
;

3084 
uöt32
 
	mp°©xnﬂssoc
;

3085 
uöt32
 
	mp°¨xuˇ°
;

3086 
uöt32
 
	mp°¨xbcmc
;

3087 
uöt32
 
	mp°©xbcmc
;

3089 
uöt32
 
	mcso_∑s°hrough
;

3090 } 
	twl_˙t_t
;

3092 #i‚de‡
LINUX_POSTMOGRIFY_REMOVAL


3094 
uöt16
 
	mvîsi⁄
;

3095 
uöt16
 
	mÀngth
;

3098 
uöt32
 
	mtx‰ame
;

3099 
uöt32
 
	mtxbyã
;

3100 
uöt32
 
	mtxªå™s
;

3101 
uöt32
 
	mtxîr‹
;

3102 
uöt32
 
	mtx˘l
;

3103 
uöt32
 
	mtx¥sh‹t
;

3104 
uöt32
 
	mtx£º
;

3105 
uöt32
 
	mtxnobuf
;

3106 
uöt32
 
	mtxnﬂssoc
;

3107 
uöt32
 
	mtxru¡
;

3108 
uöt32
 
	mtxchô
;

3109 
uöt32
 
	mtxcmiss
;

3112 
uöt32
 
	mtxuÊo
;

3113 
uöt32
 
	mtxphyîr
;

3114 
uöt32
 
	mtxphy¸s
;

3117 
uöt32
 
	mrx‰ame
;

3118 
uöt32
 
	mrxbyã
;

3119 
uöt32
 
	mrxîr‹
;

3120 
uöt32
 
	mrx˘l
;

3121 
uöt32
 
	mrxnobuf
;

3122 
uöt32
 
	mrxn⁄d©a
;

3123 
uöt32
 
	mrxbadds
;

3124 
uöt32
 
	mrxbadcm
;

3125 
uöt32
 
	mrx‰agîr
;

3126 
uöt32
 
	mrxru¡
;

3127 
uöt32
 
	mrxgü¡
;

3128 
uöt32
 
	mrxnoscb
;

3129 
uöt32
 
	mrxbad¥Ÿo
;

3130 
uöt32
 
	mrxbad§cmac
;

3131 
uöt32
 
	mrxbadda
;

3132 
uöt32
 
	mrxfûãr
;

3135 
uöt32
 
	mrxoÊo
;

3136 
uöt32
 
	mrxuÊo
[
NFIFO
];

3138 
uöt32
 
	md11˙t_txπs_off
;

3139 
uöt32
 
	md11˙t_rx¸c_off
;

3140 
uöt32
 
	md11˙t_txno˘s_off
;

3143 
uöt32
 
	mdmade
;

3144 
uöt32
 
	mdmada
;

3145 
uöt32
 
	mdm≠e
;

3146 
uöt32
 
	mª£t
;

3147 
uöt32
 
	mtbâ
;

3148 
uöt32
 
	mtxdmaw¨
;

3149 
uöt32
 
	mpkt_ˇŒback_ªg_Áû
;

3152 
uöt32
 
	mtxÆl‰m
;

3155 
uöt32
 
	mtxπs‰m
;

3156 
uöt32
 
	mtx˘s‰m
;

3157 
uöt32
 
	mtxack‰m
;

3158 
uöt32
 
	mtxd∆‰m
;

3159 
uöt32
 
	mtxb˙‰m
;

3160 
uöt32
 
	mtxfunÊ
[8];

3161 
uöt32
 
	mtxçlunÊ
;

3164 
uöt32
 
	mtxphyîr‹
;

3167 
uöt32
 
	mrx‰mtoﬁ⁄g
;

3168 
uöt32
 
	mrx‰mtooshπ
;

3169 
uöt32
 
	mrxövmachdr
;

3172 
uöt32
 
	mrxbadfcs
;

3173 
uöt32
 
	mrxbad∂˝
;

3174 
uöt32
 
	mrx¸sglôch
;

3175 
uöt32
 
	mrx°π
;

3178 
uöt32
 
	mrxd‰muˇ°mbss
;

3179 
uöt32
 
	mrxm‰muˇ°mbss
;

3180 
uöt32
 
	mrxc‰muˇ°
;

3181 
uöt32
 
	mrxπsuˇ°
;

3182 
uöt32
 
	mrx˘suˇ°
;

3183 
uöt32
 
	mrxackuˇ°
;

3184 
uöt32
 
	mrxd‰moˇ°
;

3185 
uöt32
 
	mrxm‰moˇ°
;

3186 
uöt32
 
	mrxc‰moˇ°
;

3187 
uöt32
 
	mrxπsoˇ°
;

3188 
uöt32
 
	mrx˘soˇ°
;

3189 
uöt32
 
	mrxd‰mmˇ°
;

3190 
uöt32
 
	mrxm‰mmˇ°
;

3191 
uöt32
 
	mrxc‰mmˇ°
;

3194 
uöt32
 
	mrxbóc⁄mbss
;

3195 
uöt32
 
	mrxd‰muˇ°obss
;

3198 
uöt32
 
	mrxbóc⁄obss
;

3199 
uöt32
 
	mrxr•tmout
;

3202 
uöt32
 
	mb˙txˇn˛
;

3203 
uöt32
 
	mrxf0ovÊ
;

3204 
uöt32
 
	mrxf1ovÊ
;

3205 
uöt32
 
	mrxf2ovÊ
;

3206 
uöt32
 
	mtxsfovÊ
;

3207 
uöt32
 
	mpmqovÊ
;

3208 
uöt32
 
	mrxcg¥q‰m
;

3211 
uöt32
 
	mrxcg¥sqovÊ
;

3212 
uöt32
 
	mtxcg¥sÁû
;

3215 
uöt32
 
	mtxcg¥ssuc
;

3216 
uöt32
 
	m¥s_timeout
;

3220 
uöt32
 
	mrx«ck
;

3221 
uöt32
 
	m‰msc⁄s
;

3222 
uöt32
 
	mtx«ck
;

3223 
uöt32
 
	mtxglôch_«ck
;

3224 
uöt32
 
	mtxbur°
;

3227 
uöt32
 
	mtx‰ag
;

3228 
uöt32
 
	mtxmu…i
;

3229 
uöt32
 
	mtxÁû
;

3230 
uöt32
 
	mtxªåy
;

3231 
uöt32
 
	mtxªåõ
;

3232 
uöt32
 
	mrxdup
;

3233 
uöt32
 
	mtxπs
;

3234 
uöt32
 
	mtxno˘s
;

3235 
uöt32
 
	mtxnﬂck
;

3236 
uöt32
 
	mrx‰ag
;

3237 
uöt32
 
	mrxmu…i
;

3238 
uöt32
 
	mrx¸c
;

3239 
uöt32
 
	mtx‰m¢t
;

3240 
uöt32
 
	mrxundec
;

3243 
uöt32
 
	mtkùmicÁûl
;

3244 
uöt32
 
	mtkù˙åm§
;

3245 
uöt32
 
	mtkùª∂ay
;

3246 
uöt32
 
	mccmpfmãº
;

3247 
uöt32
 
	mccm¥ïœy
;

3248 
uöt32
 
	mccmpundec
;

3249 
uöt32
 
	mfourwayÁû
;

3250 
uöt32
 
	mwïundec
;

3251 
uöt32
 
	mwïicvîr
;

3252 
uöt32
 
	mdecsuc˚ss
;

3253 
uöt32
 
	mtkùicvîr
;

3254 
uöt32
 
	mwïex˛uded
;

3256 
uöt32
 
	mrxundec_mc°
;

3259 
uöt32
 
	mtkùmicÁûl_mc°
;

3260 
uöt32
 
	mtkù˙åm§_mc°
;

3261 
uöt32
 
	mtkùª∂ay_mc°
;

3262 
uöt32
 
	mccmpfmãº_mc°
;

3263 
uöt32
 
	mccm¥ïœy_mc°
;

3264 
uöt32
 
	mccmpundec_mc°
;

3265 
uöt32
 
	mfourwayÁû_mc°
;

3266 
uöt32
 
	mwïundec_mc°
;

3267 
uöt32
 
	mwïicvîr_mc°
;

3268 
uöt32
 
	mdecsuc˚ss_mc°
;

3269 
uöt32
 
	mtkùicvîr_mc°
;

3270 
uöt32
 
	mwïex˛uded_mc°
;

3272 
uöt32
 
	mtxch™ªj
;

3273 
uöt32
 
	mtxex±ime
;

3274 
uöt32
 
	mpsmwds
;

3275 
uöt32
 
	mphyw©chdog
;

3278 
uöt32
 
	m¥q_íåõs_h™dÀd
;

3279 
uöt32
 
	m¥q_undúe˘ed_íåõs
;

3280 
uöt32
 
	m¥q_bad_íåõs
;

3281 
uöt32
 
	m©im_suµªss_cou¡
;

3282 
uöt32
 
	mb˙_ãm∂©e_nŸ_ªady
;

3283 
uöt32
 
	mb˙_ãm∂©e_nŸ_ªady_d⁄e
;

3284 
uöt32
 
	mœã_tbâ_dpc
;

3287 
uöt32
 
	mrx1mbps
;

3288 
uöt32
 
	mrx2mbps
;

3289 
uöt32
 
	mrx5mbps5
;

3290 
uöt32
 
	mrx6mbps
;

3291 
uöt32
 
	mrx9mbps
;

3292 
uöt32
 
	mrx11mbps
;

3293 
uöt32
 
	mrx12mbps
;

3294 
uöt32
 
	mrx18mbps
;

3295 
uöt32
 
	mrx24mbps
;

3296 
uöt32
 
	mrx36mbps
;

3297 
uöt32
 
	mrx48mbps
;

3298 
uöt32
 
	mrx54mbps
;

3299 
uöt32
 
	mrx108mbps
;

3300 
uöt32
 
	mrx162mbps
;

3301 
uöt32
 
	mrx216mbps
;

3302 
uöt32
 
	mrx270mbps
;

3303 
uöt32
 
	mrx324mbps
;

3304 
uöt32
 
	mrx378mbps
;

3305 
uöt32
 
	mrx432mbps
;

3306 
uöt32
 
	mrx486mbps
;

3307 
uöt32
 
	mrx540mbps
;

3310 
uöt32
 
	mpkãngrxduˇ°
;

3311 
uöt32
 
	mpkãngrxdmˇ°
;

3313 
uöt32
 
	mrfdißbÀ
;

3314 
uöt32
 
	mbphy_rx¸sglôch
;

3316 
uöt32
 
	mtxmpdu_sgi
;

3317 
uöt32
 
	mrxmpdu_sgi
;

3318 
uöt32
 
	mtxmpdu_°bc
;

3319 
uöt32
 
	mrxmpdu_°bc
;

3320 } 
	twl_˙t_vî_six_t
;

3322 
	#WL_DELTA_STATS_T_VERSION
 1

	)

3325 
uöt16
 
	mvîsi⁄
;

3326 
uöt16
 
	mÀngth
;

3329 
uöt32
 
	mtx‰ame
;

3330 
uöt32
 
	mtxbyã
;

3331 
uöt32
 
	mtxªå™s
;

3332 
uöt32
 
	mtxÁû
;

3335 
uöt32
 
	mrx‰ame
;

3336 
uöt32
 
	mrxbyã
;

3339 
uöt32
 
	mrx1mbps
;

3340 
uöt32
 
	mrx2mbps
;

3341 
uöt32
 
	mrx5mbps5
;

3342 
uöt32
 
	mrx6mbps
;

3343 
uöt32
 
	mrx9mbps
;

3344 
uöt32
 
	mrx11mbps
;

3345 
uöt32
 
	mrx12mbps
;

3346 
uöt32
 
	mrx18mbps
;

3347 
uöt32
 
	mrx24mbps
;

3348 
uöt32
 
	mrx36mbps
;

3349 
uöt32
 
	mrx48mbps
;

3350 
uöt32
 
	mrx54mbps
;

3351 
uöt32
 
	mrx108mbps
;

3352 
uöt32
 
	mrx162mbps
;

3353 
uöt32
 
	mrx216mbps
;

3354 
uöt32
 
	mrx270mbps
;

3355 
uöt32
 
	mrx324mbps
;

3356 
uöt32
 
	mrx378mbps
;

3357 
uöt32
 
	mrx432mbps
;

3358 
uöt32
 
	mrx486mbps
;

3359 
uöt32
 
	mrx540mbps
;

3360 } 
	twl_dñè_°©s_t
;

3363 
	#WL_WME_CNT_VERSION
 1

	)

3366 
uöt32
 
	m∑ckës
;

3367 
uöt32
 
	mbyãs
;

3368 } 
	twl_åaffic_°©s_t
;

3371 
uöt16
 
	mvîsi⁄
;

3372 
uöt16
 
	mÀngth
;

3374 
wl_åaffic_°©s_t
 
	mtx
[
AC_COUNT
];

3375 
wl_åaffic_°©s_t
 
	mtx_Áûed
[
AC_COUNT
];

3376 
wl_åaffic_°©s_t
 
	mrx
[
AC_COUNT
];

3377 
wl_åaffic_°©s_t
 
	mrx_Áûed
[
AC_COUNT
];

3379 
wl_åaffic_°©s_t
 
	mf‹w¨d
[
AC_COUNT
];

3381 
wl_åaffic_°©s_t
 
	mtx_expúed
[
AC_COUNT
];

3383 } 
	twl_wme_˙t_t
;

3385 #i‚de‡
LINUX_POSTMOGRIFY_REMOVAL


3386 
	swl_msgÀvñ2
 {

3387 
uöt32
 
	mlow
;

3388 
uöt32
 
	mhigh
;

3391 
	swl_mkìp_Æive_pkt
 {

3392 
uöt16
 
	mvîsi⁄
;

3393 
uöt16
 
	mÀngth
;

3394 
uöt32
 
	m≥riod_m£c
;

3395 
uöt16
 
	mÀn_byãs
;

3396 
uöt8
 
	mkìp_Æive_id
;

3397 
uöt8
 
	md©a
[1];

3398 } 
	twl_mkìp_Æive_pkt_t
;

3400 
	#WL_MKEEP_ALIVE_VERSION
 1

	)

3401 
	#WL_MKEEP_ALIVE_FIXED_LEN
 
	`OFFSETOF
(
wl_mkìp_Æive_pkt_t
, 
d©a
)

	)

3402 
	#WL_MKEEP_ALIVE_PRECISION
 500

	)

3404 #ifde‡
WLBA


3406 
	#WLC_BA_CNT_VERSION
 1

	)

3409 
	swlc_ba_˙t
 {

3410 
uöt16
 
	mvîsi⁄
;

3411 
uöt16
 
	mÀngth
;

3414 
uöt32
 
	mtxpdu
;

3415 
uöt32
 
	mtxsdu
;

3416 
uöt32
 
	mtxfc
;

3417 
uöt32
 
	mtxfci
;

3418 
uöt32
 
	mtxªå™s
;

3419 
uöt32
 
	mtxb©imî
;

3420 
uöt32
 
	mtxdr›
;

3421 
uöt32
 
	mtxaddb¨eq
;

3422 
uöt32
 
	mtxaddb¨e•
;

3423 
uöt32
 
	mtxdñba
;

3424 
uöt32
 
	mtxba
;

3425 
uöt32
 
	mtxb¨
;

3426 
uöt32
 
	mtx∑d
[4];

3429 
uöt32
 
	mrxpdu
;

3430 
uöt32
 
	mrxqed
;

3431 
uöt32
 
	mrxdup
;

3432 
uöt32
 
	mrxnobuf
;

3433 
uöt32
 
	mrxaddb¨eq
;

3434 
uöt32
 
	mrxaddb¨e•
;

3435 
uöt32
 
	mrxdñba
;

3436 
uöt32
 
	mrxba
;

3437 
uöt32
 
	mrxb¨
;

3438 
uöt32
 
	mrxövba
;

3439 
uöt32
 
	mrxbahﬁes
;

3440 
uöt32
 
	mrxu√xp
;

3441 
uöt32
 
	mrx∑d
[4];

3442 } 
	twlc_ba_˙t_t
;

3446 
	sampdu_tid_c⁄åﬁ
 {

3447 
uöt8
 
	mtid
;

3448 
uöt8
 
	míabÀ
;

3452 
	sampdu_ó_tid
 {

3453 
ëhî_addr
 
	mó
;

3454 
uöt8
 
	mtid
;

3457 
	sampdu_ªåy_tid
 {

3458 
uöt8
 
	mtid
;

3459 
uöt8
 
	mªåy
;

3463 
	#DPT_DISCOVERY_MANUAL
 0x01

	)

3464 
	#DPT_DISCOVERY_AUTO
 0x02

	)

3465 
	#DPT_DISCOVERY_SCAN
 0x04

	)

3468 
	#DPT_PATHSEL_AUTO
 0

	)

3469 
	#DPT_PATHSEL_DIRECT
 1

	)

3470 
	#DPT_PATHSEL_APPATH
 2

	)

3473 
	#DPT_DENY_LIST_ADD
 1

	)

3474 
	#DPT_DENY_LIST_REMOVE
 2

	)

3477 
	#DPT_MANUAL_EP_CREATE
 1

	)

3478 
	#DPT_MANUAL_EP_MODIFY
 2

	)

3479 
	#DPT_MANUAL_EP_DELETE
 3

	)

3482 
	sd±_iov¨
 {

3483 
ëhî_addr
 
	mó
;

3484 
uöt8
 
	mmode
;

3485 
uöt32
 
	m∑d
;

3486 } 
	td±_iov¨_t
;

3489 
	#DPT_STATUS_ACTIVE
 0x01

	)

3490 
	#DPT_STATUS_AES
 0x02

	)

3491 
	#DPT_STATUS_FAILED
 0x04

	)

3493 
	#DPT_FNAME_LEN
 48

	)

3495 
	sd±_°©us
 {

3496 
uöt8
 
	m°©us
;

3497 
uöt8
 
	m‚Àn
;

3498 
uch¨
 
	m«me
[
DPT_FNAME_LEN
];

3499 
uöt32
 
	mrssi
;

3500 
°a_öfo_t
 
	m°a
;

3501 } 
	td±_°©us_t
;

3504 
	sd±_li°
 {

3505 
uöt32
 
	mnum
;

3506 
d±_°©us_t
 
	m°©us
[1];

3507 } 
	td±_li°_t
;

3510 
	sd±_‚ame
 {

3511 
uöt8
 
	mÀn
;

3512 
uch¨
 
	m«me
[
DPT_FNAME_LEN
];

3513 } 
	td±_‚ame_t
;

3515 
	#BDD_FNAME_LEN
 32

	)

3516 
	sbdd_‚ame
 {

3517 
uöt8
 
	mÀn
;

3518 
uch¨
 
	m«me
[
BDD_FNAME_LEN
];

3519 } 
	tbdd_‚ame_t
;

3523 
	st¶i°
 {

3524 
	mcou¡
;

3525 
tsöfo_¨g
 
	mtsöfo
[1];

3528 #ifde‡
WLTDLS


3530 
	#TDLS_MANUAL_EP_CREATE
 1

	)

3531 
	#TDLS_MANUAL_EP_MODIFY
 2

	)

3532 
	#TDLS_MANUAL_EP_DELETE
 3

	)

3533 
	#TDLS_MANUAL_EP_PM
 4

	)

3534 
	#TDLS_MANUAL_EP_WAKE
 5

	)

3535 
	#TDLS_MANUAL_EP_DISCOVERY
 6

	)

3536 
	#TDLS_MANUAL_EP_CHSW
 7

	)

3539 
	stdls_iov¨
 {

3540 
ëhî_addr
 
	mó
;

3541 
uöt8
 
	mmode
;

3542 
ch™•ec_t
 
	mch™•ec
;

3543 
uöt32
 
	m∑d
;

3544 } 
	ttdls_iov¨_t
;

3547 
	#TDLS_WFD_IE_TX
 0

	)

3548 
	#TDLS_WFD_IE_RX
 1

	)

3549 
	#TDLS_WFD_IE_SIZE
 255

	)

3551 
	stdls_wfd_õ_iov¨
 {

3552 
ëhî_addr
 
	mó
;

3553 
uöt8
 
	mmode
;

3554 
uöt8
 
	mÀngth
;

3555 
uöt8
 
	md©a
[
TDLS_WFD_IE_SIZE
];

3556 } 
	ttdls_wfd_õ_iov¨_t
;

3560 
	st•ec_¨g
 {

3561 
uöt16
 
	mvîsi⁄
;

3562 
uöt16
 
	mÀngth
;

3563 
uöt
 
	mÊag
;

3565 
tsöfo_¨g
 
	mtsöfo
;

3566 
uöt16
 
	mnom_msdu_size
;

3567 
uöt16
 
	mmax_msdu_size
;

3568 
uöt
 
	mmö_§v_öãrvÆ
;

3569 
uöt
 
	mmax_§v_öãrvÆ
;

3570 
uöt
 
	möa˘ivôy_öãrvÆ
;

3571 
uöt
 
	msu•ísi⁄_öãrvÆ
;

3572 
uöt
 
	m§v_°¨t_time
;

3573 
uöt
 
	mmö_d©a_øã
;

3574 
uöt
 
	mmón_d©a_øã
;

3575 
uöt
 
	m≥ak_d©a_øã
;

3576 
uöt
 
	mmax_bur°_size
;

3577 
uöt
 
	mdñay_bound
;

3578 
uöt
 
	mmö_phy_øã
;

3579 
uöt16
 
	msuΩlus_bw
;

3580 
uöt16
 
	mmedium_time
;

3581 
uöt8
 
	mdülog_tokí
;

3582 } 
	tt•ec_¨g_t
;

3585 
	st•ec_≥r_°a_¨g
 {

3586 
ëhî_addr
 
	mó
;

3587 
t•ec_¨g
 
	mts
;

3588 } 
	tt•ec_≥r_°a_¨g_t
;

3591 
	swme_max_b™dwidth
 {

3592 
uöt32
 
	mac
[
AC_COUNT
];

3593 } 
	twme_max_b™dwidth_t
;

3595 
	#WL_WME_MBW_PARAMS_IO_BYTES
 ((
wme_max_b™dwidth_t
))

	)

3598 
	#TSPEC_ARG_VERSION
 2

	)

3599 
	#TSPEC_ARG_LENGTH
 55

	)

3600 
	#TSPEC_DEFAULT_DIALOG_TOKEN
 42

	)

3601 
	#TSPEC_DEFAULT_SBW_FACTOR
 0x3000

	)

3604 
	#WL_WOWL_KEEPALIVE_MAX_PACKET_SIZE
 80

	)

3605 
	#WLC_WOWL_MAX_KEEPALIVE
 2

	)

3608 
	#TSPEC_PENDING
 0

	)

3609 
	#TSPEC_ACCEPTED
 1

	)

3610 
	#TSPEC_REJECTED
 2

	)

3611 
	#TSPEC_UNKNOWN
 3

	)

3612 
	#TSPEC_STATUS_MASK
 7

	)

3616 #ifde‡
WLAFTERBURNER


3617 
	#WL_SWFL_ABBFL
 0x0001

	)

3618 
	#WL_SWFL_ABENCORE
 0x0002

	)

3620 
	#WL_SWFL_NOHWRADIO
 0x0004

	)

3621 
	#WL_SWFL_FLOWCONTROL
 0x0008

	)

3622 
	#WL_SWFL_WLBSSSORT
 0x0010

	)

3624 
	#WL_LIFETIME_MAX
 0xFFFF

	)

3627 
	swl_li„time
 {

3628 
uöt32
 
	mac
;

3629 
uöt32
 
	mli„time
;

3630 } 
	twl_li„time_t
;

3633 
	swl_ch™_swôch
 {

3634 
uöt8
 
	mmode
;

3635 
uöt8
 
	mcou¡
;

3636 
ch™•ec_t
 
	mch•ec
;

3637 
uöt8
 
	mªg
;

3638 } 
	twl_ch™_swôch_t
;

3649 
	#WLC_ROAM_TRIGGER_DEFAULT
 0

	)

3650 
	#WLC_ROAM_TRIGGER_BANDWIDTH
 1

	)

3651 
	#WLC_ROAM_TRIGGER_DISTANCE
 2

	)

3652 
	#WLC_ROAM_TRIGGER_AUTO
 3

	)

3653 
	#WLC_ROAM_TRIGGER_MAX_VALUE
 3

	)

3655 
	#WLC_ROAM_NEVER_ROAM_TRIGGER
 (-100Ë

	)

3658 
	#WPA_AUTH_PFN_ANY
 0xfffffff‡

	)

3661 
	mPFN_LIST_ORDER
,

3662 
	mPFN_RSSI


3666 
	mDISABLE
,

3667 
	mENABLE


3671 
	mOFF_ADAPT
,

3672 
	mSMART_ADAPT
,

3673 
	mSTRICT_ADAPT
,

3674 
	mSLOW_ADAPT


3677 
	#SORT_CRITERIA_BIT
 0

	)

3678 
	#AUTO_NET_SWITCH_BIT
 1

	)

3679 
	#ENABLE_BKGRD_SCAN_BIT
 2

	)

3680 
	#IMMEDIATE_SCAN_BIT
 3

	)

3681 
	#AUTO_CONNECT_BIT
 4

	)

3682 
	#ENABLE_BD_SCAN_BIT
 5

	)

3683 
	#ENABLE_ADAPTSCAN_BIT
 6

	)

3684 
	#IMMEDIATE_EVENT_BIT
 8

	)

3685 
	#SUPPRESS_SSID_BIT
 9

	)

3686 
	#ENABLE_NET_OFFLOAD_BIT
 10

	)

3688 
	#SORT_CRITERIA_MASK
 0x0001

	)

3689 
	#AUTO_NET_SWITCH_MASK
 0x0002

	)

3690 
	#ENABLE_BKGRD_SCAN_MASK
 0x0004

	)

3691 
	#IMMEDIATE_SCAN_MASK
 0x0008

	)

3692 
	#AUTO_CONNECT_MASK
 0x0010

	)

3694 
	#ENABLE_BD_SCAN_MASK
 0x0020

	)

3695 
	#ENABLE_ADAPTSCAN_MASK
 0x00c0

	)

3696 
	#IMMEDIATE_EVENT_MASK
 0x0100

	)

3697 
	#SUPPRESS_SSID_MASK
 0x0200

	)

3698 
	#ENABLE_NET_OFFLOAD_MASK
 0x0400

	)

3700 
	#PFN_VERSION
 2

	)

3701 
	#PFN_SCANRESULT_VERSION
 1

	)

3702 
	#MAX_PFN_LIST_COUNT
 16

	)

3704 
	#PFN_COMPLETE
 1

	)

3705 
	#PFN_INCOMPLETE
 0

	)

3707 
	#DEFAULT_BESTN
 2

	)

3708 
	#DEFAULT_MSCAN
 0

	)

3709 
	#DEFAULT_REPEAT
 10

	)

3710 
	#DEFAULT_EXP
 2

	)

3713 
	swl_p‚_sub√t_öfo
 {

3714 
ëhî_addr
 
	mBSSID
;

3715 
uöt8
 
	mch™√l
;

3716 
uöt8
 
	mSSID_Àn
;

3717 
uöt8
 
	mSSID
[32];

3718 } 
	twl_p‚_sub√t_öfo_t
;

3720 
	swl_p‚_√t_öfo
 {

3721 
wl_p‚_sub√t_öfo_t
 
	mp‚sub√t
;

3722 
öt16
 
	mRSSI
;

3723 
uöt16
 
	mtime°amp
;

3724 } 
	twl_p‚_√t_öfo_t
;

3726 
	swl_p‚_sˇƒesu…s
 {

3727 
uöt32
 
	mvîsi⁄
;

3728 
uöt32
 
	m°©us
;

3729 
uöt32
 
	mcou¡
;

3730 
wl_p‚_√t_öfo_t
 
	m√töfo
[1];

3731 } 
	twl_p‚_sˇƒesu…s_t
;

3734 
	swl_p‚_∑øm
 {

3735 
öt32
 
	mvîsi⁄
;

3736 
öt32
 
	msˇn_‰eq
;

3737 
öt32
 
	mlo°_√tw‹k_timeout
;

3740 
öt16
 
	mÊags
;

3744 
öt16
 
	mrssi_m¨gö
;

3747 
uöt8
 
	mbe°n
;

3748 
uöt8
 
	mmsˇn
;

3749 
uöt8
 
	mª≥©
;

3752 
uöt8
 
	mexp
;

3753 
öt32
 
	m¶ow_‰eq
;

3754 } 
	twl_p‚_∑øm_t
;

3756 
	swl_p‚_bssid
 {

3757 
ëhî_addr
 
	mmaˇddr
;

3759 
uöt16
 
	mÊags
;

3760 } 
	twl_p‚_bssid_t
;

3761 
	#WL_PFN_SUPPRESSFOUND_MASK
 0x08

	)

3762 
	#WL_PFN_SUPPRESSLOST_MASK
 0x10

	)

3764 
	swl_p‚_cfg
 {

3765 
uöt32
 
	mªp‹ây≥
;

3766 
öt32
 
	mch™√l_num
;

3767 
uöt16
 
	mch™√l_li°
[
WL_NUMCHANNELS
];

3768 } 
	twl_p‚_cfg_t
;

3769 
	#WL_PFN_REPORT_ALLNET
 0

	)

3770 
	#WL_PFN_REPORT_SSIDNET
 1

	)

3771 
	#WL_PFN_REPORT_BSSIDNET
 2

	)

3773 
	swl_p‚
 {

3774 
wlc_ssid_t
 
	mssid
;

3775 
öt32
 
	mÊags
;

3776 
öt32
 
	mö‰a
;

3777 
öt32
 
	mauth
;

3778 
öt32
 
	mw∑_auth
;

3779 
öt32
 
	mw£c
;

3780 } 
	twl_p‚_t
;

3781 
	#WL_PFN_HIDDEN_BIT
 2

	)

3782 
	#PNO_SCAN_MAX_FW
 508*1000

	)

3783 
	#PNO_SCAN_MAX_FW_SEC
 
PNO_SCAN_MAX_FW
/1000

	)

3784 
	#PNO_SCAN_MIN_FW_SEC
 10

	)

3785 
	#WL_PFN_HIDDEN_MASK
 0x4

	)

3790 
	#TOE_TX_CSUM_OL
 0x00000001

	)

3791 
	#TOE_RX_CSUM_OL
 0x00000002

	)

3793 #i‚de‡
LINUX_POSTMOGRIFY_REMOVAL


3795 
	#TOE_ERRTEST_TX_CSUM
 0x00000001

	)

3796 
	#TOE_ERRTEST_RX_CSUM
 0x00000002

	)

3797 
	#TOE_ERRTEST_RX_CSUM2
 0x00000004

	)

3799 
	st€_ﬁ_°©s_t
 {

3801 
uöt32
 
	mtx_summed
;

3804 
uöt32
 
	mtx_ùh_fûl
;

3805 
uöt32
 
	mtx_t˝_fûl
;

3806 
uöt32
 
	mtx_udp_fûl
;

3807 
uöt32
 
	mtx_icmp_fûl
;

3810 
uöt32
 
	mrx_ùh_good
;

3811 
uöt32
 
	mrx_ùh_bad
;

3812 
uöt32
 
	mrx_t˝_good
;

3813 
uöt32
 
	mrx_t˝_bad
;

3814 
uöt32
 
	mrx_udp_good
;

3815 
uöt32
 
	mrx_udp_bad
;

3816 
uöt32
 
	mrx_icmp_good
;

3817 
uöt32
 
	mrx_icmp_bad
;

3820 
uöt32
 
	mtx_t˝_îröj
;

3821 
uöt32
 
	mtx_udp_îröj
;

3822 
uöt32
 
	mtx_icmp_îröj
;

3825 
uöt32
 
	mrx_t˝_îröj
;

3826 
uöt32
 
	mrx_udp_îröj
;

3827 
uöt32
 
	mrx_icmp_îröj
;

3831 
	#ARP_OL_AGENT
 0x00000001

	)

3832 
	#ARP_OL_SNOOP
 0x00000002

	)

3833 
	#ARP_OL_HOST_AUTO_REPLY
 0x00000004

	)

3834 
	#ARP_OL_PEER_AUTO_REPLY
 0x00000008

	)

3837 
	#ARP_ERRTEST_REPLY_PEER
 0x1

	)

3838 
	#ARP_ERRTEST_REPLY_HOST
 0x2

	)

3840 
	#ARP_MULTIHOMING_MAX
 8

	)

3841 
	#ND_MULTIHOMING_MAX
 8

	)

3844 
	s¨p_ﬁ_°©s_t
 {

3845 
uöt32
 
	mho°_ù_íåõs
;

3846 
uöt32
 
	mho°_ù_ovîÊow
;

3848 
uöt32
 
	m¨p_èbÀ_íåõs
;

3849 
uöt32
 
	m¨p_èbÀ_ovîÊow
;

3851 
uöt32
 
	mho°_ªque°
;

3852 
uöt32
 
	mho°_ª∂y
;

3853 
uöt32
 
	mho°_£rvi˚
;

3855 
uöt32
 
	m≥î_ªque°
;

3856 
uöt32
 
	m≥î_ªque°_dr›
;

3857 
uöt32
 
	m≥î_ª∂y
;

3858 
uöt32
 
	m≥î_ª∂y_dr›
;

3859 
uöt32
 
	m≥î_£rvi˚
;

3863 
	snd_ﬁ_°©s_t
 {

3864 
uöt32
 
	mho°_ù_íåõs
;

3865 
uöt32
 
	mho°_ù_ovîÊow
;

3866 
uöt32
 
	m≥î_ªque°
;

3867 
uöt32
 
	m≥î_ªque°_dr›
;

3868 
uöt32
 
	m≥î_ª∂y_dr›
;

3869 
uöt32
 
	m≥î_£rvi˚
;

3879 
	swl_kìp_Æive_pkt
 {

3880 
uöt32
 
	m≥riod_m£c
;

3881 
uöt16
 
	mÀn_byãs
;

3882 
uöt8
 
	md©a
[1];

3886 } 
	twl_kìp_Æive_pkt_t
;

3888 
	#WL_KEEP_ALIVE_FIXED_LEN
 
	`OFFSETOF
(
wl_kìp_Æive_pkt_t
, 
d©a
)

	)

3895 
	ewl_pkt_fûãr_ty≥
 {

3896 
	mWL_PKT_FILTER_TYPE_PATTERN_MATCH


3897 } 
	twl_pkt_fûãr_ty≥_t
;

3899 
	#WL_PKT_FILTER_TYPE
 
wl_pkt_fûãr_ty≥_t


	)

3905 
	swl_pkt_fûãr_∑âîn
 {

3906 
uöt32
 
	moff£t
;

3909 
uöt32
 
	msize_byãs
;

3910 
uöt8
 
	mmask_™d_∑âîn
[1];

3913 } 
	twl_pkt_fûãr_∑âîn_t
;

3916 
	swl_pkt_fûãr
 {

3917 
uöt32
 
	mid
;

3918 
uöt32
 
	mty≥
;

3919 
uöt32
 
	m√g©e_m©ch
;

3921 
wl_pkt_fûãr_∑âîn_t
 
	m∑âîn
;

3922 } 
	mu
;

3923 } 
	twl_pkt_fûãr_t
;

3925 
	#WL_PKT_FILTER_FIXED_LEN
 
	`OFFSETOF
(
wl_pkt_fûãr_t
, 
u
)

	)

3926 
	#WL_PKT_FILTER_PATTERN_FIXED_LEN
 
	`OFFSETOF
(
wl_pkt_fûãr_∑âîn_t
, 
mask_™d_∑âîn
)

	)

3929 
	swl_pkt_fûãr_íabÀ
 {

3930 
uöt32
 
	mid
;

3931 
uöt32
 
	míabÀ
;

3932 } 
	twl_pkt_fûãr_íabÀ_t
;

3935 
	swl_pkt_fûãr_li°
 {

3936 
uöt32
 
	mnum
;

3937 
wl_pkt_fûãr_t
 
	mfûãr
[1];

3938 } 
	twl_pkt_fûãr_li°_t
;

3940 
	#WL_PKT_FILTER_LIST_FIXED_LEN
 
	`OFFSETOF
(
wl_pkt_fûãr_li°_t
, 
fûãr
)

	)

3943 
	swl_pkt_fûãr_°©s
 {

3944 
uöt32
 
	mnum_pkts_m©ched
;

3945 
uöt32
 
	mnum_pkts_f‹w¨ded
;

3946 
uöt32
 
	mnum_pkts_disˇrded
;

3947 } 
	twl_pkt_fûãr_°©s_t
;

3950 
	swl_£q_cmd_io˘l
 {

3951 
uöt32
 
	mcmd
;

3952 
uöt32
 
	mÀn
;

3953 } 
	twl_£q_cmd_io˘l_t
;

3955 
	#WL_SEQ_CMD_ALIGN_BYTES
 4

	)

3961 
	#WL_SEQ_CMDS_GET_IOCTL_FILTER
(
cmd
) \

3962 (((
cmd
Ë=
WLC_GET_MAGIC
) || \

3963 ((
cmd
Ë=
WLC_GET_VERSION
) || \

3964 ((
cmd
Ë=
WLC_GET_AP
) || \

3965 ((
cmd
Ë=
WLC_GET_INSTANCE
))

	)

3971 
	#WL_PKTENG_PER_TX_START
 0x01

	)

3972 
	#WL_PKTENG_PER_TX_STOP
 0x02

	)

3973 
	#WL_PKTENG_PER_RX_START
 0x04

	)

3974 
	#WL_PKTENG_PER_RX_WITH_ACK_START
 0x05

	)

3975 
	#WL_PKTENG_PER_TX_WITH_ACK_START
 0x06

	)

3976 
	#WL_PKTENG_PER_RX_STOP
 0x08

	)

3977 
	#WL_PKTENG_PER_MASK
 0xff

	)

3979 
	#WL_PKTENG_SYNCHRONOUS
 0x100

	)

3981 
	swl_pkãng
 {

3982 
uöt32
 
	mÊags
;

3983 
uöt32
 
	mdñay
;

3984 
uöt32
 
	mn‰ames
;

3985 
uöt32
 
	mÀngth
;

3986 
uöt8
 
	m£qno
;

3987 
ëhî_addr
 
	mde°
;

3988 
ëhî_addr
 
	m§c
;

3989 } 
	twl_pkãng_t
;

3991 
	#NUM_80211b_RATES
 4

	)

3992 
	#NUM_80211ag_RATES
 8

	)

3993 
	#NUM_80211n_RATES
 32

	)

3994 
	#NUM_80211_RATES
 (
NUM_80211b_RATES
+
NUM_80211ag_RATES
+
NUM_80211n_RATES
)

	)

3995 
	swl_pkãng_°©s
 {

3996 
uöt32
 
	mlo°‰m˙t
;

3997 
öt32
 
	mrssi
;

3998 
öt32
 
	m¢r
;

3999 
uöt16
 
	mrxpkt˙t
[
NUM_80211_RATES
+1];

4000 } 
	twl_pkãng_°©s_t
;

4003 
	#WL_WOWL_MAGIC
 (1 << 0Ë

	)

4004 
	#WL_WOWL_NET
 (1 << 1Ë

	)

4005 
	#WL_WOWL_DIS
 (1 << 2Ë

	)

4006 
	#WL_WOWL_RETR
 (1 << 3Ë

	)

4007 
	#WL_WOWL_BCN
 (1 << 4Ë

	)

4008 
	#WL_WOWL_TST
 (1 << 5Ë

	)

4009 
	#WL_WOWL_M1
 (1 << 6Ë

	)

4010 
	#WL_WOWL_EAPID
 (1 << 7Ë

	)

4011 
	#WL_WOWL_PME_GPIO
 (1 << 8Ë

	)

4012 
	#WL_WOWL_NEEDTKIP1
 (1 << 9Ë

	)

4013 
	#WL_WOWL_GTK_FAILURE
 (1 << 10Ë

	)

4014 
	#WL_WOWL_EXTMAGPAT
 (1 << 11Ë

	)

4015 
	#WL_WOWL_ARPOFFLOAD
 (1 << 12Ë

	)

4016 
	#WL_WOWL_WPA2
 (1 << 13Ë

	)

4017 
	#WL_WOWL_KEYROT
 (1 << 14Ë

	)

4018 
	#WL_WOWL_BCAST
 (1 << 15Ë

	)

4020 
	#MAGIC_PKT_MINLEN
 102

	)

4022 
	#WOWL_PATTEN_TYPE_ARP
 (1 << 0Ë

	)

4023 
	#WOWL_PATTEN_TYPE_NA
 (1 << 1Ë

	)

4026 
uöt32
 
	mmasksize
;

4027 
uöt32
 
	moff£t
;

4028 
uöt32
 
	m∑âînoff£t
;

4029 
uöt32
 
	m∑âînsize
;

4030 
uöt32
 
	mid
;

4031 
uöt32
 
	mªas⁄size
;

4032 
uöt32
 
	mÊags
;

4035 } 
	twl_wowl_∑âîn_t
;

4038 
uöt
 
	mcou¡
;

4039 
wl_wowl_∑âîn_t
 
	m∑âîn
[1];

4040 } 
	twl_wowl_∑âîn_li°_t
;

4043 
uöt8
 
	mpci_wakeöd
;

4044 
uöt16
 
	mucode_wakeöd
;

4045 } 
	twl_wowl_wakeöd_t
;

4049 
	swl_txøã_˛ass
 {

4050 
uöt8
 
	möô_øã
;

4051 
uöt8
 
	mmö_øã
;

4052 
uöt8
 
	mmax_øã
;

4053 } 
	twl_txøã_˛ass_t
;

4058 
	#WLC_OBSS_SCAN_PASSIVE_DWELL_DEFAULT
 20

	)

4059 
	#WLC_OBSS_SCAN_PASSIVE_DWELL_MIN
 5

	)

4060 
	#WLC_OBSS_SCAN_PASSIVE_DWELL_MAX
 1000

	)

4061 
	#WLC_OBSS_SCAN_ACTIVE_DWELL_DEFAULT
 10

	)

4062 
	#WLC_OBSS_SCAN_ACTIVE_DWELL_MIN
 10

	)

4063 
	#WLC_OBSS_SCAN_ACTIVE_DWELL_MAX
 1000

	)

4064 
	#WLC_OBSS_SCAN_WIDTHSCAN_INTERVAL_DEFAULT
 300

	)

4065 
	#WLC_OBSS_SCAN_WIDTHSCAN_INTERVAL_MIN
 10

	)

4066 
	#WLC_OBSS_SCAN_WIDTHSCAN_INTERVAL_MAX
 900

	)

4067 
	#WLC_OBSS_SCAN_CHANWIDTH_TRANSITION_DLY_DEFAULT
 5

	)

4068 
	#WLC_OBSS_SCAN_CHANWIDTH_TRANSITION_DLY_MIN
 5

	)

4069 
	#WLC_OBSS_SCAN_CHANWIDTH_TRANSITION_DLY_MAX
 100

	)

4070 
	#WLC_OBSS_SCAN_PASSIVE_TOTAL_PER_CHANNEL_DEFAULT
 200

	)

4071 
	#WLC_OBSS_SCAN_PASSIVE_TOTAL_PER_CHANNEL_MIN
 200

	)

4072 
	#WLC_OBSS_SCAN_PASSIVE_TOTAL_PER_CHANNEL_MAX
 10000

	)

4073 
	#WLC_OBSS_SCAN_ACTIVE_TOTAL_PER_CHANNEL_DEFAULT
 20

	)

4074 
	#WLC_OBSS_SCAN_ACTIVE_TOTAL_PER_CHANNEL_MIN
 20

	)

4075 
	#WLC_OBSS_SCAN_ACTIVE_TOTAL_PER_CHANNEL_MAX
 10000

	)

4076 
	#WLC_OBSS_SCAN_ACTIVITY_THRESHOLD_DEFAULT
 25

	)

4077 
	#WLC_OBSS_SCAN_ACTIVITY_THRESHOLD_MIN
 0

	)

4078 
	#WLC_OBSS_SCAN_ACTIVITY_THRESHOLD_MAX
 100

	)

4081 
	swl_obss_sˇn_¨g
 {

4082 
öt16
 
	m∑ssive_dwñl
;

4083 
öt16
 
	ma˘ive_dwñl
;

4084 
öt16
 
	mbss_widthsˇn_öãrvÆ
;

4085 
öt16
 
	m∑ssive_tŸÆ
;

4086 
öt16
 
	ma˘ive_tŸÆ
;

4087 
öt16
 
	mch™width_å™sôi⁄_dñay
;

4088 
öt16
 
	ma˘ivôy_thªshﬁd
;

4089 } 
	twl_obss_sˇn_¨g_t
;

4091 
	#WL_OBSS_SCAN_PARAM_LEN
 (
wl_obss_sˇn_¨g_t
)

	)

4092 
	#WL_MIN_NUM_OBSS_SCAN_ARG
 7

	)

4094 
	#WL_COEX_INFO_MASK
 0x07

	)

4095 
	#WL_COEX_INFO_REQ
 0x01

	)

4096 
	#WL_COEX_40MHZ_INTOLERANT
 0x02

	)

4097 
	#WL_COEX_WIDTH20
 0x04

	)

4099 
	#WLC_RSSI_INVALID
 0

	)

4101 
	#MAX_RSSI_LEVELS
 8

	)

4104 
	swl_rssi_evít
 {

4105 
uöt32
 
	møã_limô_m£c
;

4108 
uöt8
 
	mnum_rssi_Àvñs
;

4109 
öt8
 
	mrssi_Àvñs
[
MAX_RSSI_LEVELS
];

4113 } 
	twl_rssi_evít_t
;

4115 
	swl_a˘i⁄_obss_c€x_ªq
 {

4116 
uöt8
 
	möfo
;

4117 
uöt8
 
	mnum
;

4118 
uöt8
 
	mch_li°
[1];

4119 } 
	twl_a˘i⁄_obss_c€x_ªq_t
;

4123 
	#WL_IOV_MAC_PARAM_LEN
 4

	)

4125 
	#WL_IOV_PKTQ_LOG_PRECS
 16

	)

4128 
uöt32
 
	mnum_addrs
;

4129 
	maddr_ty≥
[
WL_IOV_MAC_PARAM_LEN
];

4130 
ëhî_addr
 
	mó
[
WL_IOV_MAC_PARAM_LEN
];

4131 } 
	twl_iov_mac_∑øms_t
;

4136 
uöt32
 
	mªque°ed
;

4137 
uöt32
 
	m°‹ed
;

4138 
uöt32
 
	mßved
;

4141 
uöt32
 
	m£lfßved
;

4144 
uöt32
 
	mfuŒ_dr›≥d
;

4147 
uöt32
 
	mdr›≥d
;

4148 
uöt32
 
	mß¸ifi˚d
;

4151 
uöt32
 
	mbusy
;

4152 
uöt32
 
	mªåy
;

4153 
uöt32
 
	mps_ªåy
;

4154 
uöt32
 
	mªåy_dr›
;

4155 
uöt32
 
	mmax_avaû
;

4158 
uöt32
 
	mmax_u£d
;

4161 
uöt32
 
	mqueue_ˇ∑côy
;

4162 } 
	tpktq_log_cou¡îs_v01_t
;

4164 
	#ß¸ifõd
 
ß¸ifi˚d


	)

4167 
uöt8
 
	mnum_¥ec
[
WL_IOV_MAC_PARAM_LEN
];

4168 
pktq_log_cou¡îs_v01_t
 
	mcou¡îs
[
WL_IOV_MAC_PARAM_LEN
][
WL_IOV_PKTQ_LOG_PRECS
];

4169 
	mhódögs
[1];

4170 } 
	tpktq_log_f‹m©_v01_t
;

4174 
uöt32
 
	mvîsi⁄
;

4175 
wl_iov_mac_∑øms_t
 
	m∑øms
;

4177 
pktq_log_f‹m©_v01_t
 
	mv01
;

4178 } 
	mpktq_log
;

4179 } 
	twl_iov_pktq_log_t
;

4183 
	#EXTLOG_CUR_VER
 0x0100

	)

4185 
	#MAX_ARGSTR_LEN
 18

	)

4188 
	#LOG_MODULE_COMMON
 0x0001

	)

4189 
	#LOG_MODULE_ASSOC
 0x0002

	)

4190 
	#LOG_MODULE_EVENT
 0x0004

	)

4191 
	#LOG_MODULE_MAX
 3

	)

4194 
	#WL_LOG_LEVEL_DISABLE
 0

	)

4195 
	#WL_LOG_LEVEL_ERR
 1

	)

4196 
	#WL_LOG_LEVEL_WARN
 2

	)

4197 
	#WL_LOG_LEVEL_INFO
 3

	)

4198 
	#WL_LOG_LEVEL_MAX
 
WL_LOG_LEVEL_INFO


	)

4201 
	#LOG_FLAG_EVENT
 1

	)

4204 
	#LOG_ARGTYPE_NULL
 0

	)

4205 
	#LOG_ARGTYPE_STR
 1

	)

4206 
	#LOG_ARGTYPE_INT
 2

	)

4207 
	#LOG_ARGTYPE_INT_STR
 3

	)

4208 
	#LOG_ARGTYPE_STR_INT
 4

	)

4210 
	swlc_exéog_cfg
 {

4211 
	mmax_numbî
;

4212 
uöt16
 
	mmoduÀ
;

4213 
uöt8
 
	mÀvñ
;

4214 
uöt8
 
	mÊag
;

4215 
uöt16
 
	mvîsi⁄
;

4216 } 
	twlc_exéog_cfg_t
;

4218 
	slog_ªc‹d
 {

4219 
uöt32
 
	mtime
;

4220 
uöt16
 
	mmoduÀ
;

4221 
uöt16
 
	mid
;

4222 
uöt8
 
	mÀvñ
;

4223 
uöt8
 
	msub_unô
;

4224 
uöt8
 
	m£q_num
;

4225 
öt32
 
	m¨g
;

4226 
	m°r
[
MAX_ARGSTR_LEN
];

4227 } 
	tlog_ªc‹d_t
;

4229 
	swlc_exéog_ªq
 {

4230 
uöt32
 
	m‰om_œ°
;

4231 
uöt32
 
	mnum
;

4232 } 
	twlc_exéog_ªq_t
;

4234 
	swlc_exéog_ªsu…s
 {

4235 
uöt16
 
	mvîsi⁄
;

4236 
uöt16
 
	mªc‹d_Àn
;

4237 
uöt32
 
	mnum
;

4238 
log_ªc‹d_t
 
	mlogs
[1];

4239 } 
	twlc_exéog_ªsu…s_t
;

4241 
	slog_id°r
 {

4242 
uöt16
 
	mid
;

4243 
uöt16
 
	mÊag
;

4244 
uöt8
 
	m¨g_ty≥
;

4245 c⁄° *
	mfmt_°r
;

4246 } 
	tlog_id°r_t
;

4248 
	#FMTSTRF_USER
 1

	)

4255 
	mFMTSTR_DRIVER_UP_ID
 = 0,

4256 
	mFMTSTR_DRIVER_DOWN_ID
 = 1,

4257 
	mFMTSTR_SUSPEND_MAC_FAIL_ID
 = 2,

4258 
	mFMTSTR_NO_PROGRESS_ID
 = 3,

4259 
	mFMTSTR_RFDISABLE_ID
 = 4,

4260 
	mFMTSTR_REG_PRINT_ID
 = 5,

4261 
	mFMTSTR_EXPTIME_ID
 = 6,

4262 
	mFMTSTR_JOIN_START_ID
 = 7,

4263 
	mFMTSTR_JOIN_COMPLETE_ID
 = 8,

4264 
	mFMTSTR_NO_NETWORKS_ID
 = 9,

4265 
	mFMTSTR_SECURITY_MISMATCH_ID
 = 10,

4266 
	mFMTSTR_RATE_MISMATCH_ID
 = 11,

4267 
	mFMTSTR_AP_PRUNED_ID
 = 12,

4268 
	mFMTSTR_KEY_INSERTED_ID
 = 13,

4269 
	mFMTSTR_DEAUTH_ID
 = 14,

4270 
	mFMTSTR_DISASSOC_ID
 = 15,

4271 
	mFMTSTR_LINK_UP_ID
 = 16,

4272 
	mFMTSTR_LINK_DOWN_ID
 = 17,

4273 
	mFMTSTR_RADIO_HW_OFF_ID
 = 18,

4274 
	mFMTSTR_RADIO_HW_ON_ID
 = 19,

4275 
	mFMTSTR_EVENT_DESC_ID
 = 20,

4276 
	mFMTSTR_PNP_SET_POWER_ID
 = 21,

4277 
	mFMTSTR_RADIO_SW_OFF_ID
 = 22,

4278 
	mFMTSTR_RADIO_SW_ON_ID
 = 23,

4279 
	mFMTSTR_PWD_MISMATCH_ID
 = 24,

4280 
	mFMTSTR_FATAL_ERROR_ID
 = 25,

4281 
	mFMTSTR_AUTH_FAIL_ID
 = 26,

4282 
	mFMTSTR_ASSOC_FAIL_ID
 = 27,

4283 
	mFMTSTR_IBSS_FAIL_ID
 = 28,

4284 
	mFMTSTR_EXTAP_FAIL_ID
 = 29,

4285 
	mFMTSTR_MAX_ID


4286 } 
	tlog_fmt°r_id_t
;

4288 #ifde‡
DONGLEOVERLAYS


4290 
uöt32
 
	mÊags_idx
;

4291 
uöt32
 
	moff£t
;

4292 
uöt32
 
	mÀn
;

4294 } 
	twl_io˘l_ovîœy_t
;

4296 
	#OVERLAY_IDX_MASK
 0x000000ff

	)

4297 
	#OVERLAY_IDX_SHIFT
 0

	)

4298 
	#OVERLAY_FLAGS_MASK
 0xffffff00

	)

4299 
	#OVERLAY_FLAGS_SHIFT
 8

	)

4301 
	#OVERLAY_FLAG_POSTLOAD
 0x100

	)

4303 
	#OVERLAY_FLAG_DEFER_DL
 0x200

	)

4305 
	#OVERLAY_FLAG_PRESLEEP
 0x400

	)

4307 
	#OVERLAY_DOWNLOAD_CHUNKSIZE
 1024

	)

4313 
	~<∑cked_£˘i⁄_íd.h
>

4316 
	~<∑cked_£˘i⁄_°¨t.h
>

4318 #i‚de‡
LINUX_POSTMOGRIFY_REMOVAL


4321 
	#VNDR_IE_CMD_LEN
 4

	)

4326 
	#VNDR_IE_BEACON_FLAG
 0x1

	)

4327 
	#VNDR_IE_PRBRSP_FLAG
 0x2

	)

4328 
	#VNDR_IE_ASSOCRSP_FLAG
 0x4

	)

4329 
	#VNDR_IE_AUTHRSP_FLAG
 0x8

	)

4330 
	#VNDR_IE_PRBREQ_FLAG
 0x10

	)

4331 
	#VNDR_IE_ASSOCREQ_FLAG
 0x20

	)

4332 
	#VNDR_IE_IWAPID_FLAG
 0x40

	)

4333 
	#VNDR_IE_CUSTOM_FLAG
 0x100

	)

4335 
	#VNDR_IE_INFO_HDR_LEN
 ((
uöt32
))

	)

4337 
BWL_PRE_PACKED_STRUCT
 struct {

4338 
uöt32
 
	mpktÊag
;

4339 
vndr_õ_t
 
	mvndr_õ_d©a
;

4340 } 
	tBWL_POST_PACKED_STRUCT
 
	tvndr_õ_öfo_t
;

4342 
BWL_PRE_PACKED_STRUCT
 struct {

4343 
	mõcou¡
;

4344 
vndr_õ_öfo_t
 
	mvndr_õ_li°
[1];

4345 } 
	tBWL_POST_PACKED_STRUCT
 
	tvndr_õ_buf_t
;

4347 
BWL_PRE_PACKED_STRUCT
 struct {

4348 
	mcmd
[
VNDR_IE_CMD_LEN
];

4349 
vndr_õ_buf_t
 
	mvndr_õ_buf„r
;

4350 } 
	tBWL_POST_PACKED_STRUCT
 
	tvndr_õ_£tbuf_t
;

4353 
BWL_PRE_PACKED_STRUCT
 struct {

4354 
uöt8
 
	mid
;

4355 
uöt8
 
	mÀn
;

4356 
uöt8
 
	md©a
[1];

4357 } 
	tBWL_POST_PACKED_STRUCT
 
	tév_t
;

4359 
BWL_PRE_PACKED_STRUCT
 struct {

4360 
uöt32
 
	mpktÊag
;

4361 
év_t
 
	mõ_d©a
;

4362 } 
	tBWL_POST_PACKED_STRUCT
 
	tõ_öfo_t
;

4364 
BWL_PRE_PACKED_STRUCT
 struct {

4365 
	mõcou¡
;

4366 
õ_öfo_t
 
	mõ_li°
[1];

4367 } 
	tBWL_POST_PACKED_STRUCT
 
	tõ_buf_t
;

4369 
BWL_PRE_PACKED_STRUCT
 struct {

4370 
	mcmd
[
VNDR_IE_CMD_LEN
];

4371 
õ_buf_t
 
	mõ_buf„r
;

4372 } 
	tBWL_POST_PACKED_STRUCT
 
	tõ_£tbuf_t
;

4374 
BWL_PRE_PACKED_STRUCT
 struct {

4375 
uöt32
 
	mpktÊag
;

4376 
uöt8
 
	mid
;

4377 } 
	tBWL_POST_PACKED_STRUCT
 
	tõ_gëbuf_t
;

4381 
BWL_PRE_PACKED_STRUCT
 
	s°a_¥bªq_wps_õ_hdr
 {

4382 
ëhî_addr
 
	m°aAddr
;

4383 
uöt16
 
	mõLí
;

4384 } 
	tBWL_POST_PACKED_STRUCT
 
	t°a_¥bªq_wps_õ_hdr_t
;

4386 
BWL_PRE_PACKED_STRUCT
 
	s°a_¥bªq_wps_õ_d©a
 {

4387 
°a_¥bªq_wps_õ_hdr_t
 
	mhdr
;

4388 
uöt8
 
	mõD©a
[1];

4389 } 
	tBWL_POST_PACKED_STRUCT
 
	t°a_¥bªq_wps_õ_d©a_t
;

4391 
BWL_PRE_PACKED_STRUCT
 
	s°a_¥bªq_wps_õ_li°
 {

4392 
uöt32
 
	mtŸLí
;

4393 
uöt8
 
	mõD©aLi°
[1];

4394 } 
	tBWL_POST_PACKED_STRUCT
 
	t°a_¥bªq_wps_õ_li°_t
;

4397 #ifde‡
WLMEDIA_TXFAILEVENT


4398 
BWL_PRE_PACKED_STRUCT
 struct {

4399 
	mde°
[
ETHER_ADDR_LEN
];

4400 
uöt8
 
	m¥io
;

4401 
uöt8
 
	mÊags
;

4402 
uöt32
 
	mtsf_l
;

4403 
uöt32
 
	mtsf_h
;

4404 
uöt16
 
	møãs
;

4405 
uöt16
 
	mtx°©us
;

4406 } 
	tBWL_POST_PACKED_STRUCT
 
	ttxÁûöfo_t
;

4412 
	~<∑cked_£˘i⁄_íd.h
>

4414 #i‚de‡
LINUX_POSTMOGRIFY_REMOVAL


4416 
	#ASSERTLOG_CUR_VER
 0x0100

	)

4417 
	#MAX_ASSRTSTR_LEN
 64

	)

4419 
	sas£π_ªc‹d
 {

4420 
uöt32
 
	mtime
;

4421 
uöt8
 
	m£q_num
;

4422 
	m°r
[
MAX_ASSRTSTR_LEN
];

4423 } 
	tas£π_ªc‹d_t
;

4425 
	sas£πlog_ªsu…s
 {

4426 
uöt16
 
	mvîsi⁄
;

4427 
uöt16
 
	mªc‹d_Àn
;

4428 
uöt32
 
	mnum
;

4429 
as£π_ªc‹d_t
 
	mlogs
[1];

4430 } 
	tas£πlog_ªsu…s_t
;

4432 
	#LOGRRC_FIX_LEN
 8

	)

4433 
	#IOBUF_ALLOWED_NUM_OF_LOGREC
(
ty≥
, 
Àn
Ë(÷í - 
LOGRRC_FIX_LEN
)/—y≥))

	)

4439 
	#CHANIM_DISABLE
 0

	)

4440 
	#CHANIM_DETECT
 1

	)

4441 
	#CHANIM_EXT
 2

	)

4442 
	#CHANIM_ACT
 3

	)

4443 
	#CHANIM_MODE_MAX
 4

	)

4446 
	#APCS_INIT
 0

	)

4447 
	#APCS_IOCTL
 1

	)

4448 
	#APCS_CHANIM
 2

	)

4449 
	#APCS_CSTIMER
 3

	)

4450 
	#APCS_BTA
 4

	)

4453 
	#CHANIM_ACS_RECORD
 10

	)

4456 
	#CCASTATS_TXDUR
 0

	)

4457 
	#CCASTATS_INBSS
 1

	)

4458 
	#CCASTATS_OBSS
 2

	)

4459 
	#CCASTATS_NOCTG
 3

	)

4460 
	#CCASTATS_NOPKT
 4

	)

4461 
	#CCASTATS_DOZE
 5

	)

4462 
	#CCASTATS_TXOP
 6

	)

4463 
	#CCASTATS_GDTXDUR
 7

	)

4464 
	#CCASTATS_BDTXDUR
 8

	)

4465 
	#CCASTATS_MAX
 9

	)

4469 
boﬁ
 
	mvÆid
;

4470 
uöt8
 
	måiggî
;

4471 
ch™•ec_t
 
	m£À˘ed_ch•c
;

4472 
öt8
 
	mbgnoi£
;

4473 
uöt32
 
	mglôch_˙t
;

4474 
uöt8
 
	mcˇ°©s
;

4475 
uöt
 
	mtime°amp
;

4476 } 
	tch™im_acs_ªc‹d_t
;

4479 
ch™im_acs_ªc‹d_t
 
	macs_ªc‹d
[
CHANIM_ACS_RECORD
];

4480 
uöt8
 
	mcou¡
;

4481 
uöt
 
	mtime°amp
;

4482 } 
	twl_acs_ªc‹d_t
;

4484 
	sch™im_°©s
 {

4485 
uöt32
 
	mglôch˙t
;

4486 
uöt32
 
	mbad∂˝
;

4487 
uöt8
 
	mcˇ°©s
[
CCASTATS_MAX
];

4488 
öt8
 
	mbgnoi£
;

4489 
ch™•ec_t
 
	mch™•ec
;

4490 
uöt32
 
	mtime°amp
;

4491 } 
	tch™im_°©s_t
;

4493 
	#WL_CHANIM_STATS_VERSION
 1

	)

4494 
	#WL_CHANIM_COUNT_ALL
 0xff

	)

4495 
	#WL_CHANIM_COUNT_ONE
 0x1

	)

4498 
uöt32
 
	mbuÊí
;

4499 
uöt32
 
	mvîsi⁄
;

4500 
uöt32
 
	mcou¡
;

4501 
ch™im_°©s_t
 
	m°©s
[1];

4502 } 
	twl_ch™im_°©s_t
;

4504 
	#WL_CHANIM_STATS_FIXED_LEN
 
	`OFFSETOF
(
wl_ch™im_°©s_t
, 
°©s
)

	)

4507 
	#NOISE_MEASURE_KNOISE
 0x1

	)

4511 
uöt32
 
	mscb_timeout
;

4512 
uöt32
 
	mscb_a˘ivôy_time
;

4513 
uöt32
 
	mscb_max_¥obe
;

4514 } 
	twl_scb_¥obe_t
;

4517 
	#AP_TPC_OFF
 0

	)

4518 
	#AP_TPC_BSS_PWR
 1

	)

4519 
	#AP_TPC_AP_PWR
 2

	)

4520 
	#AP_TPC_AP_BSS_PWR
 3

	)

4521 
	#AP_TPC_MAX_LINK_MARGIN
 127

	)

4524 
	#AP_TPC_OFF
 0

	)

4525 
	#AP_TPC_BSS_PWR
 1

	)

4526 
	#AP_TPC_AP_PWR
 2

	)

4527 
	#AP_TPC_AP_BSS_PWR
 3

	)

4528 
	#AP_TPC_MAX_LINK_MARGIN
 127

	)

4532 
	#SMFS_VERSION
 1

	)

4534 
	swl_smfs_ñem
 {

4535 
uöt32
 
	mcou¡
;

4536 
uöt16
 
	mcode
;

4537 } 
	twl_smfs_ñem_t
;

4539 
	swl_smf_°©s
 {

4540 
uöt32
 
	mvîsi⁄
;

4541 
uöt16
 
	mÀngth
;

4542 
uöt8
 
	mty≥
;

4543 
uöt8
 
	mcodëy≥
;

4544 
uöt32
 
	mign‹ed_˙t
;

4545 
uöt32
 
	mmÆf‹med_˙t
;

4546 
uöt32
 
	mcou¡_tŸÆ
;

4547 
wl_smfs_ñem_t
 
	mñem
[1];

4548 } 
	twl_smf_°©s_t
;

4550 
	#WL_SMFSTATS_FIXED_LEN
 
	`OFFSETOF
(
wl_smf_°©s_t
, 
ñem
);

	)

4553 
	mSMFS_CODETYPE_SC
,

4554 
	mSMFS_CODETYPE_RC


4558 
	#SMFS_CODE_MALFORMED
 0xFFFE

	)

4559 
	#SMFS_CODE_IGNORED
 0xFFFD

	)

4561 
	esmfs_ty≥
 {

4562 
	mSMFS_TYPE_AUTH
,

4563 
	mSMFS_TYPE_ASSOC
,

4564 
	mSMFS_TYPE_REASSOC
,

4565 
	mSMFS_TYPE_DISASSOC_TX
,

4566 
	mSMFS_TYPE_DISASSOC_RX
,

4567 
	mSMFS_TYPE_DEAUTH_TX
,

4568 
	mSMFS_TYPE_DEAUTH_RX
,

4569 
	mSMFS_TYPE_MAX


4570 } 
	tsmfs_ty≥_t
;

4572 #ifde‡
PHYMON


4574 
	#PHYMON_VERSION
 1

	)

4576 
	swl_phyˇl_c‹e_°©e
 {

4578 
öt16
 
	mtx_iqloˇl_a
;

4579 
öt16
 
	mtx_iqloˇl_b
;

4580 
öt8
 
	mtx_iqloˇl_ci
;

4581 
öt8
 
	mtx_iqloˇl_cq
;

4582 
öt8
 
	mtx_iqloˇl_di
;

4583 
öt8
 
	mtx_iqloˇl_dq
;

4584 
öt8
 
	mtx_iqloˇl_ei
;

4585 
öt8
 
	mtx_iqloˇl_eq
;

4586 
öt8
 
	mtx_iqloˇl_fi
;

4587 
öt8
 
	mtx_iqloˇl_fq
;

4590 
öt16
 
	mrx_iqˇl_a
;

4591 
öt16
 
	mrx_iqˇl_b
;

4593 
uöt8
 
	mtx_iqloˇl_pwridx
;

4594 
uöt32
 
	m∑pd_ïsû⁄_èbÀ
[64];

4595 
öt16
 
	m∑pd_ïsû⁄_off£t
;

4596 
uöt8
 
	mcuº_tx_pwrödex
;

4597 
öt8
 
	midÀ_tssi
;

4598 
öt8
 
	me°_tx_pwr
;

4599 
öt8
 
	me°_rx_pwr
;

4600 
uöt16
 
	mrx_gaööfo
;

4601 
uöt16
 
	möô_gaöcode
;

4602 
öt8
 
	me°úr_tx
;

4603 
öt8
 
	me°úr_rx
;

4605 } 
	twl_phyˇl_c‹e_°©e_t
;

4607 
	swl_phyˇl_°©e
 {

4608 
	mvîsi⁄
;

4609 
öt8
 
	mnum_phy_c‹es
;

4610 
öt8
 
	mcuº_ãm≥øtuª
;

4611 
ch™•ec_t
 
	mch•ec
;

4612 
boﬁ
 
	maci_°©e
;

4613 
uöt16
 
	m¸smöpowî
;

4614 
uöt16
 
	m¸smöpowîl
;

4615 
uöt16
 
	m¸smöpowîu
;

4616 
wl_phyˇl_c‹e_°©e_t
 
	mphyˇl_c‹e
[1];

4617 } 
	twl_phyˇl_°©e_t
;

4619 
	#WL_PHYCAL_STAT_FIXED_LEN
 
	`OFFSETOF
(
wl_phyˇl_°©e_t
, 
phyˇl_c‹e
)

	)

4623 
	swl_p2p_disc_°
 {

4624 
uöt8
 
	m°©e
;

4625 
ch™•ec_t
 
	mch•ec
;

4626 
uöt16
 
	mdwñl
;

4627 } 
	twl_p2p_disc_°_t
;

4630 
	#WL_P2P_DISC_ST_SCAN
 0

	)

4631 
	#WL_P2P_DISC_ST_LISTEN
 1

	)

4632 
	#WL_P2P_DISC_ST_SEARCH
 2

	)

4635 
	swl_p2p_sˇn
 {

4636 
uöt8
 
	mty≥
;

4637 
uöt8
 
	mª£rved
[3];

4639 } 
	twl_p2p_sˇn_t
;

4642 
	swl_p2p_if
 {

4643 
ëhî_addr
 
	maddr
;

4644 
uöt8
 
	mty≥
;

4645 
ch™•ec_t
 
	mch•ec
;

4646 } 
	twl_p2p_if_t
;

4649 
	#WL_P2P_IF_CLIENT
 0

	)

4650 
	#WL_P2P_IF_GO
 1

	)

4651 
	#WL_P2P_IF_DYNBCN_GO
 2

	)

4652 
	#WL_P2P_IF_DEV
 3

	)

4655 
	swl_p2p_ifq
 {

4656 
uöt
 
	mbsscfgidx
;

4657 
	mi‚ame
[
BCM_MSG_IFNAME_MAX
];

4658 } 
	twl_p2p_ifq_t
;

4661 
	swl_p2p_›s
 {

4662 
uöt8
 
	m›s
;

4663 
uöt8
 
	m˘w
;

4664 } 
	twl_p2p_›s_t
;

4667 
	swl_p2p_sched_desc
 {

4668 
uöt32
 
	m°¨t
;

4669 
uöt32
 
	möãrvÆ
;

4670 
uöt32
 
	mduøti⁄
;

4671 
uöt32
 
	mcou¡
;

4672 } 
	twl_p2p_sched_desc_t
;

4675 
	#WL_P2P_SCHED_RSVD
 0

	)

4676 
	#WL_P2P_SCHED_REPEAT
 255

	)

4678 
	swl_p2p_sched
 {

4679 
uöt8
 
	mty≥
;

4680 
uöt8
 
	ma˘i⁄
;

4681 
uöt8
 
	m›ti⁄
;

4682 
wl_p2p_sched_desc_t
 
	mdesc
[1];

4683 } 
	twl_p2p_sched_t
;

4684 
	#WL_P2P_SCHED_FIXED_LEN
 3

	)

4687 
	#WL_P2P_SCHED_TYPE_ABS
 0

	)

4688 
	#WL_P2P_SCHED_TYPE_REQ_ABS
 1

	)

4691 
	#WL_P2P_SCHED_ACTION_NONE
 0

	)

4692 
	#WL_P2P_SCHED_ACTION_DOZE
 1

	)

4694 
	#WL_P2P_SCHED_ACTION_GOOFF
 2

	)

4696 
	#WL_P2P_SCHED_ACTION_RESET
 255

	)

4699 
	#WL_P2P_SCHED_OPTION_NORMAL
 0

	)

4700 
	#WL_P2P_SCHED_OPTION_BCNPCT
 1

	)

4702 
	#WL_P2P_SCHED_OPTION_TSFOFS
 2

	)

4707 
	#WL_P2P_FEAT_GO_CSA
 (1 << 0Ë

	)

4708 
	#WL_P2P_FEAT_GO_NOLEGACY
 (1 << 1Ë

	)

4711 
	#WL_P2P_FEAT_RESTRICT_DEV_RESP
 (1 << 2Ë

	)

4713 #ifde‡
WLNIC


4715 
	swl_nic_˙x
 {

4716 
uöt8
 
	m›code
;

4717 
ëhî_addr
 
	maddr
;

4719 
uöt8
 
	mSSID_Àn
;

4720 
uöt8
 
	mSSID
[32];

4721 
ëhî_addr
 
	mabssid
;

4722 
uöt8
 
	mjoö_≥riod
;

4723 } 
	twl_nic_˙x_t
;

4726 
	#WL_NIC_CNX_ADD
 0

	)

4727 
	#WL_NIC_CNX_DEL
 1

	)

4728 
	#WL_NIC_CNX_IDX
 2

	)

4729 
	#WL_NIC_CNX_CONN
 3

	)

4730 
	#WL_NIC_CNX_DIS
 4

	)

4733 
	swl_nic_cfg
 {

4734 
uöt8
 
	mvîsi⁄
;

4735 
uöt8
 
	mbóc⁄_mode
;

4736 
uöt16
 
	mbóc⁄_öãrvÆ
;

4737 
uöt8
 
	mdûuãd_bóc⁄_≥riod
;

4738 
uöt8
 
	mª≥©_EQC
;

4739 
uöt8
 
	msˇn_Àngth
;

4740 
uöt8
 
	msˇn_öãrvÆ
;

4741 
uöt8
 
	msˇn_¥obabûôy
;

4742 
uöt8
 
	mawake_wödow_Àngth
;

4743 
öt8
 
	mTSF_c‹ª˘i⁄
;

4744 
uöt8
 
	mASID
;

4745 
uöt8
 
	mch™√l_ußge_mode
;

4746 } 
	twl_nic_cfg_t
;

4749 
	#WL_NIC_CFG_VER
 1

	)

4752 
	#WL_NIC_BCN_NORM
 0

	)

4753 
	#WL_NIC_BCN_DILUTED
 1

	)

4756 
	#WL_NIC_CHAN_STATIC
 0

	)

4757 
	#WL_NIC_CHAN_CYCLE
 1

	)

4760 
	swl_nic_‰m
 {

4761 
uöt8
 
	mty≥
;

4762 
ëhî_addr
 
	mda
;

4763 
uöt8
 
	mbody
[1];

4764 } 
	twl_nic_‰m_t
;

4767 
	#WL_NIC_FRM_MYNET
 1

	)

4768 
	#WL_NIC_FRM_ACTION
 2

	)

4771 
	swl_nic_ifq
 {

4772 
uöt
 
	mbsscfgidx
;

4773 
	mi‚ame
[
BCM_MSG_IFNAME_MAX
];

4774 } 
	twl_nic_ifq_t
;

4778 
	swl_nic_dm
 {

4779 
uöt8
 
	míab
;

4780 
ch™•ec_t
 
	mch•ec
;

4781 } 
	twl_nic_dm_t
;

4785 
	#BCM_ACTION_RFAWARE
 0x77

	)

4786 
	#BCM_ACTION_RFAWARE_DCS
 0x01

	)

4789 
	#BCM_DCS_IOVAR
 0x1

	)

4790 
	#BCM_DCS_UNKNOWN
 0xFF

	)

4792 
	swl_bcmdcs_d©a
 {

4793 
uöt
 
	mªas⁄
;

4794 
ch™•ec_t
 
	mch•ec
;

4795 } 
	twl_bcmdcs_d©a_t
;

4802 
	#WL_11N_2x2
 1

	)

4803 
	#WL_11N_3x3
 3

	)

4804 
	#WL_11N_4x4
 4

	)

4807 
	#WLFEATURE_DISABLE_11N
 0x00000001

	)

4808 
	#WLFEATURE_DISABLE_11N_STBC_TX
 0x00000002

	)

4809 
	#WLFEATURE_DISABLE_11N_STBC_RX
 0x00000004

	)

4810 
	#WLFEATURE_DISABLE_11N_SGI_TX
 0x00000008

	)

4811 
	#WLFEATURE_DISABLE_11N_SGI_RX
 0x00000010

	)

4812 
	#WLFEATURE_DISABLE_11N_AMPDU_TX
 0x00000020

	)

4813 
	#WLFEATURE_DISABLE_11N_AMPDU_RX
 0x00000040

	)

4814 
	#WLFEATURE_DISABLE_11N_GF
 0x00000080

	)

4817 
	#PSTA_MODE_DISABLED
 0

	)

4818 
	#PSTA_MODE_PROXY
 1

	)

4819 
	#PSTA_MODE_REPEATER
 2

	)

4824 
uöt32
 
	mùaddr
;

4825 
uöt32
 
	mùaddr_mask
;

4826 
uöt32
 
	mùaddr_g©eway
;

4827 
uöt8
 
	mmac_g©eway
[6];

4828 
uöt32
 
	mùaddr_dns
;

4829 
uöt8
 
	mmac_dns
[6];

4830 
uöt8
 
	mGUID
[38];

4831 } 
	t«t_if_öfo_t
;

4834 
uöt
 
	m›
;

4835 
boﬁ
 
	mpub_if
;

4836 
«t_if_öfo_t
 
	mif_öfo
;

4837 } 
	t«t_cfg_t
;

4840 
	#NAT_OP_ENABLE
 1

	)

4841 
	#NAT_OP_DISABLE
 2

	)

4842 
	#NAT_OP_DISABLE_ALL
 3

	)

4845 
	#NAT_STATE_ENABLED
 1

	)

4846 
	#NAT_STATE_DISABLED
 2

	)

4849 
	m°©e
;

4850 } 
	t«t_°©e_t
;

4852 #ifde‡
PROP_TXSTATUS


4858 
	#WLFC_FLAGS_RSSI_SIGNALS
 0x0001

	)

4872 
	#WLFC_FLAGS_XONXOFF_SIGNALS
 0x0002

	)

4879 
	#WLFC_FLAGS_CREDIT_STATUS_SIGNALS
 0x0004

	)

4881 
	#WLFC_FLAGS_HOST_PROPTXSTATUS_ACTIVE
 0x0008

	)

4882 
	#WLFC_FLAGS_PSQ_GENERATIONFSM_ENABLE
 0x0010

	)

4883 
	#WLFC_FLAGS_PSQ_ZERO_BUFFER_ENABLE
 0x0020

	)

4884 
	#WLFC_FLAGS_HOST_RXRERODER_ACTIVE
 0x0040

	)

4887 
	#BTA_STATE_LOG_SZ
 64

	)

4891 
	mHCIRe£t
 = 1,

4892 
	mHCIRódLoˇlAMPInfo
,

4893 
	mHCIRódLoˇlAMPASSOC
,

4894 
	mHCIWrôeRemŸeAMPASSOC
,

4895 
	mHCICª©ePhysiˇlLök
,

4896 
	mHCIAc˚±PhysiˇlLökReque°
,

4897 
	mHCIDisc⁄√˘PhysiˇlLök
,

4898 
	mHCICª©eLogiˇlLök
,

4899 
	mHCIAc˚±LogiˇlLök
,

4900 
	mHCIDisc⁄√˘LogiˇlLök
,

4901 
	mHCILogiˇlLökC™˚l
,

4902 
	mHCIAmpSèãCh™ge
,

4903 
	mHCIWrôeLogiˇlLökAc˚±Timeout


4906 
	sÊush_txfifo
 {

4907 
uöt32
 
	mtxfifobmp
;

4908 
uöt32
 
	mhwtxfifoÊush
;

4909 
ëhî_addr
 
	mó
;

4910 } 
	tÊush_txfifo_t
;

4912 
	#CHANNEL_5G_LOW_START
 36

	)

4913 
	#CHANNEL_5G_MID_START
 52

	)

4914 
	#CHANNEL_5G_HIGH_START
 100

	)

4915 
	#CHANNEL_5G_UPPER_START
 149

	)

4918 
	mSPATIAL_MODE_2G_IDX
 = 0,

4919 
	mSPATIAL_MODE_5G_LOW_IDX
,

4920 
	mSPATIAL_MODE_5G_MID_IDX
,

4921 
	mSPATIAL_MODE_5G_HIGH_IDX
,

4922 
	mSPATIAL_MODE_5G_UPPER_IDX
,

4923 
	mSPATIAL_MODE_MAX_IDX


4927 
	swl_mempoﬁ_°©s
 {

4928 
	mnum
;

4929 
bcm_mp_°©s_t
 
	ms
[1];

4930 } 
	twl_mempoﬁ_°©s_t
;

4934 
	#IPV4_ARP_FILTER
 0x0001

	)

4935 
	#IPV4_NETBT_FILTER
 0x0002

	)

4936 
	#IPV4_LLMNR_FILTER
 0x0004

	)

4937 
	#IPV4_SSDP_FILTER
 0x0008

	)

4938 
	#IPV4_WSD_FILTER
 0x0010

	)

4939 
	#IPV6_NETBT_FILTER
 0x0200

	)

4940 
	#IPV6_LLMNR_FILTER
 0x0400

	)

4941 
	#IPV6_SSDP_FILTER
 0x0800

	)

4942 
	#IPV6_WSD_FILTER
 0x1000

	)

4945 
	#NWOE_OL_ENABLE
 0x00000001

	)

4948 
uöt32
 
	mùaddr
;

4949 
uöt32
 
	mùaddr_√tmask
;

4950 
uöt32
 
	mùaddr_g©eway
;

4951 } 
	tnw€_ifc⁄fig_t
;

4958 
	#TRF_MGMT_MAX_PRIORITIES
 3

	)

4960 
	#TRF_MGMT_FLAG_ADD_DSCP
 0x0001

	)

4961 
	#TRF_MGMT_FLAG_DISABLE_SHAPING
 0x0002

	)

4962 
	#TRF_MGMT_FLAG_DISABLE_PRIORITY_TAGGING
 0x0004

	)

4965 
	eåf_mgmt_¥i‹ôy_˛ass
 {

4966 
	måf_mgmt_¥i‹ôy_low
 = 0,

4967 
	måf_mgmt_¥i‹ôy_medium
 = 1,

4968 
	måf_mgmt_¥i‹ôy_high
 = 2,

4969 
	måf_mgmt_¥i‹ôy_övÆid
 = (
åf_mgmt_¥i‹ôy_high
 + 1)

4970 } 
	tåf_mgmt_¥i‹ôy_˛ass_t
;

4973 
	såf_mgmt_c⁄fig
 {

4974 
uöt32
 
	måf_mgmt_íabÀd
;

4975 
uöt32
 
	mÊags
;

4976 
uöt32
 
	mho°_ù_addr
;

4977 
uöt32
 
	mho°_sub√t_mask
;

4978 
uöt32
 
	mdow∆ök_b™dwidth
;

4979 
uöt32
 
	mu∂ök_b™dwidth
;

4980 
uöt32
 
	mmö_tx_b™dwidth
[
TRF_MGMT_MAX_PRIORITIES
];

4981 
uöt32
 
	mmö_rx_b™dwidth
[
TRF_MGMT_MAX_PRIORITIES
];

4982 } 
	tåf_mgmt_c⁄fig_t
;

4985 
	såf_mgmt_fûãr
 {

4986 
ëhî_addr
 
	md°_ëhî_addr
;

4987 
uöt32
 
	md°_ù_addr
;

4988 
uöt16
 
	md°_p‹t
;

4989 
uöt16
 
	m§c_p‹t
;

4990 
uöt16
 
	m¥Ÿ
;

4991 
uöt16
 
	mÊags
;

4992 
åf_mgmt_¥i‹ôy_˛ass_t
 
	m¥i‹ôy
;

4993 } 
	tåf_mgmt_fûãr_t
;

4996 
	såf_mgmt_fûãr_li°
 {

4997 
uöt32
 
	mnum_fûãrs
;

4998 
åf_mgmt_fûãr_t
 
	mfûãr
[1];

4999 } 
	tåf_mgmt_fûãr_li°_t
;

5002 
	såf_mgmt_globÆ_öfo
 {

5003 
uöt32
 
	mmaximum_byãs_≥r_£c⁄d
;

5004 
uöt32
 
	mmaximum_byãs_≥r_ßm∂ög_≥riod
;

5005 
uöt32
 
	mtŸÆ_byãs_c⁄sumed_≥r_£c⁄d
;

5006 
uöt32
 
	mtŸÆ_byãs_c⁄sumed_≥r_ßm∂ög_≥riod
;

5007 
uöt32
 
	mtŸÆ_unu£d_byãs_≥r_ßm∂ög_≥riod
;

5008 } 
	tåf_mgmt_globÆ_öfo_t
;

5011 
	såf_mgmt_sh≠ög_öfo
 {

5012 
uöt32
 
	mgauø¡ìd_b™dwidth_≥r˚¡age
;

5013 
uöt32
 
	mgu¨™ãed_byãs_≥r_£c⁄d
;

5014 
uöt32
 
	mgu¨™ãed_byãs_≥r_ßm∂ög_≥riod
;

5015 
uöt32
 
	mnum_byãs_¥odu˚d_≥r_£c⁄d
;

5016 
uöt32
 
	mnum_byãs_c⁄sumed_≥r_£c⁄d
;

5017 
uöt32
 
	mnum_queued_∑ckës
;

5018 
uöt32
 
	mnum_queued_byãs
;

5019 } 
	tåf_mgmt_sh≠ög_öfo_t
;

5022 
	såf_mgmt_sh≠ög_öfo_¨øy
 {

5023 
åf_mgmt_globÆ_öfo_t
 
	mtx_globÆ_sh≠ög_öfo
;

5024 
åf_mgmt_sh≠ög_öfo_t
 
	mtx_queue_sh≠ög_öfo
[
TRF_MGMT_MAX_PRIORITIES
];

5025 
åf_mgmt_globÆ_öfo_t
 
	mrx_globÆ_sh≠ög_öfo
;

5026 
åf_mgmt_sh≠ög_öfo_t
 
	mrx_queue_sh≠ög_öfo
[
TRF_MGMT_MAX_PRIORITIES
];

5027 } 
	tåf_mgmt_sh≠ög_öfo_¨øy_t
;

5031 
	såf_mgmt_°©s
 {

5032 
uöt32
 
	mnum_¥o˚s£d_∑ckës
;

5033 
uöt32
 
	mnum_¥o˚s£d_byãs
;

5034 
uöt32
 
	mnum_disˇrded_∑ckës
;

5035 } 
	tåf_mgmt_°©s_t
;

5038 
	såf_mgmt_°©s_¨øy
 {

5039 
åf_mgmt_°©s_t
 
	mtx_queue_°©s
[
TRF_MGMT_MAX_PRIORITIES
];

5040 
åf_mgmt_°©s_t
 
	mrx_queue_°©s
[
TRF_MGMT_MAX_PRIORITIES
];

5041 } 
	tåf_mgmt_°©s_¨øy_t
;

5043 
	spowî£l_∑øms
 {

5045 
öt32
 
	mç_øtio_thªsh
;

5046 
uöt8
 
	møã_°ab_thªsh
;

5047 
uöt8
 
	mpwr_°ab_thªsh
;

5048 
uöt8
 
	mpwr_£l_exp_time
;

5049 } 
	tpowî£l_∑øms_t
;

	@linux_osl.c

27 
	#LINUX_PORT


	)

29 
	~<ty≥defs.h
>

30 
	~<bcmídün.h
>

31 
	~<löuxvî.h
>

32 
	~<bcmdefs.h
>

33 
	~<o¶.h
>

34 
	~<bcmutûs.h
>

35 
	~<löux/dñay.h
>

36 
	~<pcicfg.h
>

39 
	~<löux/fs.h
>

41 
	#PCI_CFG_RETRY
 10

	)

43 
	#OS_HANDLE_MAGIC
 0x1234abcd

	)

44 
	#BCM_MEM_FILENAME_LEN
 24

	)

46 #ifde‡
CONFIG_DHD_USE_STATIC_BUF


47 
	#DHD_SKB_HDRSIZE
 336

	)

48 
	#DHD_SKB_1PAGE_BUFSIZE
 ((
PAGE_SIZE
*1)-
DHD_SKB_HDRSIZE
)

	)

49 
	#DHD_SKB_2PAGE_BUFSIZE
 ((
PAGE_SIZE
*2)-
DHD_SKB_HDRSIZE
)

	)

50 
	#DHD_SKB_4PAGE_BUFSIZE
 ((
PAGE_SIZE
*4)-
DHD_SKB_HDRSIZE
)

	)

52 
	#STATIC_BUF_MAX_NUM
 16

	)

53 
	#STATIC_BUF_SIZE
 (
PAGE_SIZE
*2)

	)

54 
	#STATIC_BUF_TOTAL_LEN
 (
STATIC_BUF_MAX_NUM
 * 
STATIC_BUF_SIZE
)

	)

56 
	sbcm_°©ic_buf
 {

57 
£m≠h‹e
 
	m°©ic_£m
;

58 *
	mbuf_±r
;

59 
	mbuf_u£
[
STATIC_BUF_MAX_NUM
];

60 } 
	tbcm_°©ic_buf_t
;

62 
bcm_°©ic_buf_t
 *
	gbcm_°©ic_buf
 = 0;

64 
	#STATIC_PKT_MAX_NUM
 8

	)

65 #i‡
deföed
(
ENHANCED_STATIC_BUF
)

66 
	#STATIC_PKT_4PAGE_NUM
 1

	)

67 
	#DHD_SKB_MAX_BUFSIZE
 
DHD_SKB_4PAGE_BUFSIZE


	)

69 
	#STATIC_PKT_4PAGE_NUM
 0

	)

70 
	#DHD_SKB_MAX_BUFSIZE
 
DHD_SKB_2PAGE_BUFSIZE


	)

73 
	sbcm_°©ic_pkt
 {

74 
sk_buff
 *
	mskb_4k
[
STATIC_PKT_MAX_NUM
];

75 
sk_buff
 *
	mskb_8k
[
STATIC_PKT_MAX_NUM
];

76 #ifde‡
ENHANCED_STATIC_BUF


77 
sk_buff
 *
	mskb_16k
;

79 
£m≠h‹e
 
	mo¶_pkt_£m
;

80 
	mpkt_u£
[
STATIC_PKT_MAX_NUM
 * 2 + 
STATIC_PKT_4PAGE_NUM
];

81 } 
	tbcm_°©ic_pkt_t
;

83 
bcm_°©ic_pkt_t
 *
	gbcm_°©ic_skb
 = 0;

86 
	sbcm_mem_lök
 {

87 
bcm_mem_lök
 *
	m¥ev
;

88 
bcm_mem_lök
 *
	m√xt
;

89 
uöt
 
	msize
;

90 
	mlöe
;

91 *
	mosh
;

92 
	mfûe
[
BCM_MEM_FILENAME_LEN
];

93 } 
	tbcm_mem_lök_t
;

95 
	so¶_öfo
 {

96 
o¶_puböfo_t
 
	mpub
;

97 #ifde‡
CTFPOOL


98 
˘Âoﬁ_t
 *
	m˘Âoﬁ
;

100 
uöt
 
	mmagic
;

101 *
	mpdev
;

102 
©omic_t
 
	mmÆlo˚d
;

103 
uöt
 
	mÁûed
;

104 
uöt
 
	mbu°y≥
;

105 
bcm_mem_lök_t
 *
	mdbgmem_li°
;

106 
•ölock_t
 
	mdbgmem_lock
;

107 
•ölock_t
 
	mpkèŒoc_lock
;

113 
uöt32
 
	gg_as£π_ty≥
 = 
FALSE
;

115 
öt16
 
	glöuxbcmîr‹m≠
[] =

117 -
EINVAL
,

118 -
EINVAL
,

119 -
EINVAL
,

120 -
EINVAL
,

121 -
EINVAL
,

122 -
EINVAL
,

123 -
EINVAL
,

124 -
EINVAL
,

125 -
EINVAL
,

126 -
EINVAL
,

127 -
EINVAL
,

128 -
EINVAL
,

129 -
EINVAL
,

130 -
E2BIG
,

131 -
E2BIG
,

132 -
EBUSY
,

133 -
EINVAL
,

134 -
EINVAL
,

135 -
EINVAL
,

136 -
EINVAL
,

137 -
EFAULT
,

138 -
ENOMEM
,

139 -
EOPNOTSUPP
,

140 -
EMSGSIZE
,

141 -
EINVAL
,

142 -
EPERM
,

143 -
ENOMEM
,

144 -
EINVAL
,

145 -
ERANGE
,

146 -
EINVAL
,

147 -
EINVAL
,

148 -
EINVAL
,

149 -
EINVAL
,

150 -
EINVAL
,

151 -
EIO
,

152 -
ENODEV
,

153 -
EINVAL
,

154 -
EIO
,

155 -
EIO
,

156 -
ENODEV
,

157 -
EINVAL
,

158 -
ENODATA
,

164 #i‡
BCME_LAST
 != -42

172 
	$o¶_îr‹
(
bcmîr‹
)

174 i‡(
bcmîr‹
 > 0)

175 
bcmîr‹
 = 0;

176 i‡(
bcmîr‹
 < 
BCME_LAST
)

177 
bcmîr‹
 = 
BCME_ERROR
;

180  
löuxbcmîr‹m≠
[-
bcmîr‹
];

181 
	}
}

183 
uöt8
* 
dhd_os_¥óŒoc
(*
osh
, 
£˘i⁄
, 
size
);

185 
o¶_t
 *

186 
	$o¶_©èch
(*
pdev
, 
uöt
 
bu°y≥
, 
boﬁ
 
pkâag
)

188 
o¶_t
 *
osh
;

190 i‡(!(
osh
 = 
	`kmÆloc
((
o¶_t
), 
GFP_ATOMIC
)))

191  
osh
;

193 
	`ASSERT
(
osh
);

195 
	`bzîo
(
osh
, (
o¶_t
));

198 
	`ASSERT
(
	`ABS
(
BCME_LAST
Ë=(
	`ARRAYSIZE
(
löuxbcmîr‹m≠
) - 1));

200 
osh
->
magic
 = 
OS_HANDLE_MAGIC
;

201 
	`©omic_£t
(&
osh
->
mÆlo˚d
, 0);

202 
osh
->
Áûed
 = 0;

203 
osh
->
dbgmem_li°
 = 
NULL
;

204 
	`•ö_lock_öô
(&(
osh
->
dbgmem_lock
));

205 
osh
->
pdev
 =Ödev;

206 
osh
->
pub
.
pkâag
 =Ökttag;

207 
osh
->
bu°y≥
 = bustype;

209 
bu°y≥
) {

210 
PCI_BUS
:

211 
SI_BUS
:

212 
PCMCIA_BUS
:

213 
osh
->
pub
.
mmbus
 = 
TRUE
;

215 
JTAG_BUS
:

216 
SDIO_BUS
:

217 
USB_BUS
:

218 
SPI_BUS
:

219 
RPC_BUS
:

220 
osh
->
pub
.
mmbus
 = 
FALSE
;

223 
	`ASSERT
(
FALSE
);

227 #i‡
	`deföed
(
CONFIG_DHD_USE_STATIC_BUF
)

228 i‡(!
bcm_°©ic_buf
) {

229 i‡(!(
bcm_°©ic_buf
 = (
bcm_°©ic_buf_t
 *)
	`dhd_os_¥óŒoc
(
osh
, 3, 
STATIC_BUF_SIZE
+

230 
STATIC_BUF_TOTAL_LEN
))) {

231 
	`¥ötk
("canÇotálloc static buf!\n");

234 
	`¥ötk
("Ælo¯°©i¯bu‡© %x!\n", ()
bcm_°©ic_buf
);

237 
	`£ma_öô
(&
bcm_°©ic_buf
->
°©ic_£m
, 1);

239 
bcm_°©ic_buf
->
buf_±r
 = (*)bcm_°©ic_bu‡+ 
STATIC_BUF_SIZE
;

242 i‡(!
bcm_°©ic_skb
) {

243 
i
;

244 *
skb_buff_±r
 = 0;

245 
bcm_°©ic_skb
 = (
bcm_°©ic_pkt_t
 *)((*)
bcm_°©ic_buf
 + 2048);

246 
skb_buff_±r
 = 
	`dhd_os_¥óŒoc
(
osh
, 4, 0);

248 
	`bc›y
(
skb_buff_±r
, 
bcm_°©ic_skb
, (
sk_buff
 *)*

249 (
STATIC_PKT_MAX_NUM
 * 2 + 
STATIC_PKT_4PAGE_NUM
));

250 
i
 = 0; i < (
STATIC_PKT_MAX_NUM
 * 2 + 
STATIC_PKT_4PAGE_NUM
); i++)

251 
bcm_°©ic_skb
->
pkt_u£
[
i
] = 0;

253 
	`£ma_öô
(&
bcm_°©ic_skb
->
o¶_pkt_£m
, 1);

257 
	`•ö_lock_öô
(&(
osh
->
pkèŒoc_lock
));

259  
osh
;

260 
	}
}

263 
	$o¶_dëach
(
o¶_t
 *
osh
)

265 i‡(
osh
 =
NULL
)

268 #ifde‡
CONFIG_DHD_USE_STATIC_BUF


269 i‡(
bcm_°©ic_buf
) {

270 
bcm_°©ic_buf
 = 0;

272 i‡(
bcm_°©ic_skb
) {

273 
bcm_°©ic_skb
 = 0;

277 
	`ASSERT
(
osh
->
magic
 =
OS_HANDLE_MAGIC
);

278 
	`k‰ì
(
osh
);

279 
	}
}

281 
sk_buff
 *
	$o¶_Æloc_skb
(
Àn
)

283 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 25)

284  
	`__dev_Æloc_skb
(
Àn
, 
GFP_ATOMIC
);

286  
	`dev_Æloc_skb
(
Àn
);

288 
	}
}

290 #ifde‡
CTFPOOL


292 #ifde‡
CTFPOOL_SPINLOCK


293 
	#CTFPOOL_LOCK
(
˘Âoﬁ
, 
Êags
Ë
	`•ö_lock_úqßve
(&(˘Âoﬁ)->
lock
, fœgs)

	)

294 
	#CTFPOOL_UNLOCK
(
˘Âoﬁ
, 
Êags
Ë
	`•ö_u∆ock_úqª°‹e
(&(˘Âoﬁ)->
lock
, fœgs)

	)

296 
	#CTFPOOL_LOCK
(
˘Âoﬁ
, 
Êags
Ë
	`•ö_lock_bh
(&(˘Âoﬁ)->
lock
)

	)

297 
	#CTFPOOL_UNLOCK
(
˘Âoﬁ
, 
Êags
Ë
	`•ö_u∆ock_bh
(&(˘Âoﬁ)->
lock
)

	)

303 
	$o¶_˘Âoﬁ_add
(
o¶_t
 *
osh
)

305 
sk_buff
 *
skb
;

306 #ifde‡
CTFPOOL_SPINLOCK


307 
Êags
;

310 i‡((
osh
 =
NULL
Ë|| (osh->
˘Âoﬁ
 == NULL))

311  
NULL
;

313 
	`CTFPOOL_LOCK
(
osh
->
˘Âoﬁ
, 
Êags
);

314 
	`ASSERT
(
osh
->
˘Âoﬁ
->
cuº_obj
 <osh->˘Âoﬁ->
max_obj
);

317 i‡(
osh
->
˘Âoﬁ
->
cuº_obj
 =osh->˘Âoﬁ->
max_obj
) {

318 
	`CTFPOOL_UNLOCK
(
osh
->
˘Âoﬁ
, 
Êags
);

319  
NULL
;

323 
skb
 = 
	`o¶_Æloc_skb
(
osh
->
˘Âoﬁ
->
obj_size
);

324 i‡(
skb
 =
NULL
) {

325 
	`¥ötf
("%s: skbáŒo¯o‡À¿%d faûed\n", 
__FUNCTION__
,

326 
osh
->
˘Âoﬁ
->
obj_size
);

327 
	`CTFPOOL_UNLOCK
(
osh
->
˘Âoﬁ
, 
Êags
);

328  
NULL
;

332 
skb
->
√xt
 = (
sk_buff
 *)
osh
->
˘Âoﬁ
->
hód
;

333 
osh
->
˘Âoﬁ
->
hód
 = 
skb
;

334 
osh
->
˘Âoﬁ
->
Á°_‰ìs
++;

335 
osh
->
˘Âoﬁ
->
cuº_obj
++;

338 
	`CTFPOOLPTR
(
osh
, 
skb
Ë(*)osh->
˘Âoﬁ
;

341 
	`PKTFAST
(
osh
, 
skb
Ë
FASTBUF
;

343 
	`CTFPOOL_UNLOCK
(
osh
->
˘Âoﬁ
, 
Êags
);

345  
skb
;

346 
	}
}

352 
	$o¶_˘Âoﬁ_ª∂íish
(
o¶_t
 *
osh
, 
uöt
 
thªsh
)

354 i‡((
osh
 =
NULL
Ë|| (osh->
˘Âoﬁ
 == NULL))

358 (
osh
->
˘Âoﬁ
->
ªfûls
 > 0Ë&& (
thªsh
--)) {

359 
	`o¶_˘Âoﬁ_add
(
osh
);

360 
osh
->
˘Âoﬁ
->
ªfûls
--;

362 
	}
}

367 
öt32


368 
	$o¶_˘Âoﬁ_öô
(
o¶_t
 *
osh
, 
uöt
 
numobj
, uöà
size
)

370 
osh
->
˘Âoﬁ
 = 
	`kmÆloc
((
˘Âoﬁ_t
), 
GFP_ATOMIC
);

371 
	`ASSERT
(
osh
->
˘Âoﬁ
);

372 
	`bzîo
(
osh
->
˘Âoﬁ
, (
˘Âoﬁ_t
));

374 
osh
->
˘Âoﬁ
->
max_obj
 = 
numobj
;

375 
osh
->
˘Âoﬁ
->
obj_size
 = 
size
;

377 
	`•ö_lock_öô
(&
osh
->
˘Âoﬁ
->
lock
);

379 
numobj
--) {

380 i‡(!
	`o¶_˘Âoﬁ_add
(
osh
))

382 
osh
->
˘Âoﬁ
->
Á°_‰ìs
--;

386 
	}
}

392 
	$o¶_˘Âoﬁ_˛ónup
(
o¶_t
 *
osh
)

394 
sk_buff
 *
skb
, *
nskb
;

395 #ifde‡
CTFPOOL_SPINLOCK


396 
Êags
;

399 i‡((
osh
 =
NULL
Ë|| (osh->
˘Âoﬁ
 == NULL))

402 
	`CTFPOOL_LOCK
(
osh
->
˘Âoﬁ
, 
Êags
);

404 
skb
 = 
osh
->
˘Âoﬁ
->
hód
;

406 
skb
 !
NULL
) {

407 
nskb
 = 
skb
->
√xt
;

408 
	`dev_k‰ì_skb
(
skb
);

409 
skb
 = 
nskb
;

410 
osh
->
˘Âoﬁ
->
cuº_obj
--;

413 
	`ASSERT
(
osh
->
˘Âoﬁ
->
cuº_obj
 == 0);

414 
osh
->
˘Âoﬁ
->
hód
 = 
NULL
;

415 
	`CTFPOOL_UNLOCK
(
osh
->
˘Âoﬁ
, 
Êags
);

417 
	`k‰ì
(
osh
->
˘Âoﬁ
);

418 
osh
->
˘Âoﬁ
 = 
NULL
;

419 
	}
}

422 
	$o¶_˘Âoﬁ_°©s
(
o¶_t
 *
osh
, *
b
)

424 
bcm°rbuf
 *
bb
;

426 i‡((
osh
 =
NULL
Ë|| (osh->
˘Âoﬁ
 == NULL))

429 #ifde‡
CONFIG_DHD_USE_STATIC_BUF


430 i‡(
bcm_°©ic_buf
) {

431 
bcm_°©ic_buf
 = 0;

433 i‡(
bcm_°©ic_skb
) {

434 
bcm_°©ic_skb
 = 0;

438 
bb
 = 
b
;

440 
	`ASSERT
((
osh
 !
NULL
Ë&& (
bb
 != NULL));

442 
	`bcm_b¥ötf
(
bb
, "max_obj %d obj_size %d curr_obj %dÑefills %d\n",

443 
osh
->
˘Âoﬁ
->
max_obj
, osh->˘Âoﬁ->
obj_size
,

444 
osh
->
˘Âoﬁ
->
cuº_obj
, osh->˘Âoﬁ->
ªfûls
);

445 
	`bcm_b¥ötf
(
bb
, "fast_allocs %d fast_frees %d slow_allocs %d\n",

446 
osh
->
˘Âoﬁ
->
Á°_Ælocs
, osh->˘Âoﬁ->
Á°_‰ìs
,

447 
osh
->
˘Âoﬁ
->
¶ow_Ælocs
);

448 
	}
}

450 
ölöe
 
sk_buff
 *

451 
	$o¶_pktÁ°gë
(
o¶_t
 *
osh
, 
uöt
 
Àn
)

453 
sk_buff
 *
skb
;

454 #ifde‡
CTFPOOL_SPINLOCK


455 
Êags
;

461 i‡(
osh
->
˘Âoﬁ
 =
NULL
)

462  
NULL
;

464 
	`CTFPOOL_LOCK
(
osh
->
˘Âoﬁ
, 
Êags
);

465 i‡(
osh
->
˘Âoﬁ
->
hód
 =
NULL
) {

466 
	`ASSERT
(
osh
->
˘Âoﬁ
->
cuº_obj
 == 0);

467 
osh
->
˘Âoﬁ
->
¶ow_Ælocs
++;

468 
	`CTFPOOL_UNLOCK
(
osh
->
˘Âoﬁ
, 
Êags
);

469  
NULL
;

472 
	`ASSERT
(
Àn
 <
osh
->
˘Âoﬁ
->
obj_size
);

475 
skb
 = (
sk_buff
 *)
osh
->
˘Âoﬁ
->
hód
;

476 
osh
->
˘Âoﬁ
->
hód
 = (*)
skb
->
√xt
;

478 
osh
->
˘Âoﬁ
->
Á°_Ælocs
++;

479 
osh
->
˘Âoﬁ
->
cuº_obj
--;

480 
	`ASSERT
(
	`CTFPOOLHEAD
(
osh
, 
skb
Ë=(
sock
 *)osh->
˘Âoﬁ
->
hód
);

481 
	`CTFPOOL_UNLOCK
(
osh
->
˘Âoﬁ
, 
Êags
);

484 
skb
->
√xt
 = skb->
¥ev
 = 
NULL
;

485 
skb
->
d©a
 = skb->
hód
 + 16;

486 
skb
->
èû
 = skb->
hód
 + 16;

488 
skb
->
Àn
 = 0;

489 
skb
->
˛⁄ed
 = 0;

490 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2, 6, 14)

491 
skb
->
li°
 = 
NULL
;

493 
	`©omic_£t
(&
skb
->
u£rs
, 1);

495  
skb
;

496 
	}
}

503 
sk_buff
 * 
BCMFASTPATH


504 
	$o¶_pkt_t⁄©ive
(
o¶_t
 *
osh
, *
pkt
)

506 #i‚de‡
WL_UMK


507 
sk_buff
 *
nskb
;

508 
Êags
;

511 i‡(
osh
->
pub
.
pkâag
)

512 
	`bzîo
((*)((
sk_buff
 *)
pkt
)->
cb
, 
OSL_PKTTAG_SZ
);

514 #i‚de‡
WL_UMK


516 
nskb
 = (
sk_buff
 *)
pkt
;Çskb;Çskb =Çskb->
√xt
) {

517 
	`•ö_lock_úqßve
(&
osh
->
pkèŒoc_lock
, 
Êags
);

518 
osh
->
pub
.
pkèŒo˚d
--;

519 
	`•ö_u∆ock_úqª°‹e
(&
osh
->
pkèŒoc_lock
, 
Êags
);

522  (
sk_buff
 *)
pkt
;

523 
	}
}

529 * 
BCMFASTPATH


530 
	$o¶_pkt_‰m«tive
(
o¶_t
 *
osh
, *
pkt
)

532 #i‚de‡
WL_UMK


533 
sk_buff
 *
nskb
;

534 
Êags
;

537 i‡(
osh
->
pub
.
pkâag
)

538 
	`bzîo
((*)((
sk_buff
 *)
pkt
)->
cb
, 
OSL_PKTTAG_SZ
);

540 #i‚de‡
WL_UMK


542 
nskb
 = (
sk_buff
 *)
pkt
;Çskb;Çskb =Çskb->
√xt
) {

543 
	`•ö_lock_úqßve
(&
osh
->
pkèŒoc_lock
, 
Êags
);

544 
osh
->
pub
.
pkèŒo˚d
++;

545 
	`•ö_u∆ock_úqª°‹e
(&
osh
->
pkèŒoc_lock
, 
Êags
);

548  (*)
pkt
;

549 
	}
}

552 * 
BCMFASTPATH


553 
	$o¶_pktgë
(
o¶_t
 *
osh
, 
uöt
 
Àn
)

555 
sk_buff
 *
skb
;

556 
Êags
;

558 #ifde‡
CTFPOOL


560 
skb
 = 
	`o¶_pktÁ°gë
(
osh
, 
Àn
);

561 i‡((
skb
 !
NULL
Ë|| ((skb = 
	`o¶_Æloc_skb
(
Àn
)) != NULL)) {

563 i‡((
skb
 = 
	`o¶_Æloc_skb
(
Àn
))) {

565 
	`skb_put
(
skb
, 
Àn
);

566 
skb
->
¥i‹ôy
 = 0;

569 
	`•ö_lock_úqßve
(&
osh
->
pkèŒoc_lock
, 
Êags
);

570 
osh
->
pub
.
pkèŒo˚d
++;

571 
	`•ö_u∆ock_úqª°‹e
(&
osh
->
pkèŒoc_lock
, 
Êags
);

574  ((*Ë
skb
);

575 
	}
}

577 #ifde‡
CTFPOOL


578 
ölöe
 

579 
	$o¶_pktÁ°‰ì
(
o¶_t
 *
osh
, 
sk_buff
 *
skb
)

581 
˘Âoﬁ_t
 *
˘Âoﬁ
;

582 #ifde‡
CTFPOOL_SPINLOCK


583 
Êags
;

586 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 14)

587 
skb
->
t°amp
.
tv
.
£c
 = 0;

589 
skb
->
°amp
.
tv_£c
 = 0;

593 
skb
->
dev
 = 
NULL
;

594 
skb
->
d°
 = 
NULL
;

595 
	`mem£t
(
skb
->
cb
, 0, (skb->cb));

596 
skb
->
ù_summed
 = 0;

597 
skb
->
de°ru˘‹
 = 
NULL
;

599 
˘Âoﬁ
 = (
˘Âoﬁ_t
 *)
	`CTFPOOLPTR
(
osh
, 
skb
);

600 
	`ASSERT
(
˘Âoﬁ
 !
NULL
);

603 
	`CTFPOOL_LOCK
(
˘Âoﬁ
, 
Êags
);

604 
skb
->
√xt
 = (
sk_buff
 *)
˘Âoﬁ
->
hód
;

605 
˘Âoﬁ
->
hód
 = (*)
skb
;

607 
˘Âoﬁ
->
Á°_‰ìs
++;

608 
˘Âoﬁ
->
cuº_obj
++;

610 
	`ASSERT
(
˘Âoﬁ
->
cuº_obj
 <˘Âoﬁ->
max_obj
);

611 
	`CTFPOOL_UNLOCK
(
˘Âoﬁ
, 
Êags
);

612 
	}
}

616 
BCMFASTPATH


617 
	$o¶_pkt‰ì
(
o¶_t
 *
osh
, *
p
, 
boﬁ
 
£nd
)

619 
sk_buff
 *
skb
, *
nskb
;

620 
Êags
;

622 
skb
 = (
sk_buff
*Ë
p
;

624 i‡(
£nd
 && 
osh
->
pub
.
tx_‚
)

625 
osh
->
pub
.
	`tx_‚
(osh->pub.
tx_˘x
, 
p
, 0);

627 
	`PKTDBG_TRACE
(
osh
, (*Ë
skb
, 
PKTLIST_PKTFREE
);

630 
skb
) {

631 
nskb
 = 
skb
->
√xt
;

632 
skb
->
√xt
 = 
NULL
;

636 #ifde‡
CTFPOOL


637 i‡((
	`PKTISFAST
(
osh
, 
skb
)Ë&& (
	`©omic_ªad
(&skb->
u£rs
) == 1))

638 
	`o¶_pktÁ°‰ì
(
osh
, 
skb
);

644 i‡(
skb
->
de°ru˘‹
)

648 
	`dev_k‰ì_skb_™y
(
skb
);

653 
	`dev_k‰ì_skb
(
skb
);

655 
	`•ö_lock_úqßve
(&
osh
->
pkèŒoc_lock
, 
Êags
);

656 
osh
->
pub
.
pkèŒo˚d
--;

657 
	`•ö_u∆ock_úqª°‹e
(&
osh
->
pkèŒoc_lock
, 
Êags
);

658 
skb
 = 
nskb
;

660 
	}
}

662 #ifde‡
CONFIG_DHD_USE_STATIC_BUF


664 
	$o¶_pktgë_°©ic
(
o¶_t
 *
osh
, 
uöt
 
Àn
)

666 
i
 = 0;

667 
sk_buff
 *
skb
;

670 i‡(
Àn
 > 
DHD_SKB_MAX_BUFSIZE
) {

671 
	`¥ötk
("osl_pktget_static: Do weÑeallyÇeedÅhis big skb??"

672 "Üí=%d\n", 
Àn
);

673  
	`o¶_pktgë
(
osh
, 
Àn
);

676 
	`down
(&
bcm_°©ic_skb
->
o¶_pkt_£m
);

678 i‡(
Àn
 <
DHD_SKB_1PAGE_BUFSIZE
) {

679 
i
 = 0; i < 
STATIC_PKT_MAX_NUM
; i++) {

680 i‡(
bcm_°©ic_skb
->
pkt_u£
[
i
] == 0)

684 i‡(
i
 !
STATIC_PKT_MAX_NUM
) {

685 
bcm_°©ic_skb
->
pkt_u£
[
i
] = 1;

687 
skb
 = 
bcm_°©ic_skb
->
skb_4k
[
i
];

688 
skb
->
èû
 = skb->
d©a
 + 
Àn
;

689 
skb
->
Àn
 =Üen;

691 
	`up
(&
bcm_°©ic_skb
->
o¶_pkt_£m
);

692  
skb
;

696 i‡(
Àn
 <
DHD_SKB_2PAGE_BUFSIZE
) {

698 
i
 = 0; i < 
STATIC_PKT_MAX_NUM
; i++) {

699 i‡(
bcm_°©ic_skb
->
pkt_u£
[
i
 + 
STATIC_PKT_MAX_NUM
]

704 i‡(
i
 !
STATIC_PKT_MAX_NUM
) {

705 
bcm_°©ic_skb
->
pkt_u£
[
i
 + 
STATIC_PKT_MAX_NUM
] = 1;

706 
skb
 = 
bcm_°©ic_skb
->
skb_8k
[
i
];

707 
skb
->
èû
 = skb->
d©a
 + 
Àn
;

708 
skb
->
Àn
 =Üen;

710 
	`up
(&
bcm_°©ic_skb
->
o¶_pkt_£m
);

711  
skb
;

715 #i‡
	`deföed
(
ENHANCED_STATIC_BUF
)

716 i‡(
bcm_°©ic_skb
->
pkt_u£
[
STATIC_PKT_MAX_NUM
 * 2] == 0) {

717 
bcm_°©ic_skb
->
pkt_u£
[
STATIC_PKT_MAX_NUM
 * 2] = 1;

719 
skb
 = 
bcm_°©ic_skb
->
skb_16k
;

720 
skb
->
èû
 = skb->
d©a
 + 
Àn
;

721 
skb
->
Àn
 =Üen;

723 
	`up
(&
bcm_°©ic_skb
->
o¶_pkt_£m
);

724  
skb
;

728 
	`up
(&
bcm_°©ic_skb
->
o¶_pkt_£m
);

729 
	`¥ötk
("osl_pktget_static:áll staticÖkt in use!\n");

730  
	`o¶_pktgë
(
osh
, 
Àn
);

731 
	}
}

734 
	$o¶_pkt‰ì_°©ic
(
o¶_t
 *
osh
, *
p
, 
boﬁ
 
£nd
)

736 
i
;

737 i‡(!
bcm_°©ic_skb
) {

738 
	`o¶_pkt‰ì
(
osh
, 
p
, 
£nd
);

742 
	`down
(&
bcm_°©ic_skb
->
o¶_pkt_£m
);

743 
i
 = 0; i < 
STATIC_PKT_MAX_NUM
; i++) {

744 i‡(
p
 =
bcm_°©ic_skb
->
skb_4k
[
i
]) {

745 
bcm_°©ic_skb
->
pkt_u£
[
i
] = 0;

746 
	`up
(&
bcm_°©ic_skb
->
o¶_pkt_£m
);

751 
i
 = 0; i < 
STATIC_PKT_MAX_NUM
; i++) {

752 i‡(
p
 =
bcm_°©ic_skb
->
skb_8k
[
i
]) {

753 
bcm_°©ic_skb
->
pkt_u£
[
i
 + 
STATIC_PKT_MAX_NUM
] = 0;

754 
	`up
(&
bcm_°©ic_skb
->
o¶_pkt_£m
);

758 #ifde‡
ENHANCED_STATIC_BUF


759 i‡(
p
 =
bcm_°©ic_skb
->
skb_16k
) {

760 
bcm_°©ic_skb
->
pkt_u£
[
STATIC_PKT_MAX_NUM
*2] = 0;

761 
	`up
(&
bcm_°©ic_skb
->
o¶_pkt_£m
);

765 
	`up
(&
bcm_°©ic_skb
->
o¶_pkt_£m
);

767 
	`o¶_pkt‰ì
(
osh
, 
p
, 
£nd
);

769 
	}
}

772 
uöt32


773 
	$o¶_pci_ªad_c⁄fig
(
o¶_t
 *
osh
, 
uöt
 
off£t
, uöà
size
)

775 
uöt
 
vÆ
 = 0;

776 
uöt
 
ªåy
 = 
PCI_CFG_RETRY
;

778 
	`ASSERT
((
osh
 && (osh->
magic
 =
OS_HANDLE_MAGIC
)));

781 
	`ASSERT
(
size
 == 4);

784 
	`pci_ªad_c⁄fig_dw‹d
(
osh
->
pdev
, 
off£t
, &
vÆ
);

785 i‡(
vÆ
 != 0xffffffff)

787 } 
ªåy
--);

790  (
vÆ
);

791 
	}
}

794 
	$o¶_pci_wrôe_c⁄fig
(
o¶_t
 *
osh
, 
uöt
 
off£t
, uöà
size
, uöà
vÆ
)

796 
uöt
 
ªåy
 = 
PCI_CFG_RETRY
;

798 
	`ASSERT
((
osh
 && (osh->
magic
 =
OS_HANDLE_MAGIC
)));

801 
	`ASSERT
(
size
 == 4);

804 
	`pci_wrôe_c⁄fig_dw‹d
(
osh
->
pdev
, 
off£t
, 
vÆ
);

805 i‡(
off£t
 !
PCI_BAR0_WIN
)

807 i‡(
	`o¶_pci_ªad_c⁄fig
(
osh
, 
off£t
, 
size
Ë=
vÆ
)

809 } 
ªåy
--);

811 
	}
}

814 
uöt


815 
	$o¶_pci_bus
(
o¶_t
 *
osh
)

817 
	`ASSERT
(
osh
 && (osh->
magic
 =
OS_HANDLE_MAGIC
Ë&& osh->
pdev
);

819  ((
pci_dev
 *)
osh
->
pdev
)->
bus
->
numbî
;

820 
	}
}

823 
uöt


824 
	$o¶_pci_¶Ÿ
(
o¶_t
 *
osh
)

826 
	`ASSERT
(
osh
 && (osh->
magic
 =
OS_HANDLE_MAGIC
Ë&& osh->
pdev
);

828  
	`PCI_SLOT
(((
pci_dev
 *)
osh
->
pdev
)->
dev‚
);

829 
	}
}

832 
pci_dev
 *

833 
	$o¶_pci_devi˚
(
o¶_t
 *
osh
)

835 
	`ASSERT
(
osh
 && (osh->
magic
 =
OS_HANDLE_MAGIC
Ë&& osh->
pdev
);

837  
osh
->
pdev
;

838 
	}
}

841 
	$o¶_pcmcü_©å
(
o¶_t
 *
osh
, 
uöt
 
off£t
, *
buf
, 
size
, 
boﬁ
 
wrôe
)

843 
	}
}

846 
	$o¶_pcmcü_ªad_©å
(
o¶_t
 *
osh
, 
uöt
 
off£t
, *
buf
, 
size
)

848 
	`o¶_pcmcü_©å
(
osh
, 
off£t
, (*Ë
buf
, 
size
, 
FALSE
);

849 
	}
}

852 
	$o¶_pcmcü_wrôe_©å
(
o¶_t
 *
osh
, 
uöt
 
off£t
, *
buf
, 
size
)

854 
	`o¶_pcmcü_©å
(
osh
, 
off£t
, (*Ë
buf
, 
size
, 
TRUE
);

855 
	}
}

858 
	$o¶_mÆloc
(
o¶_t
 *
osh
, 
uöt
 
size
)

860 *
addr
;

863 i‡(
osh
)

864 
	`ASSERT
(
osh
->
magic
 =
OS_HANDLE_MAGIC
);

866 #ifde‡
CONFIG_DHD_USE_STATIC_BUF


867 i‡(
bcm_°©ic_buf
)

869 
i
 = 0;

870 i‡((
size
 >
PAGE_SIZE
)&&(sizê<
STATIC_BUF_SIZE
))

872 
	`down
(&
bcm_°©ic_buf
->
°©ic_£m
);

874 
i
 = 0; i < 
STATIC_BUF_MAX_NUM
; i++)

876 i‡(
bcm_°©ic_buf
->
buf_u£
[
i
] == 0)

880 i‡(
i
 =
STATIC_BUF_MAX_NUM
)

882 
	`up
(&
bcm_°©ic_buf
->
°©ic_£m
);

883 
	`¥ötk
("all static buff in use!\n");

884 
‹igöÆ
;

887 
bcm_°©ic_buf
->
buf_u£
[
i
] = 1;

888 
	`up
(&
bcm_°©ic_buf
->
°©ic_£m
);

890 
	`bzîo
(
bcm_°©ic_buf
->
buf_±r
+
STATIC_BUF_SIZE
*
i
, 
size
);

891 i‡(
osh
)

892 
	`©omic_add
(
size
, &
osh
->
mÆlo˚d
);

894  ((*)(
bcm_°©ic_buf
->
buf_±r
+
STATIC_BUF_SIZE
*
i
));

897 
‹igöÆ
:

900 i‡((
addr
 = 
	`kmÆloc
(
size
, 
GFP_ATOMIC
)Ë=
NULL
) {

901 i‡(
osh
)

902 
osh
->
Áûed
++;

903  (
NULL
);

905 i‡(
osh
)

906 
	`©omic_add
(
size
, &
osh
->
mÆlo˚d
);

908  (
addr
);

909 
	}
}

912 
	$o¶_m‰ì
(
o¶_t
 *
osh
, *
addr
, 
uöt
 
size
)

914 #ifde‡
CONFIG_DHD_USE_STATIC_BUF


915 i‡(
bcm_°©ic_buf
)

917 i‡((
addr
 > (*)
bcm_°©ic_buf
) && ((*)addr

918 <((*)
bcm_°©ic_buf
 + 
STATIC_BUF_TOTAL_LEN
)))

920 
buf_idx
 = 0;

922 
buf_idx
 = ((*)
addr
 - 
bcm_°©ic_buf
->
buf_±r
)/
STATIC_BUF_SIZE
;

924 
	`down
(&
bcm_°©ic_buf
->
°©ic_£m
);

925 
bcm_°©ic_buf
->
buf_u£
[
buf_idx
] = 0;

926 
	`up
(&
bcm_°©ic_buf
->
°©ic_£m
);

928 i‡(
osh
) {

929 
	`ASSERT
(
osh
->
magic
 =
OS_HANDLE_MAGIC
);

930 
	`©omic_sub
(
size
, &
osh
->
mÆlo˚d
);

936 i‡(
osh
) {

937 
	`ASSERT
(
osh
->
magic
 =
OS_HANDLE_MAGIC
);

938 
	`©omic_sub
(
size
, &
osh
->
mÆlo˚d
);

940 
	`k‰ì
(
addr
);

941 
	}
}

943 
uöt


944 
	$o¶_mÆlo˚d
(
o¶_t
 *
osh
)

946 
	`ASSERT
((
osh
 && (osh->
magic
 =
OS_HANDLE_MAGIC
)));

947  (
	`©omic_ªad
(&
osh
->
mÆlo˚d
));

948 
	}
}

950 
uöt


951 
	$o¶_mÆloc_Áûed
(
o¶_t
 *
osh
)

953 
	`ASSERT
((
osh
 && (osh->
magic
 =
OS_HANDLE_MAGIC
)));

954  (
osh
->
Áûed
);

955 
	}
}

958 
uöt


959 
	$o¶_dma_c⁄si°ít_Æign
()

961  (
PAGE_SIZE
);

962 
	}
}

965 
	$o¶_dma_Æloc_c⁄si°ít
(
o¶_t
 *
osh
, 
uöt
 
size
, 
uöt16
 
Æign_bôs
, uöà*
Ælo˚d
, 
ul⁄g
 *
∑p
)

967 
uöt16
 
Æign
 = (1 << 
Æign_bôs
);

968 
	`ASSERT
((
osh
 && (osh->
magic
 =
OS_HANDLE_MAGIC
)));

970 i‡(!
	`ISALIGNED
(
DMA_CONSISTENT_ALIGN
, 
Æign
))

971 
size
 +
Æign
;

972 *
Ælo˚d
 = 
size
;

974  (
	`pci_Æloc_c⁄si°ít
(
osh
->
pdev
, 
size
, (
dma_addr_t
*)
∑p
));

975 
	}
}

978 
	$o¶_dma_‰ì_c⁄si°ít
(
o¶_t
 *
osh
, *
va
, 
uöt
 
size
, 
ul⁄g
 
∑
)

980 
	`ASSERT
((
osh
 && (osh->
magic
 =
OS_HANDLE_MAGIC
)));

982 
	`pci_‰ì_c⁄si°ít
(
osh
->
pdev
, 
size
, 
va
, (
dma_addr_t
)
∑
);

983 
	}
}

985 
uöt
 
BCMFASTPATH


986 
	$o¶_dma_m≠
(
o¶_t
 *
osh
, *
va
, 
uöt
 
size
, 
dúe˘i⁄
)

988 
dú
;

990 
	`ASSERT
((
osh
 && (osh->
magic
 =
OS_HANDLE_MAGIC
)));

991 
dú
 = (
dúe˘i⁄
 =
DMA_TX
)? 
PCI_DMA_TODEVICE
: 
PCI_DMA_FROMDEVICE
;

992  (
	`pci_m≠_sögÀ
(
osh
->
pdev
, 
va
, 
size
, 
dú
));

993 
	}
}

995 
BCMFASTPATH


996 
	$o¶_dma_unm≠
(
o¶_t
 *
osh
, 
uöt
 
∑
, uöà
size
, 
dúe˘i⁄
)

998 
dú
;

1000 
	`ASSERT
((
osh
 && (osh->
magic
 =
OS_HANDLE_MAGIC
)));

1001 
dú
 = (
dúe˘i⁄
 =
DMA_TX
)? 
PCI_DMA_TODEVICE
: 
PCI_DMA_FROMDEVICE
;

1002 
	`pci_unm≠_sögÀ
(
osh
->
pdev
, (
uöt32
)
∑
, 
size
, 
dú
);

1003 
	}
}

1005 #i‡
deföed
(
BCMASSERT_LOG
)

1007 
	$o¶_as£π
(c⁄° *
exp
, c⁄° *
fûe
, 
löe
)

1009 
ãmpbuf
[256];

1010 c⁄° *
ba£«me
;

1012 
ba£«me
 = 
	`°ºchr
(
fûe
, '/');

1014 i‡(
ba£«me
)

1015 
ba£«me
++;

1017 i‡(!
ba£«me
)

1018 
ba£«me
 = 
fûe
;

1020 
	`¢¥ötf
(
ãmpbuf
, 64, "\"%s\": file \"%s\",Üine %d\n",

1021 
exp
, 
ba£«me
, 
löe
);

1023 
	`¥ötk
("%s", 
ãmpbuf
);

1026 
	}
}

1030 
	$o¶_dñay
(
uöt
 
u£c
)

1032 
uöt
 
d
;

1034 
u£c
 > 0) {

1035 
d
 = 
	`MIN
(
u£c
, 1000);

1036 
	`udñay
(
d
);

1037 
u£c
 -
d
;

1039 
	}
}

1046 
	$o¶_pktdup
(
o¶_t
 *
osh
, *
skb
)

1048 * 
p
;

1049 
úqÊags
;

1054 
	`PKTCTFMAP
(
osh
, 
skb
);

1056 i‡((
p
 = 
	`skb_˛⁄e
((
sk_buff
 *)
skb
, 
GFP_ATOMIC
)Ë=
NULL
)

1057  
NULL
;

1059 #ifde‡
CTFPOOL


1060 i‡(
	`PKTISFAST
(
osh
, 
skb
)) {

1061 
˘Âoﬁ_t
 *
˘Âoﬁ
;

1069 
˘Âoﬁ
 = (
˘Âoﬁ_t
 *)
	`CTFPOOLPTR
(
osh
, 
skb
);

1070 
	`ASSERT
(
˘Âoﬁ
 !
NULL
);

1071 
	`PKTCLRFAST
(
osh
, 
p
);

1072 
	`PKTCLRFAST
(
osh
, 
skb
);

1073 
˘Âoﬁ
->
ªfûls
++;

1078 i‡(
osh
->
pub
.
pkâag
)

1079 
	`bzîo
((*)((
sk_buff
 *)
p
)->
cb
, 
OSL_PKTTAG_SZ
);

1082 
	`•ö_lock_úqßve
(&
osh
->
pkèŒoc_lock
, 
úqÊags
);

1083 
osh
->
pub
.
pkèŒo˚d
++;

1084 
	`•ö_u∆ock_úqª°‹e
(&
osh
->
pkèŒoc_lock
, 
úqÊags
);

1085  (
p
);

1086 
	}
}

1099 
	$o¶_os_›í_image
(*
fûíame
)

1101 
fûe
 *
Â
;

1103 
Â
 = 
	`fûp_›í
(
fûíame
, 
O_RDONLY
, 0);

1110 i‡(
	`IS_ERR
(
Â
))

1111 
Â
 = 
NULL
;

1113  
Â
;

1114 
	}
}

1117 
	$o¶_os_gë_image_block
(*
buf
, 
Àn
, *
image
)

1119 
fûe
 *
Â
 = (fûê*)
image
;

1120 
rdÀn
;

1122 i‡(!
image
)

1125 
rdÀn
 = 
	`kî√l_ªad
(
Â
, fp->
f_pos
, 
buf
, 
Àn
);

1126 i‡(
rdÀn
 > 0)

1127 
Â
->
f_pos
 +
rdÀn
;

1129  
rdÀn
;

1130 
	}
}

1133 
	$o¶_os_˛o£_image
(*
image
)

1135 i‡(
image
)

1136 
	`fûp_˛o£
((
fûe
 *)
image
, 
NULL
);

1137 
	}
}

	@sbutils.c

28 
	~<bcm_cfg.h
>

29 
	~<ty≥defs.h
>

30 
	~<bcmdefs.h
>

31 
	~<o¶.h
>

32 
	~<bcmutûs.h
>

33 
	~<siutûs.h
>

34 
	~<bcmdevs.h
>

35 
	~<hndsoc.h
>

36 
	~<sbchùc.h
>

37 
	~<pcicfg.h
>

38 
	~<sbpcmcü.h
>

40 
	~"siutûs_¥iv.h
"

44 
uöt
 
_sb_c‹eidx
(
si_öfo_t
 *
sii
, 
uöt32
 
sba
);

45 
uöt
 
_sb_sˇn
(
si_öfo_t
 *
sii
, 
uöt32
 
sba
, *
ªgs
, uöà
bus
, uöt32 
sbba
,

46 
uöt
 
nc‹es
);

47 
uöt32
 
_sb_c‹esba
(
si_öfo_t
 *
sii
);

48 *
_sb_£tc‹eidx
(
si_öfo_t
 *
sii
, 
uöt
 
c‹eidx
);

50 
	#SET_SBREG
(
sii
, 
r
, 
mask
, 
vÆ
) \

51 
	`W_SBREG
((
sii
), (
r
), ((
	`R_SBREG
((sii), (r)Ë& ~(
mask
)Ë| (
vÆ
)))

	)

52 
	#REGS2SB
(
va
Ë(
sbc⁄fig_t
*Ë((
öt8
*)(vaË+ 
SBCONFIGOFF
)

	)

55 
	#SONICS_2_2
 (
SBIDL_RV_2_2
 >> 
SBIDL_RV_SHIFT
)

	)

56 
	#SONICS_2_3
 (
SBIDL_RV_2_3
 >> 
SBIDL_RV_SHIFT
)

	)

58 
	#R_SBREG
(
sii
, 
sbr
Ë
	`sb_ªad_sbªg
((sii), (sbr))

	)

59 
	#W_SBREG
(
sii
, 
sbr
, 
v
Ë
	`sb_wrôe_sbªg
((sii), (sbr), (v))

	)

60 
	#AND_SBREG
(
sii
, 
sbr
, 
v
Ë
	`W_SBREG
((sii), (sbr), (
	`R_SBREG
((sii), (sbr)Ë& (v)))

	)

61 
	#OR_SBREG
(
sii
, 
sbr
, 
v
Ë
	`W_SBREG
((sii), (sbr), (
	`R_SBREG
((sii), (sbr)Ë| (v)))

	)

63 
uöt32


64 
	$sb_ªad_sbªg
(
si_öfo_t
 *
sii
, vﬁ©ûê
uöt32
 *
sbr
)

66 
uöt8
 
tmp
;

67 
uöt32
 
vÆ
, 
öå_vÆ
 = 0;

76 i‡(
	`PCMCIA
(
sii
)) {

77 
	`INTR_OFF
(
sii
, 
öå_vÆ
);

78 
tmp
 = 1;

79 
	`OSL_PCMCIA_WRITE_ATTR
(
sii
->
osh
, 
MEM_SEG
, &
tmp
, 1);

80 
sbr
 = (vﬁ©ûê
uöt32
 *)((
uöçå
)sbr & ~(1 << 11));

83 
vÆ
 = 
	`R_REG
(
sii
->
osh
, 
sbr
);

85 i‡(
	`PCMCIA
(
sii
)) {

86 
tmp
 = 0;

87 
	`OSL_PCMCIA_WRITE_ATTR
(
sii
->
osh
, 
MEM_SEG
, &
tmp
, 1);

88 
	`INTR_RESTORE
(
sii
, 
öå_vÆ
);

91  (
vÆ
);

92 
	}
}

95 
	$sb_wrôe_sbªg
(
si_öfo_t
 *
sii
, vﬁ©ûê
uöt32
 *
sbr
, uöt32 
v
)

97 
uöt8
 
tmp
;

98 vﬁ©ûê
uöt32
 
dummy
;

99 
uöt32
 
öå_vÆ
 = 0;

108 i‡(
	`PCMCIA
(
sii
)) {

109 
	`INTR_OFF
(
sii
, 
öå_vÆ
);

110 
tmp
 = 1;

111 
	`OSL_PCMCIA_WRITE_ATTR
(
sii
->
osh
, 
MEM_SEG
, &
tmp
, 1);

112 
sbr
 = (vﬁ©ûê
uöt32
 *)((
uöçå
)sbr & ~(1 << 11));

115 i‡(
	`BUSTYPE
(
sii
->
pub
.
bu°y≥
Ë=
PCMCIA_BUS
) {

116 
dummy
 = 
	`R_REG
(
sii
->
osh
, 
sbr
);

117 
	`BCM_REFERENCE
(
dummy
);

118 
	`W_REG
(
sii
->
osh
, (vﬁ©ûê
uöt16
 *)
sbr
, (uöt16)(
v
 & 0xffff));

119 
dummy
 = 
	`R_REG
(
sii
->
osh
, 
sbr
);

120 
	`BCM_REFERENCE
(
dummy
);

121 
	`W_REG
(
sii
->
osh
, ((vﬁ©ûê
uöt16
 *)
sbr
 + 1), (uöt16)((
v
 >> 16) & 0xffff));

123 
	`W_REG
(
sii
->
osh
, 
sbr
, 
v
);

125 i‡(
	`PCMCIA
(
sii
)) {

126 
tmp
 = 0;

127 
	`OSL_PCMCIA_WRITE_ATTR
(
sii
->
osh
, 
MEM_SEG
, &
tmp
, 1);

128 
	`INTR_RESTORE
(
sii
, 
öå_vÆ
);

130 
	}
}

132 
uöt


133 
	$sb_c‹eid
(
si_t
 *
sih
)

135 
si_öfo_t
 *
sii
;

136 
sbc⁄fig_t
 *
sb
;

138 
sii
 = 
	`SI_INFO
(
sih
);

139 
sb
 = 
	`REGS2SB
(
sii
->
curm≠
);

141  ((
	`R_SBREG
(
sii
, &
sb
->
sbidhigh
Ë& 
SBIDH_CC_MASK
Ë>> 
SBIDH_CC_SHIFT
);

142 
	}
}

144 
uöt


145 
	$sb_ötÊag
(
si_t
 *
sih
)

147 
si_öfo_t
 *
sii
;

148 *
c‹îeg
;

149 
sbc⁄fig_t
 *
sb
;

150 
uöt
 
‹igidx
, 
ötÊag
, 
öå_vÆ
 = 0;

152 
sii
 = 
	`SI_INFO
(
sih
);

154 
	`INTR_OFF
(
sii
, 
öå_vÆ
);

155 
‹igidx
 = 
	`si_c‹eidx
(
sih
);

156 
c‹îeg
 = 
	`si_£tc‹e
(
sih
, 
CC_CORE_ID
, 0);

157 
	`ASSERT
(
c‹îeg
 !
NULL
);

158 
sb
 = 
	`REGS2SB
(
c‹îeg
);

159 
ötÊag
 = 
	`R_SBREG
(
sii
, &
sb
->
sbÊag°
);

160 
	`sb_£tc‹eidx
(
sih
, 
‹igidx
);

161 
	`INTR_RESTORE
(
sii
, 
öå_vÆ
);

163  
ötÊag
;

164 
	}
}

166 
uöt


167 
	$sb_Êag
(
si_t
 *
sih
)

169 
si_öfo_t
 *
sii
;

170 
sbc⁄fig_t
 *
sb
;

172 
sii
 = 
	`SI_INFO
(
sih
);

173 
sb
 = 
	`REGS2SB
(
sii
->
curm≠
);

175  
	`R_SBREG
(
sii
, &
sb
->
sbçsÊag
Ë& 
SBTPS_NUM0_MASK
;

176 
	}
}

179 
	$sb_£töt
(
si_t
 *
sih
, 
siÊag
)

181 
si_öfo_t
 *
sii
;

182 
sbc⁄fig_t
 *
sb
;

183 
uöt32
 
vec
;

185 
sii
 = 
	`SI_INFO
(
sih
);

186 
sb
 = 
	`REGS2SB
(
sii
->
curm≠
);

188 i‡(
siÊag
 == -1)

189 
vec
 = 0;

191 
vec
 = 1 << 
siÊag
;

192 
	`W_SBREG
(
sii
, &
sb
->
sbötvec
, 
vec
);

193 
	}
}

196 
uöt


197 
	$_sb_c‹eidx
(
si_öfo_t
 *
sii
, 
uöt32
 
sba
)

199 
uöt
 
i
;

201 
i
 = 0; i < 
sii
->
numc‹es
; i ++)

202 i‡(
sba
 =
sii
->
c‹esba
[
i
])

203  
i
;

204  
BADIDX
;

205 
	}
}

208 
uöt32


209 
	$_sb_c‹esba
(
si_öfo_t
 *
sii
)

211 
uöt32
 
sbaddr
;

214 
	`BUSTYPE
(
sii
->
pub
.
bu°y≥
)) {

215 
SI_BUS
: {

216 
sbc⁄fig_t
 *
sb
 = 
	`REGS2SB
(
sii
->
curm≠
);

217 
sbaddr
 = 
	`sb_ba£
(
	`R_SBREG
(
sii
, &
sb
->
sbadm©ch0
));

221 
PCI_BUS
:

222 
sbaddr
 = 
	`OSL_PCI_READ_CONFIG
(
sii
->
osh
, 
PCI_BAR0_WIN
, (
uöt32
));

225 
PCMCIA_BUS
: {

226 
uöt8
 
tmp
 = 0;

227 
	`OSL_PCMCIA_READ_ATTR
(
sii
->
osh
, 
PCMCIA_ADDR0
, &
tmp
, 1);

228 
sbaddr
 = (
uöt32
)
tmp
 << 12;

229 
	`OSL_PCMCIA_READ_ATTR
(
sii
->
osh
, 
PCMCIA_ADDR1
, &
tmp
, 1);

230 
sbaddr
 |(
uöt32
)
tmp
 << 16;

231 
	`OSL_PCMCIA_READ_ATTR
(
sii
->
osh
, 
PCMCIA_ADDR2
, &
tmp
, 1);

232 
sbaddr
 |(
uöt32
)
tmp
 << 24;

236 
SPI_BUS
:

237 
SDIO_BUS
:

238 
sbaddr
 = (
uöt32
)(
uöçå
)
sii
->
curm≠
;

243 
sbaddr
 = 
BADCOREADDR
;

247  
sbaddr
;

248 
	}
}

250 
uöt


251 
	$sb_c‹evíd‹
(
si_t
 *
sih
)

253 
si_öfo_t
 *
sii
;

254 
sbc⁄fig_t
 *
sb
;

256 
sii
 = 
	`SI_INFO
(
sih
);

257 
sb
 = 
	`REGS2SB
(
sii
->
curm≠
);

259  ((
	`R_SBREG
(
sii
, &
sb
->
sbidhigh
Ë& 
SBIDH_VC_MASK
Ë>> 
SBIDH_VC_SHIFT
);

260 
	}
}

262 
uöt


263 
	$sb_c‹îev
(
si_t
 *
sih
)

265 
si_öfo_t
 *
sii
;

266 
sbc⁄fig_t
 *
sb
;

267 
uöt
 
sbidh
;

269 
sii
 = 
	`SI_INFO
(
sih
);

270 
sb
 = 
	`REGS2SB
(
sii
->
curm≠
);

271 
sbidh
 = 
	`R_SBREG
(
sii
, &
sb
->
sbidhigh
);

273  (
	`SBCOREREV
(
sbidh
));

274 
	}
}

278 
	$sb_c‹e_cÊags_wo
(
si_t
 *
sih
, 
uöt32
 
mask
, uöt32 
vÆ
)

280 
si_öfo_t
 *
sii
;

281 
sbc⁄fig_t
 *
sb
;

282 
uöt32
 
w
;

284 
sii
 = 
	`SI_INFO
(
sih
);

285 
sb
 = 
	`REGS2SB
(
sii
->
curm≠
);

287 
	`ASSERT
((
vÆ
 & ~
mask
) == 0);

290 
w
 = (
	`R_SBREG
(
sii
, &
sb
->
sbtm°©ñow
Ë& ~(
mask
 << 
SBTML_SICF_SHIFT
)) |

291 (
vÆ
 << 
SBTML_SICF_SHIFT
);

292 
	`W_SBREG
(
sii
, &
sb
->
sbtm°©ñow
, 
w
);

293 
	}
}

296 
uöt32


297 
	$sb_c‹e_cÊags
(
si_t
 *
sih
, 
uöt32
 
mask
, uöt32 
vÆ
)

299 
si_öfo_t
 *
sii
;

300 
sbc⁄fig_t
 *
sb
;

301 
uöt32
 
w
;

303 
sii
 = 
	`SI_INFO
(
sih
);

304 
sb
 = 
	`REGS2SB
(
sii
->
curm≠
);

306 
	`ASSERT
((
vÆ
 & ~
mask
) == 0);

309 i‡(
mask
 || 
vÆ
) {

310 
w
 = (
	`R_SBREG
(
sii
, &
sb
->
sbtm°©ñow
Ë& ~(
mask
 << 
SBTML_SICF_SHIFT
)) |

311 (
vÆ
 << 
SBTML_SICF_SHIFT
);

312 
	`W_SBREG
(
sii
, &
sb
->
sbtm°©ñow
, 
w
);

318  (
	`R_SBREG
(
sii
, &
sb
->
sbtm°©ñow
Ë>> 
SBTML_SICF_SHIFT
);

319 
	}
}

322 
uöt32


323 
	$sb_c‹e_sÊags
(
si_t
 *
sih
, 
uöt32
 
mask
, uöt32 
vÆ
)

325 
si_öfo_t
 *
sii
;

326 
sbc⁄fig_t
 *
sb
;

327 
uöt32
 
w
;

329 
sii
 = 
	`SI_INFO
(
sih
);

330 
sb
 = 
	`REGS2SB
(
sii
->
curm≠
);

332 
	`ASSERT
((
vÆ
 & ~
mask
) == 0);

333 
	`ASSERT
((
mask
 & ~
SISF_CORE_BITS
) == 0);

336 i‡(
mask
 || 
vÆ
) {

337 
w
 = (
	`R_SBREG
(
sii
, &
sb
->
sbtm°©ehigh
Ë& ~(
mask
 << 
SBTMH_SISF_SHIFT
)) |

338 (
vÆ
 << 
SBTMH_SISF_SHIFT
);

339 
	`W_SBREG
(
sii
, &
sb
->
sbtm°©ehigh
, 
w
);

343  (
	`R_SBREG
(
sii
, &
sb
->
sbtm°©ehigh
Ë>> 
SBTMH_SISF_SHIFT
);

344 
	}
}

346 
boﬁ


347 
	$sb_isc‹eup
(
si_t
 *
sih
)

349 
si_öfo_t
 *
sii
;

350 
sbc⁄fig_t
 *
sb
;

352 
sii
 = 
	`SI_INFO
(
sih
);

353 
sb
 = 
	`REGS2SB
(
sii
->
curm≠
);

355  ((
	`R_SBREG
(
sii
, &
sb
->
sbtm°©ñow
) &

356 (
SBTML_RESET
 | 
SBTML_REJ_MASK
 | (
SICF_CLOCK_EN
 << 
SBTML_SICF_SHIFT
))) ==

357 (
SICF_CLOCK_EN
 << 
SBTML_SICF_SHIFT
));

358 
	}
}

369 
uöt


370 
	$sb_c‹îeg
(
si_t
 *
sih
, 
uöt
 
c‹eidx
, uöà
ªgoff
, uöà
mask
, uöà
vÆ
)

372 
uöt
 
‹igidx
 = 0;

373 
uöt32
 *
r
 = 
NULL
;

374 
uöt
 
w
;

375 
uöt
 
öå_vÆ
 = 0;

376 
boﬁ
 
Á°
 = 
FALSE
;

377 
si_öfo_t
 *
sii
;

379 
sii
 = 
	`SI_INFO
(
sih
);

381 
	`ASSERT
(
	`GOODIDX
(
c‹eidx
));

382 
	`ASSERT
(
ªgoff
 < 
SI_CORE_SIZE
);

383 
	`ASSERT
((
vÆ
 & ~
mask
) == 0);

385 i‡(
c‹eidx
 >
SI_MAXCORES
)

388 i‡(
	`BUSTYPE
(
sii
->
pub
.
bu°y≥
Ë=
SI_BUS
) {

390 
Á°
 = 
TRUE
;

392 i‡(!
sii
->
ªgs
[
c‹eidx
]) {

393 
sii
->
ªgs
[
c‹eidx
] = 
	`REG_MAP
(sii->
c‹esba
[coreidx],

394 
SI_CORE_SIZE
);

395 
	`ASSERT
(
	`GOODREGS
(
sii
->
ªgs
[
c‹eidx
]));

397 
r
 = (
uöt32
 *)((
uch¨
 *)
sii
->
ªgs
[
c‹eidx
] + 
ªgoff
);

398 } i‡(
	`BUSTYPE
(
sii
->
pub
.
bu°y≥
Ë=
PCI_BUS
) {

401 i‡((
sii
->
c‹eid
[
c‹eidx
] =
CC_CORE_ID
Ë&& 
	`SI_FAST
(sii)) {

404 
Á°
 = 
TRUE
;

405 
r
 = (
uöt32
 *)((*)
sii
->
curm≠
 + 
PCI_16KB0_CCREGS_OFFSET
 + 
ªgoff
);

406 } i‡(
sii
->
pub
.
busc‹eidx
 =
c‹eidx
) {

410 
Á°
 = 
TRUE
;

411 i‡(
	`SI_FAST
(
sii
))

412 
r
 = (
uöt32
 *)((*)
sii
->
curm≠
 +

413 
PCI_16KB0_PCIREGS_OFFSET
 + 
ªgoff
);

415 
r
 = (
uöt32
 *)((*)
sii
->
curm≠
 +

416 ((
ªgoff
 >
SBCONFIGOFF
) ?

417 
PCI_BAR0_PCISBR_OFFSET
 : 
PCI_BAR0_PCIREGS_OFFSET
) +

418 
ªgoff
);

422 i‡(!
Á°
) {

423 
	`INTR_OFF
(
sii
, 
öå_vÆ
);

426 
‹igidx
 = 
	`si_c‹eidx
(&
sii
->
pub
);

429 
r
 = (
uöt32
*Ë((
uch¨
*)
	`sb_£tc‹eidx
(&
sii
->
pub
, 
c‹eidx
Ë+ 
ªgoff
);

431 
	`ASSERT
(
r
 !
NULL
);

434 i‡(
mask
 || 
vÆ
) {

435 i‡(
ªgoff
 >
SBCONFIGOFF
) {

436 
w
 = (
	`R_SBREG
(
sii
, 
r
Ë& ~
mask
Ë| 
vÆ
;

437 
	`W_SBREG
(
sii
, 
r
, 
w
);

439 
w
 = (
	`R_REG
(
sii
->
osh
, 
r
Ë& ~
mask
Ë| 
vÆ
;

440 
	`W_REG
(
sii
->
osh
, 
r
, 
w
);

445 i‡(
ªgoff
 >
SBCONFIGOFF
)

446 
w
 = 
	`R_SBREG
(
sii
, 
r
);

448 i‡((
	`CHIPID
(
sii
->
pub
.
chù
Ë=
BCM5354_CHIP_ID
) &&

449 (
c‹eidx
 =
SI_CC_IDX
) &&

450 (
ªgoff
 =
	`OFFSETOF
(
chù¸egs_t
, 
w©chdog
))) {

451 
w
 = 
vÆ
;

453 
w
 = 
	`R_REG
(
sii
->
osh
, 
r
);

456 i‡(!
Á°
) {

458 i‡(
‹igidx
 !
c‹eidx
)

459 
	`sb_£tc‹eidx
(&
sii
->
pub
, 
‹igidx
);

461 
	`INTR_RESTORE
(
sii
, 
öå_vÆ
);

464  (
w
);

465 
	}
}

474 
	#SB_MAXBUSES
 2

	)

475 
uöt


476 
	$_sb_sˇn
(
si_öfo_t
 *
sii
, 
uöt32
 
sba
, *
ªgs
, 
uöt
 
bus
, uöt32 
sbba
, uöà
numc‹es
)

478 
uöt
 
√xt
;

479 
uöt
 
ncc
 = 0;

480 
uöt
 
i
;

482 i‡(
bus
 >
SB_MAXBUSES
) {

483 
	`SI_ERROR
(("_sb_sˇn: bu†0x%08xáàÀvñ %d i†toÿdì∞tÿsˇn\n", 
sbba
, 
bus
));

486 
	`SI_MSG
(("_sb_sˇn: sˇ¿bu†0x%08xássumê%u c‹es\n", 
sbba
, 
numc‹es
));

491 
i
 = 0, 
√xt
 = 
sii
->
numc‹es
; i <Çumc‹e†&&Çexà< 
SB_BUS_MAXCORES
; i++,Çext++) {

492 
sii
->
c‹esba
[
√xt
] = 
sbba
 + (
i
 * 
SI_CORE_SIZE
);

495 i‡((
	`BUSTYPE
(
sii
->
pub
.
bu°y≥
Ë=
SI_BUS
Ë&& (sii->
c‹esba
[
√xt
] =
sba
)) {

496 
	`SI_VMSG
(("_sb_sˇn:Ñeu£ m≠≥dÑeg†%∞f‹ c‹ê%u\n", 
ªgs
, 
√xt
));

497 
sii
->
ªgs
[
√xt
] =Ñegs;

501 
sii
->
curm≠
 = 
	`_sb_£tc‹eidx
(sii, 
√xt
);

502 
sii
->
curidx
 = 
√xt
;

504 
sii
->
c‹eid
[
√xt
] = 
	`sb_c‹eid
(&sii->
pub
);

508 i‡(
sii
->
c‹eid
[
√xt
] =
CC_CORE_ID
) {

509 
chù¸egs_t
 *
cc
 = (chù¸egs_à*)
sii
->
curm≠
;

510 
uöt32
 
c¸ev
 = 
	`sb_c‹îev
(&
sii
->
pub
);

513 i‡(((
c¸ev
 == 4) || (ccrev >= 6)))

514 
numc‹es
 = (
	`R_REG
(
sii
->
osh
, &
cc
->
chùid
Ë& 
CID_CC_MASK
) >>

515 
CID_CC_SHIFT
;

518 
uöt
 
chù
 = 
	`CHIPID
(
sii
->
pub
.chip);

520 i‡(
chù
 =
BCM4306_CHIP_ID
)

521 
numc‹es
 = 6;

522 i‡(
chù
 =
BCM4704_CHIP_ID
)

523 
numc‹es
 = 9;

524 i‡(
chù
 =
BCM5365_CHIP_ID
)

525 
numc‹es
 = 7;

527 
	`SI_ERROR
(("sb_chip2numcores: unsupported chip 0x%x\n",

528 
chù
));

529 
	`ASSERT
(0);

530 
numc‹es
 = 1;

533 
	`SI_VMSG
(("_sb_sˇn:Åhîê¨ê%u c‹e†öÅhêchù %s\n", 
numc‹es
,

534 
sii
->
pub
.
issim
 ? "QT" : ""));

537 i‡(
sii
->
c‹eid
[
√xt
] =
OCP_CORE_ID
) {

538 
sbc⁄fig_t
 *
sb
 = 
	`REGS2SB
(
sii
->
curm≠
);

539 
uöt32
 
nsbba
 = 
	`R_SBREG
(
sii
, &
sb
->
sbadm©ch1
);

540 
uöt
 
nsbcc
;

542 
sii
->
numc‹es
 = 
√xt
 + 1;

544 i‡((
nsbba
 & 0xfff00000Ë!
SI_ENUM_BASE
)

546 
nsbba
 &= 0xfffff000;

547 i‡(
	`_sb_c‹eidx
(
sii
, 
nsbba
Ë!
BADIDX
)

550 
nsbcc
 = (
	`R_SBREG
(
sii
, &
sb
->
sbtm°©ehigh
) & 0x000f0000) >> 16;

551 
nsbcc
 = 
	`_sb_sˇn
(
sii
, 
sba
, 
ªgs
, 
bus
 + 1, 
nsbba
,Çsbcc);

552 i‡(
sbba
 =
SI_ENUM_BASE
)

553 
numc‹es
 -
nsbcc
;

554 
ncc
 +
nsbcc
;

558 
	`SI_MSG
(("_sb_sˇn: found %u c‹e†⁄ bu†0x%08x\n", 
i
, 
sbba
));

560 
sii
->
numc‹es
 = 
i
 + 
ncc
;

561  
sii
->
numc‹es
;

562 
	}
}

566 
	$sb_sˇn
(
si_t
 *
sih
, *
ªgs
, 
uöt
 
devid
)

568 
si_öfo_t
 *
sii
;

569 
uöt32
 
‹igsba
;

570 
sbc⁄fig_t
 *
sb
;

572 
sii
 = 
	`SI_INFO
(
sih
);

573 
sb
 = 
	`REGS2SB
(
sii
->
curm≠
);

575 
sii
->
pub
.
socúev
 = (
	`R_SBREG
(sii, &
sb
->
sbidlow
Ë& 
SBIDL_RV_MASK
Ë>> 
SBIDL_RV_SHIFT
;

580 
‹igsba
 = 
	`_sb_c‹esba
(
sii
);

583 
sii
->
numc‹es
 = 
	`_sb_sˇn
(sii, 
‹igsba
, 
ªgs
, 0, 
SI_ENUM_BASE
, 1);

584 
	}
}

592 
	$sb_£tc‹eidx
(
si_t
 *
sih
, 
uöt
 
c‹eidx
)

594 
si_öfo_t
 *
sii
;

596 
sii
 = 
	`SI_INFO
(
sih
);

598 i‡(
c‹eidx
 >
sii
->
numc‹es
)

599  (
NULL
);

605 
	`ASSERT
((
sii
->
öå£«bÀd_‚
 =
NULL
Ë|| !(*(sii)->öå£«bÀd_‚)((sii)->
öå_¨g
));

607 
sii
->
curm≠
 = 
	`_sb_£tc‹eidx
(sii, 
c‹eidx
);

608 
sii
->
curidx
 = 
c‹eidx
;

610  (
sii
->
curm≠
);

611 
	}
}

617 
	$_sb_£tc‹eidx
(
si_öfo_t
 *
sii
, 
uöt
 
c‹eidx
)

619 
uöt32
 
sbaddr
 = 
sii
->
c‹esba
[
c‹eidx
];

620 *
ªgs
;

622 
	`BUSTYPE
(
sii
->
pub
.
bu°y≥
)) {

623 
SI_BUS
:

625 i‡(!
sii
->
ªgs
[
c‹eidx
]) {

626 
sii
->
ªgs
[
c‹eidx
] = 
	`REG_MAP
(
sbaddr
, 
SI_CORE_SIZE
);

627 
	`ASSERT
(
	`GOODREGS
(
sii
->
ªgs
[
c‹eidx
]));

629 
ªgs
 = 
sii
->ªgs[
c‹eidx
];

632 
PCI_BUS
:

634 
	`OSL_PCI_WRITE_CONFIG
(
sii
->
osh
, 
PCI_BAR0_WIN
, 4, 
sbaddr
);

635 
ªgs
 = 
sii
->
curm≠
;

638 
PCMCIA_BUS
: {

639 
uöt8
 
tmp
 = (
sbaddr
 >> 12) & 0x0f;

640 
	`OSL_PCMCIA_WRITE_ATTR
(
sii
->
osh
, 
PCMCIA_ADDR0
, &
tmp
, 1);

641 
tmp
 = (
sbaddr
 >> 16) & 0xff;

642 
	`OSL_PCMCIA_WRITE_ATTR
(
sii
->
osh
, 
PCMCIA_ADDR1
, &
tmp
, 1);

643 
tmp
 = (
sbaddr
 >> 24) & 0xff;

644 
	`OSL_PCMCIA_WRITE_ATTR
(
sii
->
osh
, 
PCMCIA_ADDR2
, &
tmp
, 1);

645 
ªgs
 = 
sii
->
curm≠
;

648 
SPI_BUS
:

649 
SDIO_BUS
:

651 i‡(!
sii
->
ªgs
[
c‹eidx
]) {

652 
sii
->
ªgs
[
c‹eidx
] = (*)(
uöçå
)
sbaddr
;

653 
	`ASSERT
(
	`GOODREGS
(
sii
->
ªgs
[
c‹eidx
]));

655 
ªgs
 = 
sii
->ªgs[
c‹eidx
];

660 
	`ASSERT
(0);

661 
ªgs
 = 
NULL
;

665  
ªgs
;

666 
	}
}

669 vﬁ©ûê
uöt32
 *

670 
	$sb_adm©ch
(
si_öfo_t
 *
sii
, 
uöt
 
asidx
)

672 
sbc⁄fig_t
 *
sb
;

673 vﬁ©ûê
uöt32
 *
addrm
;

675 
sb
 = 
	`REGS2SB
(
sii
->
curm≠
);

677 
asidx
) {

679 
addrm
 = &
sb
->
sbadm©ch0
;

683 
addrm
 = &
sb
->
sbadm©ch1
;

687 
addrm
 = &
sb
->
sbadm©ch2
;

691 
addrm
 = &
sb
->
sbadm©ch3
;

695 
	`SI_ERROR
(("%s: Addªs†•a˚ index (%dËouào‡ønge\n", 
__FUNCTION__
, 
asidx
));

699  (
addrm
);

700 
	}
}

704 
	$sb_numaddr•a˚s
(
si_t
 *
sih
)

706 
si_öfo_t
 *
sii
;

707 
sbc⁄fig_t
 *
sb
;

709 
sii
 = 
	`SI_INFO
(
sih
);

710 
sb
 = 
	`REGS2SB
(
sii
->
curm≠
);

713  ((
	`R_SBREG
(
sii
, &
sb
->
sbidlow
Ë& 
SBIDL_AR_MASK
Ë>> 
SBIDL_AR_SHIFT
) + 1;

714 
	}
}

717 
uöt32


718 
	$sb_addr•a˚
(
si_t
 *
sih
, 
uöt
 
asidx
)

720 
si_öfo_t
 *
sii
;

722 
sii
 = 
	`SI_INFO
(
sih
);

724  (
	`sb_ba£
(
	`R_SBREG
(
sii
, 
	`sb_adm©ch
(sii, 
asidx
))));

725 
	}
}

728 
uöt32


729 
	$sb_addr•a˚size
(
si_t
 *
sih
, 
uöt
 
asidx
)

731 
si_öfo_t
 *
sii
;

733 
sii
 = 
	`SI_INFO
(
sih
);

735  (
	`sb_size
(
	`R_SBREG
(
sii
, 
	`sb_adm©ch
(sii, 
asidx
))));

736 
	}
}

741 
	$sb_commô
(
si_t
 *
sih
)

743 
si_öfo_t
 *
sii
;

744 
uöt
 
‹igidx
;

745 
uöt
 
öå_vÆ
 = 0;

747 
sii
 = 
	`SI_INFO
(
sih
);

749 
‹igidx
 = 
sii
->
curidx
;

750 
	`ASSERT
(
	`GOODIDX
(
‹igidx
));

752 
	`INTR_OFF
(
sii
, 
öå_vÆ
);

755 i‡(
sii
->
pub
.
c¸ev
 !
NOREV
) {

756 
chù¸egs_t
 *
c¸egs
 = (chù¸egs_à*)
	`si_£tc‹e
(
sih
, 
CC_CORE_ID
, 0);

757 
	`ASSERT
(
c¸egs
 !
NULL
);

760 
	`W_REG
(
sii
->
osh
, &
c¸egs
->
brﬂdˇ°addªss
, 
SB_COMMIT
);

761 
	`W_REG
(
sii
->
osh
, &
c¸egs
->
brﬂdˇ°d©a
, 0x0);

763 
	`ASSERT
(0);

766 
	`sb_£tc‹eidx
(
sih
, 
‹igidx
);

767 
	`INTR_RESTORE
(
sii
, 
öå_vÆ
);

768 
	}
}

771 
	$sb_c‹e_dißbÀ
(
si_t
 *
sih
, 
uöt32
 
bôs
)

773 
si_öfo_t
 *
sii
;

774 vﬁ©ûê
uöt32
 
dummy
;

775 
sbc⁄fig_t
 *
sb
;

777 
sii
 = 
	`SI_INFO
(
sih
);

779 
	`ASSERT
(
	`GOODREGS
(
sii
->
curm≠
));

780 
sb
 = 
	`REGS2SB
(
sii
->
curm≠
);

783 i‡(
	`R_SBREG
(
sii
, &
sb
->
sbtm°©ñow
Ë& 
SBTML_RESET
)

787 i‡((
	`R_SBREG
(
sii
, &
sb
->
sbtm°©ñow
Ë& (
SICF_CLOCK_EN
 << 
SBTML_SICF_SHIFT
)) == 0)

788 
dißbÀ
;

791 
	`OR_SBREG
(
sii
, &
sb
->
sbtm°©ñow
, 
SBTML_REJ
);

792 
dummy
 = 
	`R_SBREG
(
sii
, &
sb
->
sbtm°©ñow
);

793 
	`BCM_REFERENCE
(
dummy
);

794 
	`OSL_DELAY
(1);

795 
	`SPINWAIT
((
	`R_SBREG
(
sii
, &
sb
->
sbtm°©ehigh
Ë& 
SBTMH_BUSY
), 100000);

796 i‡(
	`R_SBREG
(
sii
, &
sb
->
sbtm°©ehigh
Ë& 
SBTMH_BUSY
)

797 
	`SI_ERROR
(("%s:Å¨gë sèã stû»busy\n", 
__FUNCTION__
));

799 i‡(
	`R_SBREG
(
sii
, &
sb
->
sbidlow
Ë& 
SBIDL_INIT
) {

800 
	`OR_SBREG
(
sii
, &
sb
->
sbim°©e
, 
SBIM_RJ
);

801 
dummy
 = 
	`R_SBREG
(
sii
, &
sb
->
sbim°©e
);

802 
	`BCM_REFERENCE
(
dummy
);

803 
	`OSL_DELAY
(1);

804 
	`SPINWAIT
((
	`R_SBREG
(
sii
, &
sb
->
sbim°©e
Ë& 
SBIM_BY
), 100000);

808 
	`W_SBREG
(
sii
, &
sb
->
sbtm°©ñow
,

809 (((
bôs
 | 
SICF_FGC
 | 
SICF_CLOCK_EN
Ë<< 
SBTML_SICF_SHIFT
) |

810 
SBTML_REJ
 | 
SBTML_RESET
));

811 
dummy
 = 
	`R_SBREG
(
sii
, &
sb
->
sbtm°©ñow
);

812 
	`BCM_REFERENCE
(
dummy
);

813 
	`OSL_DELAY
(10);

816 i‡(
	`R_SBREG
(
sii
, &
sb
->
sbidlow
Ë& 
SBIDL_INIT
)

817 
	`AND_SBREG
(
sii
, &
sb
->
sbim°©e
, ~
SBIM_RJ
);

819 
dißbÀ
:

821 
	`W_SBREG
(
sii
, &
sb
->
sbtm°©ñow
, ((
bôs
 << 
SBTML_SICF_SHIFT
Ë| 
SBTML_REJ
 | 
SBTML_RESET
));

822 
	`OSL_DELAY
(1);

823 
	}
}

831 
	$sb_c‹e_ª£t
(
si_t
 *
sih
, 
uöt32
 
bôs
, uöt32 
ª£tbôs
)

833 
si_öfo_t
 *
sii
;

834 
sbc⁄fig_t
 *
sb
;

835 vﬁ©ûê
uöt32
 
dummy
;

837 
sii
 = 
	`SI_INFO
(
sih
);

838 
	`ASSERT
(
	`GOODREGS
(
sii
->
curm≠
));

839 
sb
 = 
	`REGS2SB
(
sii
->
curm≠
);

844 
	`sb_c‹e_dißbÀ
(
sih
, (
bôs
 | 
ª£tbôs
));

851 
	`W_SBREG
(
sii
, &
sb
->
sbtm°©ñow
,

852 (((
bôs
 | 
ª£tbôs
 | 
SICF_FGC
 | 
SICF_CLOCK_EN
Ë<< 
SBTML_SICF_SHIFT
) |

853 
SBTML_RESET
));

854 
dummy
 = 
	`R_SBREG
(
sii
, &
sb
->
sbtm°©ñow
);

855 
	`BCM_REFERENCE
(
dummy
);

856 
	`OSL_DELAY
(1);

858 i‡(
	`R_SBREG
(
sii
, &
sb
->
sbtm°©ehigh
Ë& 
SBTMH_SERR
) {

859 
	`W_SBREG
(
sii
, &
sb
->
sbtm°©ehigh
, 0);

861 i‡((
dummy
 = 
	`R_SBREG
(
sii
, &
sb
->
sbim°©e
)Ë& (
SBIM_IBE
 | 
SBIM_TO
)) {

862 
	`AND_SBREG
(
sii
, &
sb
->
sbim°©e
, ~(
SBIM_IBE
 | 
SBIM_TO
));

866 
	`W_SBREG
(
sii
, &
sb
->
sbtm°©ñow
,

867 ((
bôs
 | 
ª£tbôs
 | 
SICF_FGC
 | 
SICF_CLOCK_EN
Ë<< 
SBTML_SICF_SHIFT
));

868 
dummy
 = 
	`R_SBREG
(
sii
, &
sb
->
sbtm°©ñow
);

869 
	`BCM_REFERENCE
(
dummy
);

870 
	`OSL_DELAY
(1);

873 
	`W_SBREG
(
sii
, &
sb
->
sbtm°©ñow
, ((
bôs
 | 
SICF_CLOCK_EN
Ë<< 
SBTML_SICF_SHIFT
));

874 
dummy
 = 
	`R_SBREG
(
sii
, &
sb
->
sbtm°©ñow
);

875 
	`BCM_REFERENCE
(
dummy
);

876 
	`OSL_DELAY
(1);

877 
	}
}

901 
	#TO_MASK
 (
SBIMCL_RTO_MASK
 | 
SBIMCL_STO_MASK
)

	)

903 
uöt32


904 
	$sb_£t_öôüt‹_to
(
si_t
 *
sih
, 
uöt32
 
to
, 
uöt
 
idx
)

906 
si_öfo_t
 *
sii
;

907 
uöt
 
‹igidx
;

908 
uöt
 
öå_vÆ
 = 0;

909 
uöt32
 
tmp
, 
ªt
 = 0xffffffff;

910 
sbc⁄fig_t
 *
sb
;

912 
sii
 = 
	`SI_INFO
(
sih
);

914 i‡((
to
 & ~
TO_MASK
) != 0)

915  
ªt
;

918 i‡(
idx
 =
BADIDX
) {

919 
	`BUSTYPE
(
sii
->
pub
.
bu°y≥
)) {

920 
PCI_BUS
:

921 
idx
 = 
sii
->
pub
.
busc‹eidx
;

923 
JTAG_BUS
:

924 
idx
 = 
SI_CC_IDX
;

926 
PCMCIA_BUS
:

927 
SDIO_BUS
:

928 
idx
 = 
	`si_födc‹eidx
(
sih
, 
PCMCIA_CORE_ID
, 0);

930 
SI_BUS
:

931 
idx
 = 
	`si_födc‹eidx
(
sih
, 
MIPS33_CORE_ID
, 0);

934 
	`ASSERT
(0);

936 i‡(
idx
 =
BADIDX
)

937  
ªt
;

940 
	`INTR_OFF
(
sii
, 
öå_vÆ
);

941 
‹igidx
 = 
	`si_c‹eidx
(
sih
);

943 
sb
 = 
	`REGS2SB
(
	`sb_£tc‹eidx
(
sih
, 
idx
));

945 
tmp
 = 
	`R_SBREG
(
sii
, &
sb
->
sbimc⁄figlow
);

946 
ªt
 = 
tmp
 & 
TO_MASK
;

947 
	`W_SBREG
(
sii
, &
sb
->
sbimc⁄figlow
, (
tmp
 & ~
TO_MASK
Ë| 
to
);

949 
	`sb_commô
(
sih
);

950 
	`sb_£tc‹eidx
(
sih
, 
‹igidx
);

951 
	`INTR_RESTORE
(
sii
, 
öå_vÆ
);

952  
ªt
;

953 
	}
}

955 
uöt32


956 
	$sb_ba£
(
uöt32
 
adm©ch
)

958 
uöt32
 
ba£
;

959 
uöt
 
ty≥
;

961 
ty≥
 = 
adm©ch
 & 
SBAM_TYPE_MASK
;

962 
	`ASSERT
(
ty≥
 < 3);

964 
ba£
 = 0;

966 i‡(
ty≥
 == 0) {

967 
ba£
 = 
adm©ch
 & 
SBAM_BASE0_MASK
;

968 } i‡(
ty≥
 == 1) {

969 
	`ASSERT
(!(
adm©ch
 & 
SBAM_ADNEG
));

970 
ba£
 = 
adm©ch
 & 
SBAM_BASE1_MASK
;

971 } i‡(
ty≥
 == 2) {

972 
	`ASSERT
(!(
adm©ch
 & 
SBAM_ADNEG
));

973 
ba£
 = 
adm©ch
 & 
SBAM_BASE2_MASK
;

976  (
ba£
);

977 
	}
}

979 
uöt32


980 
	$sb_size
(
uöt32
 
adm©ch
)

982 
uöt32
 
size
;

983 
uöt
 
ty≥
;

985 
ty≥
 = 
adm©ch
 & 
SBAM_TYPE_MASK
;

986 
	`ASSERT
(
ty≥
 < 3);

988 
size
 = 0;

990 i‡(
ty≥
 == 0) {

991 
size
 = 1 << (((
adm©ch
 & 
SBAM_ADINT0_MASK
Ë>> 
SBAM_ADINT0_SHIFT
) + 1);

992 } i‡(
ty≥
 == 1) {

993 
	`ASSERT
(!(
adm©ch
 & 
SBAM_ADNEG
));

994 
size
 = 1 << (((
adm©ch
 & 
SBAM_ADINT1_MASK
Ë>> 
SBAM_ADINT1_SHIFT
) + 1);

995 } i‡(
ty≥
 == 2) {

996 
	`ASSERT
(!(
adm©ch
 & 
SBAM_ADNEG
));

997 
size
 = 1 << (((
adm©ch
 & 
SBAM_ADINT2_MASK
Ë>> 
SBAM_ADINT2_SHIFT
) + 1);

1000  (
size
);

1001 
	}
}

	@siutils.c

28 
	~<bcm_cfg.h
>

29 
	~<ty≥defs.h
>

30 
	~<bcmdefs.h
>

31 
	~<o¶.h
>

32 
	~<bcmutûs.h
>

33 
	~<siutûs.h
>

34 
	~<bcmdevs.h
>

35 
	~<hndsoc.h
>

36 
	~<sbchùc.h
>

37 
	~<pcicfg.h
>

38 
	~<sbpcmcü.h
>

39 
	~<sbso¸am.h
>

40 
	~<bcmsdh.h
>

41 
	~<sdio.h
>

42 
	~<sbsdio.h
>

43 
	~<sbhnddma.h
>

44 
	~<sbsdpcmdev.h
>

45 
	~<bcmsdpcm.h
>

46 
	~<hndpmu.h
>

48 
	~"siutûs_¥iv.h
"

51 
si_öfo_t
 *
si_dﬂâach
(si_öfo_à*
sii
, 
uöt
 
devid
, 
o¶_t
 *
osh
, *
ªgs
,

52 
uöt
 
bu°y≥
, *
sdh
, **
v¨s
, uöà*
v¨sz
);

53 
boﬁ
 
si_busc‹e_¥ï
(
si_öfo_t
 *
sii
, 
uöt
 
bu°y≥
, uöà
devid
, *
sdh
);

54 
boﬁ
 
si_busc‹e_£tup
(
si_öfo_t
 *
sii
, 
chù¸egs_t
 *
cc
, 
uöt
 
bu°y≥
, 
uöt32
 
ßvewö
,

55 
uöt
 *
‹igidx
, *
ªgs
);

60 
uöt32
 
	gsi_gpi‹e£rv©i⁄
 = 0;

64 
	gdo_4360_pcõ2_w¨
 = 0;

75 
si_t
 *

76 
	$si_©èch
(
uöt
 
devid
, 
o¶_t
 *
osh
, *
ªgs
,

77 
uöt
 
bu°y≥
, *
sdh
, **
v¨s
, uöà*
v¨sz
)

79 
si_öfo_t
 *
sii
;

82 i‡((
sii
 = 
	`MALLOC
(
osh
,  (
si_öfo_t
))Ë=
NULL
) {

83 
	`SI_ERROR
(("si_©èch: mÆlo¯Áûed! mÆlo˚d %d byãs\n", 
	`MALLOCED
(
osh
)));

84  (
NULL
);

87 i‡(
	`si_dﬂâach
(
sii
, 
devid
, 
osh
, 
ªgs
, 
bu°y≥
, 
sdh
, 
v¨s
, 
v¨sz
Ë=
NULL
) {

88 
	`MFREE
(
osh
, 
sii
, (
si_öfo_t
));

89  (
NULL
);

91 
sii
->
v¨s
 = v¨†? *v¨†: 
NULL
;

92 
sii
->
v¨sz
 = varsz ? *varsz : 0;

94  (
si_t
 *)
sii
;

95 
	}
}

98 
si_öfo_t
 
	gksii
;

100 
uöt32
 
	gwd_m°icks
;

103 
si_t
 *

104 
	$si_k©èch
(
o¶_t
 *
osh
)

106 
boﬁ
 
ksii_©èched
 = 
FALSE
;

108 i‡(!
ksii_©èched
) {

109 *
ªgs
 = 
NULL
;

110 
ªgs
 = 
	`REG_MAP
(
SI_ENUM_BASE
, 
SI_CORE_SIZE
);

112 i‡(
	`si_dﬂâach
(&
ksii
, 
BCM4710_DEVICE_ID
, 
osh
, 
ªgs
,

113 
SI_BUS
, 
NULL
,

114 
osh
 !
SI_OSH
 ? &
ksii
.
v¨s
 : 
NULL
,

115 
osh
 !
SI_OSH
 ? &
ksii
.
v¨sz
 : 
NULL
) == NULL) {

116 
	`SI_ERROR
(("si_kattach: si_doattach failed\n"));

117 
	`REG_UNMAP
(
ªgs
);

118  
NULL
;

120 
	`REG_UNMAP
(
ªgs
);

123 i‡(
	`PMUCTL_ENAB
(&
ksii
.
pub
)) {

125 
wd_m°icks
 = 32;

127 
wd_m°icks
 = 
ALP_CLOCK
 / 1000;

130 
ksii_©èched
 = 
TRUE
;

131 
	`SI_MSG
(("si_kattach done. ccrev = %d, wd_msticks = %d\n",

132 
ksii
.
pub
.
c¸ev
, 
wd_m°icks
));

135  &
ksii
.
pub
;

136 
	}
}

139 
boﬁ


140 
	$si_busc‹e_¥ï
(
si_öfo_t
 *
sii
, 
uöt
 
bu°y≥
, uöà
devid
, *
sdh
)

143 i‡(
	`BUSTYPE
(
bu°y≥
Ë=
PCMCIA_BUS
)

144 
sii
->
mem£g
 = 
TRUE
;

147 i‡(
	`BUSTYPE
(
bu°y≥
Ë=
SDIO_BUS
) {

148 
îr
;

149 
uöt8
 
˛k£t
;

152 
˛k£t
 = 
SBSDIO_FORCE_HW_CLKREQ_OFF
 | 
SBSDIO_ALP_AVAIL_REQ
;

153 
	`bcmsdh_cfg_wrôe
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_CHIPCLKCSR
, 
˛k£t
, &
îr
);

154 i‡(!
îr
) {

155 
uöt8
 
˛kvÆ
;

158 
˛kvÆ
 = 
	`bcmsdh_cfg_ªad
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_CHIPCLKCSR
, 
NULL
);

159 i‡((
˛kvÆ
 & ~
SBSDIO_AVBITS
Ë=
˛k£t
) {

160 
	`SPINWAIT
(((
˛kvÆ
 = 
	`bcmsdh_cfg_ªad
(
sdh
, 
SDIO_FUNC_1
,

161 
SBSDIO_FUNC1_CHIPCLKCSR
, 
NULL
)), !
	`SBSDIO_ALPAV
(
˛kvÆ
)),

162 
PMU_MAX_TRANSITION_DLY
);

163 i‡(!
	`SBSDIO_ALPAV
(
˛kvÆ
)) {

164 
	`SI_ERROR
(("timeout on ALPAV wait, clkval 0x%02x\n",

165 
˛kvÆ
));

166  
FALSE
;

168 
˛k£t
 = 
SBSDIO_FORCE_HW_CLKREQ_OFF
 | 
SBSDIO_FORCE_ALP
;

169 
	`bcmsdh_cfg_wrôe
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_CHIPCLKCSR
,

170 
˛k£t
, &
îr
);

171 
	`OSL_DELAY
(65);

176 
	`bcmsdh_cfg_wrôe
(
sdh
, 
SDIO_FUNC_1
, 
SBSDIO_FUNC1_SDIOPULLUP
, 0, 
NULL
);

180  
TRUE
;

181 
	}
}

183 
boﬁ


184 
	$si_busc‹e_£tup
(
si_öfo_t
 *
sii
, 
chù¸egs_t
 *
cc
, 
uöt
 
bu°y≥
, 
uöt32
 
ßvewö
,

185 
uöt
 *
‹igidx
, *
ªgs
)

187 
boﬁ
 
pci
, 
pcõ
, 
pcõ_gí2
 = 
FALSE
;

188 
uöt
 
i
;

189 
uöt
 
pciidx
, 
pcõidx
, 
pcúev
, 
pcõªv
;

191 
cc
 = 
	`si_£tc‹eidx
(&
sii
->
pub
, 
SI_CC_IDX
);

192 
	`ASSERT
((
uöçå
)
cc
);

195 
sii
->
pub
.
c¸ev
 = ()
	`si_c‹îev
(&sii->pub);

198 i‡(
sii
->
pub
.
c¸ev
 >= 11)

199 
sii
->
pub
.
chù°
 = 
	`R_REG
(sii->
osh
, &
cc
->
chù°©us
);

202 
sii
->
pub
.
ccˇps
 = 
	`R_REG
(sii->
osh
, &
cc
->
ˇ∑bûôõs
);

205 i‡(
sii
->
pub
.
c¸ev
 >= 35)

206 
sii
->
pub
.
ccˇps_ext
 = 
	`R_REG
(sii->
osh
, &
cc
->
ˇ∑bûôõs_ext
);

209 i‡(
sii
->
pub
.
ccˇps
 & 
CC_CAP_PMU
) {

210 
sii
->
pub
.
pmuˇps
 = 
	`R_REG
(sii->
osh
, &
cc
->
pmuˇ∑bûôõs
);

211 
sii
->
pub
.
pmuªv
 = sii->pub.
pmuˇps
 & 
PCAP_REV_MASK
;

214 
	`SI_MSG
(("Chipc:Ñev %d, caps 0x%x, chipst 0x%xÖmurev %d,Ömucaps 0x%x\n",

215 
sii
->
pub
.
c¸ev
, sii->pub.
ccˇps
, sii->pub.
chù°
, sii->pub.
pmuªv
,

216 
sii
->
pub
.
pmuˇps
));

219 
sii
->
pub
.
busc‹ëy≥
 = 
NODEV_CORE_ID
;

220 
sii
->
pub
.
busc‹îev
 = (
uöt
)
NOREV
;

221 
sii
->
pub
.
busc‹eidx
 = 
BADIDX
;

223 
pci
 = 
pcõ
 = 
FALSE
;

224 
pcúev
 = 
pcõªv
 = (
uöt
)
NOREV
;

225 
pciidx
 = 
pcõidx
 = 
BADIDX
;

227 
i
 = 0; i < 
sii
->
numc‹es
; i++) {

228 
uöt
 
cid
, 
¸ev
;

230 
	`si_£tc‹eidx
(&
sii
->
pub
, 
i
);

231 
cid
 = 
	`si_c‹eid
(&
sii
->
pub
);

232 
¸ev
 = 
	`si_c‹îev
(&
sii
->
pub
);

235 
	`SI_VMSG
(("CORE[%d]: id 0x%xÑev %d base 0x%xÑegs 0x%p\n",

236 
i
, 
cid
, 
¸ev
, 
sii
->
c‹esba
[i], sii->
ªgs
[i]));

238 i‡(
	`BUSTYPE
(
bu°y≥
Ë=
PCI_BUS
) {

239 i‡(
cid
 =
PCI_CORE_ID
) {

240 
pciidx
 = 
i
;

241 
pcúev
 = 
¸ev
;

242 
pci
 = 
TRUE
;

243 } i‡((
cid
 =
PCIE_CORE_ID
Ë|| (cid =
PCIE2_CORE_ID
)) {

244 
pcõidx
 = 
i
;

245 
pcõªv
 = 
¸ev
;

246 
pcõ
 = 
TRUE
;

247 i‡(
cid
 =
PCIE2_CORE_ID
)

248 
pcõ_gí2
 = 
TRUE
;

250 } i‡((
	`BUSTYPE
(
bu°y≥
Ë=
PCMCIA_BUS
) &&

251 (
cid
 =
PCMCIA_CORE_ID
)) {

252 
sii
->
pub
.
busc‹îev
 = 
¸ev
;

253 
sii
->
pub
.
busc‹ëy≥
 = 
cid
;

254 
sii
->
pub
.
busc‹eidx
 = 
i
;

256 i‡(((
	`BUSTYPE
(
bu°y≥
Ë=
SDIO_BUS
) ||

257 (
	`BUSTYPE
(
bu°y≥
Ë=
SPI_BUS
)) &&

258 ((
cid
 =
PCMCIA_CORE_ID
) ||

259 (
cid
 =
SDIOD_CORE_ID
))) {

260 
sii
->
pub
.
busc‹îev
 = 
¸ev
;

261 
sii
->
pub
.
busc‹ëy≥
 = 
cid
;

262 
sii
->
pub
.
busc‹eidx
 = 
i
;

266 i‡((
ßvewö
 && (ßvewö =
sii
->
c‹esba
[
i
])) ||

267 (
ªgs
 =
sii
->ªgs[
i
]))

268 *
‹igidx
 = 
i
;

271 i‡(
pci
) {

272 
sii
->
pub
.
busc‹ëy≥
 = 
PCI_CORE_ID
;

273 
sii
->
pub
.
busc‹îev
 = 
pcúev
;

274 
sii
->
pub
.
busc‹eidx
 = 
pciidx
;

275 } i‡(
pcõ
) {

276 i‡(
pcõ_gí2
)

277 
sii
->
pub
.
busc‹ëy≥
 = 
PCIE2_CORE_ID
;

279 
sii
->
pub
.
busc‹ëy≥
 = 
PCIE_CORE_ID
;

280 
sii
->
pub
.
busc‹îev
 = 
pcõªv
;

281 
sii
->
pub
.
busc‹eidx
 = 
pcõidx
;

284 
	`SI_VMSG
(("Busc‹êid/ty≥/ªv %d/0x%x/%d\n", 
sii
->
pub
.
busc‹eidx
, sii->pub.
busc‹ëy≥
,

285 
sii
->
pub
.
busc‹îev
));

287 i‡(
	`BUSTYPE
(
sii
->
pub
.
bu°y≥
Ë=
SI_BUS
 && (
	`CHIPID
(sii->pub.
chù
Ë=
BCM4712_CHIP_ID
) &&

288 (
sii
->
pub
.
chùpkg
 !
BCM4712LARGE_PKG_ID
Ë&& (
	`CHIPREV
(sii->pub.
chùªv
) <= 3))

289 
	`OR_REG
(
sii
->
osh
, &
cc
->
¶ow_˛k_˘l
, 
SCC_SS_XTAL
);

295 i‡((
	`BUSTYPE
(
bu°y≥
Ë=
SDIO_BUS
Ë|| (BUSTYPE(bu°y≥Ë=
SPI_BUS
)) {

296 i‡(
	`si_£tc‹e
(&
sii
->
pub
, 
ARM7S_CORE_ID
, 0) ||

297 
	`si_£tc‹e
(&
sii
->
pub
, 
ARMCM3_CORE_ID
, 0))

298 
	`si_c‹e_dißbÀ
(&
sii
->
pub
, 0);

302 
	`si_£tc‹eidx
(&
sii
->
pub
, *
‹igidx
);

304  
TRUE
;

305 
	}
}

310 
si_öfo_t
 *

311 
	$si_dﬂâach
(
si_öfo_t
 *
sii
, 
uöt
 
devid
, 
o¶_t
 *
osh
, *
ªgs
,

312 
uöt
 
bu°y≥
, *
sdh
, **
v¨s
, uöà*
v¨sz
)

314 
si_pub
 *
sih
 = &
sii
->
pub
;

315 
uöt32
 
w
, 
ßvewö
;

316 
chù¸egs_t
 *
cc
;

317 *
pv¨s
 = 
NULL
;

318 
uöt
 
‹igidx
;

320 
	`ASSERT
(
	`GOODREGS
(
ªgs
));

322 
	`bzîo
((
uch¨
*)
sii
, (
si_öfo_t
));

324 
ßvewö
 = 0;

326 
sih
->
busc‹eidx
 = 
BADIDX
;

328 
sii
->
curm≠
 = 
ªgs
;

329 
sii
->
sdh
 = sdh;

330 
sii
->
osh
 = osh;

335 i‡(
bu°y≥
 =
PCI_BUS
) {

336 
ßvewö
 = 
	`OSL_PCI_READ_CONFIG
(
sii
->
osh
, 
PCI_BAR0_WIN
, (
uöt32
));

337 i‡(!
	`GOODCOREADDR
(
ßvewö
, 
SI_ENUM_BASE
))

338 
ßvewö
 = 
SI_ENUM_BASE
;

339 
	`OSL_PCI_WRITE_CONFIG
(
sii
->
osh
, 
PCI_BAR0_WIN
, 4, 
SI_ENUM_BASE
);

340 i‡(!
ªgs
)

341  
NULL
;

342 
cc
 = (
chù¸egs_t
 *)
ªgs
;

343 } i‡((
bu°y≥
 =
SDIO_BUS
Ë|| (bu°y≥ =
SPI_BUS
)) {

344 
cc
 = (
chù¸egs_t
 *)
sii
->
curm≠
;

346 
cc
 = (
chù¸egs_t
 *)
	`REG_MAP
(
SI_ENUM_BASE
, 
SI_CORE_SIZE
);

349 
sih
->
bu°y≥
 = bustype;

350 i‡(
bu°y≥
 !
	`BUSTYPE
(bustype)) {

351 
	`SI_ERROR
(("si_doattach: busÅype %d doesÇot match configured busÅype %d\n",

352 
bu°y≥
, 
	`BUSTYPE
(bustype)));

353  
NULL
;

357 i‡(!
	`si_busc‹e_¥ï
(
sii
, 
bu°y≥
, 
devid
, 
sdh
)) {

358 
	`SI_ERROR
(("si_dﬂâach: si_c‹e_˛k_¥ï faûed %d\n", 
bu°y≥
));

359  
NULL
;

367 i‡(!
cc
) {

368 
	`SI_ERROR
(("%s: chùcomm⁄Ñegi°î s∑˚ i†nuŒ \n", 
__FUNCTION__
));

369  
NULL
;

371 
w
 = 
	`R_REG
(
osh
, &
cc
->
chùid
);

372 
sih
->
socôy≥
 = (
w
 & 
CID_TYPE_MASK
Ë>> 
CID_TYPE_SHIFT
;

374 
sih
->
chù
 = 
w
 & 
CID_ID_MASK
;

375 
sih
->
chùªv
 = (
w
 & 
CID_REV_MASK
Ë>> 
CID_REV_SHIFT
;

376 
sih
->
chùpkg
 = (
w
 & 
CID_PKG_MASK
Ë>> 
CID_PKG_SHIFT
;

378 i‡((
	`CHIPID
(
sih
->
chù
Ë=
BCM4329_CHIP_ID
Ë&& (sih->
chùªv
 == 0) &&

379 (
sih
->
chùpkg
 !
BCM4329_289PIN_PKG_ID
)) {

380 
sih
->
chùpkg
 = 
BCM4329_182PIN_PKG_ID
;

382 
sih
->
issim
 = 
	`IS_SIM
(sih->
chùpkg
);

385 i‡(
	`CHIPTYPE
(
sii
->
pub
.
socôy≥
Ë=
SOCI_SB
) {

386 
	`SI_MSG
(("Found chùÅy≥ SB (0x%08x)\n", 
w
));

387 
	`sb_sˇn
(&
sii
->
pub
, 
ªgs
, 
devid
);

388 } i‡(
	`CHIPTYPE
(
sii
->
pub
.
socôy≥
Ë=
SOCI_AI
) {

389 
	`SI_MSG
(("Found chùÅy≥ AI (0x%08x)\n", 
w
));

391 
	`ai_sˇn
(&
sii
->
pub
, (*)(
uöçå
)
cc
, 
devid
);

392 } i‡(
	`CHIPTYPE
(
sii
->
pub
.
socôy≥
Ë=
SOCI_UBUS
) {

393 
	`SI_MSG
(("Found chùÅy≥ UBUS (0x%08x), chù id = 0x%4x\n", 
w
, 
sih
->
chù
));

395 
	`ub_sˇn
(&
sii
->
pub
, (*)(
uöçå
)
cc
, 
devid
);

397 
	`SI_ERROR
(("Found chù o‡unknow¿ty≥ (0x%08x)\n", 
w
));

398  
NULL
;

401 i‡(
sii
->
numc‹es
 == 0) {

402 
	`SI_ERROR
(("si_doattach: couldÇot findány cores\n"));

403  
NULL
;

406 
‹igidx
 = 
SI_CC_IDX
;

407 i‡(!
	`si_busc‹e_£tup
(
sii
, 
cc
, 
bu°y≥
, 
ßvewö
, &
‹igidx
, 
ªgs
)) {

408 
	`SI_ERROR
(("si_doattach: si_buscore_setup failed\n"));

409 
exô
;

412 i‡(
	`CHIPID
(
sih
->
chù
Ë=
BCM4322_CHIP_ID
 && (((sih->
chù°
 & 
CST4322_SPROM_OTP_SEL_MASK
)

413 >> 
CST4322_SPROM_OTP_SEL_SHIFT
Ë=(
CST4322_OTP_PRESENT
 |

414 
CST4322_SPROM_PRESENT
))) {

415 
	`SI_ERROR
(("%s: InvÆid sëtög: bŸh SPROMánd OTP så≠≥d.\n", 
__FUNCTION__
));

416  
NULL
;

420 i‡((
sii
->
pub
.
c¸ev
 =0x25Ë&& ((
	`CHIPID
(
sih
->
chù
Ë=
BCM43236_CHIP_ID
 ||

421 
	`CHIPID
(
sih
->
chù
Ë=
BCM43235_CHIP_ID
 ||

422 
	`CHIPID
(
sih
->
chù
Ë=
BCM43234_CHIP_ID
 ||

423 
	`CHIPID
(
sih
->
chù
Ë=
BCM43238_CHIP_ID
) &&

424 (
	`CHIPREV
(
sii
->
pub
.
chùªv
) <= 2))) {

426 i‡((
cc
->
chù°©us
 & 
CST43236_BP_CLK
) != 0) {

427 
uöt
 
˛kdiv
;

428 
˛kdiv
 = 
	`R_REG
(
osh
, &
cc
->clkdiv);

430 
˛kdiv
 = (˛kdiv & ~
CLKD_OTP
Ë| (14 << 
CLKD_OTP_SHIFT
);

431 
	`W_REG
(
osh
, &
cc
->
˛kdiv
, clkdiv);

432 
	`SI_ERROR
(("%s: së clkdivÅÿ%x\n", 
__FUNCTION__
, 
˛kdiv
));

434 
	`OSL_DELAY
(10);

437 i‡(
bu°y≥
 =
PCI_BUS
) {

441 
pv¨s
 = 
NULL
;

442 
	`BCM_REFERENCE
(
pv¨s
);

446 i‡(
sii
->
pub
.
c¸ev
 >= 20) {

447 
uöt32
 
gpi›uŒup
 = 0, 
gpi›uŒdown
 = 0;

448 
cc
 = (
chù¸egs_t
 *)
	`si_£tc‹e
(
sih
, 
CC_CORE_ID
, 0);

449 
	`ASSERT
(
cc
 !
NULL
);

452 i‡((
	`CHIPID
(
sih
->
chù
Ë=
BCM4314_CHIP_ID
) ||

453 (
	`CHIPID
(
sih
->
chù
Ë=
BCM43142_CHIP_ID
)) {

454 
gpi›uŒup
 |= 0x402e0;

455 
gpi›uŒdown
 |= 0x20500;

458 
	`W_REG
(
osh
, &
cc
->
gpi›uŒup
, gpiopullup);

459 
	`W_REG
(
osh
, &
cc
->
gpi›uŒdown
, gpiopulldown);

460 
	`si_£tc‹eidx
(
sih
, 
‹igidx
);

465 
	`ASSERT
(!
	`si_è˛ór
(
sih
, 
FALSE
));

467  (
sii
);

469 
exô
:

471  
NULL
;

472 
	}
}

476 
	$si_dëach
(
si_t
 *
sih
)

478 
si_öfo_t
 *
sii
;

479 
uöt
 
idx
;

482 
sii
 = 
	`SI_INFO
(
sih
);

484 i‡(
sii
 =
NULL
)

487 i‡(
	`BUSTYPE
(
sih
->
bu°y≥
Ë=
SI_BUS
)

488 
idx
 = 0; idx < 
SI_MAXCORES
; idx++)

489 i‡(
sii
->
ªgs
[
idx
]) {

490 
	`REG_UNMAP
(
sii
->
ªgs
[
idx
]);

491 
sii
->
ªgs
[
idx
] = 
NULL
;

496 #i‡!
	`deföed
(
BCMBUSTYPE
Ë|| (BCMBUSTYPE =
SI_BUS
)

497 i‡(
sii
 !&
ksii
)

499 
	`MFREE
(
sii
->
osh
, sii, (
si_öfo_t
));

500 
	}
}

503 
	$si_osh
(
si_t
 *
sih
)

505 
si_öfo_t
 *
sii
;

507 
sii
 = 
	`SI_INFO
(
sih
);

508  
sii
->
osh
;

509 
	}
}

512 
	$si_£tosh
(
si_t
 *
sih
, 
o¶_t
 *
osh
)

514 
si_öfo_t
 *
sii
;

516 
sii
 = 
	`SI_INFO
(
sih
);

517 i‡(
sii
->
osh
 !
NULL
) {

518 
	`SI_ERROR
(("osh isálready set....\n"));

519 
	`ASSERT
(!
sii
->
osh
);

521 
sii
->
osh
 = osh;

522 
	}
}

526 
	$si_ªgi°î_öå_ˇŒback
(
si_t
 *
sih
, *
öåsoff_‚
, *
öå§e°‹e_‚
,

527 *
öå£«bÀd_‚
, *
öå_¨g
)

529 
si_öfo_t
 *
sii
;

531 
sii
 = 
	`SI_INFO
(
sih
);

532 
sii
->
öå_¨g
 = intr_arg;

533 
sii
->
öåsoff_‚
 = (
si_öåsoff_t
)intrsoff_fn;

534 
sii
->
öå§e°‹e_‚
 = (
si_öå§e°‹e_t
)intrsrestore_fn;

535 
sii
->
öå£«bÀd_‚
 = (
si_öå£«bÀd_t
)intrsenabled_fn;

539 
sii
->
dev_c‹eid
 = sii->
c‹eid
[sii->
curidx
];

540 
	}
}

543 
	$si_dîegi°î_öå_ˇŒback
(
si_t
 *
sih
)

545 
si_öfo_t
 *
sii
;

547 
sii
 = 
	`SI_INFO
(
sih
);

548 
sii
->
öåsoff_‚
 = 
NULL
;

549 
	}
}

551 
uöt


552 
	$si_ötÊag
(
si_t
 *
sih
)

554 
si_öfo_t
 *
sii
 = 
	`SI_INFO
(
sih
);

556 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_SB
)

557  
	`sb_ötÊag
(
sih
);

558 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_AI
)

559  
	`R_REG
(
sii
->
osh
, ((
uöt32
 *)(
uöçå
)

560 (
sii
->
oob_rouãr
 + 
OOB_STATUSA
)));

562 
	`ASSERT
(0);

565 
	}
}

567 
uöt


568 
	$si_Êag
(
si_t
 *
sih
)

570 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_SB
)

571  
	`sb_Êag
(
sih
);

572 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_AI
)

573  
	`ai_Êag
(
sih
);

574 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_UBUS
)

575  
	`ub_Êag
(
sih
);

577 
	`ASSERT
(0);

580 
	}
}

583 
	$si_£töt
(
si_t
 *
sih
, 
siÊag
)

585 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_SB
)

586 
	`sb_£töt
(
sih
, 
siÊag
);

587 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_AI
)

588 
	`ai_£töt
(
sih
, 
siÊag
);

589 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_UBUS
)

590 
	`ub_£töt
(
sih
, 
siÊag
);

592 
	`ASSERT
(0);

593 
	}
}

595 
uöt


596 
	$si_c‹eid
(
si_t
 *
sih
)

598 
si_öfo_t
 *
sii
;

600 
sii
 = 
	`SI_INFO
(
sih
);

601  
sii
->
c‹eid
[sii->
curidx
];

602 
	}
}

604 
uöt


605 
	$si_c‹eidx
(
si_t
 *
sih
)

607 
si_öfo_t
 *
sii
;

609 
sii
 = 
	`SI_INFO
(
sih
);

610  
sii
->
curidx
;

611 
	}
}

614 
uöt


615 
	$si_c‹eunô
(
si_t
 *
sih
)

617 
si_öfo_t
 *
sii
;

618 
uöt
 
idx
;

619 
uöt
 
c‹eid
;

620 
uöt
 
c‹eunô
;

621 
uöt
 
i
;

623 
sii
 = 
	`SI_INFO
(
sih
);

624 
c‹eunô
 = 0;

626 
idx
 = 
sii
->
curidx
;

628 
	`ASSERT
(
	`GOODREGS
(
sii
->
curm≠
));

629 
c‹eid
 = 
	`si_c‹eid
(
sih
);

632 
i
 = 0; i < 
idx
; i++)

633 i‡(
sii
->
c‹eid
[
i
] == coreid)

634 
c‹eunô
++;

636  (
c‹eunô
);

637 
	}
}

639 
uöt


640 
	$si_c‹evíd‹
(
si_t
 *
sih
)

642 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_SB
)

643  
	`sb_c‹evíd‹
(
sih
);

644 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_AI
)

645  
	`ai_c‹evíd‹
(
sih
);

646 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_UBUS
)

647  
	`ub_c‹evíd‹
(
sih
);

649 
	`ASSERT
(0);

652 
	}
}

654 
boﬁ


655 
	$si_back∂™e64
(
si_t
 *
sih
)

657  ((
sih
->
ccˇps
 & 
CC_CAP_BKPLN64
) != 0);

658 
	}
}

660 
uöt


661 
	$si_c‹îev
(
si_t
 *
sih
)

663 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_SB
)

664  
	`sb_c‹îev
(
sih
);

665 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_AI
)

666  
	`ai_c‹îev
(
sih
);

667 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_UBUS
)

668  
	`ub_c‹îev
(
sih
);

670 
	`ASSERT
(0);

673 
	}
}

676 
uöt


677 
	$si_födc‹eidx
(
si_t
 *
sih
, 
uöt
 
c‹eid
, uöà
c‹eunô
)

679 
si_öfo_t
 *
sii
;

680 
uöt
 
found
;

681 
uöt
 
i
;

683 
sii
 = 
	`SI_INFO
(
sih
);

685 
found
 = 0;

687 
i
 = 0; i < 
sii
->
numc‹es
; i++)

688 i‡(
sii
->
c‹eid
[
i
] == coreid) {

689 i‡(
found
 =
c‹eunô
)

690  (
i
);

691 
found
++;

694  (
BADIDX
);

695 
	}
}

698 
uöt


699 
	$si_c‹ñi°
(
si_t
 *
sih
, 
uöt
 
c‹eid
[])

701 
si_öfo_t
 *
sii
;

703 
sii
 = 
	`SI_INFO
(
sih
);

705 
	`bc›y
((
uch¨
*)
sii
->
c‹eid
, (uch¨*)c‹eid, (sii->
numc‹es
 * (
uöt
)));

706  (
sii
->
numc‹es
);

707 
	}
}

711 
	$si_c‹îegs
(
si_t
 *
sih
)

713 
si_öfo_t
 *
sii
;

715 
sii
 = 
	`SI_INFO
(
sih
);

716 
	`ASSERT
(
	`GOODREGS
(
sii
->
curm≠
));

718  (
sii
->
curm≠
);

719 
	}
}

727 
	$si_£tc‹e
(
si_t
 *
sih
, 
uöt
 
c‹eid
, uöà
c‹eunô
)

729 
uöt
 
idx
;

731 
idx
 = 
	`si_födc‹eidx
(
sih
, 
c‹eid
, 
c‹eunô
);

732 i‡(!
	`GOODIDX
(
idx
))

733  (
NULL
);

735 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_SB
)

736  
	`sb_£tc‹eidx
(
sih
, 
idx
);

737 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_AI
)

738  
	`ai_£tc‹eidx
(
sih
, 
idx
);

739 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_UBUS
)

740  
	`ub_£tc‹eidx
(
sih
, 
idx
);

742 
	`ASSERT
(0);

743  
NULL
;

745 
	}
}

748 
	$si_£tc‹eidx
(
si_t
 *
sih
, 
uöt
 
c‹eidx
)

750 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_SB
)

751  
	`sb_£tc‹eidx
(
sih
, 
c‹eidx
);

752 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_AI
)

753  
	`ai_£tc‹eidx
(
sih
, 
c‹eidx
);

754 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_UBUS
)

755  
	`ub_£tc‹eidx
(
sih
, 
c‹eidx
);

757 
	`ASSERT
(0);

758  
NULL
;

760 
	}
}

764 
	$si_swôch_c‹e
(
si_t
 *
sih
, 
uöt
 
c‹eid
, uöà*
‹igidx
, uöà*
öå_vÆ
)

766 *
cc
;

767 
si_öfo_t
 *
sii
;

769 
sii
 = 
	`SI_INFO
(
sih
);

771 i‡(
	`SI_FAST
(
sii
)) {

776 *
‹igidx
 = 
c‹eid
;

777 i‡(
c‹eid
 =
CC_CORE_ID
)

778  (*)
	`CCREGS_FAST
(
sii
);

779 i‡(
c‹eid
 =
sih
->
busc‹ëy≥
)

780  (*)
	`PCIEREGS
(
sii
);

782 
	`INTR_OFF
(
sii
, *
öå_vÆ
);

783 *
‹igidx
 = 
sii
->
curidx
;

784 
cc
 = 
	`si_£tc‹e
(
sih
, 
c‹eid
, 0);

785 
	`ASSERT
(
cc
 !
NULL
);

787  
cc
;

788 
	}
}

792 
	$si_ª°‹e_c‹e
(
si_t
 *
sih
, 
uöt
 
c‹eid
, uöà
öå_vÆ
)

794 
si_öfo_t
 *
sii
;

796 
sii
 = 
	`SI_INFO
(
sih
);

797 i‡(
	`SI_FAST
(
sii
Ë&& ((
c‹eid
 =
CC_CORE_ID
Ë|| (c‹eid =
sih
->
busc‹ëy≥
)))

800 
	`si_£tc‹eidx
(
sih
, 
c‹eid
);

801 
	`INTR_RESTORE
(
sii
, 
öå_vÆ
);

802 
	}
}

805 
	$si_numaddr•a˚s
(
si_t
 *
sih
)

807 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_SB
)

808  
	`sb_numaddr•a˚s
(
sih
);

809 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_AI
)

810  
	`ai_numaddr•a˚s
(
sih
);

811 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_UBUS
)

812  
	`ub_numaddr•a˚s
(
sih
);

814 
	`ASSERT
(0);

817 
	}
}

819 
uöt32


820 
	$si_addr•a˚
(
si_t
 *
sih
, 
uöt
 
asidx
)

822 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_SB
)

823  
	`sb_addr•a˚
(
sih
, 
asidx
);

824 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_AI
)

825  
	`ai_addr•a˚
(
sih
, 
asidx
);

826 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_UBUS
)

827  
	`ub_addr•a˚
(
sih
, 
asidx
);

829 
	`ASSERT
(0);

832 
	}
}

834 
uöt32


835 
	$si_addr•a˚size
(
si_t
 *
sih
, 
uöt
 
asidx
)

837 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_SB
)

838  
	`sb_addr•a˚size
(
sih
, 
asidx
);

839 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_AI
)

840  
	`ai_addr•a˚size
(
sih
, 
asidx
);

841 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_UBUS
)

842  
	`ub_addr•a˚size
(
sih
, 
asidx
);

844 
	`ASSERT
(0);

847 
	}
}

850 
	$si_c‹óddr•a˚X
(
si_t
 *
sih
, 
uöt
 
asidx
, 
uöt32
 *
addr
, uöt32 *
size
)

853 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_AI
)

854 
	`ai_c‹óddr•a˚X
(
sih
, 
asidx
, 
addr
, 
size
);

856 *
size
 = 0;

857 
	}
}

859 
uöt32


860 
	$si_c‹e_cÊags
(
si_t
 *
sih
, 
uöt32
 
mask
, uöt32 
vÆ
)

862 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_SB
)

863  
	`sb_c‹e_cÊags
(
sih
, 
mask
, 
vÆ
);

864 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_AI
)

865  
	`ai_c‹e_cÊags
(
sih
, 
mask
, 
vÆ
);

866 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_UBUS
)

867  
	`ub_c‹e_cÊags
(
sih
, 
mask
, 
vÆ
);

869 
	`ASSERT
(0);

872 
	}
}

875 
	$si_c‹e_cÊags_wo
(
si_t
 *
sih
, 
uöt32
 
mask
, uöt32 
vÆ
)

877 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_SB
)

878 
	`sb_c‹e_cÊags_wo
(
sih
, 
mask
, 
vÆ
);

879 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_AI
)

880 
	`ai_c‹e_cÊags_wo
(
sih
, 
mask
, 
vÆ
);

881 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_UBUS
)

882 
	`ub_c‹e_cÊags_wo
(
sih
, 
mask
, 
vÆ
);

884 
	`ASSERT
(0);

885 
	}
}

887 
uöt32


888 
	$si_c‹e_sÊags
(
si_t
 *
sih
, 
uöt32
 
mask
, uöt32 
vÆ
)

890 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_SB
)

891  
	`sb_c‹e_sÊags
(
sih
, 
mask
, 
vÆ
);

892 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_AI
)

893  
	`ai_c‹e_sÊags
(
sih
, 
mask
, 
vÆ
);

894 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_UBUS
)

895  
	`ub_c‹e_sÊags
(
sih
, 
mask
, 
vÆ
);

897 
	`ASSERT
(0);

900 
	}
}

902 
boﬁ


903 
	$si_isc‹eup
(
si_t
 *
sih
)

905 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_SB
)

906  
	`sb_isc‹eup
(
sih
);

907 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_AI
)

908  
	`ai_isc‹eup
(
sih
);

909 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_UBUS
)

910  
	`ub_isc‹eup
(
sih
);

912 
	`ASSERT
(0);

913  
FALSE
;

915 
	}
}

917 
uöt


918 
	$si_wøµîªg
(
si_t
 *
sih
, 
uöt32
 
off£t
, uöt32 
mask
, uöt32 
vÆ
)

921 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_AI
)

922  (
	`ai_wøp_ªg
(
sih
, 
off£t
, 
mask
, 
vÆ
));

924 
	}
}

926 
uöt


927 
	$si_c‹îeg
(
si_t
 *
sih
, 
uöt
 
c‹eidx
, uöà
ªgoff
, uöà
mask
, uöà
vÆ
)

929 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_SB
)

930  
	`sb_c‹îeg
(
sih
, 
c‹eidx
, 
ªgoff
, 
mask
, 
vÆ
);

931 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_AI
)

932  
	`ai_c‹îeg
(
sih
, 
c‹eidx
, 
ªgoff
, 
mask
, 
vÆ
);

933 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_UBUS
)

934  
	`ub_c‹îeg
(
sih
, 
c‹eidx
, 
ªgoff
, 
mask
, 
vÆ
);

936 
	`ASSERT
(0);

939 
	}
}

942 
	$si_c‹e_dißbÀ
(
si_t
 *
sih
, 
uöt32
 
bôs
)

944 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_SB
)

945 
	`sb_c‹e_dißbÀ
(
sih
, 
bôs
);

946 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_AI
)

947 
	`ai_c‹e_dißbÀ
(
sih
, 
bôs
);

948 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_UBUS
)

949 
	`ub_c‹e_dißbÀ
(
sih
, 
bôs
);

950 
	}
}

953 
	$si_c‹e_ª£t
(
si_t
 *
sih
, 
uöt32
 
bôs
, uöt32 
ª£tbôs
)

955 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_SB
)

956 
	`sb_c‹e_ª£t
(
sih
, 
bôs
, 
ª£tbôs
);

957 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_AI
)

958 
	`ai_c‹e_ª£t
(
sih
, 
bôs
, 
ª£tbôs
);

959 i‡(
	`CHIPTYPE
(
sih
->
socôy≥
Ë=
SOCI_UBUS
)

960 
	`ub_c‹e_ª£t
(
sih
, 
bôs
, 
ª£tbôs
);

961 
	}
}

965 
	$si_c‹ebi°
(
si_t
 *
sih
)

967 
uöt32
 
cÊags
;

968 
ªsu…
 = 0;

971 
cÊags
 = 
	`si_c‹e_cÊags
(
sih
, 0, 0);

974 
	`si_c‹e_cÊags
(
sih
, ~0, (
SICF_BIST_EN
 | 
SICF_FGC
));

977 
	`SPINWAIT
(((
	`si_c‹e_sÊags
(
sih
, 0, 0Ë& 
SISF_BIST_DONE
) == 0), 100000);

979 i‡(
	`si_c‹e_sÊags
(
sih
, 0, 0Ë& 
SISF_BIST_ERROR
)

980 
ªsu…
 = 
BCME_ERROR
;

983 
	`si_c‹e_cÊags
(
sih
, 0xffff, 
cÊags
);

985  
ªsu…
;

986 
	}
}

988 
uöt32


989 
	$Á˘‹6
(
uöt32
 
x
)

991 
x
) {

992 
CC_F6_2
:  2;

993 
CC_F6_3
:  3;

994 
CC_F6_4
:  4;

995 
CC_F6_5
:  5;

996 
CC_F6_6
:  6;

997 
CC_F6_7
:  7;

1000 
	}
}

1003 
uöt32


1004 
	$si_˛ock_øã
(
uöt32
 
∂l_ty≥
, uöt32 
n
, uöt32 
m
)

1006 
uöt32
 
n1
, 
n2
, 
˛ock
, 
m1
, 
m2
, 
m3
, 
mc
;

1008 
n1
 = 
n
 & 
CN_N1_MASK
;

1009 
n2
 = (
n
 & 
CN_N2_MASK
Ë>> 
CN_N2_SHIFT
;

1011 i‡(
∂l_ty≥
 =
PLL_TYPE6
) {

1012 i‡(
m
 & 
CC_T6_MMASK
)

1013  
CC_T6_M1
;

1015  
CC_T6_M0
;

1016 } i‡((
∂l_ty≥
 =
PLL_TYPE1
) ||

1017 (
∂l_ty≥
 =
PLL_TYPE3
) ||

1018 (
∂l_ty≥
 =
PLL_TYPE4
) ||

1019 (
∂l_ty≥
 =
PLL_TYPE7
)) {

1020 
n1
 = 
	`Á˘‹6
(n1);

1021 
n2
 +
CC_F5_BIAS
;

1022 } i‡(
∂l_ty≥
 =
PLL_TYPE2
) {

1023 
n1
 +
CC_T2_BIAS
;

1024 
n2
 +
CC_T2_BIAS
;

1025 
	`ASSERT
((
n1
 >= 2) && (n1 <= 7));

1026 
	`ASSERT
((
n2
 >= 5) && (n2 <= 23));

1027 } i‡(
∂l_ty≥
 =
PLL_TYPE5
) {

1030 
	`ASSERT
(0);

1032 i‡((
∂l_ty≥
 =
PLL_TYPE3
) ||

1033 (
∂l_ty≥
 =
PLL_TYPE7
)) {

1034 
˛ock
 = 
CC_CLOCK_BASE2
 * 
n1
 * 
n2
;

1036 
˛ock
 = 
CC_CLOCK_BASE1
 * 
n1
 * 
n2
;

1038 i‡(
˛ock
 == 0)

1041 
m1
 = 
m
 & 
CC_M1_MASK
;

1042 
m2
 = (
m
 & 
CC_M2_MASK
Ë>> 
CC_M2_SHIFT
;

1043 
m3
 = (
m
 & 
CC_M3_MASK
Ë>> 
CC_M3_SHIFT
;

1044 
mc
 = (
m
 & 
CC_MC_MASK
Ë>> 
CC_MC_SHIFT
;

1046 i‡((
∂l_ty≥
 =
PLL_TYPE1
) ||

1047 (
∂l_ty≥
 =
PLL_TYPE3
) ||

1048 (
∂l_ty≥
 =
PLL_TYPE4
) ||

1049 (
∂l_ty≥
 =
PLL_TYPE7
)) {

1050 
m1
 = 
	`Á˘‹6
(m1);

1051 i‡((
∂l_ty≥
 =
PLL_TYPE1
Ë|| (∂l_ty≥ =
PLL_TYPE3
))

1052 
m2
 +
CC_F5_BIAS
;

1054 
m2
 = 
	`Á˘‹6
(m2);

1055 
m3
 = 
	`Á˘‹6
(m3);

1057 
mc
) {

1058 
CC_MC_BYPASS
:  (
˛ock
);

1059 
CC_MC_M1
:  (
˛ock
 / 
m1
);

1060 
CC_MC_M1M2
:  (
˛ock
 / (
m1
 * 
m2
));

1061 
CC_MC_M1M2M3
:  (
˛ock
 / (
m1
 * 
m2
 * 
m3
));

1062 
CC_MC_M1M3
:  (
˛ock
 / (
m1
 * 
m3
));

1066 
	`ASSERT
(
∂l_ty≥
 =
PLL_TYPE2
);

1068 
m1
 +
CC_T2_BIAS
;

1069 
m2
 +
CC_T2M2_BIAS
;

1070 
m3
 +
CC_T2_BIAS
;

1071 
	`ASSERT
((
m1
 >= 2) && (m1 <= 7));

1072 
	`ASSERT
((
m2
 >= 3) && (m2 <= 10));

1073 
	`ASSERT
((
m3
 >= 2) && (m3 <= 7));

1075 i‡((
mc
 & 
CC_T2MC_M1BYP
) == 0)

1076 
˛ock
 /
m1
;

1077 i‡((
mc
 & 
CC_T2MC_M2BYP
) == 0)

1078 
˛ock
 /
m2
;

1079 i‡((
mc
 & 
CC_T2MC_M3BYP
) == 0)

1080 
˛ock
 /
m3
;

1082  (
˛ock
);

1084 
	}
}

1089 
	$si_w©chdog
(
si_t
 *
sih
, 
uöt
 
ticks
)

1091 
uöt
 
nb
, 
maxt
;

1093 i‡(
	`PMUCTL_ENAB
(
sih
)) {

1095 i‡((
	`CHIPID
(
sih
->
chù
Ë=
BCM4319_CHIP_ID
) &&

1096 (
	`CHIPREV
(
sih
->
chùªv
Ë=0Ë&& (
ticks
 != 0)) {

1097 
	`si_c‹îeg
(
sih
, 
SI_CC_IDX
, 
	`OFFSETOF
(
chù¸egs_t
, 
˛k_˘l_°
), ~0, 0x2);

1098 
	`si_£tc‹e
(
sih
, 
USB20D_CORE_ID
, 0);

1099 
	`si_c‹e_dißbÀ
(
sih
, 1);

1100 
	`si_£tc‹e
(
sih
, 
CC_CORE_ID
, 0);

1103 
nb
 = (
sih
->
c¸ev
 < 26) ? 16 : ((sih->ccrev >= 37) ? 32 : 24);

1107 i‡(
nb
 == 32)

1108 
maxt
 = 0xffffffff;

1110 
maxt
 = ((1 << 
nb
) - 1);

1112 i‡(
ticks
 == 1)

1113 
ticks
 = 2;

1114 i‡(
ticks
 > 
maxt
)

1115 
ticks
 = 
maxt
;

1117 
	`si_c‹îeg
(
sih
, 
SI_CC_IDX
, 
	`OFFSETOF
(
chù¸egs_t
, 
pmuw©chdog
), ~0, 
ticks
);

1119 
maxt
 = (1 << 28) - 1;

1120 i‡(
ticks
 > 
maxt
)

1121 
ticks
 = 
maxt
;

1123 
	`si_c‹îeg
(
sih
, 
SI_CC_IDX
, 
	`OFFSETOF
(
chù¸egs_t
, 
w©chdog
), ~0, 
ticks
);

1125 
	}
}

1129 
	$si_w©chdog_ms
(
si_t
 *
sih
, 
uöt32
 
ms
)

1131 
	`si_w©chdog
(
sih
, 
wd_m°icks
 * 
ms
);

1132 
	}
}

1134 
uöt32
 
	$si_w©chdog_m°icks
()

1136  
wd_m°icks
;

1137 
	}
}

1139 
boﬁ


1140 
	$si_è˛ór
(
si_t
 *
sih
, 
boﬁ
 
dëaûs
)

1142  
FALSE
;

1143 
	}
}

1148 
uöt


1149 
	$si_¶ow˛k_§c
(
si_öfo_t
 *
sii
)

1151 
chù¸egs_t
 *
cc
;

1153 
	`ASSERT
(
	`SI_FAST
(
sii
Ë|| 
	`si_c‹eid
(&sii->
pub
Ë=
CC_CORE_ID
);

1155 i‡(
sii
->
pub
.
c¸ev
 < 6) {

1156 i‡((
	`BUSTYPE
(
sii
->
pub
.
bu°y≥
Ë=
PCI_BUS
) &&

1157 (
	`OSL_PCI_READ_CONFIG
(
sii
->
osh
, 
PCI_GPIO_OUT
, (
uöt32
)) &

1158 
PCI_CFG_GPIO_SCS
))

1159  (
SCC_SS_PCI
);

1161  (
SCC_SS_XTAL
);

1162 } i‡(
sii
->
pub
.
c¸ev
 < 10) {

1163 
cc
 = (
chù¸egs_t
 *)
	`si_£tc‹eidx
(&
sii
->
pub
, sii->
curidx
);

1164  (
	`R_REG
(
sii
->
osh
, &
cc
->
¶ow_˛k_˘l
Ë& 
SCC_SS_MASK
);

1166  (
SCC_SS_XTAL
);

1167 
	}
}

1170 
uöt


1171 
	$si_¶ow˛k_‰eq
(
si_öfo_t
 *
sii
, 
boﬁ
 
max_‰eq
, 
chù¸egs_t
 *
cc
)

1173 
uöt32
 
¶ow˛k
;

1174 
uöt
 
div
;

1176 
	`ASSERT
(
	`SI_FAST
(
sii
Ë|| 
	`si_c‹eid
(&sii->
pub
Ë=
CC_CORE_ID
);

1179 
	`ASSERT
(
	`R_REG
(
sii
->
osh
, &
cc
->
ˇ∑bûôõs
Ë& 
CC_CAP_PWR_CTL
);

1181 
¶ow˛k
 = 
	`si_¶ow˛k_§c
(
sii
);

1182 i‡(
sii
->
pub
.
c¸ev
 < 6) {

1183 i‡(
¶ow˛k
 =
SCC_SS_PCI
)

1184  (
max_‰eq
 ? (
PCIMAXFREQ
 / 64Ë: (
PCIMINFREQ
 / 64));

1186  (
max_‰eq
 ? (
XTALMAXFREQ
 / 32Ë: (
XTALMINFREQ
 / 32));

1187 } i‡(
sii
->
pub
.
c¸ev
 < 10) {

1188 
div
 = 4 *

1189 (((
	`R_REG
(
sii
->
osh
, &
cc
->
¶ow_˛k_˘l
Ë& 
SCC_CD_MASK
Ë>> 
SCC_CD_SHIFT
) + 1);

1190 i‡(
¶ow˛k
 =
SCC_SS_LPO
)

1191  (
max_‰eq
 ? 
LPOMAXFREQ
 : 
LPOMINFREQ
);

1192 i‡(
¶ow˛k
 =
SCC_SS_XTAL
)

1193  (
max_‰eq
 ? (
XTALMAXFREQ
 / 
div
Ë: (
XTALMINFREQ
 / div));

1194 i‡(
¶ow˛k
 =
SCC_SS_PCI
)

1195  (
max_‰eq
 ? (
PCIMAXFREQ
 / 
div
Ë: (
PCIMINFREQ
 / div));

1197 
	`ASSERT
(0);

1200 
div
 = 
	`R_REG
(
sii
->
osh
, &
cc
->
sy°em_˛k_˘l
Ë>> 
SYCC_CD_SHIFT
;

1201 
div
 = 4 * (div + 1);

1202  (
max_‰eq
 ? 
XTALMAXFREQ
 : (
XTALMINFREQ
 / 
div
));

1205 
	}
}

1208 
	$si_˛k˘l_£tdñay
(
si_öfo_t
 *
sii
, *
chù¸egs
)

1210 
chù¸egs_t
 *
cc
 = (chù¸egs_à*)
chù¸egs
;

1211 
uöt
 
¶owmax‰eq
, 
∂l_dñay
, 
¶ow˛k
;

1212 
uöt
 
∂l_⁄_dñay
, 
‰ef_£l_dñay
;

1214 
∂l_dñay
 = 
PLL_DELAY
;

1220 
¶ow˛k
 = 
	`si_¶ow˛k_§c
(
sii
);

1221 i‡(
¶ow˛k
 !
SCC_SS_XTAL
)

1222 
∂l_dñay
 +
XTAL_ON_DELAY
;

1225 
¶owmax‰eq
 = 
	`si_¶ow˛k_‰eq
(
sii
, (sii->
pub
.
c¸ev
 >10Ë? 
FALSE
 : 
TRUE
, 
cc
);

1227 
∂l_⁄_dñay
 = ((
¶owmax‰eq
 * 
∂l_dñay
) + 999999) / 1000000;

1228 
‰ef_£l_dñay
 = ((
¶owmax‰eq
 * 
FREF_DELAY
) + 999999) / 1000000;

1230 
	`W_REG
(
sii
->
osh
, &
cc
->
∂l_⁄_dñay
,Öll_on_delay);

1231 
	`W_REG
(
sii
->
osh
, &
cc
->
‰ef_£l_dñay
, fref_sel_delay);

1232 
	}
}

1236 
	$si_˛k˘l_öô
(
si_t
 *
sih
)

1238 
si_öfo_t
 *
sii
;

1239 
uöt
 
‹igidx
 = 0;

1240 
chù¸egs_t
 *
cc
;

1241 
boﬁ
 
Á°
;

1243 i‡(!
	`CCCTL_ENAB
(
sih
))

1246 
sii
 = 
	`SI_INFO
(
sih
);

1247 
Á°
 = 
	`SI_FAST
(
sii
);

1248 i‡(!
Á°
) {

1249 
‹igidx
 = 
sii
->
curidx
;

1250 i‡((
cc
 = (
chù¸egs_t
 *)
	`si_£tc‹e
(
sih
, 
CC_CORE_ID
, 0)Ë=
NULL
)

1252 } i‡((
cc
 = (
chù¸egs_t
 *)
	`CCREGS_FAST
(
sii
)Ë=
NULL
)

1254 
	`ASSERT
(
cc
 !
NULL
);

1257 i‡(
sih
->
c¸ev
 >= 10)

1258 
	`SET_REG
(
sii
->
osh
, &
cc
->
sy°em_˛k_˘l
, 
SYCC_CD_MASK
,

1259 (
ILP_DIV_1MHZ
 << 
SYCC_CD_SHIFT
));

1261 
	`si_˛k˘l_£tdñay
(
sii
, (*)(
uöçå
)
cc
);

1263 i‡(!
Á°
)

1264 
	`si_£tc‹eidx
(
sih
, 
‹igidx
);

1265 
	}
}

1270 
	$si_gpio£tc‹e
(
si_t
 *
sih
)

1272  (
	`si_£tc‹eidx
(
sih
, 
SI_CC_IDX
));

1273 
	}
}

1281 
uöt32


1282 
	$si_gpioc⁄åﬁ
(
si_t
 *
sih
, 
uöt32
 
mask
, uöt32 
vÆ
, 
uöt8
 
¥i‹ôy
)

1284 
uöt
 
ªgoff
;

1286 
ªgoff
 = 0;

1291 i‡((
¥i‹ôy
 !
GPIO_HI_PRIORITY
) &&

1292 (
	`BUSTYPE
(
sih
->
bu°y≥
Ë=
SI_BUS
Ë&& (
vÆ
 || 
mask
)) {

1293 
mask
 = 
¥i‹ôy
 ? (
si_gpi‹e£rv©i⁄
 & mask) :

1294 ((
si_gpi‹e£rv©i⁄
 | 
mask
) & ~(si_gpioreservation));

1295 
vÆ
 &
mask
;

1298 
ªgoff
 = 
	`OFFSETOF
(
chù¸egs_t
, 
gpioc⁄åﬁ
);

1299  (
	`si_c‹îeg
(
sih
, 
SI_CC_IDX
, 
ªgoff
, 
mask
, 
vÆ
));

1300 
	}
}

1303 
uöt32


1304 
	$si_gpioouãn
(
si_t
 *
sih
, 
uöt32
 
mask
, uöt32 
vÆ
, 
uöt8
 
¥i‹ôy
)

1306 
uöt
 
ªgoff
;

1308 
ªgoff
 = 0;

1313 i‡((
¥i‹ôy
 !
GPIO_HI_PRIORITY
) &&

1314 (
	`BUSTYPE
(
sih
->
bu°y≥
Ë=
SI_BUS
Ë&& (
vÆ
 || 
mask
)) {

1315 
mask
 = 
¥i‹ôy
 ? (
si_gpi‹e£rv©i⁄
 & mask) :

1316 ((
si_gpi‹e£rv©i⁄
 | 
mask
) & ~(si_gpioreservation));

1317 
vÆ
 &
mask
;

1320 
ªgoff
 = 
	`OFFSETOF
(
chù¸egs_t
, 
gpioouãn
);

1321  (
	`si_c‹îeg
(
sih
, 
SI_CC_IDX
, 
ªgoff
, 
mask
, 
vÆ
));

1322 
	}
}

1325 
uöt32


1326 
	$si_gpioout
(
si_t
 *
sih
, 
uöt32
 
mask
, uöt32 
vÆ
, 
uöt8
 
¥i‹ôy
)

1328 
uöt
 
ªgoff
;

1330 
ªgoff
 = 0;

1335 i‡((
¥i‹ôy
 !
GPIO_HI_PRIORITY
) &&

1336 (
	`BUSTYPE
(
sih
->
bu°y≥
Ë=
SI_BUS
Ë&& (
vÆ
 || 
mask
)) {

1337 
mask
 = 
¥i‹ôy
 ? (
si_gpi‹e£rv©i⁄
 & mask) :

1338 ((
si_gpi‹e£rv©i⁄
 | 
mask
) & ~(si_gpioreservation));

1339 
vÆ
 &
mask
;

1342 
ªgoff
 = 
	`OFFSETOF
(
chù¸egs_t
, 
gpioout
);

1343  (
	`si_c‹îeg
(
sih
, 
SI_CC_IDX
, 
ªgoff
, 
mask
, 
vÆ
));

1344 
	}
}

1347 
uöt32


1348 
	$si_gpi‹e£rve
(
si_t
 *
sih
, 
uöt32
 
gpio_bômask
, 
uöt8
 
¥i‹ôy
)

1353 i‡((
	`BUSTYPE
(
sih
->
bu°y≥
Ë!
SI_BUS
Ë|| (!
¥i‹ôy
)) {

1354 
	`ASSERT
((
	`BUSTYPE
(
sih
->
bu°y≥
Ë=
SI_BUS
Ë&& (
¥i‹ôy
));

1358 i‡((!
gpio_bômask
) || ((gpio_bitmask) & (gpio_bitmask - 1))) {

1359 
	`ASSERT
((
gpio_bômask
) && !((gpio_bitmask) & (gpio_bitmask - 1)));

1364 i‡(
si_gpi‹e£rv©i⁄
 & 
gpio_bômask
)

1367 
si_gpi‹e£rv©i⁄
 |
gpio_bômask
;

1369  
si_gpi‹e£rv©i⁄
;

1370 
	}
}

1378 
uöt32


1379 
	$si_gpi‹ñó£
(
si_t
 *
sih
, 
uöt32
 
gpio_bômask
, 
uöt8
 
¥i‹ôy
)

1384 i‡((
	`BUSTYPE
(
sih
->
bu°y≥
Ë!
SI_BUS
Ë|| (!
¥i‹ôy
)) {

1385 
	`ASSERT
((
	`BUSTYPE
(
sih
->
bu°y≥
Ë=
SI_BUS
Ë&& (
¥i‹ôy
));

1389 i‡((!
gpio_bômask
) || ((gpio_bitmask) & (gpio_bitmask - 1))) {

1390 
	`ASSERT
((
gpio_bômask
) && !((gpio_bitmask) & (gpio_bitmask - 1)));

1395 i‡(!(
si_gpi‹e£rv©i⁄
 & 
gpio_bômask
))

1399 
si_gpi‹e£rv©i⁄
 &~
gpio_bômask
;

1401  
si_gpi‹e£rv©i⁄
;

1402 
	}
}

1405 
uöt32


1406 
	$si_gpioö
(
si_t
 *
sih
)

1408 
uöt
 
ªgoff
;

1410 
ªgoff
 = 
	`OFFSETOF
(
chù¸egs_t
, 
gpioö
);

1411  (
	`si_c‹îeg
(
sih
, 
SI_CC_IDX
, 
ªgoff
, 0, 0));

1412 
	}
}

1415 
uöt32


1416 
	$si_gpioöçﬁ¨ôy
(
si_t
 *
sih
, 
uöt32
 
mask
, uöt32 
vÆ
, 
uöt8
 
¥i‹ôy
)

1418 
uöt
 
ªgoff
;

1421 i‡((
	`BUSTYPE
(
sih
->
bu°y≥
Ë=
SI_BUS
Ë&& (
vÆ
 || 
mask
)) {

1422 
mask
 = 
¥i‹ôy
 ? (
si_gpi‹e£rv©i⁄
 & mask) :

1423 ((
si_gpi‹e£rv©i⁄
 | 
mask
) & ~(si_gpioreservation));

1424 
vÆ
 &
mask
;

1427 
ªgoff
 = 
	`OFFSETOF
(
chù¸egs_t
, 
gpioöçﬁ¨ôy
);

1428  (
	`si_c‹îeg
(
sih
, 
SI_CC_IDX
, 
ªgoff
, 
mask
, 
vÆ
));

1429 
	}
}

1432 
uöt32


1433 
	$si_gpioötmask
(
si_t
 *
sih
, 
uöt32
 
mask
, uöt32 
vÆ
, 
uöt8
 
¥i‹ôy
)

1435 
uöt
 
ªgoff
;

1438 i‡((
	`BUSTYPE
(
sih
->
bu°y≥
Ë=
SI_BUS
Ë&& (
vÆ
 || 
mask
)) {

1439 
mask
 = 
¥i‹ôy
 ? (
si_gpi‹e£rv©i⁄
 & mask) :

1440 ((
si_gpi‹e£rv©i⁄
 | 
mask
) & ~(si_gpioreservation));

1441 
vÆ
 &
mask
;

1444 
ªgoff
 = 
	`OFFSETOF
(
chù¸egs_t
, 
gpioötmask
);

1445  (
	`si_c‹îeg
(
sih
, 
SI_CC_IDX
, 
ªgoff
, 
mask
, 
vÆ
));

1446 
	}
}

1449 
uöt32


1450 
	$si_gpiﬁed
(
si_t
 *
sih
, 
uöt32
 
mask
, uöt32 
vÆ
)

1452 i‡(
sih
->
c¸ev
 < 16)

1456  (
	`si_c‹îeg
(
sih
, 
SI_CC_IDX
, 
	`OFFSETOF
(
chù¸egs_t
, 
gpiŸimîoutmask
), 
mask
, 
vÆ
));

1457 
	}
}

1460 
uöt32


1461 
	$si_gpiŸimîvÆ
(
si_t
 *
sih
, 
uöt32
 
mask
, uöt32 
gpiŸimîvÆ
)

1463 i‡(
sih
->
c¸ev
 < 16)

1466  (
	`si_c‹îeg
(
sih
, 
SI_CC_IDX
,

1467 
	`OFFSETOF
(
chù¸egs_t
, 
gpiŸimîvÆ
), 
mask
, gpiotimerval));

1468 
	}
}

1470 
uöt32


1471 
	$si_gpi›uŒ
(
si_t
 *
sih
, 
boﬁ
 
updown
, 
uöt32
 
mask
, uöt32 
vÆ
)

1473 
uöt
 
offs
;

1475 i‡(
sih
->
c¸ev
 < 20)

1478 
offs
 = (
updown
 ? 
	`OFFSETOF
(
chù¸egs_t
, 
gpi›uŒdown
Ë: OFFSETOF(chù¸egs_t, 
gpi›uŒup
));

1479  (
	`si_c‹îeg
(
sih
, 
SI_CC_IDX
, 
offs
, 
mask
, 
vÆ
));

1480 
	}
}

1482 
uöt32


1483 
	$si_gpi€vít
(
si_t
 *
sih
, 
uöt
 
ªgty≥
, 
uöt32
 
mask
, uöt32 
vÆ
)

1485 
uöt
 
offs
;

1487 i‡(
sih
->
c¸ev
 < 11)

1490 i‡(
ªgty≥
 =
GPIO_REGEVT
)

1491 
offs
 = 
	`OFFSETOF
(
chù¸egs_t
, 
gpi€vít
);

1492 i‡(
ªgty≥
 =
GPIO_REGEVT_INTMSK
)

1493 
offs
 = 
	`OFFSETOF
(
chù¸egs_t
, 
gpi€vítötmask
);

1494 i‡(
ªgty≥
 =
GPIO_REGEVT_INTPOL
)

1495 
offs
 = 
	`OFFSETOF
(
chù¸egs_t
, 
gpi€vítöçﬁ¨ôy
);

1499  (
	`si_c‹îeg
(
sih
, 
SI_CC_IDX
, 
offs
, 
mask
, 
vÆ
));

1500 
	}
}

1503 
	$si_gpio_h™dÀr_ªgi°î
(
si_t
 *
sih
, 
uöt32
 
evít
,

1504 
boﬁ
 
Àvñ
, 
gpio_h™dÀr_t
 
cb
, *
¨g
)

1506 
si_öfo_t
 *
sii
;

1507 
gpioh_ôem_t
 *
gi
;

1509 
	`ASSERT
(
evít
);

1510 
	`ASSERT
(
cb
 !
NULL
);

1512 
sii
 = 
	`SI_INFO
(
sih
);

1513 i‡(
sih
->
c¸ev
 < 11)

1514  
NULL
;

1516 i‡((
gi
 = 
	`MALLOC
(
sii
->
osh
, (
gpioh_ôem_t
))Ë=
NULL
)

1517  
NULL
;

1519 
	`bzîo
(
gi
, (
gpioh_ôem_t
));

1520 
gi
->
evít
 =Évent;

1521 
gi
->
h™dÀr
 = 
cb
;

1522 
gi
->
¨g
 =árg;

1523 
gi
->
Àvñ
 =Üevel;

1525 
gi
->
√xt
 = 
sii
->
gpioh_hód
;

1526 
sii
->
gpioh_hód
 = 
gi
;

1528  (*)(
gi
);

1529 
	}
}

1532 
	$si_gpio_h™dÀr_uƒegi°î
(
si_t
 *
sih
, *
gpioh
)

1534 
si_öfo_t
 *
sii
;

1535 
gpioh_ôem_t
 *
p
, *
n
;

1537 
sii
 = 
	`SI_INFO
(
sih
);

1538 i‡(
sih
->
c¸ev
 < 11)

1541 
	`ASSERT
(
sii
->
gpioh_hód
 !
NULL
);

1542 i‡((*)
sii
->
gpioh_hód
 =
gpioh
) {

1543 
sii
->
gpioh_hód
 = sii->gpioh_hód->
√xt
;

1544 
	`MFREE
(
sii
->
osh
, 
gpioh
, (
gpioh_ôem_t
));

1547 
p
 = 
sii
->
gpioh_hód
;

1548 
n
 = 
p
->
√xt
;

1549 
n
) {

1550 i‡((*)
n
 =
gpioh
) {

1551 
p
->
√xt
 = 
n
->next;

1552 
	`MFREE
(
sii
->
osh
, 
gpioh
, (
gpioh_ôem_t
));

1555 
p
 = 
n
;

1556 
n
 =Ç->
√xt
;

1560 
	`ASSERT
(0);

1561 
	}
}

1564 
	$si_gpio_h™dÀr_¥o˚ss
(
si_t
 *
sih
)

1566 
si_öfo_t
 *
sii
;

1567 
gpioh_ôem_t
 *
h
;

1568 
uöt32
 
Àvñ
 = 
	`si_gpioö
(
sih
);

1569 
uöt32
 
Àvñp
 = 
	`si_gpioöçﬁ¨ôy
(
sih
, 0, 0, 0);

1570 
uöt32
 
edge
 = 
	`si_gpi€vít
(
sih
, 
GPIO_REGEVT
, 0, 0);

1571 
uöt32
 
edgï
 = 
	`si_gpi€vít
(
sih
, 
GPIO_REGEVT_INTPOL
, 0, 0);

1573 
sii
 = 
	`SI_INFO
(
sih
);

1574 
h
 = 
sii
->
gpioh_hód
; h !
NULL
; h = h->
√xt
) {

1575 i‡(
h
->
h™dÀr
) {

1576 
uöt32
 
°©us
 = (
h
->
Àvñ
 ?Üevñ : 
edge
Ë& h->
evít
;

1577 
uöt32
 
pﬁ¨ôy
 = (
h
->
Àvñ
 ? 
Àvñp
 : 
edgï
Ë& h->
evít
;

1580 i‡(
°©us
 ^ 
pﬁ¨ôy
)

1581 
h
->
	`h™dÀr
(
°©us
, h->
¨g
);

1585 
	`si_gpi€vít
(
sih
, 
GPIO_REGEVT
, 
edge
,Édge);

1586 
	}
}

1588 
uöt32


1589 
	$si_gpio_öt_íabÀ
(
si_t
 *
sih
, 
boﬁ
 
íabÀ
)

1591 
uöt
 
offs
;

1593 i‡(
sih
->
c¸ev
 < 11)

1596 
offs
 = 
	`OFFSETOF
(
chù¸egs_t
, 
ötmask
);

1597  (
	`si_c‹îeg
(
sih
, 
SI_CC_IDX
, 
offs
, 
CI_GPIO
, (
íabÀ
 ? CI_GPIO : 0)));

1598 
	}
}

1602 
uöt


1603 
	$so¸am_b™ksize
(
si_öfo_t
 *
sii
, 
sbso¸amªgs_t
 *
ªgs
, 
uöt8
 
idx
, uöt8 
mem_ty≥
)

1605 
uöt
 
b™ksize
, 
b™köfo
;

1606 
uöt
 
b™kidx
 = 
idx
 | (
mem_ty≥
 << 
SOCRAM_BANKIDX_MEMTYPE_SHIFT
);

1608 
	`ASSERT
(
mem_ty≥
 <
SOCRAM_MEMTYPE_DEVRAM
);

1610 
	`W_REG
(
sii
->
osh
, &
ªgs
->
b™kidx
, bankidx);

1611 
b™köfo
 = 
	`R_REG
(
sii
->
osh
, &
ªgs
->bankinfo);

1612 
b™ksize
 = 
SOCRAM_BANKINFO_SZBASE
 * ((
b™köfo
 & 
SOCRAM_BANKINFO_SZMASK
) + 1);

1613  
b™ksize
;

1614 
	}
}

1617 
	$si_socdevøm
(
si_t
 *
sih
, 
boﬁ
 
£t
, 
uöt8
 *
íabÀ
, uöt8 *
¥Ÿe˘
, uöt8 *
ªm≠
)

1619 
si_öfo_t
 *
sii
;

1620 
uöt
 
‹igidx
;

1621 
uöt
 
öå_vÆ
 = 0;

1622 
sbso¸amªgs_t
 *
ªgs
;

1623 
boﬁ
 
wasup
;

1624 
uöt
 
c‹îev
;

1626 
sii
 = 
	`SI_INFO
(
sih
);

1629 
	`INTR_OFF
(
sii
, 
öå_vÆ
);

1630 
‹igidx
 = 
	`si_c‹eidx
(
sih
);

1632 i‡(!
£t
)

1633 *
íabÀ
 = *
¥Ÿe˘
 = *
ªm≠
 = 0;

1636 i‡(!(
ªgs
 = 
	`si_£tc‹e
(
sih
, 
SOCRAM_CORE_ID
, 0)))

1637 
d⁄e
;

1640 i‡(!(
wasup
 = 
	`si_isc‹eup
(
sih
)))

1641 
	`si_c‹e_ª£t
(
sih
, 0, 0);

1643 
c‹îev
 = 
	`si_c‹îev
(
sih
);

1644 i‡(
c‹îev
 >= 10) {

1645 
uöt32
 
extcöfo
;

1646 
uöt8
 
nb
;

1647 
uöt8
 
i
;

1648 
uöt32
 
b™kidx
, 
b™köfo
;

1650 
extcöfo
 = 
	`R_REG
(
sii
->
osh
, &
ªgs
->
exåac‹eöfo
);

1651 
nb
 = ((
extcöfo
 & 
SOCRAM_DEVRAMBANK_MASK
Ë>> 
SOCRAM_DEVRAMBANK_SHIFT
);

1652 
i
 = 0; i < 
nb
; i++) {

1653 
b™kidx
 = 
i
 | (
SOCRAM_MEMTYPE_DEVRAM
 << 
SOCRAM_BANKIDX_MEMTYPE_SHIFT
);

1654 
	`W_REG
(
sii
->
osh
, &
ªgs
->
b™kidx
, bankidx);

1655 
b™köfo
 = 
	`R_REG
(
sii
->
osh
, &
ªgs
->bankinfo);

1656 i‡(
£t
) {

1657 
b™köfo
 &~
SOCRAM_BANKINFO_DEVRAMSEL_MASK
;

1658 
b™köfo
 &~
SOCRAM_BANKINFO_DEVRAMPRO_MASK
;

1659 
b™köfo
 &~
SOCRAM_BANKINFO_DEVRAMREMAP_MASK
;

1660 i‡(*
íabÀ
) {

1661 
b™köfo
 |(1 << 
SOCRAM_BANKINFO_DEVRAMSEL_SHIFT
);

1662 i‡(*
¥Ÿe˘
)

1663 
b™köfo
 |(1 << 
SOCRAM_BANKINFO_DEVRAMPRO_SHIFT
);

1664 i‡((
c‹îev
 >16Ë&& *
ªm≠
)

1665 
b™köfo
 |=

1666 (1 << 
SOCRAM_BANKINFO_DEVRAMREMAP_SHIFT
);

1668 
	`W_REG
(
sii
->
osh
, &
ªgs
->
b™köfo
, bankinfo);

1670 i‡(
i
 == 0) {

1671 i‡(
b™köfo
 & 
SOCRAM_BANKINFO_DEVRAMSEL_MASK
) {

1672 *
íabÀ
 = 1;

1673 i‡(
b™köfo
 & 
SOCRAM_BANKINFO_DEVRAMPRO_MASK
)

1674 *
¥Ÿe˘
 = 1;

1675 i‡(
b™köfo
 & 
SOCRAM_BANKINFO_DEVRAMREMAP_MASK
)

1676 *
ªm≠
 = 1;

1683 i‡(!
wasup
)

1684 
	`si_c‹e_dißbÀ
(
sih
, 0);

1685 
	`si_£tc‹eidx
(
sih
, 
‹igidx
);

1687 
d⁄e
:

1688 
	`INTR_RESTORE
(
sii
, 
öå_vÆ
);

1689 
	}
}

1691 
boﬁ


1692 
	$si_socdevøm_ªm≠_i£nb
(
si_t
 *
sih
)

1694 
si_öfo_t
 *
sii
;

1695 
uöt
 
‹igidx
;

1696 
uöt
 
öå_vÆ
 = 0;

1697 
sbso¸amªgs_t
 *
ªgs
;

1698 
boﬁ
 
wasup
, 
ªm≠
 = 
FALSE
;

1699 
uöt
 
c‹îev
;

1700 
uöt32
 
extcöfo
;

1701 
uöt8
 
nb
;

1702 
uöt8
 
i
;

1703 
uöt32
 
b™kidx
, 
b™köfo
;

1705 
sii
 = 
	`SI_INFO
(
sih
);

1708 
	`INTR_OFF
(
sii
, 
öå_vÆ
);

1709 
‹igidx
 = 
	`si_c‹eidx
(
sih
);

1712 i‡(!(
ªgs
 = 
	`si_£tc‹e
(
sih
, 
SOCRAM_CORE_ID
, 0)))

1713 
d⁄e
;

1716 i‡(!(
wasup
 = 
	`si_isc‹eup
(
sih
)))

1717 
	`si_c‹e_ª£t
(
sih
, 0, 0);

1719 
c‹îev
 = 
	`si_c‹îev
(
sih
);

1720 i‡(
c‹îev
 >= 16) {

1721 
extcöfo
 = 
	`R_REG
(
sii
->
osh
, &
ªgs
->
exåac‹eöfo
);

1722 
nb
 = ((
extcöfo
 & 
SOCRAM_DEVRAMBANK_MASK
Ë>> 
SOCRAM_DEVRAMBANK_SHIFT
);

1723 
i
 = 0; i < 
nb
; i++) {

1724 
b™kidx
 = 
i
 | (
SOCRAM_MEMTYPE_DEVRAM
 << 
SOCRAM_BANKIDX_MEMTYPE_SHIFT
);

1725 
	`W_REG
(
sii
->
osh
, &
ªgs
->
b™kidx
, bankidx);

1726 
b™köfo
 = 
	`R_REG
(
sii
->
osh
, &
ªgs
->bankinfo);

1727 i‡(
b™köfo
 & 
SOCRAM_BANKINFO_DEVRAMREMAP_MASK
) {

1728 
ªm≠
 = 
TRUE
;

1735 i‡(!
wasup
)

1736 
	`si_c‹e_dißbÀ
(
sih
, 0);

1737 
	`si_£tc‹eidx
(
sih
, 
‹igidx
);

1739 
d⁄e
:

1740 
	`INTR_RESTORE
(
sii
, 
öå_vÆ
);

1741  
ªm≠
;

1742 
	}
}

1744 
boﬁ


1745 
	$si_socdevøm_pkg
(
si_t
 *
sih
)

1747 i‡(
	`si_socdevøm_size
(
sih
) > 0)

1748  
TRUE
;

1750  
FALSE
;

1751 
	}
}

1753 
uöt32


1754 
	$si_socdevøm_size
(
si_t
 *
sih
)

1756 
si_öfo_t
 *
sii
;

1757 
uöt
 
‹igidx
;

1758 
uöt
 
öå_vÆ
 = 0;

1759 
uöt32
 
memsize
 = 0;

1760 
sbso¸amªgs_t
 *
ªgs
;

1761 
boﬁ
 
wasup
;

1762 
uöt
 
c‹îev
;

1764 
sii
 = 
	`SI_INFO
(
sih
);

1767 
	`INTR_OFF
(
sii
, 
öå_vÆ
);

1768 
‹igidx
 = 
	`si_c‹eidx
(
sih
);

1771 i‡(!(
ªgs
 = 
	`si_£tc‹e
(
sih
, 
SOCRAM_CORE_ID
, 0)))

1772 
d⁄e
;

1775 i‡(!(
wasup
 = 
	`si_isc‹eup
(
sih
)))

1776 
	`si_c‹e_ª£t
(
sih
, 0, 0);

1778 
c‹îev
 = 
	`si_c‹îev
(
sih
);

1779 i‡(
c‹îev
 >= 10) {

1780 
uöt32
 
extcöfo
;

1781 
uöt8
 
nb
;

1782 
uöt8
 
i
;

1784 
extcöfo
 = 
	`R_REG
(
sii
->
osh
, &
ªgs
->
exåac‹eöfo
);

1785 
nb
 = (((
extcöfo
 & 
SOCRAM_DEVRAMBANK_MASK
Ë>> 
SOCRAM_DEVRAMBANK_SHIFT
));

1786 
i
 = 0; i < 
nb
; i++)

1787 
memsize
 +
	`so¸am_b™ksize
(
sii
, 
ªgs
, 
i
, 
SOCRAM_MEMTYPE_DEVRAM
);

1791 i‡(!
wasup
)

1792 
	`si_c‹e_dißbÀ
(
sih
, 0);

1793 
	`si_£tc‹eidx
(
sih
, 
‹igidx
);

1795 
d⁄e
:

1796 
	`INTR_RESTORE
(
sii
, 
öå_vÆ
);

1798  
memsize
;

1799 
	}
}

1801 
uöt32


1802 
	$si_socdevøm_ªm≠_size
(
si_t
 *
sih
)

1804 
si_öfo_t
 *
sii
;

1805 
uöt
 
‹igidx
;

1806 
uöt
 
öå_vÆ
 = 0;

1807 
uöt32
 
memsize
 = 0, 
b™ksz
;

1808 
sbso¸amªgs_t
 *
ªgs
;

1809 
boﬁ
 
wasup
;

1810 
uöt
 
c‹îev
;

1811 
uöt32
 
extcöfo
;

1812 
uöt8
 
nb
;

1813 
uöt8
 
i
;

1814 
uöt32
 
b™kidx
, 
b™köfo
;

1816 
sii
 = 
	`SI_INFO
(
sih
);

1819 
	`INTR_OFF
(
sii
, 
öå_vÆ
);

1820 
‹igidx
 = 
	`si_c‹eidx
(
sih
);

1823 i‡(!(
ªgs
 = 
	`si_£tc‹e
(
sih
, 
SOCRAM_CORE_ID
, 0)))

1824 
d⁄e
;

1827 i‡(!(
wasup
 = 
	`si_isc‹eup
(
sih
)))

1828 
	`si_c‹e_ª£t
(
sih
, 0, 0);

1830 
c‹îev
 = 
	`si_c‹îev
(
sih
);

1831 i‡(
c‹îev
 >= 16) {

1832 
extcöfo
 = 
	`R_REG
(
sii
->
osh
, &
ªgs
->
exåac‹eöfo
);

1833 
nb
 = (((
extcöfo
 & 
SOCRAM_DEVRAMBANK_MASK
Ë>> 
SOCRAM_DEVRAMBANK_SHIFT
));

1839 i‡((
c‹îev
 =16Ë&& (
nb
 == 5))

1840 
nb
 = 4;

1842 
i
 = 0; i < 
nb
; i++) {

1843 
b™kidx
 = 
i
 | (
SOCRAM_MEMTYPE_DEVRAM
 << 
SOCRAM_BANKIDX_MEMTYPE_SHIFT
);

1844 
	`W_REG
(
sii
->
osh
, &
ªgs
->
b™kidx
, bankidx);

1845 
b™köfo
 = 
	`R_REG
(
sii
->
osh
, &
ªgs
->bankinfo);

1846 i‡(
b™köfo
 & 
SOCRAM_BANKINFO_DEVRAMREMAP_MASK
) {

1847 
b™ksz
 = 
	`so¸am_b™ksize
(
sii
, 
ªgs
, 
i
, 
SOCRAM_MEMTYPE_DEVRAM
);

1848 
memsize
 +
b™ksz
;

1857 i‡(!
wasup
)

1858 
	`si_c‹e_dißbÀ
(
sih
, 0);

1859 
	`si_£tc‹eidx
(
sih
, 
‹igidx
);

1861 
d⁄e
:

1862 
	`INTR_RESTORE
(
sii
, 
öå_vÆ
);

1864  
memsize
;

1865 
	}
}

1868 
uöt32


1869 
	$si_so¸am_size
(
si_t
 *
sih
)

1871 
si_öfo_t
 *
sii
;

1872 
uöt
 
‹igidx
;

1873 
uöt
 
öå_vÆ
 = 0;

1875 
sbso¸amªgs_t
 *
ªgs
;

1876 
boﬁ
 
wasup
;

1877 
uöt
 
c‹îev
;

1878 
uöt32
 
c‹eöfo
;

1879 
uöt
 
memsize
 = 0;

1881 
sii
 = 
	`SI_INFO
(
sih
);

1884 
	`INTR_OFF
(
sii
, 
öå_vÆ
);

1885 
‹igidx
 = 
	`si_c‹eidx
(
sih
);

1888 i‡(!(
ªgs
 = 
	`si_£tc‹e
(
sih
, 
SOCRAM_CORE_ID
, 0)))

1889 
d⁄e
;

1892 i‡(!(
wasup
 = 
	`si_isc‹eup
(
sih
)))

1893 
	`si_c‹e_ª£t
(
sih
, 0, 0);

1894 
c‹îev
 = 
	`si_c‹îev
(
sih
);

1895 
c‹eöfo
 = 
	`R_REG
(
sii
->
osh
, &
ªgs
->coreinfo);

1898 i‡(
c‹îev
 == 0)

1899 
memsize
 = 1 << (16 + (
c‹eöfo
 & 
SRCI_MS0_MASK
));

1900 i‡(
c‹îev
 < 3) {

1901 
memsize
 = 1 << (
SR_BSZ_BASE
 + (
c‹eöfo
 & 
SRCI_SRBSZ_MASK
));

1902 
memsize
 *(
c‹eöfo
 & 
SRCI_SRNB_MASK
Ë>> 
SRCI_SRNB_SHIFT
;

1903 } i‡((
c‹îev
 <= 7) || (corerev == 12)) {

1904 
uöt
 
nb
 = (
c‹eöfo
 & 
SRCI_SRNB_MASK
Ë>> 
SRCI_SRNB_SHIFT
;

1905 
uöt
 
bsz
 = (
c‹eöfo
 & 
SRCI_SRBSZ_MASK
);

1906 
uöt
 
lss
 = (
c‹eöfo
 & 
SRCI_LSS_MASK
Ë>> 
SRCI_LSS_SHIFT
;

1907 i‡(
lss
 != 0)

1908 
nb
 --;

1909 
memsize
 = 
nb
 * (1 << (
bsz
 + 
SR_BSZ_BASE
));

1910 i‡(
lss
 != 0)

1911 
memsize
 +(1 << ((
lss
 - 1Ë+ 
SR_BSZ_BASE
));

1913 
uöt8
 
i
;

1914 
uöt
 
nb
 = (
c‹eöfo
 & 
SRCI_SRNB_MASK
Ë>> 
SRCI_SRNB_SHIFT
;

1915 
i
 = 0; i < 
nb
; i++)

1916 
memsize
 +
	`so¸am_b™ksize
(
sii
, 
ªgs
, 
i
, 
SOCRAM_MEMTYPE_RAM
);

1920 i‡(!
wasup
)

1921 
	`si_c‹e_dißbÀ
(
sih
, 0);

1922 
	`si_£tc‹eidx
(
sih
, 
‹igidx
);

1924 
d⁄e
:

1925 
	`INTR_RESTORE
(
sii
, 
öå_vÆ
);

1927  
memsize
;

1928 
	}
}

1932 
uöt32


1933 
	$si_tcm_size
(
si_t
 *
sih
)

1935 
si_öfo_t
 *
sii
;

1936 
uöt
 
‹igidx
;

1937 
uöt
 
öå_vÆ
 = 0;

1938 
uöt8
 *
ªgs
;

1939 
boﬁ
 
wasup
;

1940 
uöt32
 
c‹eˇp
;

1941 
uöt
 
memsize
 = 0;

1942 
uöt32
 
«b
 = 0;

1943 
uöt32
 
nbb
 = 0;

1944 
uöt32
 
tŸb
 = 0;

1945 
uöt32
 
bxöfo
 = 0;

1946 
uöt32
 
idx
 = 0;

1947 
uöt32
 *
¨m_ˇp_ªg
;

1948 
uöt32
 *
¨m_bidx
;

1949 
uöt32
 *
¨m_böfo
;

1951 
sii
 = 
	`SI_INFO
(
sih
);

1954 
	`INTR_OFF
(
sii
, 
öå_vÆ
);

1955 
‹igidx
 = 
	`si_c‹eidx
(
sih
);

1958 i‡(!(
ªgs
 = 
	`si_£tc‹e
(
sih
, 
ARMCR4_CORE_ID
, 0)))

1959 
d⁄e
;

1964 i‡(!(
wasup
 = 
	`si_isc‹eup
(
sih
)))

1965 
	`si_c‹e_ª£t
(
sih
, 
SICF_CPUHALT
, SICF_CPUHALT);

1967 
¨m_ˇp_ªg
 = (
uöt32
 *)(
ªgs
 + 
SI_CR4_CAP
);

1968 
c‹eˇp
 = 
	`R_REG
(
sii
->
osh
, 
¨m_ˇp_ªg
);

1970 
«b
 = (
c‹eˇp
 & 
ARMCR4_TCBANB_MASK
Ë>> 
ARMCR4_TCBANB_SHIFT
;

1971 
nbb
 = (
c‹eˇp
 & 
ARMCR4_TCBBNB_MASK
Ë>> 
ARMCR4_TCBBNB_SHIFT
;

1972 
tŸb
 = 
«b
 + 
nbb
;

1974 
¨m_bidx
 = (
uöt32
 *)(
ªgs
 + 
SI_CR4_BANKIDX
);

1975 
¨m_böfo
 = (
uöt32
 *)(
ªgs
 + 
SI_CR4_BANKINFO
);

1976 
idx
 = 0; idx < 
tŸb
; idx++) {

1977 
	`W_REG
(
sii
->
osh
, 
¨m_bidx
, 
idx
);

1979 
bxöfo
 = 
	`R_REG
(
sii
->
osh
, 
¨m_böfo
);

1980 
memsize
 +((
bxöfo
 & 
ARMCR4_BSZ_MASK
Ë+ 1Ë* 
ARMCR4_BSZ_MULT
;

1984 i‡(!
wasup
)

1985 
	`si_c‹e_dißbÀ
(
sih
, 0);

1986 
	`si_£tc‹eidx
(
sih
, 
‹igidx
);

1988 
d⁄e
:

1989 
	`INTR_RESTORE
(
sii
, 
öå_vÆ
);

1991  
memsize
;

1992 
	}
}

1994 
uöt32


1995 
	$si_so¸am_§mem_size
(
si_t
 *
sih
)

1997 
si_öfo_t
 *
sii
;

1998 
uöt
 
‹igidx
;

1999 
uöt
 
öå_vÆ
 = 0;

2001 
sbso¸amªgs_t
 *
ªgs
;

2002 
boﬁ
 
wasup
;

2003 
uöt
 
c‹îev
;

2004 
uöt32
 
c‹eöfo
;

2005 
uöt
 
memsize
 = 0;

2007 i‡((
	`CHIPID
(
sih
->
chù
Ë=
BCM4334_CHIP_ID
Ë&& (
	`CHIPREV
(sih->
chùªv
) < 2)) {

2011 
sii
 = 
	`SI_INFO
(
sih
);

2014 
	`INTR_OFF
(
sii
, 
öå_vÆ
);

2015 
‹igidx
 = 
	`si_c‹eidx
(
sih
);

2018 i‡(!(
ªgs
 = 
	`si_£tc‹e
(
sih
, 
SOCRAM_CORE_ID
, 0)))

2019 
d⁄e
;

2022 i‡(!(
wasup
 = 
	`si_isc‹eup
(
sih
)))

2023 
	`si_c‹e_ª£t
(
sih
, 0, 0);

2024 
c‹îev
 = 
	`si_c‹îev
(
sih
);

2025 
c‹eöfo
 = 
	`R_REG
(
sii
->
osh
, &
ªgs
->coreinfo);

2028 i‡(
c‹îev
 >= 16) {

2029 
uöt8
 
i
;

2030 
uöt
 
nb
 = (
c‹eöfo
 & 
SRCI_SRNB_MASK
Ë>> 
SRCI_SRNB_SHIFT
;

2031 
i
 = 0; i < 
nb
; i++) {

2032 
	`W_REG
(
sii
->
osh
, &
ªgs
->
b™kidx
, 
i
);

2033 i‡(
	`R_REG
(
sii
->
osh
, &
ªgs
->
b™köfo
Ë& 
SOCRAM_BANKINFO_RETNTRAM_MASK
)

2034 
memsize
 +
	`so¸am_b™ksize
(
sii
, 
ªgs
, 
i
, 
SOCRAM_MEMTYPE_RAM
);

2039 i‡(!
wasup
)

2040 
	`si_c‹e_dißbÀ
(
sih
, 0);

2041 
	`si_£tc‹eidx
(
sih
, 
‹igidx
);

2043 
d⁄e
:

2044 
	`INTR_RESTORE
(
sii
, 
öå_vÆ
);

2046  
memsize
;

2047 
	}
}

2051 
	$si_btcgpiow¨
(
si_t
 *
sih
)

2053 
si_öfo_t
 *
sii
;

2054 
uöt
 
‹igidx
;

2055 
uöt
 
öå_vÆ
 = 0;

2056 
chù¸egs_t
 *
cc
;

2058 
sii
 = 
	`SI_INFO
(
sih
);

2063 i‡(!(
sih
->
ccˇps
 & 
CC_CAP_UARTGPIO
))

2067 
	`INTR_OFF
(
sii
, 
öå_vÆ
);

2069 
‹igidx
 = 
	`si_c‹eidx
(
sih
);

2071 
cc
 = (
chù¸egs_t
 *)
	`si_£tc‹e
(
sih
, 
CC_CORE_ID
, 0);

2072 
	`ASSERT
(
cc
 !
NULL
);

2074 
	`W_REG
(
sii
->
osh
, &
cc
->
u¨t0m¸
, 
	`R_REG
(sii->osh, &cc->uart0mcr) | 0x04);

2077 
	`si_£tc‹eidx
(
sih
, 
‹igidx
);

2079 
	`INTR_RESTORE
(
sii
, 
öå_vÆ
);

2080 
	}
}

2083 
	$si_chùc⁄ål_btshd0_4331
(
si_t
 *
sih
, 
boﬁ
 
⁄
)

2085 
si_öfo_t
 *
sii
;

2086 
chù¸egs_t
 *
cc
;

2087 
uöt
 
‹igidx
;

2088 
uöt32
 
vÆ
;

2089 
uöt
 
öå_vÆ
 = 0;

2091 
sii
 = 
	`SI_INFO
(
sih
);

2093 
	`INTR_OFF
(
sii
, 
öå_vÆ
);

2095 
‹igidx
 = 
	`si_c‹eidx
(
sih
);

2097 
cc
 = (
chù¸egs_t
 *)
	`si_£tc‹e
(
sih
, 
CC_CORE_ID
, 0);

2099 
vÆ
 = 
	`R_REG
(
sii
->
osh
, &
cc
->
chùc⁄åﬁ
);

2102 i‡(
⁄
) {

2104 
vÆ
 |(
CCTRL4331_BT_SHD0_ON_GPIO4
);

2105 
	`W_REG
(
sii
->
osh
, &
cc
->
chùc⁄åﬁ
, 
vÆ
);

2107 
vÆ
 &~(
CCTRL4331_BT_SHD0_ON_GPIO4
);

2108 
	`W_REG
(
sii
->
osh
, &
cc
->
chùc⁄åﬁ
, 
vÆ
);

2112 
	`si_£tc‹eidx
(
sih
, 
‹igidx
);

2114 
	`INTR_RESTORE
(
sii
, 
öå_vÆ
);

2115 
	}
}

2118 
	$si_chùc⁄ål_ª°‹e
(
si_t
 *
sih
, 
uöt32
 
vÆ
)

2120 
si_öfo_t
 *
sii
;

2121 
chù¸egs_t
 *
cc
;

2122 
uöt
 
‹igidx
;

2124 
sii
 = 
	`SI_INFO
(
sih
);

2125 
‹igidx
 = 
	`si_c‹eidx
(
sih
);

2126 
cc
 = (
chù¸egs_t
 *)
	`si_£tc‹e
(
sih
, 
CC_CORE_ID
, 0);

2127 
	`W_REG
(
sii
->
osh
, &
cc
->
chùc⁄åﬁ
, 
vÆ
);

2128 
	`si_£tc‹eidx
(
sih
, 
‹igidx
);

2129 
	}
}

2131 
uöt32


2132 
	$si_chùc⁄ål_ªad
(
si_t
 *
sih
)

2134 
si_öfo_t
 *
sii
;

2135 
chù¸egs_t
 *
cc
;

2136 
uöt
 
‹igidx
;

2137 
uöt32
 
vÆ
;

2139 
sii
 = 
	`SI_INFO
(
sih
);

2140 
‹igidx
 = 
	`si_c‹eidx
(
sih
);

2141 
cc
 = (
chù¸egs_t
 *)
	`si_£tc‹e
(
sih
, 
CC_CORE_ID
, 0);

2142 
vÆ
 = 
	`R_REG
(
sii
->
osh
, &
cc
->
chùc⁄åﬁ
);

2143 
	`si_£tc‹eidx
(
sih
, 
‹igidx
);

2144  
vÆ
;

2145 
	}
}

2148 
	$si_chùc⁄ål_ïa4331
(
si_t
 *
sih
, 
boﬁ
 
⁄
)

2150 
si_öfo_t
 *
sii
;

2151 
chù¸egs_t
 *
cc
;

2152 
uöt
 
‹igidx
;

2153 
uöt32
 
vÆ
;

2155 
sii
 = 
	`SI_INFO
(
sih
);

2156 
‹igidx
 = 
	`si_c‹eidx
(
sih
);

2158 
cc
 = (
chù¸egs_t
 *)
	`si_£tc‹e
(
sih
, 
CC_CORE_ID
, 0);

2160 
vÆ
 = 
	`R_REG
(
sii
->
osh
, &
cc
->
chùc⁄åﬁ
);

2162 i‡(
⁄
) {

2163 i‡(
sih
->
chùpkg
 == 9 || sih->chippkg == 0xb) {

2164 
vÆ
 |(
CCTRL4331_EXTPA_EN
 | 
CCTRL4331_EXTPA_ON_GPIO2_5
);

2166 
	`W_REG
(
sii
->
osh
, &
cc
->
chùc⁄åﬁ
, 
vÆ
);

2169 i‡(
sih
->
chùªv
 > 0) {

2170 
	`W_REG
(
sii
->
osh
, &
cc
->
chùc⁄åﬁ
, 
vÆ
 |

2171 (
CCTRL4331_EXTPA_EN
Ë| (
CCTRL4331_EXTPA_EN2
));

2173 
	`W_REG
(
sii
->
osh
, &
cc
->
chùc⁄åﬁ
, 
vÆ
 | (
CCTRL4331_EXTPA_EN
));

2177 
vÆ
 &~(
CCTRL4331_EXTPA_EN
 | 
CCTRL4331_EXTPA_EN2
 | 
CCTRL4331_EXTPA_ON_GPIO2_5
);

2178 
	`W_REG
(
sii
->
osh
, &
cc
->
chùc⁄åﬁ
, 
vÆ
);

2181 
	`si_£tc‹eidx
(
sih
, 
‹igidx
);

2182 
	}
}

2186 
	$si_chùc⁄ål_§om4360
(
si_t
 *
sih
, 
boﬁ
 
⁄
)

2188 
si_öfo_t
 *
sii
;

2189 
chù¸egs_t
 *
cc
;

2190 
uöt
 
‹igidx
;

2191 
uöt32
 
vÆ
;

2193 
sii
 = 
	`SI_INFO
(
sih
);

2194 
‹igidx
 = 
	`si_c‹eidx
(
sih
);

2196 
cc
 = (
chù¸egs_t
 *)
	`si_£tc‹e
(
sih
, 
CC_CORE_ID
, 0);

2198 
vÆ
 = 
	`R_REG
(
sii
->
osh
, &
cc
->
chùc⁄åﬁ
);

2200 i‡(
⁄
) {

2201 
vÆ
 &~(
CCTRL4360_SECI_MODE
 |

2202 
CCTRL4360_BTSWCTRL_MODE
 |

2203 
CCTRL4360_EXTRA_FEMCTRL_MODE
 |

2204 
CCTRL4360_BT_LGCY_MODE
 |

2205 
CCTRL4360_CORE2FEMCTRL4_ON
);

2207 
	`W_REG
(
sii
->
osh
, &
cc
->
chùc⁄åﬁ
, 
vÆ
);

2211 
	`si_£tc‹eidx
(
sih
, 
‹igidx
);

2212 
	}
}

2215 
	$si_chùc⁄ål_ïa4331_wowl
(
si_t
 *
sih
, 
boﬁ
 
íãr_wowl
)

2217 
si_öfo_t
 *
sii
;

2218 
chù¸egs_t
 *
cc
;

2219 
uöt
 
‹igidx
;

2220 
uöt32
 
vÆ
;

2221 
boﬁ
 
£l_chù
;

2223 
£l_chù
 = (
	`CHIPID
(
sih
->
chù
Ë=
BCM4331_CHIP_ID
) ||

2224 (
	`CHIPID
(
sih
->
chù
Ë=
BCM43431_CHIP_ID
);

2225 
£l_chù
 &((
sih
->
chùpkg
 == 9 || sih->chippkg == 0xb));

2227 i‡(!
£l_chù
)

2230 
sii
 = 
	`SI_INFO
(
sih
);

2231 
‹igidx
 = 
	`si_c‹eidx
(
sih
);

2233 
cc
 = (
chù¸egs_t
 *)
	`si_£tc‹e
(
sih
, 
CC_CORE_ID
, 0);

2235 
vÆ
 = 
	`R_REG
(
sii
->
osh
, &
cc
->
chùc⁄åﬁ
);

2237 i‡(
íãr_wowl
) {

2238 
vÆ
 |
CCTRL4331_EXTPA_EN
;

2239 
	`W_REG
(
sii
->
osh
, &
cc
->
chùc⁄åﬁ
, 
vÆ
);

2241 
vÆ
 |(
CCTRL4331_EXTPA_EN
 | 
CCTRL4331_EXTPA_ON_GPIO2_5
);

2242 
	`W_REG
(
sii
->
osh
, &
cc
->
chùc⁄åﬁ
, 
vÆ
);

2244 
	`si_£tc‹eidx
(
sih
, 
‹igidx
);

2245 
	}
}

2247 
uöt


2248 
	$si_∂l_ª£t
(
si_t
 *
sih
)

2250 
uöt
 
îr
 = 0;

2252  (
îr
);

2253 
	}
}

2257 
	$si_ïa_4313w¨
(
si_t
 *
sih
)

2259 
si_öfo_t
 *
sii
;

2260 
chù¸egs_t
 *
cc
;

2261 
uöt
 
‹igidx
;

2263 
sii
 = 
	`SI_INFO
(
sih
);

2264 
‹igidx
 = 
	`si_c‹eidx
(
sih
);

2266 
cc
 = (
chù¸egs_t
 *)
	`si_£tc‹e
(
sih
, 
CC_CORE_ID
, 0);

2269 
	`W_REG
(
sii
->
osh
, &
cc
->
gpioc⁄åﬁ
,

2270 
	`R_REG
(
sii
->
osh
, &
cc
->
gpioc⁄åﬁ
Ë| 
GPIO_CTRL_EPA_EN_MASK
);

2272 
	`si_£tc‹eidx
(
sih
, 
‹igidx
);

2273 
	}
}

2276 
	$si_˛k_pmu_hèvaû_£t
(
si_t
 *
sih
, 
boﬁ
 
£t_˛ór
)

2278 
	}
}

2282 
	$si_btcombo_p250_4313_w¨
(
si_t
 *
sih
)

2284 
si_öfo_t
 *
sii
;

2285 
chù¸egs_t
 *
cc
;

2286 
uöt
 
‹igidx
;

2288 
sii
 = 
	`SI_INFO
(
sih
);

2289 
‹igidx
 = 
	`si_c‹eidx
(
sih
);

2291 
cc
 = (
chù¸egs_t
 *)
	`si_£tc‹e
(
sih
, 
CC_CORE_ID
, 0);

2292 
	`W_REG
(
sii
->
osh
, &
cc
->
gpioc⁄åﬁ
,

2293 
	`R_REG
(
sii
->
osh
, &
cc
->
gpioc⁄åﬁ
Ë| 
GPIO_CTRL_5_6_EN_MASK
);

2295 
	`W_REG
(
sii
->
osh
, &
cc
->
gpioouãn
,

2296 
	`R_REG
(
sii
->
osh
, &
cc
->
gpioouãn
Ë| 
GPIO_CTRL_5_6_EN_MASK
);

2298 
	`si_£tc‹eidx
(
sih
, 
‹igidx
);

2299 
	}
}

2301 
	$si_btc_íabÀ_chùc⁄åﬁ
(
si_t
 *
sih
)

2303 
si_öfo_t
 *
sii
;

2304 
chù¸egs_t
 *
cc
;

2305 
uöt
 
‹igidx
;

2307 
sii
 = 
	`SI_INFO
(
sih
);

2308 
‹igidx
 = 
	`si_c‹eidx
(
sih
);

2310 
cc
 = (
chù¸egs_t
 *)
	`si_£tc‹e
(
sih
, 
CC_CORE_ID
, 0);

2313 
	`W_REG
(
sii
->
osh
, &
cc
->
chùc⁄åﬁ
,

2314 
	`R_REG
(
sii
->
osh
, &
cc
->
chùc⁄åﬁ
Ë| 
CC_BTCOEX_EN_MASK
);

2316 
	`si_£tc‹eidx
(
sih
, 
‹igidx
);

2317 
	}
}

2319 
	$si_btcombo_43228_w¨
(
si_t
 *
sih
)

2321 
si_öfo_t
 *
sii
;

2322 
chù¸egs_t
 *
cc
;

2323 
uöt
 
‹igidx
;

2325 
sii
 = 
	`SI_INFO
(
sih
);

2326 
‹igidx
 = 
	`si_c‹eidx
(
sih
);

2328 
cc
 = (
chù¸egs_t
 *)
	`si_£tc‹e
(
sih
, 
CC_CORE_ID
, 0);

2330 
	`W_REG
(
sii
->
osh
, &
cc
->
gpioouãn
, 
GPIO_CTRL_7_6_EN_MASK
);

2331 
	`W_REG
(
sii
->
osh
, &
cc
->
gpioout
, 
GPIO_OUT_7_EN_MASK
);

2333 
	`si_£tc‹eidx
(
sih
, 
‹igidx
);

2334 
	}
}

2337 
boﬁ


2338 
	$si_devi˚ªmoved
(
si_t
 *
sih
)

2340 
uöt32
 
w
;

2341 
si_öfo_t
 *
sii
;

2343 
sii
 = 
	`SI_INFO
(
sih
);

2345 
	`BUSTYPE
(
sih
->
bu°y≥
)) {

2346 
PCI_BUS
:

2347 
	`ASSERT
(
sii
->
osh
 !
NULL
);

2348 
w
 = 
	`OSL_PCI_READ_CONFIG
(
sii
->
osh
, 
PCI_CFG_VID
, (
uöt32
));

2349 i‡((
w
 & 0xFFFFË!
VENDOR_BROADCOM
)

2350  
TRUE
;

2353  
FALSE
;

2354 
	}
}

2356 
boﬁ


2357 
	$si_is_•rom_avaûabÀ
(
si_t
 *
sih
)

2359 i‡(
sih
->
c¸ev
 >= 31) {

2360 
si_öfo_t
 *
sii
;

2361 
uöt
 
‹igidx
;

2362 
chù¸egs_t
 *
cc
;

2363 
uöt32
 
§om˘æ
;

2365 i‡((
sih
->
ccˇps
 & 
CC_CAP_SROM
) == 0)

2366  
FALSE
;

2368 
sii
 = 
	`SI_INFO
(
sih
);

2369 
‹igidx
 = 
sii
->
curidx
;

2370 
cc
 = 
	`si_£tc‹eidx
(
sih
, 
SI_CC_IDX
);

2371 
§om˘æ
 = 
	`R_REG
(
sii
->
osh
, &
cc
->
§omc⁄åﬁ
);

2372 
	`si_£tc‹eidx
(
sih
, 
‹igidx
);

2373  (
§om˘æ
 & 
SRC_PRESENT
);

2376 
	`CHIPID
(
sih
->
chù
)) {

2377 
BCM4312_CHIP_ID
:

2378  ((
sih
->
chù°
 & 
CST4312_SPROM_OTP_SEL_MASK
Ë!
CST4312_OTP_SEL
);

2379 
BCM4325_CHIP_ID
:

2380  (
sih
->
chù°
 & 
CST4325_SPROM_SEL
) != 0;

2381 
BCM4322_CHIP_ID
: 
BCM43221_CHIP_ID
: 
BCM43231_CHIP_ID
:

2382 
BCM43222_CHIP_ID
: 
BCM43111_CHIP_ID
: 
BCM43112_CHIP_ID
:

2383 
BCM4342_CHIP_ID
: {

2384 
uöt32
 
•romŸp
;

2385 
•romŸp
 = (
sih
->
chù°
 & 
CST4322_SPROM_OTP_SEL_MASK
) >>

2386 
CST4322_SPROM_OTP_SEL_SHIFT
;

2387  (
•romŸp
 & 
CST4322_SPROM_PRESENT
) != 0;

2389 
BCM4329_CHIP_ID
:

2390  (
sih
->
chù°
 & 
CST4329_SPROM_SEL
) != 0;

2391 
BCM4315_CHIP_ID
:

2392  (
sih
->
chù°
 & 
CST4315_SPROM_SEL
) != 0;

2393 
BCM4319_CHIP_ID
:

2394  (
sih
->
chù°
 & 
CST4319_SPROM_SEL
) != 0;

2395 
BCM4336_CHIP_ID
:

2396 
BCM43362_CHIP_ID
:

2397  (
sih
->
chù°
 & 
CST4336_SPROM_PRESENT
) != 0;

2398 
BCM4330_CHIP_ID
:

2399  (
sih
->
chù°
 & 
CST4330_SPROM_PRESENT
) != 0;

2400 
BCM4313_CHIP_ID
:

2401  (
sih
->
chù°
 & 
CST4313_SPROM_PRESENT
) != 0;

2402 
BCM4331_CHIP_ID
:

2403 
BCM43431_CHIP_ID
:

2404  (
sih
->
chù°
 & 
CST4331_SPROM_PRESENT
) != 0;

2405 
BCM43239_CHIP_ID
:

2406  ((
sih
->
chù°
 & 
CST43239_SPROM_MASK
) &&

2407 !(
sih
->
chù°
 & 
CST43239_SFLASH_MASK
));

2408 
BCM4324_CHIP_ID
:

2409  ((
sih
->
chù°
 & 
CST4324_SPROM_MASK
) &&

2410 !(
sih
->
chù°
 & 
CST4324_SFLASH_MASK
));

2411 
BCM4335_CHIP_ID
:

2412  ((
sih
->
chù°
 & 
CST4335_SPROM_MASK
) &&

2413 !(
sih
->
chù°
 & 
CST4335_SFLASH_MASK
));

2414 
BCM43131_CHIP_ID
:

2415 
BCM43217_CHIP_ID
:

2416 
BCM43227_CHIP_ID
:

2417 
BCM43228_CHIP_ID
:

2418 
BCM43428_CHIP_ID
:

2419  (
sih
->
chù°
 & 
CST43228_OTP_PRESENT
) != CST43228_OTP_PRESENT;

2421  
TRUE
;

2423 
	}
}

2426 
uöt32
 
	$si_gë_§om˘l
(
si_t
 *
sih
)

2428 
chù¸egs_t
 *
cc
;

2429 
uöt
 
‹igidx
;

2430 
uöt32
 
§om˘l
;

2431 
o¶_t
 *
osh
;

2433 
osh
 = 
	`si_osh
(
sih
);

2434 
‹igidx
 = 
	`si_c‹eidx
(
sih
);

2435 
cc
 = 
	`si_£tc‹eidx
(
sih
, 
SI_CC_IDX
);

2436 
	`ASSERT
((
uöçå
)
cc
);

2438 
§om˘l
 = 
	`R_REG
(
osh
, &
cc
->
§omc⁄åﬁ
);

2441 
	`si_£tc‹eidx
(
sih
, 
‹igidx
);

2442  
§om˘l
;

2443 
	}
}

2445 
	$si_£t_§om˘l
(
si_t
 *
sih
, 
uöt32
 
vÆue
)

2447 
chù¸egs_t
 *
cc
;

2448 
uöt
 
‹igidx
;

2449 
o¶_t
 *
osh
;

2451 
osh
 = 
	`si_osh
(
sih
);

2452 
‹igidx
 = 
	`si_c‹eidx
(
sih
);

2453 
cc
 = 
	`si_£tc‹eidx
(
sih
, 
SI_CC_IDX
);

2454 
	`ASSERT
((
uöçå
)
cc
);

2457 i‡(
	`si_c‹îev
(
sih
) < 32)

2458  
BCME_UNSUPPORTED
;

2460 
	`W_REG
(
osh
, &
cc
->
§omc⁄åﬁ
, 
vÆue
);

2463 
	`si_£tc‹eidx
(
sih
, 
‹igidx
);

2464  
BCME_OK
;

2466 
	}
}

	@siutils_priv.h

27 #i‚def 
_siutûs_¥iv_h_


28 
	#_siutûs_¥iv_h_


	)

30 
	#SI_ERROR
(
¨gs
)

	)

32 
	#SI_MSG
(
¨gs
)

	)

34 #ifde‡
BCMDBG_SI


35 
	#SI_VMSG
(
¨gs
Ë
¥ötf
 
	)
args

37 
	#SI_VMSG
(
¨gs
)

	)

40 
	#IS_SIM
(
chùpkg
Ë((chùpkg =
HDLSIM_PKG_ID
Ë|| (chùpkg =
HWSIM_PKG_ID
))

	)

42 
	$uöt32
 (*
	tsi_öåsoff_t
)(*
	töå_¨g
);

43 (*
	tsi_öå§e°‹e_t
)(*
	töå_¨g
, 
	tuöt32
 
	t¨g
);

44 
	$boﬁ
 (*
	tsi_öå£«bÀd_t
)(*
	töå_¨g
);

46 
	sgpioh_ôem
 {

47 *
¨g
;

48 
boﬁ
 
Àvñ
;

49 
gpio_h™dÀr_t
 
h™dÀr
;

50 
uöt32
 
evít
;

51 
gpioh_ôem
 *
√xt
;

52 } 
	tgpioh_ôem_t
;

55 
	ssi_öfo
 {

56 
si_pub
 
pub
;

58 *
osh
;

59 *
sdh
;

61 
uöt
 
dev_c‹eid
;

62 *
öå_¨g
;

63 
si_öåsoff_t
 
öåsoff_‚
;

64 
si_öå§e°‹e_t
 
öå§e°‹e_‚
;

65 
si_öå£«bÀd_t
 
öå£«bÀd_‚
;

67 *
pch
;

69 
gpioh_ôem_t
 *
gpioh_hód
;

71 
boﬁ
 
mem£g
;

73 *
v¨s
;

74 
uöt
 
v¨sz
;

76 *
curm≠
;

77 *
ªgs
[
SI_MAXCORES
];

79 
uöt
 
curidx
;

80 
uöt
 
numc‹es
;

81 
uöt
 
c‹eid
[
SI_MAXCORES
];

82 
uöt32
 
c‹esba
[
SI_MAXCORES
];

83 *
ªgs2
[
SI_MAXCORES
];

84 
uöt32
 
c‹esba2
[
SI_MAXCORES
];

85 
uöt32
 
c‹esba_size
[
SI_MAXCORES
];

86 
uöt32
 
c‹esba2_size
[
SI_MAXCORES
];

88 *
curwøp
;

89 *
wøµîs
[
SI_MAXCORES
];

90 
uöt32
 
wøpba
[
SI_MAXCORES
];

92 
uöt32
 
cü
[
SI_MAXCORES
];

93 
uöt32
 
cib
[
SI_MAXCORES
];

94 
uöt32
 
oob_rouãr
;

95 } 
	tsi_öfo_t
;

97 
	#SI_INFO
(
sih
Ë(
si_öfo_t
 *)(
uöçå
)
	)
sih

99 
	#GOODCOREADDR
(
x
, 
b
Ë(((xË>(b)Ë&& ((xË< ((bË+ 
SI_MAXCORES
 * 
SI_CORE_SIZE
)) && \

100 
	`ISALIGNED
((
x
), 
SI_CORE_SIZE
))

	)

101 
	#GOODREGS
(
ªgs
Ë(‘egsË!
NULL
 && 
	`ISALIGNED
((
uöçå
)‘egs), 
SI_CORE_SIZE
))

	)

102 
	#BADCOREADDR
 0

	)

103 
	#GOODIDX
(
idx
Ë(((
uöt
)idxË< 
SI_MAXCORES
)

	)

104 
	#NOREV
 -1

	)

106 
	#PCI
(
si
Ë((
	`BUSTYPE
((si)->
pub
.
bu°y≥
Ë=
PCI_BUS
) && \

107 ((
si
)->
pub
.
busc‹ëy≥
 =
PCI_CORE_ID
))

	)

109 
	#PCIE_GEN1
(
si
Ë((
	`BUSTYPE
((si)->
pub
.
bu°y≥
Ë=
PCI_BUS
) && \

110 ((
si
)->
pub
.
busc‹ëy≥
 =
PCIE_CORE_ID
))

	)

112 
	#PCIE_GEN2
(
si
Ë((
	`BUSTYPE
((si)->
pub
.
bu°y≥
Ë=
PCI_BUS
) && \

113 ((
si
)->
pub
.
busc‹ëy≥
 =
PCIE2_CORE_ID
))

	)

115 
	#PCIE
(
si
Ë(
	`PCIE_GEN1
(siË|| 
	`PCIE_GEN2
(si))

	)

117 
	#PCMCIA
(
si
Ë((
	`BUSTYPE
((si)->
pub
.
bu°y≥
Ë=
PCMCIA_BUS
Ë&& ((si)->
mem£g
 =
TRUE
))

	)

122 
	#SI_FAST
(
si
Ë(
	`PCIE
(siË|| (
	`PCI
(siË&& ((si)->
pub
.
busc‹îev
 >13)))

	)

124 
	#PCIEREGS
(
si
Ë(((*)((si)->
curm≠
Ë+ 
PCI_16KB0_PCIREGS_OFFSET
))

	)

125 
	#CCREGS_FAST
(
si
Ë(((*)((si)->
curm≠
Ë+ 
PCI_16KB0_CCREGS_OFFSET
))

	)

131 
	#INTR_OFF
(
si
, 
öå_vÆ
) \

132 i‡((
si
)->
öåsoff_‚
 && (si)->
c‹eid
[(si)->
curidx
] =(si)->
dev_c‹eid
) { \

133 
öå_vÆ
 = (*(
si
)->
öåsoff_‚
)((si)->
öå_¨g
); 
	}

	)
}

134 
	#INTR_RESTORE
(
si
, 
öå_vÆ
) \

135 i‡((
si
)->
öå§e°‹e_‚
 && (si)->
c‹eid
[(si)->
curidx
] =(si)->
dev_c‹eid
) { \

136 (*(
si
)->
öå§e°‹e_‚
)((si)->
öå_¨g
, 
öå_vÆ
); }

	)

139 
	#LPOMINFREQ
 25000

	)

140 
	#LPOMAXFREQ
 43000

	)

141 
	#XTALMINFREQ
 19800000

	)

142 
	#XTALMAXFREQ
 20200000

	)

143 
	#PCIMINFREQ
 25000000

	)

144 
	#PCIMAXFREQ
 34000000

	)

146 
	#ILP_DIV_5MHZ
 0

	)

147 
	#ILP_DIV_1MHZ
 4

	)

149 
	#PCI_FORCEHT
(
si
) \

150 (((
	`PCIE_GEN1
(
si
)Ë&& (si->
pub
.
chù
 =
BCM4311_CHIP_ID
Ë&& ((si->pub.
chùªv
 <= 1))) || \

151 ((
	`PCI
(
si
Ë|| 
	`PCIE_GEN1
(si)Ë&& (si->
pub
.
chù
 =
BCM4321_CHIP_ID
)) || \

152 (
	`PCIE_GEN1
(
si
Ë&& (si->
pub
.
chù
 =
BCM4716_CHIP_ID
)) || \

153 (
	`PCIE_GEN1
(
si
Ë&& (si->
pub
.
chù
 =
BCM4748_CHIP_ID
)))

	)

156 
	#DEFAULT_GPIO_ONTIME
 10

	)

157 
	#DEFAULT_GPIO_OFFTIME
 90

	)

159 #i‚de‡
DEFAULT_GPIOTIMERVAL


160 
	#DEFAULT_GPIOTIMERVAL
 ((
DEFAULT_GPIO_ONTIME
 << 
GPIO_ONTIME_SHIFT
Ë| 
DEFAULT_GPIO_OFFTIME
)

	)

164 
sb_sˇn
(
si_t
 *
sih
, *
ªgs
, 
uöt
 
devid
);

165 
uöt
 
sb_c‹eid
(
si_t
 *
sih
);

166 
uöt
 
sb_ötÊag
(
si_t
 *
sih
);

167 
uöt
 
sb_Êag
(
si_t
 *
sih
);

168 
sb_£töt
(
si_t
 *
sih
, 
siÊag
);

169 
uöt
 
sb_c‹evíd‹
(
si_t
 *
sih
);

170 
uöt
 
sb_c‹îev
(
si_t
 *
sih
);

171 
uöt
 
sb_c‹îeg
(
si_t
 *
sih
, uöà
c‹eidx
, uöà
ªgoff
, uöà
mask
, uöà
vÆ
);

172 
boﬁ
 
sb_isc‹eup
(
si_t
 *
sih
);

173 *
sb_£tc‹eidx
(
si_t
 *
sih
, 
uöt
 
c‹eidx
);

174 
uöt32
 
sb_c‹e_cÊags
(
si_t
 *
sih
, uöt32 
mask
, uöt32 
vÆ
);

175 
sb_c‹e_cÊags_wo
(
si_t
 *
sih
, 
uöt32
 
mask
, uöt32 
vÆ
);

176 
uöt32
 
sb_c‹e_sÊags
(
si_t
 *
sih
, uöt32 
mask
, uöt32 
vÆ
);

177 
sb_commô
(
si_t
 *
sih
);

178 
uöt32
 
sb_ba£
(uöt32 
adm©ch
);

179 
uöt32
 
sb_size
(uöt32 
adm©ch
);

180 
sb_c‹e_ª£t
(
si_t
 *
sih
, 
uöt32
 
bôs
, uöt32 
ª£tbôs
);

181 
sb_c‹e_dißbÀ
(
si_t
 *
sih
, 
uöt32
 
bôs
);

182 
uöt32
 
sb_addr•a˚
(
si_t
 *
sih
, 
uöt
 
asidx
);

183 
uöt32
 
sb_addr•a˚size
(
si_t
 *
sih
, 
uöt
 
asidx
);

184 
sb_numaddr•a˚s
(
si_t
 *
sih
);

186 
uöt32
 
sb_£t_öôüt‹_to
(
si_t
 *
sih
, uöt32 
to
, 
uöt
 
idx
);

188 
boﬁ
 
sb_è˛ór
(
si_t
 *
sih
, boﬁ 
dëaûs
);

192 
boﬁ
 
sb_pci_pmeˇp
(
si_t
 *
sih
);

193 
	go¶_öfo
;

194 
boﬁ
 
sb_pci_Á°pmeˇp
(
o¶_öfo
 *
osh
);

195 
boﬁ
 
sb_pci_pme˛r
(
si_t
 *
sih
);

196 
sb_pci_pmìn
(
si_t
 *
sih
);

197 
uöt
 
sb_pcõ_ªadªg
(*
sih
, uöà
addπy≥
, uöà
off£t
);

200 
si_t
 *
ai_©èch
(
uöt
 
pcidev
, 
o¶_t
 *
osh
, *
ªgs
, uöà
bu°y≥
,

201 *
sdh
, **
v¨s
, 
uöt
 *
v¨sz
);

202 
si_t
 *
ai_k©èch
(
o¶_t
 *
osh
);

203 
ai_sˇn
(
si_t
 *
sih
, *
ªgs
, 
uöt
 
devid
);

205 
uöt
 
ai_Êag
(
si_t
 *
sih
);

206 
ai_£töt
(
si_t
 *
sih
, 
siÊag
);

207 
uöt
 
ai_c‹eidx
(
si_t
 *
sih
);

208 
uöt
 
ai_c‹evíd‹
(
si_t
 *
sih
);

209 
uöt
 
ai_c‹îev
(
si_t
 *
sih
);

210 
boﬁ
 
ai_isc‹eup
(
si_t
 *
sih
);

211 *
ai_£tc‹eidx
(
si_t
 *
sih
, 
uöt
 
c‹eidx
);

212 
uöt32
 
ai_c‹e_cÊags
(
si_t
 *
sih
, uöt32 
mask
, uöt32 
vÆ
);

213 
ai_c‹e_cÊags_wo
(
si_t
 *
sih
, 
uöt32
 
mask
, uöt32 
vÆ
);

214 
uöt32
 
ai_c‹e_sÊags
(
si_t
 *
sih
, uöt32 
mask
, uöt32 
vÆ
);

215 
uöt
 
ai_c‹îeg
(
si_t
 *
sih
, uöà
c‹eidx
, uöà
ªgoff
, uöà
mask
, uöà
vÆ
);

216 
ai_c‹e_ª£t
(
si_t
 *
sih
, 
uöt32
 
bôs
, uöt32 
ª£tbôs
);

217 
ai_c‹e_dißbÀ
(
si_t
 *
sih
, 
uöt32
 
bôs
);

218 
ai_numaddr•a˚s
(
si_t
 *
sih
);

219 
uöt32
 
ai_addr•a˚
(
si_t
 *
sih
, 
uöt
 
asidx
);

220 
uöt32
 
ai_addr•a˚size
(
si_t
 *
sih
, 
uöt
 
asidx
);

221 
ai_c‹óddr•a˚X
(
si_t
 *
sih
, 
uöt
 
asidx
, 
uöt32
 *
addr
, uöt32 *
size
);

222 
uöt
 
ai_wøp_ªg
(
si_t
 *
sih
, 
uöt32
 
off£t
, uöt32 
mask
, uöt32 
vÆ
);

226 
	#ub_sˇn
(
a
, 
b
, 
c
Ëdÿ{} 0)

	)

227 
	#ub_Êag
(
a
Ë(0)

	)

228 
	#ub_£töt
(
a
, 
b
Ëdÿ{} 0)

	)

229 
	#ub_c‹eidx
(
a
Ë(0)

	)

230 
	#ub_c‹evíd‹
(
a
Ë(0)

	)

231 
	#ub_c‹îev
(
a
Ë(0)

	)

232 
	#ub_isc‹eup
(
a
Ë(0)

	)

233 
	#ub_£tc‹eidx
(
a
, 
b
Ë(0)

	)

234 
	#ub_c‹e_cÊags
(
a
, 
b
, 
c
Ë(0)

	)

235 
	#ub_c‹e_cÊags_wo
(
a
, 
b
, 
c
Ëdÿ{} 0)

	)

236 
	#ub_c‹e_sÊags
(
a
, 
b
, 
c
Ë(0)

	)

237 
	#ub_c‹îeg
(
a
, 
b
, 
c
, 
d
, 
e
Ë(0)

	)

238 
	#ub_c‹e_ª£t
(
a
, 
b
, 
c
Ëdÿ{} 0)

	)

239 
	#ub_c‹e_dißbÀ
(
a
, 
b
Ëdÿ{} 0)

	)

240 
	#ub_numaddr•a˚s
(
a
Ë(0)

	)

241 
	#ub_addr•a˚
(
a
, 
b
Ë(0)

	)

242 
	#ub_addr•a˚size
(
a
, 
b
Ë(0)

	)

243 
	#ub_võw
(
a
, 
b
Ëdÿ{} 0)

	)

244 
	#ub_dum¥egs
(
a
, 
b
Ëdÿ{} 0)

	)

	@uamp_api.h

29 #i‚de‡
UAMP_API_H


30 
	#UAMP_API_H


	)

33 
	~"ty≥defs.h
"

41 
	#BT_API


	)

44 
boﬁ
 
	tBOOLEAN
;

45 
uöt8
 
	tUINT8
;

46 
uöt16
 
	tUINT16
;

50 
	#UAMP_ID_1
 1

	)

51 
	#UAMP_ID_2
 2

	)

52 
UINT8
 
	ttUAMP_ID
;

55 
	#UAMP_EVT_RX_READY
 0

	)

56 
	#UAMP_EVT_CTLR_REMOVED
 1

	)

57 
	#UAMP_EVT_CTLR_READY
 2

	)

58 
UINT8
 
	ttUAMP_EVT
;

62 
	#UAMP_CH_HCI_CMD
 0

	)

63 
	#UAMP_CH_HCI_EVT
 1

	)

64 
	#UAMP_CH_HCI_DATA
 2

	)

65 
UINT8
 
	ttUAMP_CH
;

69 
tUAMP_CH
 
	mch™√l
;

70 } 
	ttUAMP_EVT_DATA
;

85 (*
	ttUAMP_CBACK
)(
	ttUAMP_ID
 
	tamp_id
, 
	ttUAMP_EVT
 
	tamp_evt
, 
	ttUAMP_EVT_DATA
 *
	tp_amp_evt_d©a
);

91 #ifde‡
__˝lu•lus


106 
BT_API
 
BOOLEAN
 
	`UAMP_Inô
(
tUAMP_CBACK
 
p_cback
);

121 
BT_API
 
BOOLEAN
 
	`UAMP_O≥n
(
tUAMP_ID
 
amp_id
);

133 
BT_API
 
	`UAMP_Clo£
(
tUAMP_ID
 
amp_id
);

152 
BT_API
 
UINT16
 
	`UAMP_Wrôe
(
tUAMP_ID
 
amp_id
, 
UINT8
 *
p_buf
, UINT16 
num_byãs
, 
tUAMP_CH
 
ch™√l
);

170 
BT_API
 
UINT16
 
	`UAMP_Ród
(
tUAMP_ID
 
amp_id
, 
UINT8
 *
p_buf
, UINT16 
buf_size
, 
tUAMP_CH
 
ch™√l
);

172 #ifde‡
__˝lu•lus


173 
	}
}

	@wl_android.c

27 
	~<löux/moduÀ.h
>

28 
	~<löux/√tdevi˚.h
>

30 
	~<wl_™droid.h
>

31 
	~<wldev_comm⁄.h
>

32 
	~<wlio˘l.h
>

33 
	~<bcmutûs.h
>

34 
	~<löux_o¶.h
>

35 
	~<dhd_dbg.h
>

36 
	~<dngl_°©s.h
>

37 
	~<dhd.h
>

38 
	~<bcmsdbus.h
>

39 #ifde‡
WL_CFG80211


40 
	~<wl_cfg80211.h
>

42 #i‡
deföed
(
CONFIG_WIFI_CONTROL_FUNC
)

43 
	~<löux/∂©f‹m_devi˚.h
>

44 #i‡(
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 35))

45 
	~<löux/wœn_∂©.h
>

47 
	~<löux/wifi_tiwœn.h
>

56 
	#CMD_START
 "START"

	)

57 
	#CMD_STOP
 "STOP"

	)

58 
	#CMD_SCAN_ACTIVE
 "SCAN-ACTIVE"

	)

59 
	#CMD_SCAN_PASSIVE
 "SCAN-PASSIVE"

	)

60 
	#CMD_RSSI
 "RSSI"

	)

61 
	#CMD_LINKSPEED
 "LINKSPEED"

	)

62 
	#CMD_RXFILTER_START
 "RXFILTER-START"

	)

63 
	#CMD_RXFILTER_STOP
 "RXFILTER-STOP"

	)

64 
	#CMD_RXFILTER_ADD
 "RXFILTER-ADD"

	)

65 
	#CMD_RXFILTER_REMOVE
 "RXFILTER-REMOVE"

	)

66 
	#CMD_BTCOEXSCAN_START
 "BTCOEXSCAN-START"

	)

67 
	#CMD_BTCOEXSCAN_STOP
 "BTCOEXSCAN-STOP"

	)

68 
	#CMD_BTCOEXMODE
 "BTCOEXMODE"

	)

69 
	#CMD_SETSUSPENDOPT
 "SETSUSPENDOPT"

	)

70 
	#CMD_SETSUSPENDMODE
 "SETSUSPENDMODE"

	)

71 
	#CMD_P2P_DEV_ADDR
 "P2P_DEV_ADDR"

	)

72 
	#CMD_SETFWPATH
 "SETFWPATH"

	)

73 
	#CMD_SETBAND
 "SETBAND"

	)

74 
	#CMD_GETBAND
 "GETBAND"

	)

75 
	#CMD_COUNTRY
 "COUNTRY"

	)

76 
	#CMD_P2P_SET_NOA
 "P2P_SET_NOA"

	)

77 #i‡!
deföed
 
WL_ENABLE_P2P_IF


78 
	#CMD_P2P_GET_NOA
 "P2P_GET_NOA"

	)

80 
	#CMD_P2P_SD_OFFLOAD
 "P2P_SD_"

	)

81 
	#CMD_P2P_SET_PS
 "P2P_SET_PS"

	)

82 
	#CMD_SET_AP_WPS_P2P_IE
 "SET_AP_WPS_P2P_IE"

	)

83 
	#CMD_SETROAMMODE
 "SETROAMMODE"

	)

88 #ifde‡
PNO_SUPPORT


89 
	#CMD_PNOSSIDCLR_SET
 "PNOSSIDCLR"

	)

90 
	#CMD_PNOSETUP_SET
 "PNOSETUP "

	)

91 
	#CMD_PNOENABLE_SET
 "PNOFORCE"

	)

92 
	#CMD_PNODEBUG_SET
 "PNODEBUG"

	)

94 
	#PNO_TLV_PREFIX
 'S'

	)

95 
	#PNO_TLV_VERSION
 '1'

	)

96 
	#PNO_TLV_SUBVERSION
 '2'

	)

97 
	#PNO_TLV_RESERVED
 '0'

	)

98 
	#PNO_TLV_TYPE_SSID_IE
 'S'

	)

99 
	#PNO_TLV_TYPE_TIME
 'T'

	)

100 
	#PNO_TLV_FREQ_REPEAT
 'R'

	)

101 
	#PNO_TLV_FREQ_EXPO_MAX
 'M'

	)

103 
	scmd_év
 {

104 
	m¥efix
;

105 
	mvîsi⁄
;

106 
	msubvî
;

107 
	mª£rved
;

108 } 
	tcmd_év_t
;

111 
	#CMD_OKC_SET_PMK
 "SET_PMK"

	)

112 
	#CMD_OKC_ENABLE
 "OKC_ENABLE"

	)

115 
	s™droid_wifi_¥iv_cmd
 {

116 *
	mbuf
;

117 
	mu£d_Àn
;

118 
	mtŸÆ_Àn
;

119 } 
	t™droid_wifi_¥iv_cmd
;

125 
dhd_cu°omî_gpio_wœn_˘æ
(
⁄off
);

126 
dhd_dev_ª£t
(
√t_devi˚
 *
dev
, 
uöt8
 
Êag
);

127 
dhd_dev_öô_io˘l
(
√t_devi˚
 *
dev
);

128 #ifde‡
WL_CFG80211


129 
wl_cfg80211_gë_p2p_dev_addr
(
√t_devi˚
 *
√t
, 
ëhî_addr
 *
p2pdev_addr
);

130 
wl_cfg80211_£t_btc€x_dh˝
(
√t_devi˚
 *
dev
, *
comm™d
);

132 
	$wl_cfg80211_gë_p2p_dev_addr
(
√t_devi˚
 *
√t
, 
ëhî_addr
 *
p2pdev_addr
)

133 {  0; 
	}
}

134 
	$wl_cfg80211_£t_p2p_nﬂ
(
√t_devi˚
 *
√t
, * 
buf
, 
Àn
)

135 {  0; 
	}
}

136 
	$wl_cfg80211_gë_p2p_nﬂ
(
√t_devi˚
 *
√t
, * 
buf
, 
Àn
)

137 {  0; 
	}
}

138 
	$wl_cfg80211_£t_p2p_ps
(
√t_devi˚
 *
√t
, * 
buf
, 
Àn
)

139 {  0; 
	}
}

142 
dhd_os_check_wakñock
(*
dhdp
);

143 
dhd_os_check_if_up
(*
dhdp
);

144 *
bcmsdh_gë_drvd©a
();

146 #i‡
deföed
(
PROP_TXSTATUS
Ë&& !deföed(
PROP_TXSTATUS_VSDB
)

147 
dhd_wlfc_öô
(
dhd_pub_t
 *
dhd
);

148 
dhd_wlfc_deöô
(
dhd_pub_t
 *
dhd
);

152 
boﬁ
 
≠_fw_lﬂded
;

153 #i‡
deföed
(
CUSTOMER_HW2
)

154 
iÁ˚_«me
[
IFNAMSIZ
];

157 
	#WIFI_TURNOFF_DELAY
 0

	)

166 
	gg_wifi_⁄
 = 
TRUE
;

171 
	$wl_™droid_gë_lök_•ìd
(
√t_devi˚
 *
√t
, *
comm™d
, 
tŸÆ_Àn
)

173 
lök_•ìd
;

174 
byãs_wrôãn
;

175 
îr‹
;

177 
îr‹
 = 
	`wldev_gë_lök_•ìd
(
√t
, &
lök_•ìd
);

178 i‡(
îr‹
)

182 
lök_•ìd
 =Üink_speed / 1000;

183 
byãs_wrôãn
 = 
	`¢¥ötf
(
comm™d
, 
tŸÆ_Àn
, "LökS≥ed %d", 
lök_•ìd
);

184 
	`DHD_INFO
(("%s: comm™dÑesu… i†%s\n", 
__FUNCTION__
, 
comm™d
));

185  
byãs_wrôãn
;

186 
	}
}

188 
	$wl_™droid_gë_rssi
(
√t_devi˚
 *
√t
, *
comm™d
, 
tŸÆ_Àn
)

190 
wlc_ssid_t
 
ssid
 = {0};

191 
rssi
;

192 
byãs_wrôãn
 = 0;

193 
îr‹
;

195 
îr‹
 = 
	`wldev_gë_rssi
(
√t
, &
rssi
);

196 i‡(
îr‹
)

199 
îr‹
 = 
	`wldev_gë_ssid
(
√t
, &
ssid
);

200 i‡(
îr‹
)

202 i‡((
ssid
.
SSID_Àn
 =0Ë|| (ssid.SSID_À¿> 
DOT11_MAX_SSID_LEN
)) {

203 
	`DHD_ERROR
(("%s: wldev_gë_ssid faûed\n", 
__FUNCTION__
));

205 
	`mem˝y
(
comm™d
, 
ssid
.
SSID
, ssid.
SSID_Àn
);

206 
byãs_wrôãn
 = 
ssid
.
SSID_Àn
;

208 
byãs_wrôãn
 +
	`¢¥ötf
(&
comm™d
[byãs_wrôãn], 
tŸÆ_Àn
, "Ñssò%d", 
rssi
);

209 
	`DHD_INFO
(("%s: comm™dÑesu… i†%†(%d)\n", 
__FUNCTION__
, 
comm™d
, 
byãs_wrôãn
));

210  
byãs_wrôãn
;

211 
	}
}

213 
	$wl_™droid_£t_su•íd›t
(
√t_devi˚
 *
dev
, *
comm™d
, 
tŸÆ_Àn
)

215 
su•íd_Êag
;

216 
ªt_now
;

217 
ªt
 = 0;

219 
su•íd_Êag
 = *(
comm™d
 + 
	`°æí
(
CMD_SETSUSPENDOPT
) + 1) - '0';

221 i‡(
su•íd_Êag
 != 0)

222 
su•íd_Êag
 = 1;

223 
ªt_now
 = 
	`√t_os_£t_su•íd_dißbÀ
(
dev
, 
su•íd_Êag
);

225 i‡(
ªt_now
 !
su•íd_Êag
) {

226 i‡(!(
ªt
 = 
	`√t_os_£t_su•íd
(
dev
, 
ªt_now
, 1)))

227 
	`DHD_INFO
(("%s: Suspend Flag %d -> %d\n",

228 
__FUNCTION__
, 
ªt_now
, 
su•íd_Êag
));

230 
	`DHD_ERROR
(("%s: faûed %d\n", 
__FUNCTION__
, 
ªt
));

232  
ªt
;

233 
	}
}

235 
	$wl_™droid_£t_su•ídmode
(
√t_devi˚
 *
dev
, *
comm™d
, 
tŸÆ_Àn
)

237 
ªt
 = 0;

239 #i‡!
	`deföed
(
CONFIG_HAS_EARLYSUSPEND
Ë|| !deföed(
DHD_USE_EARLYSUSPEND
)

240 
su•íd_Êag
;

242 
su•íd_Êag
 = *(
comm™d
 + 
	`°æí
(
CMD_SETSUSPENDMODE
) + 1) - '0';

244 i‡(
su•íd_Êag
 != 0)

245 
su•íd_Êag
 = 1;

247 i‡(!(
ªt
 = 
	`√t_os_£t_su•íd
(
dev
, 
su•íd_Êag
, 0)))

248 
	`DHD_INFO
(("%s: Su•íd Modê%d\n", 
__FUNCTION__
, 
su•íd_Êag
));

250 
	`DHD_ERROR
(("%s: faûed %d\n", 
__FUNCTION__
, 
ªt
));

252  
ªt
;

253 
	}
}

255 
	$wl_™droid_gë_b™d
(
√t_devi˚
 *
dev
, *
comm™d
, 
tŸÆ_Àn
)

257 
uöt
 
b™d
;

258 
byãs_wrôãn
;

259 
îr‹
;

261 
îr‹
 = 
	`wldev_gë_b™d
(
dev
, &
b™d
);

262 i‡(
îr‹
)

264 
byãs_wrôãn
 = 
	`¢¥ötf
(
comm™d
, 
tŸÆ_Àn
, "B™d %d", 
b™d
);

265  
byãs_wrôãn
;

266 
	}
}

270 #i‡
deföed
(
PNO_SUPPORT
Ë&& !deföed(
WL_SCHED_SCAN
)

271 
	$wl_™droid_£t_≤o_£tup
(
√t_devi˚
 *
dev
, *
comm™d
, 
tŸÆ_Àn
)

273 
wlc_ssid_t
 
ssids_loˇl
[
MAX_PFN_LIST_COUNT
];

274 
ªs
 = -1;

275 
nssid
 = 0;

276 
cmd_év_t
 *
cmd_év_ãmp
;

277 *
°r_±r
;

278 
év_size_À·
;

279 
≤o_time
 = 0;

280 
≤o_ª≥©
 = 0;

281 
≤o_‰eq_expo_max
 = 0;

283 #ifde‡
PNO_SET_DEBUG


284 
i
;

285 
≤o_ö_exam∂e
[] = {

304 
	`DHD_INFO
(("%s: comm™d=%s,Üí=%d\n", 
__FUNCTION__
, 
comm™d
, 
tŸÆ_Àn
));

306 i‡(
tŸÆ_Àn
 < (
	`°æí
(
CMD_PNOSETUP_SET
Ë+ (
cmd_év_t
))) {

307 
	`DHD_ERROR
(("%†¨gumít=%dÜes†mö size\n", 
__FUNCTION__
, 
tŸÆ_Àn
));

308 
exô_¥oc
;

312 #ifde‡
PNO_SET_DEBUG


313 
	`mem˝y
(
comm™d
, 
≤o_ö_exam∂e
, (pno_in_example));

314 
i
 = 0; i < (
≤o_ö_exam∂e
); i++)

315 
	`¥ötf
("%02X ", 
comm™d
[
i
]);

316 
	`¥ötf
("\n");

317 
tŸÆ_Àn
 = (
≤o_ö_exam∂e
);

320 
°r_±r
 = 
comm™d
 + 
	`°æí
(
CMD_PNOSETUP_SET
);

321 
év_size_À·
 = 
tŸÆ_Àn
 - 
	`°æí
(
CMD_PNOSETUP_SET
);

323 
cmd_év_ãmp
 = (
cmd_év_t
 *)
°r_±r
;

324 
	`mem£t
(
ssids_loˇl
, 0, (ssids_local));

326 i‡((
cmd_év_ãmp
->
¥efix
 =
PNO_TLV_PREFIX
) &&

327 (
cmd_év_ãmp
->
vîsi⁄
 =
PNO_TLV_VERSION
) &&

328 (
cmd_év_ãmp
->
subvî
 =
PNO_TLV_SUBVERSION
)) {

330 
°r_±r
 +(
cmd_év_t
);

331 
év_size_À·
 -(
cmd_év_t
);

333 i‡((
nssid
 = 
	`wl_iw_∑r£_ssid_li°_év
(&
°r_±r
, 
ssids_loˇl
,

334 
MAX_PFN_LIST_COUNT
, &
év_size_À·
)) <= 0) {

335 
	`DHD_ERROR
(("SSID i†nŸÖª£¡ed o∏c‹ru±edÑë=%d\n", 
nssid
));

336 
exô_¥oc
;

338 i‡((
°r_±r
[0] !
PNO_TLV_TYPE_TIME
Ë|| (
év_size_À·
 <= 1)) {

339 
	`DHD_ERROR
(("%s scan duration corrupted field size %d\n",

340 
__FUNCTION__
, 
év_size_À·
));

341 
exô_¥oc
;

343 
°r_±r
++;

344 
≤o_time
 = 
	`sim∂e_°πoul
(
°r_±r
, &str_ptr, 16);

345 
	`DHD_INFO
(("%s:Öno_time=%d\n", 
__FUNCTION__
, 
≤o_time
));

347 i‡(
°r_±r
[0] != 0) {

348 i‡((
°r_±r
[0] !
PNO_TLV_FREQ_REPEAT
)) {

349 
	`DHD_ERROR
(("%sÖnoÑepeat : corrupted field\n",

350 
__FUNCTION__
));

351 
exô_¥oc
;

353 
°r_±r
++;

354 
≤o_ª≥©
 = 
	`sim∂e_°πoul
(
°r_±r
, &str_ptr, 16);

355 
	`DHD_INFO
(("%†:gŸÖno_ª≥©=%d\n", 
__FUNCTION__
, 
≤o_ª≥©
));

356 i‡(
°r_±r
[0] !
PNO_TLV_FREQ_EXPO_MAX
) {

357 
	`DHD_ERROR
(("%s FREQ_EXPO_MAX corrupted field size\n",

358 
__FUNCTION__
));

359 
exô_¥oc
;

361 
°r_±r
++;

362 
≤o_‰eq_expo_max
 = 
	`sim∂e_°πoul
(
°r_±r
, &str_ptr, 16);

363 
	`DHD_INFO
(("%s:Öno_freq_expo_max=%d\n",

364 
__FUNCTION__
, 
≤o_‰eq_expo_max
));

368 
	`DHD_ERROR
(("%†gë wr⁄g TLV comm™d\n", 
__FUNCTION__
));

369 
exô_¥oc
;

372 
ªs
 = 
	`dhd_dev_≤o_£t
(
dev
, 
ssids_loˇl
, 
nssid
, 
≤o_time
, 
≤o_ª≥©
, 
≤o_‰eq_expo_max
);

374 
exô_¥oc
:

375  
ªs
;

376 
	}
}

379 
	$wl_™droid_gë_p2p_dev_addr
(
√t_devi˚
 *
ndev
, *
comm™d
, 
tŸÆ_Àn
)

381 
ªt
;

382 
byãs_wrôãn
 = 0;

384 
ªt
 = 
	`wl_cfg80211_gë_p2p_dev_addr
(
ndev
, (
ëhî_addr
*)
comm™d
);

385 i‡(
ªt
)

387 
byãs_wrôãn
 = (
ëhî_addr
);

388  
byãs_wrôãn
;

389 
	}
}

396 
	$wl_™droid_wifi_⁄
(
√t_devi˚
 *
dev
)

398 
ªt
 = 0;

399 
ªåy
 = 
POWERUP_MAX_RETRY
;

401 
	`¥ötk
("%†ö\n", 
__FUNCTION__
);

402 i‡(!
dev
) {

403 
	`DHD_ERROR
(("%s: dev i†nuŒ\n", 
__FUNCTION__
));

404  -
EINVAL
;

407 
	`dhd_√t_if_lock
(
dev
);

408 i‡(!
g_wifi_⁄
) {

410 
	`dhd_cu°omî_gpio_wœn_˘æ
(
WLAN_RESET_ON
);

411 
ªt
 = 
	`sdioh_°¨t
(
NULL
, 0);

412 i‡(
ªt
 == 0)

414 
	`DHD_ERROR
(("\nfailedÅoÖower up wifi chip,Ñetryágain (%dÜeft) **\n\n",

415 
ªåy
+1));

416 
	`dhd_cu°omî_gpio_wœn_˘æ
(
WLAN_RESET_OFF
);

417 } 
ªåy
-- >= 0);

418 i‡(
ªt
 != 0) {

419 
	`DHD_ERROR
(("\nfailedÅoÖower up wifi chip, maxÑetryÑeached **\n\n"));

420 
exô
;

422 
ªt
 = 
	`dhd_dev_ª£t
(
dev
, 
FALSE
);

423 
	`sdioh_°¨t
(
NULL
, 1);

424 i‡(!
ªt
) {

425 i‡(
	`dhd_dev_öô_io˘l
(
dev
) < 0)

426 
ªt
 = -
EFAULT
;

428 #i‡
	`deföed
(
PROP_TXSTATUS
Ë&& !deföed(
PROP_TXSTATUS_VSDB
)

429 
	`dhd_wlfc_öô
(
	`bcmsdh_gë_drvd©a
());

431 
g_wifi_⁄
 = 
TRUE
;

434 
exô
:

435 
	`dhd_√t_if_u∆ock
(
dev
);

437  
ªt
;

438 
	}
}

440 
	$wl_™droid_wifi_off
(
√t_devi˚
 *
dev
)

442 
ªt
 = 0;

444 
	`¥ötk
("%†ö\n", 
__FUNCTION__
);

445 i‡(!
dev
) {

446 
	`DHD_TRACE
(("%s: dev i†nuŒ\n", 
__FUNCTION__
));

447  -
EINVAL
;

450 
	`dhd_√t_if_lock
(
dev
);

451 i‡(
g_wifi_⁄
) {

452 #i‡
	`deföed
(
PROP_TXSTATUS
Ë&& !deföed(
PROP_TXSTATUS_VSDB
)

453 
	`dhd_wlfc_deöô
(
	`bcmsdh_gë_drvd©a
());

455 
ªt
 = 
	`dhd_dev_ª£t
(
dev
, 
TRUE
);

456 
	`sdioh_°›
(
NULL
);

457 
	`dhd_cu°omî_gpio_wœn_˘æ
(
WLAN_RESET_OFF
);

458 
g_wifi_⁄
 = 
FALSE
;

460 
	`dhd_√t_if_u∆ock
(
dev
);

462  
ªt
;

463 
	}
}

465 
	$wl_™droid_£t_fw∑th
(
√t_devi˚
 *
√t
, *
comm™d
, 
tŸÆ_Àn
)

467 i‡((
	`°æí
(
comm™d
Ë- såÀn(
CMD_SETFWPATH
)Ë> 
MOD_PARAM_PATHLEN
)

469 
	`bcm_°∫˝y_s
(
fw_∑th
, (fw_path),

470 
comm™d
 + 
	`°æí
(
CMD_SETFWPATH
Ë+ 1, 
MOD_PARAM_PATHLEN
 - 1);

471 i‡(
	`°r°r
(
fw_∑th
, "≠°a"Ë!
NULL
) {

472 
	`DHD_INFO
(("GOT APSTA FIRMWARE\n"));

473 
≠_fw_lﬂded
 = 
TRUE
;

475 
	`DHD_INFO
(("GOT STA FIRMWARE\n"));

476 
≠_fw_lﬂded
 = 
FALSE
;

479 
	}
}

486 
	$wl_™droid_£t_pmk
(
√t_devi˚
 *
dev
, *
comm™d
, 
tŸÆ_Àn
)

488 
uch¨
 
pmk
[33];

489 
îr‹
 = 0;

490 
smbuf
[
WLC_IOCTL_SMLEN
];

491 #ifde‡
OKC_DEBUG


492 
i
 = 0;

495 
	`bzîo
(
pmk
, (pmk));

496 
	`mem˝y
((*)
pmk
, 
comm™d
 + 
	`°æí
("SET_PMK "), 32);

497 
îr‹
 = 
	`wldev_iov¨_£tbuf
(
dev
, "okc_öfo_pmk", 
pmk
, 32, 
smbuf
, (smbuf), 
NULL
);

498 i‡(
îr‹
) {

499 
	`DHD_ERROR
(("FaûedÅÿ£àPMK f‹ OKC,Éº‹ = %d\n", 
îr‹
));

501 #ifde‡
OKC_DEBUG


502 
	`DHD_ERROR
(("PMK is "));

503 
i
 = 0; i < 32; i++)

504 
	`DHD_ERROR
(("%02X ", 
pmk
[
i
]));

506 
	`DHD_ERROR
(("\n"));

508  
îr‹
;

509 
	}
}

512 
	$wl_™droid_okc_íabÀ
(
√t_devi˚
 *
dev
, *
comm™d
, 
tŸÆ_Àn
)

514 
îr‹
 = 0;

515 
okc_íabÀ
 = 0;

517 
okc_íabÀ
 = 
comm™d
[
	`°æí
(
CMD_OKC_ENABLE
) + 1] - '0';

518 
îr‹
 = 
	`wldev_iov¨_£töt
(
dev
, "okc_íabÀ", 
okc_íabÀ
);

519 i‡(
îr‹
) {

520 
	`DHD_ERROR
(("FailedÅo %s OKC,Érror = %d\n",

521 
okc_íabÀ
 ? "íabÀ" : "dißbÀ", 
îr‹
));

524  
îr‹
;

525 
	}
}

529 
	$wl_™droid_£t_rﬂm_mode
(
√t_devi˚
 *
dev
, *
comm™d
, 
tŸÆ_Àn
)

531 
îr‹
 = 0;

532 
mode
 = 0;

534 i‡(
	`ssˇnf
(
comm™d
, "%*†%d", &
mode
) != 1) {

535 
	`DHD_ERROR
(("%s: FaûedÅÿgë P¨amëî\n", 
__FUNCTION__
));

539 
îr‹
 = 
	`wldev_iov¨_£töt
(
dev
, "rﬂm_off", 
mode
);

540 i‡(
îr‹
) {

541 
	`DHD_ERROR
(("%s: FailedÅo setÑoaming Mode %d,Érror = %d\n",

542 
__FUNCTION__
, 
mode
, 
îr‹
));

546 
	`DHD_ERROR
(("%s: succeededÅo setÑoaming Mode %d,Érror = %d\n",

547 
__FUNCTION__
, 
mode
, 
îr‹
));

549 
	}
}

551 
	$wl_™droid_¥iv_cmd
(
√t_devi˚
 *
√t
, 
i‰eq
 *
i‰
, 
cmd
)

553 
	#PRIVATE_COMMAND_MAX_LEN
 8192

	)

554 
ªt
 = 0;

555 *
comm™d
 = 
NULL
;

556 
byãs_wrôãn
 = 0;

557 
™droid_wifi_¥iv_cmd
 
¥iv_cmd
;

559 
	`√t_os_wake_lock
(
√t
);

561 i‡(!
i‰
->
i‰_d©a
) {

562 
ªt
 = -
EINVAL
;

563 
exô
;

565 i‡(
	`c›y_‰om_u£r
(&
¥iv_cmd
, 
i‰
->
i‰_d©a
, (
™droid_wifi_¥iv_cmd
))) {

566 
ªt
 = -
EFAULT
;

567 
exô
;

569 i‡(
¥iv_cmd
.
tŸÆ_Àn
 > 
PRIVATE_COMMAND_MAX_LEN
)

571 
	`DHD_ERROR
(("%s:Åoÿl⁄gÖrüvã comm™d\n", 
__FUNCTION__
));

572 
ªt
 = -
EINVAL
;

574 
comm™d
 = 
	`kmÆloc
(
¥iv_cmd
.
tŸÆ_Àn
, 
GFP_KERNEL
);

575 i‡(!
comm™d
)

577 
	`DHD_ERROR
(("%s: faûedÅÿÆloˇã mem‹y\n", 
__FUNCTION__
));

578 
ªt
 = -
ENOMEM
;

579 
exô
;

581 i‡(
	`c›y_‰om_u£r
(
comm™d
, 
¥iv_cmd
.
buf
,Öriv_cmd.
tŸÆ_Àn
)) {

582 
ªt
 = -
EFAULT
;

583 
exô
;

585 
	`DHD_INFO
(("%s: AndroidÖriv©êcmd \"%s\" o¿%s\n", 
__FUNCTION__
, 
comm™d
, 
i‰
->
i‰_«me
));

587 i‡(
	`°∫icmp
(
comm™d
, 
CMD_START
, 
	`°æí
(CMD_START)) == 0) {

588 
	`DHD_INFO
(("%s, Re˚ivedÑeguœ∏START comm™d\n", 
__FUNCTION__
));

589 
byãs_wrôãn
 = 
	`wl_™droid_wifi_⁄
(
√t
);

591 i‡(
	`°∫icmp
(
comm™d
, 
CMD_SETFWPATH
, 
	`°æí
(CMD_SETFWPATH)) == 0) {

592 
byãs_wrôãn
 = 
	`wl_™droid_£t_fw∑th
(
√t
, 
comm™d
, 
¥iv_cmd
.
tŸÆ_Àn
);

595 i‡(!
g_wifi_⁄
) {

596 
	`DHD_ERROR
(("%s: IgnoreÖrivate cmd \"%s\" - iface %s is down\n",

597 
__FUNCTION__
, 
comm™d
, 
i‰
->
i‰_«me
));

598 
ªt
 = 0;

599 
exô
;

602 i‡(
	`°∫icmp
(
comm™d
, 
CMD_STOP
, 
	`°æí
(CMD_STOP)) == 0) {

603 
byãs_wrôãn
 = 
	`wl_™droid_wifi_off
(
√t
);

605 i‡(
	`°∫icmp
(
comm™d
, 
CMD_SCAN_ACTIVE
, 
	`°æí
(CMD_SCAN_ACTIVE)) == 0) {

608 i‡(
	`°∫icmp
(
comm™d
, 
CMD_SCAN_PASSIVE
, 
	`°æí
(CMD_SCAN_PASSIVE)) == 0) {

611 i‡(
	`°∫icmp
(
comm™d
, 
CMD_RSSI
, 
	`°æí
(CMD_RSSI)) == 0) {

612 
byãs_wrôãn
 = 
	`wl_™droid_gë_rssi
(
√t
, 
comm™d
, 
¥iv_cmd
.
tŸÆ_Àn
);

614 i‡(
	`°∫icmp
(
comm™d
, 
CMD_LINKSPEED
, 
	`°æí
(CMD_LINKSPEED)) == 0) {

615 
byãs_wrôãn
 = 
	`wl_™droid_gë_lök_•ìd
(
√t
, 
comm™d
, 
¥iv_cmd
.
tŸÆ_Àn
);

617 #ifde‡
PKT_FILTER_SUPPORT


618 i‡(
	`°∫icmp
(
comm™d
, 
CMD_RXFILTER_START
, 
	`°æí
(CMD_RXFILTER_START)) == 0) {

619 
byãs_wrôãn
 = 
	`√t_os_íabÀ_∑ckë_fûãr
(
√t
, 1);

621 i‡(
	`°∫icmp
(
comm™d
, 
CMD_RXFILTER_STOP
, 
	`°æí
(CMD_RXFILTER_STOP)) == 0) {

622 
byãs_wrôãn
 = 
	`√t_os_íabÀ_∑ckë_fûãr
(
√t
, 0);

624 i‡(
	`°∫icmp
(
comm™d
, 
CMD_RXFILTER_ADD
, 
	`°æí
(CMD_RXFILTER_ADD)) == 0) {

625 
fûãr_num
 = *(
comm™d
 + 
	`°æí
(
CMD_RXFILTER_ADD
) + 1) - '0';

626 
byãs_wrôãn
 = 
	`√t_os_rxfûãr_add_ªmove
(
√t
, 
TRUE
, 
fûãr_num
);

628 i‡(
	`°∫icmp
(
comm™d
, 
CMD_RXFILTER_REMOVE
, 
	`°æí
(CMD_RXFILTER_REMOVE)) == 0) {

629 
fûãr_num
 = *(
comm™d
 + 
	`°æí
(
CMD_RXFILTER_REMOVE
) + 1) - '0';

630 
byãs_wrôãn
 = 
	`√t_os_rxfûãr_add_ªmove
(
√t
, 
FALSE
, 
fûãr_num
);

633 i‡(
	`°∫icmp
(
comm™d
, 
CMD_BTCOEXSCAN_START
, 
	`°æí
(CMD_BTCOEXSCAN_START)) == 0) {

636 i‡(
	`°∫icmp
(
comm™d
, 
CMD_BTCOEXSCAN_STOP
, 
	`°æí
(CMD_BTCOEXSCAN_STOP)) == 0) {

639 i‡(
	`°∫icmp
(
comm™d
, 
CMD_BTCOEXMODE
, 
	`°æí
(CMD_BTCOEXMODE)) == 0) {

640 #ifde‡
WL_CFG80211


641 
byãs_wrôãn
 = 
	`wl_cfg80211_£t_btc€x_dh˝
(
√t
, 
comm™d
);

643 #ifde‡
PKT_FILTER_SUPPORT


644 
uöt
 
mode
 = *(
comm™d
 + 
	`°æí
(
CMD_BTCOEXMODE
) + 1) - '0';

646 i‡(
mode
 == 1)

647 
	`√t_os_íabÀ_∑ckë_fûãr
(
√t
, 0);

649 
	`√t_os_íabÀ_∑ckë_fûãr
(
√t
, 1);

653 i‡(
	`°∫icmp
(
comm™d
, 
CMD_SETSUSPENDOPT
, 
	`°æí
(CMD_SETSUSPENDOPT)) == 0) {

654 
byãs_wrôãn
 = 
	`wl_™droid_£t_su•íd›t
(
√t
, 
comm™d
, 
¥iv_cmd
.
tŸÆ_Àn
);

656 i‡(
	`°∫icmp
(
comm™d
, 
CMD_SETSUSPENDMODE
, 
	`°æí
(CMD_SETSUSPENDMODE)) == 0) {

657 
byãs_wrôãn
 = 
	`wl_™droid_£t_su•ídmode
(
√t
, 
comm™d
, 
¥iv_cmd
.
tŸÆ_Àn
);

659 i‡(
	`°∫icmp
(
comm™d
, 
CMD_SETBAND
, 
	`°æí
(CMD_SETBAND)) == 0) {

660 
uöt
 
b™d
 = *(
comm™d
 + 
	`°æí
(
CMD_SETBAND
) + 1) - '0';

661 #ifde‡
WL_HOST_BAND_MGMT


662 i‡(
	`wl_cfg80211_£t_b™d
(
√t
, 
b™d
) < 0) {

663 
byãs_wrôãn
 = -1;

664 
exô
;

666 i‡(
b™d
 =
WLC_BAND_AUTO
)

667 
byãs_wrôãn
 = 
	`wldev_£t_b™d
(
√t
, 
b™d
);

669 
byãs_wrôãn
 = 
	`wldev_£t_b™d
(
√t
, 
b™d
);

672 i‡(
	`°∫icmp
(
comm™d
, 
CMD_GETBAND
, 
	`°æí
(CMD_GETBAND)) == 0) {

673 
byãs_wrôãn
 = 
	`wl_™droid_gë_b™d
(
√t
, 
comm™d
, 
¥iv_cmd
.
tŸÆ_Àn
);

675 #ifde‡
WL_CFG80211


677 i‡(
	`°∫icmp
(
comm™d
, 
CMD_COUNTRY
, 
	`°æí
(CMD_COUNTRY)) == 0) {

678 *
cou¡ry_code
 = 
comm™d
 + 
	`°æí
(
CMD_COUNTRY
) + 1;

679 
byãs_wrôãn
 = 
	`wldev_£t_cou¡ry
(
√t
, 
cou¡ry_code
);

682 #i‡
	`deföed
(
PNO_SUPPORT
Ë&& !deföed(
WL_SCHED_SCAN
)

683 i‡(
	`°∫icmp
(
comm™d
, 
CMD_PNOSSIDCLR_SET
, 
	`°æí
(CMD_PNOSSIDCLR_SET)) == 0) {

684 
byãs_wrôãn
 = 
	`dhd_dev_≤o_ª£t
(
√t
);

686 i‡(
	`°∫icmp
(
comm™d
, 
CMD_PNOSETUP_SET
, 
	`°æí
(CMD_PNOSETUP_SET)) == 0) {

687 
byãs_wrôãn
 = 
	`wl_™droid_£t_≤o_£tup
(
√t
, 
comm™d
, 
¥iv_cmd
.
tŸÆ_Àn
);

689 i‡(
	`°∫icmp
(
comm™d
, 
CMD_PNOENABLE_SET
, 
	`°æí
(CMD_PNOENABLE_SET)) == 0) {

690 
uöt
 
p‚_íabÀd
 = *(
comm™d
 + 
	`°æí
(
CMD_PNOENABLE_SET
) + 1) - '0';

691 
byãs_wrôãn
 = 
	`dhd_dev_≤o_íabÀ
(
√t
, 
p‚_íabÀd
);

694 i‡(
	`°∫icmp
(
comm™d
, 
CMD_P2P_DEV_ADDR
, 
	`°æí
(CMD_P2P_DEV_ADDR)) == 0) {

695 
byãs_wrôãn
 = 
	`wl_™droid_gë_p2p_dev_addr
(
√t
, 
comm™d
, 
¥iv_cmd
.
tŸÆ_Àn
);

697 i‡(
	`°∫icmp
(
comm™d
, 
CMD_P2P_SET_NOA
, 
	`°æí
(CMD_P2P_SET_NOA)) == 0) {

698 
skù
 = 
	`°æí
(
CMD_P2P_SET_NOA
) + 1;

699 
byãs_wrôãn
 = 
	`wl_cfg80211_£t_p2p_nﬂ
(
√t
, 
comm™d
 + 
skù
,

700 
¥iv_cmd
.
tŸÆ_Àn
 - 
skù
);

702 #i‡!
deföed
 
WL_ENABLE_P2P_IF


703 i‡(
	`°∫icmp
(
comm™d
, 
CMD_P2P_GET_NOA
, 
	`°æí
(CMD_P2P_GET_NOA)) == 0) {

704 
byãs_wrôãn
 = 
	`wl_cfg80211_gë_p2p_nﬂ
(
√t
, 
comm™d
, 
¥iv_cmd
.
tŸÆ_Àn
);

707 i‡(
	`°∫icmp
(
comm™d
, 
CMD_P2P_SET_PS
, 
	`°æí
(CMD_P2P_SET_PS)) == 0) {

708 
skù
 = 
	`°æí
(
CMD_P2P_SET_PS
) + 1;

709 
byãs_wrôãn
 = 
	`wl_cfg80211_£t_p2p_ps
(
√t
, 
comm™d
 + 
skù
,

710 
¥iv_cmd
.
tŸÆ_Àn
 - 
skù
);

712 #ifde‡
WL_CFG80211


713 i‡(
	`°∫icmp
(
comm™d
, 
CMD_SET_AP_WPS_P2P_IE
,

714 
	`°æí
(
CMD_SET_AP_WPS_P2P_IE
)) == 0) {

715 
skù
 = 
	`°æí
(
CMD_SET_AP_WPS_P2P_IE
) + 3;

716 
byãs_wrôãn
 = 
	`wl_cfg80211_£t_wps_p2p_õ
(
√t
, 
comm™d
 + 
skù
,

717 
¥iv_cmd
.
tŸÆ_Àn
 - 
skù
, *(
comm™d
 + skip - 2) - '0');

720 i‡(
	`°∫icmp
(
comm™d
, 
CMD_OKC_SET_PMK
, 
	`°æí
(CMD_OKC_SET_PMK)) == 0)

721 
byãs_wrôãn
 = 
	`wl_™droid_£t_pmk
(
√t
, 
comm™d
, 
¥iv_cmd
.
tŸÆ_Àn
);

722 i‡(
	`°∫icmp
(
comm™d
, 
CMD_OKC_ENABLE
, 
	`°æí
(CMD_OKC_ENABLE)) == 0)

723 
byãs_wrôãn
 = 
	`wl_™droid_okc_íabÀ
(
√t
, 
comm™d
, 
¥iv_cmd
.
tŸÆ_Àn
);

724 i‡(
	`°∫icmp
(
comm™d
, 
CMD_SETROAMMODE
, 
	`°æí
(CMD_SETROAMMODE)) == 0)

725 
byãs_wrôãn
 = 
	`wl_™droid_£t_rﬂm_mode
(
√t
, 
comm™d
, 
¥iv_cmd
.
tŸÆ_Àn
);

727 
	`DHD_ERROR
(("Unknow¿PRIVATE comm™d %†- ign‹ed\n", 
comm™d
));

728 
	`¢¥ötf
(
comm™d
, 3, "OK");

729 
byãs_wrôãn
 = 
	`°æí
("OK");

732 i‡(
byãs_wrôãn
 >= 0) {

733 i‡((
byãs_wrôãn
 =0Ë&& (
¥iv_cmd
.
tŸÆ_Àn
 > 0))

734 
comm™d
[0] = '\0';

735 i‡(
byãs_wrôãn
 >
¥iv_cmd
.
tŸÆ_Àn
) {

736 
	`DHD_ERROR
(("%s: byãs_wrôã¿%d\n", 
__FUNCTION__
, 
byãs_wrôãn
));

737 
byãs_wrôãn
 = 
¥iv_cmd
.
tŸÆ_Àn
;

739 
byãs_wrôãn
++;

741 
¥iv_cmd
.
u£d_Àn
 = 
byãs_wrôãn
;

742 i‡(
	`c›y_to_u£r
(
¥iv_cmd
.
buf
, 
comm™d
, 
byãs_wrôãn
)) {

743 
	`DHD_ERROR
(("%s: faûedÅÿc›y d©®tÿu£∏buf„r\n", 
__FUNCTION__
));

744 
ªt
 = -
EFAULT
;

748 
ªt
 = 
byãs_wrôãn
;

751 
exô
:

752 
	`√t_os_wake_u∆ock
(
√t
);

753 i‡(
comm™d
) {

754 
	`k‰ì
(
comm™d
);

757  
ªt
;

758 
	}
}

760 
	$wl_™droid_öô
()

762 
ªt
 = 0;

764 
dhd_msg_Àvñ
 |
DHD_ERROR_VAL
;

765 #ifde‡
ENABLE_INSMOD_NO_FW_LOAD


766 
dhd_dow∆ﬂd_fw_⁄_drivîlﬂd
 = 
FALSE
;

768 #i‡
	`deföed
(
CUSTOMER_HW2
)

769 i‡(!
iÁ˚_«me
[0]) {

770 
	`mem£t
(
iÁ˚_«me
, 0, 
IFNAMSIZ
);

771 
	`bcm_°∫˝y_s
(
iÁ˚_«me
, 
IFNAMSIZ
, "wlan", IFNAMSIZ);

776  
ªt
;

777 
	}
}

779 
	$wl_™droid_exô
()

781 
ªt
 = 0;

784  
ªt
;

785 
	}
}

787 
	$wl_™droid_po°_öô
()

789 i‡(!
dhd_dow∆ﬂd_fw_⁄_drivîlﬂd
) {

791 
	`dhd_cu°omî_gpio_wœn_˘æ
(
WLAN_RESET_OFF
);

792 
g_wifi_⁄
 = 0;

794 
	}
}

800 #i‡
deföed
(
CONFIG_WIFI_CONTROL_FUNC
)

802 
	gg_wifidev_ªgi°îed
 = 0;

803 
£m≠h‹e
 
	gwifi_c⁄åﬁ_£m
;

804 
wifi_∂©f‹m_d©a
 *
	gwifi_c⁄åﬁ_d©a
 = 
NULL
;

805 
ªsour˚
 *
	gwifi_úqªs
 = 
NULL
;

807 
wifi_add_dev
();

808 
wifi_dñ_dev
();

810 
	$wl_™droid_wifi˘æ_func_add
()

812 
ªt
 = 0;

813 
	`£ma_öô
(&
wifi_c⁄åﬁ_£m
, 0);

815 
ªt
 = 
	`wifi_add_dev
();

816 i‡(
ªt
) {

817 
	`DHD_ERROR
(("%s:Öœtf‹m_drivî_ªgi°î faûed\n", 
__FUNCTION__
));

818  
ªt
;

820 
g_wifidev_ªgi°îed
 = 1;

823 i‡(
	`down_timeout
(&
wifi_c⁄åﬁ_£m
, 
	`m£cs_to_jiffõs
(1000)) != 0) {

824 
ªt
 = -
EINVAL
;

825 
	`DHD_ERROR
(("%s:Öœtf‹m_drivî_ªgi°îÅimeout\n", 
__FUNCTION__
));

828  
ªt
;

829 
	}
}

831 
	$wl_™droid_wifi˘æ_func_dñ
()

833 i‡(
g_wifidev_ªgi°îed
)

835 
	`wifi_dñ_dev
();

836 
g_wifidev_ªgi°îed
 = 0;

838 
	}
}

840 * 
	$wl_™droid_¥óŒoc
(
£˘i⁄
, 
size
)

842 *
Æloc_±r
 = 
NULL
;

843 i‡(
wifi_c⁄åﬁ_d©a
 && wifi_c⁄åﬁ_d©a->
mem_¥óŒoc
) {

844 
Æloc_±r
 = 
wifi_c⁄åﬁ_d©a
->
	`mem_¥óŒoc
(
£˘i⁄
, 
size
);

845 i‡(
Æloc_±r
) {

846 
	`DHD_INFO
(("suc˚s†Ælo¯£˘i⁄ %d\n", 
£˘i⁄
));

847 i‡(
size
 != 0L)

848 
	`bzîo
(
Æloc_±r
, 
size
);

849  
Æloc_±r
;

853 
	`DHD_ERROR
(("ˇn'àÆlo¯£˘i⁄ %d\n", 
£˘i⁄
));

854  
NULL
;

855 
	}
}

857 
	$wifi_gë_úq_numbî
(*
úq_Êags_±r
)

859 i‡(
wifi_úqªs
) {

860 *
úq_Êags_±r
 = 
wifi_úqªs
->
Êags
 & 
IRQF_TRIGGER_MASK
;

861  ()
wifi_úqªs
->
°¨t
;

863 #ifde‡
CUSTOM_OOB_GPIO_NUM


864  
CUSTOM_OOB_GPIO_NUM
;

868 
	}
}

870 
	$wifi_£t_powî
(
⁄
, 
m£c
)

872 
	`DHD_ERROR
(("%†%d\n", 
__FUNCTION__
, 
⁄
));

873 i‡(
wifi_c⁄åﬁ_d©a
 && wifi_c⁄åﬁ_d©a->
£t_powî
) {

874 
wifi_c⁄åﬁ_d©a
->
	`£t_powî
(
⁄
);

876 i‡(
m£c
)

877 
	`m¶ìp
(
m£c
);

879 
	}
}

881 #i‡(
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 35))

882 
	$wifi_gë_mac_addr
(*
buf
)

884 
	`DHD_ERROR
(("%s\n", 
__FUNCTION__
));

885 i‡(!
buf
)

886  -
EINVAL
;

887 i‡(
wifi_c⁄åﬁ_d©a
 && wifi_c⁄åﬁ_d©a->
gë_mac_addr
) {

888  
wifi_c⁄åﬁ_d©a
->
	`gë_mac_addr
(
buf
);

890  -
EOPNOTSUPP
;

891 
	}
}

894 #i‡(
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 39))

895 *
	$wifi_gë_cou¡ry_code
(*
ccode
)

897 
	`DHD_TRACE
(("%s\n", 
__FUNCTION__
));

898 i‡(!
ccode
)

899  
NULL
;

900 i‡(
wifi_c⁄åﬁ_d©a
 && wifi_c⁄åﬁ_d©a->
gë_cou¡ry_code
) {

901  
wifi_c⁄åﬁ_d©a
->
	`gë_cou¡ry_code
(
ccode
);

903  
NULL
;

904 
	}
}

907 
	$wifi_£t_ˇrddëe˘
(
⁄
)

909 
	`DHD_ERROR
(("%†%d\n", 
__FUNCTION__
, 
⁄
));

910 i‡(
wifi_c⁄åﬁ_d©a
 && wifi_c⁄åﬁ_d©a->
£t_ˇrddëe˘
) {

911 
wifi_c⁄åﬁ_d©a
->
	`£t_ˇrddëe˘
(
⁄
);

914 
	}
}

916 
	$wifi_¥obe
(
∂©f‹m_devi˚
 *
pdev
)

918 
wifi_∂©f‹m_d©a
 *
wifi_˘æ
 =

919 (
wifi_∂©f‹m_d©a
 *)(
pdev
->
dev
.
∂©f‹m_d©a
);

921 
wifi_úqªs
 = 
	`∂©f‹m_gë_ªsour˚_by«me
(
pdev
, 
IORESOURCE_IRQ
, "bcmdhd_wlan_irq");

922 i‡(
wifi_úqªs
 =
NULL
)

923 
wifi_úqªs
 = 
	`∂©f‹m_gë_ªsour˚_by«me
(
pdev
,

924 
IORESOURCE_IRQ
, "bcm4329_wlan_irq");

925 
wifi_c⁄åﬁ_d©a
 = 
wifi_˘æ
;

926 
	`wifi_£t_powî
(1, 0);

927 
	`wifi_£t_ˇrddëe˘
(1);

929 
	`up
(&
wifi_c⁄åﬁ_£m
);

931 
	}
}

933 
	$wifi_ªmove
(
∂©f‹m_devi˚
 *
pdev
)

935 
wifi_∂©f‹m_d©a
 *
wifi_˘æ
 =

936 (
wifi_∂©f‹m_d©a
 *)(
pdev
->
dev
.
∂©f‹m_d©a
);

938 
	`DHD_ERROR
(("## %s\n", 
__FUNCTION__
));

939 
wifi_c⁄åﬁ_d©a
 = 
wifi_˘æ
;

941 
	`wifi_£t_powî
(0, 
WIFI_TURNOFF_DELAY
);

942 
	`wifi_£t_ˇrddëe˘
(0);

944 
	`up
(&
wifi_c⁄åﬁ_£m
);

946 
	}
}

948 
	$wifi_su•íd
(
∂©f‹m_devi˚
 *
pdev
, 
pm_mesßge_t
 
°©e
)

950 
	`DHD_TRACE
(("##> %s\n", 
__FUNCTION__
));

951 #i‡
	`deföed
(
CONFIG_ARCH_RHEA
Ë|| deföed(
CONFIG_ARCH_CAPRI
)

952 i‡(
	`dhd_os_check_wakñock
(
	`bcmsdh_gë_drvd©a
()))

953  -
EBUSY
;

955 #i‡(
LINUX_VERSION_CODE
 <
	`KERNEL_VERSION
(2, 6, 39)Ë&& 
	`deföed
(
OOB_INTR_ONLY
) && 1

956 
	`bcmsdh_oob_öå_£t
(0);

959 
	}
}

961 
	$wifi_ªsume
(
∂©f‹m_devi˚
 *
pdev
)

963 
	`DHD_TRACE
(("##> %s\n", 
__FUNCTION__
));

964 #i‡(
LINUX_VERSION_CODE
 <
	`KERNEL_VERSION
(2, 6, 39)Ë&& 
	`deföed
(
OOB_INTR_ONLY
) && 1

965 i‡(
	`dhd_os_check_if_up
(
	`bcmsdh_gë_drvd©a
()))

966 
	`bcmsdh_oob_öå_£t
(1);

969 
	}
}

971 
∂©f‹m_drivî
 
	gwifi_devi˚
 = {

972 .
¥obe
 = 
wifi_¥obe
,

973 .
	gªmove
 = 
wifi_ªmove
,

974 .
	gsu•íd
 = 
wifi_su•íd
,

975 .
	gªsume
 = 
wifi_ªsume
,

976 .
	gdrivî
 = {

977 .
«me
 = "bcmdhd_wlan",

981 
∂©f‹m_drivî
 
	gwifi_devi˚_Àgacy
 = {

982 .
¥obe
 = 
wifi_¥obe
,

983 .
	gªmove
 = 
wifi_ªmove
,

984 .
	gsu•íd
 = 
wifi_su•íd
,

985 .
	gªsume
 = 
wifi_ªsume
,

986 .
	gdrivî
 = {

987 .
«me
 = "bcm4329_wlan",

991 
	$wifi_add_dev
()

993 
ªt
 = 0;

994 
	`DHD_TRACE
(("## CallingÖlatform_driver_register\n"));

995 
ªt
 = 
	`∂©f‹m_drivî_ªgi°î
(&
wifi_devi˚
);

996 i‡(
ªt
)

997  
ªt
;

999 
ªt
 = 
	`∂©f‹m_drivî_ªgi°î
(&
wifi_devi˚_Àgacy
);

1000  
ªt
;

1001 
	}
}

1003 
	$wifi_dñ_dev
()

1005 
	`DHD_TRACE
(("## UnregisterÖlatform_driver_register\n"));

1006 
	`∂©f‹m_drivî_uƒegi°î
(&
wifi_devi˚
);

1007 
	`∂©f‹m_drivî_uƒegi°î
(&
wifi_devi˚_Àgacy
);

1008 
	}
}

	@wl_android.h

27 
	~<löux/moduÀ.h
>

28 
	~<löux/√tdevi˚.h
>

29 
	~<wldev_comm⁄.h
>

47 
wl_™droid_öô
();

48 
wl_™droid_exô
();

49 
wl_™droid_po°_öô
();

50 
wl_™droid_wifi_⁄
(
√t_devi˚
 *
dev
);

51 
wl_™droid_wifi_off
(
√t_devi˚
 *
dev
);

52 
wl_™droid_¥iv_cmd
(
√t_devi˚
 *
√t
, 
i‰eq
 *
i‰
, 
cmd
);

54 #i‡
deföed
(
CONFIG_WIFI_CONTROL_FUNC
)

55 
wl_™droid_wifi˘æ_func_add
();

56 
wl_™droid_wifi˘æ_func_dñ
();

57 * 
wl_™droid_¥óŒoc
(
£˘i⁄
, 
size
);

59 
wifi_gë_úq_numbî
(*
úq_Êags_±r
);

60 
wifi_£t_powî
(
⁄
, 
m£c
);

61 
wifi_gë_mac_addr
(*
buf
);

62 *
wifi_gë_cou¡ry_code
(*
ccode
);

	@wl_cfg80211.c

27 
	~<ty≥defs.h
>

28 
	~<löuxvî.h
>

29 
	~<o¶.h
>

30 
	~<löux/kî√l.h
>

32 
	~<bcmutûs.h
>

33 
	~<bcmwifi_ch™√ls.h
>

34 
	~<bcmídün.h
>

35 
	~<¥Ÿo/ëhî√t.h
>

36 
	~<¥Ÿo/802.11.h
>

37 
	~<löux/if_¨p.h
>

38 
	~<asm/uac˚ss.h
>

40 
	~<dngl_°©s.h
>

41 
	~<dhd.h
>

42 
	~<dhdio˘l.h
>

43 
	~<wlio˘l.h
>

44 
	~<dhd_cfg80211.h
>

46 
	~<¥Ÿo/ëhî√t.h
>

47 
	~<löux/kî√l.h
>

48 
	~<löux/kthªad.h
>

49 
	~<löux/√tdevi˚.h
>

50 
	~<löux/sched.h
>

51 
	~<löux/ëhîdevi˚.h
>

52 
	~<löux/wúñess.h
>

53 
	~<löux/õì80211.h
>

54 
	~<löux/waô.h
>

55 
	~<√t/cfg80211.h
>

56 
	~<√t/π√éök.h
>

57 
	~<wlio˘l.h
>

58 
	~<wldev_comm⁄.h
>

59 
	~<wl_cfg80211.h
>

60 
	~<wl_cfgp2p.h
>

61 
	~<wl_™droid.h
>

63 #ifde‡
PROP_TXSTATUS


64 
	~<dhd_wlfc.h
>

67 #ifde‡
WL11U


68 #i‚de‡
WL_ENABLE_P2P_IF


74 
	#IW_WSEC_ENABLED
(
w£c
Ë((w£cË& (
WEP_ENABLED
 | 
TKIP_ENABLED
 | 
AES_ENABLED
))

	)

76 
devi˚
 *
	gcfg80211_∑ª¡_dev
 = 
NULL
;

77 
wl_¥iv
 *
	gwlcfg_drv_¥iv
 = 
NULL
;

78 
u32
 
	gwl_dbg_Àvñ
 = 
WL_DBG_ERR
;

80 
	#MAX_WAIT_TIME
 1500

	)

82 #ifde‡
VSDB


84 
	#DEFAULT_SLEEP_TIME_VSDB
 200

	)

85 
	#OFF_CHAN_TIME_THRESHOLD_MS
 200

	)

88 
	#WL_AF_TX_KEEP_PRI_CONNECTION_VSDB
(
wl
) \

90 i‡(
	`wl_gë_drv_°©us
(
wl
, 
CONNECTED
, 
	`wl_to_¥mry_ndev
(wl)) || \

91 
	`wl_gë_drv_°©us
(
wl
, 
CONNECTING
, 
	`wl_to_¥mry_ndev
(wl))) { \

92 
	`m¶ìp
(
DEFAULT_SLEEP_TIME_VSDB
); \

94 } 0)

	)

97 
	#WL_AF_TX_KEEP_PRI_CONNECTION_VSDB
(
wl
)

	)

100 #ifde‡
WL_CFG80211_SYNC_GON


101 
	#WL_DRV_STATUS_SENDING_AF_FRM_EXT
(
wl
) \

102 (
	`wl_gë_drv_°©us_Æl
(
wl
, 
SENDING_ACT_FRM
) || \

103 
	`wl_gë_drv_°©us_Æl
(
wl
, 
WAITING_NEXT_ACT_FRM_LISTEN
))

	)

105 
	#WL_DRV_STATUS_SENDING_AF_FRM_EXT
(
wl
Ë
	`wl_gë_drv_°©us_Æl
(wl, 
SENDING_ACT_FRM
)

	)

108 
	#WL_CHANSPEC_CTL_SB_NONE
 
WL_CHANSPEC_CTL_SB_LLL


	)

111 
	#DNGL_FUNC
(
func
, 
∑ømëîs
Ëfun¯∑ømëîs;

	)

112 
	#COEX_DHCP


	)

114 
	#WLAN_EID_SSID
 0

	)

115 
	#CH_MIN_5G_CHANNEL
 34

	)

116 
	#CH_MIN_2G_CHANNEL
 1

	)

124 c⁄° 
õì80211_ªgdomaö
 
	gbrcm_ªgdom
 = {

125 .
n_ªg_ruÀs
 = 4,

126 .
	gÆpha2
 = "99",

127 .
	gªg_ruÀs
 = {

129 
REG_RULE
(2412-10, 2472+10, 40, 6, 20, 0),

134 
REG_RULE
(2484-10, 2484+10, 20, 6, 20, 0),

136 
REG_RULE
(5150-10, 5350+10, 40, 6, 20, 0),

138 
REG_RULE
(5470-10, 5850+10, 40, 6, 20, 0), }

143 
	#WPS_ID_CONFIG_METHODS
 0x1008

	)

144 
	#WPS_ID_REQ_TYPE
 0x103A

	)

145 
	#WPS_ID_DEVICE_NAME
 0x1011

	)

146 
	#WPS_ID_VERSION
 0x104A

	)

147 
	#WPS_ID_DEVICE_PWD_ID
 0x1012

	)

148 
	#WPS_ID_REQ_DEV_TYPE
 0x106A

	)

149 
	#WPS_ID_SELECTED_REGISTRAR_CONFIG_METHODS
 0x1053

	)

150 
	#WPS_ID_PRIM_DEV_TYPE
 0x1054

	)

153 
	#DEV_PW_DEFAULT
 0x0000

	)

154 
	#DEV_PW_USER_SPECIFIED
 0x0001,

	)

155 
	#DEV_PW_MACHINE_SPECIFIED
 0x0002

	)

156 
	#DEV_PW_REKEY
 0x0003

	)

157 
	#DEV_PW_PUSHBUTTON
 0x0004

	)

158 
	#DEV_PW_REGISTRAR_SPECIFIED
 0x0005

	)

161 
	#WPS_CONFIG_USBA
 0x0001

	)

162 
	#WPS_CONFIG_ETHERNET
 0x0002

	)

163 
	#WPS_CONFIG_LABEL
 0x0004

	)

164 
	#WPS_CONFIG_DISPLAY
 0x0008

	)

165 
	#WPS_CONFIG_EXT_NFC_TOKEN
 0x0010

	)

166 
	#WPS_CONFIG_INT_NFC_TOKEN
 0x0020

	)

167 
	#WPS_CONFIG_NFC_INTERFACE
 0x0040

	)

168 
	#WPS_CONFIG_PUSHBUTTON
 0x0080

	)

169 
	#WPS_CONFIG_KEYPAD
 0x0100

	)

170 
	#WPS_CONFIG_VIRT_PUSHBUTTON
 0x0280

	)

171 
	#WPS_CONFIG_PHY_PUSHBUTTON
 0x0480

	)

172 
	#WPS_CONFIG_VIRT_DISPLAY
 0x2008

	)

173 
	#WPS_CONFIG_PHY_DISPLAY
 0x4008

	)

175 
	#PM_BLOCK
 1

	)

176 
	#PM_ENABLE
 0

	)

179 #i‚de‡
RSSI_OFFSET


180 
	#RSSI_OFFSET
 0

	)

185 
s32
 
wl_‰ame_gë_mgmt
(
u16
 
fc
, c⁄° 
ëhî_addr
 *
da
,

186 c⁄° 
ëhî_addr
 *
ß
, c⁄° ëhî_add∏*
bssid
,

187 
u8
 **
phódî
, 
u32
 *
body_Àn
, u8 *
pbody
);

188 
s32
 
__wl_cfg80211_sˇn
(
wùhy
 *wùhy, 
√t_devi˚
 *
ndev
,

189 
cfg80211_sˇn_ªque°
 *
ªque°
,

190 
cfg80211_ssid
 *
this_ssid
);

191 
s32
 
wl_cfg80211_sˇn
(
wùhy
 *wùhy, 
√t_devi˚
 *
ndev
,

192 
cfg80211_sˇn_ªque°
 *
ªque°
);

193 
s32
 
wl_cfg80211_£t_wùhy_∑øms
(
wùhy
 *wùhy, 
u32
 
ch™ged
);

194 
s32
 
wl_cfg80211_joö_ibss
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
,

195 
cfg80211_ibss_∑øms
 *
∑øms
);

196 
s32
 
wl_cfg80211_Àave_ibss
(
wùhy
 *wiphy,

197 
√t_devi˚
 *
dev
);

198 
s32
 
wl_cfg80211_gë_°©i⁄
(
wùhy
 *wiphy,

199 
√t_devi˚
 *
dev
, 
u8
 *
mac
,

200 
°©i⁄_öfo
 *
söfo
);

201 
s32
 
wl_cfg80211_£t_powî_mgmt
(
wùhy
 *wiphy,

202 
√t_devi˚
 *
dev
, 
boﬁ
 
íabÀd
,

203 
s32
 
timeout
);

204 
wl_cfg80211_c⁄√˘
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
,

205 
cfg80211_c⁄√˘_∑øms
 *
sme
);

206 
s32
 
wl_cfg80211_disc⁄√˘
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
,

207 
u16
 
ªas⁄_code
);

208 
s32
 
wl_cfg80211_£t_tx_powî
(
wùhy
 *wiphy,

209 
∆80211_tx_powî_£âög
 
ty≥
,

210 
s32
 
dbm
);

211 
s32
 
wl_cfg80211_gë_tx_powî
(
wùhy
 *wùhy, s32 *
dbm
);

212 
s32
 
wl_cfg80211_c⁄fig_deÁu…_key
(
wùhy
 *wiphy,

213 
√t_devi˚
 *
dev
,

214 
u8
 
key_idx
, 
boﬁ
 
uniˇ°
, boﬁ 
mu…iˇ°
);

215 
s32
 
wl_cfg80211_add_key
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
,

216 
u8
 
key_idx
, 
boﬁ
 
∑úwi£
, c⁄° u8 *
mac_addr
,

217 
key_∑øms
 *
∑øms
);

218 
s32
 
wl_cfg80211_dñ_key
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
,

219 
u8
 
key_idx
, 
boﬁ
 
∑úwi£
, c⁄° u8 *
mac_addr
);

220 
s32
 
wl_cfg80211_gë_key
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
,

221 
u8
 
key_idx
, 
boﬁ
 
∑úwi£
, c⁄° u8 *
mac_addr
,

222 *
cookõ
, (*
ˇŒback
) (*cookie,

223 
key_∑øms
 *
∑øms
));

224 
s32
 
	`wl_cfg80211_c⁄fig_deÁu…_mgmt_key
(
wùhy
 *wiphy,

225 
√t_devi˚
 *
dev
, 
u8
 
key_idx
);

226 
s32
 
	`wl_cfg80211_ªsume
(
wùhy
 *wiphy);

227 #i‡
	`deföed
(
WL_SUPPORT_BACKPORTED_KPATCHES
Ë|| (
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(3, \

229 
s32
 
	`wl_cfg80211_mgmt_tx_ˇn˚l_waô
(
wùhy
 *wiphy,

230 
√t_devi˚
 *
dev
, 
u64
 
cookõ
);

231 
s32
 
	`wl_cfg80211_dñ_°©i⁄
(
wùhy
 *wiphy,

232 
√t_devi˚
 *
ndev
, 
u8
* 
mac_addr
);

234 #i‡
LINUX_VERSION_CODE
 > 
	`KERNEL_VERSION
(2, 6, 39)

235 
s32
 
	`wl_cfg80211_su•íd
(
wùhy
 *wùhy, 
cfg80211_wowœn
 *
wow
);

237 
s32
 
	`wl_cfg80211_su•íd
(
wùhy
 *wiphy);

239 
s32
 
	`wl_cfg80211_£t_pmkß
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
,

240 
cfg80211_pmkß
 *
pmkß
);

241 
s32
 
	`wl_cfg80211_dñ_pmkß
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
,

242 
cfg80211_pmkß
 *
pmkß
);

243 
s32
 
	`wl_cfg80211_Êush_pmkß
(
wùhy
 *wiphy,

244 
√t_devi˚
 *
dev
);

245 
s32
 
	`wl_nŸify_esˇn_com∂ëe
(
wl_¥iv
 *
wl
,

246 
√t_devi˚
 *
ndev
, 
boﬁ
 
ab‹ãd
, boﬁ 
fw_ab‹t
);

250 
s32
 
	`wl_¸óã_evít_h™dÀr
(
wl_¥iv
 *
wl
);

251 
	`wl_de°roy_evít_h™dÀr
(
wl_¥iv
 *
wl
);

252 
s32
 
	`wl_evít_h™dÀr
(*
d©a
);

253 
	`wl_öô_eq
(
wl_¥iv
 *
wl
);

254 
	`wl_Êush_eq
(
wl_¥iv
 *
wl
);

255 
	`wl_lock_eq
(
wl_¥iv
 *
wl
);

256 
	`wl_u∆ock_eq
(
wl_¥iv
 *
wl
, 
Êags
);

257 
	`wl_öô_eq_lock
(
wl_¥iv
 *
wl
);

258 
	`wl_öô_evít_h™dÀr
(
wl_¥iv
 *
wl
);

259 
wl_evít_q
 *
	`wl_deq_evít
(
wl_¥iv
 *
wl
);

260 
s32
 
	`wl_íq_evít
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
, 
u32
 
ty≥
,

261 c⁄° 
wl_evít_msg_t
 *
msg
, *
d©a
);

262 
	`wl_put_evít
(
wl_evít_q
 *
e
);

263 
	`wl_wakeup_evít
(
wl_¥iv
 *
wl
);

264 
s32
 
	`wl_nŸify_c⁄√˘_°©us_≠
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
,

265 c⁄° 
wl_evít_msg_t
 *
e
, *
d©a
);

266 
s32
 
	`wl_nŸify_c⁄√˘_°©us
(
wl_¥iv
 *
wl
,

267 
√t_devi˚
 *
ndev
,

268 c⁄° 
wl_evít_msg_t
 *
e
, *
d©a
);

269 
s32
 
	`wl_nŸify_rﬂmög_°©us
(
wl_¥iv
 *
wl
,

270 
√t_devi˚
 *
ndev
,

271 c⁄° 
wl_evít_msg_t
 *
e
, *
d©a
);

272 
s32
 
	`wl_nŸify_sˇn_°©us
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
,

273 c⁄° 
wl_evít_msg_t
 *
e
, *
d©a
);

274 
s32
 
	`wl_bss_c⁄√˘_d⁄e
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
,

275 c⁄° 
wl_evít_msg_t
 *
e
, *
d©a
, 
boﬁ
 
com∂ëed
);

276 
s32
 
	`wl_bss_rﬂmög_d⁄e
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
,

277 c⁄° 
wl_evít_msg_t
 *
e
, *
d©a
);

278 
s32
 
	`wl_nŸify_mic_°©us
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
,

279 c⁄° 
wl_evít_msg_t
 *
e
, *
d©a
);

280 #ifde‡
WL_SCHED_SCAN


281 
s32


282 
	`wl_nŸify_sched_sˇn_ªsu…s
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
,

283 c⁄° 
wl_evít_msg_t
 *
e
, *
d©a
);

285 #ifde‡
PNO_SUPPORT


286 
s32
 
	`wl_nŸify_p‚_°©us
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
,

287 c⁄° 
wl_evít_msg_t
 *
e
, *
d©a
);

289 
s32
 
	`wl_nŸifõr_ch™ge_°©e
(
wl_¥iv
 *
wl
, 
√t_öfo
 *
_√t_öfo
,

290 
wl_°©us
 
°©e
, 
boﬁ
 
£t
);

294 
	`wl_cfg80211_˛ór_∑ª¡_dev
();

303 
s32
 
	`wl_£t_‰ag
(
√t_devi˚
 *
dev
, 
u32
 
‰ag_thªshﬁd
);

304 
s32
 
	`wl_£t_πs
(
√t_devi˚
 *
dev
, 
u32
 
‰ag_thªshﬁd
);

305 
s32
 
	`wl_£t_ªåy
(
√t_devi˚
 *
dev
, 
u32
 
ªåy
, 
boﬁ
 
l
);

310 
s32
 
	`wl_upd©e_¥of
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
,

311 c⁄° 
wl_evít_msg_t
 *
e
, *
d©a
, 
s32
 
ôem
);

312 *
	`wl_ªad_¥of
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
, 
s32
 
ôem
);

313 
	`wl_öô_¥of
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
);

318 
s32
 
	`wl_£t_w∑_vîsi⁄
(
√t_devi˚
 *
dev
,

319 
cfg80211_c⁄√˘_∑øms
 *
sme
);

320 
s32
 
	`wl_£t_auth_ty≥
(
√t_devi˚
 *
dev
,

321 
cfg80211_c⁄√˘_∑øms
 *
sme
);

322 
s32
 
	`wl_£t_£t_cùhî
(
√t_devi˚
 *
dev
,

323 
cfg80211_c⁄√˘_∑øms
 *
sme
);

324 
s32
 
	`wl_£t_key_mgmt
(
√t_devi˚
 *
dev
,

325 
cfg80211_c⁄√˘_∑øms
 *
sme
);

326 
s32
 
	`wl_£t_£t_sh¨edkey
(
√t_devi˚
 *
dev
,

327 
cfg80211_c⁄√˘_∑øms
 *
sme
);

328 
s32
 
	`wl_gë_assoc_õs
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
);

329 
	`wl_ch_to_ch™•ec
(
ch
,

330 
wl_joö_∑øms
 *
joö_∑øms
, 
size_t
 *
joö_∑øms_size
);

335 
	`wl_r°_õ
(
wl_¥iv
 *
wl
);

336 
__u£d
 
s32
 
	`wl_add_õ
(
wl_¥iv
 *
wl
, 
u8
 
t
, u8 
l
, u8 *
v
);

337 
s32
 
	`wl_mrg_õ
(
wl_¥iv
 *
wl
, 
u8
 *
õ_°ªam
, 
u16
 
õ_size
);

338 
s32
 
	`wl_˝_õ
(
wl_¥iv
 *
wl
, 
u8
 *
d°
, 
u16
 
d°_size
);

339 
u32
 
	`wl_gë_õÀn
(
wl_¥iv
 *
wl
);

341 #ifde‡
WL11U


342 
bcm_év_t
 *

343 
	`wl_cfg80211_föd_öãrw‹kög_õ
(
u8
 *
∑r£
, 
u32
 
Àn
);

344 
s32


345 
	`wl_cfg80211_add_iw_õ
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
, 
s32
 
bssidx
, s32 
pktÊag
,

346 
uöt8
 
õ_id
, uöt8 *
d©a
, uöt8 
d©a_Àn
);

349 
s32
 
	`wl_£tup_wùhy
(
wúñess_dev
 *
wdev
, 
devi˚
 *
dev
);

350 
	`wl_‰ì_wdev
(
wl_¥iv
 *
wl
);

352 
	`wl_cfg80211_ªg_nŸifõr
(
wùhy
 *wùhy, 
ªguœt‹y_ªque°
 *
ªque°
);

355 
s32
 
	`wl_öf‹m_bss
(
wl_¥iv
 *
wl
);

356 
s32
 
	`wl_öf‹m_sögÀ_bss
(
wl_¥iv
 *
wl
, 
wl_bss_öfo
 *
bi
, 
u8
 
is_rﬂm_d⁄e
);

357 
s32
 
	`wl_upd©e_bss_öfo
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
, 
u8
 
is_rﬂm_d⁄e
);

358 
ch™•ec_t
 
	`wl_cfg80211_gë_sh¨ed_‰eq
(
wùhy
 *wiphy);

359 
s32
 
	`wl_cfg80211_ch™√l_to_‰eq
(
u32
 
ch™√l
);

361 #i‡
	`deföed
(
DHCP_SCAN_SUPPRESS
)

362 
	`wl_cfg80211_w‹k_h™dÀr
(
w‹k_°ru˘
 *
w‹k
);

363 
	`wl_cfg80211_sˇn_suµ_timîfunc
(
ul⁄g
 
d©a
);

366 
s32
 
	`wl_add_keyext
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
,

367 
u8
 
key_idx
, c⁄° u8 *
mac_addr
,

368 
key_∑øms
 *
∑øms
);

372 
	`sw≠_key_‰om_BE
(
wl_w£c_key
 *
key
);

373 
	`sw≠_key_to_BE
(
wl_w£c_key
 *
key
);

378 
s32
 
	`wl_öô_¥iv_mem
(
wl_¥iv
 *
wl
);

379 
	`wl_deöô_¥iv_mem
(
wl_¥iv
 *
wl
);

381 
	`wl_dñay
(
u32
 
ms
);

386 
boﬁ
 
	`wl_is_ibssmode
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
);

387 
__u£d
 
boﬁ
 
	`wl_is_ibss°¨ãr
(
wl_¥iv
 *
wl
);

392 
s32
 
	`__wl_cfg80211_up
(
wl_¥iv
 *
wl
);

393 
s32
 
	`__wl_cfg80211_down
(
wl_¥iv
 *
wl
);

394 
boﬁ
 
	`wl_is_lökdown
(
wl_¥iv
 *
wl
, c⁄° 
wl_evít_msg_t
 *
e
);

395 
boﬁ
 
	`wl_is_lökup
(
wl_¥iv
 *
wl
, c⁄° 
wl_evít_msg_t
 *
e
, 
√t_devi˚
 *
ndev
);

396 
boﬁ
 
	`wl_is_n⁄ëw‹k
(
wl_¥iv
 *
wl
, c⁄° 
wl_evít_msg_t
 *
e
);

397 
	`wl_lök_up
(
wl_¥iv
 *
wl
);

398 
	`wl_lök_down
(
wl_¥iv
 *
wl
);

399 
s32
 
	`wl_c⁄fig_ifmode
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
, s32 
i·y≥
);

400 
	`wl_öô_c⁄f
(
wl_c⁄f
 *
c⁄f
);

405 
	`wl_isˇn_timî
(
d©a
);

406 
	`wl_ãrm_isˇn
(
wl_¥iv
 *
wl
);

407 
s32
 
	`wl_öô_sˇn
(
wl_¥iv
 *
wl
);

408 
s32
 
	`wl_isˇn_thªad
(*
d©a
);

409 
s32
 
	`wl_run_isˇn
(
wl_isˇn_˘æ
 *
isˇn
, 
cfg80211_sˇn_ªque°
 *
ªque°
,

410 
u16
 
a˘i⁄
);

411 
s32
 
	`wl_do_isˇn
(
wl_¥iv
 *
wl
, 
cfg80211_sˇn_ªque°
 *
ªque°
);

412 
s32
 
	`wl_wakeup_isˇn
(
wl_isˇn_˘æ
 *
isˇn
);

413 
s32
 
	`wl_övoke_isˇn
(
wl_¥iv
 *
wl
);

414 
s32
 
	`wl_gë_isˇn_ªsu…s
(
wl_isˇn_˘æ
 *
isˇn
, 
u32
 *
°©us
,

415 
wl_sˇn_ªsu…s
 **
bss_li°
);

416 
	`wl_nŸify_isˇn_com∂ëe
(
wl_isˇn_˘æ
 *
isˇn
, 
boﬁ
 
ab‹ãd
);

417 
	`wl_öô_isˇn_h™dÀr
(
wl_isˇn_˘æ
 *
isˇn
);

418 
s32
 
	`wl_isˇn_d⁄e
(
wl_¥iv
 *
wl
);

419 
s32
 
	`wl_isˇn_≥ndög
(
wl_¥iv
 *
wl
);

420 
s32
 
	`wl_isˇn_ö¥ogªss
(
wl_¥iv
 *
wl
);

421 
s32
 
	`wl_isˇn_ab‹ãd
(
wl_¥iv
 *
wl
);

426 
__u£d
 
u32
 
	`wl_föd_msb
(
u16
 
bô16
);

431 
	`wl_£tup_rfkûl
(
wl_¥iv
 *
wl
, 
boﬁ
 
£tup
);

432 
	`wl_rfkûl_£t
(*
d©a
, 
boﬁ
 
blocked
);

434 
wl_sˇn_∑øms_t
 *
	`wl_cfg80211_sˇn_Æloc_∑øms
(
ch™√l
,

435 
≈robes
, *
out_∑øms_size
);

436 
	`gë_¥im¨y_mac
(
wl_¥iv
 *
wl
, 
ëhî_addr
 *
mac
);

441 
	`dhd_add_m⁄ô‹
(*
«me
, 
√t_devi˚
 **
√w_ndev
);

442 
	`dhd_dñ_m⁄ô‹
(
√t_devi˚
 *
ndev
);

443 
	`dhd_m⁄ô‹_öô
(*
dhd_pub
);

444 
	`dhd_m⁄ô‹_unöô
();

445 
	`dhd_°¨t_xmô
(
sk_buff
 *
skb
, 
√t_devi˚
 *
√t
);

449 
	#CHECK_SYS_UP
(
wÕriv
) \

451 
√t_devi˚
 *
ndev
 = 
	`wl_to_¥mry_ndev
(
wÕriv
); \

452 i‡(
	`u∆ikñy
(!
	`wl_gë_drv_°©us
(
wÕriv
, 
READY
, 
ndev
))) { \

453 
	`WL_INFO
(("device isÇotÑeady\n")); \

454  -
EIO
; \

456 
	}
} 0)

	)

459 
	#IS_WPA_AKM
(
akm
Ë(◊kmË=
RSN_AKM_NONE
 || \

460 (
akm
Ë=
RSN_AKM_UNSPECIFIED
 || \

461 (
akm
Ë=
RSN_AKM_PSK
)

	)

464 
dhd_waô_≥nd8021x
(
√t_devi˚
 *
dev
);

465 #ifde‡
PROP_TXSTATUS_VSDB


466 
dißbÀ_¥›tx
;

467 
dhd_wlfc_öô
(
dhd_pub_t
 *
dhd
);

468 
dhd_wlfc_deöô
(
dhd_pub_t
 *
dhd
);

472 #i‡(
WL_DBG_LEVEL
 > 0)

473 
	#WL_DBG_ESTR_MAX
 50

	)

474 
s8
 
	gwl_dbg_e°r
[][
WL_DBG_ESTR_MAX
] = {

501 
	#CHAN2G
(
_ch™√l
, 
_‰eq
, 
_Êags
) { \

502 .
b™d
 = 
IEEE80211_BAND_2GHZ
, \

503 .
˚¡î_‰eq
 = (
_‰eq
), \

504 .
hw_vÆue
 = (
_ch™√l
), \

505 .
Êags
 = (
_Êags
), \

506 .
max_™ã¬a_gaö
 = 0, \

507 .
max_powî
 = 30, \

508 }

	)

510 
	#CHAN5G
(
_ch™√l
, 
_Êags
) { \

511 .
b™d
 = 
IEEE80211_BAND_5GHZ
, \

512 .
˚¡î_‰eq
 = 5000 + (5 * (
_ch™√l
)), \

513 .
hw_vÆue
 = (
_ch™√l
), \

514 .
Êags
 = (
_Êags
), \

515 .
max_™ã¬a_gaö
 = 0, \

516 .
max_powî
 = 30, \

517 }

	)

519 
	#RATE_TO_BASE100KBPS
(
øã
Ë((‘©eË* 10Ë/ 2)

	)

520 
	#RATETAB_ENT
(
_øãid
, 
_Êags
) \

522 .
bôøã
 = 
	`RATE_TO_BASE100KBPS
(
_øãid
), \

523 .
hw_vÆue
 = (
_øãid
), \

524 .
Êags
 = (
_Êags
), \

525 }

	)

527 
õì80211_øã
 
	g__wl_øãs
[] = {

528 
RATETAB_ENT
(
WLC_RATE_1M
, 0),

529 
RATETAB_ENT
(
WLC_RATE_2M
, 
IEEE80211_RATE_SHORT_PREAMBLE
),

530 
RATETAB_ENT
(
WLC_RATE_5M5
, 
IEEE80211_RATE_SHORT_PREAMBLE
),

531 
RATETAB_ENT
(
WLC_RATE_11M
, 
IEEE80211_RATE_SHORT_PREAMBLE
),

532 
RATETAB_ENT
(
WLC_RATE_6M
, 0),

533 
RATETAB_ENT
(
WLC_RATE_9M
, 0),

534 
RATETAB_ENT
(
WLC_RATE_12M
, 0),

535 
RATETAB_ENT
(
WLC_RATE_18M
, 0),

536 
RATETAB_ENT
(
WLC_RATE_24M
, 0),

537 
RATETAB_ENT
(
WLC_RATE_36M
, 0),

538 
RATETAB_ENT
(
WLC_RATE_48M
, 0),

539 
RATETAB_ENT
(
WLC_RATE_54M
, 0)

542 
	#wl_a_øãs
 (
__wl_øãs
 + 4)

	)

543 
	#wl_a_øãs_size
 8

	)

544 
	#wl_g_øãs
 (
__wl_øãs
 + 0)

	)

545 
	#wl_g_øãs_size
 12

	)

547 
õì80211_ch™√l
 
	g__wl_2ghz_ch™√ls
[] = {

548 
CHAN2G
(1, 2412, 0),

549 
CHAN2G
(2, 2417, 0),

550 
CHAN2G
(3, 2422, 0),

551 
CHAN2G
(4, 2427, 0),

552 
CHAN2G
(5, 2432, 0),

553 
CHAN2G
(6, 2437, 0),

554 
CHAN2G
(7, 2442, 0),

555 
CHAN2G
(8, 2447, 0),

556 
CHAN2G
(9, 2452, 0),

557 
CHAN2G
(10, 2457, 0),

558 
CHAN2G
(11, 2462, 0),

559 
CHAN2G
(12, 2467, 0),

560 
CHAN2G
(13, 2472, 0),

561 
CHAN2G
(14, 2484, 0)

564 
õì80211_ch™√l
 
	g__wl_5ghz_a_ch™√ls
[] = {

565 
CHAN5G
(34, 0), CHAN5G(36, 0),

566 
CHAN5G
(38, 0), CHAN5G(40, 0),

567 
CHAN5G
(42, 0), CHAN5G(44, 0),

568 
CHAN5G
(46, 0), CHAN5G(48, 0),

569 
CHAN5G
(52, 0), CHAN5G(56, 0),

570 
CHAN5G
(60, 0), CHAN5G(64, 0),

571 
CHAN5G
(100, 0), CHAN5G(104, 0),

572 
CHAN5G
(108, 0), CHAN5G(112, 0),

573 
CHAN5G
(116, 0), CHAN5G(120, 0),

574 
CHAN5G
(124, 0), CHAN5G(128, 0),

575 
CHAN5G
(132, 0), CHAN5G(136, 0),

576 
CHAN5G
(140, 0), CHAN5G(149, 0),

577 
CHAN5G
(153, 0), CHAN5G(157, 0),

578 
CHAN5G
(161, 0), CHAN5G(165, 0)

581 
õì80211_suµ‹ãd_b™d
 
	g__wl_b™d_2ghz
 = {

582 .
b™d
 = 
IEEE80211_BAND_2GHZ
,

583 .
	gch™√ls
 = 
__wl_2ghz_ch™√ls
,

584 .
	gn_ch™√ls
 = 
ARRAY_SIZE
(
__wl_2ghz_ch™√ls
),

585 .
	gbôøãs
 = 
wl_g_øãs
,

586 .
	gn_bôøãs
 = 
wl_g_øãs_size


589 
õì80211_suµ‹ãd_b™d
 
	g__wl_b™d_5ghz_a
 = {

590 .
b™d
 = 
IEEE80211_BAND_5GHZ
,

591 .
	gch™√ls
 = 
__wl_5ghz_a_ch™√ls
,

592 .
	gn_ch™√ls
 = 
ARRAY_SIZE
(
__wl_5ghz_a_ch™√ls
),

593 .
	gbôøãs
 = 
wl_a_øãs
,

594 .
	gn_bôøãs
 = 
wl_a_øãs_size


597 c⁄° 
u32
 
	g__wl_cùhî_suôes
[] = {

598 
WLAN_CIPHER_SUITE_WEP40
,

599 
WLAN_CIPHER_SUITE_WEP104
,

600 
WLAN_CIPHER_SUITE_TKIP
,

601 
WLAN_CIPHER_SUITE_CCMP
,

602 
WLAN_CIPHER_SUITE_AES_CMAC
,

607 
	gio˘l_vîsi⁄
;

612 
ch™•ec_t


613 
	$wl_ch•ec_‰om_Àgacy
(
ch™•ec_t
 
Àgacy_ch•ec
)

615 
ch™•ec_t
 
ch•ec
;

618 
ch•ec
 = 
	`LCHSPEC_CHANNEL
(
Àgacy_ch•ec
);

621 i‡(
	`LCHSPEC_IS2G
(
Àgacy_ch•ec
)) {

622 
ch•ec
 |
WL_CHANSPEC_BAND_2G
;

624 
ch•ec
 |
WL_CHANSPEC_BAND_5G
;

628 i‡(
	`LCHSPEC_IS20
(
Àgacy_ch•ec
)) {

629 
ch•ec
 |
WL_CHANSPEC_BW_20
;

631 
ch•ec
 |
WL_CHANSPEC_BW_40
;

632 i‡(
	`LCHSPEC_CTL_SB
(
Àgacy_ch•ec
Ë=
WL_LCHANSPEC_CTL_SB_LOWER
) {

633 
ch•ec
 |
WL_CHANSPEC_CTL_SB_L
;

635 
ch•ec
 |
WL_CHANSPEC_CTL_SB_U
;

639 i‡(
	`wf_ch•ec_mÆf‹med
(
ch•ec
)) {

640 
	`WL_ERR
(("wl_chspec_from_legacy: output chanspec (0x%04X) malformed\n",

641 
ch•ec
));

642  
INVCHANSPEC
;

645  
ch•ec
;

646 
	}
}

651 
ch™•ec_t


652 
	$wl_ch•ec_to_Àgacy
(
ch™•ec_t
 
ch•ec
)

654 
ch™•ec_t
 
lch•ec
;

656 i‡(
	`wf_ch•ec_mÆf‹med
(
ch•ec
)) {

657 
	`WL_ERR
(("wl_chspec_to_legacy: input chanspec (0x%04X) malformed\n",

658 
ch•ec
));

659  
INVCHANSPEC
;

663 
lch•ec
 = 
	`CHSPEC_CHANNEL
(
ch•ec
);

666 i‡(
	`CHSPEC_IS2G
(
ch•ec
)) {

667 
lch•ec
 |
WL_LCHANSPEC_BAND_2G
;

669 
lch•ec
 |
WL_LCHANSPEC_BAND_5G
;

673 i‡(
	`CHSPEC_IS20
(
ch•ec
)) {

674 
lch•ec
 |
WL_LCHANSPEC_BW_20
;

675 
lch•ec
 |
WL_LCHANSPEC_CTL_SB_NONE
;

676 } i‡(
	`CHSPEC_IS40
(
ch•ec
)) {

677 
lch•ec
 |
WL_LCHANSPEC_BW_40
;

678 i‡(
	`CHSPEC_CTL_SB
(
ch•ec
Ë=
WL_CHANSPEC_CTL_SB_L
) {

679 
lch•ec
 |
WL_LCHANSPEC_CTL_SB_LOWER
;

681 
lch•ec
 |
WL_LCHANSPEC_CTL_SB_UPPER
;

685 
ch™buf
[
CHANSPEC_STR_LEN
];

686 
	`WL_ERR
((

689 
	`wf_ch•ec_¡ﬂ
(
ch•ec
, 
ch™buf
), chspec));

690  
INVCHANSPEC
;

693  
lch•ec
;

694 
	}
}

700 
ch™•ec_t


701 
	$wl_ch•ec_ho°_to_drivî
(
ch™•ec_t
 
ch™•ec
)

703 i‡(
io˘l_vîsi⁄
 == 1) {

704 
ch™•ec
 = 
	`wl_ch•ec_to_Àgacy
(chanspec);

705 i‡(
ch™•ec
 =
INVCHANSPEC
) {

706  
ch™•ec
;

709 
ch™•ec
 = 
	`htodch™•ec
(chanspec);

711  
ch™•ec
;

712 
	}
}

718 
ch™•ec_t


719 
	$wl_ch_ho°_to_drivî
(
u16
 
ch™√l
)

722 
ch™•ec_t
 
ch™•ec
;

724 
ch™•ec
 = 
ch™√l
 & 
WL_CHANSPEC_CHAN_MASK
;

726 i‡(
ch™√l
 <
CH_MAX_2G_CHANNEL
)

727 
ch™•ec
 |
WL_CHANSPEC_BAND_2G
;

729 
ch™•ec
 |
WL_CHANSPEC_BAND_5G
;

731 
ch™•ec
 |
WL_CHANSPEC_BW_20
;

732 
ch™•ec
 |
WL_CHANSPEC_CTL_SB_NONE
;

734  
	`wl_ch•ec_ho°_to_drivî
(
ch™•ec
);

735 
	}
}

741 
ch™•ec_t


742 
	$wl_ch•ec_drivî_to_ho°
(
ch™•ec_t
 
ch™•ec
)

744 
ch™•ec
 = 
	`dtohch™•ec
(chanspec);

745 i‡(
io˘l_vîsi⁄
 == 1) {

746 
ch™•ec
 = 
	`wl_ch•ec_‰om_Àgacy
(chanspec);

749  
ch™•ec
;

750 
	}
}

753 c⁄° 
õì80211_txrx_°y≥s


754 
	gwl_cfg80211_deÁu…_mgmt_°y≥s
[
NUM_NL80211_IFTYPES
] = {

755 [
NL80211_IFTYPE_ADHOC
] = {

756 .
tx
 = 0xffff,

757 .
	grx
 = 
BIT
(
IEEE80211_STYPE_ACTION
 >> 4)

759 [
NL80211_IFTYPE_STATION
] = {

760 .
tx
 = 0xffff,

761 .
	grx
 = 
BIT
(
IEEE80211_STYPE_ACTION
 >> 4) |

762 
BIT
(
IEEE80211_STYPE_PROBE_REQ
 >> 4)

764 [
NL80211_IFTYPE_AP
] = {

765 .
tx
 = 0xffff,

766 .
	grx
 = 
BIT
(
IEEE80211_STYPE_ASSOC_REQ
 >> 4) |

767 
BIT
(
IEEE80211_STYPE_REASSOC_REQ
 >> 4) |

768 
BIT
(
IEEE80211_STYPE_PROBE_REQ
 >> 4) |

769 
BIT
(
IEEE80211_STYPE_DISASSOC
 >> 4) |

770 
BIT
(
IEEE80211_STYPE_AUTH
 >> 4) |

771 
BIT
(
IEEE80211_STYPE_DEAUTH
 >> 4) |

772 
BIT
(
IEEE80211_STYPE_ACTION
 >> 4)

774 [
NL80211_IFTYPE_AP_VLAN
] = {

776 .
tx
 = 0xffff,

777 .
	grx
 = 
BIT
(
IEEE80211_STYPE_ASSOC_REQ
 >> 4) |

778 
BIT
(
IEEE80211_STYPE_REASSOC_REQ
 >> 4) |

779 
BIT
(
IEEE80211_STYPE_PROBE_REQ
 >> 4) |

780 
BIT
(
IEEE80211_STYPE_DISASSOC
 >> 4) |

781 
BIT
(
IEEE80211_STYPE_AUTH
 >> 4) |

782 
BIT
(
IEEE80211_STYPE_DEAUTH
 >> 4) |

783 
BIT
(
IEEE80211_STYPE_ACTION
 >> 4)

785 [
NL80211_IFTYPE_P2P_CLIENT
] = {

786 .
tx
 = 0xffff,

787 .
	grx
 = 
BIT
(
IEEE80211_STYPE_ACTION
 >> 4) |

788 
BIT
(
IEEE80211_STYPE_PROBE_REQ
 >> 4)

790 [
NL80211_IFTYPE_P2P_GO
] = {

791 .
tx
 = 0xffff,

792 .
	grx
 = 
BIT
(
IEEE80211_STYPE_ASSOC_REQ
 >> 4) |

793 
BIT
(
IEEE80211_STYPE_REASSOC_REQ
 >> 4) |

794 
BIT
(
IEEE80211_STYPE_PROBE_REQ
 >> 4) |

795 
BIT
(
IEEE80211_STYPE_DISASSOC
 >> 4) |

796 
BIT
(
IEEE80211_STYPE_AUTH
 >> 4) |

797 
BIT
(
IEEE80211_STYPE_DEAUTH
 >> 4) |

798 
BIT
(
IEEE80211_STYPE_ACTION
 >> 4)

802 
	$sw≠_key_‰om_BE
(
wl_w£c_key
 *
key
)

804 
key
->
ödex
 = 
	`htod32
(key->index);

805 
key
->
Àn
 = 
	`htod32
(key->len);

806 
key
->
Ægo
 = 
	`htod32
(key->algo);

807 
key
->
Êags
 = 
	`htod32
(key->flags);

808 
key
->
rxiv
.
hi
 = 
	`htod32
(key->rxiv.hi);

809 
key
->
rxiv
.
lo
 = 
	`htod16
(key->rxiv.lo);

810 
key
->
iv_öôülized
 = 
	`htod32
(key->iv_initialized);

811 
	}
}

813 
	$sw≠_key_to_BE
(
wl_w£c_key
 *
key
)

815 
key
->
ödex
 = 
	`dtoh32
(key->index);

816 
key
->
Àn
 = 
	`dtoh32
(key->len);

817 
key
->
Ægo
 = 
	`dtoh32
(key->algo);

818 
key
->
Êags
 = 
	`dtoh32
(key->flags);

819 
key
->
rxiv
.
hi
 = 
	`dtoh32
(key->rxiv.hi);

820 
key
->
rxiv
.
lo
 = 
	`dtoh16
(key->rxiv.lo);

821 
key
->
iv_öôülized
 = 
	`dtoh32
(key->iv_initialized);

822 
	}
}

824 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(3, 4, 0)

827 
	$wl_vÆid©e_wps_õ
(*
wps_õ
, 
s32
 
wps_õ_Àn
, 
boﬁ
 *
pbc
)

829 
	#WPS_IE_FIXED_LEN
 6

	)

830 
u16
 
Àn
;

831 
u8
 *
subñ
 = 
NULL
;

832 
u16
 
subñt_id
;

833 
u16
 
subñt_Àn
;

834 
u16
 
vÆ
;

835 
u8
 *
vÆ±r
 = (
uöt8
*Ë&
vÆ
;

836 i‡(
wps_õ
 =
NULL
 || 
wps_õ_Àn
 < 
WPS_IE_FIXED_LEN
) {

837 
	`WL_ERR
(("invalidárgument : NULL\n"));

840 
Àn
 = (
u16
)
wps_õ
[
TLV_LEN_OFF
];

842 i‡(
Àn
 > 
wps_õ_Àn
) {

843 
	`WL_ERR
(("övÆidÜígthÜí %d, wp†õÜí %d\n", 
Àn
, 
wps_õ_Àn
));

846 
	`WL_DBG
(("wps_õÜí=%d\n", 
Àn
));

847 
Àn
 -= 4;

848 
subñ
 = 
wps_õ
 + 
WPS_IE_FIXED_LEN
;

849 
Àn
 >= 4) {

850 
vÆ±r
[0] = *
subñ
++;

851 
vÆ±r
[1] = *
subñ
++;

852 
subñt_id
 = 
	`HTON16
(
vÆ
);

854 
vÆ±r
[0] = *
subñ
++;

855 
vÆ±r
[1] = *
subñ
++;

856 
subñt_Àn
 = 
	`HTON16
(
vÆ
);

858 
Àn
 -= 4;

859 
Àn
 -
subñt_Àn
;

860 
	`WL_DBG
((" subel=%p, subelt_id=0x%x subelt_len=%u\n",

861 
subñ
, 
subñt_id
, 
subñt_Àn
));

863 i‡(
subñt_id
 =
WPS_ID_VERSION
) {

864 
	`WL_DBG
(("áâ∏WPS_ID_VERSION: %u\n", *
subñ
));

865 } i‡(
subñt_id
 =
WPS_ID_REQ_TYPE
) {

866 
	`WL_DBG
(("áâ∏WPS_ID_REQ_TYPE: %u\n", *
subñ
));

867 } i‡(
subñt_id
 =
WPS_ID_CONFIG_METHODS
) {

868 
vÆ±r
[0] = *
subñ
;

869 
vÆ±r
[1] = *(
subñ
 + 1);

870 
	`WL_DBG
(("áâ∏WPS_ID_CONFIG_METHODS: %x\n", 
	`HTON16
(
vÆ
)));

871 } i‡(
subñt_id
 =
WPS_ID_DEVICE_NAME
) {

872 
dev«me
[100];

873 
	`mem˝y
(
dev«me
, 
subñ
, 
subñt_Àn
);

874 
dev«me
[
subñt_Àn
] = '\0';

875 
	`WL_DBG
(("áttr WPS_ID_DEVICE_NAME: %s (len %u)\n",

876 
dev«me
, 
subñt_Àn
));

877 } i‡(
subñt_id
 =
WPS_ID_DEVICE_PWD_ID
) {

878 
vÆ±r
[0] = *
subñ
;

879 
vÆ±r
[1] = *(
subñ
 + 1);

880 
	`WL_DBG
(("áâ∏WPS_ID_DEVICE_PWD_ID: %u\n", 
	`HTON16
(
vÆ
)));

881 *
pbc
 = (
	`HTON16
(
vÆ
Ë=
DEV_PW_PUSHBUTTON
Ë? 
åue
 : 
Ál£
;

882 } i‡(
subñt_id
 =
WPS_ID_PRIM_DEV_TYPE
) {

883 
vÆ±r
[0] = *
subñ
;

884 
vÆ±r
[1] = *(
subñ
 + 1);

885 
	`WL_DBG
(("áâ∏WPS_ID_PRIM_DEV_TYPE: c©=%u \n", 
	`HTON16
(
vÆ
)));

886 
vÆ±r
[0] = *(
subñ
 + 6);

887 
vÆ±r
[1] = *(
subñ
 + 7);

888 
	`WL_DBG
(("áâ∏WPS_ID_PRIM_DEV_TYPE: subˇt=%u\n", 
	`HTON16
(
vÆ
)));

889 } i‡(
subñt_id
 =
WPS_ID_REQ_DEV_TYPE
) {

890 
vÆ±r
[0] = *
subñ
;

891 
vÆ±r
[1] = *(
subñ
 + 1);

892 
	`WL_DBG
(("áâ∏WPS_ID_REQ_DEV_TYPE: c©=%u\n", 
	`HTON16
(
vÆ
)));

893 
vÆ±r
[0] = *(
subñ
 + 6);

894 
vÆ±r
[1] = *(
subñ
 + 7);

895 
	`WL_DBG
(("áâ∏WPS_ID_REQ_DEV_TYPE: subˇt=%u\n", 
	`HTON16
(
vÆ
)));

896 } i‡(
subñt_id
 =
WPS_ID_SELECTED_REGISTRAR_CONFIG_METHODS
) {

897 
vÆ±r
[0] = *
subñ
;

898 
vÆ±r
[1] = *(
subñ
 + 1);

899 
	`WL_DBG
(("áttr WPS_ID_SELECTED_REGISTRAR_CONFIG_METHODS"

900 ": c©=%u\n", 
	`HTON16
(
vÆ
)));

902 
	`WL_DBG
((" unknow¿©å 0x%x\n", 
subñt_id
));

905 
subñ
 +
subñt_Àn
;

907 
	}
}

910 
ch™•ec_t
 
	$wl_cfg80211_gë_sh¨ed_‰eq
(
wùhy
 *wiphy)

912 
ch™•ec_t
 
ch•ec
;

913 
îr
 = 0;

914 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

915 
√t_devi˚
 *
dev
 = 
	`wl_to_¥mry_ndev
(
wl
);

916 
ëhî_addr
 
bssid
;

917 
wl_bss_öfo
 *
bss
 = 
NULL
;

919 i‡((
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_GET_BSSID
, &
bssid
, (bssid), 
Ál£
))) {

924 
	`WL_DBG
(("Notássociated. ReturnáÅemp channel. \n"));

925  
	`wl_ch_ho°_to_drivî
(
WL_P2P_TEMP_CHAN
);

929 *(
u32
 *Ë
wl
->
exåa_buf
 = 
	`htod32
(
WL_EXTRA_BUF_MAX
);

930 i‡((
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_GET_BSS_INFO
, 
wl
->
exåa_buf
,

931 
WL_EXTRA_BUF_MAX
, 
Ál£
))) {

932 
	`WL_ERR
(("FailedÅo getássociated bss info, useÅemp channel \n"));

933 
ch•ec
 = 
	`wl_ch_ho°_to_drivî
(
WL_P2P_TEMP_CHAN
);

936 
bss
 = (
wl_bss_öfo
 *Ë(
wl
->
exåa_buf
 + 4);

937 
ch•ec
 = 
bss
->
ch™•ec
;

938 
	`WL_DBG
(("VÆid BSS Found. ch™•ec:%d \n", 
ch•ec
));

940  
ch•ec
;

941 
	}
}

943 
√t_devi˚
* 
	$wl_cfg80211_add_m⁄ô‹_if
(*
«me
)

945 #i‡
	`deföed
(
WLP2P
Ë&& deföed(
WL_ENABLE_P2P_IF
)

946 
	`WL_INFO
(("wl_cfg80211_add_monitor_if: No more support monitor interface\n"));

947  
	`ERR_PTR
(-
EOPNOTSUPP
);

949 
√t_devi˚
* 
ndev
 = 
NULL
;

951 
	`dhd_add_m⁄ô‹
(
«me
, &
ndev
);

952 
	`WL_INFO
(("wl_cfg80211_add_m⁄ô‹_i‡√àdevi˚Ñëu∫ed: 0x%p\n", 
ndev
));

953  
ndev
;

955 
	}
}

957 
√t_devi˚
 *

958 
	$wl_cfg80211_add_vútuÆ_iÁ˚
(
wùhy
 *wùhy, *
«me
,

959 
∆80211_i·y≥
 
ty≥
, 
u32
 *
Êags
,

960 
vif_∑øms
 *
∑øms
)

962 
s32
 
îr
;

963 
s32
 
timeout
 = -1;

964 
s32
 
wlif_ty≥
 = -1;

965 
s32
 
mode
 = 0;

966 
s32
 
vÆ
 = 0;

967 
s32
 
dhd_mode
 = 0;

968 
ch™•ec_t
 
ch•ec
;

969 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

970 
√t_devi˚
 *
_ndev
;

971 
ëhî_addr
 
¥im¨y_mac
;

972 (*
√t_©èch
)(*
dhdp
, 
ifidx
);

973 
boﬁ
 
rﬁlback_lock
 = 
Ál£
;

974 #ifde‡
PROP_TXSTATUS_VSDB


975 
s32
 
up
 = 1;

976 
dhd_pub_t
 *
dhd
;

979 i‡(!
wl
)

980  
	`ERR_PTR
(-
EINVAL
);

982 #ifde‡
PROP_TXSTATUS_VSDB


983 
dhd
 = (
dhd_pub_t
 *)(
wl
->
pub
);

988 
_ndev
 = 
	`wl_to_¥mry_ndev
(
wl
);

990 
	`WL_DBG
(("i‡«me: %s,Åy≥: %d\n", 
«me
, 
ty≥
));

991 
ty≥
) {

992 
NL80211_IFTYPE_ADHOC
:

993 
NL80211_IFTYPE_AP_VLAN
:

994 
NL80211_IFTYPE_WDS
:

995 
NL80211_IFTYPE_MESH_POINT
:

996 
	`WL_ERR
(("Unsupported interfaceÅype\n"));

997 
mode
 = 
WL_MODE_IBSS
;

998  
NULL
;

999 
NL80211_IFTYPE_MONITOR
:

1000  
	`wl_cfg80211_add_m⁄ô‹_if
(
«me
);

1001 
NL80211_IFTYPE_P2P_CLIENT
:

1002 
NL80211_IFTYPE_STATION
:

1003 
wlif_ty≥
 = 
WL_P2P_IF_CLIENT
;

1004 
mode
 = 
WL_MODE_BSS
;

1006 
NL80211_IFTYPE_P2P_GO
:

1007 
NL80211_IFTYPE_AP
:

1008 
wlif_ty≥
 = 
WL_P2P_IF_GO
;

1009 
mode
 = 
WL_MODE_AP
;

1012 
	`WL_ERR
(("Unsupported interfaceÅype\n"));

1013  
NULL
;

1017 i‡(!
«me
) {

1018 
	`WL_ERR
(("name is NULL\n"));

1019  
NULL
;

1021 i‡(
wl
->
p2p_suµ‹ãd
 && (
wlif_ty≥
 != -1)) {

1022 i‡(
	`wl_gë_p2p_°©us
(
wl
, 
IF_DELETING
)) {

1026 i‡(
	`π∆_is_locked
()) {

1027 
	`π∆_u∆ock
();

1028 
rﬁlback_lock
 = 
åue
;

1030 
	`WL_INFO
(("%s: ReleasedÅheÜockánd waitÅill IF_DEL is complete\n",

1031 
__func__
));

1032 
timeout
 = 
	`waô_evít_öãºu±ibÀ_timeout
(
wl
->
√tif_ch™ge_evít
,

1033 (
	`wl_gë_p2p_°©us
(
wl
, 
IF_DELETING
Ë=
Ál£
),

1034 
	`m£cs_to_jiffõs
(
MAX_WAIT_TIME
));

1037 i‡(
rﬁlback_lock
) {

1038 
	`π∆_lock
();

1039 
rﬁlback_lock
 = 
Ál£
;

1041 i‡(
timeout
 > 0) {

1042 
	`WL_ERR
(("IF DEL is Success\n"));

1045 
	`WL_ERR
(("timeount < 0,Ñeturn -EAGAIN\n"));

1046  
	`ERR_PTR
(-
EAGAIN
);

1051 i‡(
wl
->
iÁ˚_˙t
 =
IFACE_MAX_CNT
)

1052  
	`ERR_PTR
(-
ENOMEM
);

1055 #ifde‡
PROP_TXSTATUS_VSDB


1056 i‡(!
dhd
)

1057  
	`ERR_PTR
(-
ENODEV
);

1059 i‡(!
wl
->
p2p
)

1060  
	`ERR_PTR
(-
ENODEV
);

1062 i‡(
wl
->
p2p
 && !wl->p2p->
⁄
 && 
	`°r°r
(
«me
, 
WL_P2P_INTERFACE_PREFIX
)) {

1063 
	`p2p_⁄
(
wl
Ë
åue
;

1064 
	`wl_cfgp2p_£t_fúm_p2p
(
wl
);

1065 
	`wl_cfgp2p_öô_discovîy
(
wl
);

1066 
	`gë_¥im¨y_mac
(
wl
, &
¥im¨y_mac
);

1067 
	`wl_cfgp2p_gíî©e_bss_mac
(&
¥im¨y_mac
,

1068 &
wl
->
p2p
->
dev_addr
, &wl->p2p->
öt_addr
);

1071 
	`mem£t
(
wl
->
p2p
->
vú_i‚ame
, 0, 
IFNAMSIZ
);

1072 
	`°∫˝y
(
wl
->
p2p
->
vú_i‚ame
, 
«me
, 
IFNAMSIZ
 - 1);

1074 
	`wl_nŸify_esˇn_com∂ëe
(
wl
, 
_ndev
, 
åue
,Årue);

1075 #ifde‡
PROP_TXSTATUS_VSDB


1076 i‡(!
wl
->
wlfc_⁄
 && !
dißbÀ_¥›tx
) {

1077 
dhd
->
wlfc_íabÀd
 = 
åue
;

1078 
	`dhd_wlfc_öô
(
dhd
);

1079 
îr
 = 
	`wldev_io˘l
(
_ndev
, 
WLC_UP
, &
up
, (
s32
), 
åue
);

1080 i‡(
îr
 < 0)

1081 
	`WL_ERR
(("WLC_UPÑëu∫Éº:%d\n", 
îr
));

1082 
wl
->
wlfc_⁄
 = 
åue
;

1090 
ch•ec
 = 
	`wl_cfg80211_gë_sh¨ed_‰eq
(
wùhy
);

1095 
	`wl_£t_p2p_°©us
(
wl
, 
IF_ADD
);

1096 i‡(
wlif_ty≥
 =
WL_P2P_IF_GO
)

1097 
	`wldev_iov¨_£töt
(
_ndev
, "mpc", 0);

1098 
îr
 = 
	`wl_cfgp2p_iÁdd
(
wl
, &wl->
p2p
->
öt_addr
, 
	`htod32
(
wlif_ty≥
), 
ch•ec
);

1100 i‡(
	`u∆ikñy
(
îr
)) {

1101 
	`WL_ERR
((" vútuÆ iÁ˚ádd faûed (%dË\n", 
îr
));

1102  
	`ERR_PTR
(-
ENOMEM
);

1105 
timeout
 = 
	`waô_evít_öãºu±ibÀ_timeout
(
wl
->
√tif_ch™ge_evít
,

1106 (
	`wl_gë_p2p_°©us
(
wl
, 
IF_ADD
Ë=
Ál£
),

1107 
	`m£cs_to_jiffõs
(
MAX_WAIT_TIME
));

1108 i‡(
timeout
 > 0 && (!
	`wl_gë_p2p_°©us
(
wl
, 
IF_ADD
))) {

1110 
wúñess_dev
 *
vwdev
;

1111 
vwdev
 = 
	`kzÆloc
((*vwdev), 
GFP_KERNEL
);

1112 i‡(
	`u∆ikñy
(!
vwdev
)) {

1113 
	`WL_ERR
(("CouldÇotállocate wireless device\n"));

1114  
	`ERR_PTR
(-
ENOMEM
);

1116 
vwdev
->
wùhy
 = 
wl
->
wdev
->wiphy;

1117 
	`WL_INFO
((" virtual interface(%s) is created memalloc done \n",

1118 
wl
->
p2p
->
vú_i‚ame
));

1119 
vwdev
->
i·y≥
 = 
ty≥
;

1120 
_ndev
 = 
	`wl_to_p2p_bss_ndev
(
wl
, 
P2PAPI_BSSCFG_CONNECTION
);

1121 
_ndev
->
õì80211_±r
 = 
vwdev
;

1122 
	`SET_NETDEV_DEV
(
_ndev
, 
	`wùhy_dev
(
vwdev
->
wùhy
));

1123 
vwdev
->
√tdev
 = 
_ndev
;

1124 
	`wl_£t_drv_°©us
(
wl
, 
READY
, 
_ndev
);

1125 
wl
->
p2p
->
vif_¸óãd
 = 
åue
;

1126 
	`wl_£t_mode_by_√tdev
(
wl
, 
_ndev
, 
mode
);

1127 
√t_©èch
 = 
	`wl_to_p2p_bss_¥iv©e
(
wl
, 
P2PAPI_BSSCFG_CONNECTION
);

1128 i‡(
	`π∆_is_locked
()) {

1129 
	`π∆_u∆ock
();

1130 
rﬁlback_lock
 = 
åue
;

1132 i‡(
√t_©èch
 && !
	`√t_©èch
(
wl
->
pub
, 
_ndev
->
ifödex
)) {

1133 
	`wl_Æloc_√töfo
(
wl
, 
_ndev
, 
vwdev
, 
mode
, 
PM_ENABLE
);

1134 
vÆ
 = 1;

1136 
	`wldev_iov¨_£töt
(
_ndev
, "rﬂm_off", 
vÆ
);

1137 
	`WL_ERR
((" virtual interface(%s) is "

1138 "¸óãdÇëáâach d⁄e\n", 
wl
->
p2p
->
vú_i‚ame
));

1139 i‡(
mode
 =
WL_MODE_AP
)

1140 
	`wl_£t_drv_°©us
(
wl
, 
CONNECTED
, 
_ndev
);

1141 i‡(
ty≥
 =
NL80211_IFTYPE_P2P_CLIENT
)

1142 
dhd_mode
 = 
DHD_FLAG_P2P_GC_MODE
;

1143 i‡(
ty≥
 =
NL80211_IFTYPE_P2P_GO
)

1144 
dhd_mode
 = 
DHD_FLAG_P2P_GO_MODE
;

1145 
	`DNGL_FUNC
(
dhd_cfg80211_£t_p2p_öfo
, (
wl
, 
dhd_mode
));

1148 i‡(
rﬁlback_lock
)

1149 
	`π∆_lock
();

1150 
Áû
;

1153 i‡(
rﬁlback_lock
)

1154 
	`π∆_lock
();

1155  
_ndev
;

1158 
	`wl_˛r_p2p_°©us
(
wl
, 
IF_ADD
);

1159 
	`WL_ERR
((" vútuÆ i¡îÁ˚(%sËi†nŸ cª©ed \n", 
wl
->
p2p
->
vú_i‚ame
));

1160 
	`mem£t
(
wl
->
p2p
->
vú_i‚ame
, '\0', 
IFNAMSIZ
);

1161 
wl
->
p2p
->
vif_¸óãd
 = 
Ál£
;

1162 #ifde‡
PROP_TXSTATUS_VSDB


1163 i‡(
dhd
->
wlfc_íabÀd
 && 
wl
->
wlfc_⁄
) {

1164 
dhd
->
wlfc_íabÀd
 = 
Ál£
;

1165 
	`dhd_wlfc_deöô
(
dhd
);

1166 
wl
->
wlfc_⁄
 = 
Ál£
;

1171 
Áû
:

1172 i‡(
wlif_ty≥
 =
WL_P2P_IF_GO
)

1173 
	`wldev_iov¨_£töt
(
_ndev
, "mpc", 1);

1174  
	`ERR_PTR
(-
ENODEV
);

1175 
	}
}

1177 
s32


1178 
	$wl_cfg80211_dñ_vútuÆ_iÁ˚
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
)

1180 
ëhî_addr
 
p2p_mac
;

1181 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

1182 
s32
 
timeout
 = -1;

1183 
s32
 
ªt
 = 0;

1184 
	`WL_DBG
(("Enter\n"));

1186 i‡(
wl
->
p2p_√t
 =
dev
) {

1190 
dev
 = 
	`wl_to_¥mry_ndev
(
wl
);

1193 i‡(
wl
->
p2p_suµ‹ãd
) {

1194 
	`mem˝y
(
p2p_mac
.
o˘ë
, 
wl
->
p2p
->
öt_addr
.o˘ë, 
ETHER_ADDR_LEN
);

1198 
	`WL_DBG
(("P2P: GO_NEG_PHASE status cleared "));

1199 
	`wl_˛r_p2p_°©us
(
wl
, 
GO_NEG_PHASE
);

1200 i‡(
wl
->
p2p
->
vif_¸óãd
) {

1201 i‡(
	`wl_gë_drv_°©us
(
wl
, 
SCANNING
, 
dev
)) {

1202 
	`wl_nŸify_esˇn_com∂ëe
(
wl
, 
dev
, 
åue
,Årue);

1204 
	`wldev_iov¨_£töt
(
dev
, "mpc", 1);

1207 i‡(
	`wl_gë_drv_°©us
(
wl
, 
DISCONNECTING
, 
dev
) &&

1208 (
	`wl_gë_mode_by_√tdev
(
wl
, 
dev
Ë!
WL_MODE_AP
)) {

1209 
	`WL_ERR
(("Wait for Link DownÉvent for GC !\n"));

1210 
waô_f‹_com∂ëi⁄_timeout


1211 (&
wl
->
iÁ˚_dißbÀ
, 
	`m£cs_to_jiffõs
(500));

1213 
	`wl_£t_p2p_°©us
(
wl
, 
IF_DELETING
);

1214 
	`DNGL_FUNC
(
dhd_cfg80211_˛ón_p2p_öfo
, (
wl
));

1217 i‡(
	`wl_gë_mode_by_√tdev
(
wl
, 
dev
Ë=
WL_MODE_AP
) {

1218 
	`wl_add_ªmove_evítmsg
(
dev
, 
WLC_E_PROBREQ_MSG
, 
Ál£
);

1220 
ªt
 = 
	`wl_cfgp2p_ifdißbÀ
(
wl
, &
p2p_mac
);

1224 i‡(
ªt
 == 0) {

1225 
	`WL_ERR
(("Wait for Link DownÉvent for GO !!!\n"));

1226 
	`waô_f‹_com∂ëi⁄_timeout
(&
wl
->
iÁ˚_dißbÀ
,

1227 
	`m£cs_to_jiffõs
(500));

1229 
	`m¶ìp
(300);

1232 
	`wl_cfgp2p_˛ór_m™agemít_õ
(
wl
, 
	`wl_cfgp2p_föd_idx
(wl, 
dev
));

1234 
ªt
 = 
	`wl_cfgp2p_ifdñ
(
wl
, &
p2p_mac
);

1242 i‡(
ªt
) {

1243 
√t_devi˚
 *
ndev
 = 
	`wl_to_¥mry_ndev
(
wl
);

1244 
	`WL_ERR
(("FirmwareÑeturnedánÉrror (%d) fromÖ2p_ifdel"

1245 "HANG NŸifiˇti⁄ síàtÿ%s\n", 
ªt
, 
ndev
->
«me
));

1246 
	`√t_os_£nd_h™g_mesßge
(
ndev
);

1249 
timeout
 = 
	`waô_evít_öãºu±ibÀ_timeout
(
wl
->
√tif_ch™ge_evít
,

1250 (
wl
->
p2p
->
vif_¸óãd
 =
Ál£
),

1251 
	`m£cs_to_jiffõs
(
MAX_WAIT_TIME
));

1252 i‡(
timeout
 > 0 && (
wl
->
p2p
->
vif_¸óãd
 =
Ál£
)) {

1253 
	`WL_DBG
(("IFDEL operation done\n"));

1255 
	`WL_ERR
(("IFDEL didn't completeÖroperly\n"));

1257 
ªt
 = 
	`dhd_dñ_m⁄ô‹
(
dev
);

1260  
ªt
;

1261 
	}
}

1263 
s32


1264 
	$wl_cfg80211_ch™ge_vútuÆ_iÁ˚
(
wùhy
 *wùhy, 
√t_devi˚
 *
ndev
,

1265 
∆80211_i·y≥
 
ty≥
, 
u32
 *
Êags
,

1266 
vif_∑øms
 *
∑øms
)

1268 
s32
 
≠
 = 0;

1269 
s32
 
ö‰a
 = 0;

1270 
s32
 
wlif_ty≥
;

1271 
s32
 
mode
 = 0;

1272 
ch™•ec_t
 
ch•ec
;

1273 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

1274 
dhd_pub_t
 *
dhd
 = (dhd_pub_à*)(
wl
->
pub
);

1275 
	`WL_DBG
(("E¡îÅy≥ %d\n", 
ty≥
));

1276 
ty≥
) {

1277 
NL80211_IFTYPE_MONITOR
:

1278 
NL80211_IFTYPE_WDS
:

1279 
NL80211_IFTYPE_MESH_POINT
:

1280 
≠
 = 1;

1281 
	`WL_ERR
(("type (%d) : currently we doÇot supportÅhisÅype\n",

1282 
ty≥
));

1284 
NL80211_IFTYPE_ADHOC
:

1285 
mode
 = 
WL_MODE_IBSS
;

1287 
NL80211_IFTYPE_STATION
:

1288 
NL80211_IFTYPE_P2P_CLIENT
:

1289 
mode
 = 
WL_MODE_BSS
;

1290 
ö‰a
 = 1;

1292 
NL80211_IFTYPE_AP
:

1293 
NL80211_IFTYPE_AP_VLAN
:

1294 
NL80211_IFTYPE_P2P_GO
:

1295 
mode
 = 
WL_MODE_AP
;

1296 
≠
 = 1;

1299  -
EINVAL
;

1301 i‡(!
dhd
)

1302  -
EINVAL
;

1303 i‡(
≠
) {

1304 
	`wl_£t_mode_by_√tdev
(
wl
, 
ndev
, 
mode
);

1305 i‡(
wl
->
p2p_suµ‹ãd
 && wl->
p2p
->
vif_¸óãd
) {

1306 
	`WL_DBG
(("p2p_vif_¸óãd (%dËp2p_⁄ (%d)\n", 
wl
->
p2p
->
vif_¸óãd
,

1307 
	`p2p_⁄
(
wl
)));

1308 
	`wldev_iov¨_£töt
(
ndev
, "mpc", 0);

1309 
	`wl_nŸify_esˇn_com∂ëe
(
wl
, 
ndev
, 
åue
,Årue);

1315 
ch•ec
 = 
	`wl_cfg80211_gë_sh¨ed_‰eq
(
wùhy
);

1317 
wlif_ty≥
 = 
WL_P2P_IF_GO
;

1318 
	`WL_ERR
(("%s :áp (%d), infra (%d), iftype: (%d)\n",

1319 
ndev
->
«me
, 
≠
, 
ö‰a
, 
ty≥
));

1320 
	`wl_£t_p2p_°©us
(
wl
, 
IF_CHANGING
);

1321 
	`wl_˛r_p2p_°©us
(
wl
, 
IF_CHANGED
);

1322 
	`wl_cfgp2p_ifch™ge
(
wl
, &wl->
p2p
->
öt_addr
, 
	`htod32
(
wlif_ty≥
), 
ch•ec
);

1323 
	`waô_evít_öãºu±ibÀ_timeout
(
wl
->
√tif_ch™ge_evít
,

1324 (
	`wl_gë_p2p_°©us
(
wl
, 
IF_CHANGED
Ë=
åue
),

1325 
	`m£cs_to_jiffõs
(
MAX_WAIT_TIME
));

1326 
	`wl_£t_mode_by_√tdev
(
wl
, 
ndev
, 
mode
);

1327 
dhd
->
›_mode
 &~
DHD_FLAG_P2P_GC_MODE
;

1328 
dhd
->
›_mode
 |
DHD_FLAG_P2P_GO_MODE
;

1329 
	`wl_˛r_p2p_°©us
(
wl
, 
IF_CHANGING
);

1330 
	`wl_˛r_p2p_°©us
(
wl
, 
IF_CHANGED
);

1331 i‡(
mode
 =
WL_MODE_AP
)

1332 
	`wl_£t_drv_°©us
(
wl
, 
CONNECTED
, 
ndev
);

1333 } i‡(
ndev
 =
	`wl_to_¥mry_ndev
(
wl
) &&

1334 !
	`wl_gë_drv_°©us
(
wl
, 
AP_CREATED
, 
ndev
)) {

1335 
	`wl_£t_drv_°©us
(
wl
, 
AP_CREATING
, 
ndev
);

1336 i‡(!
wl
->
≠_öfo
 &&

1337 !(
wl
->
≠_öfo
 = 
	`kzÆloc
((≠_öfo), 
GFP_KERNEL
))) {

1338 
	`WL_ERR
(("structáp_saved_ieállocation failed\n"));

1339  -
ENOMEM
;

1342 
	`WL_ERR
(("Cannot changeÅhe interface for GO or SOFTAP\n"));

1343  -
EINVAL
;

1346 
	`WL_DBG
(("Change_virtual_iface forÅransition from GO/APÅo client/STA"));

1349 
ndev
->
õì80211_±r
->
i·y≥
 = 
ty≥
;

1351 
	}
}

1353 
s32


1354 
	$wl_cfg80211_nŸify_iÁdd
(
√t_devi˚
 *
ndev
, 
s32
 
idx
, s32 
bssidx
,

1355 * 
_√t_©èch
)

1357 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

1358 
s32
 
ªt
 = 
BCME_OK
;

1359 
	`WL_DBG
(("Enter"));

1360 i‡(!
ndev
) {

1361 
	`WL_ERR
(("net is NULL\n"));

1364 i‡(
wl
->
p2p_suµ‹ãd
 && 
	`wl_gë_p2p_°©us
(wl, 
IF_ADD
)) {

1365 
	`WL_DBG
(("IF_ADDÉvent called from dongle, old interfaceÇame: %s,"

1366 "√wÇame: %s\n", 
ndev
->
«me
, 
wl
->
p2p
->
vú_i‚ame
));

1368 
	`°∫˝y
(
ndev
->
«me
, 
wl
->
p2p
->
vú_i‚ame
, 
IFNAMSIZ
 - 1);

1369 
	`wl_to_p2p_bss_ndev
(
wl
, 
P2PAPI_BSSCFG_CONNECTION
Ë
ndev
;

1370 
	`wl_to_p2p_bss_bssidx
(
wl
, 
P2PAPI_BSSCFG_CONNECTION
Ë
bssidx
;

1371 
	`wl_to_p2p_bss_¥iv©e
(
wl
, 
P2PAPI_BSSCFG_CONNECTION
Ë
_√t_©èch
;

1372 
ndev
->
ifödex
 = 
idx
;

1373 
	`wl_˛r_p2p_°©us
(
wl
, 
IF_ADD
);

1375 
	`wake_up_öãºu±ibÀ
(&
wl
->
√tif_ch™ge_evít
);

1377 
ªt
 = 
BCME_NOTREADY
;

1379  
ªt
;

1380 
	}
}

1382 
s32


1383 
	$wl_cfg80211_nŸify_ifdñ
()

1385 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

1387 
	`WL_DBG
(("Enter \n"));

1388 
	`wl_˛r_p2p_°©us
(
wl
, 
IF_DELETING
);

1389 
	`wake_up_öãºu±ibÀ
(&
wl
->
√tif_ch™ge_evít
);

1391 
	}
}

1393 
s32


1394 
	$wl_cfg80211_ifdñ_›s
(
√t_devi˚
 *
ndev
)

1396 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

1397 
boﬁ
 
rﬁlback_lock
 = 
Ál£
;

1398 
s32
 
ödex
 = 0;

1399 #ifde‡
PROP_TXSTATUS_VSDB


1400 
dhd_pub_t
 *
dhd
 = (dhd_pub_à*)(
wl
->
pub
);

1402 i‡(!
ndev
 || (
	`°æí
“dev->
«me
) == 0)) {

1403 
	`WL_ERR
(("net is NULL\n"));

1407 i‡(
	`p2p_is_⁄
(
wl
Ë&& wl->
p2p
->
vif_¸óãd
 &&

1408 
	`wl_gë_p2p_°©us
(
wl
, 
IF_DELETING
)) {

1409 i‡(
wl
->
sˇn_ªque°
 &&

1410 (
wl
->
esˇn_öfo
.
ndev
 ==Çdev)) {

1412 
wl
->
esˇn_öfo
.
esˇn_°©e
 = 
WL_ESCAN_STATE_IDLE
;

1413 i‡(!
	`π∆_is_locked
()) {

1414 
	`π∆_lock
();

1415 
rﬁlback_lock
 = 
åue
;

1417 
	`WL_DBG
(("ESCAN COMPLETED\n"));

1418 
	`wl_nŸify_esˇn_com∂ëe
(
wl
, 
ndev
, 
åue
, 
Ál£
);

1419 i‡(
rﬁlback_lock
)

1420 
	`π∆_u∆ock
();

1422 
	`WL_ERR
(("IF_DELÉvent called from dongle,Çet %x, vifÇame: %s\n",

1423 ()
ndev
, 
wl
->
p2p
->
vú_i‚ame
));

1425 
	`mem£t
(
wl
->
p2p
->
vú_i‚ame
, '\0', 
IFNAMSIZ
);

1426 
ödex
 = 
	`wl_cfgp2p_föd_idx
(
wl
, 
ndev
);

1427 
	`wl_to_p2p_bss_ndev
(
wl
, 
ödex
Ë
NULL
;

1428 
	`wl_to_p2p_bss_bssidx
(
wl
, 
ödex
Ë
WL_INVALID
;

1429 
wl
->
p2p
->
vif_¸óãd
 = 
Ál£
;

1431 
	`WL_DBG
(("ödex : %d\n", 
ödex
));

1432 #ifde‡
PROP_TXSTATUS_VSDB


1433 i‡(
dhd
->
wlfc_íabÀd
 && 
wl
->
wlfc_⁄
) {

1434 
dhd
->
wlfc_íabÀd
 = 
Ál£
;

1435 
	`dhd_wlfc_deöô
(
dhd
);

1436 
wl
->
wlfc_⁄
 = 
Ál£
;

1439 
	`wl_˛r_drv_°©us
(
wl
, 
CONNECTED
, 
ndev
);

1442 
	`wake_up_öãºu±ibÀ
(&
wl
->
√tif_ch™ge_evít
);

1445 
	}
}

1447 
s32


1448 
	$wl_cfg80211_is_¥ogªss_iÁdd
()

1450 
s32
 
is_¥ogªss
 = 0;

1451 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

1452 i‡(
	`wl_gë_p2p_°©us
(
wl
, 
IF_ADD
))

1453 
is_¥ogªss
 = 1;

1454  
is_¥ogªss
;

1455 
	}
}

1457 
s32


1458 
	$wl_cfg80211_is_¥ogªss_ifch™ge
()

1460 
s32
 
is_¥ogªss
 = 0;

1461 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

1462 i‡(
	`wl_gë_p2p_°©us
(
wl
, 
IF_CHANGING
))

1463 
is_¥ogªss
 = 1;

1464  
is_¥ogªss
;

1465 
	}
}

1468 
s32


1469 
	$wl_cfg80211_nŸify_ifch™ge
()

1471 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

1472 i‡(
	`wl_gë_p2p_°©us
(
wl
, 
IF_CHANGING
)) {

1473 
	`wl_£t_p2p_°©us
(
wl
, 
IF_CHANGED
);

1474 
	`wake_up_öãºu±ibÀ
(&
wl
->
√tif_ch™ge_evít
);

1477 
	}
}

1480 
s32
 
	$wl_föd_li°í_ch™√l
(
wl_¥iv
 *
wl
,

1481 
u8
 *
õ
, 
u32
 
õ_Àn
)

1483 
wifi_p2p_õ_t
 *
p2p_õ
;

1484 
u8
 *
íd
, *
pos
;

1485 
s32
 
li°í_ch™√l
;

1487 
p2p_õ
 = 
	`wl_cfgp2p_föd_p2põ
(
õ
, 
õ_Àn
);

1489 i‡(
p2p_õ
 =
NULL
)

1492 
pos
 = 
p2p_õ
->
subñts
;

1493 
íd
 = 
p2p_õ
->
subñts
 + (p2p_õ->
Àn
 - 4);

1495 
	`CFGP2P_DBG
((" foundÖ2p ie !Üenth %d \n",

1496 
p2p_õ
->
Àn
));

1498 
pos
 < 
íd
) {

1499 
uöt16
 
©å_Àn
;

1500 i‡(
pos
 + 2 >
íd
) {

1501 
	`CFGP2P_DBG
((" -- Invalid P2Páttribute"));

1504 
©å_Àn
 = ((
uöt16
Ë(((
pos
 + 1)[1] << 8) | (pos + 1)[0]));

1506 i‡(
pos
 + 3 + 
©å_Àn
 > 
íd
) {

1507 
	`CFGP2P_DBG
(("P2P: Attribute underflow "

1509 
©å_Àn
, (Ë(
íd
 - 
pos
 - 3)));

1516 i‡(
pos
[0] == 6) {

1520 
li°í_ch™√l
 = 
pos
[1 + 2 + 3 + 1];

1522 i‡(
li°í_ch™√l
 =
SOCIAL_CHAN_1
 ||

1523 
li°í_ch™√l
 =
SOCIAL_CHAN_2
 ||

1524 
li°í_ch™√l
 =
SOCIAL_CHAN_3
) {

1525 
	`CFGP2P_DBG
((" Found my Li°í Ch™√»%d \n", 
li°í_ch™√l
));

1526  
li°í_ch™√l
;

1529 
pos
 +3 + 
©å_Àn
;

1532 
	}
}

1534 
	$wl_sˇn_¥ï
(
wl_sˇn_∑øms
 *
∑øms
, 
cfg80211_sˇn_ªque°
 *
ªque°
)

1536 
u32
 
n_ssids
;

1537 
u32
 
n_ch™√ls
;

1538 
u16
 
ch™√l
;

1539 
ch™•ec_t
 
ch™•ec
;

1540 
s32
 
i
 = 0, 
j
 = 0, 
off£t
;

1541 *
±r
;

1542 
wlc_ssid_t
 
ssid
;

1543 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

1545 
	`mem˝y
(&
∑øms
->
bssid
, &
ëhî_bˇ°
, 
ETHER_ADDR_LEN
);

1546 
∑øms
->
bss_ty≥
 = 
DOT11_BSSTYPE_ANY
;

1547 
∑øms
->
sˇn_ty≥
 = 0;

1548 
∑øms
->
≈robes
 = -1;

1549 
∑øms
->
a˘ive_time
 = -1;

1550 
∑øms
->
∑ssive_time
 = -1;

1551 
∑øms
->
home_time
 = -1;

1552 
∑øms
->
ch™√l_num
 = 0;

1553 
	`mem£t
(&
∑øms
->
ssid
, 0, (
wlc_ssid_t
));

1555 
	`WL_SCAN
(("Preparing ScanÑequest\n"));

1556 
	`WL_SCAN
(("≈robes=%d\n", 
∑øms
->
≈robes
));

1557 
	`WL_SCAN
(("a˘ive_time=%d\n", 
∑øms
->
a˘ive_time
));

1558 
	`WL_SCAN
(("∑ssive_time=%d\n", 
∑øms
->
∑ssive_time
));

1559 
	`WL_SCAN
(("home_time=%d\n", 
∑øms
->
home_time
));

1560 
	`WL_SCAN
(("sˇn_ty≥=%d\n", 
∑øms
->
sˇn_ty≥
));

1562 
∑øms
->
≈robes
 = 
	`htod32
(params->nprobes);

1563 
∑øms
->
a˘ive_time
 = 
	`htod32
(params->active_time);

1564 
∑øms
->
∑ssive_time
 = 
	`htod32
(params->passive_time);

1565 
∑øms
->
home_time
 = 
	`htod32
(params->home_time);

1568 i‡(!
ªque°
)

1571 
n_ssids
 = 
ªque°
->n_ssids;

1572 
n_ch™√ls
 = 
ªque°
->n_channels;

1575 
	`WL_SCAN
(("### List of channelspecsÅo scan ###\n"));

1576 i‡(
n_ch™√ls
 > 0) {

1577 
i
 = 0; i < 
n_ch™√ls
; i++) {

1578 
ch™•ec
 = 0;

1579 
ch™√l
 = 
	`õì80211_‰equícy_to_ch™√l
(
ªque°
->
ch™√ls
[
i
]->
˚¡î_‰eq
);

1581 i‡((
wl
->
esˇn_öfo
.
ndev
 !
	`wl_to_¥mry_ndev
(wl)) &&

1582 (
ªque°
->
ch™√ls
[
i
]->
Êags
 &

1583 (
IEEE80211_CHAN_RADAR
 | 
IEEE80211_CHAN_PASSIVE_SCAN
)))

1586 i‡(
ªque°
->
ch™√ls
[
i
]->
b™d
 =
IEEE80211_BAND_2GHZ
) {

1587 #ifde‡
WL_HOST_BAND_MGMT


1588 i‡(
wl
->
cuº_b™d
 =
WLC_BAND_5G
) {

1589 
	`WL_DBG
(("I¿5G o∆y mode, omô 2G ch™√l:%d\n", 
ch™√l
));

1593 
ch™•ec
 |
WL_CHANSPEC_BAND_2G
;

1595 #ifde‡
WL_HOST_BAND_MGMT


1596 i‡(
wl
->
cuº_b™d
 =
WLC_BAND_2G
) {

1597 
	`WL_DBG
(("I¿2G o∆y mode, omô 5G ch™√l:%d\n", 
ch™√l
));

1601 
ch™•ec
 |
WL_CHANSPEC_BAND_5G
;

1604 
ch™•ec
 |
WL_CHANSPEC_BW_20
;

1605 
ch™•ec
 |
WL_CHANSPEC_CTL_SB_NONE
;

1607 
∑øms
->
ch™√l_li°
[
j
] = 
ch™√l
;

1608 
∑øms
->
ch™√l_li°
[
j
] &
WL_CHANSPEC_CHAN_MASK
;

1609 
∑øms
->
ch™√l_li°
[
j
] |
ch™•ec
;

1610 
	`WL_SCAN
(("Chan : %d, Channel spec: %x \n",

1611 
ch™√l
, 
∑øms
->
ch™√l_li°
[
j
]));

1612 
∑øms
->
ch™√l_li°
[
j
] = 
	`wl_ch•ec_ho°_to_drivî
(params->channel_list[j]);

1613 
j
++;

1616 
	`WL_SCAN
(("Scanningáll channels\n"));

1618 
n_ch™√ls
 = 
j
;

1620 
	`WL_SCAN
(("### List of SSIDsÅo scan ###\n"));

1621 i‡(
n_ssids
 > 0) {

1622 
off£t
 = 
	`off£tof
(
wl_sˇn_∑øms_t
, 
ch™√l_li°
Ë+ 
n_ch™√ls
 * (
u16
);

1623 
off£t
 = 
	`roundup
(off£t, (
u32
));

1624 
±r
 = (*)
∑øms
 + 
off£t
;

1625 
i
 = 0; i < 
n_ssids
; i++) {

1626 
	`mem£t
(&
ssid
, 0, (
wlc_ssid_t
));

1627 
ssid
.
SSID_Àn
 = 
ªque°
->
ssids
[
i
].
ssid_Àn
;

1628 
	`mem˝y
(
ssid
.
SSID
, 
ªque°
->
ssids
[
i
].ssid, ssid.
SSID_Àn
);

1629 i‡(!
ssid
.
SSID_Àn
)

1630 
	`WL_SCAN
(("%d: Brﬂdˇ° sˇn\n", 
i
));

1632 
	`WL_SCAN
(("%d: sˇ¿ f‹ %†sizê=%d\n", 
i
,

1633 
ssid
.
SSID
, ssid.
SSID_Àn
));

1634 
	`mem˝y
(
±r
, &
ssid
, (
wlc_ssid_t
));

1635 
±r
 +(
wlc_ssid_t
);

1638 
	`WL_SCAN
(("Broadcast scan\n"));

1641 
∑øms
->
ch™√l_num
 =

1642 
	`htod32
((
n_ssids
 << 
WL_SCAN_PARAMS_NSSID_SHIFT
) |

1643 (
n_ch™√ls
 & 
WL_SCAN_PARAMS_COUNT_MASK
));

1645 i‡(
n_ch™√ls
 =1 && 
	`wl_gë_drv_°©us_Æl
(
wl
, 
CONNECTED
)) {

1646 
∑øms
->
a˘ive_time
 = 
WL_SCAN_CONNECT_DWELL_TIME_MS
;

1648 
	}
}

1650 
s32


1651 
	$wl_run_isˇn
(
wl_isˇn_˘æ
 *
isˇn
, 
cfg80211_sˇn_ªque°
 *
ªque°
, 
u16
 
a˘i⁄
)

1653 
u32
 
n_ch™√ls
;

1654 
u32
 
n_ssids
;

1655 
s32
 
∑øms_size
 =

1656 (
WL_SCAN_PARAMS_FIXED_SIZE
 + 
	`off£tof
(
wl_isˇn_∑øms_t
, 
∑øms
));

1657 
wl_isˇn_∑øms
 *
∑øms
 = 
NULL
;

1658 
s32
 
îr
 = 0;

1660 i‡(
ªque°
 !
NULL
) {

1661 
n_ch™√ls
 = 
ªque°
->n_channels;

1662 
n_ssids
 = 
ªque°
->n_ssids;

1664 i‡(
n_ch™√ls
 % 2)

1666 
∑øms_size
 +(
u16
Ë* (
n_ch™√ls
 + 1);

1668 
∑øms_size
 +(
u16
Ë* 
n_ch™√ls
;

1671 
∑øms_size
 +(
wlc_ssid
Ë* 
n_ssids
;

1673 
∑øms
 = (
wl_isˇn_∑øms
 *)
	`kzÆloc
(
∑øms_size
, 
GFP_KERNEL
);

1674 i‡(!
∑øms
) {

1675 
îr
 = -
ENOMEM
;

1676 
d⁄e
;

1678 
	`wl_sˇn_¥ï
(&
∑øms
->∑øms, 
ªque°
);

1680 
∑øms
->
vîsi⁄
 = 
	`htod32
(
ISCAN_REQ_VERSION
);

1681 
∑øms
->
a˘i⁄
 = 
	`htod16
(action);

1682 
∑øms
->
sˇn_duøti⁄
 = 
	`htod16
(0);

1684 i‡(
∑øms_size
 + ("isˇn"Ë>
WLC_IOCTL_MEDLEN
) {

1685 
	`WL_ERR
(("ioctl bufferÜength isÇot sufficient\n"));

1686 
îr
 = -
ENOMEM
;

1687 
d⁄e
;

1689 
îr
 = 
	`wldev_iov¨_£tbuf
(
isˇn
->
dev
, "isˇn", 
∑øms
, 
∑øms_size
,

1690 
isˇn
->
io˘l_buf
, 
WLC_IOCTL_MEDLEN
, 
NULL
);

1691 i‡(
	`u∆ikñy
(
îr
)) {

1692 i‡(
îr
 =-
EBUSY
) {

1693 
	`WL_ERR
(("system busy : iscan canceled\n"));

1695 
	`WL_ERR
(("îr‹ (%d)\n", 
îr
));

1699 
d⁄e
:

1700 i‡(
∑øms
)

1701 
	`k‰ì
(
∑øms
);

1702  
îr
;

1703 
	}
}

1705 
s32
 
	$wl_do_isˇn
(
wl_¥iv
 *
wl
, 
cfg80211_sˇn_ªque°
 *
ªque°
)

1707 
wl_isˇn_˘æ
 *
isˇn
 = 
	`wl_to_isˇn
(
wl
);

1708 
√t_devi˚
 *
ndev
 = 
	`wl_to_¥mry_ndev
(
wl
);

1709 
s32
 
∑ssive_sˇn
;

1710 
s32
 
îr
 = 0;

1712 
isˇn
->
°©e
 = 
WL_ISCAN_STATE_SCANING
;

1714 
∑ssive_sˇn
 = 
wl
->
a˘ive_sˇn
 ? 0 : 1;

1715 
îr
 = 
	`wldev_io˘l
(
ndev
, 
WLC_SET_PASSIVE_SCAN
,

1716 &
∑ssive_sˇn
, ’assive_sˇn), 
åue
);

1717 i‡(
	`u∆ikñy
(
îr
)) {

1718 
	`WL_DBG
(("îr‹ (%d)\n", 
îr
));

1719  
îr
;

1721 
wl
->
isˇn_kick°¨t
 = 
åue
;

1722 
	`wl_run_isˇn
(
isˇn
, 
ªque°
, 
WL_SCAN_ACTION_START
);

1723 
	`mod_timî
(&
isˇn
->
timî
, 
jiffõs
 + 
	`m£cs_to_jiffõs
(isˇn->
timî_ms
));

1724 
isˇn
->
timî_⁄
 = 1;

1726  
îr
;

1727 
	}
}

1728 
s32


1729 
	$wl_gë_vÆid_ch™√ls
(
√t_devi˚
 *
ndev
, 
u8
 *
vÆid_ch™_li°
, 
s32
 
size
)

1731 
wl_uöt32_li°_t
 *
li°
;

1732 
s32
 
îr
 = 
BCME_OK
;

1733 i‡(
vÆid_ch™_li°
 =
NULL
 || 
size
 <= 0)

1734  -
ENOMEM
;

1736 
	`mem£t
(
vÆid_ch™_li°
, 0, 
size
);

1737 
li°
 = (
wl_uöt32_li°_t
 *)(*Ë
vÆid_ch™_li°
;

1738 
li°
->
cou¡
 = 
	`htod32
(
WL_NUMCHANNELS
);

1739 
îr
 = 
	`wldev_io˘l
(
ndev
, 
WLC_GET_VALID_CHANNELS
, 
vÆid_ch™_li°
, 
size
, 
Ál£
);

1740 i‡(
îr
 != 0) {

1741 
	`WL_ERR
(("gë ch™√l†Áûed wôh %d\n", 
îr
));

1744  
îr
;

1745 
	}
}

1748 
s32


1749 
	$wl_run_esˇn
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
,

1750 
cfg80211_sˇn_ªque°
 *
ªque°
, 
uöt16
 
a˘i⁄
)

1752 
s32
 
îr
 = 
BCME_OK
;

1753 
u32
 
n_ch™√ls
;

1754 
u32
 
n_ssids
;

1755 
s32
 
∑øms_size
 = (
WL_SCAN_PARAMS_FIXED_SIZE
 + 
	`OFFSETOF
(
wl_esˇn_∑øms_t
, 
∑øms
));

1756 
wl_esˇn_∑øms_t
 *
∑øms
 = 
NULL
;

1757 
u8
 
ch™_buf
[(
u32
)*(
WL_NUMCHANNELS
 + 1)];

1758 
u32
 
num_ch™s
 = 0;

1759 
s32
 
ch™√l
;

1760 
s32
 
n_vÆid_ch™
;

1761 
s32
 
£¨ch_°©e
 = 
WL_P2P_DISC_ST_SCAN
;

1762 
u32
 
i
, 
j
, 
n_nodfs
 = 0;

1763 
u16
 *
deÁu…_ch™_li°
 = 
NULL
;

1764 
wl_uöt32_li°_t
 *
li°
;

1765 
√t_devi˚
 *
dev
 = 
NULL
;

1767 
	`WL_DBG
(("Enter \n"));

1769 i‡(!
wl
) {

1770 
îr
 = -
EINVAL
;

1771 
exô
;

1773 i‡(!
wl
->
p2p_suµ‹ãd
 || !
	`p2p_sˇn
(wl)) {

1775 
	`WL_SCAN
((" LEGACY E-SCAN START\n"));

1778 i‡(
ªque°
 !
NULL
) {

1781 
n_ch™√ls
 = 
ªque°
->n_channels;

1782 
n_ssids
 = 
ªque°
->n_ssids;

1784 i‡(
n_ch™√ls
 % 2)

1786 
∑øms_size
 +(
u16
Ë* (
n_ch™√ls
 + 1);

1788 
∑øms_size
 +(
u16
Ë* 
n_ch™√ls
;

1791 
∑øms_size
 +(
wlc_ssid
Ë* 
n_ssids
;

1793 
∑øms
 = (
wl_esˇn_∑øms_t
 *Ë
	`kzÆloc
(
∑øms_size
, 
GFP_KERNEL
);

1794 i‡(
∑øms
 =
NULL
) {

1795 
îr
 = -
ENOMEM
;

1796 
exô
;

1798 
	`wl_sˇn_¥ï
(&
∑øms
->∑øms, 
ªque°
);

1801 
∑øms
->
vîsi⁄
 = 
	`htod32
(
ESCAN_REQ_VERSION
);

1802 
∑øms
->
a˘i⁄
 = 
	`htod16
(action);

1803 
∑øms
->
sync_id
 = 
	`htod16
(0x1234);

1804 i‡(
∑øms_size
 + ("esˇn"Ë>
WLC_IOCTL_MEDLEN
) {

1805 
	`WL_ERR
(("ioctl bufferÜengthÇot sufficient\n"));

1806 
	`k‰ì
(
∑øms
);

1807 
îr
 = -
ENOMEM
;

1808 
exô
;

1810 
îr
 = 
	`wldev_iov¨_£tbuf
(
ndev
, "esˇn", 
∑øms
, 
∑øms_size
,

1811 
wl
->
esˇn_io˘l_buf
, 
WLC_IOCTL_MEDLEN
, 
NULL
);

1812 i‡(
	`u∆ikñy
(
îr
)) {

1813 i‡(
îr
 =
BCME_EPERM
)

1815 
	`WL_DBG
((" Esˇ¿nŸÖîmôãdáàthi†timê(%d)\n", 
îr
));

1817 
	`WL_ERR
((" Esˇ¿£àîr‹ (%d)\n", 
îr
));

1819 
	`k‰ì
(
∑øms
);

1821 i‡(
	`p2p_is_⁄
(
wl
Ë&& 
	`p2p_sˇn
(wl)) {

1823 
s32
 
_‰eq
 = 0;

1824 
n_nodfs
 = 0;

1825 i‡(
ªque°
 &&Ñeque°->
n_ch™√ls
) {

1826 
num_ch™s
 = 
ªque°
->
n_ch™√ls
;

1827 
	`WL_SCAN
((" ch™¿numbî : %d\n", 
num_ch™s
));

1828 
deÁu…_ch™_li°
 = 
	`kzÆloc
(
num_ch™s
 * (*default_chan_list),

1829 
GFP_KERNEL
);

1830 i‡(
deÁu…_ch™_li°
 =
NULL
) {

1831 
	`WL_ERR
(("channelÜistállocation failed \n"));

1832 
îr
 = -
ENOMEM
;

1833 
exô
;

1835 i‡(!
	`wl_gë_vÆid_ch™√ls
(
ndev
, 
ch™_buf
, (chan_buf))) {

1836 
li°
 = (
wl_uöt32_li°_t
 *Ë
ch™_buf
;

1837 
n_vÆid_ch™
 = 
	`dtoh32
(
li°
->
cou¡
);

1838 
i
 = 0; i < 
num_ch™s
; i++)

1840 #ifde‡
WL_HOST_BAND_MGMT


1841 
ch™√l_b™d
 = 0;

1843 
_‰eq
 = 
ªque°
->
ch™√ls
[
i
]->
˚¡î_‰eq
;

1844 
ch™√l
 = 
	`õì80211_‰equícy_to_ch™√l
(
_‰eq
);

1845 #ifde‡
WL_HOST_BAND_MGMT


1846 
ch™√l_b™d
 = (
ch™√l
 > 
CH_MAX_2G_CHANNEL
) ?

1847 
WLC_BAND_5G
 : 
WLC_BAND_2G
;

1848 i‡((
wl
->
cuº_b™d
 !
WLC_BAND_AUTO
) &&

1849 (
wl
->
cuº_b™d
 !
ch™√l_b™d
) &&

1850 !
	`IS_P2P_SOCIAL_CHANNEL
(
ch™√l
))

1855 i‡(
ªque°
->
ch™√ls
[
i
]->
Êags
 &

1856 (
IEEE80211_CHAN_RADAR


1857 | 
IEEE80211_CHAN_PASSIVE_SCAN
))

1860 
j
 = 0; j < 
n_vÆid_ch™
; j++) {

1864 i‡(
ch™√l
 =(
	`dtoh32
(
li°
->
ñemít
[
j
])))

1865 
deÁu…_ch™_li°
[
n_nodfs
++] =

1866 
ch™√l
;

1871 i‡(
num_ch™s
 == 3 && (

1872 (
deÁu…_ch™_li°
[0] =
SOCIAL_CHAN_1
) &&

1873 (
deÁu…_ch™_li°
[1] =
SOCIAL_CHAN_2
) &&

1874 (
deÁu…_ch™_li°
[2] =
SOCIAL_CHAN_3
))) {

1876 
£¨ch_°©e
 = 
WL_P2P_DISC_ST_SEARCH
;

1877 
	`WL_INFO
(("P2P SEARCH PHASE START \n"));

1878 } i‡((
dev
 = 
	`wl_to_p2p_bss_ndev
(
wl
, 
P2PAPI_BSSCFG_CONNECTION
)) &&

1879 (
	`wl_gë_mode_by_√tdev
(
wl
, 
dev
Ë=
WL_MODE_AP
)) {

1881 
	`WL_INFO
(("Alreadyá GO. Do SEARCH Only"));

1882 
£¨ch_°©e
 = 
WL_P2P_DISC_ST_SEARCH
;

1883 
num_ch™s
 = 
n_nodfs
;

1886 
	`WL_INFO
(("P2P SCAN STATE START \n"));

1887 
num_ch™s
 = 
n_nodfs
;

1891 
îr
 = 
	`wl_cfgp2p_esˇn
(
wl
, 
ndev
, wl->
a˘ive_sˇn
, 
num_ch™s
, 
deÁu…_ch™_li°
,

1892 
£¨ch_°©e
, 
a˘i⁄
,

1893 
	`wl_to_p2p_bss_bssidx
(
wl
, 
P2PAPI_BSSCFG_DEVICE
));

1894 
	`k‰ì
(
deÁu…_ch™_li°
);

1896 
exô
:

1897 i‡(
	`u∆ikñy
(
îr
)) {

1899 i‡((
îr
 =
BCME_EPERM
Ë&& 
wl
->
sˇn_suµªs£d
)

1900 
	`WL_DBG
(("Escan failed: Scan Suppressed \n"));

1902 
	`WL_ERR
(("îr‹ (%d)\n", 
îr
));

1904  
îr
;

1905 
	}
}

1908 
s32


1909 
	$wl_do_esˇn
(
wl_¥iv
 *
wl
, 
wùhy
 *wùhy, 
√t_devi˚
 *
ndev
,

1910 
cfg80211_sˇn_ªque°
 *
ªque°
)

1912 
s32
 
îr
 = 
BCME_OK
;

1913 
s32
 
∑ssive_sˇn
;

1914 
wl_sˇn_ªsu…s_t
 *
ªsu…s
;

1915 
	`WL_SCAN
(("Enter \n"));

1916 
	`muãx_lock
(&
wl
->
u§_sync
);

1917 
ªsu…s
 = (
wl_sˇn_ªsu…s_t
 *Ë
wl
->
esˇn_öfo
.
esˇn_buf
;

1918 
ªsu…s
->
vîsi⁄
 = 0;

1919 
ªsu…s
->
cou¡
 = 0;

1920 
ªsu…s
->
buÊí
 = 
WL_SCAN_RESULTS_FIXED_SIZE
;

1922 
wl
->
esˇn_öfo
.
ndev
 =Çdev;

1923 
wl
->
esˇn_öfo
.
wùhy
 = wiphy;

1924 
wl
->
esˇn_öfo
.
esˇn_°©e
 = 
WL_ESCAN_STATE_SCANING
;

1925 
∑ssive_sˇn
 = 
wl
->
a˘ive_sˇn
 ? 0 : 1;

1926 
îr
 = 
	`wldev_io˘l
(
ndev
, 
WLC_SET_PASSIVE_SCAN
,

1927 &
∑ssive_sˇn
, ’assive_sˇn), 
åue
);

1928 i‡(
	`u∆ikñy
(
îr
)) {

1929 
	`WL_ERR
(("îr‹ (%d)\n", 
îr
));

1930 
exô
;

1933 
îr
 = 
	`wl_run_esˇn
(
wl
, 
ndev
, 
ªque°
, 
WL_SCAN_ACTION_START
);

1934 
exô
:

1935 
	`muãx_u∆ock
(&
wl
->
u§_sync
);

1936  
îr
;

1937 
	}
}

1939 
s32


1940 
	$__wl_cfg80211_sˇn
(
wùhy
 *wùhy, 
√t_devi˚
 *
ndev
,

1941 
cfg80211_sˇn_ªque°
 *
ªque°
,

1942 
cfg80211_ssid
 *
this_ssid
)

1944 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

1945 
cfg80211_ssid
 *
ssids
;

1946 
wl_sˇn_ªq
 *
§
 = 
	`wl_to_§
(
wl
);

1947 
ëhî_addr
 
¥im¨y_mac
;

1948 
s32
 
∑ssive_sˇn
;

1949 
boﬁ
 
isˇn_ªq
;

1950 
boﬁ
 
esˇn_ªq
 = 
Ál£
;

1951 
boﬁ
 
p2p_ssid
;

1952 #ifde‡
WL11U


1953 
bcm_év_t
 *
öãrw‹kög_õ
;

1954 
u32
 
õ_Àn
;

1956 
s32
 
îr
 = 0;

1957 
s32
 
bssidx
 = -1;

1958 
s32
 
i
;

1960 
Êags
;

1961 
s32
 
busy_cou¡
 = 0;

1966 i‡(
ndev
 =
wl
->
p2p_√t
) {

1967 
ndev
 = 
	`wl_to_¥mry_ndev
(
wl
);

1970 i‡(
	`WL_DRV_STATUS_SENDING_AF_FRM_EXT
(
wl
)) {

1971 
	`WL_ERR
(("Sending Action Frames. Try itágain.\n"));

1972  -
EAGAIN
;

1975 
	`WL_DBG
(("E¡î wùhy (%p)\n", 
wùhy
));

1976 i‡(
	`wl_gë_drv_°©us_Æl
(
wl
, 
SCANNING
)) {

1977 i‡(
wl
->
sˇn_ªque°
 =
NULL
) {

1978 
	`wl_˛r_drv_°©us_Æl
(
wl
, 
SCANNING
);

1979 
	`WL_DBG
(("<<<<<<<<<<<Force Clear Scanning Status>>>>>>>>>>>\n"));

1981 
	`WL_ERR
(("Scanningálready\n"));

1982  -
EAGAIN
;

1985 i‡(
	`wl_gë_drv_°©us
(
wl
, 
SCAN_ABORTING
, 
ndev
)) {

1986 
	`WL_ERR
(("Scanning beingáborted\n"));

1987  -
EAGAIN
;

1989 i‡(
ªque°
 &&Ñeque°->
n_ssids
 > 
WL_SCAN_PARAMS_SSID_MAX
) {

1990 
	`WL_ERR
(("requestÇull orÇ_ssids > WL_SCAN_PARAMS_SSID_MAX\n"));

1991  -
EOPNOTSUPP
;

1993 #ifde‡
WL_CFG80211_VSDB_PRIORITIZE_SCAN_REQUEST


1994 i‡(
	`wl_gë_drv_°©us_Æl
(
wl
, 
REMAINING_ON_CHANNEL
)) {

1995 
	`WL_DBG
(("Remain_on_channel bit is set, somehow it didn't get cleared\n"));

1996 
	`wl_nŸify_esˇn_com∂ëe
(
wl
, 
ndev
, 
åue
,Årue);

2002 
	`mod_timî
(&
wl
->
sˇn_timeout
, 
jiffõs
 + 
	`m£cs_to_jiffõs
(
WL_SCAN_TIMER_INTERVAL_MS
));

2003 
isˇn_ªq
 = 
Ál£
;

2004 i‡(
ªque°
) {

2005 
ssids
 = 
ªque°
->ssids;

2006 i‡(
wl
->
isˇn_⁄
 && (!
ssids
 || !ssids->
ssid_Àn
 || 
ªque°
->
n_ssids
 != 1)) {

2007 
isˇn_ªq
 = 
åue
;

2008 } i‡(
wl
->
esˇn_⁄
) {

2009 
esˇn_ªq
 = 
åue
;

2010 
p2p_ssid
 = 
Ál£
;

2011 
i
 = 0; i < 
ªque°
->
n_ssids
; i++) {

2012 i‡(
ssids
[
i
].
ssid_Àn
 &&

2013 
	`IS_P2P_SSID
(
ssids
[
i
].
ssid
, ssids[i].
ssid_Àn
)) {

2014 
p2p_ssid
 = 
åue
;

2018 i‡(
p2p_ssid
) {

2019 i‡(
wl
->
p2p_suµ‹ãd
) {

2021 i‡(
	`p2p_⁄
(
wl
Ë=
Ál£
) {

2023 
	`p2p_⁄
(
wl
Ë
åue
;

2024 
	`wl_cfgp2p_£t_fúm_p2p
(
wl
);

2025 
	`gë_¥im¨y_mac
(
wl
, &
¥im¨y_mac
);

2026 
	`wl_cfgp2p_gíî©e_bss_mac
(&
¥im¨y_mac
,

2027 &
wl
->
p2p
->
dev_addr
, &wl->p2p->
öt_addr
);

2029 
	`wl_˛r_p2p_°©us
(
wl
, 
GO_NEG_PHASE
);

2030 
	`WL_DBG
(("P2P: GO_NEG_PHASE status cleared \n"));

2031 
	`p2p_sˇn
(
wl
Ë
åue
;

2037 i‡(
wl
->
p2p_suµ‹ãd
) {

2038 
	`p2p_sˇn
(
wl
Ë
Ál£
;

2043 i‡(
	`p2p_sˇn
(
wl
Ë=
Ál£
) {

2044 i‡(
	`wl_gë_p2p_°©us
(
wl
, 
DISCOVERY_ON
)) {

2045 
îr
 = 
	`wl_cfgp2p_discovî_íabÀ_£¨ch
(
wl
,

2046 
Ál£
);

2047 i‡(
	`u∆ikñy
(
îr
)) {

2048 
sˇn_out
;

2054 i‡(!
wl
->
p2p_suµ‹ãd
 || !
	`p2p_sˇn
(wl)) {

2055 
bssidx
 = 
	`wl_cfgp2p_föd_idx
(
wl
, 
ndev
);

2057 #ifde‡
WL11U


2058 i‡((
öãrw‹kög_õ
 = 
	`wl_cfg80211_föd_öãrw‹kög_õ
(

2059 (
u8
 *)
ªque°
->
õ
,Ñeque°->
õ_Àn
)Ë!
NULL
) {

2060 
õ_Àn
 = 
öãrw‹kög_õ
->
Àn
;

2062 
îr
 = 
	`wl_cfg80211_add_iw_õ
(
wl
, 
ndev
, 
bssidx
,

2063 
VNDR_IE_CUSTOM_FLAG
, 
öãrw‹kög_õ
->
id
,

2064 
öãrw‹kög_õ
->
d©a
, i¡îw‹kög_õ->
Àn
);

2066 i‡(
	`u∆ikñy
(
îr
)) {

2067 
sˇn_out
;

2069 } i‡(
wl
->
iw_õ_Àn
 != 0) {

2071 
	`wl_cfg80211_add_iw_õ
(
wl
, 
ndev
, 
bssidx
,

2072 
VNDR_IE_CUSTOM_FLAG
,

2073 
DOT11_MNG_INTERWORKING_ID
,

2076 
	`wldev_iov¨_£töt_bsscfg
(
ndev
, "grat_arp", 0,

2077 
bssidx
);

2081 
îr
 = 
	`wl_cfgp2p_£t_m™agemít_õ
(
wl
, 
ndev
, 
bssidx
,

2082 
VNDR_IE_PRBREQ_FLAG
, (
u8
 *)
ªque°
->
õ
,

2083 
ªque°
->
õ_Àn
);

2085 i‡(
	`u∆ikñy
(
îr
)) {

2086 
sˇn_out
;

2094 
ssids
 = 
this_ssid
;

2096 
wl
->
sˇn_ªque°
 = 
ªque°
;

2097 
	`wl_£t_drv_°©us
(
wl
, 
SCANNING
, 
ndev
);

2098 i‡(
isˇn_ªq
) {

2099 
îr
 = 
	`wl_do_isˇn
(
wl
, 
ªque°
);

2100 i‡(
	`likñy
(!
îr
))

2101 
sˇn_suc˚ss
;

2103 
sˇn_out
;

2104 } i‡(
esˇn_ªq
) {

2105 i‡(
wl
->
p2p_suµ‹ãd
) {

2106 i‡(
	`p2p_⁄
(
wl
Ë&& 
	`p2p_sˇn
(wl)) {

2109 
wl
->
afx_hdl
->
my_li°í_ch™
 =

2110 
	`wl_föd_li°í_ch™√l
(
wl
, (
u8
 *)
ªque°
->
õ
,

2111 
ªque°
->
õ_Àn
);

2112 
îr
 = 
	`wl_cfgp2p_íabÀ_discovîy
(
wl
, 
ndev
,

2113 
ªque°
->
õ
,Ñeque°->
õ_Àn
);

2115 i‡(
	`u∆ikñy
(
îr
)) {

2116 
sˇn_out
;

2120 
îr
 = 
	`wl_do_esˇn
(
wl
, 
wùhy
, 
ndev
, 
ªque°
);

2121 i‡(
	`likñy
(!
îr
))

2122 
sˇn_suc˚ss
;

2124 
sˇn_out
;

2128 
	`mem£t
(&
§
->
ssid
, 0, (sr->ssid));

2129 
§
->
ssid
.
SSID_Àn
 =

2130 
	`mö_t
(
u8
, (
§
->
ssid
.
SSID
), 
ssids
->
ssid_Àn
);

2131 i‡(
§
->
ssid
.
SSID_Àn
) {

2132 
	`mem˝y
(
§
->
ssid
.
SSID
, 
ssids
->ssid, sr->ssid.
SSID_Àn
);

2133 
§
->
ssid
.
SSID_Àn
 = 
	`htod32
(sr->ssid.SSID_len);

2134 
	`WL_SCAN
(("Specific scan ssid=\"%s\"Üen=%d\n",

2135 
§
->
ssid
.
SSID
, sr->ssid.
SSID_Àn
));

2137 
	`WL_SCAN
(("Broadcast scan\n"));

2139 
	`WL_SCAN
(("§->ssid.SSID_À¿(%d)\n", 
§
->
ssid
.
SSID_Àn
));

2140 
∑ssive_sˇn
 = 
wl
->
a˘ive_sˇn
 ? 0 : 1;

2141 
îr
 = 
	`wldev_io˘l
(
ndev
, 
WLC_SET_PASSIVE_SCAN
,

2142 &
∑ssive_sˇn
, ’assive_sˇn), 
åue
);

2143 i‡(
	`u∆ikñy
(
îr
)) {

2144 
	`WL_SCAN
(("WLC_SET_PASSIVE_SCANÉº‹ (%d)\n", 
îr
));

2145 
sˇn_out
;

2147 
îr
 = 
	`wldev_io˘l
(
ndev
, 
WLC_SCAN
, &
§
->
ssid
,

2148 (
§
->
ssid
), 
Ál£
);

2149 i‡(
îr
) {

2150 i‡(
îr
 =-
EBUSY
) {

2151 
	`WL_ERR
(("system busy : scan for \"%s\" "

2152 "ˇn˚Àd\n", 
§
->
ssid
.
SSID
));

2154 
	`WL_ERR
(("WLC_SCANÉº‹ (%d)\n", 
îr
));

2156 
sˇn_out
;

2160 
sˇn_suc˚ss
:

2162 
busy_cou¡
 = 0;

2166 
sˇn_out
:

2168 i‡(
îr
 =
BCME_BUSY
 ||Éº =
BCME_NOTREADY
) {

2169 
	`WL_ERR
(("Sˇ¿î∏(%d), busy?%d", 
îr
, -
EBUSY
));

2170 
îr
 = -
EBUSY
;

2173 
	#SCAN_EBUSY_RETRY_LIMIT
 10

	)

2174 i‡(
îr
 =-
EBUSY
) {

2175 i‡(
busy_cou¡
++ > 
SCAN_EBUSY_RETRY_LIMIT
) {

2176 
ëhî_addr
 
bssid
;

2177 
s32
 
ªt
 = 0;

2178 
busy_cou¡
 = 0;

2179 
	`WL_ERR
(("Unusual continuous EBUSYÉrror, %d %d %d %d %d %d %d %d %d\n",

2180 
	`wl_gë_drv_°©us
(
wl
, 
SCANNING
, 
ndev
),

2181 
	`wl_gë_drv_°©us
(
wl
, 
SCAN_ABORTING
, 
ndev
),

2182 
	`wl_gë_drv_°©us
(
wl
, 
CONNECTING
, 
ndev
),

2183 
	`wl_gë_drv_°©us
(
wl
, 
CONNECTED
, 
ndev
),

2184 
	`wl_gë_drv_°©us
(
wl
, 
DISCONNECTING
, 
ndev
),

2185 
	`wl_gë_drv_°©us
(
wl
, 
AP_CREATING
, 
ndev
),

2186 
	`wl_gë_drv_°©us
(
wl
, 
AP_CREATED
, 
ndev
),

2187 
	`wl_gë_drv_°©us
(
wl
, 
SENDING_ACT_FRM
, 
ndev
),

2188 
	`wl_gë_drv_°©us
(
wl
, 
SENDING_ACT_FRM
, 
ndev
)));

2190 
	`bzîo
(&
bssid
, (bssid));

2191 i‡((
ªt
 = 
	`wldev_io˘l
(
ndev
, 
WLC_GET_BSSID
,

2192 &
bssid
, 
ETHER_ADDR_LEN
, 
Ál£
)) == 0)

2193 
	`WL_ERR
(("FW i†c⁄√˘ed wôh " 
MACDBG
 "/n",

2194 
	`MAC2STRDBG
(
bssid
.
o˘ë
)));

2196 
	`WL_ERR
(("GET BSSID faûed wôh %d\n", 
ªt
));

2198 
	`wl_cfg80211_disc⁄√˘
(
wùhy
, 
ndev
, 
DOT11_RC_DISASSOC_LEAVING
);

2201 
busy_cou¡
 = 0;

2203 
	`wl_˛r_drv_°©us
(
wl
, 
SCANNING
, 
ndev
);

2204 i‡(
	`timî_≥ndög
(&
wl
->
sˇn_timeout
))

2205 
	`dñ_timî_sync
(&
wl
->
sˇn_timeout
);

2206 
	`•ö_lock_úqßve
(&
wl
->
cfgdrv_lock
, 
Êags
);

2207 
wl
->
sˇn_ªque°
 = 
NULL
;

2208 
	`•ö_u∆ock_úqª°‹e
(&
wl
->
cfgdrv_lock
, 
Êags
);

2210  
îr
;

2211 
	}
}

2213 
s32


2214 
	$wl_cfg80211_sˇn
(
wùhy
 *wùhy, 
√t_devi˚
 *
ndev
,

2215 
cfg80211_sˇn_ªque°
 *
ªque°
)

2217 
s32
 
îr
 = 0;

2218 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

2220 
	`WL_DBG
(("Enter \n"));

2221 
	`CHECK_SYS_UP
(
wl
);

2223 
îr
 = 
	`__wl_cfg80211_sˇn
(
wùhy
, 
ndev
, 
ªque°
, 
NULL
);

2224 i‡(
	`u∆ikñy
(
îr
)) {

2225 i‡((
îr
 =
BCME_EPERM
Ë&& 
wl
->
sˇn_suµªs£d
)

2226 
	`WL_DBG
(("sˇ¿nŸÖîmôãdáàthi†timê(%d)\n", 
îr
));

2228 
	`WL_ERR
(("sˇ¿îr‹ (%d)\n", 
îr
));

2229  
îr
;

2232  
îr
;

2233 
	}
}

2235 
s32
 
	$wl_£t_πs
(
√t_devi˚
 *
dev
, 
u32
 
πs_thªshﬁd
)

2237 
s32
 
îr
 = 0;

2239 
îr
 = 
	`wldev_iov¨_£töt
(
dev
, "π°hªsh", 
πs_thªshﬁd
);

2240 i‡(
	`u∆ikñy
(
îr
)) {

2241 
	`WL_ERR
(("Eº‹ (%d)\n", 
îr
));

2242  
îr
;

2244  
îr
;

2245 
	}
}

2247 
s32
 
	$wl_£t_‰ag
(
√t_devi˚
 *
dev
, 
u32
 
‰ag_thªshﬁd
)

2249 
s32
 
îr
 = 0;

2251 
îr
 = 
	`wldev_iov¨_£töt_bsscfg
(
dev
, "‰agthªsh", 
‰ag_thªshﬁd
, 0);

2252 i‡(
	`u∆ikñy
(
îr
)) {

2253 
	`WL_ERR
(("Eº‹ (%d)\n", 
îr
));

2254  
îr
;

2256  
îr
;

2257 
	}
}

2259 
s32
 
	$wl_£t_ªåy
(
√t_devi˚
 *
dev
, 
u32
 
ªåy
, 
boﬁ
 
l
)

2261 
s32
 
îr
 = 0;

2262 
u32
 
cmd
 = (
l
 ? 
WLC_SET_LRL
 : 
WLC_SET_SRL
);

2264 
ªåy
 = 
	`htod32
(retry);

2265 
îr
 = 
	`wldev_io˘l
(
dev
, 
cmd
, &
ªåy
, ‘ëry), 
åue
);

2266 i‡(
	`u∆ikñy
(
îr
)) {

2267 
	`WL_ERR
(("cmd (%dË,Éº‹ (%d)\n", 
cmd
, 
îr
));

2268  
îr
;

2270  
îr
;

2271 
	}
}

2273 
s32
 
	$wl_cfg80211_£t_wùhy_∑øms
(
wùhy
 *wùhy, 
u32
 
ch™ged
)

2275 
wl_¥iv
 *
wl
 = (wl_¥iv *)
	`wùhy_¥iv
(
wùhy
);

2276 
√t_devi˚
 *
ndev
 = 
	`wl_to_¥mry_ndev
(
wl
);

2277 
s32
 
îr
 = 0;

2279 
	`CHECK_SYS_UP
(
wl
);

2280 
	`WL_DBG
(("Enter\n"));

2281 i‡(
ch™ged
 & 
WIPHY_PARAM_RTS_THRESHOLD
 &&

2282 (
wl
->
c⁄f
->
πs_thªshﬁd
 !
wùhy
->rts_threshold)) {

2283 
wl
->
c⁄f
->
πs_thªshﬁd
 = 
wùhy
->rts_threshold;

2284 
îr
 = 
	`wl_£t_πs
(
ndev
, 
wl
->
c⁄f
->
πs_thªshﬁd
);

2285 i‡(!
îr
)

2286  
îr
;

2288 i‡(
ch™ged
 & 
WIPHY_PARAM_FRAG_THRESHOLD
 &&

2289 (
wl
->
c⁄f
->
‰ag_thªshﬁd
 !
wùhy
->frag_threshold)) {

2290 
wl
->
c⁄f
->
‰ag_thªshﬁd
 = 
wùhy
->frag_threshold;

2291 
îr
 = 
	`wl_£t_‰ag
(
ndev
, 
wl
->
c⁄f
->
‰ag_thªshﬁd
);

2292 i‡(!
îr
)

2293  
îr
;

2295 i‡(
ch™ged
 & 
WIPHY_PARAM_RETRY_LONG
 &&

2296 (
wl
->
c⁄f
->
ªåy_l⁄g
 !
wùhy
->retry_long)) {

2297 
wl
->
c⁄f
->
ªåy_l⁄g
 = 
wùhy
->retry_long;

2298 
îr
 = 
	`wl_£t_ªåy
(
ndev
, 
wl
->
c⁄f
->
ªåy_l⁄g
, 
åue
);

2299 i‡(!
îr
)

2300  
îr
;

2302 i‡(
ch™ged
 & 
WIPHY_PARAM_RETRY_SHORT
 &&

2303 (
wl
->
c⁄f
->
ªåy_sh‹t
 !
wùhy
->retry_short)) {

2304 
wl
->
c⁄f
->
ªåy_sh‹t
 = 
wùhy
->retry_short;

2305 
îr
 = 
	`wl_£t_ªåy
(
ndev
, 
wl
->
c⁄f
->
ªåy_sh‹t
, 
Ál£
);

2306 i‡(!
îr
) {

2307  
îr
;

2311  
îr
;

2312 
	}
}

2314 
s32


2315 
	$wl_cfg80211_joö_ibss
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
,

2316 
cfg80211_ibss_∑øms
 *
∑øms
)

2318 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

2319 
cfg80211_bss
 *
bss
;

2320 
õì80211_ch™√l
 *
ch™
;

2321 
wl_joö_∑øms
 
joö_∑øms
;

2322 
cfg80211_ssid
 
ssid
;

2323 
s32
 
sˇn_ªåy
 = 0;

2324 
s32
 
îr
 = 0;

2325 
boﬁ
 
rﬁlback_lock
 = 
Ál£
;

2327 
	`WL_TRACE
(("In\n"));

2328 
	`CHECK_SYS_UP
(
wl
);

2329 i‡(
∑øms
->
bssid
) {

2330 
	`WL_ERR
(("Invalid bssid\n"));

2331  -
EOPNOTSUPP
;

2333 
bss
 = 
	`cfg80211_gë_ibss
(
wùhy
, 
NULL
, 
∑øms
->
ssid
,Ö¨ams->
ssid_Àn
);

2334 i‡(!
bss
) {

2335 
	`mem˝y
(
ssid
.ssid, 
∑øms
->ssid,Ö¨ams->
ssid_Àn
);

2336 
ssid
.
ssid_Àn
 = 
∑øms
->ssid_len;

2338 i‡(
u∆ikñy


2339 (
	`__wl_cfg80211_sˇn
(
wùhy
, 
dev
, 
NULL
, &
ssid
) ==

2340 -
EBUSY
)) {

2341 
	`wl_dñay
(150);

2345 } ++
sˇn_ªåy
 < 
WL_SCAN_RETRY_MAX
);

2347 i‡(
	`π∆_is_locked
()) {

2348 
	`π∆_u∆ock
();

2349 
rﬁlback_lock
 = 
åue
;

2353 
	`scheduÀ_timeout_öãºu±ibÀ
(
	`m£cs_to_jiffõs
(4000));

2354 i‡(
rﬁlback_lock
)

2355 
	`π∆_lock
();

2356 
bss
 = 
	`cfg80211_gë_ibss
(
wùhy
, 
NULL
,

2357 
∑øms
->
ssid
,Ö¨ams->
ssid_Àn
);

2359 i‡(
bss
) {

2360 
wl
->
ibss_°¨ãr
 = 
Ál£
;

2361 
	`WL_DBG
(("Found IBSS\n"));

2363 
wl
->
ibss_°¨ãr
 = 
åue
;

2365 
ch™
 = 
∑øms
->
ch™√l
;

2366 i‡(
ch™
)

2367 
wl
->
ch™√l
 = 
	`õì80211_‰equícy_to_ch™√l
(
ch™
->
˚¡î_‰eq
);

2372 
	`mem£t
(&
joö_∑øms
, 0, (join_params));

2373 
	`mem˝y
((*)
joö_∑øms
.
ssid
.
SSID
, (*)
∑øms
->ssid,

2374 
∑øms
->
ssid_Àn
);

2375 
joö_∑øms
.
ssid
.
SSID_Àn
 = 
	`htod32
(
∑øms
->
ssid_Àn
);

2376 i‡(
∑øms
->
bssid
)

2377 
	`mem˝y
(&
joö_∑øms
.
∑øms
.
bssid
,Öarams->bssid,

2378 
ETHER_ADDR_LEN
);

2380 
	`mem£t
(&
joö_∑øms
.
∑øms
.
bssid
, 0, 
ETHER_ADDR_LEN
);

2382 
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_SET_SSID
, &
joö_∑øms
,

2383 (
joö_∑øms
), 
åue
);

2384 i‡(
	`u∆ikñy
(
îr
)) {

2385 
	`WL_ERR
(("Eº‹ (%d)\n", 
îr
));

2386  
îr
;

2388  
îr
;

2389 
	}
}

2391 
s32
 
	$wl_cfg80211_Àave_ibss
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
)

2393 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

2394 
s32
 
îr
 = 0;

2396 
	`CHECK_SYS_UP
(
wl
);

2397 
	`wl_lök_down
(
wl
);

2399  
îr
;

2400 
	}
}

2402 
s32


2403 
	$wl_£t_w∑_vîsi⁄
(
√t_devi˚
 *
dev
, 
cfg80211_c⁄√˘_∑øms
 *
sme
)

2405 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

2406 
wl_£curôy
 *
£c
;

2407 
s32
 
vÆ
 = 0;

2408 
s32
 
îr
 = 0;

2409 
s32
 
bssidx
 = 
	`wl_cfgp2p_föd_idx
(
wl
, 
dev
);

2411 i‡(
sme
->
¸y±o
.
w∑_vîsi⁄s
 & 
NL80211_WPA_VERSION_1
)

2412 
vÆ
 = 
WPA_AUTH_PSK
 |

2413 
WPA_AUTH_UNSPECIFIED
;

2414 i‡(
sme
->
¸y±o
.
w∑_vîsi⁄s
 & 
NL80211_WPA_VERSION_2
)

2415 
vÆ
 = 
WPA2_AUTH_PSK
|

2416 
WPA2_AUTH_UNSPECIFIED
;

2418 
vÆ
 = 
WPA_AUTH_DISABLED
;

2420 i‡(
	`is_wps_c⁄n
(
sme
))

2421 
vÆ
 = 
WPA_AUTH_DISABLED
;

2423 
	`WL_DBG
(("£âög w∑_authÅÿ0x%0x\n", 
vÆ
));

2424 
îr
 = 
	`wldev_iov¨_£töt_bsscfg
(
dev
, "w∑_auth", 
vÆ
, 
bssidx
);

2425 i‡(
	`u∆ikñy
(
îr
)) {

2426 
	`WL_ERR
(("£àw∑_auth faûed (%d)\n", 
îr
));

2427  
îr
;

2429 
£c
 = 
	`wl_ªad_¥of
(
wl
, 
dev
, 
WL_PROF_SEC
);

2430 
£c
->
w∑_vîsi⁄s
 = 
sme
->
¸y±o
.wpa_versions;

2431  
îr
;

2432 
	}
}

2435 
s32


2436 
	$wl_£t_auth_ty≥
(
√t_devi˚
 *
dev
, 
cfg80211_c⁄√˘_∑øms
 *
sme
)

2438 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

2439 
wl_£curôy
 *
£c
;

2440 
s32
 
vÆ
 = 0;

2441 
s32
 
îr
 = 0;

2442 
s32
 
bssidx
 = 
	`wl_cfgp2p_föd_idx
(
wl
, 
dev
);

2443 
sme
->
auth_ty≥
) {

2444 
NL80211_AUTHTYPE_OPEN_SYSTEM
:

2445 
vÆ
 = 
WL_AUTH_OPEN_SYSTEM
;

2446 
	`WL_DBG
(("open system\n"));

2448 
NL80211_AUTHTYPE_SHARED_KEY
:

2449 
vÆ
 = 
WL_AUTH_SHARED_KEY
;

2450 
	`WL_DBG
(("shared key\n"));

2452 
NL80211_AUTHTYPE_AUTOMATIC
:

2453 
vÆ
 = 
WL_AUTH_OPEN_SHARED
;

2454 
	`WL_DBG
(("automatic\n"));

2457 
vÆ
 = 
WL_AUTH_OPEN_SHARED
;

2458 
	`WL_ERR
(("övÆidáuthÅy≥ (%d)\n", 
sme
->
auth_ty≥
));

2462 
îr
 = 
	`wldev_iov¨_£töt_bsscfg
(
dev
, "auth", 
vÆ
, 
bssidx
);

2463 i‡(
	`u∆ikñy
(
îr
)) {

2464 
	`WL_ERR
(("£àauth faûed (%d)\n", 
îr
));

2465  
îr
;

2467 
£c
 = 
	`wl_ªad_¥of
(
wl
, 
dev
, 
WL_PROF_SEC
);

2468 
£c
->
auth_ty≥
 = 
sme
->auth_type;

2469  
îr
;

2470 
	}
}

2472 
s32


2473 
	$wl_£t_£t_cùhî
(
√t_devi˚
 *
dev
, 
cfg80211_c⁄√˘_∑øms
 *
sme
)

2475 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

2476 
wl_£curôy
 *
£c
;

2477 
s32
 
pvÆ
 = 0;

2478 
s32
 
gvÆ
 = 0;

2479 
s32
 
îr
 = 0;

2480 
s32
 
bssidx
 = 
	`wl_cfgp2p_föd_idx
(
wl
, 
dev
);

2482 i‡(
sme
->
¸y±o
.
n_cùhîs_∑úwi£
) {

2483 
sme
->
¸y±o
.
cùhîs_∑úwi£
[0]) {

2484 
WLAN_CIPHER_SUITE_WEP40
:

2485 
WLAN_CIPHER_SUITE_WEP104
:

2486 
pvÆ
 = 
WEP_ENABLED
;

2488 
WLAN_CIPHER_SUITE_TKIP
:

2489 
pvÆ
 = 
TKIP_ENABLED
;

2491 
WLAN_CIPHER_SUITE_CCMP
:

2492 
pvÆ
 = 
AES_ENABLED
;

2494 
WLAN_CIPHER_SUITE_AES_CMAC
:

2495 
pvÆ
 = 
AES_ENABLED
;

2498 
	`WL_ERR
(("invalid cipherÖairwise (%d)\n",

2499 
sme
->
¸y±o
.
cùhîs_∑úwi£
[0]));

2500  -
EINVAL
;

2503 i‡(
sme
->
¸y±o
.
cùhî_group
) {

2504 
sme
->
¸y±o
.
cùhî_group
) {

2505 
WLAN_CIPHER_SUITE_WEP40
:

2506 
WLAN_CIPHER_SUITE_WEP104
:

2507 
gvÆ
 = 
WEP_ENABLED
;

2509 
WLAN_CIPHER_SUITE_TKIP
:

2510 
gvÆ
 = 
TKIP_ENABLED
;

2512 
WLAN_CIPHER_SUITE_CCMP
:

2513 
gvÆ
 = 
AES_ENABLED
;

2515 
WLAN_CIPHER_SUITE_AES_CMAC
:

2516 
gvÆ
 = 
AES_ENABLED
;

2519 
	`WL_ERR
(("invalid cipher group (%d)\n",

2520 
sme
->
¸y±o
.
cùhî_group
));

2521  -
EINVAL
;

2525 
	`WL_DBG
(("pvÆ (%dËgvÆ (%d)\n", 
pvÆ
, 
gvÆ
));

2527 i‡(
	`is_wps_c⁄n
(
sme
)) {

2528 i‡(
sme
->
¥ivacy
)

2529 
îr
 = 
	`wldev_iov¨_£töt_bsscfg
(
dev
, "w£c", 4, 
bssidx
);

2532 
îr
 = 
	`wldev_iov¨_£töt_bsscfg
(
dev
, "w£c", 0, 
bssidx
);

2534 
	`WL_DBG
((" NO, is_wps_conn, SetÖval | gvalÅo WSEC"));

2535 
îr
 = 
	`wldev_iov¨_£töt_bsscfg
(
dev
, "wsec",

2536 
pvÆ
 | 
gvÆ
, 
bssidx
);

2538 i‡(
	`u∆ikñy
(
îr
)) {

2539 
	`WL_ERR
(("îr‹ (%d)\n", 
îr
));

2540  
îr
;

2543 
£c
 = 
	`wl_ªad_¥of
(
wl
, 
dev
, 
WL_PROF_SEC
);

2544 
£c
->
cùhî_∑úwi£
 = 
sme
->
¸y±o
.
cùhîs_∑úwi£
[0];

2545 
£c
->
cùhî_group
 = 
sme
->
¸y±o
.cipher_group;

2547  
îr
;

2548 
	}
}

2550 
s32


2551 
	$wl_£t_key_mgmt
(
√t_devi˚
 *
dev
, 
cfg80211_c⁄√˘_∑øms
 *
sme
)

2553 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

2554 
wl_£curôy
 *
£c
;

2555 
s32
 
vÆ
 = 0;

2556 
s32
 
îr
 = 0;

2557 
s32
 
bssidx
 = 
	`wl_cfgp2p_föd_idx
(
wl
, 
dev
);

2559 i‡(
sme
->
¸y±o
.
n_akm_suôes
) {

2560 
îr
 = 
	`wldev_iov¨_gëöt
(
dev
, "w∑_auth", &
vÆ
);

2561 i‡(
	`u∆ikñy
(
îr
)) {

2562 
	`WL_ERR
(("couldÇŸ gë w∑_auth (%d)\n", 
îr
));

2563  
îr
;

2565 i‡(
vÆ
 & (
WPA_AUTH_PSK
 |

2566 
WPA_AUTH_UNSPECIFIED
)) {

2567 
sme
->
¸y±o
.
akm_suôes
[0]) {

2568 
WLAN_AKM_SUITE_8021X
:

2569 
vÆ
 = 
WPA_AUTH_UNSPECIFIED
;

2571 
WLAN_AKM_SUITE_PSK
:

2572 
vÆ
 = 
WPA_AUTH_PSK
;

2575 
	`WL_ERR
(("invalid cipher group (%d)\n",

2576 
sme
->
¸y±o
.
cùhî_group
));

2577  -
EINVAL
;

2579 } i‡(
vÆ
 & (
WPA2_AUTH_PSK
 |

2580 
WPA2_AUTH_UNSPECIFIED
)) {

2581 
sme
->
¸y±o
.
akm_suôes
[0]) {

2582 
WLAN_AKM_SUITE_8021X
:

2583 
vÆ
 = 
WPA2_AUTH_UNSPECIFIED
;

2585 
WLAN_AKM_SUITE_PSK
:

2586 
vÆ
 = 
WPA2_AUTH_PSK
;

2589 
	`WL_ERR
(("invalid cipher group (%d)\n",

2590 
sme
->
¸y±o
.
cùhî_group
));

2591  -
EINVAL
;

2594 
	`WL_DBG
(("£âög w∑_authÅÿ%d\n", 
vÆ
));

2596 
îr
 = 
	`wldev_iov¨_£töt_bsscfg
(
dev
, "w∑_auth", 
vÆ
, 
bssidx
);

2597 i‡(
	`u∆ikñy
(
îr
)) {

2598 
	`WL_ERR
(("couldÇŸ së w∑_auth (%d)\n", 
îr
));

2599  
îr
;

2602 
£c
 = 
	`wl_ªad_¥of
(
wl
, 
dev
, 
WL_PROF_SEC
);

2603 
£c
->
w∑_auth
 = 
sme
->
¸y±o
.
akm_suôes
[0];

2605  
îr
;

2606 
	}
}

2608 
s32


2609 
	$wl_£t_£t_sh¨edkey
(
√t_devi˚
 *
dev
,

2610 
cfg80211_c⁄√˘_∑øms
 *
sme
)

2612 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

2613 
wl_£curôy
 *
£c
;

2614 
wl_w£c_key
 
key
;

2615 
s32
 
vÆ
;

2616 
s32
 
îr
 = 0;

2617 
s32
 
bssidx
 = 
	`wl_cfgp2p_föd_idx
(
wl
, 
dev
);

2619 
	`WL_DBG
(("keyÜí (%d)\n", 
sme
->
key_Àn
));

2620 i‡(
sme
->
key_Àn
) {

2621 
£c
 = 
	`wl_ªad_¥of
(
wl
, 
dev
, 
WL_PROF_SEC
);

2622 
	`WL_DBG
(("wpa_versions 0x%x cipher_pairwise 0x%x\n",

2623 
£c
->
w∑_vîsi⁄s
, sec->
cùhî_∑úwi£
));

2624 i‡(!(
£c
->
w∑_vîsi⁄s
 & (
NL80211_WPA_VERSION_1
 |

2625 
NL80211_WPA_VERSION_2
)) &&

2626 (
£c
->
cùhî_∑úwi£
 & (
WLAN_CIPHER_SUITE_WEP40
 |

2627 
WLAN_CIPHER_SUITE_WEP104
)))

2629 
	`mem£t
(&
key
, 0, (key));

2630 
key
.
Àn
 = (
u32
Ë
sme
->
key_Àn
;

2631 
key
.
ödex
 = (
u32
Ë
sme
->
key_idx
;

2632 i‡(
	`u∆ikñy
(
key
.
Àn
 > (key.
d©a
))) {

2633 
	`WL_ERR
(("Toÿl⁄g keyÜígth (%u)\n", 
key
.
Àn
));

2634  -
EINVAL
;

2636 
	`mem˝y
(
key
.
d©a
, 
sme
->key, key.
Àn
);

2637 
key
.
Êags
 = 
WL_PRIMARY_KEY
;

2638 
£c
->
cùhî_∑úwi£
) {

2639 
WLAN_CIPHER_SUITE_WEP40
:

2640 
key
.
Ægo
 = 
CRYPTO_ALGO_WEP1
;

2642 
WLAN_CIPHER_SUITE_WEP104
:

2643 
key
.
Ægo
 = 
CRYPTO_ALGO_WEP128
;

2646 
	`WL_ERR
(("Invalidálgorithm (%d)\n",

2647 
sme
->
¸y±o
.
cùhîs_∑úwi£
[0]));

2648  -
EINVAL
;

2651 
	`WL_DBG
(("keyÜength (%d) key index (%d)álgo (%d)\n",

2652 
key
.
Àn
, key.
ödex
, key.
Ægo
));

2653 
	`WL_DBG
(("key \"%s\"\n", 
key
.
d©a
));

2654 
	`sw≠_key_‰om_BE
(&
key
);

2655 
îr
 = 
	`wldev_iov¨_£tbuf_bsscfg
(
dev
, "w£c_key", &
key
, (key),

2656 
wl
->
io˘l_buf
, 
WLC_IOCTL_MAXLEN
, 
bssidx
, &wl->
io˘l_buf_sync
);

2657 i‡(
	`u∆ikñy
(
îr
)) {

2658 
	`WL_ERR
(("WLC_SET_KEYÉº‹ (%d)\n", 
îr
));

2659  
îr
;

2661 i‡(
£c
->
auth_ty≥
 =
NL80211_AUTHTYPE_SHARED_KEY
) {

2662 
	`WL_DBG
(("setáuth_typeÅo shared key\n"));

2663 
vÆ
 = 
WL_AUTH_SHARED_KEY
;

2664 
îr
 = 
	`wldev_iov¨_£töt_bsscfg
(
dev
, "auth", 
vÆ
, 
bssidx
);

2665 i‡(
	`u∆ikñy
(
îr
)) {

2666 
	`WL_ERR
(("£àauth faûed (%d)\n", 
îr
));

2667  
îr
;

2672  
îr
;

2673 
	}
}

2675 #ifde‡
ESCAN_RESULT_PATCH


2676 
u8
 
	gc⁄√˘_ªq_bssid
[6];

2677 
u8
 
	gbrﬂd_bssid
[6];

2681 
s32


2682 
	$wl_cfg80211_c⁄√˘
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
,

2683 
cfg80211_c⁄√˘_∑øms
 *
sme
)

2685 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

2686 
õì80211_ch™√l
 *
ch™
 = 
sme
->
ch™√l
;

2687 
wl_extjoö_∑øms_t
 *
ext_joö_∑øms
;

2688 
wl_joö_∑øms
 
joö_∑øms
;

2689 
size_t
 
joö_∑øms_size
;

2690 
s32
 
îr
 = 0;

2691 
w∑_õ_fixed_t
 *
w∑_õ
;

2692 
bcm_év_t
 *
w∑2_õ
;

2693 
u8
* 
w∑õ
 = 0;

2694 
u32
 
w∑õ_Àn
 = 0;

2695 
u32
 
ch™_˙t
 = 0;

2696 
ëhî_addr
 
bssid
;

2697 
ªt
;

2699 
	`WL_DBG
(("In\n"));

2701 i‡(
	`u∆ikñy
(!
sme
->
ssid
)) {

2702 
	`WL_ERR
(("Invalid ssid\n"));

2703  -
EOPNOTSUPP
;

2706 
	`CHECK_SYS_UP
(
wl
);

2711 #i‡!
	`deföed
(
ESCAN_RESULT_PATCH
)

2712 i‡(
wl
->
sˇn_ªque°
) {

2713 
	`wl_nŸify_esˇn_com∂ëe
(
wl
, 
dev
, 
åue
,Årue);

2716 #ifde‡
ESCAN_RESULT_PATCH


2717 i‡(
sme
->
bssid
) {

2718 
	`mem˝y
(
c⁄√˘_ªq_bssid
, 
sme
->
bssid
, 
ETHER_ADDR_LEN
);

2721 
	`bzîo
(
c⁄√˘_ªq_bssid
, 
ETHER_ADDR_LEN
);

2723 
	`bzîo
(
brﬂd_bssid
, 
ETHER_ADDR_LEN
);

2726 
	`bzîo
(&
bssid
, (bssid));

2727 i‡(!
	`wl_gë_drv_°©us
(
wl
, 
CONNECTED
, 
dev
)&&

2728 (
ªt
 = 
	`wldev_io˘l
(
dev
, 
WLC_GET_BSSID
, &
bssid
, 
ETHER_ADDR_LEN
, 
Ál£
)) == 0) {

2729 i‡(!
	`ETHER_ISNULLADDR
(&
bssid
)) {

2730 
scb_vÆ_t
 
scbvÆ
;

2731 
	`wl_£t_drv_°©us
(
wl
, 
DISCONNECTING
, 
dev
);

2732 
scbvÆ
.
vÆ
 = 
DOT11_RC_DISASSOC_LEAVING
;

2733 
	`mem˝y
(&
scbvÆ
.
ó
, &
bssid
, 
ETHER_ADDR_LEN
);

2734 
scbvÆ
.
vÆ
 = 
	`htod32
(scbval.val);

2736 
	`WL_DBG
(("drv sètu†CONNECTED i†nŸ së, buàc⁄√˘ed i¿FW!" 
MACDBG
 "/n",

2737 
	`MAC2STRDBG
(
bssid
.
o˘ë
)));

2738 
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_DISASSOC
, &
scbvÆ
,

2739 (
scb_vÆ_t
), 
åue
);

2740 i‡(
	`u∆ikñy
(
îr
)) {

2741 
	`wl_˛r_drv_°©us
(
wl
, 
DISCONNECTING
, 
dev
);

2742 
	`WL_ERR
(("îr‹ (%d)\n", 
îr
));

2743  
îr
;

2745 
	`wl_gë_drv_°©us
(
wl
, 
DISCONNECTING
, 
dev
)) {

2746 
	`WL_ERR
(("Waiting for disconnectionÅerminated.\n"));

2747 
	`m¶ìp
(20);

2750 
	`WL_DBG
(("CurrentlyÇotássociated!\n"));

2754 
	`bzîo
(&
bssid
, (bssid));

2755 i‡(!
	`wl_gë_drv_°©us
(
wl
, 
DISCONNECTING
, 
dev
))

2756 
	`wl_upd©e_¥of
(
wl
, 
dev
, 
NULL
, (*)&
bssid
, 
WL_PROF_BSSID
);

2758 i‡(
	`p2p_is_⁄
(
wl
Ë&& (
dev
 !
	`wl_to_¥mry_ndev
(wl))) {

2760 
	`wl_cfgp2p_£t_m™agemít_õ
(
wl
, 
dev
, 
	`wl_cfgp2p_föd_idx
(wl, dev),

2761 
VNDR_IE_ASSOCREQ_FLAG
, 
sme
->
õ
, sme->
õ_Àn
);

2762 } i‡(
dev
 =
	`wl_to_¥mry_ndev
(
wl
)) {

2764 i‡((
w∑2_õ
 = 
	`bcm_∑r£_évs
((
u8
 *)
sme
->
õ
, sme->
õ_Àn
,

2765 
DOT11_MNG_RSN_ID
)Ë!
NULL
) {

2766 
	`WL_DBG
((" WPA2 IE is found\n"));

2769 i‡((
w∑_õ
 = 
	`wl_cfgp2p_föd_w∑õ
((
u8
 *)
sme
->
õ
,

2770 
sme
->
õ_Àn
)Ë!
NULL
) {

2771 
	`WL_DBG
((" WPA IE is found\n"));

2773 i‡(
w∑_õ
 !
NULL
 || 
w∑2_õ
 != NULL) {

2774 
w∑õ
 = (
w∑_õ
 !
NULL
Ë? (
u8
 *)w∑_õ : (u8 *)
w∑2_õ
;

2775 
w∑õ_Àn
 = (
w∑_õ
 !
NULL
Ë? w∑_õ->
Àngth
 : 
w∑2_õ
->
Àn
;

2776 
w∑õ_Àn
 +
WPA_RSN_IE_TAG_FIXED_LEN
;

2777 
	`wldev_iov¨_£tbuf
(
dev
, "w∑õ", 
w∑õ
, 
w∑õ_Àn
,

2778 
wl
->
io˘l_buf
, 
WLC_IOCTL_MAXLEN
, &wl->
io˘l_buf_sync
);

2780 
	`wldev_iov¨_£tbuf
(
dev
, "w∑õ", 
NULL
, 0,

2781 
wl
->
io˘l_buf
, 
WLC_IOCTL_MAXLEN
, &wl->
io˘l_buf_sync
);

2784 
îr
 = 
	`wl_cfgp2p_£t_m™agemít_õ
(
wl
, 
dev
, 
	`wl_cfgp2p_föd_idx
(wl, dev),

2785 
VNDR_IE_ASSOCREQ_FLAG
, (
u8
 *)
sme
->
õ
, sme->
õ_Àn
);

2786 i‡(
	`u∆ikñy
(
îr
)) {

2787  
îr
;

2790 i‡(
ch™
) {

2791 
wl
->
ch™√l
 = 
	`õì80211_‰equícy_to_ch™√l
(
ch™
->
˚¡î_‰eq
);

2792 
ch™_˙t
 = 1;

2793 
	`WL_DBG
(("ch™√»(%d), cíãr_ªq (%d), %d ch™√ls\n", 
wl
->
ch™√l
,

2794 
ch™
->
˚¡î_‰eq
, 
ch™_˙t
));

2796 
wl
->
ch™√l
 = 0;

2797 
	`WL_DBG
(("õ (%p), ie_À¿(%zd)\n", 
sme
->
õ
, sme->
õ_Àn
));

2798 
	`WL_DBG
(("3. set wapi version \n"));

2799 
îr
 = 
	`wl_£t_w∑_vîsi⁄
(
dev
, 
sme
);

2800 i‡(
	`u∆ikñy
(
îr
)) {

2801 
	`WL_ERR
(("Invalid wpa_version\n"));

2802  
îr
;

2804 
îr
 = 
	`wl_£t_auth_ty≥
(
dev
, 
sme
);

2805 i‡(
	`u∆ikñy
(
îr
)) {

2806 
	`WL_ERR
(("InvalidáuthÅype\n"));

2807  
îr
;

2810 
îr
 = 
	`wl_£t_£t_cùhî
(
dev
, 
sme
);

2811 i‡(
	`u∆ikñy
(
îr
)) {

2812 
	`WL_ERR
(("Invalid ciper\n"));

2813  
îr
;

2816 
îr
 = 
	`wl_£t_key_mgmt
(
dev
, 
sme
);

2817 i‡(
	`u∆ikñy
(
îr
)) {

2818 
	`WL_ERR
(("Invalid key mgmt\n"));

2819  
îr
;

2822 
îr
 = 
	`wl_£t_£t_sh¨edkey
(
dev
, 
sme
);

2823 i‡(
	`u∆ikñy
(
îr
)) {

2824 
	`WL_ERR
(("Invalid shared key\n"));

2825  
îr
;

2832 
joö_∑øms_size
 = 
WL_EXTJOIN_PARAMS_FIXED_SIZE
 +

2833 
ch™_˙t
 * (
ch™•ec_t
);

2834 
ext_joö_∑øms
 = (
wl_extjoö_∑øms_t
*)
	`kzÆloc
(
joö_∑øms_size
, 
GFP_KERNEL
);

2835 i‡(
ext_joö_∑øms
 =
NULL
) {

2836 
îr
 = -
ENOMEM
;

2837 
	`wl_˛r_drv_°©us
(
wl
, 
CONNECTING
, 
dev
);

2838 
exô
;

2840 
ext_joö_∑øms
->
ssid
.
SSID_Àn
 = 
	`mö
(”xt_joö_∑øms->ssid.
SSID
), 
sme
->
ssid_Àn
);

2841 
	`mem˝y
(&
ext_joö_∑øms
->
ssid
.
SSID
, 
sme
->ssid,Éxt_joö_∑øms->ssid.
SSID_Àn
);

2842 
	`wl_upd©e_¥of
(
wl
, 
dev
, 
NULL
, &
ext_joö_∑øms
->
ssid
, 
WL_PROF_SSID
);

2843 
ext_joö_∑øms
->
ssid
.
SSID_Àn
 = 
	`htod32
(ext_join_params->ssid.SSID_len);

2847 
ext_joö_∑øms
->
sˇn
.
a˘ive_time
 = 
WL_SCAN_JOIN_ACTIVE_DWELL_TIME_MS
;

2848 
ext_joö_∑øms
->
sˇn
.
∑ssive_time
 = 
WL_SCAN_JOIN_PASSIVE_DWELL_TIME_MS
;

2850 
ext_joö_∑øms
->
sˇn
.
sˇn_ty≥
 = -1;

2851 
ext_joö_∑øms
->
sˇn
.
≈robes


2852 (
ext_joö_∑øms
->
sˇn
.
a˘ive_time
/
WL_SCAN_JOIN_PROBE_INTERVAL_MS
);

2853 
ext_joö_∑øms
->
sˇn
.
home_time
 = -1;

2855 i‡(
sme
->
bssid
)

2856 
	`mem˝y
(&
ext_joö_∑øms
->
assoc
.
bssid
, 
sme
->bssid, 
ETH_ALEN
);

2858 
	`mem˝y
(&
ext_joö_∑øms
->
assoc
.
bssid
, &
ëhî_bˇ°
, 
ETH_ALEN
);

2859 
ext_joö_∑øms
->
assoc
.
ch™•ec_num
 = 
ch™_˙t
;

2860 i‡(
ch™_˙t
) {

2861 
u16
 
ch™√l
, 
b™d
, 
bw
, 
˘l_sb
;

2862 
ch™•ec_t
 
ch•ec
;

2863 
ch™√l
 = 
wl
->channel;

2864 
b™d
 = (
ch™√l
 <
CH_MAX_2G_CHANNEL
Ë? 
WL_CHANSPEC_BAND_2G


2865 : 
WL_CHANSPEC_BAND_5G
;

2866 
bw
 = 
WL_CHANSPEC_BW_20
;

2867 
˘l_sb
 = 
WL_CHANSPEC_CTL_SB_NONE
;

2868 
ch•ec
 = (
ch™√l
 | 
b™d
 | 
bw
 | 
˘l_sb
);

2869 
ext_joö_∑øms
->
assoc
.
ch™•ec_li°
[0] &
WL_CHANSPEC_CHAN_MASK
;

2870 
ext_joö_∑øms
->
assoc
.
ch™•ec_li°
[0] |
ch•ec
;

2871 
ext_joö_∑øms
->
assoc
.
ch™•ec_li°
[0] =

2872 
	`wl_ch•ec_ho°_to_drivî
(
ext_joö_∑øms
->
assoc
.
ch™•ec_li°
[0]);

2874 
ext_joö_∑øms
->
assoc
.
ch™•ec_num
 = 
	`htod32
(ext_join_params->assoc.chanspec_num);

2875 i‡(
ext_joö_∑øms
->
ssid
.
SSID_Àn
 < 
IEEE80211_MAX_SSID_LEN
) {

2876 
	`WL_INFO
(("ssid \"%s\",Üí (%d)\n", 
ext_joö_∑øms
->
ssid
.
SSID
,

2877 
ext_joö_∑øms
->
ssid
.
SSID_Àn
));

2879 
	`wl_£t_drv_°©us
(
wl
, 
CONNECTING
, 
dev
);

2880 
îr
 = 
	`wldev_iov¨_£tbuf_bsscfg
(
dev
, "joö", 
ext_joö_∑øms
, 
joö_∑øms_size
,

2881 
wl
->
io˘l_buf
, 
WLC_IOCTL_MAXLEN
, 
	`wl_cfgp2p_föd_idx
(wl, 
dev
), &wl->
io˘l_buf_sync
);

2882 
	`k‰ì
(
ext_joö_∑øms
);

2883 i‡(
îr
) {

2884 
	`wl_˛r_drv_°©us
(
wl
, 
CONNECTING
, 
dev
);

2885 i‡(
îr
 =
BCME_UNSUPPORTED
) {

2886 
	`WL_DBG
(("join iovar isÇot supported\n"));

2887 
£t_ssid
;

2889 
	`WL_ERR
(("îr‹ (%d)\n", 
îr
));

2891 
exô
;

2893 
£t_ssid
:

2894 
	`mem£t
(&
joö_∑øms
, 0, (join_params));

2895 
joö_∑øms_size
 = (
joö_∑øms
.
ssid
);

2897 
joö_∑øms
.
ssid
.
SSID_Àn
 = 
	`mö
((joö_∑øms.ssid.
SSID
), 
sme
->
ssid_Àn
);

2898 
	`mem˝y
(&
joö_∑øms
.
ssid
.
SSID
, 
sme
->ssid, joö_∑øms.ssid.
SSID_Àn
);

2899 
joö_∑øms
.
ssid
.
SSID_Àn
 = 
	`htod32
(join_params.ssid.SSID_len);

2900 
	`wl_upd©e_¥of
(
wl
, 
dev
, 
NULL
, &
joö_∑øms
.
ssid
, 
WL_PROF_SSID
);

2901 i‡(
sme
->
bssid
)

2902 
	`mem˝y
(&
joö_∑øms
.
∑øms
.
bssid
, 
sme
->bssid, 
ETH_ALEN
);

2904 
	`mem˝y
(&
joö_∑øms
.
∑øms
.
bssid
, &
ëhî_bˇ°
, 
ETH_ALEN
);

2906 
	`wl_ch_to_ch™•ec
(
wl
->
ch™√l
, &
joö_∑øms
, &
joö_∑øms_size
);

2907 
	`WL_DBG
(("joö_∑øm_sizê%d\n", 
joö_∑øms_size
));

2909 i‡(
joö_∑øms
.
ssid
.
SSID_Àn
 < 
IEEE80211_MAX_SSID_LEN
) {

2910 
	`WL_INFO
(("ssid \"%s\",Üí (%d)\n", 
joö_∑øms
.
ssid
.
SSID
,

2911 
joö_∑øms
.
ssid
.
SSID_Àn
));

2913 
	`wl_£t_drv_°©us
(
wl
, 
CONNECTING
, 
dev
);

2914 
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_SET_SSID
, &
joö_∑øms
, 
joö_∑øms_size
, 
åue
);

2915 i‡(
îr
) {

2916 
	`WL_ERR
(("îr‹ (%d)\n", 
îr
));

2917 
	`wl_˛r_drv_°©us
(
wl
, 
CONNECTING
, 
dev
);

2919 
exô
:

2920  
îr
;

2921 
	}
}

2923 
s32


2924 
	$wl_cfg80211_disc⁄√˘
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
,

2925 
u16
 
ªas⁄_code
)

2927 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

2928 
scb_vÆ_t
 
scbvÆ
;

2929 
boﬁ
 
a˘
 = 
Ál£
;

2930 
s32
 
îr
 = 0;

2931 
u8
 *
curbssid
;

2932 
	`WL_ERR
(("Rós⁄ %d\n", 
ªas⁄_code
));

2933 
	`CHECK_SYS_UP
(
wl
);

2934 
a˘
 = *(
boﬁ
 *Ë
	`wl_ªad_¥of
(
wl
, 
dev
, 
WL_PROF_ACT
);

2935 
curbssid
 = 
	`wl_ªad_¥of
(
wl
, 
dev
, 
WL_PROF_BSSID
);

2936 i‡(
a˘
) {

2940 #i‡!
	`deföed
(
ESCAN_RESULT_PATCH
)

2942 i‡(
wl
->
sˇn_ªque°
) {

2943 
	`wl_nŸify_esˇn_com∂ëe
(
wl
, 
dev
, 
åue
,Årue);

2946 
	`wl_£t_drv_°©us
(
wl
, 
DISCONNECTING
, 
dev
);

2947 
scbvÆ
.
vÆ
 = 
ªas⁄_code
;

2948 
	`mem˝y
(&
scbvÆ
.
ó
, 
curbssid
, 
ETHER_ADDR_LEN
);

2949 
scbvÆ
.
vÆ
 = 
	`htod32
(scbval.val);

2950 
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_DISASSOC
, &
scbvÆ
,

2951 (
scb_vÆ_t
), 
åue
);

2952 i‡(
	`u∆ikñy
(
îr
)) {

2953 
	`wl_˛r_drv_°©us
(
wl
, 
DISCONNECTING
, 
dev
);

2954 
	`WL_ERR
(("îr‹ (%d)\n", 
îr
));

2955  
îr
;

2959  
îr
;

2960 
	}
}

2962 
s32


2963 
	$wl_cfg80211_£t_tx_powî
(
wùhy
 *wiphy,

2964 
∆80211_tx_powî_£âög
 
ty≥
, 
s32
 
dbm
)

2967 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

2968 
√t_devi˚
 *
ndev
 = 
	`wl_to_¥mry_ndev
(
wl
);

2969 
u16
 
txpwrmw
;

2970 
s32
 
îr
 = 0;

2971 
s32
 
dißbÀ
 = 0;

2973 
	`CHECK_SYS_UP
(
wl
);

2974 
ty≥
) {

2975 
NL80211_TX_POWER_AUTOMATIC
:

2977 
NL80211_TX_POWER_LIMITED
:

2978 i‡(
dbm
 < 0) {

2979 
	`WL_ERR
(("TX_POWER_LIMITTED - dbm isÇegative\n"));

2980  -
EINVAL
;

2983 
NL80211_TX_POWER_FIXED
:

2984 i‡(
dbm
 < 0) {

2985 
	`WL_ERR
(("TX_POWER_FIXED - dbm isÇegative..\n"));

2986  -
EINVAL
;

2991 
dißbÀ
 = 
WL_RADIO_SW_DISABLE
 << 16;

2992 
dißbÀ
 = 
	`htod32
(disable);

2993 
îr
 = 
	`wldev_io˘l
(
ndev
, 
WLC_SET_RADIO
, &
dißbÀ
, (dißbÀ), 
åue
);

2994 i‡(
	`u∆ikñy
(
îr
)) {

2995 
	`WL_ERR
(("WLC_SET_RADIOÉº‹ (%d)\n", 
îr
));

2996  
îr
;

2999 i‡(
dbm
 > 0xffff)

3000 
txpwrmw
 = 0xffff;

3002 
txpwrmw
 = (
u16
Ë
dbm
;

3003 
îr
 = 
	`wldev_iov¨_£töt
(
ndev
, "qtxpower",

3004 (
s32
Ë(
	`bcm_mw_to_qdbm
(
txpwrmw
)));

3005 i‡(
	`u∆ikñy
(
îr
)) {

3006 
	`WL_ERR
(("qtxpowîÉº‹ (%d)\n", 
îr
));

3007  
îr
;

3009 
wl
->
c⁄f
->
tx_powî
 = 
dbm
;

3011  
îr
;

3012 
	}
}

3014 
s32
 
	$wl_cfg80211_gë_tx_powî
(
wùhy
 *wùhy, 
s32
 *
dbm
)

3016 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

3017 
√t_devi˚
 *
ndev
 = 
	`wl_to_¥mry_ndev
(
wl
);

3018 
s32
 
txpwrdbm
;

3019 
u8
 
ªsu…
;

3020 
s32
 
îr
 = 0;

3022 
	`CHECK_SYS_UP
(
wl
);

3023 
îr
 = 
	`wldev_iov¨_gëöt
(
ndev
, "qtxpowî", &
txpwrdbm
);

3024 i‡(
	`u∆ikñy
(
îr
)) {

3025 
	`WL_ERR
(("îr‹ (%d)\n", 
îr
));

3026  
îr
;

3028 
ªsu…
 = (
u8
Ë(
txpwrdbm
 & ~
WL_TXPWR_OVERRIDE
);

3029 *
dbm
 = (
s32
Ë
	`bcm_qdbm_to_mw
(
ªsu…
);

3031  
îr
;

3032 
	}
}

3034 
s32


3035 
	$wl_cfg80211_c⁄fig_deÁu…_key
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
,

3036 
u8
 
key_idx
, 
boﬁ
 
uniˇ°
, boﬁ 
mu…iˇ°
)

3038 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

3039 
u32
 
ödex
;

3040 
s32
 
w£c
;

3041 
s32
 
îr
 = 0;

3042 
s32
 
bssidx
 = 
	`wl_cfgp2p_föd_idx
(
wl
, 
dev
);

3044 
	`WL_DBG
(("key index (%d)\n", 
key_idx
));

3045 
	`CHECK_SYS_UP
(
wl
);

3046 
îr
 = 
	`wldev_iov¨_gëöt_bsscfg
(
dev
, "w£c", &
w£c
, 
bssidx
);

3047 i‡(
	`u∆ikñy
(
îr
)) {

3048 
	`WL_ERR
(("WLC_GET_WSECÉº‹ (%d)\n", 
îr
));

3049  
îr
;

3051 i‡(
w£c
 & 
WEP_ENABLED
) {

3053 
ödex
 = (
u32
Ë
key_idx
;

3054 
ödex
 = 
	`htod32
(index);

3055 
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_SET_KEY_PRIMARY
, &
ödex
,

3056 (
ödex
), 
åue
);

3057 i‡(
	`u∆ikñy
(
îr
)) {

3058 
	`WL_ERR
(("îr‹ (%d)\n", 
îr
));

3061  
îr
;

3062 
	}
}

3064 
s32


3065 
	$wl_add_keyext
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
,

3066 
u8
 
key_idx
, c⁄° u8 *
mac_addr
, 
key_∑øms
 *
∑øms
)

3068 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

3069 
wl_w£c_key
 
key
;

3070 
s32
 
îr
 = 0;

3071 
s32
 
bssidx
 = 
	`wl_cfgp2p_föd_idx
(
wl
, 
dev
);

3072 
s32
 
mode
 = 
	`wl_gë_mode_by_√tdev
(
wl
, 
dev
);

3073 
	`mem£t
(&
key
, 0, (key));

3074 
key
.
ödex
 = (
u32
Ë
key_idx
;

3076 i‡(!
	`ETHER_ISMULTI
(
mac_addr
))

3077 
	`mem˝y
((*)&
key
.
ó
, (*)
mac_addr
, 
ETHER_ADDR_LEN
);

3078 
key
.
Àn
 = (
u32
Ë
∑øms
->
key_Àn
;

3081 i‡(
key
.
Àn
 == 0) {

3083 
	`sw≠_key_‰om_BE
(&
key
);

3084 
îr
 = 
	`wldev_iov¨_£tbuf_bsscfg
(
dev
, "w£c_key", &
key
, (key),

3085 
wl
->
io˘l_buf
, 
WLC_IOCTL_MAXLEN
, 
bssidx
, &wl->
io˘l_buf_sync
);

3086 i‡(
	`u∆ikñy
(
îr
)) {

3087 
	`WL_ERR
(("key dñëêîr‹ (%d)\n", 
îr
));

3088  
îr
;

3091 i‡(
key
.
Àn
 > (key.
d©a
)) {

3092 
	`WL_ERR
(("InvÆid keyÜígth (%d)\n", 
key
.
Àn
));

3093  -
EINVAL
;

3095 
	`WL_DBG
(("SëtögÅhêkey index %d\n", 
key
.
ödex
));

3096 
	`mem˝y
(
key
.
d©a
, 
∑øms
->key, key.
Àn
);

3098 i‡((
mode
 =
WL_MODE_BSS
) &&

3099 (
∑øms
->
cùhî
 =
WLAN_CIPHER_SUITE_TKIP
)) {

3100 
u8
 
keybuf
[8];

3101 
	`mem˝y
(
keybuf
, &
key
.
d©a
[24], (keybuf));

3102 
	`mem˝y
(&
key
.
d©a
[24], &key.d©a[16], (
keybuf
));

3103 
	`mem˝y
(&
key
.
d©a
[16], 
keybuf
, (keybuf));

3107 i‡(
∑øms
->
£q
 &&Ö¨ams->
£q_Àn
 == 6) {

3109 
u8
 *
iv±r
;

3110 
iv±r
 = (
u8
 *Ë
∑øms
->
£q
;

3111 
key
.
rxiv
.
hi
 = (
iv±r
[5] << 24) | (ivptr[4] << 16) |

3112 (
iv±r
[3] << 8) | ivptr[2];

3113 
key
.
rxiv
.
lo
 = (
iv±r
[1] << 8) | ivptr[0];

3114 
key
.
iv_öôülized
 = 
åue
;

3117 
∑øms
->
cùhî
) {

3118 
WLAN_CIPHER_SUITE_WEP40
:

3119 
key
.
Ægo
 = 
CRYPTO_ALGO_WEP1
;

3120 
	`WL_DBG
(("WLAN_CIPHER_SUITE_WEP40\n"));

3122 
WLAN_CIPHER_SUITE_WEP104
:

3123 
key
.
Ægo
 = 
CRYPTO_ALGO_WEP128
;

3124 
	`WL_DBG
(("WLAN_CIPHER_SUITE_WEP104\n"));

3126 
WLAN_CIPHER_SUITE_TKIP
:

3127 
key
.
Ægo
 = 
CRYPTO_ALGO_TKIP
;

3128 
	`WL_DBG
(("WLAN_CIPHER_SUITE_TKIP\n"));

3130 
WLAN_CIPHER_SUITE_AES_CMAC
:

3131 
key
.
Ægo
 = 
CRYPTO_ALGO_AES_CCM
;

3132 
	`WL_DBG
(("WLAN_CIPHER_SUITE_AES_CMAC\n"));

3134 
WLAN_CIPHER_SUITE_CCMP
:

3135 
key
.
Ægo
 = 
CRYPTO_ALGO_AES_CCM
;

3136 
	`WL_DBG
(("WLAN_CIPHER_SUITE_CCMP\n"));

3139 
	`WL_ERR
(("InvÆid cùhî (0x%x)\n", 
∑øms
->
cùhî
));

3140  -
EINVAL
;

3142 
	`sw≠_key_‰om_BE
(&
key
);

3144 
	`dhd_waô_≥nd8021x
(
dev
);

3145 
îr
 = 
	`wldev_iov¨_£tbuf_bsscfg
(
dev
, "w£c_key", &
key
, (key),

3146 
wl
->
io˘l_buf
, 
WLC_IOCTL_MAXLEN
, 
bssidx
, &wl->
io˘l_buf_sync
);

3147 i‡(
	`u∆ikñy
(
îr
)) {

3148 
	`WL_ERR
(("WLC_SET_KEYÉº‹ (%d)\n", 
îr
));

3149  
îr
;

3152  
îr
;

3153 
	}
}

3155 
s32


3156 
	$wl_cfg80211_add_key
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
,

3157 
u8
 
key_idx
, 
boﬁ
 
∑úwi£
, c⁄° u8 *
mac_addr
,

3158 
key_∑øms
 *
∑øms
)

3160 
wl_w£c_key
 
key
;

3161 
s32
 
vÆ
 = 0;

3162 
s32
 
w£c
 = 0;

3163 
s32
 
îr
 = 0;

3164 
u8
 
keybuf
[8];

3165 
s32
 
bssidx
 = 0;

3166 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

3167 
s32
 
mode
 = 
	`wl_gë_mode_by_√tdev
(
wl
, 
dev
);

3168 
	`WL_DBG
(("key index (%d)\n", 
key_idx
));

3169 
	`CHECK_SYS_UP
(
wl
);

3171 
bssidx
 = 
	`wl_cfgp2p_föd_idx
(
wl
, 
dev
);

3173 i‡(
mac_addr
) {

3174 
	`wl_add_keyext
(
wùhy
, 
dev
, 
key_idx
, 
mac_addr
, 
∑øms
);

3175 
exô
;

3177 
	`mem£t
(&
key
, 0, (key));

3179 
key
.
Àn
 = (
u32
Ë
∑øms
->
key_Àn
;

3180 
key
.
ödex
 = (
u32
Ë
key_idx
;

3182 i‡(
	`u∆ikñy
(
key
.
Àn
 > (key.
d©a
))) {

3183 
	`WL_ERR
(("Toÿl⁄g keyÜígth (%u)\n", 
key
.
Àn
));

3184  -
EINVAL
;

3186 
	`mem˝y
(
key
.
d©a
, 
∑øms
->key, key.
Àn
);

3188 
key
.
Êags
 = 
WL_PRIMARY_KEY
;

3189 
∑øms
->
cùhî
) {

3190 
WLAN_CIPHER_SUITE_WEP40
:

3191 
key
.
Ægo
 = 
CRYPTO_ALGO_WEP1
;

3192 
vÆ
 = 
WEP_ENABLED
;

3193 
	`WL_DBG
(("WLAN_CIPHER_SUITE_WEP40\n"));

3195 
WLAN_CIPHER_SUITE_WEP104
:

3196 
key
.
Ægo
 = 
CRYPTO_ALGO_WEP128
;

3197 
vÆ
 = 
WEP_ENABLED
;

3198 
	`WL_DBG
(("WLAN_CIPHER_SUITE_WEP104\n"));

3200 
WLAN_CIPHER_SUITE_TKIP
:

3201 
key
.
Ægo
 = 
CRYPTO_ALGO_TKIP
;

3202 
vÆ
 = 
TKIP_ENABLED
;

3204 i‡(
mode
 =
WL_MODE_BSS
) {

3205 
	`bc›y
(&
key
.
d©a
[24], 
keybuf
, (keybuf));

3206 
	`bc›y
(&
key
.
d©a
[16], &key.d©a[24], (
keybuf
));

3207 
	`bc›y
(
keybuf
, &
key
.
d©a
[16], (keybuf));

3209 
	`WL_DBG
(("WLAN_CIPHER_SUITE_TKIP\n"));

3211 
WLAN_CIPHER_SUITE_AES_CMAC
:

3212 
key
.
Ægo
 = 
CRYPTO_ALGO_AES_CCM
;

3213 
vÆ
 = 
AES_ENABLED
;

3214 
	`WL_DBG
(("WLAN_CIPHER_SUITE_AES_CMAC\n"));

3216 
WLAN_CIPHER_SUITE_CCMP
:

3217 
key
.
Ægo
 = 
CRYPTO_ALGO_AES_CCM
;

3218 
vÆ
 = 
AES_ENABLED
;

3219 
	`WL_DBG
(("WLAN_CIPHER_SUITE_CCMP\n"));

3222 
	`WL_ERR
(("InvÆid cùhî (0x%x)\n", 
∑øms
->
cùhî
));

3223  -
EINVAL
;

3227 
	`sw≠_key_‰om_BE
(&
key
);

3228 
îr
 = 
	`wldev_iov¨_£tbuf_bsscfg
(
dev
, "w£c_key", &
key
, (key), 
wl
->
io˘l_buf
,

3229 
WLC_IOCTL_MAXLEN
, 
bssidx
, &
wl
->
io˘l_buf_sync
);

3230 i‡(
	`u∆ikñy
(
îr
)) {

3231 
	`WL_ERR
(("WLC_SET_KEYÉº‹ (%d)\n", 
îr
));

3232  
îr
;

3235 
exô
:

3236 
îr
 = 
	`wldev_iov¨_gëöt_bsscfg
(
dev
, "w£c", &
w£c
, 
bssidx
);

3237 i‡(
	`u∆ikñy
(
îr
)) {

3238 
	`WL_ERR
(("gë w£¯îr‹ (%d)\n", 
îr
));

3239  
îr
;

3242 
w£c
 |
vÆ
;

3243 
îr
 = 
	`wldev_iov¨_£töt_bsscfg
(
dev
, "w£c", 
w£c
, 
bssidx
);

3244 i‡(
	`u∆ikñy
(
îr
)) {

3245 
	`WL_ERR
(("£àw£¯îr‹ (%d)\n", 
îr
));

3246  
îr
;

3249  
îr
;

3250 
	}
}

3252 
s32


3253 
	$wl_cfg80211_dñ_key
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
,

3254 
u8
 
key_idx
, 
boﬁ
 
∑úwi£
, c⁄° u8 *
mac_addr
)

3256 
wl_w£c_key
 
key
;

3257 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

3258 
s32
 
îr
 = 0;

3259 
s32
 
bssidx
 = 
	`wl_cfgp2p_föd_idx
(
wl
, 
dev
);

3261 
	`WL_DBG
(("Enter\n"));

3262 #i‚de‡
IEEE80211W


3263 i‡((
key_idx
 >
DOT11_MAX_DEFAULT_KEYS
) && (key_idx < DOT11_MAX_DEFAULT_KEYS+2))

3264  -
EINVAL
;

3266 
	`CHECK_SYS_UP
(
wl
);

3267 
	`mem£t
(&
key
, 0, (key));

3269 
key
.
Êags
 = 
WL_PRIMARY_KEY
;

3270 
key
.
Ægo
 = 
CRYPTO_ALGO_OFF
;

3271 
key
.
ödex
 = (
u32
Ë
key_idx
;

3273 
	`WL_DBG
(("key index (%d)\n", 
key_idx
));

3275 
	`sw≠_key_‰om_BE
(&
key
);

3276 
îr
 = 
	`wldev_iov¨_£tbuf_bsscfg
(
dev
, "w£c_key", &
key
, (key), 
wl
->
io˘l_buf
,

3277 
WLC_IOCTL_MAXLEN
, 
bssidx
, &
wl
->
io˘l_buf_sync
);

3278 i‡(
	`u∆ikñy
(
îr
)) {

3279 i‡(
îr
 =-
EINVAL
) {

3280 i‡(
key
.
ödex
 >
DOT11_MAX_DEFAULT_KEYS
) {

3282 
	`WL_DBG
(("övÆid key index (%d)\n", 
key_idx
));

3285 
	`WL_ERR
(("WLC_SET_KEYÉº‹ (%d)\n", 
îr
));

3287  
îr
;

3289  
îr
;

3290 
	}
}

3292 
s32


3293 
wl_cfg80211_gë_key
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
,

3294 
u8
 
key_idx
, 
boﬁ
 
∑úwi£
, c⁄° u8 *
mac_addr
, *
cookõ
,

3295 (*
ˇŒback
Ë(*
cookõ
, 
key_∑øms
 * 
∑øms
))

3297 
key_∑øms
 
∑øms
;

3298 
wl_w£c_key
 
key
;

3299 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

3300 
wl_£curôy
 *
£c
;

3301 
s32
 
w£c
;

3302 
s32
 
îr
 = 0;

3303 
s32
 
bssidx
 = 
	`wl_cfgp2p_föd_idx
(
wl
, 
dev
);

3305 
	`WL_DBG
(("key index (%d)\n", 
key_idx
));

3306 
	`CHECK_SYS_UP
(
wl
);

3307 
	`mem£t
(&
key
, 0, (key));

3308 
key
.
ödex
 = 
key_idx
;

3309 
	`sw≠_key_to_BE
(&
key
);

3310 
	`mem£t
(&
∑øms
, 0, (params));

3311 
∑øms
.
key_Àn
 = (
u8
Ë
	`mö_t
(u8, 
DOT11_MAX_KEY_SIZE
, 
key
.
Àn
);

3312 
	`mem˝y
(
∑øms
.
key
, key.
d©a
,Ö¨ams.
key_Àn
);

3314 
	`wldev_iov¨_gëöt_bsscfg
(
dev
, "w£c", &
w£c
, 
bssidx
);

3315 i‡(
	`u∆ikñy
(
îr
)) {

3316 
	`WL_ERR
(("WLC_GET_WSECÉº‹ (%d)\n", 
îr
));

3317  
îr
;

3319 
w£c
 & ~
SES_OW_ENABLED
) {

3320 
WEP_ENABLED
:

3321 
£c
 = 
	`wl_ªad_¥of
(
wl
, 
dev
, 
WL_PROF_SEC
);

3322 i‡(
£c
->
cùhî_∑úwi£
 & 
WLAN_CIPHER_SUITE_WEP40
) {

3323 
∑øms
.
cùhî
 = 
WLAN_CIPHER_SUITE_WEP40
;

3324 
	`WL_DBG
(("WLAN_CIPHER_SUITE_WEP40\n"));

3325 } i‡(
£c
->
cùhî_∑úwi£
 & 
WLAN_CIPHER_SUITE_WEP104
) {

3326 
∑øms
.
cùhî
 = 
WLAN_CIPHER_SUITE_WEP104
;

3327 
	`WL_DBG
(("WLAN_CIPHER_SUITE_WEP104\n"));

3330 
TKIP_ENABLED
:

3331 
∑øms
.
cùhî
 = 
WLAN_CIPHER_SUITE_TKIP
;

3332 
	`WL_DBG
(("WLAN_CIPHER_SUITE_TKIP\n"));

3334 
AES_ENABLED
:

3335 
∑øms
.
cùhî
 = 
WLAN_CIPHER_SUITE_AES_CMAC
;

3336 
	`WL_DBG
(("WLAN_CIPHER_SUITE_AES_CMAC\n"));

3339 
	`WL_ERR
(("InvÆidálgÿ(0x%x)\n", 
w£c
));

3340  -
EINVAL
;

3343 
	`ˇŒback
(
cookõ
, &
∑øms
);

3344  
îr
;

3345 
	}
}

3347 
s32


3348 
	$wl_cfg80211_c⁄fig_deÁu…_mgmt_key
(
wùhy
 *wiphy,

3349 
√t_devi˚
 *
dev
, 
u8
 
key_idx
)

3351 
	`WL_INFO
(("Not supported\n"));

3352  -
EOPNOTSUPP
;

3353 
	}
}

3355 
s32


3356 
	$wl_cfg80211_gë_°©i⁄
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
,

3357 
u8
 *
mac
, 
°©i⁄_öfo
 *
söfo
)

3359 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

3360 
scb_vÆ_t
 
scb_vÆ
;

3361 
s32
 
rssi
;

3362 
s32
 
øã
;

3363 
s32
 
îr
 = 0;

3364 
°a_öfo_t
 *
°a
;

3365 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(3, 0, 0)

3366 
s8
 
óbuf
[
ETHER_ADDR_STR_LEN
];

3368 
dhd_pub_t
 *
dhd
 = (dhd_pub_à*)(
wl
->
pub
);

3369 
	`CHECK_SYS_UP
(
wl
);

3370 i‡(
	`wl_gë_mode_by_√tdev
(
wl
, 
dev
Ë=
WL_MODE_AP
) {

3371 
îr
 = 
	`wldev_iov¨_gëbuf
(
dev
, "°a_öfo", (
ëhî_addr
 *)
mac
,

3372 
ETHER_ADDR_LEN
, 
wl
->
io˘l_buf
, 
WLC_IOCTL_SMLEN
, &wl->
io˘l_buf_sync
);

3373 i‡(
îr
 < 0) {

3374 
	`WL_ERR
(("GET STA INFO faûed, %d\n", 
îr
));

3375  
îr
;

3377 
söfo
->
fûÀd
 = 
STATION_INFO_INACTIVE_TIME
;

3378 
°a
 = (
°a_öfo_t
 *)
wl
->
io˘l_buf
;

3379 
°a
->
Àn
 = 
	`dtoh16
(sta->len);

3380 
°a
->
ˇp
 = 
	`dtoh16
(sta->cap);

3381 
°a
->
Êags
 = 
	`dtoh32
(sta->flags);

3382 
°a
->
idÀ
 = 
	`dtoh32
(sta->idle);

3383 
°a
->
ö
 = 
	`dtoh32
(sta->in);

3384 
söfo
->
öa˘ive_time
 = 
°a
->
idÀ
 * 1000;

3385 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(3, 0, 0)

3386 i‡(
°a
->
Êags
 & 
WL_STA_ASSOC
) {

3387 
söfo
->
fûÀd
 |
STATION_INFO_CONNECTED_TIME
;

3388 
söfo
->
c⁄√˘ed_time
 = 
°a
->
ö
;

3390 
	`WL_INFO
(("STA %s : idleÅime : %d sec, connectedÅime :%d ms\n",

3391 
	`bcm_ëhî_¡ﬂ
((c⁄° 
ëhî_addr
 *)
mac
, 
óbuf
), 
söfo
->
öa˘ive_time
,

3392 
°a
->
idÀ
 * 1000));

3394 } i‡(
	`wl_gë_mode_by_√tdev
(
wl
, 
dev
Ë=
WL_MODE_BSS
) {

3395 
gë_pkt˙t_t
 
pkt˙t
;

3396 
u8
 *
curma˝
 = 
	`wl_ªad_¥of
(
wl
, 
dev
, 
WL_PROF_BSSID
);

3397 i‡(!
	`wl_gë_drv_°©us
(
wl
, 
CONNECTED
, 
dev
) ||

3398 (
	`dhd_is_assocüãd
(
dhd
, 
NULL
, &
îr
Ë=
FALSE
)) {

3399 
	`WL_ERR
(("NOTássoc\n"));

3400 i‡(
îr
 =-
ERESTARTSYS
)

3401  
îr
;

3402 
îr
 = -
ENODEV
;

3403  
îr
;

3405 i‡(
	`memcmp
(
mac
, 
curma˝
, 
ETHER_ADDR_LEN
)) {

3406 
	`WL_ERR
(("Wr⁄g Ma¯addªss: "
MACDBG
" != "MACDBG"\n",

3407 
	`MAC2STRDBG
(
mac
), MAC2STRDBG(
curma˝
)));

3411 
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_GET_RATE
, &
øã
, ‘©e), 
Ál£
);

3412 i‡(
îr
) {

3413 
	`WL_ERR
(("CouldÇŸ gëÑ©ê(%d)\n", 
îr
));

3415 
øã
 = 
	`dtoh32
(rate);

3416 
söfo
->
fûÀd
 |
STATION_INFO_TX_BITRATE
;

3417 
söfo
->
txøã
.
Àgacy
 = 
øã
 * 5;

3418 
	`WL_DBG
(("R©ê%d Mbps\n", (
øã
 / 2)));

3421 
	`mem£t
(&
scb_vÆ
, 0, (scb_val));

3422 
scb_vÆ
.
vÆ
 = 0;

3423 
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_GET_RSSI
, &
scb_vÆ
,

3424 (
scb_vÆ_t
), 
Ál£
);

3425 i‡(
îr
) {

3426 
	`WL_ERR
(("CouldÇŸ gëÑssò(%d)\n", 
îr
));

3427 
gë_°©i⁄_îr
;

3429 
rssi
 = 
	`dtoh32
(
scb_vÆ
.
vÆ
Ë+ 
RSSI_OFFSET
;

3430 
söfo
->
fûÀd
 |
STATION_INFO_SIGNAL
;

3431 
söfo
->
sig«l
 = 
rssi
;

3432 
	`WL_DBG
(("RSSI %d dBm\n", 
rssi
));

3433 
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_GET_PKTCNTS
, &
pkt˙t
,

3434 (
pkt˙t
), 
Ál£
);

3435 i‡(!
îr
) {

3436 
söfo
->
fûÀd
 |(
STATION_INFO_RX_PACKETS
 |

3437 
STATION_INFO_RX_DROP_MISC
 |

3438 
STATION_INFO_TX_PACKETS
 |

3439 
STATION_INFO_TX_FAILED
);

3440 
söfo
->
rx_∑ckës
 = 
pkt˙t
.
rx_good_pkt
;

3441 
söfo
->
rx_dr›≥d_misc
 = 
pkt˙t
.
rx_bad_pkt
;

3442 
söfo
->
tx_∑ckës
 = 
pkt˙t
.
tx_good_pkt
;

3443 
söfo
->
tx_Áûed
 = 
pkt˙t
.
tx_bad_pkt
;

3445 
gë_°©i⁄_îr
:

3446 i‡(
îr
 && (î∏!-
ERESTARTSYS
)) {

3448 
	`WL_ERR
(("force cfg80211_disconnected\n"));

3449 
	`wl_˛r_drv_°©us
(
wl
, 
CONNECTED
, 
dev
);

3450 
	`cfg80211_disc⁄√˘ed
(
dev
, 0, 
NULL
, 0, 
GFP_KERNEL
);

3451 
	`wl_lök_down
(
wl
);

3455  
îr
;

3456 
	}
}

3459 
	$wl_cfg80211_upd©e_powî_mode
(
√t_devi˚
 *
dev
)

3461 
pm
 = -1;

3462 
îr
;

3464 
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_GET_PM
, &
pm
, ’m), 
Ál£
);

3465 i‡(
îr
 || (
pm
 == -1)) {

3466 
	`WL_ERR
(("îr‹ (%d)\n", 
îr
));

3468 
pm
 = (pm =
PM_OFF
Ë? 
Ál£
 : 
åue
;

3469 
	`WL_DBG
(("%s: %d\n", 
__func__
, 
pm
));

3470 i‡(
dev
->
õì80211_±r
)

3471 
dev
->
õì80211_±r
->
ps
 = 
pm
;

3473  
îr
;

3474 
	}
}

3475 
s32


3476 
	$wl_cfg80211_£t_powî_mgmt
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
,

3477 
boﬁ
 
íabÀd
, 
s32
 
timeout
)

3479 
s32
 
pm
;

3480 
s32
 
îr
 = 0;

3481 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

3482 
√t_öfo
 *
_√t_öfo
 = 
	`wl_gë_√töfo_by_√tdev
(
wl
, 
dev
);

3483 #i‡!
	`deföed
(
SUPPORT_PM2_ONLY
)

3484 
dhd_pub_t
 *
dhd
 = (dhd_pub_à*)(
wl
->
pub
);

3486 
	`CHECK_SYS_UP
(
wl
);

3488 i‡(
wl
->
p2p_√t
 =
dev
 || 
_√t_öfo
 =
NULL
) {

3489  
îr
;

3491 
	`WL_DBG
(("%s: E¡îÖowî savêíabÀd %d\n", 
dev
->
«me
, 
íabÀd
));

3493 #i‡!
	`deföed
(
SUPPORT_PM2_ONLY
)

3495 
pm
 = 
íabÀd
 ? ((
dhd
->
ö_su•íd
Ë? 
PM_MAX
 : 
PM_FAST
Ë: 
PM_OFF
;

3497 
pm
 = 
íabÀd
 ? 
PM_FAST
 : 
PM_OFF
;

3500 i‡(
_√t_öfo
->
pm_block
 || 
wl
->
vsdb_mode
) {

3502 
	`WL_DBG
(("%s:DoÇotÉnableÅheÖower save forÖm_block %d or vsdb_mode %d\n",

3503 
dev
->
«me
, 
_√t_öfo
->
pm_block
, 
wl
->
vsdb_mode
));

3504 
pm
 = 
PM_OFF
;

3506 
pm
 = 
	`htod32
(pm);

3507 
	`WL_DBG
(("%s:powî savê%s\n", 
dev
->
«me
, (
pm
 ? "enabled" : "disabled")));

3508 
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_SET_PM
, &
pm
, ’m), 
åue
);

3509 i‡(
	`u∆ikñy
(
îr
)) {

3510 i‡(
îr
 =-
ENODEV
)

3511 
	`WL_DBG
(("net_device isÇotÑeady yet\n"));

3513 
	`WL_ERR
(("îr‹ (%d)\n", 
îr
));

3514  
îr
;

3516  
îr
;

3517 
	}
}

3519 
__u£d
 
u32
 
	$wl_föd_msb
(
u16
 
bô16
)

3521 
u32
 
ªt
 = 0;

3523 i‡(
bô16
 & 0xff00) {

3524 
ªt
 += 8;

3525 
bô16
 >>= 8;

3528 i‡(
bô16
 & 0xf0) {

3529 
ªt
 += 4;

3530 
bô16
 >>= 4;

3533 i‡(
bô16
 & 0xc) {

3534 
ªt
 += 2;

3535 
bô16
 >>= 2;

3538 i‡(
bô16
 & 2)

3539 
ªt
 +
bô16
 & 2;

3540 i‡(
bô16
)

3541 
ªt
 +
bô16
;

3543  
ªt
;

3544 
	}
}

3546 
s32
 
	$wl_cfg80211_ªsume
(
wùhy
 *wiphy)

3548 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

3549 
√t_devi˚
 *
ndev
 = 
	`wl_to_¥mry_ndev
(
wl
);

3550 
s32
 
îr
 = 0;

3552 i‡(
	`u∆ikñy
(!
	`wl_gë_drv_°©us
(
wl
, 
READY
, 
ndev
))) {

3553 
	`WL_INFO
(("device isÇotÑeady\n"));

3557 
	`wl_övoke_isˇn
(
wl
);

3559  
îr
;

3560 
	}
}

3562 #i‡
LINUX_VERSION_CODE
 > 
KERNEL_VERSION
(2, 6, 39)

3563 
s32
 
	$wl_cfg80211_su•íd
(
wùhy
 *wùhy, 
cfg80211_wowœn
 *
wow
)

3565 
s32
 
	$wl_cfg80211_su•íd
(
wùhy
 *wiphy)

3568 #ifde‡
DHD_CLEAR_ON_SUSPEND


3569 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

3570 
√t_öfo
 *
ôî
, *
√xt
;

3571 
√t_devi˚
 *
ndev
 = 
	`wl_to_¥mry_ndev
(
wl
);

3572 
Êags
;

3573 i‡(
	`u∆ikñy
(!
	`wl_gë_drv_°©us
(
wl
, 
READY
, 
ndev
))) {

3574 
	`WL_INFO
(("device isÇotÑeady : status (%d)\n",

3575 ()
wl
->
°©us
));

3578 
	`f‹_óch_ndev
(
wl
, 
ôî
, 
√xt
)

3579 
	`wl_£t_drv_°©us
(
wl
, 
SCAN_ABORTING
, 
ôî
->
ndev
);

3580 
	`wl_ãrm_isˇn
(
wl
);

3581 
	`•ö_lock_úqßve
(&
wl
->
cfgdrv_lock
, 
Êags
);

3582 i‡(
wl
->
sˇn_ªque°
) {

3583 
	`cfg80211_sˇn_d⁄e
(
wl
->
sˇn_ªque°
, 
åue
);

3584 
wl
->
sˇn_ªque°
 = 
NULL
;

3586 
	`f‹_óch_ndev
(
wl
, 
ôî
, 
√xt
) {

3587 
	`wl_˛r_drv_°©us
(
wl
, 
SCANNING
, 
ôî
->
ndev
);

3588 
	`wl_˛r_drv_°©us
(
wl
, 
SCAN_ABORTING
, 
ôî
->
ndev
);

3590 
	`•ö_u∆ock_úqª°‹e
(&
wl
->
cfgdrv_lock
, 
Êags
);

3591 
	`f‹_óch_ndev
(
wl
, 
ôî
, 
√xt
) {

3592 i‡(
	`wl_gë_drv_°©us
(
wl
, 
CONNECTING
, 
ôî
->
ndev
)) {

3593 
	`wl_bss_c⁄√˘_d⁄e
(
wl
, 
ôî
->
ndev
, 
NULL
, NULL, 
Ál£
);

3598 
	}
}

3600 
s32


3601 
	$wl_upd©e_pmkli°
(
√t_devi˚
 *
dev
, 
wl_pmk_li°
 *
pmk_li°
,

3602 
s32
 
îr
)

3604 
i
, 
j
;

3605 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

3606 
√t_devi˚
 *
¥im¨y_dev
 = 
	`wl_to_¥mry_ndev
(
wl
);

3608 i‡(!
pmk_li°
) {

3609 
	`¥ötk
("pmk_list is NULL\n");

3610  -
EINVAL
;

3615 i‡(
¥im¨y_dev
 !
dev
) {

3616 
	`WL_INFO
(("Not supporting FlushingÖmklist on virtual"

3618  
îr
;

3621 
	`WL_DBG
(("Nÿo‡ñemít†%d\n", 
pmk_li°
->
pmkids
.
≈mkid
));

3622 
i
 = 0; i < 
pmk_li°
->
pmkids
.
≈mkid
; i++) {

3623 
	`WL_DBG
(("PMKID[%d]: %pM =\n", 
i
,

3624 &
pmk_li°
->
pmkids
.
pmkid
[
i
].
BSSID
));

3625 
j
 = 0; j < 
WPA2_PMKID_LEN
; j++) {

3626 
	`WL_DBG
(("%02x\n", 
pmk_li°
->
pmkids
.
pmkid
[
i
].
PMKID
[
j
]));

3629 i‡(
	`likñy
(!
îr
)) {

3630 
îr
 = 
	`wldev_iov¨_£tbuf
(
dev
, "pmkid_öfo", (*)
pmk_li°
,

3631 (*
pmk_li°
), 
wl
->
io˘l_buf
, 
WLC_IOCTL_MAXLEN
, 
NULL
);

3634  
îr
;

3635 
	}
}

3637 
s32


3638 
	$wl_cfg80211_£t_pmkß
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
,

3639 
cfg80211_pmkß
 *
pmkß
)

3641 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

3642 
s32
 
îr
 = 0;

3643 
i
;

3645 
	`CHECK_SYS_UP
(
wl
);

3646 
i
 = 0; i < 
wl
->
pmk_li°
->
pmkids
.
≈mkid
; i++)

3647 i‡(!
	`memcmp
(
pmkß
->
bssid
, &
wl
->
pmk_li°
->
pmkids
.
pmkid
[
i
].
BSSID
,

3648 
ETHER_ADDR_LEN
))

3650 i‡(
i
 < 
WL_NUM_PMKIDS_MAX
) {

3651 
	`mem˝y
(&
wl
->
pmk_li°
->
pmkids
.
pmkid
[
i
].
BSSID
, 
pmkß
->
bssid
,

3652 
ETHER_ADDR_LEN
);

3653 
	`mem˝y
(&
wl
->
pmk_li°
->
pmkids
.
pmkid
[
i
].
PMKID
, 
pmkß
->pmkid,

3654 
WPA2_PMKID_LEN
);

3655 i‡(
i
 =
wl
->
pmk_li°
->
pmkids
.
≈mkid
)

3656 
wl
->
pmk_li°
->
pmkids
.
≈mkid
++;

3658 
îr
 = -
EINVAL
;

3660 
	`WL_DBG
(("set_pmksa,IW_PMKSA_ADD - PMKID: %pM =\n",

3661 &
wl
->
pmk_li°
->
pmkids
.
pmkid
[wl->pmk_li°->pmkids.
≈mkid
 - 1].
BSSID
));

3662 
i
 = 0; i < 
WPA2_PMKID_LEN
; i++) {

3663 
	`WL_DBG
(("%02x\n",

3664 
wl
->
pmk_li°
->
pmkids
.
pmkid
[wl->pmk_li°->pmkids.
≈mkid
 - 1].

3665 
PMKID
[
i
]));

3668 
îr
 = 
	`wl_upd©e_pmkli°
(
dev
, 
wl
->
pmk_li°
,Érr);

3670  
îr
;

3671 
	}
}

3673 
s32


3674 
	$wl_cfg80211_dñ_pmkß
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
,

3675 
cfg80211_pmkß
 *
pmkß
)

3677 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

3678 
_pmkid_li°
 
pmkid
;

3679 
s32
 
îr
 = 0;

3680 
i
;

3682 
	`CHECK_SYS_UP
(
wl
);

3683 
	`mem˝y
(&
pmkid
.pmkid[0].
BSSID
, 
pmkß
->
bssid
, 
ETHER_ADDR_LEN
);

3684 
	`mem˝y
(
pmkid
.pmkid[0].
PMKID
, 
pmkß
->pmkid, 
WPA2_PMKID_LEN
);

3686 
	`WL_DBG
(("del_pmksa,IW_PMKSA_REMOVE - PMKID: %pM =\n",

3687 &
pmkid
.pmkid[0].
BSSID
));

3688 
i
 = 0; i < 
WPA2_PMKID_LEN
; i++) {

3689 
	`WL_DBG
(("%02x\n", 
pmkid
.pmkid[0].
PMKID
[
i
]));

3692 
i
 = 0; i < 
wl
->
pmk_li°
->
pmkids
.
≈mkid
; i++)

3693 i‡(!
memcmp


3694 (
pmkß
->
bssid
, &
wl
->
pmk_li°
->
pmkids
.
pmkid
[
i
].
BSSID
,

3695 
ETHER_ADDR_LEN
))

3698 i‡((
wl
->
pmk_li°
->
pmkids
.
≈mkid
 > 0) &&

3699 (
i
 < 
wl
->
pmk_li°
->
pmkids
.
≈mkid
)) {

3700 
	`mem£t
(&
wl
->
pmk_li°
->
pmkids
.
pmkid
[
i
], 0, (
pmkid_t
));

3701 ; 
i
 < (
wl
->
pmk_li°
->
pmkids
.
≈mkid
 - 1); i++) {

3702 
	`mem˝y
(&
wl
->
pmk_li°
->
pmkids
.
pmkid
[
i
].
BSSID
,

3703 &
wl
->
pmk_li°
->
pmkids
.
pmkid
[
i
 + 1].
BSSID
,

3704 
ETHER_ADDR_LEN
);

3705 
	`mem˝y
(&
wl
->
pmk_li°
->
pmkids
.
pmkid
[
i
].
PMKID
,

3706 &
wl
->
pmk_li°
->
pmkids
.
pmkid
[
i
 + 1].
PMKID
,

3707 
WPA2_PMKID_LEN
);

3709 
wl
->
pmk_li°
->
pmkids
.
≈mkid
--;

3711 
îr
 = -
EINVAL
;

3714 
îr
 = 
	`wl_upd©e_pmkli°
(
dev
, 
wl
->
pmk_li°
,Érr);

3716  
îr
;

3718 
	}
}

3720 
s32


3721 
	$wl_cfg80211_Êush_pmkß
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
)

3723 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

3724 
s32
 
îr
 = 0;

3725 
	`CHECK_SYS_UP
(
wl
);

3726 
	`mem£t
(
wl
->
pmk_li°
, 0, (*wl->pmk_list));

3727 
îr
 = 
	`wl_upd©e_pmkli°
(
dev
, 
wl
->
pmk_li°
,Érr);

3728  
îr
;

3730 
	}
}

3732 
wl_sˇn_∑øms_t
 *

3733 
	$wl_cfg80211_sˇn_Æloc_∑øms
(
ch™√l
, 
≈robes
, *
out_∑øms_size
)

3735 
wl_sˇn_∑øms_t
 *
∑øms
;

3736 
∑øms_size
;

3737 
num_ch™s
;

3739 *
out_∑øms_size
 = 0;

3742 
∑øms_size
 = 
WL_SCAN_PARAMS_FIXED_SIZE
 + 1 * (
uöt16
);

3743 
∑øms
 = (
wl_sˇn_∑øms_t
*Ë
	`kzÆloc
(
∑øms_size
, 
GFP_KERNEL
);

3744 i‡(
∑øms
 =
NULL
) {

3745 
	`WL_ERR
(("%s: memáŒo¯Áûed (%d byãs)\n", 
__func__
, 
∑øms_size
));

3746  
∑øms
;

3748 
	`mem£t
(
∑øms
, 0, 
∑øms_size
);

3749 
∑øms
->
≈robes
 =Çprobes;

3751 
num_ch™s
 = (
ch™√l
 == 0) ? 0 : 1;

3753 
	`mem˝y
(&
∑øms
->
bssid
, &
ëhî_bˇ°
, 
ETHER_ADDR_LEN
);

3754 
∑øms
->
bss_ty≥
 = 
DOT11_BSSTYPE_ANY
;

3755 
∑øms
->
sˇn_ty≥
 = 
DOT11_SCANTYPE_ACTIVE
;

3756 
∑øms
->
≈robes
 = 
	`htod32
(1);

3757 
∑øms
->
a˘ive_time
 = 
	`htod32
(-1);

3758 
∑øms
->
∑ssive_time
 = 
	`htod32
(-1);

3759 
∑øms
->
home_time
 = 
	`htod32
(10);

3760 i‡(
ch™√l
 == -1)

3761 
∑øms
->
ch™√l_li°
[0] = 
	`htodch™•ec
(
ch™√l
);

3763 
∑øms
->
ch™√l_li°
[0] = 
	`wl_ch_ho°_to_drivî
(
ch™√l
);

3766 
∑øms
->
ch™√l_num
 = 
	`htod32
((0 << 
WL_SCAN_PARAMS_NSSID_SHIFT
) |

3767 (
num_ch™s
 & 
WL_SCAN_PARAMS_COUNT_MASK
));

3769 *
out_∑øms_size
 = 
∑øms_size
;

3770  
∑øms
;

3771 
	}
}

3773 
s32


3774 
	$wl_cfg80211_ªmaö_⁄_ch™√l
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
,

3775 
õì80211_ch™√l
 * 
ch™√l
,

3776 
∆80211_ch™√l_ty≥
 
ch™√l_ty≥
,

3777 
duøti⁄
, 
u64
 *
cookõ
)

3779 
s32
 
èrgë_ch™√l
;

3780 
u32
 
id
;

3781 
ëhî_addr
 
¥im¨y_mac
;

3782 
√t_devi˚
 *
ndev
 = 
NULL
;

3784 
s32
 
îr
 = 
BCME_OK
;

3785 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

3787 
	`WL_DBG
(("Enter, ifindex: %d, channel: %d, duration ms (%d) SCANNING ?? %s \n",

3788 
dev
->
ifödex
, 
	`õì80211_‰equícy_to_ch™√l
(
ch™√l
->
˚¡î_‰eq
),

3789 
duøti⁄
, (
	`wl_gë_drv_°©us
(
wl
, 
SCANNING
, 
ndev
)) ? "YES":"NO"));

3791 i‡(
wl
->
p2p_√t
 =
dev
) {

3792 
ndev
 = 
	`wl_to_¥mry_ndev
(
wl
);

3794 
ndev
 = 
dev
;

3797 i‡(!
wl
->
p2p
) {

3798 
	`WL_ERR
(("wl->p2p isÇot initialized\n"));

3799 
îr
 = 
BCME_ERROR
;

3800 
exô
;

3803 #i‚de‡
WL_CFG80211_VSDB_PRIORITIZE_SCAN_REQUEST


3804 i‡(
	`wl_gë_drv_°©us
(
wl
, 
SCANNING
, 
ndev
)) {

3805 
	`wl_nŸify_esˇn_com∂ëe
(
wl
, 
ndev
, 
åue
,Årue);

3809 
èrgë_ch™√l
 = 
	`õì80211_‰equícy_to_ch™√l
(
ch™√l
->
˚¡î_‰eq
);

3810 
	`mem˝y
(&
wl
->
ªmaö_⁄_ch™
, 
ch™√l
, (
õì80211_ch™√l
));

3811 
wl
->
ªmaö_⁄_ch™_ty≥
 = 
ch™√l_ty≥
;

3812 
id
 = ++
wl
->
œ°_roc_id
;

3813 i‡(
id
 == 0)

3814 
id
 = ++
wl
->
œ°_roc_id
;

3815 *
cookõ
 = 
id
;

3817 #ifde‡
WL_CFG80211_VSDB_PRIORITIZE_SCAN_REQUEST


3818 i‡(
	`wl_gë_drv_°©us
(
wl
, 
SCANNING
, 
ndev
)) {

3819 
timî_li°
 *
_timî
;

3820 
	`WL_DBG
(("scan isÑunning. goÅo fakeÜisten state\n"));

3822 
	`wl_£t_drv_°©us
(
wl
, 
FAKE_REMAINING_ON_CHANNEL
, 
ndev
);

3824 i‡(
	`timî_≥ndög
(&
wl
->
p2p
->
li°í_timî
)) {

3825 
	`WL_DBG
(("cancel currentÜistenÅimer \n"));

3826 
	`dñ_timî_sync
(&
wl
->
p2p
->
li°í_timî
);

3829 
_timî
 = &
wl
->
p2p
->
li°í_timî
;

3830 
	`wl_˛r_p2p_°©us
(
wl
, 
LISTEN_EXPIRED
);

3832 
	`INIT_TIMER
(
_timî
, 
wl_cfgp2p_li°í_expúed
, 
duøti⁄
, 0);

3834 
îr
 = 
BCME_OK
;

3835 
exô
;

3839 #ifde‡
WL_CFG80211_SYNC_GON


3840 i‡(
	`wl_gë_drv_°©us_Æl
(
wl
, 
WAITING_NEXT_ACT_FRM_LISTEN
)) {

3844 #ifde‡
WL_CFG80211_VSDB_PRIORITIZE_SCAN_REQUEST


3845 
	`wl_£t_drv_°©us
(
wl
, 
FAKE_REMAINING_ON_CHANNEL
, 
ndev
);

3847 
	`wl_£t_drv_°©us
(
wl
, 
REMAINING_ON_CHANNEL
, 
ndev
);

3849 
exô
;

3852 i‡(
wl
->
p2p
 && !wl->p2p->
⁄
) {

3856 
	`gë_¥im¨y_mac
(
wl
, &
¥im¨y_mac
);

3857 
	`wl_cfgp2p_gíî©e_bss_mac
(&
¥im¨y_mac
, &
wl
->
p2p
->
dev_addr
, &wl->p2p->
öt_addr
);

3858 
	`p2p_⁄
(
wl
Ë
åue
;

3861 i‡(
	`p2p_is_⁄
(
wl
)) {

3862 
îr
 = 
	`wl_cfgp2p_íabÀ_discovîy
(
wl
, 
ndev
, 
NULL
, 0);

3863 i‡(
	`u∆ikñy
(
îr
)) {

3864 
exô
;

3866 #i‚de‡
WL_CFG80211_VSDB_PRIORITIZE_SCAN_REQUEST


3867 
	`wl_£t_drv_°©us
(
wl
, 
REMAINING_ON_CHANNEL
, 
ndev
);

3869 
îr
 = 
	`wl_cfgp2p_discovî_li°í
(
wl
, 
èrgë_ch™√l
, 
duøti⁄
);

3871 #ifde‡
WL_CFG80211_VSDB_PRIORITIZE_SCAN_REQUEST


3872 i‡(
îr
 =
BCME_OK
) {

3873 
	`wl_£t_drv_°©us
(
wl
, 
REMAINING_ON_CHANNEL
, 
ndev
);

3878 
	`wl_£t_drv_°©us
(
wl
, 
FAKE_REMAINING_ON_CHANNEL
, 
ndev
);

3884 
îr
 = 
BCME_OK
;

3887 
exô
:

3888 i‡(
îr
 =
BCME_OK
) {

3889 
	`WL_INFO
(("Success\n"));

3890 
	`cfg80211_ªady_⁄_ch™√l
(
dev
, *
cookõ
, 
ch™√l
,

3891 
ch™√l_ty≥
, 
duøti⁄
, 
GFP_KERNEL
);

3893 
	`WL_ERR
(("FaûÅÿSë (îr=%d cookõ:%Œu)\n", 
îr
, *
cookõ
));

3895  
îr
;

3896 
	}
}

3898 
s32


3899 
	$wl_cfg80211_ˇn˚l_ªmaö_⁄_ch™√l
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
,

3900 
u64
 
cookõ
)

3902 
s32
 
îr
 = 0;

3903 
	`WL_DBG
(("É¡î )Çëdev_ifidx: %d \n", 
dev
->
ifödex
));

3904  
îr
;

3905 
	}
}

3908 
	$wl_cfg80211_afx_h™dÀr
(
w‹k_°ru˘
 *
w‹k
)

3910 
afx_hdl
 *
afx_ö°™˚
;

3911 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

3912 
s32
 
ªt
 = 
BCME_OK
;

3914 
afx_ö°™˚
 = 
	`c⁄èöî_of
(
w‹k
, 
afx_hdl
, work);

3915 i‡(
afx_ö°™˚
 !
NULL
 && 
wl
->
afx_hdl
->
is_a˘ive
) {

3916 i‡(
wl
->
afx_hdl
->
is_li°í
 && wl->afx_hdl->
my_li°í_ch™
) {

3917 
ªt
 = 
	`wl_cfgp2p_discovî_li°í
(
wl
, wl->
afx_hdl
->
my_li°í_ch™
,

3918 (100 * (1 + (
	`øndom32
() % 3))));

3920 
ªt
 = 
	`wl_cfgp2p_a˘_‰m_£¨ch
(
wl
, wl->
afx_hdl
->
dev
,

3921 
wl
->
afx_hdl
->
bssidx
, wl->afx_hdl->
≥î_li°í_ch™
);

3923 i‡(
	`u∆ikñy
(
ªt
 !
BCME_OK
)) {

3924 
	`WL_ERR
(("ERROR occuºed!Ñëu∫ed vÆuêi†(%d)\n", 
ªt
));

3925 i‡(
	`wl_gë_drv_°©us_Æl
(
wl
, 
FINDING_COMMON_CHANNEL
))

3926 
	`com∂ëe
(&
wl
->
a˘_‰m_sˇn
);

3929 
	}
}

3931 
s32


3932 
	$wl_cfg80211_af_£¨chög_ch™√l
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
dev
)

3934 
u32
 
max_ªåy
 = 
WL_CHANNEL_SYNC_RETRY
;

3936 i‡(
dev
 =
NULL
)

3939 
	`WL_DBG
(("Énter ) \n"));

3941 
	`wl_£t_drv_°©us
(
wl
, 
FINDING_COMMON_CHANNEL
, 
dev
);

3942 
wl
->
afx_hdl
->
is_a˘ive
 = 
TRUE
;

3947 (
wl
->
afx_hdl
->
ªåy
 < 
max_ªåy
) &&

3948 (
wl
->
afx_hdl
->
≥î_ch™
 =
WL_INVALID
)) {

3949 
wl
->
afx_hdl
->
is_li°í
 = 
FALSE
;

3950 
	`wl_£t_drv_°©us
(
wl
, 
SCANNING
, 
dev
);

3951 
	`WL_DBG
(("SchedulingÅheáction frame for sending..Ñetry %d\n",

3952 
wl
->
afx_hdl
->
ªåy
));

3954 
	`scheduÀ_w‹k
(&
wl
->
afx_hdl
->
w‹k
);

3955 
	`waô_f‹_com∂ëi⁄_timeout
(&
wl
->
a˘_‰m_sˇn
,

3956 
	`m£cs_to_jiffõs
(
MAX_WAIT_TIME
));

3958 i‡((
wl
->
afx_hdl
->
≥î_ch™
 !
WL_INVALID
) ||

3959 !(
	`wl_gë_drv_°©us
(
wl
, 
FINDING_COMMON_CHANNEL
, 
dev
)))

3962 i‡(
wl
->
afx_hdl
->
my_li°í_ch™
) {

3963 
	`WL_DBG
(("Scheduling ListenÖeer in myÜisten channel = %d\n",

3964 
wl
->
afx_hdl
->
my_li°í_ch™
));

3966 
wl
->
afx_hdl
->
is_li°í
 = 
TRUE
;

3967 
	`scheduÀ_w‹k
(&
wl
->
afx_hdl
->
w‹k
);

3968 
	`waô_f‹_com∂ëi⁄_timeout
(&
wl
->
a˘_‰m_sˇn
,

3969 
	`m£cs_to_jiffõs
(
MAX_WAIT_TIME
));

3971 i‡(!
	`wl_gë_drv_°©us
(
wl
, 
FINDING_COMMON_CHANNEL
, 
dev
))

3973 
wl
->
afx_hdl
->
ªåy
++;

3975 
	`WL_AF_TX_KEEP_PRI_CONNECTION_VSDB
(
wl
);

3978 
wl
->
afx_hdl
->
is_a˘ive
 = 
FALSE
;

3980 
	`wl_˛r_drv_°©us
(
wl
, 
SCANNING
, 
dev
);

3981 
	`wl_˛r_drv_°©us
(
wl
, 
FINDING_COMMON_CHANNEL
, 
dev
);

3983  (
wl
->
afx_hdl
->
≥î_ch™
);

3984 
	}
}

3986 
	sp2p_c⁄fig_af_∑øms
 {

3987 
s32
 
	mmax_tx_ªåy
;

3991 
s32
 
	mmpc_⁄off
;

3992 #ifde‡
WL_CFG80211_SYNC_GON


3993 
boﬁ
 
	mexåa_li°í
;

3995 
boﬁ
 
	m£¨ch_ch™√l
;

3998 
s32


3999 
	$wl_cfg80211_c⁄fig_p2p_pub_af_tx
(
wùhy
 *wiphy,

4000 
wl_a˘i⁄_‰ame_t
 *
a˘i⁄_‰ame
, 
wl_af_∑øms_t
 *
af_∑øms
,

4001 
p2p_c⁄fig_af_∑øms
 *
c⁄fig_af_∑øms
)

4003 
s32
 
îr
 = 
BCME_OK
;

4004 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

4005 
wifi_p2p_pub_a˘_‰ame_t
 *
a˘_‰m
 =

4006 (
wifi_p2p_pub_a˘_‰ame_t
 *Ë(
a˘i⁄_‰ame
->
d©a
);

4009 #ifde‡
WL_CFG80211_SYNC_GON


4010 
c⁄fig_af_∑øms
->
exåa_li°í
 = 
åue
;

4012 
c⁄fig_af_∑øms
->
£¨ch_ch™√l
 = 
Ál£
;

4013 
c⁄fig_af_∑øms
->
max_tx_ªåy
 = 
WL_AF_TX_MAX_RETRY
;

4014 
c⁄fig_af_∑øms
->
mpc_⁄off
 = -1;

4016 
a˘_‰m
->
subty≥
) {

4017 
P2P_PAF_GON_REQ
: {

4018 
	`WL_DBG
(("P2P: GO_NEG_PHASE status set \n"));

4019 
	`wl_£t_p2p_°©us
(
wl
, 
GO_NEG_PHASE
);

4021 
c⁄fig_af_∑øms
->
mpc_⁄off
 = 0;

4022 
c⁄fig_af_∑øms
->
£¨ch_ch™√l
 = 
åue
;

4023 
wl
->
√xt_af_subty≥
 = 
a˘_‰m
->
subty≥
 + 1;

4026 
af_∑øms
->
dwñl_time
 = 
WL_MED_DWELL_TIME
;

4030 
P2P_PAF_GON_RSP
: {

4031 
wl
->
√xt_af_subty≥
 = 
a˘_‰m
->
subty≥
 + 1;

4033 
af_∑øms
->
dwñl_time
 = 
WL_MED_DWELL_TIME
;

4036 
P2P_PAF_GON_CONF
: {

4038 
	`WL_DBG
(("P2P: GO_NEG_PHASE status cleared \n"));

4039 
	`wl_˛r_p2p_°©us
(
wl
, 
GO_NEG_PHASE
);

4042 
c⁄fig_af_∑øms
->
mpc_⁄off
 = 1;

4045 
af_∑øms
->
dwñl_time
 = 
WL_MIN_DWELL_TIME
;

4047 #ifde‡
WL_CFG80211_SYNC_GON


4048 
c⁄fig_af_∑øms
->
exåa_li°í
 = 
Ál£
;

4052 
P2P_PAF_INVITE_REQ
: {

4053 
c⁄fig_af_∑øms
->
£¨ch_ch™√l
 = 
åue
;

4054 
wl
->
√xt_af_subty≥
 = 
a˘_‰m
->
subty≥
 + 1;

4057 
af_∑øms
->
dwñl_time
 = 
WL_MED_DWELL_TIME
;

4060 
P2P_PAF_INVITE_RSP
:

4062 
af_∑øms
->
dwñl_time
 = 
WL_MIN_DWELL_TIME
;

4063 #ifde‡
WL_CFG80211_SYNC_GON


4064 
c⁄fig_af_∑øms
->
exåa_li°í
 = 
Ál£
;

4067 
P2P_PAF_DEVDIS_REQ
: {

4068 
c⁄fig_af_∑øms
->
£¨ch_ch™√l
 = 
åue
;

4070 
wl
->
√xt_af_subty≥
 = 
a˘_‰m
->
subty≥
 + 1;

4072 
af_∑øms
->
dwñl_time
 = 
WL_LONG_DWELL_TIME
;

4075 
P2P_PAF_DEVDIS_RSP
:

4077 
af_∑øms
->
dwñl_time
 = 
WL_MIN_DWELL_TIME
;

4078 #ifde‡
WL_CFG80211_SYNC_GON


4079 
c⁄fig_af_∑øms
->
exåa_li°í
 = 
Ál£
;

4082 
P2P_PAF_PROVDIS_REQ
: {

4083 i‡(
	`IS_PROV_DISC_WITHOUT_GROUP_ID
(&
a˘_‰m
->
ñts
[0],

4084 
a˘i⁄_‰ame
->
Àn
)) {

4085 
c⁄fig_af_∑øms
->
£¨ch_ch™√l
 = 
åue
;

4088 
c⁄fig_af_∑øms
->
mpc_⁄off
 = 0;

4089 
wl
->
√xt_af_subty≥
 = 
a˘_‰m
->
subty≥
 + 1;

4091 
af_∑øms
->
dwñl_time
 = 
WL_MED_DWELL_TIME
;

4094 
P2P_PAF_PROVDIS_RSP
: {

4095 
wl
->
√xt_af_subty≥
 = 
P2P_PAF_GON_REQ
;

4097 
af_∑øms
->
dwñl_time
 = 
WL_MED_DWELL_TIME
;

4098 #ifde‡
WL_CFG80211_SYNC_GON


4099 
c⁄fig_af_∑øms
->
exåa_li°í
 = 
Ál£
;

4104 
	`WL_DBG
(("UnknownÖ2pÖubáct frame subtype: %d\n",

4105 
a˘_‰m
->
subty≥
));

4106 
îr
 = 
BCME_BADARG
;

4108  
îr
;

4109 
	}
}

4112 
boﬁ


4113 
	$wl_cfg80211_£nd_a˘i⁄_‰ame
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
,

4114 
√t_devi˚
 *
ndev
, 
wl_af_∑øms_t
 *
af_∑øms
,

4115 
wl_a˘i⁄_‰ame_t
 *
a˘i⁄_‰ame
, 
u16
 
a˘i⁄_‰ame_Àn
, 
s32
 
bssidx
)

4117 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

4118 
boﬁ
 
ack
 = 
Ál£
;

4119 
u8
 
ˇãg‹y
, 
a˘i⁄
;

4120 
s32
 
tx_ªåy
;

4121 
p2p_c⁄fig_af_∑øms
 
c⁄fig_af_∑øms
;

4122 #ifde‡
VSDB


4123 
ul⁄g
 
off_ch™_°¨ãd_jiffõs
 = 0;

4125 
dhd_pub_t
 *
dhd
 = (dhd_pub_à*)(
wl
->
pub
);

4127 
	`wl_cfgp2p_¥öt_a˘‰ame
(
åue
, 
a˘i⁄_‰ame
->
d©a
,á˘i⁄_‰ame->
Àn
);

4129 
ˇãg‹y
 = 
a˘i⁄_‰ame
->
d©a
[
DOT11_ACTION_CAT_OFF
];

4130 
a˘i⁄
 = 
a˘i⁄_‰ame
->
d©a
[
DOT11_ACTION_ACT_OFF
];

4133 
tx_ªåy
 = 0;

4134 
wl
->
√xt_af_subty≥
 = 
P2P_PAF_SUBTYPE_INVALID
;

4135 
c⁄fig_af_∑øms
.
max_tx_ªåy
 = 
WL_AF_TX_MAX_RETRY
;

4136 
c⁄fig_af_∑øms
.
mpc_⁄off
 = -1;

4137 
c⁄fig_af_∑øms
.
£¨ch_ch™√l
 = 
Ál£
;

4138 #ifde‡
WL_CFG80211_SYNC_GON


4139 
c⁄fig_af_∑øms
.
exåa_li°í
 = 
Ál£
;

4144 i‡(
ˇãg‹y
 =
DOT11_ACTION_CAT_PUBLIC
) {

4145 i‡((
a˘i⁄
 =
P2P_PUB_AF_ACTION
) &&

4146 (
a˘i⁄_‰ame_Àn
 >(
wifi_p2p_pub_a˘_‰ame_t
))) {

4148 i‡(
BCME_OK
 !
	`wl_cfg80211_c⁄fig_p2p_pub_af_tx
(
wùhy
,

4149 
a˘i⁄_‰ame
, 
af_∑øms
, &
c⁄fig_af_∑øms
)) {

4150 
	`WL_DBG
(("Unknown subtype.\n"));

4153 } i‡(
a˘i⁄_‰ame_Àn
 >(
wifi_p2psd_gas_pub_a˘_‰ame_t
)) {

4155 i‡(
a˘i⁄
 =
P2PSD_ACTION_ID_GAS_IREQ
 ||

4156 
a˘i⁄
 =
P2PSD_ACTION_ID_GAS_CREQ
) {

4159 
c⁄fig_af_∑øms
.
£¨ch_ch™√l
 = 
åue
;

4162 
wl
->
√xt_af_subty≥
 = 
a˘i⁄
 + 1;

4164 
af_∑øms
->
dwñl_time
 = 
WL_MED_DWELL_TIME
;

4165 } i‡(
a˘i⁄
 =
P2PSD_ACTION_ID_GAS_IRESP
 ||

4166 
a˘i⁄
 =
P2PSD_ACTION_ID_GAS_CRESP
) {

4168 
af_∑øms
->
dwñl_time
 = 
WL_MIN_DWELL_TIME
;

4170 
	`WL_DBG
(("Unknow¿a˘i⁄Åy≥: %d\n", 
a˘i⁄
));

4173 
	`WL_DBG
(("Unknown Frame: category 0x%x,áction 0x%x,Üength %d\n",

4174 
ˇãg‹y
, 
a˘i⁄
, 
a˘i⁄_‰ame_Àn
));

4176 } i‡(
ˇãg‹y
 =
P2P_AF_CATEGORY
) {

4179 
	`WL_DBG
(("Unknown Frame: category 0x%x,áction 0x%x\n",

4180 
ˇãg‹y
, 
a˘i⁄
));

4181 i‡(
dhd
->
›_mode
 & 
DHD_FLAG_HOSTAP_MODE
) {

4182 
	`wl_˛r_drv_°©us
(
wl
, 
SENDING_ACT_FRM
, 
dev
);

4183  
Ál£
;

4188 i‡(
c⁄fig_af_∑øms
.
mpc_⁄off
 == 0) {

4189 
	`wldev_iov¨_£töt
(
dev
, "mpc", 0);

4193 i‡(
c⁄fig_af_∑øms
.
£¨ch_ch™√l
 && 
	`IS_P2P_SOCIAL
(
af_∑øms
->
ch™√l
) &&

4194 
	`wl_to_p2p_bss_ßved_õ
(
wl
, 
P2PAPI_BSSCFG_DEVICE
).
p2p_¥obe_ªq_õ_Àn
) {

4195 
c⁄fig_af_∑øms
.
£¨ch_ch™√l
 = 
åue
;

4197 
c⁄fig_af_∑øms
.
£¨ch_ch™√l
 = 
Ál£
;

4200 #ifde‡
WL11U


4201 i‡(
ndev
 =
	`wl_to_¥mry_ndev
(
wl
))

4202 
c⁄fig_af_∑øms
.
£¨ch_ch™√l
 = 
Ál£
;

4205 #ifde‡
VSDB


4207 i‡(
	`wl_gë_drv_°©us
(
wl
, 
CONNECTING
, 
	`wl_to_¥mry_ndev
(wl))) {

4208 
	`m¶ìp
(50);

4213 i‡(
	`wl_gë_drv_°©us_Æl
(
wl
, 
SCANNING
)) {

4214 
	`wl_nŸify_esˇn_com∂ëe
(
wl
, 
ndev
, 
åue
,Årue);

4218 i‡(
wl
->
√xt_af_subty≥
 !
P2P_PAF_SUBTYPE_INVALID
) {

4220 
	`wl_£t_drv_°©us
(
wl
, 
WAITING_NEXT_ACT_FRM
, 
dev
);

4222 
	`wl_£t_drv_°©us
(
wl
, 
SENDING_ACT_FRM
, 
dev
);

4223 
	`mem˝y
(
wl
->
afx_hdl
->
tx_d°_addr
.
o˘ë
,

4224 
af_∑øms
->
a˘i⁄_‰ame
.
da
.
o˘ë
,

4225 (
wl
->
afx_hdl
->
tx_d°_addr
.
o˘ë
));

4228 
wl
->
afx_hdl
->
≥ndög_tx_a˘_‰m
 = 
af_∑øms
;

4231 i‡(
c⁄fig_af_∑øms
.
£¨ch_ch™√l
) {

4233 
wl
->
afx_hdl
->
bssidx
 = 
	`wl_cfgp2p_föd_idx
(wl, 
dev
);

4234 
wl
->
afx_hdl
->
dev
 = dev;

4235 
wl
->
afx_hdl
->
ªåy
 = 0;

4236 
wl
->
afx_hdl
->
≥î_ch™
 = 
WL_INVALID
;

4238 i‡(
	`wl_cfg80211_af_£¨chög_ch™√l
(
wl
, 
dev
Ë=
WL_INVALID
) {

4239 
	`WL_ERR
(("couldn't findÖeer's channel.\n"));

4240 
exô
;

4246 
	`wl_˛r_drv_°©us
(
wl
, 
SCANNING
, wl->
afx_hdl
->
dev
);

4248 #i‚de‡
WL_CFG80211_VSDB_PRIORITIZE_SCAN_REQUEST


4249 
	`wl_nŸify_esˇn_com∂ëe
(
wl
, 
dev
, 
åue
,Årue);

4251 
	`wl_cfgp2p_discovî_íabÀ_£¨ch
(
wl
, 
Ál£
);

4254 
af_∑øms
->
ch™√l
 = 
wl
->
afx_hdl
->
≥î_ch™
;

4257 #ifde‡
VSDB


4258 
off_ch™_°¨ãd_jiffõs
 = 
jiffõs
;

4262 
ack
 = 
	`wl_cfgp2p_tx_a˘i⁄_‰ame
(
wl
, 
dev
, 
af_∑øms
, 
bssidx
Ë? 
Ál£
 : 
åue
;

4265 (
ack
 =
Ál£
Ë&& (
tx_ªåy
++ < 
c⁄fig_af_∑øms
.
max_tx_ªåy
)) {

4266 #ifde‡
VSDB


4267 i‡(
af_∑øms
->
ch™√l
) {

4268 i‡(
	`jiffõs_to_m£cs
(
jiffõs
 - 
off_ch™_°¨ãd_jiffõs
) >

4269 
OFF_CHAN_TIME_THRESHOLD_MS
) {

4270 
	`WL_AF_TX_KEEP_PRI_CONNECTION_VSDB
(
wl
);

4271 
off_ch™_°¨ãd_jiffõs
 = 
jiffõs
;

4275 
ack
 = 
	`wl_cfgp2p_tx_a˘i⁄_‰ame
(
wl
, 
dev
, 
af_∑øms
, 
bssidx
) ?

4276 
Ál£
 : 
åue
;

4278 i‡(
ack
 =
Ál£
) {

4279 
	`WL_ERR
(("FaûedÅÿ£nd A˘i⁄ Føme‘ëry %d)\n", 
tx_ªåy
));

4281 
exô
:

4283 
	`wl_˛r_drv_°©us
(
wl
, 
SENDING_ACT_FRM
, 
dev
);

4285 #ifde‡
WL_CFG80211_SYNC_GON


4290 i‡(
ack
 && 
c⁄fig_af_∑øms
.
exåa_li°í
 &&

4291 
	`wl_gë_drv_°©us_Æl
(
wl
, 
WAITING_NEXT_ACT_FRM
) &&

4292 
wl
->
af_£¡_ch™√l
 =wl->
afx_hdl
->
my_li°í_ch™
) {

4293 
s32
 
exèr_li°í_time
;

4295 
exèr_li°í_time
 = 
af_∑øms
->
dwñl_time
 -

4296 
	`jiffõs_to_m£cs
(
jiffõs
 - 
wl
->
af_tx_£¡_jiffõs
);

4298 i‡(
exèr_li°í_time
 > 50) {

4299 
	`wl_£t_drv_°©us
(
wl
, 
WAITING_NEXT_ACT_FRM_LISTEN
, 
dev
);

4300 
	`WL_DBG
(("Wait moreÅime!áctualáfÅime:%d,"

4302 
af_∑øms
->
dwñl_time
, 
exèr_li°í_time
));

4303 i‡(
	`wl_cfgp2p_discovî_li°í
(
wl
, wl->
af_£¡_ch™√l
,

4304 
exèr_li°í_time
 + 100Ë=
BCME_OK
) {

4305 
	`waô_f‹_com∂ëi⁄_timeout
(&
wl
->
waô_√xt_af
,

4306 
	`m£cs_to_jiffõs
(
exèr_li°í_time
 + 100 + 300));

4308 
	`wl_˛r_drv_°©us
(
wl
, 
WAITING_NEXT_ACT_FRM_LISTEN
, 
dev
);

4312 
	`wl_˛r_drv_°©us
(
wl
, 
WAITING_NEXT_ACT_FRM
, 
dev
);

4314 i‡(
wl
->
afx_hdl
->
≥ndög_tx_a˘_‰m
)

4315 
wl
->
afx_hdl
->
≥ndög_tx_a˘_‰m
 = 
NULL
;

4317 
	`WL_INFO
(("-- sending Action Frame is %s,Üisten chan: %d\n",

4318 (
ack
Ë? "Suc˚eded!!":"Faûed!!", 
wl
->
afx_hdl
->
my_li°í_ch™
));

4322 i‡(
c⁄fig_af_∑øms
.
mpc_⁄off
 == 1) {

4323 
	`wldev_iov¨_£töt
(
dev
, "mpc", 1);

4326  
ack
;

4327 
	}
}

4329 
s32


4330 
wl_cfg80211_mgmt_tx
(
wùhy
 *wùhy, 
√t_devi˚
 *
ndev
,

4331 
õì80211_ch™√l
 *
ch™√l
, 
boﬁ
 
offch™
,

4332 
∆80211_ch™√l_ty≥
 
ch™√l_ty≥
,

4333 
boﬁ
 
ch™√l_ty≥_vÆid
, 
waô
,

4334 c⁄° 
u8
* 
buf
, 
size_t
 
Àn
,

4335 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(3, 2, 0)

4336 
boﬁ
 
no_cck
,

4338 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(3, 3, 0)

4339 
boﬁ
 
d⁄t_waô_f‹_ack
,

4341 
u64
 *
cookõ
)

4343 
wl_a˘i⁄_‰ame_t
 *
	ga˘i⁄_‰ame
;

4344 
wl_af_∑øms_t
 *
	gaf_∑øms
;

4345 
scb_vÆ_t
 
	gscb_vÆ
;

4346 c⁄° 
õì80211_mgmt
 *
	gmgmt
;

4347 
wl_¥iv
 *
	gwl
 = 
wùhy_¥iv
(
wùhy
);

4348 
√t_devi˚
 *
	gdev
 = 
NULL
;

4349 
s32
 
	gîr
 = 
BCME_OK
;

4350 
s32
 
	gbssidx
 = 0;

4351 
u32
 
	gid
;

4352 
boﬁ
 
	gack
 = 
Ál£
;

4353 
s8
 
	góbuf
[
ETHER_ADDR_STR_LEN
];

4355 
WL_DBG
(("Enter \n"));

4357 i‡(
	gndev
 =
wl
->
p2p_√t
) {

4358 
dev
 = 
wl_to_¥mry_ndev
(
wl
);

4361 
	gdev
 = 
ndev
;

4365 
	gbssidx
 = 
wl_cfgp2p_föd_idx
(
wl
, 
dev
);

4366 i‡(
	gbssidx
 == -1) {

4368 
WL_ERR
(("C™ÇŸ födÅhêbssidx f‹ dev–%∞)\n", 
dev
));

4369  -
	gENODEV
;

4371 i‡(
p2p_is_⁄
(
wl
)) {

4375 i‡((
	gîr
 = 
wl_cfgp2p_discovî_íabÀ_£¨ch
(
wl
, 
Ál£
)) < 0) {

4376 
WL_ERR
(("CanÇot disable discovery mode\n"));

4377  -
	gEFAULT
;

4380 *
	gcookõ
 = 0;

4381 
	gid
 = 
wl
->
£nd_a˘i⁄_id
++;

4382 i‡(
	gid
 == 0)

4383 
id
 = 
wl
->
£nd_a˘i⁄_id
++;

4384 *
	gcookõ
 = 
id
;

4385 
	gmgmt
 = (c⁄° 
õì80211_mgmt
 *)
buf
;

4386 i‡(
õì80211_is_mgmt
(
mgmt
->
‰ame_c⁄åﬁ
)) {

4387 i‡(
õì80211_is_¥obe_ª•
(
mgmt
->
‰ame_c⁄åﬁ
)) {

4388 
s32
 
	gõ_off£t
 = 
DOT11_MGMT_HDR_LEN
 + 
DOT11_BCN_PRB_FIXED_LEN
;

4389 
s32
 
	gõ_Àn
 = 
Àn
 - 
õ_off£t
;

4390 i‡(
	gdev
 =
wl_to_¥mry_ndev
(
wl
))

4391 
bssidx
 = 
wl_to_p2p_bss_bssidx
(
wl
, 
P2PAPI_BSSCFG_DEVICE
);

4392 
wl_cfgp2p_£t_m™agemít_õ
(
wl
, 
dev
, 
bssidx
,

4393 
VNDR_IE_PRBRSP_FLAG
, (
u8
 *)(
buf
 + 
õ_off£t
), 
õ_Àn
);

4394 
cfg80211_mgmt_tx_°©us
(
ndev
, *
cookõ
, 
buf
, 
Àn
, 
åue
, 
GFP_KERNEL
);

4395 
	gexô
;

4396 } i‡(
õì80211_is_dißssoc
(
mgmt
->
‰ame_c⁄åﬁ
) ||

4397 
õì80211_is_dóuth
(
mgmt
->
‰ame_c⁄åﬁ
)) {

4398 
mem˝y
(
scb_vÆ
.
ó
.
o˘ë
, 
mgmt
->
da
, 
ETH_ALEN
);

4399 
	gscb_vÆ
.
	gvÆ
 = 
mgmt
->
u
.
dißssoc
.
ªas⁄_code
;

4400 
	gîr
 = 
wldev_io˘l
(
dev
, 
WLC_SCB_DEAUTHENTICATE_FOR_REASON
, &
scb_vÆ
,

4401 (
scb_vÆ_t
), 
åue
);

4402 i‡(
	gîr
 < 0)

4403 
WL_ERR
(("WLC_SCB_DEAUTHENTICATE_FOR_REASONÉº‹ %d\n", 
îr
));

4404 
WL_DBG
(("Disconnect STA : %s scb_val.val %d\n",

4405 
bcm_ëhî_¡ﬂ
((c⁄° 
ëhî_addr
 *)
mgmt
->
da
, 
óbuf
),

4406 
scb_vÆ
.
vÆ
));

4407 
wl_dñay
(400);

4408 
cfg80211_mgmt_tx_°©us
(
ndev
, *
cookõ
, 
buf
, 
Àn
, 
åue
, 
GFP_KERNEL
);

4409 
	gexô
;

4411 } i‡(
õì80211_is_a˘i⁄
(
mgmt
->
‰ame_c⁄åﬁ
)) {

4422 #i‚de‡
WL_CFG80211_VSDB_PRIORITIZE_SCAN_REQUEST


4423 
wl_nŸify_esˇn_com∂ëe
(
wl
, 
dev
, 
åue
,Årue);

4428 
WL_ERR
(("Driver onlyállows MGMTÖacketÅype\n"));

4429 
	gexô
;

4432 
	gaf_∑øms
 = (
wl_af_∑øms_t
 *Ë
kzÆloc
(
WL_WIFI_AF_PARAMS_SIZE
, 
GFP_KERNEL
);

4434 i‡(
	gaf_∑øms
 =
NULL
)

4436 
WL_ERR
(("unableÅoállocate frame\n"));

4437  -
	gENOMEM
;

4440 
	ga˘i⁄_‰ame
 = &
af_∑øms
->
a˘i⁄_‰ame
;

4443 
	ga˘i⁄_‰ame
->
	g∑ckëId
 = *
cookõ
;

4444 
WL_DBG
(("a˘i⁄ fømê%d\n", 
a˘i⁄_‰ame
->
∑ckëId
));

4446 
mem˝y
(&
a˘i⁄_‰ame
->
da
, &
mgmt
->da[0], 
ETHER_ADDR_LEN
);

4447 
mem˝y
(&
af_∑øms
->
BSSID
, &
mgmt
->
bssid
[0], 
ETHER_ADDR_LEN
);

4450 
	ga˘i⁄_‰ame
->
	gÀn
 = 
Àn
 - 
DOT11_MGMT_HDR_LEN
;

4451 
WL_DBG
(("a˘i⁄_‰ame->Àn: %d\n", 
a˘i⁄_‰ame
->
Àn
));

4454 
	gaf_∑øms
->
	gch™√l
 =

4455 
õì80211_‰equícy_to_ch™√l
(
ch™√l
->
˚¡î_‰eq
);

4458 
	gwl
->
	gafx_hdl
->
	g≥î_li°í_ch™
 = 
af_∑øms
->
ch™√l
;

4459 
WL_DBG
(("ch™√»‰om uµîÜayî %d\n", 
wl
->
afx_hdl
->
≥î_li°í_ch™
));

4465 
	gaf_∑øms
->
	gdwñl_time
 = 
WL_DWELL_TIME
;

4467 
mem˝y
(
a˘i⁄_‰ame
->
d©a
, &
buf
[
DOT11_MGMT_HDR_LEN
],á˘i⁄_‰ame->
Àn
);

4469 
	gack
 = 
wl_cfg80211_£nd_a˘i⁄_‰ame
(
wùhy
, 
dev
, 
ndev
, 
af_∑øms
,

4470 
a˘i⁄_‰ame
,á˘i⁄_‰ame->
Àn
, 
bssidx
);

4472 
cfg80211_mgmt_tx_°©us
(
ndev
, *
cookõ
, 
buf
, 
Àn
, 
ack
, 
GFP_KERNEL
);

4474 
k‰ì
(
af_∑øms
);

4475 
	gexô
:

4476  
îr
;

4481 
	$wl_cfg80211_mgmt_‰ame_ªgi°î
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
,

4482 
u16
 
‰ame_ty≥
, 
boﬁ
 
ªg
)

4485 
	`WL_DBG
(("%s: føme_ty≥: %x,Ñeg: %d\n", 
__func__
, 
‰ame_ty≥
, 
ªg
));

4487 i‡(
‰ame_ty≥
 !(
IEEE80211_FTYPE_MGMT
 | 
IEEE80211_STYPE_PROBE_REQ
))

4491 
	}
}

4494 
s32


4495 
	$wl_cfg80211_ch™ge_bss
(
wùhy
 *wiphy,

4496 
√t_devi˚
 *
dev
,

4497 
bss_∑ømëîs
 *
∑øms
)

4499 i‡(
∑øms
->
u£_˘s_¥Ÿ
 >= 0) {

4502 i‡(
∑øms
->
u£_sh‹t_¥ómbÀ
 >= 0) {

4505 i‡(
∑øms
->
u£_sh‹t_¶Ÿ_time
 >= 0) {

4508 i‡(
∑øms
->
basic_øãs
) {

4511 i‡(
∑øms
->
≠_isﬁ©e
 >= 0) {

4514 i‡(
∑øms
->
ht_›mode
 >= 0) {

4518 
	}
}

4520 
s32


4521 
	$wl_cfg80211_£t_ch™√l
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
,

4522 
õì80211_ch™√l
 *
ch™
,

4523 
∆80211_ch™√l_ty≥
 
ch™√l_ty≥
)

4525 
s32
 
_ch™
;

4526 
ch™•ec_t
 
ch•ec
 = 0;

4527 
ch™•ec_t
 
fw_ch•ec
 = 0;

4528 
u32
 
bw
 = 
WL_CHANSPEC_BW_20
;

4530 
s32
 
îr
 = 
BCME_OK
;

4531 
s32
 
bw_ˇp
 = 0;

4533 
u32
 
b™d
;

4534 
u32
 
bw_ˇp
;

4535 } 
∑øm
 = {0, 0};

4536 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

4538 i‡(
wl
->
p2p_√t
 =
dev
) {

4539 
dev
 = 
	`wl_to_¥mry_ndev
(
wl
);

4541 
_ch™
 = 
	`õì80211_‰equícy_to_ch™√l
(
ch™
->
˚¡î_‰eq
);

4542 
	`WL_ERR
(("netdev_ifidx(%d), chan_type(%d)Åarget channel(%d) \n",

4543 
dev
->
ifödex
, 
ch™√l_ty≥
, 
_ch™
));

4546 i‡(
ch™
->
b™d
 =
IEEE80211_BAND_5GHZ
) {

4547 
∑øm
.
b™d
 = 
WLC_BAND_5G
;

4548 
îr
 = 
	`wldev_iov¨_gëbuf
(
dev
, "bw_ˇp", &
∑øm
, (param),

4549 
wl
->
io˘l_buf
, 
WLC_IOCTL_SMLEN
, &wl->
io˘l_buf_sync
);

4550 i‡(
îr
) {

4551 i‡(
îr
 !
BCME_UNSUPPORTED
) {

4552 
	`WL_ERR
(("bw_ˇ∞Áûed, %d\n", 
îr
));

4553  
îr
;

4555 
îr
 = 
	`wldev_iov¨_gëöt
(
dev
, "mimo_bw_ˇp", &
bw_ˇp
);

4556 i‡(
îr
) {

4557 
	`WL_ERR
(("îr‹ gë mimo_bw_ˇ∞(%d)\n", 
îr
));

4559 i‡(
bw_ˇp
 !
WLC_N_BW_20ALL
)

4560 
bw
 = 
WL_CHANSPEC_BW_40
;

4563 i‡(
	`WL_BW_CAP_80MHZ
(
wl
->
io˘l_buf
[0]))

4564 
bw
 = 
WL_CHANSPEC_BW_80
;

4565 i‡(
	`WL_BW_CAP_40MHZ
(
wl
->
io˘l_buf
[0]))

4566 
bw
 = 
WL_CHANSPEC_BW_40
;

4568 
bw
 = 
WL_CHANSPEC_BW_20
;

4572 } i‡(
ch™
->
b™d
 =
IEEE80211_BAND_2GHZ
)

4573 
bw
 = 
WL_CHANSPEC_BW_20
;

4574 
£t_ch™√l
:

4575 
ch•ec
 = 
	`wf_ch™√l2ch•ec
(
_ch™
, 
bw
);

4576 i‡(
	`wf_ch•ec_vÆid
(
ch•ec
)) {

4577 
fw_ch•ec
 = 
	`wl_ch•ec_ho°_to_drivî
(
ch•ec
);

4578 i‡(
fw_ch•ec
 !
INVCHANSPEC
) {

4579 i‡((
îr
 = 
	`wldev_iov¨_£töt
(
dev
, "chanspec",

4580 
fw_ch•ec
)Ë=
BCME_BADCHAN
) {

4581 i‡(
bw
 =
WL_CHANSPEC_BW_80
)

4582 
ch™ge_bw
;

4583 
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_SET_CHANNEL
,

4584 &
_ch™
, (_ch™), 
åue
);

4585 i‡(
îr
 < 0) {

4586 
	`WL_ERR
(("WLC_SET_CHANNELÉrror %d"

4587 "chù mayÇŸ bêsuµ‹tögÅhi†ch™√l\n", 
îr
));

4589 } i‡(
îr
) {

4590 
	`WL_ERR
(("ÁûedÅÿ£àch™•e¯îr‹ %d\n", 
îr
));

4593 
	`WL_ERR
(("failedÅo convert host chanspecÅo fw chanspec\n"));

4594 
îr
 = 
BCME_ERROR
;

4597 
ch™ge_bw
:

4598 i‡(
bw
 =
WL_CHANSPEC_BW_80
)

4599 
bw
 = 
WL_CHANSPEC_BW_40
;

4600 i‡(
bw
 =
WL_CHANSPEC_BW_40
)

4601 
bw
 = 
WL_CHANSPEC_BW_20
;

4603 
bw
 = 0;

4604 i‡(
bw
)

4605 
£t_ch™√l
;

4606 
	`WL_ERR
(("InvÆid ch™•e¯0x%x\n", 
ch•ec
));

4607 
îr
 = 
BCME_ERROR
;

4609  
îr
;

4610 
	}
}

4612 
s32


4613 
	$wl_vÆid©e_›í£curôy
(
√t_devi˚
 *
dev
, 
s32
 
bssidx
)

4615 
s32
 
îr
 = 
BCME_OK
;

4618 
îr
 = 
	`wldev_iov¨_£töt_bsscfg
(
dev
, "auth", 0, 
bssidx
);

4619 i‡(
îr
 < 0) {

4620 
	`WL_ERR
(("authÉº‹ %d\n", 
îr
));

4621  
BCME_ERROR
;

4624 
îr
 = 
	`wldev_iov¨_£töt_bsscfg
(
dev
, "w£c", 0, 
bssidx
);

4625 i‡(
îr
 < 0) {

4626 
	`WL_ERR
(("w£¯îr‹ %d\n", 
îr
));

4627  
BCME_ERROR
;

4630 
îr
 = 
	`wldev_iov¨_£töt_bsscfg
(
dev
, "w∑_auth", 
WPA_AUTH_NONE
, 
bssidx
);

4631 i‡(
îr
 < 0) {

4632 
	`WL_ERR
(("w∑_authÉº‹ %d\n", 
îr
));

4633  
BCME_ERROR
;

4637 
	}
}

4639 
s32


4640 
	$wl_vÆid©e_w∑2õ
(
√t_devi˚
 *
dev
, 
bcm_év_t
 *
w∑2õ
, 
s32
 
bssidx
)

4642 
s32
 
Àn
 = 0;

4643 
s32
 
îr
 = 
BCME_OK
;

4644 
u16
 
auth
 = 0;

4645 
u32
 
w£c
;

4646 
u32
 
pvÆ
 = 0;

4647 
u32
 
gvÆ
 = 0;

4648 
u32
 
w∑_auth
 = 0;

4649 
w∑_suôe_mˇ°_t
 *
mˇ°
;

4650 
w∑_suôe_uˇ°_t
 *
uˇ°
;

4651 
w∑_suôe_auth_key_mgmt_t
 *
mgmt
;

4653 
u16
 
suôe_cou¡
;

4654 
u8
 
r¢_ˇp
[2];

4655 
u32
 
wme_bss_dißbÀ
;

4657 i‡(
w∑2õ
 =
NULL
)

4658 
exô
;

4660 
	`WL_DBG
(("Enter \n"));

4661 
Àn
 = 
w∑2õ
->len;

4663 
mˇ°
 = (
w∑_suôe_mˇ°_t
 *)&
w∑2õ
->
d©a
[
WPA2_VERSION_LEN
];

4664 
mˇ°
->
ty≥
) {

4665 
WPA_CIPHER_NONE
:

4666 
gvÆ
 = 0;

4668 
WPA_CIPHER_WEP_40
:

4669 
WPA_CIPHER_WEP_104
:

4670 
gvÆ
 = 
WEP_ENABLED
;

4672 
WPA_CIPHER_TKIP
:

4673 
gvÆ
 = 
TKIP_ENABLED
;

4675 
WPA_CIPHER_AES_CCM
:

4676 
gvÆ
 = 
AES_ENABLED
;

4679 
	`WL_ERR
(("No Security Info\n"));

4682 i‡((
Àn
 -
WPA_SUITE_LEN
) <= 0)

4683  
BCME_BADLEN
;

4686 
uˇ°
 = (
w∑_suôe_uˇ°_t
 *)&
mˇ°
[1];

4687 
suôe_cou¡
 = 
	`…oh16_ua
(&
uˇ°
->
cou¡
);

4688 
uˇ°
->
li°
[0].
ty≥
) {

4689 
WPA_CIPHER_NONE
:

4690 
pvÆ
 = 0;

4692 
WPA_CIPHER_WEP_40
:

4693 
WPA_CIPHER_WEP_104
:

4694 
pvÆ
 = 
WEP_ENABLED
;

4696 
WPA_CIPHER_TKIP
:

4697 
pvÆ
 = 
TKIP_ENABLED
;

4699 
WPA_CIPHER_AES_CCM
:

4700 
pvÆ
 = 
AES_ENABLED
;

4703 
	`WL_ERR
(("No Security Info\n"));

4705 i‡((
Àn
 -(
WPA_IE_SUITE_COUNT_LEN
 + (
WPA_SUITE_LEN
 * 
suôe_cou¡
))) <= 0)

4706  
BCME_BADLEN
;

4709 
w£c
 = (
pvÆ
 | 
gvÆ
 | 
SES_OW_ENABLED
);

4711 
mgmt
 = (
w∑_suôe_auth_key_mgmt_t
 *)&
uˇ°
->
li°
[
suôe_cou¡
];

4712 
suôe_cou¡
 = 
	`…oh16_ua
(&
mgmt
->
cou¡
);

4713 
mgmt
->
li°
[0].
ty≥
) {

4714 
RSN_AKM_NONE
:

4715 
w∑_auth
 = 
WPA_AUTH_NONE
;

4717 
RSN_AKM_UNSPECIFIED
:

4718 
w∑_auth
 = 
WPA2_AUTH_UNSPECIFIED
;

4720 
RSN_AKM_PSK
:

4721 
w∑_auth
 = 
WPA2_AUTH_PSK
;

4724 
	`WL_ERR
(("No Key Mgmt Info\n"));

4727 i‡((
Àn
 -(
WPA_IE_SUITE_COUNT_LEN
 + (
WPA_SUITE_LEN
 * 
suôe_cou¡
))Ë>
RSN_CAP_LEN
) {

4728 
r¢_ˇp
[0] = *(
u8
 *)&
mgmt
->
li°
[
suôe_cou¡
];

4729 
r¢_ˇp
[1] = *((
u8
 *)&
mgmt
->
li°
[
suôe_cou¡
] + 1);

4731 i‡(
r¢_ˇp
[0] & (
RSN_CAP_16_REPLAY_CNTRS
 << 
RSN_CAP_PTK_REPLAY_CNTR_SHIFT
)) {

4732 
wme_bss_dißbÀ
 = 0;

4734 
wme_bss_dißbÀ
 = 1;

4738 
îr
 = 
	`wldev_iov¨_£töt_bsscfg
(
dev
, "wme_bss_dißbÀ", 
wme_bss_dißbÀ
, 
bssidx
);

4739 i‡(
îr
 < 0) {

4740 
	`WL_ERR
(("wme_bss_dißbÀÉº‹ %d\n", 
îr
));

4741  
BCME_ERROR
;

4744 
	`WL_DBG
(("Thîêi†nÿRSN C≠abûôõs.ÑemaöedÜí %d\n", 
Àn
));

4748 
îr
 = 
	`wldev_iov¨_£töt_bsscfg
(
dev
, "auth", 
auth
, 
bssidx
);

4749 i‡(
îr
 < 0) {

4750 
	`WL_ERR
(("authÉº‹ %d\n", 
îr
));

4751  
BCME_ERROR
;

4754 
îr
 = 
	`wldev_iov¨_£töt_bsscfg
(
dev
, "w£c", 
w£c
, 
bssidx
);

4755 i‡(
îr
 < 0) {

4756 
	`WL_ERR
(("w£¯îr‹ %d\n", 
îr
));

4757  
BCME_ERROR
;

4760 
îr
 = 
	`wldev_iov¨_£töt_bsscfg
(
dev
, "w∑_auth", 
w∑_auth
, 
bssidx
);

4761 i‡(
îr
 < 0) {

4762 
	`WL_ERR
(("w∑_authÉº‹ %d\n", 
îr
));

4763  
BCME_ERROR
;

4765 
exô
:

4767 
	}
}

4769 
s32


4770 
	$wl_vÆid©e_w∑õ
(
√t_devi˚
 *
dev
, 
w∑_õ_fixed_t
 *
w∑õ
, 
s32
 
bssidx
)

4772 
w∑_suôe_mˇ°_t
 *
mˇ°
;

4773 
w∑_suôe_uˇ°_t
 *
uˇ°
;

4774 
w∑_suôe_auth_key_mgmt_t
 *
mgmt
;

4775 
u16
 
auth
 = 0;

4776 
u16
 
cou¡
;

4777 
s32
 
îr
 = 
BCME_OK
;

4778 
s32
 
Àn
 = 0;

4779 
u32
 
i
;

4780 
u32
 
w£c
;

4781 
u32
 
pvÆ
 = 0;

4782 
u32
 
gvÆ
 = 0;

4783 
u32
 
w∑_auth
 = 0;

4784 
u32
 
tmp
 = 0;

4786 i‡(
w∑õ
 =
NULL
)

4787 
exô
;

4788 
	`WL_DBG
(("Enter \n"));

4789 
Àn
 = 
w∑õ
->
Àngth
;

4790 
Àn
 -
WPA_IE_TAG_FIXED_LEN
;

4792 i‡(
Àn
 < 
WPA_SUITE_LEN
) {

4793 
	`WL_INFO
(("no multicast cipher suite\n"));

4794 
exô
;

4798 
mˇ°
 = (
w∑_suôe_mˇ°_t
 *)&
w∑õ
[1];

4799 
Àn
 -
WPA_SUITE_LEN
;

4800 i‡(!
	`bcmp
(
mˇ°
->
oui
, 
WPA_OUI
, 
WPA_OUI_LEN
)) {

4801 i‡(
	`IS_WPA_CIPHER
(
mˇ°
->
ty≥
)) {

4802 
tmp
 = 0;

4803 
mˇ°
->
ty≥
) {

4804 
WPA_CIPHER_NONE
:

4805 
tmp
 = 0;

4807 
WPA_CIPHER_WEP_40
:

4808 
WPA_CIPHER_WEP_104
:

4809 
tmp
 = 
WEP_ENABLED
;

4811 
WPA_CIPHER_TKIP
:

4812 
tmp
 = 
TKIP_ENABLED
;

4814 
WPA_CIPHER_AES_CCM
:

4815 
tmp
 = 
AES_ENABLED
;

4818 
	`WL_ERR
(("No Security Info\n"));

4820 
gvÆ
 |
tmp
;

4824 i‡(
Àn
 < 
WPA_IE_SUITE_COUNT_LEN
) {

4825 
	`WL_INFO
(("no unicast suite\n"));

4826 
exô
;

4829 
uˇ°
 = (
w∑_suôe_uˇ°_t
 *)&
mˇ°
[1];

4830 
cou¡
 = 
	`…oh16_ua
(&
uˇ°
->count);

4831 
Àn
 -
WPA_IE_SUITE_COUNT_LEN
;

4832 
i
 = 0; i < 
cou¡
 && 
Àn
 >
WPA_SUITE_LEN
;

4833 
i
++, 
Àn
 -
WPA_SUITE_LEN
) {

4834 i‡(!
	`bcmp
(
uˇ°
->
li°
[
i
].
oui
, 
WPA_OUI
, 
WPA_OUI_LEN
)) {

4835 i‡(
	`IS_WPA_CIPHER
(
uˇ°
->
li°
[
i
].
ty≥
)) {

4836 
tmp
 = 0;

4837 
uˇ°
->
li°
[
i
].
ty≥
) {

4838 
WPA_CIPHER_NONE
:

4839 
tmp
 = 0;

4841 
WPA_CIPHER_WEP_40
:

4842 
WPA_CIPHER_WEP_104
:

4843 
tmp
 = 
WEP_ENABLED
;

4845 
WPA_CIPHER_TKIP
:

4846 
tmp
 = 
TKIP_ENABLED
;

4848 
WPA_CIPHER_AES_CCM
:

4849 
tmp
 = 
AES_ENABLED
;

4852 
	`WL_ERR
(("No Security Info\n"));

4854 
pvÆ
 |
tmp
;

4858 
Àn
 -(
cou¡
 - 
i
Ë* 
WPA_SUITE_LEN
;

4860 i‡(
Àn
 < 
WPA_IE_SUITE_COUNT_LEN
) {

4861 
	`WL_INFO
(("Çoáuth key mgmt suite\n"));

4862 
exô
;

4865 
mgmt
 = (
w∑_suôe_auth_key_mgmt_t
 *)&
uˇ°
->
li°
[
cou¡
];

4866 
cou¡
 = 
	`…oh16_ua
(&
mgmt
->count);

4867 
Àn
 -
WPA_IE_SUITE_COUNT_LEN
;

4868 
i
 = 0; i < 
cou¡
 && 
Àn
 >
WPA_SUITE_LEN
;

4869 
i
++, 
Àn
 -
WPA_SUITE_LEN
) {

4870 i‡(!
	`bcmp
(
mgmt
->
li°
[
i
].
oui
, 
WPA_OUI
, 
WPA_OUI_LEN
)) {

4871 i‡(
	`IS_WPA_AKM
(
mgmt
->
li°
[
i
].
ty≥
)) {

4872 
tmp
 = 0;

4873 
mgmt
->
li°
[
i
].
ty≥
) {

4874 
RSN_AKM_NONE
:

4875 
tmp
 = 
WPA_AUTH_NONE
;

4877 
RSN_AKM_UNSPECIFIED
:

4878 
tmp
 = 
WPA_AUTH_UNSPECIFIED
;

4880 
RSN_AKM_PSK
:

4881 
tmp
 = 
WPA_AUTH_PSK
;

4884 
	`WL_ERR
(("No Key Mgmt Info\n"));

4886 
w∑_auth
 |
tmp
;

4892 
w£c
 = (
pvÆ
 | 
gvÆ
 | 
SES_OW_ENABLED
);

4894 
îr
 = 
	`wldev_iov¨_£töt_bsscfg
(
dev
, "auth", 
auth
, 
bssidx
);

4895 i‡(
îr
 < 0) {

4896 
	`WL_ERR
(("authÉº‹ %d\n", 
îr
));

4897  
BCME_ERROR
;

4900 
îr
 = 
	`wldev_iov¨_£töt_bsscfg
(
dev
, "w£c", 
w£c
, 
bssidx
);

4901 i‡(
îr
 < 0) {

4902 
	`WL_ERR
(("w£¯îr‹ %d\n", 
îr
));

4903  
BCME_ERROR
;

4906 
îr
 = 
	`wldev_iov¨_£töt_bsscfg
(
dev
, "w∑_auth", 
w∑_auth
, 
bssidx
);

4907 i‡(
îr
 < 0) {

4908 
	`WL_ERR
(("w∑_authÉº‹ %d\n", 
îr
));

4909  
BCME_ERROR
;

4911 
exô
:

4913 
	}
}

4915 
s32


4916 
	$wl_cfg80211_b˙_vÆid©e_£c
(

4917 
√t_devi˚
 *
dev
,

4918 
∑r£d_õs
 *
õs
,

4919 
u32
 
dev_rﬁe
,

4920 
s32
 
bssidx
)

4922 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

4924 i‡(
dev_rﬁe
 =
NL80211_IFTYPE_P2P_GO
 && (
õs
->
w∑2_õ
)) {

4926 
	`WL_DBG
(("P2P GO: validating wpa2_ie"));

4927 i‡(
	`wl_vÆid©e_w∑2õ
(
dev
, 
õs
->
w∑2_õ
, 
bssidx
) < 0)

4928  
BCME_ERROR
;

4930 } i‡(
dev_rﬁe
 =
NL80211_IFTYPE_AP
) {

4932 
	`WL_DBG
(("SoftAP: validating security"));

4934 i‡((
õs
->
w∑2_õ
 || ies->
w∑_õ
) &&

4935 ((
	`wl_vÆid©e_w∑2õ
(
dev
, 
õs
->
w∑2_õ
, 
bssidx
) < 0 ||

4936 
	`wl_vÆid©e_w∑õ
(
dev
, 
õs
->
w∑_õ
, 
bssidx
) < 0))) {

4937 
wl
->
≠_öfo
->
£curôy_mode
 = 
Ál£
;

4938  
BCME_ERROR
;

4941 
wl
->
≠_öfo
->
£curôy_mode
 = 
åue
;

4942 i‡(
wl
->
≠_öfo
->
r¢_õ
) {

4943 
	`k‰ì
(
wl
->
≠_öfo
->
r¢_õ
);

4944 
wl
->
≠_öfo
->
r¢_õ
 = 
NULL
;

4946 i‡(
wl
->
≠_öfo
->
w∑_õ
) {

4947 
	`k‰ì
(
wl
->
≠_öfo
->
w∑_õ
);

4948 
wl
->
≠_öfo
->
w∑_õ
 = 
NULL
;

4950 i‡(
wl
->
≠_öfo
->
wps_õ
) {

4951 
	`k‰ì
(
wl
->
≠_öfo
->
wps_õ
);

4952 
wl
->
≠_öfo
->
wps_õ
 = 
NULL
;

4954 i‡(
õs
->
w∑_õ
 !
NULL
) {

4956 
wl
->
≠_öfo
->
r¢_õ
 = 
NULL
;

4957 
wl
->
≠_öfo
->
w∑_õ
 = 
	`kmemdup
(
õs
->wpa_ie,

4958 
õs
->
w∑_õ
->
Àngth
 + 
WPA_RSN_IE_TAG_FIXED_LEN
,

4959 
GFP_KERNEL
);

4960 } i‡(
õs
->
w∑2_õ
 !
NULL
) {

4962 
wl
->
≠_öfo
->
w∑_õ
 = 
NULL
;

4963 
wl
->
≠_öfo
->
r¢_õ
 = 
	`kmemdup
(
õs
->
w∑2_õ
,

4964 
õs
->
w∑2_õ
->
Àn
 + 
WPA_RSN_IE_TAG_FIXED_LEN
,

4965 
GFP_KERNEL
);

4968 i‡(!
õs
->
w∑2_õ
 && !õs->
w∑_õ
) {

4969 
	`wl_vÆid©e_›í£curôy
(
dev
, 
bssidx
);

4970 
wl
->
≠_öfo
->
£curôy_mode
 = 
Ál£
;

4973 i‡(
õs
->
wps_õ
) {

4974 
wl
->
≠_öfo
->
wps_õ
 = 
	`kmemdup
(
õs
->wps_õ, ies->
wps_õ_Àn
, 
GFP_KERNEL
);

4980 
	}
}

4982 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(3, 4, 0)

4983 
s32
 
	$wl_cfg80211_b˙_£t_∑øms
(

4984 
cfg80211_≠_£âögs
 *
öfo
,

4985 
√t_devi˚
 *
dev
,

4986 
u32
 
dev_rﬁe
, 
s32
 
bssidx
)

4988 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

4989 
s32
 
îr
 = 
BCME_OK
;

4991 
	`WL_DBG
(("interval (%d) \ndtim_period (%d) \n",

4992 
öfo
->
bóc⁄_öãrvÆ
, info->
dtim_≥riod
));

4994 i‡(
öfo
->
bóc⁄_öãrvÆ
) {

4995 i‡((
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_SET_BCNPRD
,

4996 &
öfo
->
bóc⁄_öãrvÆ
, (
s32
), 
åue
)) < 0) {

4997 
	`WL_ERR
(("Bóc⁄ I¡îvÆ Së Eº‹, %d\n", 
îr
));

4998  
îr
;

5002 i‡(
öfo
->
dtim_≥riod
) {

5003 i‡((
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_SET_DTIMPRD
,

5004 &
öfo
->
dtim_≥riod
, (
s32
), 
åue
)) < 0) {

5005 
	`WL_ERR
(("DTIM I¡îvÆ Së Eº‹, %d\n", 
îr
));

5006  
îr
;

5010 i‡((
öfo
->
ssid
Ë&& (öfo->
ssid_Àn
 > 0) &&

5011 (
öfo
->
ssid_Àn
 <= 32)) {

5012 
	`WL_DBG
(("SSID (%sËÀn:%d \n", 
öfo
->
ssid
, info->
ssid_Àn
));

5013 i‡(
dev_rﬁe
 =
NL80211_IFTYPE_AP
) {

5015 
	`mem£t
(
wl
->
ho°≠d_ssid
.
SSID
, 0x00, 32);

5016 
	`mem˝y
(
wl
->
ho°≠d_ssid
.
SSID
, 
öfo
->
ssid
, info->
ssid_Àn
);

5017 
wl
->
ho°≠d_ssid
.
SSID_Àn
 = 
öfo
->
ssid_Àn
;

5020 
	`mem£t
(
wl
->
p2p
->
ssid
.
SSID
, 0x00, 32);

5021 
	`mem˝y
(
wl
->
p2p
->
ssid
.
SSID
, 
öfo
->ssid, info->
ssid_Àn
);

5022 
wl
->
p2p
->
ssid
.
SSID_Àn
 = 
öfo
->
ssid_Àn
;

5026 i‡(
öfo
->
hiddí_ssid
) {

5027 i‡((
îr
 = 
	`wldev_iov¨_£töt
(
dev
, "closednet", 1)) < 0)

5028 
	`WL_ERR
(("ÁûedÅÿ£àhiddí : %d\n", 
îr
));

5029 
	`WL_DBG
(("hiddí_ssid_íum_vÆ: %d \n", 
öfo
->
hiddí_ssid
));

5032  
îr
;

5033 
	}
}

5036 
s32


5037 
	$wl_cfg80211_∑r£_õs
(
u8
 *
±r
, 
u32
 
Àn
, 
∑r£d_õs
 *
õs
)

5039 
s32
 
îr
 = 
BCME_OK
;

5041 
	`mem£t
(
õs
, 0, (
∑r£d_õs
));

5044 i‡((
õs
->
wps_õ
 = 
	`wl_cfgp2p_föd_wpsõ
(
±r
, 
Àn
)Ë!
NULL
) {

5045 
	`WL_DBG
(("WPSIE in beacon \n"));

5046 
õs
->
wps_õ_Àn
 = ies->
wps_õ
->
Àngth
 + 
WPA_RSN_IE_TAG_FIXED_LEN
;

5048 
	`WL_ERR
(("No WPSIE in beacon \n"));

5052 i‡((
õs
->
w∑2_õ
 = 
	`bcm_∑r£_évs
(
±r
, 
Àn
,

5053 
DOT11_MNG_RSN_ID
)Ë!
NULL
) {

5054 
	`WL_DBG
((" WPA2 IE found\n"));

5055 
õs
->
w∑2_õ_Àn
 = ies->
w∑2_õ
->
Àn
;

5059 i‡((
õs
->
w∑_õ
 = 
	`wl_cfgp2p_föd_w∑õ
(
±r
, 
Àn
)Ë!
NULL
) {

5060 
	`WL_DBG
((" WPA found\n"));

5061 
õs
->
w∑_õ_Àn
 = ies->
w∑_õ
->
Àngth
;

5064  
îr
;

5066 
	}
}

5068 
s32


5069 
	$wl_cfg80211_b˙_brögup_≠
(

5070 
√t_devi˚
 *
dev
,

5071 
∑r£d_õs
 *
õs
,

5072 
u32
 
dev_rﬁe
, 
s32
 
bssidx
)

5074 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

5075 
wl_joö_∑øms
 
joö_∑øms
;

5076 
boﬁ
 
is_bssup
 = 
Ál£
;

5077 
s32
 
ö‰a
 = 1;

5078 
s32
 
joö_∑øms_size
 = 0;

5079 
s32
 
≠
 = 1;

5080 
s32
 
îr
 = 
BCME_OK
;

5082 
	`WL_DBG
(("E¡î dev_rﬁe: %d\n", 
dev_rﬁe
));

5085 
	`wldev_iov¨_£töt
(
dev
, "mpc", 0);

5087 i‡(
dev_rﬁe
 =
NL80211_IFTYPE_P2P_GO
) {

5088 
is_bssup
 = 
	`wl_cfgp2p_bss_isup
(
dev
, 
bssidx
);

5089 i‡(!
is_bssup
 && (
õs
->
w∑2_õ
 !
NULL
)) {

5091 
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_SET_INFRA
, &
ö‰a
, (
s32
), 
åue
);

5092 i‡(
îr
 < 0) {

5093 
	`WL_ERR
(("SET INFRAÉº‹ %d\n", 
îr
));

5094 
exô
;

5097 
îr
 = 
	`wldev_iov¨_£tbuf_bsscfg
(
dev
, "ssid", &
wl
->
p2p
->
ssid
,

5098 (
wl
->
p2p
->
ssid
), wl->
io˘l_buf
, 
WLC_IOCTL_MAXLEN
,

5099 
bssidx
, &
wl
->
io˘l_buf_sync
);

5100 i‡(
îr
 < 0) {

5101 
	`WL_ERR
(("GO SSID sëtögÉº‹ %d\n", 
îr
));

5102 
exô
;

5105 i‡((
îr
 = 
	`wl_cfgp2p_bss
(
wl
, 
dev
, 
bssidx
, 1)) < 0) {

5106 
	`WL_ERR
(("GO Brög u∞îr‹ %d\n", 
îr
));

5107 
exô
;

5110 
	`WL_DBG
(("Bss isálready up\n"));

5111 } i‡((
dev_rﬁe
 =
NL80211_IFTYPE_AP
) &&

5112 (
	`wl_gë_drv_°©us
(
wl
, 
AP_CREATING
, 
dev
))) {

5114 
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_DOWN
, &
≠
, (
s32
), 
åue
);

5115 i‡(
îr
 < 0) {

5116 
	`WL_ERR
(("WLC_DOWNÉº‹ %d\n", 
îr
));

5117 
exô
;

5119 
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_SET_INFRA
, &
ö‰a
, (
s32
), 
åue
);

5120 i‡(
îr
 < 0) {

5121 
	`WL_ERR
(("SET INFRAÉº‹ %d\n", 
îr
));

5122 
exô
;

5124 i‡((
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_SET_AP
, &
≠
, (
s32
), 
åue
)) < 0) {

5125 
	`WL_ERR
(("£âög AP modêÁûed %d \n", 
îr
));

5126 
exô
;

5129 
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_UP
, &
≠
, (
s32
), 
åue
);

5130 i‡(
	`u∆ikñy
(
îr
)) {

5131 
	`WL_ERR
(("WLC_UPÉº‹ (%d)\n", 
îr
));

5132 
exô
;

5135 
	`mem£t
(&
joö_∑øms
, 0, (join_params));

5137 
joö_∑øms_size
 = (
joö_∑øms
.
ssid
);

5138 
	`mem˝y
(
joö_∑øms
.
ssid
.
SSID
, 
wl
->
ho°≠d_ssid
.SSID,

5139 
wl
->
ho°≠d_ssid
.
SSID_Àn
);

5140 
joö_∑øms
.
ssid
.
SSID_Àn
 = 
	`htod32
(
wl
->
ho°≠d_ssid
.SSID_len);

5143 i‡((
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_SET_SSID
, &
joö_∑øms
,

5144 
joö_∑øms_size
, 
åue
)) == 0) {

5145 
	`WL_DBG
(("So·AP së SSID (%sËsuc˚ss\n", 
joö_∑øms
.
ssid
.
SSID
));

5146 
	`wl_˛r_drv_°©us
(
wl
, 
AP_CREATING
, 
dev
);

5147 
	`wl_£t_drv_°©us
(
wl
, 
AP_CREATED
, 
dev
);

5152 
exô
:

5153  
îr
;

5154 
	}
}

5156 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(3, 4, 0)

5157 
s32


5158 
	$wl_cfg80211_∑r£_£t_õs
(

5159 
√t_devi˚
 *
dev
,

5160 
cfg80211_bóc⁄_d©a
 *
öfo
,

5161 
∑r£d_õs
 *
õs
,

5162 
u32
 
dev_rﬁe
,

5163 
s32
 
bssidx
)

5165 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

5166 
∑r£d_õs
 
¥b_õs
;

5167 
s32
 
îr
 = 
BCME_OK
;

5169 
	`mem£t
(
õs
, 0, (
∑r£d_õs
));

5170 
	`mem£t
(&
¥b_õs
, 0, (
∑r£d_õs
));

5173 i‡(
	`wl_cfg80211_∑r£_õs
((
u8
 *)
öfo
->
èû
,

5174 
öfo
->
èû_Àn
, 
õs
) < 0) {

5175 
	`WL_ERR
(("Beacon get IEs failed \n"));

5176 
îr
 = -
EINVAL
;

5177 
Áû
;

5181 i‡((
îr
 = 
	`wl_cfgp2p_£t_m™agemít_õ
(
wl
, 
dev
, 
bssidx
,

5182 
VNDR_IE_BEACON_FLAG
, (
u8
 *)
öfo
->
èû
,

5183 
öfo
->
èû_Àn
)) < 0) {

5184 
	`WL_ERR
(("Set Beacon IE Failed \n"));

5186 
	`WL_DBG
(("Applied Vndr IEs for Beacon \n"));

5190 i‡(
	`wl_cfg80211_∑r£_õs
((
u8
 *)
öfo
->
¥obîe•_õs
,

5191 
öfo
->
¥obîe•_õs_Àn
, &
¥b_õs
) < 0) {

5192 
	`WL_ERR
(("PRB RESP get IEs failed \n"));

5193 
îr
 = -
EINVAL
;

5194 
Áû
;

5198 i‡((
îr
 = 
	`wl_cfgp2p_£t_m™agemít_õ
(
wl
, 
dev
, 
bssidx
,

5199 
VNDR_IE_PRBRSP_FLAG
, (
u8
 *)
öfo
->
¥obîe•_õs
,

5200 
öfo
->
¥obîe•_õs_Àn
)) < 0) {

5201 
	`WL_ERR
(("Set Probe Resp IE Failed \n"));

5203 
	`WL_DBG
(("Applied Vndr IEs for Probe Resp \n"));

5206 
Áû
:

5208  
îr
;

5209 
	}
}

5212 
s32
 
	$wl_cfg80211_ho°≠d_£c
(

5213 
√t_devi˚
 *
dev
,

5214 
∑r£d_õs
 *
õs
,

5215 
s32
 
bssidx
)

5217 
boﬁ
 
upd©e_bss
 = 0;

5218 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

5221 i‡(
õs
->
wps_õ
) {

5222 i‡(
wl
->
≠_öfo
->
wps_õ
 &&

5223 
	`memcmp
(
wl
->
≠_öfo
->
wps_õ
, 
õs
->wps_õ, ies->
wps_õ_Àn
)) {

5224 
	`WL_DBG
((" WPS IE is changed\n"));

5225 
	`k‰ì
(
wl
->
≠_öfo
->
wps_õ
);

5226 
wl
->
≠_öfo
->
wps_õ
 = 
	`kmemdup
(
õs
->wps_õ, ies->
wps_õ_Àn
, 
GFP_KERNEL
);

5227 } i‡(
wl
->
≠_öfo
->
wps_õ
 =
NULL
) {

5228 
	`WL_DBG
((" WPS IE isádded\n"));

5229 
wl
->
≠_öfo
->
wps_õ
 = 
	`kmemdup
(
õs
->wps_õ, ies->
wps_õ_Àn
, 
GFP_KERNEL
);

5231 i‡((
õs
->
w∑_õ
 !
NULL
 || ies->
w∑2_õ
 != NULL)) {

5232 i‡(!
wl
->
≠_öfo
->
£curôy_mode
) {

5234 
upd©e_bss
 = 
åue
;

5235 i‡(
õs
->
w∑_õ
 !
NULL
) {

5236 
wl
->
≠_öfo
->
w∑_õ
 = 
	`kmemdup
(
õs
->wpa_ie,

5237 
õs
->
w∑_õ
->
Àngth
 + 
WPA_RSN_IE_TAG_FIXED_LEN
,

5238 
GFP_KERNEL
);

5240 
wl
->
≠_öfo
->
r¢_õ
 = 
	`kmemdup
(
õs
->
w∑2_õ
,

5241 
õs
->
w∑2_õ
->
Àn
 + 
WPA_RSN_IE_TAG_FIXED_LEN
,

5242 
GFP_KERNEL
);

5244 } i‡(
wl
->
≠_öfo
->
w∑_õ
) {

5246 i‡(
õs
->
w∑_õ
 !
NULL
) {

5247 
upd©e_bss
 = 
åue
;

5248 
	`k‰ì
(
wl
->
≠_öfo
->
r¢_õ
);

5249 
wl
->
≠_öfo
->
r¢_õ
 = 
NULL
;

5250 
wl
->
≠_öfo
->
w∑_õ
 = 
	`kmemdup
(
õs
->wpa_ie,

5251 
õs
->
w∑_õ
->
Àngth
 + 
WPA_RSN_IE_TAG_FIXED_LEN
,

5252 
GFP_KERNEL
);

5253 } i‡(
	`memcmp
(
wl
->
≠_öfo
->
r¢_õ
,

5254 
õs
->
w∑2_õ
, ies->w∑2_õ->
Àn


5255 + 
WPA_RSN_IE_TAG_FIXED_LEN
)) {

5256 
upd©e_bss
 = 
åue
;

5257 
	`k‰ì
(
wl
->
≠_öfo
->
r¢_õ
);

5258 
wl
->
≠_öfo
->
r¢_õ
 = 
	`kmemdup
(
õs
->
w∑2_õ
,

5259 
õs
->
w∑2_õ
->
Àn
 + 
WPA_RSN_IE_TAG_FIXED_LEN
,

5260 
GFP_KERNEL
);

5261 
wl
->
≠_öfo
->
w∑_õ
 = 
NULL
;

5264 i‡(
upd©e_bss
) {

5265 
wl
->
≠_öfo
->
£curôy_mode
 = 
åue
;

5266 
	`wl_cfgp2p_bss
(
wl
, 
dev
, 
bssidx
, 0);

5267 i‡(
	`wl_vÆid©e_w∑2õ
(
dev
, 
õs
->
w∑2_õ
, 
bssidx
) < 0 ||

5268 
	`wl_vÆid©e_w∑õ
(
dev
, 
õs
->
w∑_õ
, 
bssidx
) < 0) {

5269  
BCME_ERROR
;

5271 
	`wl_cfgp2p_bss
(
wl
, 
dev
, 
bssidx
, 1);

5275 
	`WL_ERR
(("No WPSIE in beacon \n"));

5278 
	}
}

5280 #i‡
deföed
(
WL_SUPPORT_BACKPORTED_KPATCHES
Ë|| (
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(3, \

5282 
s32


5283 
	$wl_cfg80211_dñ_°©i⁄
(

5284 
wùhy
 *wiphy,

5285 
√t_devi˚
 *
ndev
,

5286 
u8
* 
mac_addr
)

5288 
√t_devi˚
 *
dev
;

5289 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

5290 
scb_vÆ_t
 
scb_vÆ
;

5291 
s8
 
óbuf
[
ETHER_ADDR_STR_LEN
];

5293 
	`WL_DBG
(("Entry\n"));

5294 i‡(
mac_addr
 =
NULL
) {

5295 
	`WL_DBG
(("mac_addr is NULL ignore it\n"));

5299 i‡(
ndev
 =
wl
->
p2p_√t
) {

5300 
dev
 = 
	`wl_to_¥mry_ndev
(
wl
);

5302 
dev
 = 
ndev
;

5305 i‡(
	`p2p_is_⁄
(
wl
)) {

5309 i‡((
	`wl_cfgp2p_discovî_íabÀ_£¨ch
(
wl
, 
Ál£
)) < 0) {

5310 
	`WL_ERR
(("CanÇot disable discovery mode\n"));

5311  -
EFAULT
;

5315 
	`mem˝y
(
scb_vÆ
.
ó
.
o˘ë
, 
mac_addr
, 
ETHER_ADDR_LEN
);

5316 
scb_vÆ
.
vÆ
 = 
DOT11_RC_DEAUTH_LEAVING
;

5317 i‡(
	`wldev_io˘l
(
dev
, 
WLC_SCB_DEAUTHENTICATE_FOR_REASON
, &
scb_vÆ
,

5318 (
scb_vÆ_t
), 
åue
))

5319 
	`WL_ERR
(("WLC_SCB_DEAUTHENTICATE_FOR_REASON failed\n"));

5320 
	`WL_DBG
(("Disconnect STA : %s scb_val.val %d\n",

5321 
	`bcm_ëhî_¡ﬂ
((c⁄° 
ëhî_addr
 *)
mac_addr
, 
óbuf
),

5322 
scb_vÆ
.
vÆ
));

5323 
	`wl_dñay
(400);

5325 
	}
}

5328 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(3, 4, 0)

5329 
s32


5330 
	$wl_cfg80211_°¨t_≠
(

5331 
wùhy
 *wiphy,

5332 
√t_devi˚
 *
dev
,

5333 
cfg80211_≠_£âögs
 *
öfo
)

5335 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

5336 
s32
 
îr
 = 
BCME_OK
;

5337 
∑r£d_õs
 
õs
;

5338 
s32
 
bssidx
 = 0;

5339 
u32
 
dev_rﬁe
 = 0;

5341 
	`WL_DBG
(("Enter \n"));

5342 i‡(
dev
 =
	`wl_to_¥mry_ndev
(
wl
)) {

5343 
	`WL_DBG
(("Start APÑeq onÖrimary iface: Softap\n"));

5344 
dev_rﬁe
 = 
NL80211_IFTYPE_AP
;

5345 } i‡(
dev
 =
wl
->
p2p_√t
) {

5347 
	`WL_DBG
(("Start APÑeq on P2P iface: GO\n"));

5348 
dev
 = 
	`wl_to_¥mry_ndev
(
wl
);

5349 
dev_rﬁe
 = 
NL80211_IFTYPE_P2P_GO
;

5352 
bssidx
 = 
	`wl_cfgp2p_föd_idx
(
wl
, 
dev
);

5353 i‡(
	`p2p_is_⁄
(
wl
) &&

5354 (
bssidx
 =
	`wl_to_p2p_bss_bssidx
(
wl
,

5355 
P2PAPI_BSSCFG_CONNECTION
))) {

5356 
dev_rﬁe
 = 
NL80211_IFTYPE_P2P_GO
;

5357 
	`WL_DBG
(("Start APÑeq on P2P connection iface\n"));

5360 i‡((
îr
 = 
	`wl_cfg80211_b˙_£t_∑øms
(
öfo
, 
dev
,

5361 
dev_rﬁe
, 
bssidx
)) < 0) {

5362 
	`WL_ERR
(("BeaconÖarams set failed \n"));

5363 
Áû
;

5367 i‡((
îr
 = 
	`wl_cfg80211_∑r£_£t_õs
(
dev
, &
öfo
->
bóc⁄
,

5368 &
õs
, 
dev_rﬁe
, 
bssidx
) < 0)) {

5369 
	`WL_ERR
(("Set IEs failed \n"));

5370 
Áû
;

5373 i‡((
	`wl_cfg80211_b˙_vÆid©e_£c
(
dev
, &
õs
,

5374 
dev_rﬁe
, 
bssidx
)) < 0)

5376 
	`WL_ERR
(("Beacon set security failed \n"));

5377 
Áû
;

5380 i‡((
îr
 = 
	`wl_cfg80211_b˙_brögup_≠
(
dev
, &
õs
,

5381 
dev_rﬁe
, 
bssidx
)) < 0) {

5382 
	`WL_ERR
(("Beacon bring up AP/GO failed \n"));

5383 
Áû
;

5386 
	`WL_DBG
(("** AP/GO Created **\n"));

5388 
Áû
:

5389 i‡(
îr
) {

5390 
	`WL_ERR
(("ADD/SET beacon failed\n"));

5391 
	`wldev_iov¨_£töt
(
dev
, "mpc", 1);

5394  
îr
;

5395 
	}
}

5397 
s32


5398 
	$wl_cfg80211_°›_≠
(

5399 
wùhy
 *wiphy,

5400 
√t_devi˚
 *
dev
)

5402 
îr
 = 0;

5403 
u32
 
dev_rﬁe
 = 0;

5404 
ö‰a
 = 0;

5405 
≠
 = 0;

5406 
s32
 
bssidx
 = 0;

5407 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

5409 
	`WL_DBG
(("Enter \n"));

5410 i‡(
dev
 =
	`wl_to_¥mry_ndev
(
wl
)) {

5411 
dev_rﬁe
 = 
NL80211_IFTYPE_AP
;

5412 } i‡(
dev
 =
wl
->
p2p_√t
) {

5414 
dev
 = 
	`wl_to_¥mry_ndev
(
wl
);

5415 
dev_rﬁe
 = 
NL80211_IFTYPE_P2P_GO
;

5417 
bssidx
 = 
	`wl_cfgp2p_föd_idx
(
wl
, 
dev
);

5418 i‡(
	`p2p_is_⁄
(
wl
) &&

5419 (
bssidx
 =
	`wl_to_p2p_bss_bssidx
(
wl
,

5420 
P2PAPI_BSSCFG_CONNECTION
))) {

5421 
dev_rﬁe
 = 
NL80211_IFTYPE_P2P_GO
;

5424 i‡(
dev_rﬁe
 =
NL80211_IFTYPE_AP
) {

5428 
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_SET_INFRA
, &
ö‰a
, (
s32
), 
åue
);

5429 i‡(
îr
 < 0) {

5430 
	`WL_ERR
(("SET INFRAÉº‹ %d\n", 
îr
));

5431 
îr
 = -
ENOTSUPP
;

5432 
exô
;

5434 i‡((
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_SET_AP
, &
≠
, (
s32
), 
åue
)) < 0) {

5435 
	`WL_ERR
(("£âög AP modêÁûed %d \n", 
îr
));

5436 
îr
 = -
ENOTSUPP
;

5437 
exô
;

5440 
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_UP
, &
≠
, (
s32
), 
åue
);

5441 i‡(
	`u∆ikñy
(
îr
)) {

5442 
	`WL_ERR
(("WLC_UPÉº‹ (%d)\n", 
îr
));

5443 
îr
 = -
EINVAL
;

5444 
exô
;

5447 
	`wl_˛r_drv_°©us
(
wl
, 
AP_CREATED
, 
dev
);

5449 
	`wldev_iov¨_£töt
(
dev
, "mpc", 1);

5451 
	`WL_DBG
(("Stopping P2P GO \n"));

5454 
exô
:

5455  
îr
;

5456 
	}
}

5458 
s32


5459 
	$wl_cfg80211_ch™ge_bóc⁄
(

5460 
wùhy
 *wiphy,

5461 
√t_devi˚
 *
dev
,

5462 
cfg80211_bóc⁄_d©a
 *
öfo
)

5464 
s32
 
îr
 = 
BCME_OK
;

5465 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

5466 
∑r£d_õs
 
õs
;

5467 
u32
 
dev_rﬁe
 = 0;

5468 
s32
 
bssidx
 = 0;

5470 
	`WL_DBG
(("Enter \n"));

5472 i‡(
dev
 =
	`wl_to_¥mry_ndev
(
wl
)) {

5473 
dev_rﬁe
 = 
NL80211_IFTYPE_AP
;

5474 } i‡(
dev
 =
wl
->
p2p_√t
) {

5476 
dev
 = 
	`wl_to_¥mry_ndev
(
wl
);

5477 
dev_rﬁe
 = 
NL80211_IFTYPE_P2P_GO
;

5480 
bssidx
 = 
	`wl_cfgp2p_föd_idx
(
wl
, 
dev
);

5481 i‡(
	`p2p_is_⁄
(
wl
) &&

5482 (
bssidx
 =
	`wl_to_p2p_bss_bssidx
(
wl
,

5483 
P2PAPI_BSSCFG_CONNECTION
))) {

5484 
dev_rﬁe
 = 
NL80211_IFTYPE_P2P_GO
;

5488 i‡((
îr
 = 
	`wl_cfg80211_∑r£_£t_õs
(
dev
, 
öfo
,

5489 &
õs
, 
dev_rﬁe
, 
bssidx
) < 0)) {

5490 
	`WL_ERR
(("Set IEs failed \n"));

5491 
Áû
;

5494 i‡(
dev_rﬁe
 =
NL80211_IFTYPE_AP
) {

5495 i‡(
	`wl_cfg80211_ho°≠d_£c
(
dev
, &
õs
, 
bssidx
) < 0) {

5496 
	`WL_ERR
(("Hostapd update sec failed \n"));

5497 
îr
 = -
EINVAL
;

5498 
Áû
;

5502 
Áû
:

5503  
îr
;

5504 
	}
}

5506 
s32


5507 
	$wl_cfg80211_add_£t_bóc⁄
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
,

5508 
bóc⁄_∑ømëîs
 *
öfo
)

5510 
s32
 
îr
 = 
BCME_OK
;

5511 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

5512 
s32
 
õ_off£t
 = 0;

5513 
s32
 
bssidx
 = 0;

5514 
u32
 
dev_rﬁe
 = 
NL80211_IFTYPE_AP
;

5515 
∑r£d_õs
 
õs
;

5516 
bcm_év_t
 *
ssid_õ
;

5517 
boﬁ
 
pbc
 = 0;

5518 
	`WL_DBG
(("interval (%d) dtim_period (%d) head_len (%d)Åail_len (%d)\n",

5519 
öfo
->
öãrvÆ
, info->
dtim_≥riod
, info->
hód_Àn
, info->
èû_Àn
));

5521 i‡(
dev
 =
	`wl_to_¥mry_ndev
(
wl
)) {

5522 
dev_rﬁe
 = 
NL80211_IFTYPE_AP
;

5523 } i‡(
dev
 =
wl
->
p2p_√t
) {

5525 
dev
 = 
	`wl_to_¥mry_ndev
(
wl
);

5526 
dev_rﬁe
 = 
NL80211_IFTYPE_P2P_GO
;

5529 
bssidx
 = 
	`wl_cfgp2p_föd_idx
(
wl
, 
dev
);

5530 i‡(
	`p2p_is_⁄
(
wl
) &&

5531 (
bssidx
 =
	`wl_to_p2p_bss_bssidx
(
wl
,

5532 
P2PAPI_BSSCFG_CONNECTION
))) {

5533 
dev_rﬁe
 = 
NL80211_IFTYPE_P2P_GO
;

5536 
õ_off£t
 = 
DOT11_MGMT_HDR_LEN
 + 
DOT11_BCN_PRB_FIXED_LEN
;

5538 i‡((
ssid_õ
 = 
	`bcm_∑r£_évs
((
u8
 *)&
öfo
->
hód
[
õ_off£t
],

5539 
öfo
->
hód_Àn
 - 
õ_off£t
,

5540 
DOT11_MNG_SSID_ID
)Ë!
NULL
) {

5541 i‡(
dev_rﬁe
 =
NL80211_IFTYPE_AP
) {

5543 
	`mem£t
(&
wl
->
ho°≠d_ssid
.
SSID
[0], 0x00, 32);

5544 
	`mem˝y
(&
wl
->
ho°≠d_ssid
.
SSID
[0], 
ssid_õ
->
d©a
, ssid_õ->
Àn
);

5545 
wl
->
ho°≠d_ssid
.
SSID_Àn
 = 
ssid_õ
->
Àn
;

5548 
	`mem£t
(&
wl
->
p2p
->
ssid
.
SSID
[0], 0x00, 32);

5549 
	`mem˝y
(
wl
->
p2p
->
ssid
.
SSID
, 
ssid_õ
->
d©a
, ssid_õ->
Àn
);

5550 
wl
->
p2p
->
ssid
.
SSID_Àn
 = 
ssid_õ
->
Àn
;

5554 i‡(
	`wl_cfg80211_∑r£_õs
((
u8
 *)
öfo
->
èû
,

5555 
öfo
->
èû_Àn
, &
õs
) < 0) {

5556 
	`WL_ERR
(("Beacon get IEs failed \n"));

5557 
îr
 = -
EINVAL
;

5558 
Áû
;

5561 i‡(
	`wl_cfgp2p_£t_m™agemít_õ
(
wl
, 
dev
, 
bssidx
,

5562 
VNDR_IE_BEACON_FLAG
, (
u8
 *)
öfo
->
èû
,

5563 
öfo
->
èû_Àn
) < 0) {

5564 
	`WL_ERR
(("Beacon set IEs failed \n"));

5565 
Áû
;

5567 
	`WL_DBG
(("Applied Vndr IEs for Beacon \n"));

5569 i‡(!
	`wl_cfgp2p_bss_isup
(
dev
, 
bssidx
) &&

5570 (
	`wl_cfg80211_b˙_vÆid©e_£c
(
dev
, &
õs
, 
dev_rﬁe
, 
bssidx
) < 0))

5572 
	`WL_ERR
(("Beacon set security failed \n"));

5573 
Áû
;

5577 i‡(
öfo
->
öãrvÆ
) {

5578 i‡((
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_SET_BCNPRD
,

5579 &
öfo
->
öãrvÆ
, (
s32
), 
åue
)) < 0) {

5580 
	`WL_ERR
(("Bóc⁄ I¡îvÆ Së Eº‹, %d\n", 
îr
));

5581  
îr
;

5584 i‡(
öfo
->
dtim_≥riod
) {

5585 i‡((
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_SET_DTIMPRD
,

5586 &
öfo
->
dtim_≥riod
, (
s32
), 
åue
)) < 0) {

5587 
	`WL_ERR
(("DTIM I¡îvÆ Së Eº‹, %d\n", 
îr
));

5588  
îr
;

5592 i‡(
	`wl_cfg80211_b˙_brögup_≠
(
dev
, &
õs
, 
dev_rﬁe
, 
bssidx
) < 0) {

5593 
	`WL_ERR
(("Beacon bring up AP/GO failed \n"));

5594 
Áû
;

5597 i‡(
	`wl_gë_drv_°©us
(
wl
, 
AP_CREATED
, 
dev
)) {

5599 i‡(
	`wl_cfg80211_ho°≠d_£c
(
dev
, &
õs
, 
bssidx
) < 0) {

5600 
	`WL_ERR
(("Hostapd update sec failed \n"));

5601 
îr
 = -
EINVAL
;

5602 
Áû
;

5607 i‡(((
dev_rﬁe
 =
NL80211_IFTYPE_P2P_GO
) ||

5608 (
dev_rﬁe
 =
NL80211_IFTYPE_AP
)Ë&& (
õs
.
wps_õ
 !
NULL
)) {

5609 
	`wl_vÆid©e_wps_õ
((*Ë
õs
.
wps_õ
, ies.
wps_õ_Àn
, &
pbc
);

5610 i‡(
pbc
)

5611 
	`wl_add_ªmove_evítmsg
(
dev
, 
WLC_E_PROBREQ_MSG
, 
åue
);

5614 
	`WL_DBG
(("** ADD/SET beacon done **\n"));

5616 
Áû
:

5617 i‡(
îr
) {

5618 
	`WL_ERR
(("ADD/SET beacon failed\n"));

5619 
	`wldev_iov¨_£töt
(
dev
, "mpc", 1);

5621  
îr
;

5623 
	}
}

5626 #ifde‡
WL_SCHED_SCAN


5627 
	#PNO_TIME
 30

	)

5628 
	#PNO_REPEAT
 4

	)

5629 
	#PNO_FREQ_EXPO_MAX
 2

	)

5630 
	$wl_cfg80211_sched_sˇn_°¨t
(
wùhy
 *wiphy,

5631 
√t_devi˚
 *
dev
,

5632 
cfg80211_sched_sˇn_ªque°
 *
ªque°
)

5634 
ush‹t
 
≤o_time
 = 
PNO_TIME
;

5635 
≤o_ª≥©
 = 
PNO_REPEAT
;

5636 
≤o_‰eq_expo_max
 = 
PNO_FREQ_EXPO_MAX
;

5637 
wlc_ssid_t
 
ssids_loˇl
[
MAX_PFN_LIST_COUNT
];

5638 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

5639 
cfg80211_ssid
 *
ssid
 = 
NULL
;

5640 
ssid_cou¡
 = 0;

5641 
i
;

5642 
ªt
 = 0;

5644 
	`WL_DBG
(("Enter \n"));

5645 
	`WL_PNO
((">>> SCHED SCAN START\n"));

5646 
	`WL_PNO
(("EnterÇ_match_sets:%dÇ_ssids:%d \n",

5647 
ªque°
->
n_m©ch_£ts
,Ñeque°->
n_ssids
));

5648 
	`WL_PNO
(("ssids:%dÖno_time:%dÖno_repeat:%dÖno_freq:%d \n",

5649 
ªque°
->
n_ssids
, 
≤o_time
, 
≤o_ª≥©
, 
≤o_‰eq_expo_max
));

5652 i‡(!
ªque°
 || !ªque°->
n_ssids
 || !ªque°->
n_m©ch_£ts
) {

5653 
	`WL_ERR
(("InvÆid sched sˇ¿ªq!!Ç_ssids:%d \n", 
ªque°
->
n_ssids
));

5654  -
EINVAL
;

5657 
	`mem£t
(&
ssids_loˇl
, 0, (ssids_local));

5659 i‡(
ªque°
->
n_m©ch_£ts
 > 0) {

5660 
i
 = 0; i < 
ªque°
->
n_m©ch_£ts
; i++) {

5661 
ssid
 = &
ªque°
->
m©ch_£ts
[
i
].ssid;

5662 
	`mem˝y
(
ssids_loˇl
[
i
].
SSID
, 
ssid
->ssid, ssid->
ssid_Àn
);

5663 
ssids_loˇl
[
i
].
SSID_Àn
 = 
ssid
->
ssid_Àn
;

5664 
	`WL_PNO
((">>> PNO fûã∏£àf‹ ssid (%sË\n", 
ssid
->ssid));

5665 
ssid_cou¡
++;

5669 i‡(
ªque°
->
n_ssids
 > 0) {

5670 
i
 = 0; i < 
ªque°
->
n_ssids
; i++) {

5672 
	`WL_PNO
((">>> A˘ivêsˇ¿ªq f‹ ssid (%sË\n", 
ªque°
->
ssids
[
i
].
ssid
));

5680 i‡(
ssid_cou¡
) {

5681 i‡((
ªt
 = 
	`dhd_dev_≤o_£t
(
dev
, 
ssids_loˇl
, 
ªque°
->
n_m©ch_£ts
,

5682 
≤o_time
, 
≤o_ª≥©
, 
≤o_‰eq_expo_max
)) < 0) {

5683 
	`WL_ERR
(("PNO sëu∞Áûed!!Ñë=%d \n", 
ªt
));

5684  -
EINVAL
;

5688 i‡(
	`dhd_dev_≤o_íabÀ
(
dev
, 1) < 0) {

5689 
	`WL_ERR
(("PNOÉ«bÀ faûed!!Ñë=%d \n", 
ªt
));

5690  -
EINVAL
;

5692 
wl
->
sched_sˇn_ªq
 = 
ªque°
;

5694  -
EINVAL
;

5698 
	}
}

5700 
	$wl_cfg80211_sched_sˇn_°›
(
wùhy
 *wùhy, 
√t_devi˚
 *
dev
)

5702 
wl_¥iv
 *
wl
 = 
	`wùhy_¥iv
(
wùhy
);

5704 
	`WL_DBG
(("Enter \n"));

5705 
	`WL_PNO
((">>> SCHED SCAN STOP\n"));

5707 i‡(
	`dhd_dev_≤o_íabÀ
(
dev
, 0) < 0)

5708 
	`WL_ERR
(("PNO disable failed"));

5710 i‡(
	`dhd_dev_≤o_ª£t
(
dev
) < 0)

5711 
	`WL_ERR
(("PNOÑeset failed"));

5713 i‡(
wl
->
sˇn_ªque°
 && wl->
sched_sˇn_ru¬ög
) {

5714 
	`WL_PNO
((">>> Sched scanÑunning. Aborting it..\n"));

5715 
	`wl_nŸify_esˇn_com∂ëe
(
wl
, 
dev
, 
åue
,Årue);

5718 
wl
->
sched_sˇn_ªq
 = 
NULL
;

5719 
wl
->
sched_sˇn_ru¬ög
 = 
FALSE
;

5722 
	}
}

5725 
cfg80211_›s
 
	gwl_cfg80211_›s
 = {

5726 .
add_vútuÆ_ötf
 = 
wl_cfg80211_add_vútuÆ_iÁ˚
,

5727 .
	gdñ_vútuÆ_ötf
 = 
wl_cfg80211_dñ_vútuÆ_iÁ˚
,

5728 .
	gch™ge_vútuÆ_ötf
 = 
wl_cfg80211_ch™ge_vútuÆ_iÁ˚
,

5729 .
	gsˇn
 = 
wl_cfg80211_sˇn
,

5730 .
	g£t_wùhy_∑øms
 = 
wl_cfg80211_£t_wùhy_∑øms
,

5731 .
	gjoö_ibss
 = 
wl_cfg80211_joö_ibss
,

5732 .
	gÀave_ibss
 = 
wl_cfg80211_Àave_ibss
,

5733 .
	ggë_°©i⁄
 = 
wl_cfg80211_gë_°©i⁄
,

5734 .
	g£t_tx_powî
 = 
wl_cfg80211_£t_tx_powî
,

5735 .
	ggë_tx_powî
 = 
wl_cfg80211_gë_tx_powî
,

5736 .
	gadd_key
 = 
wl_cfg80211_add_key
,

5737 .
	gdñ_key
 = 
wl_cfg80211_dñ_key
,

5738 .
	ggë_key
 = 
wl_cfg80211_gë_key
,

5739 .
	g£t_deÁu…_key
 = 
wl_cfg80211_c⁄fig_deÁu…_key
,

5740 .
	g£t_deÁu…_mgmt_key
 = 
wl_cfg80211_c⁄fig_deÁu…_mgmt_key
,

5741 .
	g£t_powî_mgmt
 = 
wl_cfg80211_£t_powî_mgmt
,

5742 .
	gc⁄√˘
 = 
wl_cfg80211_c⁄√˘
,

5743 .
	gdisc⁄√˘
 = 
wl_cfg80211_disc⁄√˘
,

5744 .
	gsu•íd
 = 
wl_cfg80211_su•íd
,

5745 .
	gªsume
 = 
wl_cfg80211_ªsume
,

5746 .
	g£t_pmkß
 = 
wl_cfg80211_£t_pmkß
,

5747 .
	gdñ_pmkß
 = 
wl_cfg80211_dñ_pmkß
,

5748 .
	gÊush_pmkß
 = 
wl_cfg80211_Êush_pmkß
,

5749 .
	gªmaö_⁄_ch™√l
 = 
wl_cfg80211_ªmaö_⁄_ch™√l
,

5750 .
	gˇn˚l_ªmaö_⁄_ch™√l
 = 
wl_cfg80211_ˇn˚l_ªmaö_⁄_ch™√l
,

5751 .
	gmgmt_tx
 = 
wl_cfg80211_mgmt_tx
,

5752 .
	gmgmt_‰ame_ªgi°î
 = 
wl_cfg80211_mgmt_‰ame_ªgi°î
,

5753 .
	gch™ge_bss
 = 
wl_cfg80211_ch™ge_bss
,

5754 .
	g£t_ch™√l
 = 
wl_cfg80211_£t_ch™√l
,

5755 #i‡
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(3, 4, 0)

5756 .
	g£t_bóc⁄
 = 
wl_cfg80211_add_£t_bóc⁄
,

5757 .
	gadd_bóc⁄
 = 
wl_cfg80211_add_£t_bóc⁄
,

5759 .
	gch™ge_bóc⁄
 = 
wl_cfg80211_ch™ge_bóc⁄
,

5760 .
	g°¨t_≠
 = 
wl_cfg80211_°¨t_≠
,

5761 .
	g°›_≠
 = 
wl_cfg80211_°›_≠
,

5763 #ifde‡
WL_SCHED_SCAN


5764 .
	gsched_sˇn_°¨t
 = 
wl_cfg80211_sched_sˇn_°¨t
,

5765 .
	gsched_sˇn_°›
 = 
wl_cfg80211_sched_sˇn_°›
,

5767 #i‡
deföed
(
WL_SUPPORT_BACKPORTED_KPATCHES
Ë|| (
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(3, \

5769 .
	gdñ_°©i⁄
 = 
wl_cfg80211_dñ_°©i⁄
,

5770 .
	gmgmt_tx_ˇn˚l_waô
 = 
wl_cfg80211_mgmt_tx_ˇn˚l_waô
,

5774 
s32
 
	$wl_mode_to_∆80211_i·y≥
(
s32
 
mode
)

5776 
s32
 
îr
 = 0;

5778 
mode
) {

5779 
WL_MODE_BSS
:

5780  
NL80211_IFTYPE_STATION
;

5781 
WL_MODE_IBSS
:

5782  
NL80211_IFTYPE_ADHOC
;

5783 
WL_MODE_AP
:

5784  
NL80211_IFTYPE_AP
;

5786  
NL80211_IFTYPE_UNSPECIFIED
;

5789  
îr
;

5790 
	}
}

5793 
	$wl_cfg80211_ªg_nŸifõr
(

5794 
wùhy
 *wiphy,

5795 
ªguœt‹y_ªque°
 *
ªque°
)

5797 
wl_¥iv
 *
wl
 = (wl_¥iv *)
	`wùhy_¥iv
(
wùhy
);

5798 
wl_cou¡ry_t
 
c•ec
 = {{0}, 0, {0} };

5799 
ªt
 = 0;

5801 i‡(!
ªque°
 || !
wl
) {

5802 
	`WL_ERR
(("Invalidárg\n"));

5803  -
EINVAL
;

5806 
	`WL_DBG
(("ccode: %c%c Initiator: %d\n",

5807 
ªque°
->
Æpha2
[0],Ñeque°->Æpha2[1],Ñeque°->
öôüt‹
));

5810 i‡(
ªque°
->
öôüt‹
 !
NL80211_REGDOM_SET_BY_USER
) {

5811 
	`WL_ERR
(("reg_notifier for intiator:%dÇot supported \n",

5812 
ªque°
->
öôüt‹
));

5813  -
ENOTSUPP
;

5816 i‡(
ªque°
->
Æpha2
[0] == '0' &&Ñequest->alpha2[1] == '0') {

5818 
	`WL_ERR
(("World domain. Setting XY/4 \n"));

5819 
	`°∫˝y
(
c•ec
.
cou¡ry_abbªv
, "XY", 
	`°æí
("XY"));

5820 
c•ec
.
ªv
 = 4;

5822 
	`mem˝y
(
c•ec
.
cou¡ry_abbªv
, 
ªque°
->
Æpha2
, 2);

5823 
c•ec
.
cou¡ry_abbªv
[3] = '\0';

5824 
c•ec
.
ªv
 = -1;

5827 i‡((
ªt
 = 
	`wldev_iov¨_£tbuf
(
	`wl_to_¥mry_ndev
(
wl
), "cou¡ry", (*)&
c•ec
,

5828 (
c•ec
), 
wl
->
io˘l_buf
, 
WLC_IOCTL_SMLEN
, 
NULL
)) < 0) {

5829 
	`WL_ERR
(("£àcou¡ry Faûed :%d\n", 
ªt
));

5830 
exô
;

5833 i‡((
ªt
 = 
	`wl_upd©e_wùhyb™ds
(
wl
, 
Ál£
)) < 0) {

5834 
	`WL_ERR
(("wl_update_wiphybands failed\n"));

5835 
exô
;

5838 
	`WL_DBG
(("%s: set country '%s/%d' done\n",

5839 
__FUNCTION__
, 
c•ec
.
cou¡ry_abbªv
, c•ec.
ªv
));

5841 
exô
:

5842  
ªt
;

5843 
	}
}

5845 
s32
 
	$wl_£tup_wùhy
(
wúñess_dev
 *
wdev
, 
devi˚
 *
sdiofunc_dev
)

5847 
s32
 
îr
 = 0;

5848 
wdev
->
wùhy
 =

5849 
	`wùhy_√w
(&
wl_cfg80211_›s
, (
wl_¥iv
));

5850 i‡(
	`u∆ikñy
(!
wdev
->
wùhy
)) {

5851 
	`WL_ERR
(("CouldnÇotállocate wiphy device\n"));

5852 
îr
 = -
ENOMEM
;

5853  
îr
;

5855 
	`£t_wùhy_dev
(
wdev
->
wùhy
, 
sdiofunc_dev
);

5856 
wdev
->
wùhy
->
max_sˇn_õ_Àn
 = 
WL_SCAN_IE_LEN_MAX
;

5858 
wdev
->
wùhy
->
max_sˇn_ssids
 = 
WL_SCAN_PARAMS_SSID_MAX
;

5859 
wdev
->
wùhy
->
max_num_pmkids
 = 
WL_NUM_PMKIDS_MAX
;

5860 #ifde‡
WL_SCHED_SCAN


5861 
wdev
->
wùhy
->
max_sched_sˇn_ssids
 = 
MAX_PFN_LIST_COUNT
;

5862 
wdev
->
wùhy
->
max_m©ch_£ts
 = 
MAX_PFN_LIST_COUNT
;

5863 
wdev
->
wùhy
->
max_sched_sˇn_õ_Àn
 = 
WL_SCAN_IE_LEN_MAX
;

5864 
wdev
->
wùhy
->
Êags
 |
WIPHY_FLAG_SUPPORTS_SCHED_SCAN
;

5866 
wdev
->
wùhy
->
öãrÁ˚_modes
 =

5867 
	`BIT
(
NL80211_IFTYPE_STATION
)

5868 #i‡!(
	`deföed
(
WLP2P
Ë&& deföed(
WL_ENABLE_P2P_IF
))

5869 | 
	`BIT
(
NL80211_IFTYPE_MONITOR
)

5871 | 
	`BIT
(
NL80211_IFTYPE_AP
);

5873 
wdev
->
wùhy
->
b™ds
[
IEEE80211_BAND_2GHZ
] = &
__wl_b™d_2ghz
;

5875 
wdev
->
wùhy
->
sig«l_ty≥
 = 
CFG80211_SIGNAL_TYPE_MBM
;

5876 
wdev
->
wùhy
->
cùhî_suôes
 = 
__wl_cùhî_suôes
;

5877 
wdev
->
wùhy
->
n_cùhî_suôes
 = 
	`ARRAY_SIZE
(
__wl_cùhî_suôes
);

5878 
wdev
->
wùhy
->
max_ªmaö_⁄_ch™√l_duøti⁄
 = 5000;

5879 
wdev
->
wùhy
->
mgmt_°y≥s
 = 
wl_cfg80211_deÁu…_mgmt_°y≥s
;

5880 #i‚de‡
WL_POWERSAVE_DISABLED


5881 
wdev
->
wùhy
->
Êags
 |
WIPHY_FLAG_PS_ON_BY_DEFAULT
;

5883 
wdev
->
wùhy
->
Êags
 &~
WIPHY_FLAG_PS_ON_BY_DEFAULT
;

5885 
wdev
->
wùhy
->
Êags
 |
WIPHY_FLAG_NETNS_OK
 |

5886 
WIPHY_FLAG_4ADDR_AP
 |

5887 #i‡
LINUX_VERSION_CODE
 <
	`KERNEL_VERSION
(2, 6, 39)

5888 
WIPHY_FLAG_SUPPORTS_SEPARATE_DEFAULT_KEYS
 |

5890 
WIPHY_FLAG_4ADDR_STATION
;

5900 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(3, 2, 0)

5903 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(3, 3, 0)

5904 
wdev
->
wùhy
->
Êags
 |
WIPHY_FLAG_HAS_REMAIN_ON_CHANNEL
 |

5905 
WIPHY_FLAG_OFFCHAN_TX
;

5907 #i‡
	`deföed
(
WL_SUPPORT_BACKPORTED_KPATCHES
Ë|| (
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(3, \

5912 
wdev
->
wùhy
->
Êags
 |
WIPHY_FLAG_HAVE_AP_SME
;

5915 
wdev
->
wùhy
->
ªg_nŸifõr
 = 
wl_cfg80211_ªg_nŸifõr
;

5917 
	`WL_DBG
(("Registering customÑegulatory)\n"));

5918 
wdev
->
wùhy
->
Êags
 |
WIPHY_FLAG_CUSTOM_REGULATORY
;

5919 
	`wùhy_≠∂y_cu°om_ªguœt‹y
(
wdev
->
wùhy
, &
brcm_ªgdom
);

5921 
îr
 = 
	`wùhy_ªgi°î
(
wdev
->
wùhy
);

5922 i‡(
	`u∆ikñy
(
îr
 < 0)) {

5923 
	`WL_ERR
(("Could¿nŸÑegi°î wùhy devi˚ (%d)\n", 
îr
));

5924 
	`wùhy_‰ì
(
wdev
->
wùhy
);

5926  
îr
;

5927 
	}
}

5929 
	$wl_‰ì_wdev
(
wl_¥iv
 *
wl
)

5931 
wúñess_dev
 *
wdev
 = 
wl
->wdev;

5932 
wùhy
 *wiphy;

5933 i‡(!
wdev
) {

5934 
	`WL_ERR
(("wdev is invalid\n"));

5937 
wùhy
 = 
wdev
->wiphy;

5938 
	`wùhy_uƒegi°î
(
wdev
->
wùhy
);

5939 
wdev
->
wùhy
->
dev
.
∑ª¡
 = 
NULL
;

5941 
	`wl_dñëe_Æl_√töfo
(
wl
);

5942 
	`wùhy_‰ì
(
wùhy
);

5946 
	}
}

5948 
s32
 
	$wl_öf‹m_bss
(
wl_¥iv
 *
wl
)

5950 
wl_sˇn_ªsu…s
 *
bss_li°
;

5951 
wl_bss_öfo
 *
bi
 = 
NULL
;

5952 
s32
 
îr
 = 0;

5953 
s32
 
i
;

5955 
bss_li°
 = 
wl
->bss_list;

5956 
	`WL_DBG
(("sˇ¬ed AP cou¡ (%d)\n", 
bss_li°
->
cou¡
));

5957 
bi
 = 
	`√xt_bss
(
bss_li°
, bi);

5958 
	`f‹_óch_bss
(
bss_li°
, 
bi
, 
i
) {

5959 
îr
 = 
	`wl_öf‹m_sögÀ_bss
(
wl
, 
bi
, 0);

5960 i‡(
	`u∆ikñy
(
îr
))

5963  
îr
;

5964 
	}
}

5966 
s32
 
	$wl_öf‹m_sögÀ_bss
(
wl_¥iv
 *
wl
, 
wl_bss_öfo
 *
bi
, 
u8
 
is_rﬂm_d⁄e
)

5968 
wùhy
 *wùhy = 
	`wl_to_wùhy
(
wl
);

5969 
õì80211_mgmt
 *
mgmt
;

5970 
õì80211_ch™√l
 *
ch™√l
;

5971 
õì80211_suµ‹ãd_b™d
 *
b™d
;

5972 
wl_cfg80211_bss_öfo
 *
nŸif_bss_öfo
;

5973 
wl_sˇn_ªq
 *
§
 = 
	`wl_to_§
(
wl
);

5974 
bóc⁄_¥obîe•
 *beacon_proberesp;

5975 
cfg80211_bss
 *
cbss
 = 
NULL
;

5976 
s32
 
mgmt_ty≥
;

5977 
s32
 
sig«l
;

5978 
u32
 
‰eq
;

5979 
s32
 
îr
 = 0;

5980 
gÂ_t
 
aÊags
;

5981 
u8
 *
õ_off£t
 = 
NULL
;

5983 i‡(
	`u∆ikñy
(
	`dtoh32
(
bi
->
Àngth
Ë> 
WL_BSS_INFO_MAX
)) {

5984 
	`WL_DBG
(("Beacon isÜargerÅhan buffer. Discarding\n"));

5985  
îr
;

5987 
aÊags
 = (
	`ö_©omic
()Ë? 
GFP_ATOMIC
 : 
GFP_KERNEL
;

5988 
nŸif_bss_öfo
 = 
	`kzÆloc
((*nŸif_bss_öfoË+ (*
mgmt
)

5989 - (
u8
Ë+ 
WL_BSS_INFO_MAX
, 
aÊags
);

5990 i‡(
	`u∆ikñy
(!
nŸif_bss_öfo
)) {

5991 
	`WL_ERR
(("notif_bss_infoálloc failed\n"));

5992  -
ENOMEM
;

5994 
mgmt
 = (
õì80211_mgmt
 *)
nŸif_bss_öfo
->
‰ame_buf
;

5995 
nŸif_bss_öfo
->
ch™√l
 =

5996 
bi
->
˘l_ch
 ? bi->˘l_ch : 
	`CHSPEC_CHANNEL
(
	`wl_ch•ec_drivî_to_ho°
(bi->
ch™•ec
));

5998 i‡(
nŸif_bss_öfo
->
ch™√l
 <
CH_MAX_2G_CHANNEL
)

5999 
b™d
 = 
wùhy
->
b™ds
[
IEEE80211_BAND_2GHZ
];

6001 
b™d
 = 
wùhy
->
b™ds
[
IEEE80211_BAND_5GHZ
];

6002 i‡(!
b™d
) {

6003 
	`WL_ERR
(("No valid band"));

6004 
	`k‰ì
(
nŸif_bss_öfo
);

6005  -
EINVAL
;

6007 
nŸif_bss_öfo
->
rssi
 = 
	`dtoh16
(
bi
->
RSSI
Ë+ 
RSSI_OFFSET
;

6008 
	`mem˝y
(
mgmt
->
bssid
, &
bi
->
BSSID
, 
ETHER_ADDR_LEN
);

6009 
mgmt_ty≥
 = 
wl
->
a˘ive_sˇn
 ?

6010 
IEEE80211_STYPE_PROBE_RESP
 : 
IEEE80211_STYPE_BEACON
;

6011 i‡(!
	`memcmp
(
bi
->
SSID
, 
§
->
ssid
.SSID, bi->
SSID_Àn
)) {

6012 
mgmt
->
‰ame_c⁄åﬁ
 = 
	`˝u_to_À16
(
IEEE80211_FTYPE_MGMT
 | 
mgmt_ty≥
);

6014 
bóc⁄_¥obîe•
 = 
wl
->
a˘ive_sˇn
 ?

6015 (
bóc⁄_¥obîe•
 *)&
mgmt
->
u
.
¥obe_ª•
 :

6016 (
bóc⁄_¥obîe•
 *)&
mgmt
->
u
.
bóc⁄
;

6017 
bóc⁄_¥obîe•
->
time°amp
 = 0;

6018 
bóc⁄_¥obîe•
->
bóc⁄_öt
 = 
	`˝u_to_À16
(
bi
->
bóc⁄_≥riod
);

6019 
bóc⁄_¥obîe•
->
ˇ∑b_öfo
 = 
	`˝u_to_À16
(
bi
->
ˇ∑bûôy
);

6020 
	`wl_r°_õ
(
wl
);

6022 
õ_off£t
 = ((
u8
 *Ë
bi
) + bi->ie_offset;

6024 i‡(
is_rﬂm_d⁄e
 && (()(*(
õ_off£t
)Ë=
WLAN_EID_SSID
 &&

6025 (()(*(
õ_off£t
+1)) == 0 || ()(*(ie_offset+2)) == 0))) {

6026 
u8
 *
õ_√w_off£t
 = 
NULL
;

6027 
uöt8
 
õ_√w_Àngth
;

6029 
	`WL_ERR
(("WARÅrace: ChangingÅhe SSID Info, from beacon %d\n",

6030 
bi
->
Êags
 & 
WL_BSS_FLAGS_FROM_BEACON
));

6032 
õ_√w_off£t
 = (
u8
 *)
	`kzÆloc
(
WL_BSS_INFO_MAX
, 
GFP_KERNEL
);

6033 i‡(
õ_√w_off£t
) {

6034 *(
õ_√w_off£t
Ë
WLAN_EID_SSID
;

6035 *(
õ_√w_off£t
+1Ë
bi
->
SSID_Àn
;

6036 
	`mem˝y
(
õ_√w_off£t
+2, 
bi
->
SSID
, bi->
SSID_Àn
);

6037 
õ_√w_Àngth
 = 
bi
->
õ_Àngth
 - *(
õ_off£t
+1Ë+ bi->
SSID_Àn
;

6040 
	`mem˝y
(
õ_√w_off£t
+2 + 
bi
->
SSID_Àn
,

6041 
õ_off£t
+2 + *(ie_offset+1),

6042 
bi
->
õ_Àngth
 - 2 - *(
õ_off£t
+1));

6043 
	`wl_mrg_õ
(
wl
, 
õ_√w_off£t
, 
õ_√w_Àngth
);

6044 
	`k‰ì
(
õ_√w_off£t
);

6046 
	`wl_mrg_õ
(
wl
, ((
u8
 *Ë
bi
Ë+ bi->
õ_off£t
, bi->
õ_Àngth
);

6049 
	`wl_mrg_õ
(
wl
, ((
u8
 *Ë
bi
Ë+ bi->
õ_off£t
, bi->
õ_Àngth
);

6052 
	`wl_˝_õ
(
wl
, 
bóc⁄_¥obîe•
->
v¨übÀ
, 
WL_BSS_INFO_MAX
 -

6053 
	`off£tof
(
wl_cfg80211_bss_öfo
, 
‰ame_buf
));

6054 
nŸif_bss_öfo
->
‰ame_Àn
 = 
	`off£tof
(
õì80211_mgmt
,

6055 
u
.
bóc⁄
.
v¨übÀ
Ë+ 
	`wl_gë_õÀn
(
wl
);

6056 #i‡
LINUX_VERSION_CODE
 =
	`KERNEL_VERSION
(2, 6, 38Ë&& !
	`deföed
(
WL_COMPAT_WIRELESS
)

6057 
‰eq
 = 
	`õì80211_ch™√l_to_‰equícy
(
nŸif_bss_öfo
->
ch™√l
);

6058 ()
b™d
->band;

6060 
‰eq
 = 
	`õì80211_ch™√l_to_‰equícy
(
nŸif_bss_öfo
->
ch™√l
, 
b™d
->band);

6062 i‡(
‰eq
 == 0) {

6063 
	`WL_ERR
(("Invalid channel, failÅo chcnage channelÅo freq\n"));

6064 
	`k‰ì
(
nŸif_bss_öfo
);

6065  -
EINVAL
;

6067 
ch™√l
 = 
	`õì80211_gë_ch™√l
(
wùhy
, 
‰eq
);

6068 i‡(
	`u∆ikñy
(!
ch™√l
)) {

6069 
	`WL_ERR
(("ieee80211_get_channelÉrror\n"));

6070 
	`k‰ì
(
nŸif_bss_öfo
);

6071  -
EINVAL
;

6073 
	`WL_DBG
(("SSID : \"%s\",Ñssi %d, channel %d, capability : 0x04%x, bssid %pM"

6074 "mgmt_ty≥ %d føme_À¿%d\n", 
bi
->
SSID
,

6075 
nŸif_bss_öfo
->
rssi
,ÇŸif_bss_öfo->
ch™√l
,

6076 
mgmt
->
u
.
bóc⁄
.
ˇ∑b_öfo
, &
bi
->
BSSID
, 
mgmt_ty≥
,

6077 
nŸif_bss_öfo
->
‰ame_Àn
));

6079 
sig«l
 = 
nŸif_bss_öfo
->
rssi
 * 100;

6080 i‡(!
mgmt
->
u
.
¥obe_ª•
.
time°amp
) {

6081 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 39)

6082 
time•ec
 
ts
;

6083 
	`gë_m⁄Ÿ⁄ic_boŸtime
(&
ts
);

6084 
mgmt
->
u
.
¥obe_ª•
.
time°amp
 = ((
u64
)
ts
.
tv_£c
*1000000)

6085 + 
ts
.
tv_n£c
 / 1000;

6087 
timevÆ
 
tv
;

6088 
	`do_gëtimeofday
(&
tv
);

6089 
mgmt
->
u
.
¥obe_ª•
.
time°amp
 = ((
u64
)
tv
.
tv_£c
*1000000)

6090 + 
tv
.
tv_u£c
;

6095 
cbss
 = 
	`cfg80211_öf‹m_bss_‰ame
(
wùhy
, 
ch™√l
, 
mgmt
,

6096 
	`À16_to_˝u
(
nŸif_bss_öfo
->
‰ame_Àn
), 
sig«l
, 
aÊags
);

6097 i‡(
	`u∆ikñy
(!
cbss
)) {

6098 
	`WL_ERR
(("cfg80211_inform_bss_frameÉrror\n"));

6099 
	`k‰ì
(
nŸif_bss_öfo
);

6100  -
EINVAL
;

6103 
	`cfg80211_put_bss
(
cbss
);

6104 
	`k‰ì
(
nŸif_bss_öfo
);

6105  
îr
;

6106 
	}
}

6108 
boﬁ
 
	$wl_is_lökup
(
wl_¥iv
 *
wl
, c⁄° 
wl_evít_msg_t
 *
e
, 
√t_devi˚
 *
ndev
)

6110 
u32
 
evít
 = 
	`¡oh32
(
e
->
evít_ty≥
);

6111 
u32
 
°©us
 = 
	`¡oh32
(
e
->status);

6112 
u16
 
Êags
 = 
	`¡oh16
(
e
->flags);

6114 
	`WL_DBG
(("evíà%d, sètu†%d fœg†%x\n", 
evít
, 
°©us
, 
Êags
));

6115 i‡(
evít
 =
WLC_E_SET_SSID
) {

6116 i‡(
°©us
 =
WLC_E_STATUS_SUCCESS
) {

6117 i‡(!
	`wl_is_ibssmode
(
wl
, 
ndev
))

6118  
åue
;

6120 } i‡(
evít
 =
WLC_E_LINK
) {

6121 i‡(
Êags
 & 
WLC_EVENT_MSG_LINK
)

6122  
åue
;

6125 
	`WL_DBG
(("wl_is_linkup false\n"));

6126  
Ál£
;

6127 
	}
}

6129 
boﬁ
 
	$wl_is_lökdown
(
wl_¥iv
 *
wl
, c⁄° 
wl_evít_msg_t
 *
e
)

6131 
u32
 
evít
 = 
	`¡oh32
(
e
->
evít_ty≥
);

6132 
u16
 
Êags
 = 
	`¡oh16
(
e
->flags);

6134 i‡(
evít
 =
WLC_E_DEAUTH_IND
 ||

6135 
evít
 =
WLC_E_DISASSOC_IND
 ||

6136 
evít
 =
WLC_E_DISASSOC
 ||

6137 
evít
 =
WLC_E_DEAUTH
) {

6138 #i‡(
WL_DBG_LEVEL
 > 0)

6139 
	`WL_ERR
(("Lök dow¿Rós⁄ : WLC_E_%s\n", 
wl_dbg_e°r
[
evít
]));

6141  
åue
;

6142 } i‡(
evít
 =
WLC_E_LINK
) {

6143 i‡(!(
Êags
 & 
WLC_EVENT_MSG_LINK
)) {

6144 #i‡(
WL_DBG_LEVEL
 > 0)

6145 
	`WL_ERR
(("Lök dow¿Rós⁄ : WLC_E_%s\n", 
wl_dbg_e°r
[
evít
]));

6147  
åue
;

6151  
Ál£
;

6152 
	}
}

6154 
boﬁ
 
	$wl_is_n⁄ëw‹k
(
wl_¥iv
 *
wl
, c⁄° 
wl_evít_msg_t
 *
e
)

6156 
u32
 
evít
 = 
	`¡oh32
(
e
->
evít_ty≥
);

6157 
u32
 
°©us
 = 
	`¡oh32
(
e
->status);

6159 i‡(
evít
 =
WLC_E_LINK
 && 
°©us
 =
WLC_E_STATUS_NO_NETWORKS
)

6160  
åue
;

6161 i‡(
evít
 =
WLC_E_SET_SSID
 && 
°©us
 !
WLC_E_STATUS_SUCCESS
)

6162  
åue
;

6164  
Ál£
;

6165 
	}
}

6172 
s32


6173 
	$wl_nŸify_c⁄√˘_°©us_≠
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
,

6174 c⁄° 
wl_evít_msg_t
 *
e
, *
d©a
)

6176 
s32
 
îr
 = 0;

6177 
u32
 
evít
 = 
	`¡oh32
(
e
->
evít_ty≥
);

6178 
u32
 
ªas⁄
 = 
	`¡oh32
(
e
->reason);

6179 
u32
 
Àn
 = 
	`¡oh32
(
e
->
d©Æí
);

6181 #i‡(
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(3, 2, 0)Ë&& !
	`deföed
(
WL_CFG80211_STA_EVENT
)

6182 
boﬁ
 
is‰ì
 = 
Ál£
;

6183 
u8
 *
mgmt_‰ame
;

6184 
u8
 
bsscfgidx
 = 
e
->bsscfgidx;

6185 
s32
 
‰eq
;

6186 
s32
 
ch™√l
;

6187 
u8
 *
body
 = 
NULL
;

6188 
u16
 
fc
 = 0;

6190 
õì80211_suµ‹ãd_b™d
 *
b™d
;

6191 
ëhî_addr
 
da
;

6192 
ëhî_addr
 
bssid
;

6193 
wùhy
 *wùhy = 
	`wl_to_wùhy
(
wl
);

6194 
ch™√l_öfo_t
 
ci
;

6196 
°©i⁄_öfo
 
söfo
;

6199 
	`WL_DBG
(("evíà%d sètu†%dÑós⁄ %d\n", 
evít
, 
	`¡oh32
(
e
->
°©us
), 
ªas⁄
));

6201 i‡(
evít
 =
WLC_E_LINK
 && 
ªas⁄
 =
WLC_E_LINK_BSSCFG_DIS
 &&

6202 
	`wl_gë_p2p_°©us
(
wl
, 
IF_DELETING
Ë&& (
ndev
 !
	`wl_to_¥mry_ndev
(wl))) {

6203 
	`wl_add_ªmove_evítmsg
(
ndev
, 
WLC_E_PROBREQ_MSG
, 
Ál£
);

6204 
	`WL_INFO
(("AP modeÜink down !! \n"));

6205 
	`com∂ëe
(&
wl
->
iÁ˚_dißbÀ
);

6209 #i‡(
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(3, 2, 0)Ë&& !
	`deföed
(
WL_CFG80211_STA_EVENT
)

6210 
	`WL_DBG
(("Enter \n"));

6211 i‡(!
Àn
 && (
evít
 =
WLC_E_DEAUTH
)) {

6212 
Àn
 = 2;

6213 
d©a
 = &
ªas⁄
;

6215 i‡(
Àn
) {

6216 
body
 = 
	`kzÆloc
(
Àn
, 
GFP_KERNEL
);

6218 i‡(
body
 =
NULL
) {

6219 
	`WL_ERR
(("wl_notify_connect_status: FailedÅoállocate body\n"));

6220  
WL_INVALID
;

6223 
	`mem£t
(&
bssid
, 0, 
ETHER_ADDR_LEN
);

6224 
	`WL_DBG
(("E¡îÉvíà%dÇdev %p\n", 
evít
, 
ndev
));

6225 i‡(
	`wl_gë_mode_by_√tdev
(
wl
, 
ndev
Ë=
WL_INVALID
) {

6226 
	`k‰ì
(
body
);

6227  
WL_INVALID
;

6229 i‡(
Àn
)

6230 
	`mem˝y
(
body
, 
d©a
, 
Àn
);

6232 
	`wldev_iov¨_gëbuf_bsscfg
(
ndev
, "cur_etheraddr",

6233 
NULL
, 0, 
wl
->
io˘l_buf
, 
WLC_IOCTL_SMLEN
, 
bsscfgidx
, &wl->
io˘l_buf_sync
);

6234 
	`mem˝y
(
da
.
o˘ë
, 
wl
->
io˘l_buf
, 
ETHER_ADDR_LEN
);

6235 
îr
 = 
	`wldev_io˘l
(
ndev
, 
WLC_GET_BSSID
, &
bssid
, 
ETHER_ADDR_LEN
, 
Ál£
);

6236 
evít
) {

6237 
WLC_E_ASSOC_IND
:

6238 
fc
 = 
FC_ASSOC_REQ
;

6240 
WLC_E_REASSOC_IND
:

6241 
fc
 = 
FC_REASSOC_REQ
;

6243 
WLC_E_DISASSOC_IND
:

6244 
fc
 = 
FC_DISASSOC
;

6246 
WLC_E_DEAUTH_IND
:

6247 
fc
 = 
FC_DISASSOC
;

6249 
WLC_E_DEAUTH
:

6250 
fc
 = 
FC_DISASSOC
;

6253 
fc
 = 0;

6254 
exô
;

6256 i‡((
îr
 = 
	`wldev_io˘l
(
ndev
, 
WLC_GET_CHANNEL
, &
ci
, (ci), 
Ál£
))) {

6257 
	`k‰ì
(
body
);

6258  
îr
;

6261 
ch™√l
 = 
	`dtoh32
(
ci
.
hw_ch™√l
);

6262 i‡(
ch™√l
 <
CH_MAX_2G_CHANNEL
)

6263 
b™d
 = 
wùhy
->
b™ds
[
IEEE80211_BAND_2GHZ
];

6265 
b™d
 = 
wùhy
->
b™ds
[
IEEE80211_BAND_5GHZ
];

6266 i‡(!
b™d
) {

6267 
	`WL_ERR
(("No valid band"));

6268 i‡(
body
)

6269 
	`k‰ì
(
body
);

6270  -
EINVAL
;

6272 #i‡
LINUX_VERSION_CODE
 =
	`KERNEL_VERSION
(2, 6, 38Ë&& !
	`deföed
(
WL_COMPAT_WIRELESS
)

6273 
‰eq
 = 
	`õì80211_ch™√l_to_‰equícy
(
ch™√l
);

6274 ()
b™d
->band;

6276 
‰eq
 = 
	`õì80211_ch™√l_to_‰equícy
(
ch™√l
, 
b™d
->band);

6279 
îr
 = 
	`wl_‰ame_gë_mgmt
(
fc
, &
da
, &
e
->
addr
, &
bssid
,

6280 &
mgmt_‰ame
, &
Àn
, 
body
);

6281 i‡(
îr
 < 0)

6282 
exô
;

6283 
is‰ì
 = 
åue
;

6285 i‡(
evít
 =
WLC_E_ASSOC_IND
 && 
ªas⁄
 =
DOT11_SC_SUCCESS
) {

6286 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(3, 4, 0)

6287 
	`cfg80211_rx_mgmt
(
ndev
, 
‰eq
, 0, 
mgmt_‰ame
, 
Àn
, 
GFP_ATOMIC
);

6289 
	`cfg80211_rx_mgmt
(
ndev
, 
‰eq
, 
mgmt_‰ame
, 
Àn
, 
GFP_ATOMIC
);

6291 } i‡(
evít
 =
WLC_E_DISASSOC_IND
) {

6292 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(3, 4, 0)

6293 
	`cfg80211_rx_mgmt
(
ndev
, 
‰eq
, 0, 
mgmt_‰ame
, 
Àn
, 
GFP_ATOMIC
);

6295 
	`cfg80211_rx_mgmt
(
ndev
, 
‰eq
, 
mgmt_‰ame
, 
Àn
, 
GFP_ATOMIC
);

6297 } i‡((
evít
 =
WLC_E_DEAUTH_IND
Ë|| (evíà=
WLC_E_DEAUTH
)) {

6298 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(3, 4, 0)

6299 
	`cfg80211_rx_mgmt
(
ndev
, 
‰eq
, 0, 
mgmt_‰ame
, 
Àn
, 
GFP_ATOMIC
);

6301 
	`cfg80211_rx_mgmt
(
ndev
, 
‰eq
, 
mgmt_‰ame
, 
Àn
, 
GFP_ATOMIC
);

6305 
exô
:

6306 i‡(
is‰ì
)

6307 
	`k‰ì
(
mgmt_‰ame
);

6308 i‡(
body
)

6309 
	`k‰ì
(
body
);

6310  
îr
;

6312 
söfo
.
fûÀd
 = 0;

6313 i‡(((
evít
 =
WLC_E_ASSOC_IND
Ë|| (evíà=
WLC_E_REASSOC_IND
)) &&

6314 
ªas⁄
 =
DOT11_SC_SUCCESS
) {

6315 
söfo
.
fûÀd
 = 
STATION_INFO_ASSOC_REQ_IES
;

6316 i‡(!
d©a
) {

6317 
	`WL_ERR
(("No IEsÖresent in ASSOC/REASSOC_IND"));

6318  -
EINVAL
;

6320 
söfo
.
assoc_ªq_õs
 = 
d©a
;

6321 
söfo
.
assoc_ªq_õs_Àn
 = 
Àn
;

6322 
	`cfg80211_√w_°a
(
ndev
, 
e
->
addr
.
o˘ë
, &
söfo
, 
GFP_ATOMIC
);

6323 } i‡(
evít
 =
WLC_E_DISASSOC_IND
) {

6324 
	`cfg80211_dñ_°a
(
ndev
, 
e
->
addr
.
o˘ë
, 
GFP_ATOMIC
);

6325 } i‡((
evít
 =
WLC_E_DEAUTH_IND
Ë|| (evíà=
WLC_E_DEAUTH
)) {

6326 
	`cfg80211_dñ_°a
(
ndev
, 
e
->
addr
.
o˘ë
, 
GFP_ATOMIC
);

6329  
îr
;

6330 
	}
}

6332 
s32


6333 
	$wl_gë_auth_assoc_°©us
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
,

6334 c⁄° 
wl_evít_msg_t
 *
e
)

6336 
u32
 
ªas⁄
 = 
	`¡oh32
(
e
->reason);

6337 
u32
 
evít
 = 
	`¡oh32
(
e
->
evít_ty≥
);

6338 
wl_£curôy
 *
£c
 = 
	`wl_ªad_¥of
(
wl
, 
ndev
, 
WL_PROF_SEC
);

6339 
	`WL_DBG
(("evíàty≥ : %d,Ñós⁄ : %d\n", 
evít
, 
ªas⁄
));

6340 i‡(
£c
) {

6341 
evít
) {

6342 
WLC_E_ASSOC
:

6343 
WLC_E_AUTH
:

6344 
£c
->
auth_assoc_ªs_°©us
 = 
ªas⁄
;

6349 
	`WL_ERR
(("sec is NULL\n"));

6351 
	}
}

6353 
s32


6354 
	$wl_nŸify_c⁄√˘_°©us
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
,

6355 c⁄° 
wl_evít_msg_t
 *
e
, *
d©a
)

6357 
boﬁ
 
a˘
;

6358 
s32
 
îr
 = 0;

6359 
u32
 
evít
 = 
	`¡oh32
(
e
->
evít_ty≥
);

6361 i‡(
	`wl_gë_mode_by_√tdev
(
wl
, 
ndev
Ë=
WL_MODE_AP
) {

6362 
	`wl_nŸify_c⁄√˘_°©us_≠
(
wl
, 
ndev
, 
e
, 
d©a
);

6364 
	`WL_DBG
(("wl_notify_connect_status :Évent %d status : %dÇdev %p\n",

6365 
	`¡oh32
(
e
->
evít_ty≥
),Çtoh32”->
°©us
), 
ndev
));

6366 i‡(
evít
 =
WLC_E_ASSOC
 ||Évíà=
WLC_E_AUTH
) {

6367 
	`wl_gë_auth_assoc_°©us
(
wl
, 
ndev
, 
e
);

6368  
îr
;

6370 i‡(
	`wl_is_lökup
(
wl
, 
e
, 
ndev
)) {

6371 
	`wl_lök_up
(
wl
);

6372 
a˘
 = 
åue
;

6373 i‡(
	`wl_is_ibssmode
(
wl
, 
ndev
)) {

6374 
	`¥ötk
("cfg80211_ibss_joined\n");

6375 
	`cfg80211_ibss_joöed
(
ndev
, (
s8
 *)&
e
->
addr
,

6376 
GFP_KERNEL
);

6377 
	`WL_DBG
(("joined in IBSSÇetwork\n"));

6379 i‡(!
	`wl_gë_drv_°©us
(
wl
, 
DISCONNECTING
, 
ndev
)) {

6380 
	`¥ötk
("wl_bss_c⁄√˘_d⁄êsuc˚eded wôh " 
MACDBG
 "\n",

6381 
	`MAC2STRDBG
((
u8
*)(&
e
->
addr
)));

6382 
	`wl_bss_c⁄√˘_d⁄e
(
wl
, 
ndev
, 
e
, 
d©a
, 
åue
);

6383 
	`WL_DBG
(("joined in BSSÇetwork \"%s\"\n",

6384 ((
wlc_ssid
 *)

6385 
	`wl_ªad_¥of
(
wl
, 
ndev
, 
WL_PROF_SSID
))->
SSID
));

6388 
	`wl_upd©e_¥of
(
wl
, 
ndev
, 
e
, &
a˘
, 
WL_PROF_ACT
);

6389 
	`wl_upd©e_¥of
(
wl
, 
ndev
, 
NULL
, (*)&
e
->
addr
, 
WL_PROF_BSSID
);

6391 } i‡(
	`wl_is_lökdown
(
wl
, 
e
)) {

6392 i‡(
wl
->
sˇn_ªque°
) {

6393 i‡(
wl
->
esˇn_⁄
) {

6394 
	`wl_nŸify_esˇn_com∂ëe
(
wl
, 
ndev
, 
åue
,Årue);

6396 
	`dñ_timî_sync
(&
wl
->
sˇn_timeout
);

6397 
	`wl_isˇn_ab‹ãd
(
wl
);

6400 i‡(
	`wl_gë_drv_°©us
(
wl
, 
CONNECTED
, 
ndev
)) {

6401 
scb_vÆ_t
 
scbvÆ
;

6402 
u8
 *
curbssid
 = 
	`wl_ªad_¥of
(
wl
, 
ndev
, 
WL_PROF_BSSID
);

6403 
s32
 
ªas⁄
 = 0;

6404 i‡(
evít
 =
WLC_E_DEAUTH_IND
 ||Évíà=
WLC_E_DISASSOC_IND
)

6405 
ªas⁄
 = 
	`¡oh32
(
e
->reason);

6407 
ªas⁄
 = (ªas⁄ =
WLAN_REASON_UNSPECIFIED
)? 0 :Ñeason;

6409 
	`¥ötk
("link down if %s may call cfg80211_disconnected. "

6410 "evíà: %d,Ñós⁄=%d from " 
MACDBG
 "\n",

6411 
ndev
->
«me
, 
evít
, 
	`¡oh32
(
e
->
ªas⁄
),

6412 
	`MAC2STRDBG
((
u8
*)(&
e
->
addr
)));

6413 i‡(
	`memcmp
(
curbssid
, &
e
->
addr
, 
ETHER_ADDR_LEN
) != 0) {

6414 
	`WL_ERR
(("BSSID ofÉvent isÇotÅhe connected BSSID"

6415 "(ign‹êôËcur: " 
MACDBG
 "Évent: " MACDBG"\n",

6416 
	`MAC2STRDBG
(
curbssid
), MAC2STRDBG((
u8
*)(&
e
->
addr
))));

6419 
	`wl_˛r_drv_°©us
(
wl
, 
CONNECTED
, 
ndev
);

6420 i‡(! 
	`wl_gë_drv_°©us
(
wl
, 
DISCONNECTING
, 
ndev
)) {

6424 
scbvÆ
.
vÆ
 = 
WLAN_REASON_DEAUTH_LEAVING
;

6426 
	`mem˝y
(&
scbvÆ
.
ó
, 
curbssid
, 
ETHER_ADDR_LEN
);

6427 
scbvÆ
.
vÆ
 = 
	`htod32
(scbval.val);

6428 
îr
 = 
	`wldev_io˘l
(
ndev
, 
WLC_DISASSOC
, &
scbvÆ
,

6429 (
scb_vÆ_t
), 
åue
);

6430 i‡(
îr
 < 0) {

6431 
	`WL_ERR
(("WLC_DISASSOCÉº‹ %d\n", 
îr
));

6432 
îr
 = 0;

6434 
	`cfg80211_disc⁄√˘ed
(
ndev
, 
ªas⁄
, 
NULL
, 0, 
GFP_KERNEL
);

6435 
	`wl_lök_down
(
wl
);

6436 
	`wl_öô_¥of
(
wl
, 
ndev
);

6439 i‡(
	`wl_gë_drv_°©us
(
wl
, 
CONNECTING
, 
ndev
)) {

6440 
	`¥ötk
("link down, during connecting\n");

6441 #ifde‡
ESCAN_RESULT_PATCH


6442 i‡((
	`memcmp
(
c⁄√˘_ªq_bssid
, 
brﬂd_bssid
, 
ETHER_ADDR_LEN
) == 0) ||

6443 (
	`memcmp
(&
e
->
addr
, 
brﬂd_bssid
, 
ETHER_ADDR_LEN
) == 0) ||

6444 (
	`memcmp
(&
e
->
addr
, 
c⁄√˘_ªq_bssid
, 
ETHER_ADDR_LEN
) == 0))

6447 
	`wl_bss_c⁄√˘_d⁄e
(
wl
, 
ndev
, 
e
, 
d©a
, 
Ál£
);

6449 
	`wl_˛r_drv_°©us
(
wl
, 
DISCONNECTING
, 
ndev
);

6452 i‡(
ndev
 !
	`wl_to_¥mry_ndev
(
wl
))

6453 
	`com∂ëe
(&
wl
->
iÁ˚_dißbÀ
);

6455 } i‡(
	`wl_is_n⁄ëw‹k
(
wl
, 
e
)) {

6456 
	`¥ötk
("connect failedÉvent=%dÉ->status %dÉ->reason %d \n",

6457 
evít
, ()
	`¡oh32
(
e
->
°©us
), (Ítoh32”->
ªas⁄
));

6459 i‡(
wl
->
sˇn_ªque°
) {

6460 i‡(
wl
->
esˇn_⁄
) {

6461 
	`wl_nŸify_esˇn_com∂ëe
(
wl
, 
ndev
, 
åue
,Årue);

6463 
	`dñ_timî_sync
(&
wl
->
sˇn_timeout
);

6464 
	`wl_isˇn_ab‹ãd
(
wl
);

6467 i‡(
	`wl_gë_drv_°©us
(
wl
, 
CONNECTING
, 
ndev
))

6468 
	`wl_bss_c⁄√˘_d⁄e
(
wl
, 
ndev
, 
e
, 
d©a
, 
Ál£
);

6470 
	`¥ötk
("%†nŸhög\n", 
__FUNCTION__
);

6473  
îr
;

6474 
	}
}

6476 
s32


6477 
	$wl_nŸify_rﬂmög_°©us
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
,

6478 c⁄° 
wl_evít_msg_t
 *
e
, *
d©a
)

6480 
boﬁ
 
a˘
;

6481 
s32
 
îr
 = 0;

6482 
u32
 
evít
 = 
	`be32_to_˝u
(
e
->
evít_ty≥
);

6483 
u32
 
°©us
 = 
	`be32_to_˝u
(
e
->status);

6484 
	`WL_DBG
(("Enter \n"));

6485 i‡(
evít
 =
WLC_E_ROAM
 && 
°©us
 =
WLC_E_STATUS_SUCCESS
) {

6486 i‡(
	`wl_gë_drv_°©us
(
wl
, 
CONNECTED
, 
ndev
))

6487 
	`wl_bss_rﬂmög_d⁄e
(
wl
, 
ndev
, 
e
, 
d©a
);

6489 
	`wl_bss_c⁄√˘_d⁄e
(
wl
, 
ndev
, 
e
, 
d©a
, 
åue
);

6490 
a˘
 = 
åue
;

6491 
	`wl_upd©e_¥of
(
wl
, 
ndev
, 
e
, &
a˘
, 
WL_PROF_ACT
);

6492 
	`wl_upd©e_¥of
(
wl
, 
ndev
, 
NULL
, (*)&
e
->
addr
, 
WL_PROF_BSSID
);

6494  
îr
;

6495 
	}
}

6497 
s32
 
	$wl_gë_assoc_õs
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
)

6499 
wl_assoc_öfo_t
 
assoc_öfo
;

6500 
wl_c⁄√˘_öfo
 *
c⁄n_öfo
 = 
	`wl_to_c⁄n
(
wl
);

6501 
s32
 
îr
 = 0;

6503 
	`WL_DBG
(("Enter \n"));

6504 
îr
 = 
	`wldev_iov¨_gëbuf
(
ndev
, "assoc_öfo", 
NULL
, 0, 
wl
->
exåa_buf
,

6505 
WL_ASSOC_INFO_MAX
, 
NULL
);

6506 i‡(
	`u∆ikñy
(
îr
)) {

6507 
	`WL_ERR
(("couldÇŸ gëásso¯öfÿ(%d)\n", 
îr
));

6508  
îr
;

6510 
	`mem˝y
(&
assoc_öfo
, 
wl
->
exåa_buf
, (
wl_assoc_öfo_t
));

6511 
assoc_öfo
.
ªq_Àn
 = 
	`htod32
(assoc_info.req_len);

6512 
assoc_öfo
.
ª•_Àn
 = 
	`htod32
(assoc_info.resp_len);

6513 
assoc_öfo
.
Êags
 = 
	`htod32
(assoc_info.flags);

6514 i‡(
c⁄n_öfo
->
ªq_õ_Àn
) {

6515 
c⁄n_öfo
->
ªq_õ_Àn
 = 0;

6516 
	`bzîo
(
c⁄n_öfo
->
ªq_õ
, (conn_info->req_ie));

6518 i‡(
c⁄n_öfo
->
ª•_õ_Àn
) {

6519 
c⁄n_öfo
->
ª•_õ_Àn
 = 0;

6520 
	`bzîo
(
c⁄n_öfo
->
ª•_õ
, (conn_info->resp_ie));

6522 i‡(
assoc_öfo
.
ªq_Àn
) {

6523 
îr
 = 
	`wldev_iov¨_gëbuf
(
ndev
, "assoc_ªq_õs", 
NULL
, 0, 
wl
->
exåa_buf
,

6524 
WL_ASSOC_INFO_MAX
, 
NULL
);

6525 i‡(
	`u∆ikñy
(
îr
)) {

6526 
	`WL_ERR
(("couldÇŸ gëásso¯ªq (%d)\n", 
îr
));

6527  
îr
;

6529 
c⁄n_öfo
->
ªq_õ_Àn
 = 
assoc_öfo
.
ªq_Àn
 - (
dŸ11_assoc_ªq
);

6530 i‡(
assoc_öfo
.
Êags
 & 
WLC_ASSOC_REQ_IS_REASSOC
) {

6531 
c⁄n_öfo
->
ªq_õ_Àn
 -
ETHER_ADDR_LEN
;

6533 i‡(
c⁄n_öfo
->
ªq_õ_Àn
 <
MAX_REQ_LINE
)

6534 
	`mem˝y
(
c⁄n_öfo
->
ªq_õ
, 
wl
->
exåa_buf
, c⁄n_öfo->
ªq_õ_Àn
);

6536 
	`WL_ERR
(("%s IE size %dábove max %d size \n",

6537 
__FUNCTION__
, 
c⁄n_öfo
->
ªq_õ_Àn
, 
MAX_REQ_LINE
));

6538  
îr
;

6541 
c⁄n_öfo
->
ªq_õ_Àn
 = 0;

6543 i‡(
assoc_öfo
.
ª•_Àn
) {

6544 
îr
 = 
	`wldev_iov¨_gëbuf
(
ndev
, "assoc_ª•_õs", 
NULL
, 0, 
wl
->
exåa_buf
,

6545 
WL_ASSOC_INFO_MAX
, 
NULL
);

6546 i‡(
	`u∆ikñy
(
îr
)) {

6547 
	`WL_ERR
(("couldÇŸ gëásso¯ª• (%d)\n", 
îr
));

6548  
îr
;

6550 
c⁄n_öfo
->
ª•_õ_Àn
 = 
assoc_öfo
.
ª•_Àn
 -(
dŸ11_assoc_ª•
);

6551 i‡(
c⁄n_öfo
->
ª•_õ_Àn
 <
MAX_REQ_LINE
)

6552 
	`mem˝y
(
c⁄n_öfo
->
ª•_õ
, 
wl
->
exåa_buf
, c⁄n_öfo->
ª•_õ_Àn
);

6554 
	`WL_ERR
(("%s IE size %dábove max %d size \n",

6555 
__FUNCTION__
, 
c⁄n_öfo
->
ª•_õ_Àn
, 
MAX_REQ_LINE
));

6556  
îr
;

6559 
c⁄n_öfo
->
ª•_õ_Àn
 = 0;

6561 
	`WL_DBG
(("ªqÜí (%dËª•Üí (%d)\n", 
c⁄n_öfo
->
ªq_õ_Àn
,

6562 
c⁄n_öfo
->
ª•_õ_Àn
));

6564  
îr
;

6565 
	}
}

6567 
	$wl_ch_to_ch™•ec
(
ch
, 
wl_joö_∑øms
 *
joö_∑øms
,

6568 
size_t
 *
joö_∑øms_size
)

6570 
ch™•ec_t
 
ch™•ec
 = 0;

6571 i‡(
ch
 != 0) {

6572 
joö_∑øms
->
∑øms
.
ch™•ec_num
 = 1;

6573 
joö_∑øms
->
∑øms
.
ch™•ec_li°
[0] = 
ch
;

6575 i‡(
joö_∑øms
->
∑øms
.
ch™•ec_li°
[0] <
CH_MAX_2G_CHANNEL
)

6576 
ch™•ec
 |
WL_CHANSPEC_BAND_2G
;

6578 
ch™•ec
 |
WL_CHANSPEC_BAND_5G
;

6580 
ch™•ec
 |
WL_CHANSPEC_BW_20
;

6581 
ch™•ec
 |
WL_CHANSPEC_CTL_SB_NONE
;

6583 *
joö_∑øms_size
 +
WL_ASSOC_PARAMS_FIXED_SIZE
 +

6584 
joö_∑øms
->
∑øms
.
ch™•ec_num
 * (
ch™•ec_t
);

6586 
joö_∑øms
->
∑øms
.
ch™•ec_li°
[0] &
WL_CHANSPEC_CHAN_MASK
;

6587 
joö_∑øms
->
∑øms
.
ch™•ec_li°
[0] |
ch™•ec
;

6588 
joö_∑øms
->
∑øms
.
ch™•ec_li°
[0] =

6589 
	`wl_ch•ec_ho°_to_drivî
(
joö_∑øms
->
∑øms
.
ch™•ec_li°
[0]);

6591 
joö_∑øms
->
∑øms
.
ch™•ec_num
 =

6592 
	`htod32
(
joö_∑øms
->
∑øms
.
ch™•ec_num
);

6593 
	`WL_DBG
(("join_params->params.chanspec_list[0]= %X, %d channels\n",

6594 
joö_∑øms
->
∑øms
.
ch™•ec_li°
[0],

6595 
joö_∑øms
->
∑øms
.
ch™•ec_num
));

6597 
	}
}

6599 
s32
 
	$wl_upd©e_bss_öfo
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
, 
u8
 
is_rﬂm_d⁄e
)

6601 
cfg80211_bss
 *
bss
;

6602 
wl_bss_öfo
 *
bi
;

6603 
wlc_ssid
 *
ssid
;

6604 
bcm_év
 *
tim
;

6605 
s32
 
bóc⁄_öãrvÆ
;

6606 
s32
 
dtim_≥riod
;

6607 
size_t
 
õ_Àn
;

6608 
u8
 *
õ
;

6609 
u8
 *
ssidõ
;

6610 
u8
 *
curbssid
;

6611 
s32
 
îr
 = 0;

6612 
wùhy
 *wiphy;

6614 
wùhy
 = 
	`wl_to_wùhy
(
wl
);

6616 i‡(
	`wl_is_ibssmode
(
wl
, 
ndev
))

6617  
îr
;

6619 
ssid
 = (
wlc_ssid
 *)
	`wl_ªad_¥of
(
wl
, 
ndev
, 
WL_PROF_SSID
);

6620 
curbssid
 = 
	`wl_ªad_¥of
(
wl
, 
ndev
, 
WL_PROF_BSSID
);

6621 
bss
 = 
	`cfg80211_gë_bss
(
wùhy
, 
NULL
, 
curbssid
,

6622 
ssid
->
SSID
, ssid->
SSID_Àn
, 
WLAN_CAPABILITY_ESS
,

6623 
WLAN_CAPABILITY_ESS
);

6625 
	`muãx_lock
(&
wl
->
u§_sync
);

6626 i‡(!
bss
) {

6627 
	`WL_DBG
(("CouldÇot findÅhe AP\n"));

6628 *(
u32
 *Ë
wl
->
exåa_buf
 = 
	`htod32
(
WL_EXTRA_BUF_MAX
);

6629 
îr
 = 
	`wldev_io˘l
(
ndev
, 
WLC_GET_BSS_INFO
,

6630 
wl
->
exåa_buf
, 
WL_EXTRA_BUF_MAX
, 
Ál£
);

6631 i‡(
	`u∆ikñy
(
îr
)) {

6632 
	`WL_ERR
(("CouldÇŸ gë bs†öfÿ%d\n", 
îr
));

6633 
upd©e_bss_öfo_out
;

6635 
bi
 = (
wl_bss_öfo
 *)(
wl
->
exåa_buf
 + 4);

6636 i‡(
	`memcmp
(
bi
->
BSSID
.
o˘ë
, 
curbssid
, 
ETHER_ADDR_LEN
)) {

6637 
îr
 = -
EIO
;

6638 
upd©e_bss_öfo_out
;

6641 
õ
 = ((
u8
 *)
bi
Ë+ bi->
õ_off£t
;

6642 
õ_Àn
 = 
bi
->
õ_Àngth
;

6643 
ssidõ
 = (
u8
 *)
	`cfg80211_föd_õ
(
WLAN_EID_SSID
, 
õ
, 
õ_Àn
);

6644 i‡(
ssidõ
 && ssidõ[1] =
bi
->
SSID_Àn
 && !ssidõ[2] && bi->
SSID
[0])

6645 
	`mem˝y
(
ssidõ
 + 2, 
bi
->
SSID
, bi->
SSID_Àn
);

6647 
îr
 = 
	`wl_öf‹m_sögÀ_bss
(
wl
, 
bi
, 
is_rﬂm_d⁄e
);

6648 i‡(
	`u∆ikñy
(
îr
))

6649 
upd©e_bss_öfo_out
;

6651 
õ
 = ((
u8
 *)
bi
Ë+ bi->
õ_off£t
;

6652 
õ_Àn
 = 
bi
->
õ_Àngth
;

6653 
bóc⁄_öãrvÆ
 = 
	`˝u_to_À16
(
bi
->
bóc⁄_≥riod
);

6655 
	`WL_DBG
(("FoundÅhêAP i¿thêli° - BSSID %pM\n", 
bss
->
bssid
));

6656 
õ
 = 
bss
->
öf‹m©i⁄_ñemíts
;

6657 
õ_Àn
 = 
bss
->
Àn_öf‹m©i⁄_ñemíts
;

6658 
bóc⁄_öãrvÆ
 = 
bss
->beacon_interval;

6659 
	`cfg80211_put_bss
(
bss
);

6662 
tim
 = 
	`bcm_∑r£_évs
(
õ
, 
õ_Àn
, 
WLAN_EID_TIM
);

6663 i‡(
tim
) {

6664 
dtim_≥riod
 = 
tim
->
d©a
[1];

6671 
îr
 = 
	`wldev_io˘l
(
ndev
, 
WLC_GET_DTIMPRD
,

6672 &
dtim_≥riod
, (dtim_≥riod), 
Ál£
);

6673 i‡(
	`u∆ikñy
(
îr
)) {

6674 
	`WL_ERR
(("WLC_GET_DTIMPRDÉº‹ (%d)\n", 
îr
));

6675 
upd©e_bss_öfo_out
;

6679 
	`wl_upd©e_¥of
(
wl
, 
ndev
, 
NULL
, &
bóc⁄_öãrvÆ
, 
WL_PROF_BEACONINT
);

6680 
	`wl_upd©e_¥of
(
wl
, 
ndev
, 
NULL
, &
dtim_≥riod
, 
WL_PROF_DTIMPERIOD
);

6682 
upd©e_bss_öfo_out
:

6683 
	`muãx_u∆ock
(&
wl
->
u§_sync
);

6684  
îr
;

6685 
	}
}

6687 
s32


6688 
	$wl_bss_rﬂmög_d⁄e
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
,

6689 c⁄° 
wl_evít_msg_t
 *
e
, *
d©a
)

6691 
wl_c⁄√˘_öfo
 *
c⁄n_öfo
 = 
	`wl_to_c⁄n
(
wl
);

6692 
s32
 
îr
 = 0;

6693 
u8
 *
curbssid
;

6695 
	`wl_gë_assoc_õs
(
wl
, 
ndev
);

6696 
	`wl_upd©e_¥of
(
wl
, 
ndev
, 
NULL
, (*)(
e
->
addr
.
o˘ë
), 
WL_PROF_BSSID
);

6697 
curbssid
 = 
	`wl_ªad_¥of
(
wl
, 
ndev
, 
WL_PROF_BSSID
);

6698 
	`wl_upd©e_bss_öfo
(
wl
, 
ndev
, 1);

6699 
	`wl_upd©e_pmkli°
(
ndev
, 
wl
->
pmk_li°
, 
îr
);

6700 
	`¥ötk
("wl_bss_rﬂmög_d⁄êsuc˚ededÅÿ" 
MACDBG
 "\n",

6701 
	`MAC2STRDBG
((
u8
*)(&
e
->
addr
)));

6703 
	`cfg80211_rﬂmed
(
ndev
,

6705 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(3, 3, 0)

6706 
NULL
,

6707 #ñi‡
LINUX_VERSION_CODE
 > 
	`KERNEL_VERSION
(2, 6, 39)

6708 
NULL
,

6710 
curbssid
,

6711 
c⁄n_öfo
->
ªq_õ
, c⁄n_öfo->
ªq_õ_Àn
,

6712 
c⁄n_öfo
->
ª•_õ
, c⁄n_öfo->
ª•_õ_Àn
, 
GFP_KERNEL
);

6713 
	`WL_DBG
(("ReportÑoamingÑesult\n"));

6715 
	`wl_£t_drv_°©us
(
wl
, 
CONNECTED
, 
ndev
);

6717  
îr
;

6718 
	}
}

6720 
s32


6721 
	$wl_bss_c⁄√˘_d⁄e
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
,

6722 c⁄° 
wl_evít_msg_t
 *
e
, *
d©a
, 
boﬁ
 
com∂ëed
)

6724 
wl_c⁄√˘_öfo
 *
c⁄n_öfo
 = 
	`wl_to_c⁄n
(
wl
);

6725 
wl_£curôy
 *
£c
 = 
	`wl_ªad_¥of
(
wl
, 
ndev
, 
WL_PROF_SEC
);

6726 
s32
 
îr
 = 0;

6727 
u8
 *
curbssid
 = 
	`wl_ªad_¥of
(
wl
, 
ndev
, 
WL_PROF_BSSID
);

6728 i‡(!
£c
) {

6729 
	`WL_ERR
(("sec is NULL\n"));

6730  -
ENODEV
;

6732 
	`WL_DBG
(("Énter\n"));

6733 #ifde‡
ESCAN_RESULT_PATCH


6734 i‡(
	`wl_gë_drv_°©us
(
wl
, 
CONNECTED
, 
ndev
)) {

6735 i‡(
	`memcmp
(
curbssid
, 
c⁄√˘_ªq_bssid
, 
ETHER_ADDR_LEN
) == 0) {

6736 
	`WL_DBG
((" ConnectedÉvent of connected deviceÉ=%d s=%d, ignore it\n",

6737 
	`¡oh32
(
e
->
evít_ty≥
),Çtoh32”->
°©us
)));

6738  
îr
;

6741 i‡(
	`memcmp
(
curbssid
, 
brﬂd_bssid
, 
ETHER_ADDR_LEN
) == 0 &&

6742 
	`memcmp
(
brﬂd_bssid
, 
c⁄√˘_ªq_bssid
, 
ETHER_ADDR_LEN
) != 0) {

6743 
	`WL_DBG
(("copy bssid\n"));

6744 
	`mem˝y
(
curbssid
, 
c⁄√˘_ªq_bssid
, 
ETHER_ADDR_LEN
);

6748 i‡(
wl
->
sˇn_ªque°
) {

6749 
	`wl_nŸify_esˇn_com∂ëe
(
wl
, 
ndev
, 
åue
,Årue);

6752 i‡(
	`wl_gë_drv_°©us
(
wl
, 
CONNECTING
, 
ndev
)) {

6753 
	`wl_˛r_drv_°©us
(
wl
, 
CONNECTING
, 
ndev
);

6754 i‡(
com∂ëed
) {

6755 
	`wl_gë_assoc_õs
(
wl
, 
ndev
);

6756 
	`wl_upd©e_¥of
(
wl
, 
ndev
, 
NULL
, (*)(
e
->
addr
.
o˘ë
), 
WL_PROF_BSSID
);

6757 
curbssid
 = 
	`wl_ªad_¥of
(
wl
, 
ndev
, 
WL_PROF_BSSID
);

6758 
	`wl_upd©e_bss_öfo
(
wl
, 
ndev
, 0);

6759 
	`wl_upd©e_pmkli°
(
ndev
, 
wl
->
pmk_li°
, 
îr
);

6760 
	`wl_£t_drv_°©us
(
wl
, 
CONNECTED
, 
ndev
);

6762 
	`cfg80211_c⁄√˘_ªsu…
(
ndev
,

6763 
curbssid
,

6764 
c⁄n_öfo
->
ªq_õ
,

6765 
c⁄n_öfo
->
ªq_õ_Àn
,

6766 
c⁄n_öfo
->
ª•_õ
,

6767 
c⁄n_öfo
->
ª•_õ_Àn
,

6768 
com∂ëed
 ? 
WLAN_STATUS_SUCCESS
 :

6769 (
£c
->
auth_assoc_ªs_°©us
) ?

6770 
£c
->
auth_assoc_ªs_°©us
 :

6771 
WLAN_STATUS_UNSPECIFIED_FAILURE
,

6772 
GFP_KERNEL
);

6773 i‡(
com∂ëed
)

6774 
	`WL_INFO
(("Report connectÑesult - connection succeeded\n"));

6776 
	`WL_ERR
(("Report connectÑesult - connection failed\n"));

6778  
îr
;

6779 
	}
}

6781 
s32


6782 
	$wl_nŸify_mic_°©us
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
,

6783 c⁄° 
wl_evít_msg_t
 *
e
, *
d©a
)

6785 
u16
 
Êags
 = 
	`¡oh16
(
e
->flags);

6786 
∆80211_key_ty≥
 
key_ty≥
;

6788 
	`muãx_lock
(&
wl
->
u§_sync
);

6789 i‡(
Êags
 & 
WLC_EVENT_MSG_GROUP
)

6790 
key_ty≥
 = 
NL80211_KEYTYPE_GROUP
;

6792 
key_ty≥
 = 
NL80211_KEYTYPE_PAIRWISE
;

6794 
	`cfg80211_mich´l_mic_Áûuª
(
ndev
, (
u8
 *)&
e
->
addr
, 
key_ty≥
, -1,

6795 
NULL
, 
GFP_KERNEL
);

6796 
	`muãx_u∆ock
(&
wl
->
u§_sync
);

6799 
	}
}

6801 #ifde‡
PNO_SUPPORT


6802 
s32


6803 
	$wl_nŸify_p‚_°©us
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
,

6804 c⁄° 
wl_evít_msg_t
 *
e
, *
d©a
)

6806 
	`WL_ERR
((">>> PNO Event\n"));

6808 #i‚de‡
WL_SCHED_SCAN


6809 
	`muãx_lock
(&
wl
->
u§_sync
);

6811 
	`cfg80211_disc⁄√˘ed
(
ndev
, 0, 
NULL
, 0, 
GFP_KERNEL
);

6812 
	`muãx_u∆ock
(&
wl
->
u§_sync
);

6817 
	`wl_nŸify_sched_sˇn_ªsu…s
(
wl
, 
ndev
, 
e
, 
d©a
);

6820 
	}
}

6823 
s32


6824 
	$wl_nŸify_sˇn_°©us
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
,

6825 c⁄° 
wl_evít_msg_t
 *
e
, *
d©a
)

6827 
ch™√l_öfo
 
ch™√l_öf‹m
;

6828 
wl_sˇn_ªsu…s
 *
bss_li°
;

6829 
u32
 
Àn
 = 
WL_SCAN_BUF_MAX
;

6830 
s32
 
îr
 = 0;

6831 
Êags
;

6833 
	`WL_DBG
(("Enter \n"));

6834 i‡(!
	`wl_gë_drv_°©us
(
wl
, 
SCANNING
, 
ndev
)) {

6835 
	`WL_ERR
(("scan isÇotÑeady \n"));

6836  
îr
;

6838 i‡(
wl
->
isˇn_⁄
 && wl->
isˇn_kick°¨t
)

6839  
	`wl_wakeup_isˇn
(
	`wl_to_isˇn
(
wl
));

6841 
	`muãx_lock
(&
wl
->
u§_sync
);

6842 
	`wl_˛r_drv_°©us
(
wl
, 
SCANNING
, 
ndev
);

6843 
îr
 = 
	`wldev_io˘l
(
ndev
, 
WLC_GET_CHANNEL
, &
ch™√l_öf‹m
,

6844 (
ch™√l_öf‹m
), 
Ál£
);

6845 i‡(
	`u∆ikñy
(
îr
)) {

6846 
	`WL_ERR
(("sˇ¿busy (%d)\n", 
îr
));

6847 
sˇn_d⁄e_out
;

6849 
ch™√l_öf‹m
.
sˇn_ch™√l
 = 
	`dtoh32
(channel_inform.scan_channel);

6850 i‡(
	`u∆ikñy
(
ch™√l_öf‹m
.
sˇn_ch™√l
)) {

6852 
	`WL_DBG
(("channel_inform.scan_channel (%d)\n",

6853 
ch™√l_öf‹m
.
sˇn_ch™√l
));

6855 
wl
->
bss_li°
 = wl->
sˇn_ªsu…s
;

6856 
bss_li°
 = 
wl
->bss_list;

6857 
	`mem£t
(
bss_li°
, 0, 
Àn
);

6858 
bss_li°
->
buÊí
 = 
	`htod32
(
Àn
);

6859 
îr
 = 
	`wldev_io˘l
(
ndev
, 
WLC_SCAN_RESULTS
, 
bss_li°
, 
Àn
, 
Ál£
);

6860 i‡(
	`u∆ikñy
(
îr
Ë&& u∆ikñy(!
wl
->
sˇn_suµªs£d
)) {

6861 
	`WL_ERR
(("%†Sˇn_ªsu…†îr‹ (%d)\n", 
ndev
->
«me
, 
îr
));

6862 
îr
 = -
EINVAL
;

6863 
sˇn_d⁄e_out
;

6865 
bss_li°
->
buÊí
 = 
	`dtoh32
(bss_list->buflen);

6866 
bss_li°
->
vîsi⁄
 = 
	`dtoh32
(bss_list->version);

6867 
bss_li°
->
cou¡
 = 
	`dtoh32
(bss_list->count);

6869 
îr
 = 
	`wl_öf‹m_bss
(
wl
);

6871 
sˇn_d⁄e_out
:

6872 
	`dñ_timî_sync
(&
wl
->
sˇn_timeout
);

6873 
	`•ö_lock_úqßve
(&
wl
->
cfgdrv_lock
, 
Êags
);

6874 i‡(
wl
->
sˇn_ªque°
) {

6875 
	`cfg80211_sˇn_d⁄e
(
wl
->
sˇn_ªque°
, 
Ál£
);

6876 
wl
->
sˇn_ªque°
 = 
NULL
;

6878 
	`•ö_u∆ock_úqª°‹e
(&
wl
->
cfgdrv_lock
, 
Êags
);

6879 
	`WL_DBG
(("cfg80211_scan_done\n"));

6880 
	`muãx_u∆ock
(&
wl
->
u§_sync
);

6881  
îr
;

6882 
	}
}

6883 
s32


6884 
	$wl_‰ame_gë_mgmt
(
u16
 
fc
, c⁄° 
ëhî_addr
 *
da
,

6885 c⁄° 
ëhî_addr
 *
ß
, c⁄° ëhî_add∏*
bssid
,

6886 
u8
 **
phódî
, 
u32
 *
body_Àn
, u8 *
pbody
)

6888 
dŸ11_m™agemít_hódî
 *
hdr
;

6889 
u32
 
tŸÀn
 = 0;

6890 
s32
 
îr
 = 0;

6891 
u8
 *
off£t
;

6892 
u32
 
¥ebody_Àn
 = *
body_Àn
;

6893 
fc
) {

6894 
FC_ASSOC_REQ
:

6896 
tŸÀn
 = 
DOT11_ASSOC_REQ_FIXED_LEN
;

6897 *
body_Àn
 +
DOT11_ASSOC_REQ_FIXED_LEN
;

6900 
FC_REASSOC_REQ
:

6902 
tŸÀn
 = 
DOT11_REASSOC_REQ_FIXED_LEN
;

6903 *
body_Àn
 +
DOT11_REASSOC_REQ_FIXED_LEN
;

6906 
tŸÀn
 +
DOT11_MGMT_HDR_LEN
 + 
¥ebody_Àn
;

6907 *
phódî
 = 
	`kzÆloc
(
tŸÀn
, 
GFP_KERNEL
);

6908 i‡(*
phódî
 =
NULL
) {

6909 
	`WL_ERR
(("memoryálloc failed \n"));

6910  -
ENOMEM
;

6912 
hdr
 = (
dŸ11_m™agemít_hódî
 *Ë(*
phódî
);

6913 
hdr
->
fc
 = 
	`htﬁ16
(fc);

6914 
hdr
->
durid
 = 0;

6915 
hdr
->
£q
 = 0;

6916 
off£t
 = (
u8
*)(
hdr
 + 1Ë+ (
tŸÀn
 - 
DOT11_MGMT_HDR_LEN
 - 
¥ebody_Àn
);

6917 
	`bc›y
((c⁄° *)
da
, (
u8
*)&
hdr
->da, 
ETHER_ADDR_LEN
);

6918 
	`bc›y
((c⁄° *)
ß
, (
u8
*)&
hdr
->ß, 
ETHER_ADDR_LEN
);

6919 
	`bc›y
((c⁄° *)
bssid
, (
u8
*)&
hdr
->bssid, 
ETHER_ADDR_LEN
);

6920 i‡((
pbody
 !
NULL
Ë&& 
¥ebody_Àn
)

6921 
	`bc›y
((c⁄° *)
pbody
, 
off£t
, 
¥ebody_Àn
);

6922 *
body_Àn
 = 
tŸÀn
;

6923  
îr
;

6924 
	}
}

6928 
	$wl_°›_waô_√xt_a˘i⁄_‰ame
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
)

6930 i‡(
	`wl_gë_drv_°©us_Æl
(
wl
, 
SENDING_ACT_FRM
) &&

6931 (
	`wl_gë_p2p_°©us
(
wl
, 
ACTION_TX_COMPLETED
) ||

6932 
	`wl_gë_p2p_°©us
(
wl
, 
ACTION_TX_NOACK
))) {

6933 
	`WL_DBG
(("*** Wake UP **ábortáctframe iovar\n"));

6937 i‡(
wl
->
af_£¡_ch™√l
)

6939 
	`wl_nŸify_esˇn_com∂ëe
(
wl
,

6940 (
ndev
 =
wl
->
p2p_√t
Ë? 
	`wl_to_¥mry_ndev
(wlË:Çdev, 
åue
,Årue);

6942 #ifde‡
WL_CFG80211_SYNC_GON


6943 i‡(
	`wl_gë_drv_°©us_Æl
(
wl
, 
WAITING_NEXT_ACT_FRM_LISTEN
)) {

6944 
	`WL_DBG
(("*** Wake UP **ábortÜisten forÇextáf frame\n"));

6946 
	`wl_nŸify_esˇn_com∂ëe
(
wl
,

6947 (
ndev
 =
wl
->
p2p_√t
Ë? 
	`wl_to_¥mry_ndev
(wlË:Çdev, 
åue
,Årue);

6950 
	}
}

6953 
s32


6954 
	$wl_nŸify_rx_mgmt_‰ame
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
,

6955 c⁄° 
wl_evít_msg_t
 *
e
, *
d©a
)

6957 
õì80211_suµ‹ãd_b™d
 *
b™d
;

6958 
wùhy
 *wùhy = 
	`wl_to_wùhy
(
wl
);

6959 
ëhî_addr
 
da
;

6960 
ëhî_addr
 
bssid
;

6961 
boﬁ
 
is‰ì
 = 
Ál£
;

6962 
s32
 
îr
 = 0;

6963 
s32
 
‰eq
;

6964 
√t_devi˚
 *
dev
 = 
NULL
;

6965 
wifi_p2p_pub_a˘_‰ame_t
 *
a˘_‰m
 = 
NULL
;

6966 
wifi_p2p_a˘i⁄_‰ame_t
 *
p2p_a˘_‰m
 = 
NULL
;

6967 
wifi_p2psd_gas_pub_a˘_‰ame_t
 *
sd_a˘_‰m
 = 
NULL
;

6968 
wl_evít_rx_‰ame_d©a_t
 *
rx‰ame
 =

6969 (
wl_evít_rx_‰ame_d©a_t
*)
d©a
;

6970 
u32
 
evít
 = 
	`¡oh32
(
e
->
evít_ty≥
);

6971 
u8
 *
mgmt_‰ame
;

6972 
u8
 
bsscfgidx
 = 
e
->bsscfgidx;

6973 
u32
 
mgmt_‰ame_Àn
 = 
	`¡oh32
(
e
->
d©Æí
Ë- (
wl_evít_rx_‰ame_d©a_t
);

6974 
u16
 
ch™√l
 = ((
	`¡oh16
(
rx‰ame
->ch™√lË& 
WL_CHANSPEC_CHAN_MASK
));

6976 
	`mem£t
(&
bssid
, 0, 
ETHER_ADDR_LEN
);

6978 i‡(
wl
->
p2p_√t
 =
ndev
) {

6979 
dev
 = 
	`wl_to_¥mry_ndev
(
wl
);

6981 
dev
 = 
ndev
;

6984 i‡(
ch™√l
 <
CH_MAX_2G_CHANNEL
)

6985 
b™d
 = 
wùhy
->
b™ds
[
IEEE80211_BAND_2GHZ
];

6987 
b™d
 = 
wùhy
->
b™ds
[
IEEE80211_BAND_5GHZ
];

6988 i‡(!
b™d
) {

6989 
	`WL_ERR
(("No valid band"));

6990  -
EINVAL
;

6992 #i‡
LINUX_VERSION_CODE
 =
	`KERNEL_VERSION
(2, 6, 38Ë&& !
	`deföed
(
WL_COMPAT_WIRELESS
)

6993 
‰eq
 = 
	`õì80211_ch™√l_to_‰equícy
(
ch™√l
);

6994 ()
b™d
->band;

6996 
‰eq
 = 
	`õì80211_ch™√l_to_‰equícy
(
ch™√l
, 
b™d
->band);

6998 i‡(
evít
 =
WLC_E_ACTION_FRAME_RX
) {

6999 
	`wldev_iov¨_gëbuf_bsscfg
(
dev
, "cur_etheraddr",

7000 
NULL
, 0, 
wl
->
io˘l_buf
, 
WLC_IOCTL_SMLEN
, 
bsscfgidx
, &wl->
io˘l_buf_sync
);

7002 
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_GET_BSSID
, &
bssid
, 
ETHER_ADDR_LEN
, 
Ál£
);

7003 i‡(
îr
 < 0)

7004 
	`WL_ERR
(("WLC_GET_BSSIDÉº‹ %d\n", 
îr
));

7005 
	`mem˝y
(
da
.
o˘ë
, 
wl
->
io˘l_buf
, 
ETHER_ADDR_LEN
);

7006 
îr
 = 
	`wl_‰ame_gë_mgmt
(
FC_ACTION
, &
da
, &
e
->
addr
, &
bssid
,

7007 &
mgmt_‰ame
, &
mgmt_‰ame_Àn
,

7008 (
u8
 *)((
wl_evít_rx_‰ame_d©a_t
 *)
rx‰ame
 + 1));

7009 i‡(
îr
 < 0) {

7010 
	`WL_ERR
(("%s: Error inÑeceivingáction frameÜen %d channel %d freq %d\n",

7011 
__func__
, 
mgmt_‰ame_Àn
, 
ch™√l
, 
‰eq
));

7012 
exô
;

7014 
is‰ì
 = 
åue
;

7015 i‡(
	`wl_cfgp2p_is_pub_a˘i⁄
(&
mgmt_‰ame
[
DOT11_MGMT_HDR_LEN
],

7016 
mgmt_‰ame_Àn
 - 
DOT11_MGMT_HDR_LEN
)) {

7017 
a˘_‰m
 = (
wifi_p2p_pub_a˘_‰ame_t
 *)

7018 (&
mgmt_‰ame
[
DOT11_MGMT_HDR_LEN
]);

7019 } i‡(
	`wl_cfgp2p_is_p2p_a˘i⁄
(&
mgmt_‰ame
[
DOT11_MGMT_HDR_LEN
],

7020 
mgmt_‰ame_Àn
 - 
DOT11_MGMT_HDR_LEN
)) {

7021 
p2p_a˘_‰m
 = (
wifi_p2p_a˘i⁄_‰ame_t
 *)

7022 (&
mgmt_‰ame
[
DOT11_MGMT_HDR_LEN
]);

7023 (Ë
p2p_a˘_‰m
;

7024 } i‡(
	`wl_cfgp2p_is_gas_a˘i⁄
(&
mgmt_‰ame
[
DOT11_MGMT_HDR_LEN
],

7025 
mgmt_‰ame_Àn
 - 
DOT11_MGMT_HDR_LEN
)) {

7027 
sd_a˘_‰m
 = (
wifi_p2psd_gas_pub_a˘_‰ame_t
 *)

7028 (&
mgmt_‰ame
[
DOT11_MGMT_HDR_LEN
]);

7029 i‡(
sd_a˘_‰m
 && 
	`wl_gë_drv_°©us_Æl
(
wl
, 
WAITING_NEXT_ACT_FRM
)) {

7030 i‡(
wl
->
√xt_af_subty≥
 =
sd_a˘_‰m
->
a˘i⁄
) {

7031 
	`WL_DBG
(("We gotáÑightÇext frame of SD!(%d)\n",

7032 
sd_a˘_‰m
->
a˘i⁄
));

7033 
	`wl_˛r_drv_°©us
(
wl
, 
WAITING_NEXT_ACT_FRM
,

7034 (
ndev
 =
wl
->
p2p_√t
) ?

7035 
	`wl_to_¥mry_ndev
(
wl
Ë: 
ndev
);

7038 
	`wl_°›_waô_√xt_a˘i⁄_‰ame
(
wl
, 
ndev
);

7041 (Ë
sd_a˘_‰m
;

7047 i‡(
wl
->
p2p_√t
 =
ndev
)

7048 
ndev
 = 
	`wl_to_¥mry_ndev
(
wl
);

7051 i‡(
a˘_‰m
) {

7053 i‡(
	`wl_gë_drv_°©us_Æl
(
wl
, 
WAITING_NEXT_ACT_FRM
)) {

7054 i‡(
wl
->
√xt_af_subty≥
 =
a˘_‰m
->
subty≥
) {

7055 
	`WL_DBG
(("We gotáÑightÇext frame!(%d)\n",

7056 
a˘_‰m
->
subty≥
));

7057 
	`wl_˛r_drv_°©us
(
wl
, 
WAITING_NEXT_ACT_FRM
,

7058 (
ndev
 =
wl
->
p2p_√t
) ?

7059 
	`wl_to_¥mry_ndev
(
wl
Ë: 
ndev
);

7062 
	`wl_°›_waô_√xt_a˘i⁄_‰ame
(
wl
, 
ndev
);

7067 
	`wl_cfgp2p_¥öt_a˘‰ame
(
Ál£
, &
mgmt_‰ame
[
DOT11_MGMT_HDR_LEN
],

7068 
mgmt_‰ame_Àn
 - 
DOT11_MGMT_HDR_LEN
);

7072 i‡(
a˘_‰m
 && (◊˘_‰m->
subty≥
 =
P2P_PAF_GON_CONF
) ||

7073 (
a˘_‰m
->
subty≥
 =
P2P_PAF_PROVDIS_RSP
))) {

7074 
	`wldev_iov¨_£töt
(
dev
, "mpc", 1);

7076 i‡(
a˘_‰m
 && (a˘_‰m->
subty≥
 =
P2P_PAF_GON_CONF
)) {

7077 
	`WL_DBG
(("P2P: GO_NEG_PHASE status cleared \n"));

7078 
	`wl_˛r_p2p_°©us
(
wl
, 
GO_NEG_PHASE
);

7081 
mgmt_‰ame
 = (
u8
 *)((
wl_evít_rx_‰ame_d©a_t
 *)
rx‰ame
 + 1);

7088 i‡(
evít
 =
WLC_E_P2P_PROBREQ_MSG
) {

7089 
	`WL_DBG
((" Evíà%s\n", (
evít
 =
WLC_E_P2P_PROBREQ_MSG
) ?

7096 i‡(
wl
->
p2p
 &&

7097 
	`wl_gë_p2p_°©us
(
wl
, 
GO_NEG_PHASE
)) {

7098 
	`WL_DBG
(("Filtering P2PÖrobe_req while "

7105 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(3, 4, 0)

7106 
	`cfg80211_rx_mgmt
(
ndev
, 
‰eq
, 0, 
mgmt_‰ame
, 
mgmt_‰ame_Àn
, 
GFP_ATOMIC
);

7108 
	`cfg80211_rx_mgmt
(
ndev
, 
‰eq
, 
mgmt_‰ame
, 
mgmt_‰ame_Àn
, 
GFP_ATOMIC
);

7111 
	`WL_DBG
(("%s: mgmt_‰ame_À¿(%dË,É->d©Æí (%d), ch™√»(%d), fªq (%d)\n", 
__func__
,

7112 
mgmt_‰ame_Àn
, 
	`¡oh32
(
e
->
d©Æí
), 
ch™√l
, 
‰eq
));

7113 
exô
:

7114 i‡(
is‰ì
)

7115 
	`k‰ì
(
mgmt_‰ame
);

7117 
	}
}

7119 #ifde‡
WL_SCHED_SCAN


7123 
	#FULL_ESCAN_ON_PFN_NET_FOUND
 0

	)

7124 
s32


7125 
	$wl_nŸify_sched_sˇn_ªsu…s
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
,

7126 c⁄° 
wl_evít_msg_t
 *
e
, *
d©a
)

7128 
wl_p‚_√t_öfo_t
 *
√töfo
, *
≤ëöfo
;

7129 
cfg80211_sˇn_ªque°
 
ªque°
;

7130 
wùhy
 *wùhy = 
	`wl_to_wùhy
(
wl
);

7131 
îr
 = 0;

7132 
cfg80211_ssid
 
ssid
[
MAX_PFN_LIST_COUNT
];

7133 
õì80211_ch™√l
 *
ch™√l
 = 
NULL
;

7134 
ch™√l_ªq
 = 0;

7135 
b™d
 = 0;

7136 
wl_p‚_sˇƒesu…s
 *
p‚_ªsu…
 = (wl_p‚_sˇƒesu…†*)
d©a
;

7138 
	`WL_DBG
(("Enter\n"));

7140 i‡(
e
->
evít_ty≥
 =
WLC_E_PFN_NET_LOST
) {

7141 
	`WL_PNO
(("PFN NET LOSTÉvent. Do Nothing \n"));

7144 
	`WL_PNO
((">>> PFN NET FOUNDÉvít. cou¡:%d \n", 
p‚_ªsu…
->
cou¡
));

7145 i‡(
p‚_ªsu…
->
cou¡
 > 0) {

7146 
i
;

7148 
	`mem£t
(&
ªque°
, 0x00, (
cfg80211_sˇn_ªque°
));

7149 
	`mem£t
(&
ssid
, 0x00, (ssid));

7150 
ªque°
.
wùhy
 = wiphy;

7152 
≤ëöfo
 = (
wl_p‚_√t_öfo_t
 *)(
d©a
 + (
wl_p‚_sˇƒesu…s_t
)

7153 - (
wl_p‚_√t_öfo_t
));

7154 
ch™√l
 = (
õì80211_ch™√l
 *)
	`kzÆloc
(

7155 ((
õì80211_ch™√l
Ë* 
MAX_PFN_LIST_COUNT
),

7156 
GFP_KERNEL
);

7157 i‡(!
ch™√l
) {

7158 
	`WL_ERR
(("No memory"));

7159 
îr
 = -
ENOMEM
;

7160 
out_îr
;

7163 
i
 = 0; i < 
p‚_ªsu…
->
cou¡
; i++) {

7164 
√töfo
 = &
≤ëöfo
[
i
];

7165 i‡(!
√töfo
) {

7166 
	`WL_ERR
(("InvÆidÇëöfÿ±r. index:%d", 
i
));

7167 
îr
 = -
EINVAL
;

7168 
out_îr
;

7170 
	`WL_PNO
((">>> SSID:%s Channel:%d \n",

7171 
√töfo
->
p‚sub√t
.
SSID
,Çëöfo->p‚sub√t.
ch™√l
));

7178 
	`mem˝y
(
ssid
[
i
].ssid, 
√töfo
->
p‚sub√t
.
SSID
,

7179 
√töfo
->
p‚sub√t
.
SSID_Àn
);

7180 
ssid
[
i
].
ssid_Àn
 = 
√töfo
->
p‚sub√t
.
SSID_Àn
;

7181 
ªque°
.
n_ssids
++;

7183 
ch™√l_ªq
 = 
√töfo
->
p‚sub√t
.
ch™√l
;

7184 
b™d
 = (
ch™√l_ªq
 <
CH_MAX_2G_CHANNEL
Ë? 
NL80211_BAND_2GHZ


7185 : 
NL80211_BAND_5GHZ
;

7186 
ch™√l
[
i
].
˚¡î_‰eq
 = 
	`õì80211_ch™√l_to_‰equícy
(
ch™√l_ªq
, 
b™d
);

7187 
ch™√l
[
i
].
b™d
 = band;

7188 
ch™√l
[
i
].
Êags
 |
IEEE80211_CHAN_NO_HT40
;

7189 
ªque°
.
ch™√ls
[
i
] = &
ch™√l
[i];

7190 
ªque°
.
n_ch™√ls
++;

7194 i‡(
ªque°
.
n_ssids
)

7195 
ªque°
.
ssids
 = &
ssid
[0];

7197 i‡(
	`wl_gë_drv_°©us_Æl
(
wl
, 
SCANNING
)) {

7199 
	`wl_nŸify_esˇn_com∂ëe
(
wl
, 
ndev
, 
åue
,Årue);

7202 i‡(
	`wl_gë_p2p_°©us
(
wl
, 
DISCOVERY_ON
)) {

7203 
	`WL_PNO
((">>> P2P discovery was ON. Disabling it\n"));

7204 
îr
 = 
	`wl_cfgp2p_discovî_íabÀ_£¨ch
(
wl
, 
Ál£
);

7205 i‡(
	`u∆ikñy
(
îr
)) {

7206 
	`wl_˛r_drv_°©us
(
wl
, 
SCANNING
, 
ndev
);

7207 
out_îr
;

7211 
	`wl_£t_drv_°©us
(
wl
, 
SCANNING
, 
ndev
);

7212 #i‡
FULL_ESCAN_ON_PFN_NET_FOUND


7213 
	`WL_PNO
((">>> Doing Full ESCAN on PNOÉvent\n"));

7214 
îr
 = 
	`wl_do_esˇn
(
wl
, 
wùhy
, 
ndev
, 
NULL
);

7216 
	`WL_PNO
((">>> DoingÅargeted ESCAN on PNOÉvent\n"));

7217 
îr
 = 
	`wl_do_esˇn
(
wl
, 
wùhy
, 
ndev
, &
ªque°
);

7219 i‡(
îr
) {

7220 
	`wl_˛r_drv_°©us
(
wl
, 
SCANNING
, 
ndev
);

7221 
out_îr
;

7223 
wl
->
sched_sˇn_ru¬ög
 = 
TRUE
;

7226 
	`WL_ERR
(("FALSE PNO Event. (pfn_count == 0) \n"));

7228 
out_îr
:

7229 i‡(
ch™√l
)

7230 
	`k‰ì
(
ch™√l
);

7231  
îr
;

7232 
	}
}

7235 
	$wl_öô_c⁄f
(
wl_c⁄f
 *
c⁄f
)

7237 
	`WL_DBG
(("Enter \n"));

7238 
c⁄f
->
‰ag_thªshﬁd
 = (
u32
)-1;

7239 
c⁄f
->
πs_thªshﬁd
 = (
u32
)-1;

7240 
c⁄f
->
ªåy_sh‹t
 = (
u32
)-1;

7241 
c⁄f
->
ªåy_l⁄g
 = (
u32
)-1;

7242 
c⁄f
->
tx_powî
 = -1;

7243 
	}
}

7245 
	$wl_öô_¥of
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
)

7247 
Êags
;

7248 
wl_¥ofûe
 *
¥ofûe
 = 
	`wl_gë_¥ofûe_by_√tdev
(
wl
, 
ndev
);

7250 
	`•ö_lock_úqßve
(&
wl
->
cfgdrv_lock
, 
Êags
);

7251 
	`mem£t
(
¥ofûe
, 0, (
wl_¥ofûe
));

7252 
	`•ö_u∆ock_úqª°‹e
(&
wl
->
cfgdrv_lock
, 
Êags
);

7253 
	}
}

7255 
	$wl_öô_evít_h™dÀr
(
wl_¥iv
 *
wl
)

7257 
	`mem£t
(
wl
->
evt_h™dÀr
, 0, (wl->evt_handler));

7259 
wl
->
evt_h™dÀr
[
WLC_E_SCAN_COMPLETE
] = 
wl_nŸify_sˇn_°©us
;

7260 
wl
->
evt_h™dÀr
[
WLC_E_AUTH
] = 
wl_nŸify_c⁄√˘_°©us
;

7261 
wl
->
evt_h™dÀr
[
WLC_E_ASSOC
] = 
wl_nŸify_c⁄√˘_°©us
;

7262 
wl
->
evt_h™dÀr
[
WLC_E_LINK
] = 
wl_nŸify_c⁄√˘_°©us
;

7263 
wl
->
evt_h™dÀr
[
WLC_E_DEAUTH_IND
] = 
wl_nŸify_c⁄√˘_°©us
;

7264 
wl
->
evt_h™dÀr
[
WLC_E_DEAUTH
] = 
wl_nŸify_c⁄√˘_°©us
;

7265 
wl
->
evt_h™dÀr
[
WLC_E_DISASSOC_IND
] = 
wl_nŸify_c⁄√˘_°©us
;

7266 
wl
->
evt_h™dÀr
[
WLC_E_ASSOC_IND
] = 
wl_nŸify_c⁄√˘_°©us
;

7267 
wl
->
evt_h™dÀr
[
WLC_E_REASSOC_IND
] = 
wl_nŸify_c⁄√˘_°©us
;

7268 
wl
->
evt_h™dÀr
[
WLC_E_ROAM
] = 
wl_nŸify_rﬂmög_°©us
;

7269 
wl
->
evt_h™dÀr
[
WLC_E_MIC_ERROR
] = 
wl_nŸify_mic_°©us
;

7270 
wl
->
evt_h™dÀr
[
WLC_E_SET_SSID
] = 
wl_nŸify_c⁄√˘_°©us
;

7271 
wl
->
evt_h™dÀr
[
WLC_E_ACTION_FRAME_RX
] = 
wl_nŸify_rx_mgmt_‰ame
;

7272 
wl
->
evt_h™dÀr
[
WLC_E_PROBREQ_MSG
] = 
wl_nŸify_rx_mgmt_‰ame
;

7273 
wl
->
evt_h™dÀr
[
WLC_E_P2P_PROBREQ_MSG
] = 
wl_nŸify_rx_mgmt_‰ame
;

7274 
wl
->
evt_h™dÀr
[
WLC_E_P2P_DISC_LISTEN_COMPLETE
] = 
wl_cfgp2p_li°í_com∂ëe
;

7275 
wl
->
evt_h™dÀr
[
WLC_E_ACTION_FRAME_COMPLETE
] = 
wl_cfgp2p_a˘i⁄_tx_com∂ëe
;

7276 
wl
->
evt_h™dÀr
[
WLC_E_ACTION_FRAME_OFF_CHAN_COMPLETE
] = 
wl_cfgp2p_a˘i⁄_tx_com∂ëe
;

7277 #ifde‡
PNO_SUPPORT


7278 
wl
->
evt_h™dÀr
[
WLC_E_PFN_NET_FOUND
] = 
wl_nŸify_p‚_°©us
;

7280 
	}
}

7282 
s32
 
	$wl_öô_¥iv_mem
(
wl_¥iv
 *
wl
)

7284 
	`WL_DBG
(("Enter \n"));

7285 
wl
->
sˇn_ªsu…s
 = (*)
	`kzÆloc
(
WL_SCAN_BUF_MAX
, 
GFP_KERNEL
);

7286 i‡(
	`u∆ikñy
(!
wl
->
sˇn_ªsu…s
)) {

7287 
	`WL_ERR
(("ScanÑesultsálloc failed\n"));

7288 
öô_¥iv_mem_out
;

7290 
wl
->
c⁄f
 = (*)
	`kzÆloc
((*wl->c⁄f), 
GFP_KERNEL
);

7291 i‡(
	`u∆ikñy
(!
wl
->
c⁄f
)) {

7292 
	`WL_ERR
(("wl_confálloc failed\n"));

7293 
öô_¥iv_mem_out
;

7295 
wl
->
sˇn_ªq_öt
 =

7296 (*)
	`kzÆloc
((*
wl
->
sˇn_ªq_öt
), 
GFP_KERNEL
);

7297 i‡(
	`u∆ikñy
(!
wl
->
sˇn_ªq_öt
)) {

7298 
	`WL_ERR
(("ScanÑeqálloc failed\n"));

7299 
öô_¥iv_mem_out
;

7301 
wl
->
io˘l_buf
 = (*)
	`kzÆloc
(
WLC_IOCTL_MAXLEN
, 
GFP_KERNEL
);

7302 i‡(
	`u∆ikñy
(!
wl
->
io˘l_buf
)) {

7303 
	`WL_ERR
(("Ioctl bufálloc failed\n"));

7304 
öô_¥iv_mem_out
;

7306 
wl
->
esˇn_io˘l_buf
 = (*)
	`kzÆloc
(
WLC_IOCTL_MAXLEN
, 
GFP_KERNEL
);

7307 i‡(
	`u∆ikñy
(!
wl
->
esˇn_io˘l_buf
)) {

7308 
	`WL_ERR
(("Ioctl bufálloc failed\n"));

7309 
öô_¥iv_mem_out
;

7311 
wl
->
exåa_buf
 = (*)
	`kzÆloc
(
WL_EXTRA_BUF_MAX
, 
GFP_KERNEL
);

7312 i‡(
	`u∆ikñy
(!
wl
->
exåa_buf
)) {

7313 
	`WL_ERR
(("Extra bufálloc failed\n"));

7314 
öô_¥iv_mem_out
;

7316 
wl
->
isˇn
 = (*)
	`kzÆloc
((*wl->isˇn), 
GFP_KERNEL
);

7317 i‡(
	`u∆ikñy
(!
wl
->
isˇn
)) {

7318 
	`WL_ERR
(("Iscan bufálloc failed\n"));

7319 
öô_¥iv_mem_out
;

7321 
wl
->
pmk_li°
 = (*)
	`kzÆloc
((*wl->pmk_li°), 
GFP_KERNEL
);

7322 i‡(
	`u∆ikñy
(!
wl
->
pmk_li°
)) {

7323 
	`WL_ERR
(("pmkÜistálloc failed\n"));

7324 
öô_¥iv_mem_out
;

7326 
wl
->
°a_öfo
 = (*)
	`kzÆloc
((*wl->°a_öfo), 
GFP_KERNEL
);

7327 i‡(
	`u∆ikñy
(!
wl
->
°a_öfo
)) {

7328 
	`WL_ERR
(("sta infoálloc failed\n"));

7329 
öô_¥iv_mem_out
;

7332 #i‡
	`deföed
(
STATIC_WL_PRIV_STRUCT
)

7333 
wl
->
c⁄n_öfo
 = (*)
	`kzÆloc
((*wl->c⁄n_öfo), 
GFP_KERNEL
);

7334 i‡(
	`u∆ikñy
(!
wl
->
c⁄n_öfo
)) {

7335 
	`WL_ERR
(("wl->conn_infoálloc failed\n"));

7336 
öô_¥iv_mem_out
;

7338 
wl
->
õ
 = (*)
	`kzÆloc
((*wl->õ), 
GFP_KERNEL
);

7339 i‡(
	`u∆ikñy
(!
wl
->
õ
)) {

7340 
	`WL_ERR
(("wl->ieálloc failed\n"));

7341 
öô_¥iv_mem_out
;

7343 
wl
->
esˇn_öfo
.
esˇn_buf
 = 
	`dhd_os_¥óŒoc
(
NULL
, 
DHD_PREALLOC_WIPHY_ESCAN0
, 0);

7344 
	`bzîo
(
wl
->
esˇn_öfo
.
esˇn_buf
, 
ESCAN_BUF_SIZE
);

7346 
wl
->
afx_hdl
 = (*)
	`kzÆloc
((*wl->afx_hdl), 
GFP_KERNEL
);

7347 i‡(
	`u∆ikñy
(!
wl
->
afx_hdl
)) {

7348 
	`WL_ERR
(("afx hdlálloc failed\n"));

7349 
öô_¥iv_mem_out
;

7351 
	`öô_com∂ëi⁄
(&
wl
->
a˘_‰m_sˇn
);

7352 
	`öô_com∂ëi⁄
(&
wl
->
waô_√xt_af
);

7354 
	`INIT_WORK
(&
wl
->
afx_hdl
->
w‹k
, 
wl_cfg80211_afx_h™dÀr
);

7358 
öô_¥iv_mem_out
:

7359 
	`wl_deöô_¥iv_mem
(
wl
);

7361  -
ENOMEM
;

7362 
	}
}

7364 
	$wl_deöô_¥iv_mem
(
wl_¥iv
 *
wl
)

7366 
	`k‰ì
(
wl
->
sˇn_ªsu…s
);

7367 
wl
->
sˇn_ªsu…s
 = 
NULL
;

7368 
	`k‰ì
(
wl
->
c⁄f
);

7369 
wl
->
c⁄f
 = 
NULL
;

7370 
	`k‰ì
(
wl
->
sˇn_ªq_öt
);

7371 
wl
->
sˇn_ªq_öt
 = 
NULL
;

7372 
	`k‰ì
(
wl
->
io˘l_buf
);

7373 
wl
->
io˘l_buf
 = 
NULL
;

7374 
	`k‰ì
(
wl
->
esˇn_io˘l_buf
);

7375 
wl
->
esˇn_io˘l_buf
 = 
NULL
;

7376 
	`k‰ì
(
wl
->
exåa_buf
);

7377 
wl
->
exåa_buf
 = 
NULL
;

7378 
	`k‰ì
(
wl
->
isˇn
);

7379 
wl
->
isˇn
 = 
NULL
;

7380 
	`k‰ì
(
wl
->
pmk_li°
);

7381 
wl
->
pmk_li°
 = 
NULL
;

7382 
	`k‰ì
(
wl
->
°a_öfo
);

7383 
wl
->
°a_öfo
 = 
NULL
;

7384 #i‡
	`deföed
(
STATIC_WL_PRIV_STRUCT
)

7385 
	`k‰ì
(
wl
->
c⁄n_öfo
);

7386 
wl
->
c⁄n_öfo
 = 
NULL
;

7387 
	`k‰ì
(
wl
->
õ
);

7388 
wl
->
õ
 = 
NULL
;

7389 
wl
->
esˇn_öfo
.
esˇn_buf
 = 
NULL
;

7391 i‡(
wl
->
afx_hdl
) {

7392 
	`ˇn˚l_w‹k_sync
(&
wl
->
afx_hdl
->
w‹k
);

7393 
	`k‰ì
(
wl
->
afx_hdl
);

7394 
wl
->
afx_hdl
 = 
NULL
;

7397 i‡(
wl
->
≠_öfo
) {

7398 
	`k‰ì
(
wl
->
≠_öfo
->
w∑_õ
);

7399 
	`k‰ì
(
wl
->
≠_öfo
->
r¢_õ
);

7400 
	`k‰ì
(
wl
->
≠_öfo
->
wps_õ
);

7401 
	`k‰ì
(
wl
->
≠_öfo
);

7402 
wl
->
≠_öfo
 = 
NULL
;

7404 
	}
}

7406 
s32
 
	$wl_¸óã_evít_h™dÀr
(
wl_¥iv
 *
wl
)

7408 
ªt
 = 0;

7409 
	`WL_DBG
(("Enter \n"));

7412 
wl
->
evít_tsk
.
thr_pid
 = -1;

7414 #ifde‡
USE_KTHREAD_API


7415 
	`PROC_START2
(
wl_evít_h™dÀr
, 
wl
, &wl->
evít_tsk
, 0, "wl_event_handler");

7417 
	`PROC_START
(
wl_evít_h™dÀr
, 
wl
, &wl->
evít_tsk
, 0);

7419 i‡(
wl
->
evít_tsk
.
thr_pid
 < 0)

7420 
ªt
 = -
ENOMEM
;

7421  
ªt
;

7422 
	}
}

7424 
	$wl_de°roy_evít_h™dÀr
(
wl_¥iv
 *
wl
)

7426 i‡(
wl
->
evít_tsk
.
thr_pid
 >= 0)

7427 
	`PROC_STOP
(&
wl
->
evít_tsk
);

7428 
	}
}

7430 
	$wl_ãrm_isˇn
(
wl_¥iv
 *
wl
)

7432 
wl_isˇn_˘æ
 *
isˇn
 = 
	`wl_to_isˇn
(
wl
);

7433 
	`WL_TRACE
(("In\n"));

7434 i‡(
wl
->
isˇn_⁄
 && 
isˇn
->
tsk
) {

7435 
isˇn
->
°©e
 = 
WL_ISCAN_STATE_IDLE
;

7436 
	`WL_INFO
(("SIGTERM\n"));

7437 
	`£nd_sig
(
SIGTERM
, 
isˇn
->
tsk
, 1);

7438 
	`WL_DBG
(("kthread_stop\n"));

7439 
	`kthªad_°›
(
isˇn
->
tsk
);

7440 
isˇn
->
tsk
 = 
NULL
;

7442 
	}
}

7444 
	$wl_nŸify_isˇn_com∂ëe
(
wl_isˇn_˘æ
 *
isˇn
, 
boﬁ
 
ab‹ãd
)

7446 
wl_¥iv
 *
wl
 = 
	`isˇn_to_wl
(
isˇn
);

7447 
√t_devi˚
 *
ndev
 = 
	`wl_to_¥mry_ndev
(
wl
);

7448 
Êags
;

7450 
	`WL_DBG
(("Enter \n"));

7451 i‡(!
	`wl_gë_drv_°©us
(
wl
, 
SCANNING
, 
ndev
)) {

7452 
	`wl_˛r_drv_°©us
(
wl
, 
SCANNING
, 
ndev
);

7453 
	`WL_ERR
(("Scan complete while deviceÇot scanning\n"));

7456 
	`•ö_lock_úqßve
(&
wl
->
cfgdrv_lock
, 
Êags
);

7457 
	`wl_˛r_drv_°©us
(
wl
, 
SCANNING
, 
ndev
);

7458 i‡(
	`likñy
(
wl
->
sˇn_ªque°
)) {

7459 
	`cfg80211_sˇn_d⁄e
(
wl
->
sˇn_ªque°
, 
ab‹ãd
);

7460 
wl
->
sˇn_ªque°
 = 
NULL
;

7462 
	`•ö_u∆ock_úqª°‹e
(&
wl
->
cfgdrv_lock
, 
Êags
);

7463 
wl
->
isˇn_kick°¨t
 = 
Ál£
;

7464 
	}
}

7466 
s32
 
	$wl_wakeup_isˇn
(
wl_isˇn_˘æ
 *
isˇn
)

7468 i‡(
	`likñy
(
isˇn
->
°©e
 !
WL_ISCAN_STATE_IDLE
)) {

7469 
	`WL_DBG
(("wake up iscan\n"));

7470 
	`up
(&
isˇn
->
sync
);

7474  -
EIO
;

7475 
	}
}

7477 
s32


7478 
	$wl_gë_isˇn_ªsu…s
(
wl_isˇn_˘æ
 *
isˇn
, 
u32
 *
°©us
,

7479 
wl_sˇn_ªsu…s
 **
bss_li°
)

7481 
wl_isˇn_ªsu…s
 
li°
;

7482 
wl_sˇn_ªsu…s
 *
ªsu…s
;

7483 
wl_isˇn_ªsu…s
 *
li°_buf
;

7484 
s32
 
îr
 = 0;

7486 
	`WL_DBG
(("Enter \n"));

7487 
	`mem£t
(
isˇn
->
sˇn_buf
, 0, 
WL_ISCAN_BUF_MAX
);

7488 
li°_buf
 = (
wl_isˇn_ªsu…s
 *)
isˇn
->
sˇn_buf
;

7489 
ªsu…s
 = &
li°_buf
->results;

7490 
ªsu…s
->
buÊí
 = 
WL_ISCAN_RESULTS_FIXED_SIZE
;

7491 
ªsu…s
->
vîsi⁄
 = 0;

7492 
ªsu…s
->
cou¡
 = 0;

7494 
	`mem£t
(&
li°
, 0, (list));

7495 
li°
.
ªsu…s
.
buÊí
 = 
	`htod32
(
WL_ISCAN_BUF_MAX
);

7496 
îr
 = 
	`wldev_iov¨_gëbuf
(
isˇn
->
dev
, "isˇƒesu…s", &
li°
,

7497 
WL_ISCAN_RESULTS_FIXED_SIZE
, 
isˇn
->
sˇn_buf
,

7498 
WL_ISCAN_BUF_MAX
, 
NULL
);

7499 i‡(
	`u∆ikñy
(
îr
)) {

7500 
	`WL_ERR
(("îr‹ (%d)\n", 
îr
));

7501  
îr
;

7503 
ªsu…s
->
buÊí
 = 
	`dtoh32
(results->buflen);

7504 
ªsu…s
->
vîsi⁄
 = 
	`dtoh32
(results->version);

7505 
ªsu…s
->
cou¡
 = 
	`dtoh32
(results->count);

7506 
	`WL_DBG
(("ªsu…s->cou¡ = %d\n", 
ªsu…s
->
cou¡
));

7507 
	`WL_DBG
(("ªsu…s->buÊí = %d\n", 
ªsu…s
->
buÊí
));

7508 *
°©us
 = 
	`dtoh32
(
li°_buf
->status);

7509 *
bss_li°
 = 
ªsu…s
;

7511  
îr
;

7512 
	}
}

7514 
s32
 
	$wl_isˇn_d⁄e
(
wl_¥iv
 *
wl
)

7516 
wl_isˇn_˘æ
 *
isˇn
 = 
wl
->iscan;

7517 
s32
 
îr
 = 0;

7519 
isˇn
->
°©e
 = 
WL_ISCAN_STATE_IDLE
;

7520 
	`muãx_lock
(&
wl
->
u§_sync
);

7521 
	`wl_öf‹m_bss
(
wl
);

7522 
	`wl_nŸify_isˇn_com∂ëe
(
isˇn
, 
Ál£
);

7523 
	`muãx_u∆ock
(&
wl
->
u§_sync
);

7525  
îr
;

7526 
	}
}

7528 
s32
 
	$wl_isˇn_≥ndög
(
wl_¥iv
 *
wl
)

7530 
wl_isˇn_˘æ
 *
isˇn
 = 
wl
->iscan;

7531 
s32
 
îr
 = 0;

7534 
	`mod_timî
(&
isˇn
->
timî
, 
jiffõs
 + 
	`m£cs_to_jiffõs
(isˇn->
timî_ms
));

7535 
isˇn
->
timî_⁄
 = 1;

7537  
îr
;

7538 
	}
}

7540 
s32
 
	$wl_isˇn_ö¥ogªss
(
wl_¥iv
 *
wl
)

7542 
wl_isˇn_˘æ
 *
isˇn
 = 
wl
->iscan;

7543 
s32
 
îr
 = 0;

7545 
	`muãx_lock
(&
wl
->
u§_sync
);

7546 
	`wl_öf‹m_bss
(
wl
);

7547 
	`wl_run_isˇn
(
isˇn
, 
NULL
, 
WL_SCAN_ACTION_CONTINUE
);

7548 
	`muãx_u∆ock
(&
wl
->
u§_sync
);

7550 
	`mod_timî
(&
isˇn
->
timî
, 
jiffõs
 + 
	`m£cs_to_jiffõs
(isˇn->
timî_ms
));

7551 
isˇn
->
timî_⁄
 = 1;

7553  
îr
;

7554 
	}
}

7556 
s32
 
	$wl_isˇn_ab‹ãd
(
wl_¥iv
 *
wl
)

7558 
wl_isˇn_˘æ
 *
isˇn
 = 
wl
->iscan;

7559 
s32
 
îr
 = 0;

7561 
isˇn
->
°©e
 = 
WL_ISCAN_STATE_IDLE
;

7562 
	`muãx_lock
(&
wl
->
u§_sync
);

7563 
	`wl_nŸify_isˇn_com∂ëe
(
isˇn
, 
åue
);

7564 
	`muãx_u∆ock
(&
wl
->
u§_sync
);

7566  
îr
;

7567 
	}
}

7569 
s32
 
	$wl_isˇn_thªad
(*
d©a
)

7571 
wl_isˇn_˘æ
 *
isˇn
 = (wl_isˇn_˘æ *)
d©a
;

7572 
wl_¥iv
 *
wl
 = 
	`isˇn_to_wl
(
isˇn
);

7573 
u32
 
°©us
;

7574 
îr
 = 0;

7576 
	`Ælow_sig«l
(
SIGTERM
);

7577 
°©us
 = 
WL_SCAN_RESULTS_PARTIAL
;

7578 
	`likñy
(!
	`down_öãºu±ibÀ
(&
isˇn
->
sync
))) {

7579 i‡(
	`kthªad_should_°›
())

7581 i‡(
isˇn
->
timî_⁄
) {

7582 
	`dñ_timî_sync
(&
isˇn
->
timî
);

7583 
isˇn
->
timî_⁄
 = 0;

7585 
	`muãx_lock
(&
wl
->
u§_sync
);

7586 
îr
 = 
	`wl_gë_isˇn_ªsu…s
(
isˇn
, &
°©us
, &
wl
->
bss_li°
);

7587 i‡(
	`u∆ikñy
(
îr
)) {

7588 
°©us
 = 
WL_SCAN_RESULTS_ABORTED
;

7589 
	`WL_ERR
(("Abort iscan\n"));

7591 
	`muãx_u∆ock
(&
wl
->
u§_sync
);

7592 
isˇn
->
isˇn_h™dÀr
[
°©us
] (
wl
);

7594 i‡(
isˇn
->
timî_⁄
) {

7595 
	`dñ_timî_sync
(&
isˇn
->
timî
);

7596 
isˇn
->
timî_⁄
 = 0;

7598 
	`WL_DBG
(("%†wa†ãrmö©ed\n", 
__func__
));

7601 
	}
}

7603 
	$wl_sˇn_timeout
(
d©a
)

7605 
wl_¥iv
 *
wl
 = (wl_¥iv *)
d©a
;

7607 i‡(
wl
->
sˇn_ªque°
) {

7608 
	`WL_ERR
(("timerÉxpired\n"));

7609 i‡(
wl
->
esˇn_⁄
)

7610 
	`wl_nŸify_esˇn_com∂ëe
(
wl
, wl->
esˇn_öfo
.
ndev
, 
åue
,Årue);

7612 
	`wl_nŸify_isˇn_com∂ëe
(
	`wl_to_isˇn
(
wl
), 
åue
);

7614 
	}
}

7615 
	$wl_isˇn_timî
(
d©a
)

7617 
wl_isˇn_˘æ
 *
isˇn
 = (wl_isˇn_˘æ *)
d©a
;

7619 i‡(
isˇn
) {

7620 
isˇn
->
timî_⁄
 = 0;

7621 
	`WL_DBG
(("timerÉxpired\n"));

7622 
	`wl_wakeup_isˇn
(
isˇn
);

7624 
	}
}

7626 
s32
 
	$wl_övoke_isˇn
(
wl_¥iv
 *
wl
)

7628 
wl_isˇn_˘æ
 *
isˇn
 = 
	`wl_to_isˇn
(
wl
);

7629 
îr
 = 0;

7631 i‡(
wl
->
isˇn_⁄
 && !
isˇn
->
tsk
) {

7632 
isˇn
->
°©e
 = 
WL_ISCAN_STATE_IDLE
;

7633 
	`£ma_öô
(&
isˇn
->
sync
, 0);

7634 
isˇn
->
tsk
 = 
	`kthªad_run
(
wl_isˇn_thªad
, iscan, "wl_iscan");

7635 i‡(
	`IS_ERR
(
isˇn
->
tsk
)) {

7636 
	`WL_ERR
(("CouldÇot create iscanÅhread\n"));

7637 
isˇn
->
tsk
 = 
NULL
;

7638  -
ENOMEM
;

7642  
îr
;

7643 
	}
}

7645 
	$wl_öô_isˇn_h™dÀr
(
wl_isˇn_˘æ
 *
isˇn
)

7647 
	`mem£t
(
isˇn
->
isˇn_h™dÀr
, 0, (iscan->iscan_handler));

7648 
isˇn
->
isˇn_h™dÀr
[
WL_SCAN_RESULTS_SUCCESS
] = 
wl_isˇn_d⁄e
;

7649 
isˇn
->
isˇn_h™dÀr
[
WL_SCAN_RESULTS_PARTIAL
] = 
wl_isˇn_ö¥ogªss
;

7650 
isˇn
->
isˇn_h™dÀr
[
WL_SCAN_RESULTS_PENDING
] = 
wl_isˇn_≥ndög
;

7651 
isˇn
->
isˇn_h™dÀr
[
WL_SCAN_RESULTS_ABORTED
] = 
wl_isˇn_ab‹ãd
;

7652 
isˇn
->
isˇn_h™dÀr
[
WL_SCAN_RESULTS_NO_MEM
] = 
wl_isˇn_ab‹ãd
;

7653 
	}
}

7655 
s32


7656 
	$wl_cfg80211_√tdev_nŸifõr_ˇŒ
(
nŸifõr_block
 * 
nb
,

7657 
°©e
,

7658 *
ndev
)

7660 
√t_devi˚
 *
dev
 = 
ndev
;

7661 
wúñess_dev
 *
wdev
 = 
dev
->
õì80211_±r
;

7662 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

7663 
ªf˙t
 = 0;

7665 
	`WL_DBG
(("Enter \n"));

7666 i‡(!
wdev
 || !
wl
 || 
dev
 =
	`wl_to_¥mry_ndev
(wl))

7667  
NOTIFY_DONE
;

7668 
°©e
) {

7669 
NETDEV_DOWN
:

7670 
	`w‹k_≥ndög
(&
wdev
->
˛ónup_w‹k
Ë&& 
ªf˙t
 < 100) {

7671 i‡(
ªf˙t
%5 == 0)

7672 
	`WL_ERR
(("%s : [NETDEV_DOWN] work_pending (%dÅh)\n",

7673 
__FUNCTION__
, 
ªf˙t
));

7674 
	`£t_cuºít_°©e
(
TASK_INTERRUPTIBLE
);

7675 
	`scheduÀ_timeout
(100);

7676 
	`£t_cuºít_°©e
(
TASK_RUNNING
);

7677 
ªf˙t
++;

7681 
NETDEV_UNREGISTER
:

7683 
	`wl_dóŒoc_√töfo
(
wl
, 
ndev
);

7685 
NETDEV_GOING_DOWN
:

7692 i‡(
	`wl_gë_drv_°©us
(
wl
, 
SCANNING
, 
dev
)) {

7693 i‡(
wl
->
esˇn_⁄
) {

7694 
	`wl_nŸify_esˇn_com∂ëe
(
wl
, 
dev
, 
åue
,Årue);

7699  
NOTIFY_DONE
;

7700 
	}
}

7701 
nŸifõr_block
 
	gwl_cfg80211_√tdev_nŸifõr
 = {

7702 .
nŸifõr_ˇŒ
 = 
wl_cfg80211_√tdev_nŸifõr_ˇŒ
,

7705 
s32
 
	$wl_nŸify_esˇn_com∂ëe
(
wl_¥iv
 *
wl
,

7706 
√t_devi˚
 *
ndev
,

7707 
boﬁ
 
ab‹ãd
, boﬁ 
fw_ab‹t
)

7709 
wl_sˇn_∑øms_t
 *
∑øms
 = 
NULL
;

7710 
s32
 
∑øms_size
 = 0;

7711 
s32
 
îr
 = 
BCME_OK
;

7712 
Êags
;

7713 
√t_devi˚
 *
dev
;

7715 
	`WL_DBG
(("Enter \n"));

7717 i‡(
wl
->
esˇn_öfo
.
ndev
 !=Çdev)

7719 
	`WL_ERR
(("ndev i†dif„ª¡ %∞%p\n", 
wl
->
esˇn_öfo
.
ndev
,Çdev));

7720  
îr
;

7723 i‡(
wl
->
sˇn_ªque°
) {

7724 i‡(
wl
->
sˇn_ªque°
->
dev
 =wl->
p2p_√t
)

7725 
dev
 = 
	`wl_to_¥mry_ndev
(
wl
);

7727 
dev
 = 
wl
->
sˇn_ªque°
->dev;

7730 
	`WL_DBG
(("wl->scan_request is NULL may be internal scan."

7732 
ndev
, 
	`wl_to_¥mry_ndev
(
wl
), wl->
p2p_√t
));

7733 
dev
 = 
ndev
;

7735 i‡(
fw_ab‹t
 && !
	`ö_©omic
()) {

7737 
∑øms
 = 
	`wl_cfg80211_sˇn_Æloc_∑øms
(-1, 0, &
∑øms_size
);

7738 i‡(
∑øms
 =
NULL
) {

7739 
	`WL_ERR
(("scanÖaramsállocation failed \n"));

7740 
îr
 = -
ENOMEM
;

7743 
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_SCAN
, 
∑øms
, 
∑øms_size
, 
åue
);

7744 i‡(
îr
 < 0) {

7745 
	`WL_ERR
(("scanábort failed \n"));

7749 i‡(
	`timî_≥ndög
(&
wl
->
sˇn_timeout
))

7750 
	`dñ_timî_sync
(&
wl
->
sˇn_timeout
);

7751 #i‡
	`deföed
(
ESCAN_RESULT_PATCH
)

7752 i‡(
	`likñy
(
wl
->
sˇn_ªque°
)) {

7753 
wl
->
bss_li°
 = (
wl_sˇn_ªsu…s_t
 *)wl->
esˇn_öfo
.
esˇn_buf
;

7754 
	`wl_öf‹m_bss
(
wl
);

7757 
	`•ö_lock_úqßve
(&
wl
->
cfgdrv_lock
, 
Êags
);

7758 #ifde‡
WL_SCHED_SCAN


7759 i‡(
wl
->
sched_sˇn_ªq
 && !wl->
sˇn_ªque°
) {

7760 
	`WL_PNO
((">>> REPORTING SCHED SCAN RESULTS \n"));

7761 i‡(
ab‹ãd
)

7762 
	`cfg80211_sched_sˇn_°›≥d
(
wl
->
sched_sˇn_ªq
->
wùhy
);

7764 
	`cfg80211_sched_sˇn_ªsu…s
(
wl
->
sched_sˇn_ªq
->
wùhy
);

7765 
wl
->
sched_sˇn_ru¬ög
 = 
FALSE
;

7766 
wl
->
sched_sˇn_ªq
 = 
NULL
;

7769 i‡(
	`likñy
(
wl
->
sˇn_ªque°
)) {

7770 
	`cfg80211_sˇn_d⁄e
(
wl
->
sˇn_ªque°
, 
ab‹ãd
);

7771 
wl
->
sˇn_ªque°
 = 
NULL
;

7773 i‡(
	`p2p_is_⁄
(
wl
))

7774 
	`wl_˛r_p2p_°©us
(
wl
, 
SCANNING
);

7775 
	`wl_˛r_drv_°©us
(
wl
, 
SCANNING
, 
dev
);

7776 
	`•ö_u∆ock_úqª°‹e
(&
wl
->
cfgdrv_lock
, 
Êags
);

7777 i‡(
∑øms
)

7778 
	`k‰ì
(
∑øms
);

7780  
îr
;

7781 
	}
}

7783 
s32
 
	$wl_esˇn_h™dÀr
(
wl_¥iv
 *
wl
,

7784 
√t_devi˚
 *
ndev
,

7785 c⁄° 
wl_evít_msg_t
 *
e
, *
d©a
)

7787 
s32
 
îr
 = 
BCME_OK
;

7788 
s32
 
°©us
 = 
	`¡oh32
(
e
->status);

7789 
wl_bss_öfo_t
 *
bi
;

7790 
wl_esˇn_ªsu…_t
 *
esˇn_ªsu…
;

7791 
wl_bss_öfo_t
 *
bss
 = 
NULL
;

7792 
wl_sˇn_ªsu…s_t
 *
li°
;

7793 
wifi_p2p_õ_t
 * 
p2p_õ
;

7794 
u32
 
bi_Àngth
;

7795 
u32
 
i
;

7796 
u8
 *
p2p_dev_addr
 = 
NULL
;

7798 
	`WL_DBG
(("ÉnterÉventÅype : %d, status : %d \n",

7799 
	`¡oh32
(
e
->
evít_ty≥
),Çtoh32”->
°©us
)));

7801 
	`muãx_lock
(&
wl
->
u§_sync
);

7803 i‡(
	`wl_gë_p2p_°©us
(
wl
, 
SCANNING
)) {

7804 i‡(
	`wl_gë_drv_°©us_Æl
(
wl
, 
SENDING_ACT_FRM
))

7805 
ndev
 = 
wl
->
afx_hdl
->
dev
;

7807 
ndev
 = 
wl
->
esˇn_öfo
.ndev;

7810 i‡(!
ndev
 || !
wl
->
esˇn_⁄
 ||

7811 (!
	`wl_gë_drv_°©us
(
wl
, 
SCANNING
, 
ndev
) &&

7812 !
wl
->
sched_sˇn_ru¬ög
)) {

7813 
	`WL_ERR
(("escan isÇotÑeadyÇdev %p wl->escan_on %d drv_status 0x%x\n",

7814 
ndev
, 
wl
->
esˇn_⁄
, 
	`wl_gë_drv_°©us
(wl, 
SCANNING
,Çdev)));

7815 
exô
;

7817 i‡(
°©us
 =
WLC_E_STATUS_PARTIAL
) {

7818 
	`WL_INFO
(("WLC_E_STATUS_PARTIAL \n"));

7819 
esˇn_ªsu…
 = (
wl_esˇn_ªsu…_t
 *Ë
d©a
;

7820 i‡(!
esˇn_ªsu…
) {

7821 
	`WL_ERR
(("InvalidÉscanÑesult (NULLÖointer)\n"));

7822 
exô
;

7824 i‡(
	`dtoh16
(
esˇn_ªsu…
->
bss_cou¡
) != 1) {

7825 
	`WL_ERR
(("InvÆid bss_cou¡ %d: ign‹ög\n", 
esˇn_ªsu…
->
bss_cou¡
));

7826 
exô
;

7828 
bi
 = 
esˇn_ªsu…
->
bss_öfo
;

7829 i‡(!
bi
) {

7830 
	`WL_ERR
(("InvalidÉscan bss info (NULLÖointer)\n"));

7831 
exô
;

7833 
bi_Àngth
 = 
	`dtoh32
(
bi
->
Àngth
);

7834 i‡(
bi_Àngth
 !(
	`dtoh32
(
esˇn_ªsu…
->
buÊí
Ë- 
WL_ESCAN_RESULTS_FIXED_SIZE
)) {

7835 
	`WL_ERR
(("InvÆid bss_öfÿÀngth %d: ign‹ög\n", 
bi_Àngth
));

7836 
exô
;

7839 i‡(!(
	`wl_to_wùhy
(
wl
)->
öãrÁ˚_modes
 & 
	`BIT
(
NL80211_IFTYPE_ADHOC
))) {

7840 i‡(
	`dtoh16
(
bi
->
ˇ∑bûôy
Ë& 
DOT11_CAP_IBSS
) {

7841 
	`WL_DBG
(("Ignoring IBSSÑesult\n"));

7842 
exô
;

7846 i‡(
	`wl_gë_drv_°©us_Æl
(
wl
, 
FINDING_COMMON_CHANNEL
)) {

7847 
p2p_dev_addr
 = 
	`wl_cfgp2p_ªåeive_p2p_dev_addr
(
bi
, 
bi_Àngth
);

7848 i‡(
p2p_dev_addr
 && !
	`memcmp
(p2p_dev_addr,

7849 
wl
->
afx_hdl
->
tx_d°_addr
.
o˘ë
, 
ETHER_ADDR_LEN
)) {

7850 
s32
 
ch™√l
 = 
	`CHSPEC_CHANNEL
(

7851 
	`wl_ch•ec_drivî_to_ho°
(
bi
->
ch™•ec
));

7852 
	`WL_DBG
(("ACTION FRAME SCAN : Pì∏" 
MACDBG
 " found, channel : %d\n",

7853 
	`MAC2STRDBG
(
wl
->
afx_hdl
->
tx_d°_addr
.
o˘ë
), 
ch™√l
));

7854 
	`wl_˛r_p2p_°©us
(
wl
, 
SCANNING
);

7855 
wl
->
afx_hdl
->
≥î_ch™
 = 
ch™√l
;

7856 
	`com∂ëe
(&
wl
->
a˘_‰m_sˇn
);

7857 
exô
;

7861 
cur_Àn
 = 0;

7862 
li°
 = (
wl_sˇn_ªsu…s_t
 *)
wl
->
esˇn_öfo
.
esˇn_buf
;

7863 #i‡
	`deföed
(
WLP2P
Ë&& deföed(
WL_ENABLE_P2P_IF
)

7864 i‡(
wl
->
p2p_√t
 && wl->
sˇn_ªque°
 &&

7865 
wl
->
sˇn_ªque°
->
dev
 =wl->
p2p_√t
) {

7867 i‡(
	`p2p_is_⁄
(
wl
Ë&& 
	`p2p_sˇn
(wl)) {

7869 #ifde‡
WL_HOST_BAND_MGMT


7870 
s32
 
ch™√l
 = 0;

7871 
s32
 
ch™√l_b™d
 = 0;

7874 i‡(
bi
->
Êags
 & 
WL_BSS_FLAGS_FROM_BEACON
)

7875 
exô
;

7876 i‡((
p2p_õ
 = 
	`wl_cfgp2p_föd_p2põ
(((
u8
 *Ë
bi
Ë+ bi->
õ_off£t
,

7877 
bi
->
õ_Àngth
)Ë=
NULL
) {

7878 
	`WL_ERR
(("Couldn't find P2PIE inÖrobe"

7880 
exô
;

7882 #ifde‡
WL_HOST_BAND_MGMT


7883 
ch™√l
 = 
	`CHSPEC_CHANNEL
(
	`wl_ch•ec_drivî_to_ho°
(
bi
->
ch™•ec
));

7884 
ch™√l_b™d
 = (
ch™√l
 > 
CH_MAX_2G_CHANNEL
) ?

7885 
WLC_BAND_5G
 : 
WLC_BAND_2G
;

7888 i‡((
wl
->
cuº_b™d
 =
WLC_BAND_5G
) &&

7889 (
ch™√l_b™d
 =
WLC_BAND_2G
)) {

7891 i‡(
	`wl_cfgp2p_ªåeive_p2∑ârib
(
p2p_õ
,

7892 
P2P_SEID_GROUP_ID
Ë!
NULL
)

7893 
exô
;

7897 
i
 = 0; i < 
li°
->
cou¡
; i++) {

7898 
bss
 = bs†? (
wl_bss_öfo_t
 *)((
uöçå
)bs†+ 
	`dtoh32
(bss->
Àngth
))

7899 : 
li°
->
bss_öfo
;

7901 i‡(!
	`bcmp
(&
bi
->
BSSID
, &
bss
->BSSID, 
ETHER_ADDR_LEN
) &&

7902 (
	`CHSPEC_BAND
(
	`wl_ch•ec_drivî_to_ho°
(
bi
->
ch™•ec
))

7903 =
	`CHSPEC_BAND
(
	`wl_ch•ec_drivî_to_ho°
(
bss
->
ch™•ec
))) &&

7904 
bi
->
SSID_Àn
 =
bss
->SSID_len &&

7905 !
	`bcmp
(
bi
->
SSID
, 
bss
->SSID, bi->
SSID_Àn
)) {

7910 i‡(!(
bss
->
Êags
 & 
WL_BSS_FLAGS_FROM_BEACON
) &&

7911 (
bi
->
Êags
 & 
WL_BSS_FLAGS_FROM_BEACON
))

7912 
exô
;

7914 
	`WL_DBG
(("%s("
MACDBG
"), i=%dÖrev: RSSI %d"

7916 
bss
->
SSID
, 
	`MAC2STRDBG
(
bi
->
BSSID
.
o˘ë
), 
i
,

7917 
bss
->
RSSI
, bss->
Êags
, 
bi
->RSSI, bi->flags));

7919 i‡((
bss
->
Êags
 & 
WL_BSS_FLAGS_RSSI_ONCHANNEL
) ==

7920 (
bi
->
Êags
 & 
WL_BSS_FLAGS_RSSI_ONCHANNEL
)) {

7924 
	`WL_SCAN
(("%s("
MACDBG
"), same onchan"

7926 
bss
->
SSID
, 
	`MAC2STRDBG
(
bi
->
BSSID
.
o˘ë
),

7927 
bss
->
RSSI
, 
bi
->RSSI));

7928 
bi
->
RSSI
 = 
	`MAX
(
bss
->RSSI, bi->RSSI);

7929 } i‡((
bss
->
Êags
 & 
WL_BSS_FLAGS_RSSI_ONCHANNEL
) &&

7930 (
bi
->
Êags
 & 
WL_BSS_FLAGS_RSSI_ONCHANNEL
) == 0) {

7934 
	`WL_SCAN
(("%s("
MACDBG
"),Örev onchan"

7936 
bss
->
SSID
, 
	`MAC2STRDBG
(
bi
->
BSSID
.
o˘ë
),

7937 
bss
->
RSSI
, 
bi
->RSSI));

7938 
bi
->
RSSI
 = 
bss
->RSSI;

7939 
bi
->
Êags
 |
WL_BSS_FLAGS_RSSI_ONCHANNEL
;

7941 i‡(
	`dtoh32
(
bss
->
Àngth
Ë!
bi_Àngth
) {

7942 
u32
 
¥ev_Àn
 = 
	`dtoh32
(
bss
->
Àngth
);

7944 
	`WL_SCAN
(("bss infoÑeplacement"

7946 
bss
->
õ_Àngth
, 
bi
->ie_length));

7947 
	`WL_DBG
(("%s("
MACDBG
"),Ñeplacement!(%d -> %d)\n",

7948 
bss
->
SSID
, 
	`MAC2STRDBG
(
bi
->
BSSID
.
o˘ë
),

7949 
¥ev_Àn
, 
bi_Àngth
));

7951 i‡(
li°
->
buÊí
 - 
¥ev_Àn
 + 
bi_Àngth


7952 > 
ESCAN_BUF_SIZE
) {

7953 
	`WL_ERR
(("Buffer isÅoo small: keepÅhe"

7956 
bss
->
RSSI
 = 
bi
->RSSI;

7957 
bss
->
Êags
 |(
bi
->flags

7958 & 
WL_BSS_FLAGS_RSSI_ONCHANNEL
);

7959 
exô
;

7962 i‡(
i
 < 
li°
->
cou¡
 - 1) {

7964 
	`memmove
((
u8
 *)
bss
 + 
bi_Àngth
,

7965 (
u8
 *)
bss
 + 
¥ev_Àn
,

7966 
li°
->
buÊí
 - 
cur_Àn
 - 
¥ev_Àn
);

7968 
li°
->
buÊí
 -
¥ev_Àn
;

7969 
li°
->
buÊí
 +
bi_Àngth
;

7971 
li°
->
vîsi⁄
 = 
	`dtoh32
(
bi
->version);

7972 
	`mem˝y
((
u8
 *)
bss
, (u8 *)
bi
, 
bi_Àngth
);

7973 
exô
;

7975 
cur_Àn
 +
	`dtoh32
(
bss
->
Àngth
);

7977 i‡(
bi_Àngth
 > 
ESCAN_BUF_SIZE
 - 
li°
->
buÊí
) {

7978 
	`WL_ERR
(("Buffer isÅoo small: ignoring\n"));

7979 
exô
;

7981 
	`mem˝y
(&(
wl
->
esˇn_öfo
.
esˇn_buf
[
li°
->
buÊí
]), 
bi
, 
bi_Àngth
);

7982 
li°
->
vîsi⁄
 = 
	`dtoh32
(
bi
->version);

7983 
li°
->
buÊí
 +
bi_Àngth
;

7984 
li°
->
cou¡
++;

7988 i‡(
°©us
 =
WLC_E_STATUS_SUCCESS
) {

7989 
wl
->
esˇn_öfo
.
esˇn_°©e
 = 
WL_ESCAN_STATE_IDLE
;

7990 i‡(
	`wl_gë_drv_°©us_Æl
(
wl
, 
FINDING_COMMON_CHANNEL
)) {

7991 
	`WL_INFO
(("ACTION FRAME SCAN DONE\n"));

7992 
	`wl_˛r_p2p_°©us
(
wl
, 
SCANNING
);

7993 
	`wl_˛r_drv_°©us
(
wl
, 
SCANNING
, wl->
afx_hdl
->
dev
);

7994 i‡(
wl
->
afx_hdl
->
≥î_ch™
 =
WL_INVALID
)

7995 
	`com∂ëe
(&
wl
->
a˘_‰m_sˇn
);

7996 } i‡((
	`likñy
(
wl
->
sˇn_ªque°
)Ë|| (wl->
sched_sˇn_ru¬ög
)) {

7997 
	`WL_INFO
(("ESCAN COMPLETED\n"));

7998 
wl
->
bss_li°
 = (
wl_sˇn_ªsu…s_t
 *)wl->
esˇn_öfo
.
esˇn_buf
;

7999 
	`wl_öf‹m_bss
(
wl
);

8000 
	`wl_nŸify_esˇn_com∂ëe
(
wl
, 
ndev
, 
Ál£
, false);

8003 i‡(
°©us
 =
WLC_E_STATUS_ABORT
) {

8004 
wl
->
esˇn_öfo
.
esˇn_°©e
 = 
WL_ESCAN_STATE_IDLE
;

8005 i‡(
	`wl_gë_drv_°©us_Æl
(
wl
, 
FINDING_COMMON_CHANNEL
)) {

8006 
	`WL_INFO
(("ACTION FRAME SCAN DONE\n"));

8007 
	`wl_˛r_drv_°©us
(
wl
, 
SCANNING
, wl->
afx_hdl
->
dev
);

8008 
	`wl_˛r_p2p_°©us
(
wl
, 
SCANNING
);

8009 i‡(
wl
->
afx_hdl
->
≥î_ch™
 =
WL_INVALID
)

8010 
	`com∂ëe
(&
wl
->
a˘_‰m_sˇn
);

8011 } i‡((
	`likñy
(
wl
->
sˇn_ªque°
)Ë|| (wl->
sched_sˇn_ru¬ög
)) {

8012 
	`WL_INFO
(("ESCAN ABORTED\n"));

8013 
wl
->
bss_li°
 = (
wl_sˇn_ªsu…s_t
 *)wl->
esˇn_öfo
.
esˇn_buf
;

8014 
	`wl_öf‹m_bss
(
wl
);

8015 
	`wl_nŸify_esˇn_com∂ëe
(
wl
, 
ndev
, 
åue
, 
Ál£
);

8018 i‡(
°©us
 =
WLC_E_STATUS_NEWSCAN
)

8020 
esˇn_ªsu…
 = (
wl_esˇn_ªsu…_t
 *Ë
d©a
;

8021 
	`WL_ERR
(("WLC_E_STATUS_NEWSCAN : sˇn_ªque°[%p]\n", 
wl
->
sˇn_ªque°
));

8022 
	`WL_ERR
(("sync_id[%d], bss_cou¡[%d]\n", 
esˇn_ªsu…
->
sync_id
,

8023 
esˇn_ªsu…
->
bss_cou¡
));

8025 
	`WL_ERR
(("u√x≥˘ed Esˇ¿Evíà%d :áb‹t\n", 
°©us
));

8026 
wl
->
esˇn_öfo
.
esˇn_°©e
 = 
WL_ESCAN_STATE_IDLE
;

8027 i‡(
	`wl_gë_drv_°©us_Æl
(
wl
, 
FINDING_COMMON_CHANNEL
)) {

8028 
	`WL_INFO
(("ACTION FRAME SCAN DONE\n"));

8029 
	`wl_˛r_p2p_°©us
(
wl
, 
SCANNING
);

8030 
	`wl_˛r_drv_°©us
(
wl
, 
SCANNING
, wl->
afx_hdl
->
dev
);

8031 i‡(
wl
->
afx_hdl
->
≥î_ch™
 =
WL_INVALID
)

8032 
	`com∂ëe
(&
wl
->
a˘_‰m_sˇn
);

8033 } i‡((
	`likñy
(
wl
->
sˇn_ªque°
)Ë|| (wl->
sched_sˇn_ru¬ög
)) {

8034 
wl
->
bss_li°
 = (
wl_sˇn_ªsu…s_t
 *)wl->
esˇn_öfo
.
esˇn_buf
;

8035 
	`wl_öf‹m_bss
(
wl
);

8036 
	`wl_nŸify_esˇn_com∂ëe
(
wl
, 
ndev
, 
åue
, 
Ál£
);

8039 
exô
:

8040 
	`muãx_u∆ock
(&
wl
->
u§_sync
);

8041  
îr
;

8042 
	}
}

8043 
	$wl_cfg80211_c⁄cuºít_rﬂm
(
wl_¥iv
 *
wl
, 
íabÀ
)

8045 
u32
 
c⁄√˘ed_˙t
 = 
	`wl_gë_drv_°©us_Æl
(
wl
, 
CONNECTED
);

8046 
√t_öfo
 *
ôî
, *
√xt
;

8047 
îr
;

8049 i‡(!
wl
->
rﬂmoff_⁄_c⁄cuºít
)

8051 i‡(
íabÀ
 && 
c⁄√˘ed_˙t
 > 1) {

8052 
	`f‹_óch_ndev
(
wl
, 
ôî
, 
√xt
) {

8054 i‡((
îr
 = 
	`wldev_iov¨_gëöt
(
ôî
->
ndev
, "roam_off",

8055 (
s32
 *)&
ôî
->
rﬂm_off
)Ë!
BCME_OK
) {

8056 
	`WL_ERR
(("%s:FailedÅo get currentÑoam settingÉrr %d\n",

8057 
ôî
->
ndev
->
«me
, 
îr
));

8060 i‡((
îr
 = 
	`wldev_iov¨_£töt
(
ôî
->
ndev
, "rﬂm_off", 1)Ë!
BCME_OK
) {

8061 
	`WL_ERR
((" %s:failedÅo setÑoam_off : %d\n",

8062 
ôî
->
ndev
->
«me
, 
îr
));

8066 i‡(!
íabÀ
) {

8067 
	`f‹_óch_ndev
(
wl
, 
ôî
, 
√xt
) {

8068 i‡(
ôî
->
rﬂm_off
 !
WL_INVALID
) {

8069 i‡((
îr
 = 
	`wldev_iov¨_£töt
(
ôî
->
ndev
, "roam_off",

8070 
ôî
->
rﬂm_off
)Ë=
BCME_OK
)

8071 
ôî
->
rﬂm_off
 = 
WL_INVALID
;

8073 
	`WL_ERR
((" %s:failedÅo setÑoam_off : %d\n",

8074 
ôî
->
ndev
->
«me
, 
îr
));

8080 
	}
}

8082 
	$wl_cfg80211_dëîmöe_vsdb_mode
(
wl_¥iv
 *
wl
)

8084 
√t_öfo
 *
ôî
, *
√xt
;

8085 
u32
 
ch™
 = 0;

8086 
u32
 
ch™•ec
 = 0;

8087 
u32
 
¥ev_ch™
 = 0;

8088 
u32
 
c⁄√˘ed_˙t
 = 
	`wl_gë_drv_°©us_Æl
(
wl
, 
CONNECTED
);

8089 
wl
->
vsdb_mode
 = 
Ál£
;

8091 i‡(
c⁄√˘ed_˙t
 <= 1) {

8094 
	`f‹_óch_ndev
(
wl
, 
ôî
, 
√xt
) {

8095 
ch™•ec
 = 0;

8096 
ch™
 = 0;

8097 i‡(
	`wl_gë_drv_°©us
(
wl
, 
CONNECTED
, 
ôî
->
ndev
)) {

8098 i‡(
	`wldev_iov¨_gëöt
(
ôî
->
ndev
, "chanspec",

8099 (
s32
 *)&
ch™•ec
Ë=
BCME_OK
) {

8100 
ch™
 = 
	`CHSPEC_CHANNEL
(
ch™•ec
);

8101 i‡(
	`CHSPEC_IS40
(
ch™•ec
)) {

8102 i‡(
	`CHSPEC_SB_UPPER
(
ch™•ec
))

8103 
ch™
 +
CH_10MHZ_APART
;

8105 
ch™
 -
CH_10MHZ_APART
;

8107 
	`wl_upd©e_¥of
(
wl
, 
ôî
->
ndev
, 
NULL
,

8108 &
ch™
, 
WL_PROF_CHAN
);

8110 i‡(!
¥ev_ch™
 && 
ch™
)

8111 
¥ev_ch™
 = 
ch™
;

8112 i‡(
¥ev_ch™
 && (¥ev_ch™ !
ch™
))

8113 
wl
->
vsdb_mode
 = 
åue
;

8117 
	}
}

8118 
s32
 
	$wl_nŸifõr_ch™ge_°©e
(
wl_¥iv
 *
wl
, 
√t_öfo
 *
_√t_öfo
,

8119 
wl_°©us
 
°©e
, 
boﬁ
 
£t
)

8121 
s32
 
pm
 = 
PM_FAST
;

8122 
s32
 
îr
 = 
BCME_OK
;

8123 
u32
 
ch™
 = 0;

8124 
√t_öfo
 *
ôî
, *
√xt
;

8125 
√t_devi˚
 *
¥im¨y_dev
 = 
	`wl_to_¥mry_ndev
(
wl
);

8126 
	`WL_DBG
(("Enter state %d set %d _net_info->pm_restore %d iface %s\n",

8127 
°©e
, 
£t
, 
_√t_öfo
->
pm_ª°‹e
, _√t_öfo->
ndev
->
«me
));

8129 i‡(
°©e
 !
WL_STATUS_CONNECTED
)

8132 i‡(
£t
) {

8133 
	`wl_cfg80211_c⁄cuºít_rﬂm
(
wl
, 1);

8135 i‡(
	`wl_gë_mode_by_√tdev
(
wl
, 
_√t_öfo
->
ndev
Ë=
WL_MODE_AP
) {

8136 
pm
 = 
PM_OFF
;

8137 
	`WL_DBG
(("%s:APÖowî savê%s\n", 
_√t_öfo
->
ndev
->
«me
,

8138 
pm
 ? "enabled" : "disabled"));

8139 i‡((
îr
 = 
	`wldev_io˘l
(
_√t_öfo
->
ndev
, 
WLC_SET_PM
,

8140 &
pm
, ’m), 
åue
)) != 0) {

8141 i‡(
îr
 =-
ENODEV
)

8142 
	`WL_DBG
(("%s:net_device isÇotÑeady\n",

8143 
_√t_öfo
->
ndev
->
«me
));

8145 
	`WL_ERR
(("%s:îr‹ (%d)\n", 
_√t_öfo
->
ndev
->
«me
, 
îr
));

8147 i‡(
	`wl_add_ªmove_evítmsg
(
¥im¨y_dev
, 
WLC_E_P2P_PROBREQ_MSG
, 
Ál£
))

8148 
	`WL_ERR
((" failedÅo unset WLC_E_P2P_PROPREQ_MSG\n"));

8151 
	`wl_cfg80211_dëîmöe_vsdb_mode
(
wl
);

8152 
pm
 = 
PM_OFF
;

8153 
	`f‹_óch_ndev
(
wl
, 
ôî
, 
√xt
) {

8154 i‡((!
wl
->
vsdb_mode
Ë&& (
ôî
->
ndev
 !
_√t_öfo
->ndev)) {

8161 
ôî
->
pm_ª°‹e
 = 
åue
;

8162 
îr
 = 
	`wldev_io˘l
(
ôî
->
ndev
, 
WLC_GET_PM
, &ôî->
pm
,

8163 (
ôî
->
pm
), 
Ál£
);

8164 
	`WL_DBG
(("%s:powî savê%s\n", 
ôî
->
ndev
->
«me
,

8165 
ôî
->
pm
 ? "enabled" : "disabled"));

8166 i‡((
îr
 = 
	`wldev_io˘l
(
ôî
->
ndev
, 
WLC_SET_PM
, &
pm
,

8167 (
pm
), 
åue
)) != 0) {

8168 i‡(
îr
 =-
ENODEV
)

8169 
	`WL_DBG
(("%s:√tdevÇŸÑódy\n", 
ôî
->
ndev
->
«me
));

8171 
	`WL_ERR
(("%s:îr‹ (%d)\n", 
ôî
->
ndev
->
«me
, 
îr
));

8172 
ôî
->
ndev
->
õì80211_±r
->
ps
 = 
pm
 ? 
åue
: 
Ál£
;

8177 
ch™
 = 0;

8179 
	`wl_upd©e_¥of
(
wl
, 
_√t_öfo
->
ndev
, 
NULL
, &
ch™
, 
WL_PROF_CHAN
);

8180 
	`wl_cfg80211_dëîmöe_vsdb_mode
(
wl
);

8181 
	`f‹_óch_ndev
(
wl
, 
ôî
, 
√xt
) {

8182 i‡(
ôî
->
pm_ª°‹e
) {

8183 
	`WL_DBG
(("%s:restoringÖower save %s\n",

8184 
ôî
->
ndev
->
«me
, (ôî->
pm
 ? "enabled" : "disabled")));

8185 
îr
 = 
	`wldev_io˘l
(
ôî
->
ndev
,

8186 
WLC_SET_PM
, &
ôî
->
pm
, (ôî->pm), 
åue
);

8187 i‡(
	`u∆ikñy
(
îr
)) {

8188 i‡(
îr
 =-
ENODEV
)

8189 
	`WL_DBG
(("%s:√tdevÇŸÑódy\n", 
ôî
->
ndev
->
«me
));

8191 
	`WL_ERR
(("%s:îr‹(%d)\n", 
ôî
->
ndev
->
«me
, 
îr
));

8194 
ôî
->
pm_ª°‹e
 = 0;

8197 
	`wl_cfg80211_c⁄cuºít_rﬂm
(
wl
, 0);

8199  
îr
;

8200 
	}
}

8201 
s32
 
	$wl_öô_sˇn
(
wl_¥iv
 *
wl
)

8203 
wl_isˇn_˘æ
 *
isˇn
 = 
	`wl_to_isˇn
(
wl
);

8204 
îr
 = 0;

8206 i‡(
wl
->
isˇn_⁄
) {

8207 
isˇn
->
dev
 = 
	`wl_to_¥mry_ndev
(
wl
);

8208 
isˇn
->
°©e
 = 
WL_ISCAN_STATE_IDLE
;

8209 
	`wl_öô_isˇn_h™dÀr
(
isˇn
);

8210 
isˇn
->
timî_ms
 = 
WL_ISCAN_TIMER_INTERVAL_MS
;

8211 
	`öô_timî
(&
isˇn
->
timî
);

8212 
isˇn
->
timî
.
d©a
 = () iscan;

8213 
isˇn
->
timî
.
fun˘i⁄
 = 
wl_isˇn_timî
;

8214 
	`£ma_öô
(&
isˇn
->
sync
, 0);

8215 
isˇn
->
tsk
 = 
	`kthªad_run
(
wl_isˇn_thªad
, iscan, "wl_iscan");

8216 i‡(
	`IS_ERR
(
isˇn
->
tsk
)) {

8217 
	`WL_ERR
(("CouldÇot create iscanÅhread\n"));

8218 
isˇn
->
tsk
 = 
NULL
;

8219  -
ENOMEM
;

8221 
isˇn
->
d©a
 = 
wl
;

8222 } i‡(
wl
->
esˇn_⁄
) {

8223 
wl
->
evt_h™dÀr
[
WLC_E_ESCAN_RESULT
] = 
wl_esˇn_h™dÀr
;

8224 
wl
->
esˇn_öfo
.
esˇn_°©e
 = 
WL_ESCAN_STATE_IDLE
;

8227 
	`öô_timî
(&
wl
->
sˇn_timeout
);

8228 
wl
->
sˇn_timeout
.
d©a
 = () wl;

8229 
wl
->
sˇn_timeout
.
fun˘i⁄
 = 
wl_sˇn_timeout
;

8231  
îr
;

8232 
	}
}

8234 
s32
 
	$wl_öô_¥iv
(
wl_¥iv
 *
wl
)

8236 
wùhy
 *wùhy = 
	`wl_to_wùhy
(
wl
);

8237 
√t_devi˚
 *
ndev
 = 
	`wl_to_¥mry_ndev
(
wl
);

8238 
s32
 
îr
 = 0;

8240 
wl
->
sˇn_ªque°
 = 
NULL
;

8241 
wl
->
pwr_ßve
 = !!(
wùhy
->
Êags
 & 
WIPHY_FLAG_PS_ON_BY_DEFAULT
);

8242 
wl
->
isˇn_⁄
 = 
Ál£
;

8243 
wl
->
esˇn_⁄
 = 
åue
;

8244 
wl
->
rﬂm_⁄
 = 
Ál£
;

8245 
wl
->
isˇn_kick°¨t
 = 
Ál£
;

8246 
wl
->
a˘ive_sˇn
 = 
åue
;

8247 
wl
->
rf_blocked
 = 
Ál£
;

8248 
wl
->
vsdb_mode
 = 
Ál£
;

8249 
wl
->
wlfc_⁄
 = 
Ál£
;

8250 
wl
->
rﬂmoff_⁄_c⁄cuºít
 = 
åue
;

8252 
	`£t_bô
(
WL_STATUS_CONNECTED
, &
wl
->
öãºe°ed_°©e
);

8253 
	`•ö_lock_öô
(&
wl
->
cfgdrv_lock
);

8254 
	`muãx_öô
(&
wl
->
io˘l_buf_sync
);

8255 
	`öô_waôqueue_hód
(&
wl
->
√tif_ch™ge_evít
);

8256 
	`öô_com∂ëi⁄
(&
wl
->
£nd_af_d⁄e
);

8257 
	`öô_com∂ëi⁄
(&
wl
->
iÁ˚_dißbÀ
);

8258 
	`wl_öô_eq
(
wl
);

8259 
îr
 = 
	`wl_öô_¥iv_mem
(
wl
);

8260 i‡(
îr
)

8261  
îr
;

8262 i‡(
	`wl_¸óã_evít_h™dÀr
(
wl
))

8263  -
ENOMEM
;

8264 
	`wl_öô_evít_h™dÀr
(
wl
);

8265 
	`muãx_öô
(&
wl
->
u§_sync
);

8266 
	`muãx_öô
(&
wl
->
evít_sync
);

8267 
îr
 = 
	`wl_öô_sˇn
(
wl
);

8268 i‡(
îr
)

8269  
îr
;

8270 
	`wl_öô_c⁄f
(
wl
->
c⁄f
);

8271 
	`wl_öô_¥of
(
wl
, 
ndev
);

8272 
	`wl_lök_down
(
wl
);

8273 
	`DNGL_FUNC
(
dhd_cfg80211_öô
, (
wl
));

8275  
îr
;

8276 
	}
}

8278 
	$wl_deöô_¥iv
(
wl_¥iv
 *
wl
)

8280 
	`DNGL_FUNC
(
dhd_cfg80211_deöô
, (
wl
));

8281 
	`wl_de°roy_evít_h™dÀr
(
wl
);

8282 
	`wl_Êush_eq
(
wl
);

8283 
	`wl_lök_down
(
wl
);

8284 
	`dñ_timî_sync
(&
wl
->
sˇn_timeout
);

8285 
	`wl_ãrm_isˇn
(
wl
);

8286 
	`wl_deöô_¥iv_mem
(
wl
);

8287 
	`uƒegi°î_√tdevi˚_nŸifõr
(&
wl_cfg80211_√tdev_nŸifõr
);

8288 
	}
}

8290 #i‡
deföed
(
WLP2P
Ë&& deföed(
WL_ENABLE_P2P_IF
)

8291 
s32
 
	$wl_cfg80211_©èch_p2p
()

8293 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

8295 
	`WL_TRACE
(("Enter \n"));

8297 i‡(
	`wl_cfgp2p_ªgi°î_ndev
(
wl
) < 0) {

8298 
	`WL_ERR
(("%s: P2Páâach faûed. \n", 
__func__
));

8299  -
ENODEV
;

8303 
	}
}

8305 
s32
 
	$wl_cfg80211_dëach_p2p
()

8307 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

8308 
wúñess_dev
 *
wdev
 = 
wl
->
p2p_wdev
;

8310 
	`WL_DBG
(("Enter \n"));

8311 i‡(!
wdev
 || !
wl
) {

8312 
	`WL_ERR
(("Invalid Ptr\n"));

8313  -
EINVAL
;

8316 
	`wl_cfgp2p_uƒegi°î_ndev
(
wl
);

8318 
wl
->
p2p_wdev
 = 
NULL
;

8319 
wl
->
p2p_√t
 = 
NULL
;

8320 
	`WL_DBG
(("Fªeög 0x%08x \n", ()
wdev
));

8321 
	`k‰ì
(
wdev
);

8324 
	}
}

8327 
s32
 
	$wl_cfg80211_©èch_po°
(
√t_devi˚
 *
ndev
)

8329 
wl_¥iv
 * 
wl
 = 
NULL
;

8330 
s32
 
îr
 = 0;

8331 
	`WL_TRACE
(("In\n"));

8332 i‡(
	`u∆ikñy
(!
ndev
)) {

8333 
	`WL_ERR
(("ndev is invaild\n"));

8334  -
ENODEV
;

8336 
wl
 = 
wlcfg_drv_¥iv
;

8337 i‡(
	`u∆ikñy
(!
wl
)) {

8338 
	`WL_ERR
(("wl is invaild\n"));

8339  -
EINVAL
;

8341 i‡(!
	`wl_gë_drv_°©us
(
wl
, 
READY
, 
ndev
)) {

8342 i‡(
wl
->
wdev
 &&

8343 
	`wl_cfgp2p_suµ‹ãd
(
wl
, 
ndev
)) {

8344 #i‡!
	`deföed
(
WL_ENABLE_P2P_IF
)

8345 
wl
->
wdev
->
wùhy
->
öãrÁ˚_modes
 |=

8346 (
	`BIT
(
NL80211_IFTYPE_P2P_CLIENT
)|

8347 
	`BIT
(
NL80211_IFTYPE_P2P_GO
));

8349 i‡((
îr
 = 
	`wl_cfgp2p_öô_¥iv
(
wl
)) != 0)

8350 
Áû
;

8352 #i‡
	`deföed
(
WLP2P
Ë&& deföed(
WL_ENABLE_P2P_IF
)

8353 i‡(
wl
->
p2p_√t
) {

8355 
	`mem˝y
(
wl
->
p2p_√t
->
dev_addr
, 
ndev
->dev_addr, 
ETH_ALEN
);

8356 
wl
->
p2p_√t
->
dev_addr
[0] |= 0x02;

8357 
	`WL_ERR
(("%s:Ö2p_dev_addr="
MACDBG
 "\n",

8358 
wl
->
p2p_√t
->
«me
,

8359 
	`MAC2STRDBG
(
wl
->
p2p_√t
->
dev_addr
)));

8361 
	`WL_ERR
(("p2p_netÇot yetÖopulated."

8363  -
ENODEV
;

8367 
wl
->
p2p_suµ‹ãd
 = 
åue
;

8370 
	`wl_£t_drv_°©us
(
wl
, 
READY
, 
ndev
);

8371 
Áû
:

8372  
îr
;

8373 
	}
}

8375 
s32
 
	$wl_cfg80211_©èch
(
√t_devi˚
 *
ndev
, *
d©a
)

8377 
wúñess_dev
 *
wdev
;

8378 
wl_¥iv
 *
wl
;

8379 
s32
 
îr
 = 0;

8380 
devi˚
 *
dev
;

8382 
	`WL_TRACE
(("In\n"));

8383 i‡(!
ndev
) {

8384 
	`WL_ERR
(("ndev is invaild\n"));

8385  -
ENODEV
;

8387 
	`WL_DBG
(("fun¯%p\n", 
	`wl_cfg80211_gë_∑ª¡_dev
()));

8388 
dev
 = 
	`wl_cfg80211_gë_∑ª¡_dev
();

8390 
wdev
 = 
	`kzÆloc
((*wdev), 
GFP_KERNEL
);

8391 i‡(
	`u∆ikñy
(!
wdev
)) {

8392 
	`WL_ERR
(("CouldÇotállocate wireless device\n"));

8393  -
ENOMEM
;

8395 
îr
 = 
	`wl_£tup_wùhy
(
wdev
, 
dev
);

8396 i‡(
	`u∆ikñy
(
îr
)) {

8397 
	`k‰ì
(
wdev
);

8398  -
ENOMEM
;

8400 
wdev
->
i·y≥
 = 
	`wl_mode_to_∆80211_i·y≥
(
WL_MODE_BSS
);

8401 
wl
 = (
wl_¥iv
 *)
	`wùhy_¥iv
(
wdev
->
wùhy
);

8402 
wl
->
wdev
 = wdev;

8403 
wl
->
pub
 = 
d©a
;

8404 
	`INIT_LIST_HEAD
(&
wl
->
√t_li°
);

8405 
ndev
->
õì80211_±r
 = 
wdev
;

8406 
	`SET_NETDEV_DEV
(
ndev
, 
	`wùhy_dev
(
wdev
->
wùhy
));

8407 
wdev
->
√tdev
 = 
ndev
;

8408 
wl
->
°©e_nŸifõr
 = 
wl_nŸifõr_ch™ge_°©e
;

8409 
îr
 = 
	`wl_Æloc_√töfo
(
wl
, 
ndev
, 
wdev
, 
WL_MODE_BSS
, 
PM_ENABLE
);

8410 i‡(
îr
) {

8411 
	`WL_ERR
(("FaûedÅÿÆlo¯√t_öfÿ(%d)\n", 
îr
));

8412 
cfg80211_©èch_out
;

8414 
îr
 = 
	`wl_öô_¥iv
(
wl
);

8415 i‡(
îr
) {

8416 
	`WL_ERR
(("FaûedÅÿöô iwm_¥iv (%d)\n", 
îr
));

8417 
cfg80211_©èch_out
;

8420 
îr
 = 
	`wl_£tup_rfkûl
(
wl
, 
TRUE
);

8421 i‡(
îr
) {

8422 
	`WL_ERR
(("FaûedÅÿ£tu∞rfkû»%d\n", 
îr
));

8423 
cfg80211_©èch_out
;

8425 
îr
 = 
	`ªgi°î_√tdevi˚_nŸifõr
(&
wl_cfg80211_√tdev_nŸifõr
);

8426 i‡(
îr
) {

8427 
	`WL_ERR
(("FaûedÅÿªgi°îÇŸifõæ %d\n", 
îr
));

8428 
cfg80211_©èch_out
;

8430 #i‡
	`deföed
(
COEX_DHCP
)

8431 i‡(
	`wl_cfg80211_btc€x_öô
(
wl
))

8432 
cfg80211_©èch_out
;

8435 
wlcfg_drv_¥iv
 = 
wl
;

8437 #i‡
	`deföed
(
WLP2P
Ë&& deföed(
WL_ENABLE_P2P_IF
)

8438 
îr
 = 
	`wl_cfg80211_©èch_p2p
();

8439 i‡(
îr
)

8440 
cfg80211_©èch_out
;

8443  
îr
;

8445 
cfg80211_©èch_out
:

8446 
îr
 = 
	`wl_£tup_rfkûl
(
wl
, 
FALSE
);

8447 
	`wl_‰ì_wdev
(
wl
);

8448  
îr
;

8449 
	}
}

8451 
	$wl_cfg80211_dëach
(*
∑ø
)

8453 
wl_¥iv
 *
wl
;

8455 ()
∑ø
;

8456 
wl
 = 
wlcfg_drv_¥iv
;

8458 
	`WL_TRACE
(("In\n"));

8460 #i‡
	`deföed
(
COEX_DHCP
)

8461 
	`wl_cfg80211_btc€x_deöô
(
wl
);

8464 
	`wl_£tup_rfkûl
(
wl
, 
FALSE
);

8465 i‡(
wl
->
p2p_suµ‹ãd
) {

8466 i‡(
	`timî_≥ndög
(&
wl
->
p2p
->
li°í_timî
))

8467 
	`dñ_timî_sync
(&
wl
->
p2p
->
li°í_timî
);

8468 
	`wl_cfgp2p_deöô_¥iv
(
wl
);

8471 #i‡
	`deföed
(
WLP2P
Ë&& deföed(
WL_ENABLE_P2P_IF
)

8472 
	`wl_cfg80211_dëach_p2p
();

8474 
	`wl_deöô_¥iv
(
wl
);

8475 
wlcfg_drv_¥iv
 = 
NULL
;

8476 
	`wl_cfg80211_˛ór_∑ª¡_dev
();

8477 
	`wl_‰ì_wdev
(
wl
);

8481 
	}
}

8483 
	$wl_wakeup_evít
(
wl_¥iv
 *
wl
)

8485 i‡(
wl
->
evít_tsk
.
thr_pid
 >= 0) {

8486 
	`DHD_OS_WAKE_LOCK
(
wl
->
pub
);

8487 
	`up
(&
wl
->
evít_tsk
.
£ma
);

8489 
	}
}

8491 
	$wl_is_p2p_evít
(
wl_evít_q
 *
e
)

8493 
e
->
ëy≥
) {

8498 
WLC_E_P2P_PROBREQ_MSG
:

8499 
WLC_E_P2P_DISC_LISTEN_COMPLETE
:

8500 
WLC_E_ACTION_FRAME_RX
:

8501 
WLC_E_ACTION_FRAME_OFF_CHAN_COMPLETE
:

8502 
WLC_E_ACTION_FRAME_COMPLETE
:

8504 i‡(
e
->
emsg
.
ifidx
 != 0) {

8505 
	`WL_TRACE
(("P2P Event on Virtual I/F (ifidx:%d) \n",

8506 
e
->
emsg
.
ifidx
));

8512  
FALSE
;

8514 
	`WL_TRACE
(("P2P Event on Primary I/F (ifidx:%d)."

8515 " SíàôÅÿp2p0 \n", 
e
->
emsg
.
ifidx
));

8516  
TRUE
;

8521 
	`WL_TRACE
(("NON-P2P Event %d on ifidx (ifidx:%d) \n",

8522 
e
->
ëy≥
,É->
emsg
.
ifidx
));

8523  
FALSE
;

8525 
	}
}

8527 
s32
 
	$wl_evít_h™dÀr
(*
d©a
)

8529 
√t_devi˚
 *
√tdev
;

8530 
wl_¥iv
 *
wl
 = 
NULL
;

8531 
wl_evít_q
 *
e
;

8532 
tsk_˘l_t
 *
tsk
 = (tsk_˘l_à*)
d©a
;

8534 
wl
 = (
wl_¥iv
 *)
tsk
->
∑ª¡
;

8535 #i‚de‡
USE_KTHREAD_API


8536 
	`DAEMONIZE
("dhd_cfg80211_event");

8537 
	`com∂ëe
(&
tsk
->
com∂ëed
);

8539 
	`WL_ERR
(("tsk E¡î,Åsk = 0x%08x\n", ()
tsk
));

8542 
	`down_öãºu±ibÀ
 (&
tsk
->
£ma
) == 0) {

8543 
	`SMP_RD_BARRIER_DEPENDS
();

8544 i‡(
tsk
->
ãrmö©ed
)

8546 (
e
 = 
	`wl_deq_evít
(
wl
))) {

8547 
	`WL_DBG
(("evíàty≥ (%d), i‡idx: %d\n", 
e
->
ëy≥
,É->
emsg
.
ifidx
));

8552 i‡((
	`wl_is_p2p_evít
(
e
Ë=
TRUE
Ë&& (
wl
->
p2p_√t
)) {

8553 
√tdev
 = 
wl
->
p2p_√t
;

8555 
√tdev
 = 
	`dhd_idx2√t
((
dhd_pub
 *)(
wl
->
pub
), 
e
->
emsg
.
ifidx
);

8557 i‡(!
√tdev
)

8558 
√tdev
 = 
	`wl_to_¥mry_ndev
(
wl
);

8559 i‡(
e
->
ëy≥
 < 
WLC_E_LAST
 && 
wl
->
evt_h™dÀr
[e->etype]) {

8560 
wl
->
evt_h™dÀr
[
e
->
ëy≥
] (wl, 
√tdev
, &e->
emsg
,É->
ed©a
);

8562 
	`WL_DBG
(("Unknow¿Evíà(%d): ign‹ög\n", 
e
->
ëy≥
));

8564 
	`wl_put_evít
(
e
);

8566 
	`DHD_OS_WAKE_UNLOCK
(
wl
->
pub
);

8568 
	`WL_ERR
(("%†wa†ãrmö©ed\n", 
__func__
));

8569 
	`com∂ëe_™d_exô
(&
tsk
->
com∂ëed
, 0);

8571 
	}
}

8574 
	$wl_cfg80211_evít
(
√t_devi˚
 *
ndev
, c⁄° 
wl_evít_msg_t
 * 
e
, *
d©a
)

8576 
u32
 
evít_ty≥
 = 
	`¡oh32
(
e
->event_type);

8577 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

8579 #i‡(
WL_DBG_LEVEL
 > 0)

8580 
s8
 *
e°r
 = (
evít_ty≥
 <(
wl_dbg_e°r
Ë/ 
WL_DBG_ESTR_MAX
 - 1) ?

8581 
wl_dbg_e°r
[
evít_ty≥
] : (
s8
 *) "Unknown";

8582 
	`WL_DBG
(("evít_ty≥ (%d):" "WLC_E_" "%s\n", 
evít_ty≥
, 
e°r
));

8585 i‡(
evít_ty≥
 =
WLC_E_PFN_NET_FOUND
) {

8586 
	`WL_DBG
((" PNOEVENT: PNO_NET_FOUND\n"));

8588 i‡(
evít_ty≥
 =
WLC_E_PFN_NET_LOST
) {

8589 
	`WL_DBG
((" PNOEVENT: PNO_NET_LOST\n"));

8592 i‡(
	`likñy
(!
	`wl_íq_evít
(
wl
, 
ndev
, 
evít_ty≥
, 
e
, 
d©a
)))

8593 
	`wl_wakeup_evít
(
wl
);

8594 
	}
}

8596 
	$wl_öô_eq
(
wl_¥iv
 *
wl
)

8598 
	`wl_öô_eq_lock
(
wl
);

8599 
	`INIT_LIST_HEAD
(&
wl
->
eq_li°
);

8600 
	}
}

8602 
	$wl_Êush_eq
(
wl_¥iv
 *
wl
)

8604 
wl_evít_q
 *
e
;

8605 
Êags
;

8607 
Êags
 = 
	`wl_lock_eq
(
wl
);

8608 !
	`li°_em±y
(&
wl
->
eq_li°
)) {

8609 
e
 = 
	`li°_fú°_íåy
(&
wl
->
eq_li°
, 
wl_evít_q
,Éq_list);

8610 
	`li°_dñ
(&
e
->
eq_li°
);

8611 
	`k‰ì
(
e
);

8613 
	`wl_u∆ock_eq
(
wl
, 
Êags
);

8614 
	}
}

8620 
wl_evít_q
 *
	$wl_deq_evít
(
wl_¥iv
 *
wl
)

8622 
wl_evít_q
 *
e
 = 
NULL
;

8623 
Êags
;

8625 
Êags
 = 
	`wl_lock_eq
(
wl
);

8626 i‡(
	`likñy
(!
	`li°_em±y
(&
wl
->
eq_li°
))) {

8627 
e
 = 
	`li°_fú°_íåy
(&
wl
->
eq_li°
, 
wl_evít_q
,Éq_list);

8628 
	`li°_dñ
(&
e
->
eq_li°
);

8630 
	`wl_u∆ock_eq
(
wl
, 
Êags
);

8632  
e
;

8633 
	}
}

8639 
s32


8640 
	$wl_íq_evít
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
, 
u32
 
evít
, c⁄° 
wl_evít_msg_t
 *
msg
,

8641 *
d©a
)

8643 
wl_evít_q
 *
e
;

8644 
s32
 
îr
 = 0;

8645 
uöt32
 
evtq_size
;

8646 
uöt32
 
d©a_Àn
;

8647 
Êags
;

8648 
gÂ_t
 
aÊags
;

8650 
d©a_Àn
 = 0;

8651 i‡(
d©a
)

8652 
d©a_Àn
 = 
	`¡oh32
(
msg
->
d©Æí
);

8653 
evtq_size
 = (
wl_evít_q
Ë+ 
d©a_Àn
;

8654 
aÊags
 = (
	`ö_©omic
()Ë? 
GFP_ATOMIC
 : 
GFP_KERNEL
;

8655 
e
 = 
	`kzÆloc
(
evtq_size
, 
aÊags
);

8656 i‡(
	`u∆ikñy
(!
e
)) {

8657 
	`WL_ERR
(("eventálloc failed\n"));

8658  -
ENOMEM
;

8660 
e
->
ëy≥
 = 
evít
;

8661 
	`mem˝y
(&
e
->
emsg
, 
msg
, (
wl_evít_msg_t
));

8662 i‡(
d©a
)

8663 
	`mem˝y
(
e
->
ed©a
, 
d©a
, 
d©a_Àn
);

8664 
Êags
 = 
	`wl_lock_eq
(
wl
);

8665 
	`li°_add_èû
(&
e
->
eq_li°
, &
wl
->eq_list);

8666 
	`wl_u∆ock_eq
(
wl
, 
Êags
);

8668  
îr
;

8669 
	}
}

8671 
	$wl_put_evít
(
wl_evít_q
 *
e
)

8673 
	`k‰ì
(
e
);

8674 
	}
}

8676 
s32
 
	$wl_c⁄fig_ifmode
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
, 
s32
 
i·y≥
)

8678 
s32
 
ö‰a
 = 0;

8679 
s32
 
îr
 = 0;

8680 
s32
 
mode
 = 0;

8681 
i·y≥
) {

8682 
NL80211_IFTYPE_MONITOR
:

8683 
NL80211_IFTYPE_WDS
:

8684 
	`WL_ERR
(("type (%d) : currently we doÇot supportÅhis mode\n",

8685 
i·y≥
));

8686 
îr
 = -
EINVAL
;

8687  
îr
;

8688 
NL80211_IFTYPE_ADHOC
:

8689 
mode
 = 
WL_MODE_IBSS
;

8691 
NL80211_IFTYPE_STATION
:

8692 
NL80211_IFTYPE_P2P_CLIENT
:

8693 
mode
 = 
WL_MODE_BSS
;

8694 
ö‰a
 = 1;

8696 
NL80211_IFTYPE_AP
:

8697 
NL80211_IFTYPE_P2P_GO
:

8698 
mode
 = 
WL_MODE_AP
;

8699 
ö‰a
 = 1;

8702 
îr
 = -
EINVAL
;

8703 
	`WL_ERR
(("övÆidÅy≥ (%d)\n", 
i·y≥
));

8704  
îr
;

8706 
ö‰a
 = 
	`htod32
(infra);

8707 
îr
 = 
	`wldev_io˘l
(
ndev
, 
WLC_SET_INFRA
, &
ö‰a
, (ö‰a), 
åue
);

8708 i‡(
	`u∆ikñy
(
îr
)) {

8709 
	`WL_ERR
(("WLC_SET_INFRAÉº‹ (%d)\n", 
îr
));

8710  
îr
;

8713 
	`wl_£t_mode_by_√tdev
(
wl
, 
ndev
, 
mode
);

8716 
	}
}

8718 
	$wl_cfg80211_add_to_evítbuf„r
(
wl_evítmsg_buf
 *
ev
, 
u16
 
evít
, 
boﬁ
 
£t
)

8720 i‡(!
ev
 || (
evít
 > 
WLC_E_LAST
))

8723 i‡(
ev
->
num
 < 
MAX_EVENT_BUF_NUM
) {

8724 
ev
->
evít
[ev->
num
].
ty≥
 =Évent;

8725 
ev
->
evít
[ev->
num
].
£t
 = set;

8726 
ev
->
num
++;

8728 
	`WL_ERR
(("evenbuffer doesn't support > %uÉvents. Update"

8729 "ÅhêdeföêMAX_EVENT_BUF_NUM \n", 
MAX_EVENT_BUF_NUM
));

8730 
	`ASSERT
(0);

8732 
	}
}

8734 
s32
 
	$wl_cfg80211_≠∂y_evítbuf„r
(

8735 
√t_devi˚
 *
ndev
,

8736 
wl_¥iv
 *
wl
,

8737 
wl_evítmsg_buf_t
 *
ev
)

8739 
evítmask
[
WL_EVENTING_MASK_LEN
];

8740 
i
, 
ªt
 = 0;

8741 
s8
 
iovbuf
[
WL_EVENTING_MASK_LEN
 + 12];

8743 i‡(!
ev
 || (!ev->
num
))

8744  -
EINVAL
;

8746 
	`muãx_lock
(&
wl
->
evít_sync
);

8749 
	`bcm_mkiov¨
("evít_msgs", 
NULL
, 0, 
iovbuf
,

8750 (
iovbuf
));

8751 
ªt
 = 
	`wldev_io˘l
(
ndev
, 
WLC_GET_VAR
, 
iovbuf
, (iovbuf), 
Ál£
);

8752 i‡(
	`u∆ikñy
(
ªt
)) {

8753 
	`WL_ERR
(("GëÉvít_msg†îr‹ (%d)\n", 
ªt
));

8754 
exô
;

8756 
	`mem˝y
(
evítmask
, 
iovbuf
, 
WL_EVENTING_MASK_LEN
);

8759 
i
 = 0; i < 
ev
->
num
; i++) {

8760 i‡(
ev
->
evít
[
i
].
£t
)

8761 
	`£tbô
(
evítmask
, 
ev
->
evít
[
i
].
ty≥
);

8763 
	`˛rbô
(
evítmask
, 
ev
->
evít
[
i
].
ty≥
);

8767 
	`bcm_mkiov¨
("evít_msgs", 
evítmask
, 
WL_EVENTING_MASK_LEN
, 
iovbuf
,

8768 (
iovbuf
));

8769 
ªt
 = 
	`wldev_io˘l
(
ndev
, 
WLC_SET_VAR
, 
iovbuf
, (iovbuf), 
åue
);

8770 i‡(
	`u∆ikñy
(
ªt
)) {

8771 
	`WL_ERR
(("SëÉvít_msg†îr‹ (%d)\n", 
ªt
));

8774 
exô
:

8775 
	`muãx_u∆ock
(&
wl
->
evít_sync
);

8776  
ªt
;

8777 
	}
}

8779 
s32
 
	$wl_add_ªmove_evítmsg
(
√t_devi˚
 *
ndev
, 
u16
 
evít
, 
boﬁ
 
add
)

8781 
s8
 
iovbuf
[
WL_EVENTING_MASK_LEN
 + 12];

8782 
s8
 
evítmask
[
WL_EVENTING_MASK_LEN
];

8783 
s32
 
îr
 = 0;

8784 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

8786 i‡(!
ndev
 || !
wl
)

8787  -
ENODEV
;

8789 
	`muãx_lock
(&
wl
->
evít_sync
);

8792 
	`bcm_mkiov¨
("evít_msgs", 
NULL
, 0, 
iovbuf
,

8793 (
iovbuf
));

8794 
îr
 = 
	`wldev_io˘l
(
ndev
, 
WLC_GET_VAR
, 
iovbuf
, (iovbuf), 
Ál£
);

8795 i‡(
	`u∆ikñy
(
îr
)) {

8796 
	`WL_ERR
(("GëÉvít_msg†îr‹ (%d)\n", 
îr
));

8797 
evítmsg_out
;

8799 
	`mem˝y
(
evítmask
, 
iovbuf
, 
WL_EVENTING_MASK_LEN
);

8800 i‡(
add
) {

8801 
	`£tbô
(
evítmask
, 
evít
);

8803 
	`˛rbô
(
evítmask
, 
evít
);

8805 
	`bcm_mkiov¨
("evít_msgs", 
evítmask
, 
WL_EVENTING_MASK_LEN
, 
iovbuf
,

8806 (
iovbuf
));

8807 
îr
 = 
	`wldev_io˘l
(
ndev
, 
WLC_SET_VAR
, 
iovbuf
, (iovbuf), 
åue
);

8808 i‡(
	`u∆ikñy
(
îr
)) {

8809 
	`WL_ERR
(("SëÉvít_msg†îr‹ (%d)\n", 
îr
));

8810 
evítmsg_out
;

8813 
evítmsg_out
:

8814 
	`muãx_u∆ock
(&
wl
->
evít_sync
);

8815  
îr
;

8816 
	}
}

8818 
	$wl_c⁄°ru˘_ªgöfo
(
wl_¥iv
 *
wl
, 
s32
 
bw_ˇp
)

8820 
√t_devi˚
 *
dev
 = 
	`wl_to_¥mry_ndev
(
wl
);

8821 
õì80211_ch™√l
 *
b™d_ch™_¨r
 = 
NULL
;

8822 
wl_uöt32_li°_t
 *
li°
;

8823 
u32
 
i
, 
j
, 
ödex
, 
n_2g
, 
n_5g
, 
b™d
, 
ch™√l
, 
¨øy_size
;

8824 
u32
 *
n_˙t
 = 
NULL
;

8825 
ch™•ec_t
 
c
 = 0;

8826 
s32
 
îr
 = 
BCME_OK
;

8827 
boﬁ
 
upd©e
;

8828 
boﬁ
 
ht40_Ælowed
;

8829 
u8
 *
pbuf
 = 
NULL
;

8831 
	#LOCAL_BUF_LEN
 1024

	)

8832 
pbuf
 = 
	`kzÆloc
(
LOCAL_BUF_LEN
, 
GFP_KERNEL
);

8834 i‡(
pbuf
 =
NULL
) {

8835 
	`WL_ERR
(("failedÅoállocateÜocal buf\n"));

8836  -
ENOMEM
;

8838 
li°
 = (
wl_uöt32_li°_t
 *)(*Ë
pbuf
;

8839 
li°
->
cou¡
 = 
	`htod32
(
WL_NUMCHANSPECS
);

8842 
îr
 = 
	`wldev_iov¨_gëbuf_bsscfg
(
dev
, "ch™•ecs", 
NULL
,

8843 0, 
pbuf
, 
LOCAL_BUF_LEN
, 0, &
wl
->
io˘l_buf_sync
);

8844 i‡(
îr
 != 0) {

8845 
	`WL_ERR
(("gë ch™•ec†Áûed wôh %d\n", 
îr
));

8846 
	`k‰ì
(
pbuf
);

8847  
îr
;

8849 #unde‡
LOCAL_BUF_LEN


8851 
li°
 = (
wl_uöt32_li°_t
 *)(*)
pbuf
;

8852 
b™d
 = 
¨øy_size
 = 
n_2g
 = 
n_5g
 = 0;

8853 
i
 = 0; i < 
	`dtoh32
(
li°
->
cou¡
); i++) {

8854 
ödex
 = 0;

8855 
upd©e
 = 
Ál£
;

8856 
ht40_Ælowed
 = 
Ál£
;

8857 
c
 = (
ch™•ec_t
)
	`dtoh32
(
li°
->
ñemít
[
i
]);

8858 
c
 = 
	`wl_ch•ec_drivî_to_ho°
(c);

8859 
ch™√l
 = 
	`CHSPEC_CHANNEL
(
c
);

8860 i‡(
	`CHSPEC_IS40
(
c
)) {

8861 i‡(
	`CHSPEC_SB_UPPER
(
c
))

8862 
ch™√l
 +
CH_10MHZ_APART
;

8864 
ch™√l
 -
CH_10MHZ_APART
;

8865 } i‡(
	`CHSPEC_IS80
(
c
)) {

8866 
	`WL_DBG
(("HT80 cíã∏ch™√»: %d\n", 
ch™√l
));

8869 i‡(
	`CHSPEC_IS2G
(
c
Ë&& (
ch™√l
 >
CH_MIN_2G_CHANNEL
) &&

8870 (
ch™√l
 <
CH_MAX_2G_CHANNEL
)) {

8871 
b™d_ch™_¨r
 = 
__wl_2ghz_ch™√ls
;

8872 
¨øy_size
 = 
	`ARRAYSIZE
(
__wl_2ghz_ch™√ls
);

8873 
n_˙t
 = &
n_2g
;

8874 
b™d
 = 
IEEE80211_BAND_2GHZ
;

8875 
ht40_Ælowed
 = (
bw_ˇp
 =
WLC_N_BW_40ALL
)? 
åue
 : 
Ál£
;

8876 } i‡(
	`CHSPEC_IS5G
(
c
Ë&& 
ch™√l
 >
CH_MIN_5G_CHANNEL
) {

8877 
b™d_ch™_¨r
 = 
__wl_5ghz_a_ch™√ls
;

8878 
¨øy_size
 = 
	`ARRAYSIZE
(
__wl_5ghz_a_ch™√ls
);

8879 
n_˙t
 = &
n_5g
;

8880 
b™d
 = 
IEEE80211_BAND_5GHZ
;

8881 
ht40_Ælowed
 = (
bw_ˇp
 =
WLC_N_BW_20ALL
)? 
Ál£
 : 
åue
;

8883 
	`WL_ERR
(("InvÆid ch™√»Sïc. 0x%x.\n", 
c
));

8886 i‡(!
ht40_Ælowed
 && 
	`CHSPEC_IS40
(
c
))

8888 
j
 = 0; (j < *
n_˙t
 && (*n_˙à< 
¨øy_size
)); j++) {

8889 i‡(
b™d_ch™_¨r
[
j
].
hw_vÆue
 =
ch™√l
) {

8890 
upd©e
 = 
åue
;

8894 i‡(
upd©e
)

8895 
ödex
 = 
j
;

8897 
ödex
 = *
n_˙t
;

8898 i‡(
ödex
 < 
¨øy_size
) {

8899 #i‡
LINUX_VERSION_CODE
 =
	`KERNEL_VERSION
(2, 6, 38Ë&& !
	`deföed
(
WL_COMPAT_WIRELESS
)

8900 
b™d_ch™_¨r
[
ödex
].
˚¡î_‰eq
 =

8901 
	`õì80211_ch™√l_to_‰equícy
(
ch™√l
);

8903 
b™d_ch™_¨r
[
ödex
].
˚¡î_‰eq
 =

8904 
	`õì80211_ch™√l_to_‰equícy
(
ch™√l
, 
b™d
);

8906 
b™d_ch™_¨r
[
ödex
].
hw_vÆue
 = 
ch™√l
;

8908 i‡(
	`CHSPEC_IS40
(
c
Ë&& 
ht40_Ælowed
) {

8912 
u32
 
ht40_Êag
 = 
b™d_ch™_¨r
[
ödex
].
Êags
 & 
IEEE80211_CHAN_NO_HT40
;

8913 i‡(
	`CHSPEC_SB_UPPER
(
c
)) {

8914 i‡(
ht40_Êag
 =
IEEE80211_CHAN_NO_HT40
)

8915 
b™d_ch™_¨r
[
ödex
].
Êags
 &=

8916 ~
IEEE80211_CHAN_NO_HT40
;

8917 
b™d_ch™_¨r
[
ödex
].
Êags
 |
IEEE80211_CHAN_NO_HT40PLUS
;

8922 
b™d_ch™_¨r
[
ödex
].
Êags
 &~
IEEE80211_CHAN_NO_HT40
;

8923 i‡(
ht40_Êag
 =
IEEE80211_CHAN_NO_HT40
)

8924 
b™d_ch™_¨r
[
ödex
].
Êags
 |=

8925 
IEEE80211_CHAN_NO_HT40MINUS
;

8928 
b™d_ch™_¨r
[
ödex
].
Êags
 = 
IEEE80211_CHAN_NO_HT40
;

8929 i‡(
b™d
 =
IEEE80211_BAND_2GHZ
)

8930 
ch™√l
 |
WL_CHANSPEC_BAND_2G
;

8932 
ch™√l
 |
WL_CHANSPEC_BAND_5G
;

8933 
ch™√l
 |
WL_CHANSPEC_BW_20
;

8934 
ch™√l
 = 
	`wl_ch•ec_ho°_to_drivî
(channel);

8935 
îr
 = 
	`wldev_iov¨_gëöt
(
dev
, "≥r_ch™_öfo", &
ch™√l
);

8936 i‡(!
îr
) {

8937 i‡(
ch™√l
 & 
WL_CHAN_RADAR
)

8938 
b™d_ch™_¨r
[
ödex
].
Êags
 |=

8939 (
IEEE80211_CHAN_RADAR
 |

8940 
IEEE80211_CHAN_NO_IBSS
);

8941 i‡(
ch™√l
 & 
WL_CHAN_PASSIVE
)

8942 
b™d_ch™_¨r
[
ödex
].
Êags
 |=

8943 
IEEE80211_CHAN_PASSIVE_SCAN
;

8946 i‡(!
upd©e
)

8947 (*
n_˙t
)++;

8951 
__wl_b™d_2ghz
.
n_ch™√ls
 = 
n_2g
;

8952 
__wl_b™d_5ghz_a
.
n_ch™√ls
 = 
n_5g
;

8953 
	`k‰ì
(
pbuf
);

8954  
îr
;

8955 
	}
}

8957 
s32
 
	$wl_upd©e_wùhyb™ds
(
wl_¥iv
 *
wl
, 
boﬁ
 
nŸify
)

8959 
wùhy
 *wiphy;

8960 
√t_devi˚
 *
dev
;

8961 
u32
 
b™dli°
[3];

8962 
u32
 
nb™d
 = 0;

8963 
u32
 
i
 = 0;

8964 
s32
 
îr
 = 0;

8965 
s32
 
ödex
 = 0;

8966 
s32
 
nmode
 = 0;

8967 
boﬁ
 
rﬁlback_lock
 = 
Ál£
;

8968 
s32
 
bw_ˇp
 = 0;

8969 
s32
 
cur_b™d
 = -1;

8970 
õì80211_suµ‹ãd_b™d
 *
b™ds
[
IEEE80211_NUM_BANDS
] = {
NULL
, };

8972 i‡(
wl
 =
NULL
) {

8973 
wl
 = 
wlcfg_drv_¥iv
;

8974 
	`muãx_lock
(&
wl
->
u§_sync
);

8975 
rﬁlback_lock
 = 
åue
;

8977 
dev
 = 
	`wl_to_¥mry_ndev
(
wl
);

8979 
	`mem£t
(
b™dli°
, 0, (bandlist));

8980 
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_GET_BANDLIST
, 
b™dli°
,

8981 (
b™dli°
), 
Ál£
);

8982 i‡(
	`u∆ikñy
(
îr
)) {

8983 
	`WL_ERR
(("îr‹Ñód b™dli° (%d)\n", 
îr
));

8984 
íd_b™ds
;

8987 
wùhy
 = 
	`wl_to_wùhy
(
wl
);

8989 
îr
 = 
	`wldev_io˘l
(
dev
, 
WLC_GET_BAND
, &
cur_b™d
,

8990 (
s32
), 
Ál£
);

8991 i‡(
	`u∆ikñy
(
îr
)) {

8992 
	`WL_ERR
(("îr‹ (%d)\n", 
îr
));

8993 
íd_b™ds
;

8996 
îr
 = 
	`wldev_iov¨_gëöt
(
dev
, "nmode", &
nmode
);

8997 i‡(
	`u∆ikñy
(
îr
)) {

8998 
	`WL_ERR
(("îr‹ÑódögÇmodê(%d)\n", 
îr
));

9001 
îr
 = 
	`wldev_iov¨_gëöt
(
dev
, "mimo_bw_ˇp", &
bw_ˇp
);

9002 i‡(
	`u∆ikñy
(
îr
)) {

9003 
	`WL_ERR
(("îr‹ gë mimo_bw_ˇ∞(%d)\n", 
îr
));

9007 
îr
 = 
	`wl_c⁄°ru˘_ªgöfo
(
wl
, 
bw_ˇp
);

9008 i‡(
îr
) {

9009 
	`WL_ERR
(("wl_c⁄°ru˘_ªgöfo(ËÁû†îr=%d\n", 
îr
));

9010 i‡(
îr
 !
BCME_UNSUPPORTED
)

9011 
íd_b™ds
;

9012 
îr
 = 0;

9015 
nb™d
 = 
b™dli°
[0];

9017 
i
 = 1; i <
nb™d
 && i < 
	`ARRAYSIZE
(
b™dli°
); i++) {

9018 
ödex
 = -1;

9019 i‡(
b™dli°
[
i
] =
WLC_BAND_5G
 && 
__wl_b™d_5ghz_a
.
n_ch™√ls
 > 0) {

9020 
b™ds
[
IEEE80211_BAND_5GHZ
] =

9021 &
__wl_b™d_5ghz_a
;

9022 
ödex
 = 
IEEE80211_BAND_5GHZ
;

9023 i‡(
bw_ˇp
 =
WLC_N_BW_40ALL
 || bw_ˇ∞=
WLC_N_BW_20IN2G_40IN5G
)

9024 
b™ds
[
ödex
]->
ht_ˇp
.
ˇp
 |
IEEE80211_HT_CAP_SGI_40
;

9026 i‡(
b™dli°
[
i
] =
WLC_BAND_2G
 && 
__wl_b™d_2ghz
.
n_ch™√ls
 > 0) {

9027 
b™ds
[
IEEE80211_BAND_2GHZ
] =

9028 &
__wl_b™d_2ghz
;

9029 
ödex
 = 
IEEE80211_BAND_2GHZ
;

9030 i‡(
bw_ˇp
 =
WLC_N_BW_40ALL
)

9031 
b™ds
[
ödex
]->
ht_ˇp
.
ˇp
 |
IEEE80211_HT_CAP_SGI_40
;

9034 i‡((
ödex
 >0Ë&& 
nmode
) {

9035 
b™ds
[
ödex
]->
ht_ˇp
.
ˇp
 |=

9036 (
IEEE80211_HT_CAP_SGI_20
 | 
IEEE80211_HT_CAP_DSSSCCK40
);

9037 
b™ds
[
ödex
]->
ht_ˇp
.
ht_suµ‹ãd
 = 
TRUE
;

9038 
b™ds
[
ödex
]->
ht_ˇp
.
ampdu_Á˘‹
 = 
IEEE80211_HT_MAX_AMPDU_64K
;

9039 
b™ds
[
ödex
]->
ht_ˇp
.
ampdu_dísôy
 = 
IEEE80211_HT_MPDU_DENSITY_16
;

9041 
b™ds
[
ödex
]->
ht_ˇp
.
mcs
.
rx_mask
[0] = 0xff;

9046 
wùhy
->
b™ds
[
IEEE80211_BAND_2GHZ
] = bands[IEEE80211_BAND_2GHZ];

9047 
wùhy
->
b™ds
[
IEEE80211_BAND_5GHZ
] = bands[IEEE80211_BAND_5GHZ];

9049 i‡(
nŸify
)

9050 
	`wùhy_≠∂y_cu°om_ªguœt‹y
(
wùhy
, &
brcm_ªgdom
);

9052 
íd_b™ds
:

9053 i‡(
rﬁlback_lock
)

9054 
	`muãx_u∆ock
(&
wl
->
u§_sync
);

9055  
îr
;

9056 
	}
}

9058 
s32
 
	$__wl_cfg80211_up
(
wl_¥iv
 *
wl
)

9060 
s32
 
îr
 = 0;

9061 
√t_devi˚
 *
ndev
 = 
	`wl_to_¥mry_ndev
(
wl
);

9062 
wúñess_dev
 *
wdev
 = 
ndev
->
õì80211_±r
;

9064 
	`WL_DBG
(("In\n"));

9066 
îr
 = 
	`dhd_c⁄fig_d⁄gÀ
(
wl
, 
Ál£
);

9067 i‡(
	`u∆ikñy
(
îr
))

9068  
îr
;

9070 
îr
 = 
	`wl_c⁄fig_ifmode
(
wl
, 
ndev
, 
wdev
->
i·y≥
);

9071 i‡(
	`u∆ikñy
(
îr
 &&Éº !-
EINPROGRESS
)) {

9072 
	`WL_ERR
(("wl_config_ifmode failed\n"));

9074 
îr
 = 
	`wl_upd©e_wùhyb™ds
(
wl
, 
åue
);

9075 i‡(
	`u∆ikñy
(
îr
)) {

9076 
	`WL_ERR
(("wl_update_wiphybands failed\n"));

9079 
îr
 = 
	`dhd_m⁄ô‹_öô
(
wl
->
pub
);

9080 
îr
 = 
	`wl_övoke_isˇn
(
wl
);

9082 #ifde‡
WL_HOST_BAND_MGMT


9084 i‡(
	`wl_cfg80211_£t_b™d
(
ndev
, 
WLC_BAND_AUTO
) < 0) {

9085 
	`WL_ERR
(("roam_band set failed\n"));

9086 
îr
 = -1;

9090 #i‡
	`deföed
(
DHCP_SCAN_SUPPRESS
)

9092 
	`öô_timî
(&
wl
->
sˇn_suµ_timî
);

9093 
wl
->
sˇn_suµ_timî
.
d©a
 = (
ul⁄g
)wl;

9094 
wl
->
sˇn_suµ_timî
.
fun˘i⁄
 = 
wl_cfg80211_sˇn_suµ_timîfunc
;

9095 
	`INIT_WORK
(&
wl
->
wœn_w‹k
, 
wl_cfg80211_w‹k_h™dÀr
);

9098 
	`wl_£t_drv_°©us
(
wl
, 
READY
, 
ndev
);

9099  
îr
;

9100 
	}
}

9102 
s32
 
	$__wl_cfg80211_down
(
wl_¥iv
 *
wl
)

9104 
s32
 
îr
 = 0;

9105 
Êags
;

9106 
√t_öfo
 *
ôî
, *
√xt
;

9107 
√t_devi˚
 *
ndev
 = 
	`wl_to_¥mry_ndev
(
wl
);

9108 
√t_devi˚
 *
p2p_√t
 = 
wl
->p2p_net;

9109 
u32
 
bssidx
 = 
	`wl_cfgp2p_föd_idx
(
wl
, 
ndev
);

9110 
	`WL_DBG
(("In\n"));

9112 #i‡
	`deföed
(
DHCP_SCAN_SUPPRESS
)

9114 i‡(
wl
->
sˇn_suµªs£d
)

9115 
	`wl_cfg80211_sˇn_suµªss
(
ndev
, 0);

9116 i‡(
	`timî_≥ndög
(&
wl
->
sˇn_suµ_timî
))

9117 
	`dñ_timî_sync
(&
wl
->
sˇn_suµ_timî
);

9118 
	`ˇn˚l_w‹k_sync
(&
wl
->
wœn_w‹k
);

9122 i‡(
	`wl_cfgp2p_bss_isup
(
ndev
, 
bssidx
)) {

9123 i‡(
	`wl_cfgp2p_bss
(
wl
, 
ndev
, 
bssidx
, 0) < 0)

9124 
	`WL_ERR
(("BSS down failed \n"));

9128 i‡(!
	`wl_gë_drv_°©us
(
wl
, 
READY
, 
ndev
))

9129  
îr
;

9131 
	`f‹_óch_ndev
(
wl
, 
ôî
, 
√xt
)

9132 
	`wl_£t_drv_°©us
(
wl
, 
SCAN_ABORTING
, 
ôî
->
ndev
);

9135 
	`wl_ãrm_isˇn
(
wl
);

9136 
	`•ö_lock_úqßve
(&
wl
->
cfgdrv_lock
, 
Êags
);

9137 i‡(
wl
->
sˇn_ªque°
) {

9138 
	`cfg80211_sˇn_d⁄e
(
wl
->
sˇn_ªque°
, 
åue
);

9139 
wl
->
sˇn_ªque°
 = 
NULL
;

9141 
	`•ö_u∆ock_úqª°‹e
(&
wl
->
cfgdrv_lock
, 
Êags
);

9143 
	`f‹_óch_ndev
(
wl
, 
ôî
, 
√xt
) {

9144 
	`wl_˛r_drv_°©us
(
wl
, 
READY
, 
ôî
->
ndev
);

9145 
	`wl_˛r_drv_°©us
(
wl
, 
SCANNING
, 
ôî
->
ndev
);

9146 
	`wl_˛r_drv_°©us
(
wl
, 
SCAN_ABORTING
, 
ôî
->
ndev
);

9147 
	`wl_˛r_drv_°©us
(
wl
, 
CONNECTING
, 
ôî
->
ndev
);

9148 
	`wl_˛r_drv_°©us
(
wl
, 
CONNECTED
, 
ôî
->
ndev
);

9149 
	`wl_˛r_drv_°©us
(
wl
, 
DISCONNECTING
, 
ôî
->
ndev
);

9150 
	`wl_˛r_drv_°©us
(
wl
, 
AP_CREATED
, 
ôî
->
ndev
);

9151 
	`wl_˛r_drv_°©us
(
wl
, 
AP_CREATING
, 
ôî
->
ndev
);

9153 
	`wl_to_¥mry_ndev
(
wl
)->
õì80211_±r
->
i·y≥
 =

9154 
NL80211_IFTYPE_STATION
;

9155 i‡(
p2p_√t
)

9156 
	`dev_˛o£
(
p2p_√t
);

9157 
	`DNGL_FUNC
(
dhd_cfg80211_down
, (
wl
));

9158 
	`wl_Êush_eq
(
wl
);

9159 
	`wl_lök_down
(
wl
);

9160 i‡(
wl
->
p2p_suµ‹ãd
)

9161 
	`wl_cfgp2p_down
(
wl
);

9162 
	`dhd_m⁄ô‹_unöô
();

9164  
îr
;

9165 
	}
}

9167 
s32
 
	$wl_cfg80211_up
(*
∑ø
)

9169 
wl_¥iv
 *
wl
;

9170 
s32
 
îr
 = 0;

9171 
vÆ
 = 1;

9172 
dhd_pub_t
 *
dhd
;

9173 ()
∑ø
;

9174 
	`WL_DBG
(("In\n"));

9175 
wl
 = 
wlcfg_drv_¥iv
;

9177 i‡((
îr
 = 
	`wldev_io˘l
(
	`wl_to_¥mry_ndev
(
wl
), 
WLC_GET_VERSION
, &
vÆ
,

9178 (), 
Ál£
) < 0)) {

9179 
	`WL_ERR
(("WLC_GET_VERSION faûed,Éº=%d\n", 
îr
));

9180  
îr
;

9182 
vÆ
 = 
	`dtoh32
(val);

9183 i‡(
vÆ
 !
WLC_IOCTL_VERSION
 && val != 1) {

9184 
	`WL_ERR
(("Version mismatch,Ölease upgrade. Got %d,Éxpected %d or 1\n",

9185 
vÆ
, 
WLC_IOCTL_VERSION
));

9186  
BCME_VERSION
;

9188 
io˘l_vîsi⁄
 = 
vÆ
;

9189 
	`WL_TRACE
(("WLC_GET_VERSION=%d\n", 
io˘l_vîsi⁄
));

9191 
	`muãx_lock
(&
wl
->
u§_sync
);

9192 
dhd
 = (
dhd_pub_t
 *)(
wl
->
pub
);

9193 i‡(!(
dhd
->
›_mode
 & 
DHD_FLAG_HOSTAP_MODE
)) {

9194 
îr
 = 
	`wl_cfg80211_©èch_po°
(
	`wl_to_¥mry_ndev
(
wl
));

9195 i‡(
	`u∆ikñy
(
îr
))

9196  
îr
;

9198 
îr
 = 
	`__wl_cfg80211_up
(
wl
);

9199 i‡(
	`u∆ikñy
(
îr
))

9200 
	`WL_ERR
(("__wl_cfg80211_up failed\n"));

9201 
	`muãx_u∆ock
(&
wl
->
u§_sync
);

9202  
îr
;

9203 
	}
}

9206 
	$wl_cfg80211_h™g
(
√t_devi˚
 *
dev
, 
u16
 
ªas⁄
)

9208 
wl_¥iv
 *
wl
;

9209 
wl
 = 
wlcfg_drv_¥iv
;

9211 
	`WL_ERR
(("In : chip crashÉventing\n"));

9212 
	`cfg80211_disc⁄√˘ed
(
dev
, 
ªas⁄
, 
NULL
, 0, 
GFP_KERNEL
);

9213 i‡(
wl
 !
NULL
) {

9214 
	`wl_lök_down
(
wl
);

9217 
	}
}

9219 
s32
 
	$wl_cfg80211_down
(*
∑ø
)

9221 
wl_¥iv
 *
wl
;

9222 
s32
 
îr
 = 0;

9224 ()
∑ø
;

9225 
	`WL_DBG
(("In\n"));

9226 
wl
 = 
wlcfg_drv_¥iv
;

9227 
	`muãx_lock
(&
wl
->
u§_sync
);

9228 
îr
 = 
	`__wl_cfg80211_down
(
wl
);

9229 
	`muãx_u∆ock
(&
wl
->
u§_sync
);

9231  
îr
;

9232 
	}
}

9234 *
	$wl_ªad_¥of
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
, 
s32
 
ôem
)

9236 
Êags
;

9237 *
Ωå
 = 
NULL
;

9238 
wl_¥ofûe
 *
¥ofûe
 = 
	`wl_gë_¥ofûe_by_√tdev
(
wl
, 
ndev
);

9240 i‡(!
¥ofûe
)

9241  
NULL
;

9242 
	`•ö_lock_úqßve
(&
wl
->
cfgdrv_lock
, 
Êags
);

9243 
ôem
) {

9244 
WL_PROF_SEC
:

9245 
Ωå
 = &
¥ofûe
->
£c
;

9247 
WL_PROF_ACT
:

9248 
Ωå
 = &
¥ofûe
->
a˘ive
;

9250 
WL_PROF_BSSID
:

9251 
Ωå
 = 
¥ofûe
->
bssid
;

9253 
WL_PROF_SSID
:

9254 
Ωå
 = &
¥ofûe
->
ssid
;

9256 
WL_PROF_CHAN
:

9257 
Ωå
 = &
¥ofûe
->
ch™√l
;

9260 
	`•ö_u∆ock_úqª°‹e
(&
wl
->
cfgdrv_lock
, 
Êags
);

9261 i‡(!
Ωå
)

9262 
	`WL_ERR
(("övÆid iãm (%d)\n", 
ôem
));

9263  
Ωå
;

9264 
	}
}

9266 
s32


9267 
	$wl_upd©e_¥of
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
,

9268 c⁄° 
wl_evít_msg_t
 *
e
, *
d©a
, 
s32
 
ôem
)

9270 
s32
 
îr
 = 0;

9271 
wlc_ssid
 *
ssid
;

9272 
Êags
;

9273 
wl_¥ofûe
 *
¥ofûe
 = 
	`wl_gë_¥ofûe_by_√tdev
(
wl
, 
ndev
);

9275 i‡(!
¥ofûe
)

9276  
WL_INVALID
;

9277 
	`•ö_lock_úqßve
(&
wl
->
cfgdrv_lock
, 
Êags
);

9278 
ôem
) {

9279 
WL_PROF_SSID
:

9280 
ssid
 = (
wlc_ssid_t
 *Ë
d©a
;

9281 
	`mem£t
(
¥ofûe
->
ssid
.
SSID
, 0,

9282 (
¥ofûe
->
ssid
.
SSID
));

9283 
	`mem˝y
(
¥ofûe
->
ssid
.
SSID
, ssid->SSID, ssid->
SSID_Àn
);

9284 
¥ofûe
->
ssid
.
SSID_Àn
 = ssid->SSID_len;

9286 
WL_PROF_BSSID
:

9287 i‡(
d©a
)

9288 
	`mem˝y
(
¥ofûe
->
bssid
, 
d©a
, 
ETHER_ADDR_LEN
);

9290 
	`mem£t
(
¥ofûe
->
bssid
, 0, 
ETHER_ADDR_LEN
);

9292 
WL_PROF_SEC
:

9293 
	`mem˝y
(&
¥ofûe
->
£c
, 
d©a
, (profile->sec));

9295 
WL_PROF_ACT
:

9296 
¥ofûe
->
a˘ive
 = *(
boﬁ
 *)
d©a
;

9298 
WL_PROF_BEACONINT
:

9299 
¥ofûe
->
bóc⁄_öãrvÆ
 = *(
u16
 *)
d©a
;

9301 
WL_PROF_DTIMPERIOD
:

9302 
¥ofûe
->
dtim_≥riod
 = *(
u8
 *)
d©a
;

9304 
WL_PROF_CHAN
:

9305 
¥ofûe
->
ch™√l
 = *(
u32
*)
d©a
;

9307 
îr
 = -
EOPNOTSUPP
;

9310 
	`•ö_u∆ock_úqª°‹e
(&
wl
->
cfgdrv_lock
, 
Êags
);

9312 i‡(
îr
 =
EOPNOTSUPP
)

9313 
	`WL_ERR
(("unsuµ‹ãd iãm (%d)\n", 
ôem
));

9315  
îr
;

9316 
	}
}

9318 
	$wl_cfg80211_dbg_Àvñ
(
u32
 
Àvñ
)

9327 
	}
}

9329 
boﬁ
 
	$wl_is_ibssmode
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
)

9331  
	`wl_gë_mode_by_√tdev
(
wl
, 
ndev
Ë=
WL_MODE_IBSS
;

9332 
	}
}

9334 
__u£d
 
boﬁ
 
	$wl_is_ibss°¨ãr
(
wl_¥iv
 *
wl
)

9336  
wl
->
ibss_°¨ãr
;

9337 
	}
}

9339 
	$wl_r°_õ
(
wl_¥iv
 *
wl
)

9341 
wl_õ
 *
õ
 = 
	`wl_to_õ
(
wl
);

9343 
õ
->
off£t
 = 0;

9344 
	}
}

9346 
__u£d
 
s32
 
	$wl_add_õ
(
wl_¥iv
 *
wl
, 
u8
 
t
, u8 
l
, u8 *
v
)

9348 
wl_õ
 *
õ
 = 
	`wl_to_õ
(
wl
);

9349 
s32
 
îr
 = 0;

9351 i‡(
	`u∆ikñy
(
õ
->
off£t
 + 
l
 + 2 > 
WL_TLV_INFO_MAX
)) {

9352 
	`WL_ERR
(("ei crosses buffer boundary\n"));

9353  -
ENOSPC
;

9355 
õ
->
buf
[õ->
off£t
] = 
t
;

9356 
õ
->
buf
[õ->
off£t
 + 1] = 
l
;

9357 
	`mem˝y
(&
õ
->
buf
[õ->
off£t
 + 2], 
v
, 
l
);

9358 
õ
->
off£t
 +
l
 + 2;

9360  
îr
;

9361 
	}
}

9363 
s32
 
	$wl_mrg_õ
(
wl_¥iv
 *
wl
, 
u8
 *
õ_°ªam
, 
u16
 
õ_size
)

9365 
wl_õ
 *
õ
 = 
	`wl_to_õ
(
wl
);

9366 
s32
 
îr
 = 0;

9368 i‡(
	`u∆ikñy
(
õ
->
off£t
 + 
õ_size
 > 
WL_TLV_INFO_MAX
)) {

9369 
	`WL_ERR
(("ei_stream crosses buffer boundary\n"));

9370  -
ENOSPC
;

9372 
	`mem˝y
(&
õ
->
buf
[õ->
off£t
], 
õ_°ªam
, 
õ_size
);

9373 
õ
->
off£t
 +
õ_size
;

9375  
îr
;

9376 
	}
}

9378 
s32
 
	$wl_˝_õ
(
wl_¥iv
 *
wl
, 
u8
 *
d°
, 
u16
 
d°_size
)

9380 
wl_õ
 *
õ
 = 
	`wl_to_õ
(
wl
);

9381 
s32
 
îr
 = 0;

9383 i‡(
	`u∆ikñy
(
õ
->
off£t
 > 
d°_size
)) {

9384 
	`WL_ERR
(("dst_size isÇotÉnough\n"));

9385  -
ENOSPC
;

9387 
	`mem˝y
(
d°
, &
õ
->
buf
[0], ie->
off£t
);

9389  
îr
;

9390 
	}
}

9392 
u32
 
	$wl_gë_õÀn
(
wl_¥iv
 *
wl
)

9394 
wl_õ
 *
õ
 = 
	`wl_to_õ
(
wl
);

9396  
õ
->
off£t
;

9397 
	}
}

9399 
	$wl_lök_up
(
wl_¥iv
 *
wl
)

9401 
wl
->
lök_up
 = 
åue
;

9402 
	}
}

9404 
	$wl_lök_down
(
wl_¥iv
 *
wl
)

9406 
wl_c⁄√˘_öfo
 *
c⁄n_öfo
 = 
	`wl_to_c⁄n
(
wl
);

9408 
	`WL_DBG
(("In\n"));

9409 
wl
->
lök_up
 = 
Ál£
;

9410 
c⁄n_öfo
->
ªq_õ_Àn
 = 0;

9411 
c⁄n_öfo
->
ª•_õ_Àn
 = 0;

9412 
	}
}

9414 
	$wl_lock_eq
(
wl_¥iv
 *
wl
)

9416 
Êags
;

9418 
	`•ö_lock_úqßve
(&
wl
->
eq_lock
, 
Êags
);

9419  
Êags
;

9420 
	}
}

9422 
	$wl_u∆ock_eq
(
wl_¥iv
 *
wl
, 
Êags
)

9424 
	`•ö_u∆ock_úqª°‹e
(&
wl
->
eq_lock
, 
Êags
);

9425 
	}
}

9427 
	$wl_öô_eq_lock
(
wl_¥iv
 *
wl
)

9429 
	`•ö_lock_öô
(&
wl
->
eq_lock
);

9430 
	}
}

9432 
	$wl_dñay
(
u32
 
ms
)

9434 i‡(
	`ö_©omic
(Ë|| (
ms
 < 
	`jiffõs_to_m£cs
(1))) {

9435 
	`mdñay
(
ms
);

9437 
	`m¶ìp
(
ms
);

9439 
	}
}

9441 
s32
 
	$wl_cfg80211_gë_p2p_dev_addr
(
√t_devi˚
 *
√t
, 
ëhî_addr
 *
p2pdev_addr
)

9443 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

9444 
ëhî_addr
 
p2pif_addr
;

9445 
ëhî_addr
 
¥im¨y_mac
;

9446 i‡(!
wl
->
p2p
)

9448 i‡(!
	`p2p_is_⁄
(
wl
)) {

9449 
	`gë_¥im¨y_mac
(
wl
, &
¥im¨y_mac
);

9450 
	`wl_cfgp2p_gíî©e_bss_mac
(&
¥im¨y_mac
, 
p2pdev_addr
, &
p2pif_addr
);

9452 
	`mem˝y
(
p2pdev_addr
->
o˘ë
,

9453 
wl
->
p2p
->
dev_addr
.
o˘ë
, 
ETHER_ADDR_LEN
);

9458 
	}
}

9459 
s32
 
	$wl_cfg80211_£t_p2p_nﬂ
(
√t_devi˚
 *
√t
, * 
buf
, 
Àn
)

9461 
wl_¥iv
 *
wl
;

9463 
wl
 = 
wlcfg_drv_¥iv
;

9465  
	`wl_cfgp2p_£t_p2p_nﬂ
(
wl
, 
√t
, 
buf
, 
Àn
);

9466 
	}
}

9468 
s32
 
	$wl_cfg80211_gë_p2p_nﬂ
(
√t_devi˚
 *
√t
, * 
buf
, 
Àn
)

9470 
wl_¥iv
 *
wl
;

9471 
wl
 = 
wlcfg_drv_¥iv
;

9473  
	`wl_cfgp2p_gë_p2p_nﬂ
(
wl
, 
√t
, 
buf
, 
Àn
);

9474 
	}
}

9476 
s32
 
	$wl_cfg80211_£t_p2p_ps
(
√t_devi˚
 *
√t
, * 
buf
, 
Àn
)

9478 
wl_¥iv
 *
wl
;

9479 
wl
 = 
wlcfg_drv_¥iv
;

9481  
	`wl_cfgp2p_£t_p2p_ps
(
wl
, 
√t
, 
buf
, 
Àn
);

9482 
	}
}

9484 
s32
 
	$wl_cfg80211_ch™√l_to_‰eq
(
u32
 
ch™√l
)

9486 
‰eq
 = 0;

9488 #i‡
LINUX_VERSION_CODE
 =
	`KERNEL_VERSION
(2, 6, 38Ë&& !
	`deföed
(
WL_COMPAT_WIRELESS
)

9489 
‰eq
 = 
	`õì80211_ch™√l_to_‰equícy
(
ch™√l
);

9492 
u16
 
b™d
 = 0;

9493 i‡(
ch™√l
 <
CH_MAX_2G_CHANNEL
)

9494 
b™d
 = 
IEEE80211_BAND_2GHZ
;

9496 
b™d
 = 
IEEE80211_BAND_5GHZ
;

9497 
‰eq
 = 
	`õì80211_ch™√l_to_‰equícy
(
ch™√l
, 
b™d
);

9500  
‰eq
;

9501 
	}
}

9503 
s32
 
	$wl_cfg80211_£t_wps_p2p_õ
(
√t_devi˚
 *
√t
, *
buf
, 
Àn
,

9504 
wl_m™agemít_ty≥
 
ty≥
)

9506 
wl_¥iv
 *
wl
;

9507 
√t_devi˚
 *
ndev
 = 
NULL
;

9508 
ëhî_addr
 
¥im¨y_mac
;

9509 
s32
 
ªt
 = 0;

9510 
s32
 
bssidx
 = 0;

9511 
s32
 
pktÊag
 = 0;

9512 
wl
 = 
wlcfg_drv_¥iv
;

9514 i‡(
	`wl_gë_drv_°©us
(
wl
, 
AP_CREATING
, 
√t
) ||

9515 
	`wl_gë_drv_°©us
(
wl
, 
AP_CREATED
, 
√t
)) {

9516 
ndev
 = 
√t
;

9517 
bssidx
 = 0;

9518 } i‡(
wl
->
p2p
) {

9519 i‡(
√t
 =
wl
->
p2p_√t
) {

9520 
√t
 = 
	`wl_to_¥mry_ndev
(
wl
);

9522 i‡(!
wl
->
p2p
->
⁄
) {

9523 
	`gë_¥im¨y_mac
(
wl
, &
¥im¨y_mac
);

9524 
	`wl_cfgp2p_gíî©e_bss_mac
(&
¥im¨y_mac
, &
wl
->
p2p
->
dev_addr
,

9525 &
wl
->
p2p
->
öt_addr
);

9530 
	`p2p_⁄
(
wl
Ë
åue
;

9531 
ªt
 = 
	`wl_cfgp2p_íabÀ_discovîy
(
wl
, 
√t
, 
NULL
, 0);

9533 i‡(
	`u∆ikñy
(
ªt
)) {

9534 
exô
;

9537 i‡(
√t
 !
	`wl_to_¥mry_ndev
(
wl
)) {

9538 i‡(
	`wl_gë_mode_by_√tdev
(
wl
, 
√t
Ë=
WL_MODE_AP
) {

9539 
ndev
 = 
	`wl_to_p2p_bss_ndev
(
wl
, 
P2PAPI_BSSCFG_CONNECTION
);

9540 
bssidx
 = 
	`wl_to_p2p_bss_bssidx
(
wl
, 
P2PAPI_BSSCFG_CONNECTION
);

9543 
ndev
 = 
	`wl_to_p2p_bss_ndev
(
wl
, 
P2PAPI_BSSCFG_PRIMARY
);

9544 
bssidx
 = 
	`wl_to_p2p_bss_bssidx
(
wl
, 
P2PAPI_BSSCFG_DEVICE
);

9547 i‡(
ndev
 !
NULL
) {

9548 
ty≥
) {

9549 
WL_BEACON
:

9550 
pktÊag
 = 
VNDR_IE_BEACON_FLAG
;

9552 
WL_PROBE_RESP
:

9553 
pktÊag
 = 
VNDR_IE_PRBRSP_FLAG
;

9555 
WL_ASSOC_RESP
:

9556 
pktÊag
 = 
VNDR_IE_ASSOCRSP_FLAG
;

9559 i‡(
pktÊag
)

9560 
ªt
 = 
	`wl_cfgp2p_£t_m™agemít_õ
(
wl
, 
ndev
, 
bssidx
, 
pktÊag
, 
buf
, 
Àn
);

9562 
exô
:

9563  
ªt
;

9564 
	}
}

9566 c⁄° 
rfkûl_›s
 
	gwl_rfkûl_›s
 = {

9567 .
£t_block
 = 
wl_rfkûl_£t


9570 
	$wl_rfkûl_£t
(*
d©a
, 
boﬁ
 
blocked
)

9572 
wl_¥iv
 *
wl
 = (wl_¥iv *)
d©a
;

9574 
	`WL_DBG
(("Enter \n"));

9575 
	`WL_DBG
(("RF %s\n", 
blocked
 ? "blocked" : "unblocked"));

9577 i‡(!
wl
)

9578  -
EINVAL
;

9580 
wl
->
rf_blocked
 = 
blocked
;

9583 
	}
}

9585 
	$wl_£tup_rfkûl
(
wl_¥iv
 *
wl
, 
boﬁ
 
£tup
)

9587 
s32
 
îr
 = 0;

9589 
	`WL_DBG
(("Enter \n"));

9590 i‡(!
wl
)

9591  -
EINVAL
;

9592 i‡(
£tup
) {

9593 
wl
->
rfkûl
 = 
	`rfkûl_Æloc
("brcmfmac-wifi",

9594 
	`wl_cfg80211_gë_∑ª¡_dev
(),

9595 
RFKILL_TYPE_WLAN
, &
wl_rfkûl_›s
, (*)
wl
);

9597 i‡(!
wl
->
rfkûl
) {

9598 
îr
 = -
ENOMEM
;

9599 
îr_out
;

9602 
îr
 = 
	`rfkûl_ªgi°î
(
wl
->
rfkûl
);

9604 i‡(
îr
)

9605 
	`rfkûl_de°roy
(
wl
->
rfkûl
);

9607 i‡(!
wl
->
rfkûl
) {

9608 
îr
 = -
ENOMEM
;

9609 
îr_out
;

9612 
	`rfkûl_uƒegi°î
(
wl
->
rfkûl
);

9613 
	`rfkûl_de°roy
(
wl
->
rfkûl
);

9616 
îr_out
:

9617  
îr
;

9618 
	}
}

9620 
devi˚
 *
	$wl_cfg80211_gë_∑ª¡_dev
()

9622  
cfg80211_∑ª¡_dev
;

9623 
	}
}

9625 
	$wl_cfg80211_£t_∑ª¡_dev
(*
dev
)

9627 
cfg80211_∑ª¡_dev
 = 
dev
;

9628 
	}
}

9630 
	$wl_cfg80211_˛ór_∑ª¡_dev
()

9632 
cfg80211_∑ª¡_dev
 = 
NULL
;

9633 
	}
}

9635 
	$gë_¥im¨y_mac
(
wl_¥iv
 *
wl
, 
ëhî_addr
 *
mac
)

9637 
	`wldev_iov¨_gëbuf_bsscfg
(
	`wl_to_¥mry_ndev
(
wl
), "cur_ëhîaddr", 
NULL
,

9638 0, 
wl
->
io˘l_buf
, 
WLC_IOCTL_SMLEN
, 0, &wl->
io˘l_buf_sync
);

9639 
	`mem˝y
(
mac
->
o˘ë
, 
wl
->
io˘l_buf
, 
ETHER_ADDR_LEN
);

9640 
	}
}

9642 
	$wl_cfg80211_do_drivî_öô
(
√t_devi˚
 *
√t
)

9644 
wl_¥iv
 *
wl
 = *(wl_¥iv **)
	`√tdev_¥iv
(
√t
);

9646 i‡(!
wl
 || !wl->
wdev
)

9647  -
EINVAL
;

9649 i‡(
	`dhd_do_drivî_öô
(
wl
->
wdev
->
√tdev
) < 0)

9653 
	}
}

9655 
	$wl_cfg80211_íabÀ_åa˚
(
boﬁ
 
£t
, 
u32
 
Àvñ
)

9657 i‡(
£t
)

9658 
wl_dbg_Àvñ
 = 
Àvñ
 & 
WL_DBG_LEVEL
;

9660 
wl_dbg_Àvñ
 |(
WL_DBG_LEVEL
 & 
Àvñ
);

9661 
	}
}

9662 #i‡
deföed
(
WL_SUPPORT_BACKPORTED_KPATCHES
Ë|| (
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(3, \

9664 
s32


9665 
	$wl_cfg80211_mgmt_tx_ˇn˚l_waô
(
wùhy
 *wiphy,

9666 
√t_devi˚
 *
dev
, 
u64
 
cookõ
)

9675 
	}
}

9678 #ifde‡
WL11U


9679 
bcm_év_t
 *

9680 
	$wl_cfg80211_föd_öãrw‹kög_õ
(
u8
 *
∑r£
, 
u32
 
Àn
)

9682 
bcm_év_t
 *
õ
;

9684 (
õ
 = 
	`bcm_∑r£_évs
(
∑r£
, (
u32
)
Àn
, 
DOT11_MNG_INTERWORKING_ID
))) {

9685  (
bcm_év_t
 *)
õ
;

9687  
NULL
;

9688 
	}
}

9691 
s32


9692 
	$wl_cfg80211_add_iw_õ
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
, 
s32
 
bssidx
, s32 
pktÊag
,

9693 
uöt8
 
õ_id
, uöt8 *
d©a
, uöt8 
d©a_Àn
)

9695 
s32
 
îr
 = 
BCME_OK
;

9696 
s32
 
buf_Àn
;

9697 
s32
 
õcou¡
;

9698 
õ_£tbuf_t
 *
õ_£tbuf
;

9700 i‡(
õ_id
 !
DOT11_MNG_INTERWORKING_ID
)

9701  
BCME_UNSUPPORTED
;

9704 i‡((
pktÊag
 & ~(
VNDR_IE_BEACON_FLAG
 | 
VNDR_IE_PRBRSP_FLAG
 |

9705 
VNDR_IE_ASSOCRSP_FLAG
 | 
VNDR_IE_AUTHRSP_FLAG
 |

9706 
VNDR_IE_PRBREQ_FLAG
 | 
VNDR_IE_ASSOCREQ_FLAG
|

9707 
VNDR_IE_CUSTOM_FLAG
))) {

9708 
	`WL_ERR
(("cfg80211 Add IE: InvÆidÖackë fœg 0x%x\n", 
pktÊag
));

9713 
pktÊag
 = 
	`htod32
(pktflag);

9715 
buf_Àn
 = (
õ_£tbuf_t
Ë+ 
d©a_Àn
 - 1;

9716 
õ_£tbuf
 = (
õ_£tbuf_t
 *Ë
	`kzÆloc
(
buf_Àn
, 
GFP_KERNEL
);

9718 i‡(!
õ_£tbuf
) {

9719 
	`WL_ERR
(("Errorállocating buffer for IE\n"));

9720  -
ENOMEM
;

9723 i‡(
wl
->
iw_õ_Àn
 =
d©a_Àn
 && !
	`memcmp
(wl->
iw_õ
, 
d©a
, data_len)) {

9724 
	`WL_ERR
(("Previous IW IE isÉqualsÅo current IE\n"));

9725  
îr
;

9728 
	`°∫˝y
(
õ_£tbuf
->
cmd
, "add", 
VNDR_IE_CMD_LEN
 - 1);

9729 
õ_£tbuf
->
cmd
[
VNDR_IE_CMD_LEN
 - 1] = '\0';

9732 
õcou¡
 = 
	`htod32
(1);

9733 
	`mem˝y
((*)&
õ_£tbuf
->
õ_buf„r
.
õcou¡
, &iecount, ());

9734 
	`mem˝y
((*)&
õ_£tbuf
->
õ_buf„r
.
õ_li°
[0].
pktÊag
, &pktÊag, (
uöt32
));

9737 
õ_£tbuf
->
õ_buf„r
.
õ_li°
[0].
õ_d©a
.
id
 = 
õ_id
;

9740 i‡(
wl
->
iw_õ_Àn
 != 0) {

9741 
	`WL_DBG
(("Different IW_IE wasálready set. clear first\n"));

9743 
õ_£tbuf
->
õ_buf„r
.
õ_li°
[0].
õ_d©a
.
Àn
 = 0;

9745 
îr
 = 
	`wldev_iov¨_£tbuf_bsscfg
(
ndev
, "õ", 
õ_£tbuf
, 
buf_Àn
,

9746 
wl
->
io˘l_buf
, 
WLC_IOCTL_MAXLEN
, 
bssidx
, &wl->
io˘l_buf_sync
);

9748 i‡(
îr
 !
BCME_OK
)

9749  
îr
;

9752 
õ_£tbuf
->
õ_buf„r
.
õ_li°
[0].
õ_d©a
.
Àn
 = 
d©a_Àn
;

9753 
	`mem˝y
((
uch¨
 *)&
õ_£tbuf
->
õ_buf„r
.
õ_li°
[0].
õ_d©a
.
d©a
[0], d©a, 
d©a_Àn
);

9755 
îr
 = 
	`wldev_iov¨_£tbuf_bsscfg
(
ndev
, "õ", 
õ_£tbuf
, 
buf_Àn
,

9756 
wl
->
io˘l_buf
, 
WLC_IOCTL_MAXLEN
, 
bssidx
, &wl->
io˘l_buf_sync
);

9758 i‡(
îr
 =
BCME_OK
) {

9759 
	`mem˝y
(
wl
->
iw_õ
, 
d©a
, 
d©a_Àn
);

9760 
wl
->
iw_õ_Àn
 = 
d©a_Àn
;

9761 
wl
->
wl11u
 = 
TRUE
;

9763 
îr
 = 
	`wldev_iov¨_£töt_bsscfg
(
ndev
, "gøt_¨p", 1, 
bssidx
);

9766 
	`k‰ì
(
õ_£tbuf
);

9767  
îr
;

9768 
	}
}

9771 #ifde‡
WL_HOST_BAND_MGMT


9772 
s32


9773 
	$wl_cfg80211_£t_b™d
(
√t_devi˚
 *
ndev
, 
b™d
)

9775 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

9776 
ªt
 = 0;

9777 
io˘l_buf
[50];

9779 i‡((
b™d
 < 
WLC_BAND_AUTO
Ë|| (b™d > 
WLC_BAND_2G
)) {

9780 
	`WL_ERR
(("Invalid band\n"));

9781  -
EINVAL
;

9784 i‡((
ªt
 = 
	`wldev_iov¨_£tbuf
(
ndev
, "rﬂm_b™d", &
b™d
,

9785 (), 
io˘l_buf
, (io˘l_buf), 
NULL
)) < 0) {

9786 
	`WL_ERR
(("£tögÑﬂm_b™d faûed code=%d\n", 
ªt
));

9787  
ªt
;

9790 
	`WL_DBG
(("Sëtög b™dÅÿ%d\n", 
b™d
));

9791 
wl
->
cuº_b™d
 = 
b™d
;

9794 
	}
}

9797 #i‡
deföed
(
DHCP_SCAN_SUPPRESS
)

9798 
	$wl_cfg80211_sˇn_suµ_timîfunc
(
ul⁄g
 
d©a
)

9800 
wl_¥iv
 *
wl
 = (wl_¥iv *)
d©a
;

9802 
	`WL_DBG
(("Enter \n"));

9803 
	`scheduÀ_w‹k
(&
wl
->
wœn_w‹k
);

9804 
	}
}

9806 
	$wl_cfg80211_w‹k_h™dÀr
(
w‹k_°ru˘
 *
w‹k
)

9808 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

9810 
wl
 = 
	`c⁄èöî_of
(
w‹k
, 
wl_¥iv
, 
wœn_w‹k
);

9812 i‡(!
wl
) {

9813 
	`WL_ERR
(("wl_privÖtr NULL\n"));

9817 i‡(
wl
->
sˇn_suµªs£d
) {

9819 
	`WL_ERR
(("CÀ™ u∞‰omÅimîá·î %d m£c\n", 
WL_SCAN_SUPPRESS_TIMEOUT
));

9820 
	`wl_cfg80211_sˇn_suµªss
(
	`wl_to_¥mry_ndev
(
wl
), 0);

9822 
	}
}

9824 
	$wl_cfg80211_sˇn_suµªss
(
√t_devi˚
 *
dev
, 
suµªss
)

9826 
wl_¥iv
 *
wl
 = 
wlcfg_drv_¥iv
;

9827 
ªt
 = 0;

9829 i‡(!
dev
 || !
wl
 || ((
suµªss
 != 0) && (suppress != 1)))

9830  -
EINVAL
;

9832 i‡(
suµªss
 =
wl
->
sˇn_suµªs£d
) {

9833 
	`WL_DBG
(("No change in scan_suppress state. Ignoring cmd..\n"));

9837 i‡(
	`timî_≥ndög
(&
wl
->
sˇn_suµ_timî
))

9838 
	`dñ_timî_sync
(&
wl
->
sˇn_suµ_timî
);

9840 i‡((
ªt
 = 
	`wldev_io˘l
(
dev
, 
WLC_SET_SCANSUPPRESS
,

9841 &
suµªss
, (), 
åue
)) < 0) {

9842 
	`WL_ERR
(("Sˇ¿suµªs†£âög faûedÑë:%d \n", 
ªt
));

9844 
	`WL_DBG
(("Sˇ¿suµªs†%†\n", 
suµªss
 ? "Enabled" : "Disabled"));

9845 
wl
->
sˇn_suµªs£d
 = 
suµªss
;

9849 i‡(
wl
->
sˇn_suµªs£d
) {

9850 i‡(
ªt
) {

9851 
	`WL_ERR
(("Retry scan_suppressÑesetátáÜaterÅime \n"));

9852 
	`mod_timî
(&
wl
->
sˇn_suµ_timî
,

9853 
jiffõs
 + 
	`m£cs_to_jiffõs
(
WL_SCAN_SUPPRESS_RETRY
));

9855 
	`WL_DBG
(("Start wlan_timerÅo clear of scan_suppress \n"));

9856 
	`mod_timî
(&
wl
->
sˇn_suµ_timî
,

9857 
jiffõs
 + 
	`m£cs_to_jiffõs
(
WL_SCAN_SUPPRESS_TIMEOUT
));

9861  
ªt
;

9862 
	}
}

	@wl_cfg80211.h

27 #i‚de‡
_wl_cfg80211_h_


28 
	#_wl_cfg80211_h_


	)

30 
	~<löux/wúñess.h
>

31 
	~<ty≥defs.h
>

32 
	~<¥Ÿo/ëhî√t.h
>

33 
	~<wlio˘l.h
>

34 
	~<löux/wúñess.h
>

35 
	~<√t/cfg80211.h
>

36 
	~<löux/rfkûl.h
>

38 
	~<wl_cfgp2p.h
>

40 
	gwl_c⁄f
;

41 
	gwl_iÁ˚
;

42 
	gwl_¥iv
;

43 
	gwl_£curôy
;

44 
	gwl_ibss
;

47 
	#htod32
(
i
Ë
	)
i

48 
	#htod16
(
i
Ë
	)
i

49 
	#dtoh32
(
i
Ë
	)
i

50 
	#dtoh16
(
i
Ë
	)
i

51 
	#htodch™•ec
(
i
Ë
	)
i

52 
	#dtohch™•ec
(
i
Ë
	)
i

54 
	#WL_DBG_NONE
 0

	)

55 
	#WL_DBG_P2P_ACTION
 (1 << 5)

	)

56 
	#WL_DBG_TRACE
 (1 << 4)

	)

57 
	#WL_DBG_SCAN
 (1 << 3)

	)

58 
	#WL_DBG_DBG
 (1 << 2)

	)

59 
	#WL_DBG_INFO
 (1 << 1)

	)

60 
	#WL_DBG_ERR
 (1 << 0)

	)

63 
	#WL_DBG_LEVEL
 0xFF

	)

65 
	#CFG80211_ERROR_TEXT
 "CFG80211-ERRORË"

	)

67 #i‡
deföed
(
DHD_DEBUG
)

68 
	#WL_ERR
(
¨gs
) \

70 i‡(
wl_dbg_Àvñ
 & 
WL_DBG_ERR
) { \

71 
	`¥ötk
(
KERN_INFO
 
CFG80211_ERROR_TEXT
 "%†: ", 
__func__
); \

72 
¥ötk
 
¨gs
; \

74 } 0)

	)

76 
	#WL_ERR
(
¨gs
) \

78 i‡((
wl_dbg_Àvñ
 & 
WL_DBG_ERR
Ë&& 
	`√t_øãlimô
()) { \

79 
	`¥ötk
(
KERN_INFO
 
CFG80211_ERROR_TEXT
 "%†: ", 
__func__
); \

80 
¥ötk
 
¨gs
; \

82 } 0)

	)

85 #ifde‡
WL_INFO


86 #unde‡
WL_INFO


88 
	#WL_INFO
(
¨gs
) \

90 i‡(
wl_dbg_Àvñ
 & 
WL_DBG_INFO
) { \

91 
	`¥ötk
(
KERN_INFO
 "CFG80211-INFOË%†: ", 
__func__
); \

92 
¥ötk
 
¨gs
; \

94 } 0)

	)

95 #ifde‡
WL_SCAN


96 #unde‡
WL_SCAN


98 
	#WL_SCAN
(
¨gs
) \

100 i‡(
wl_dbg_Àvñ
 & 
WL_DBG_SCAN
) { \

101 
	`¥ötk
(
KERN_INFO
 "CFG80211-SCANË%†:", 
__func__
); \

102 
¥ötk
 
¨gs
; \

104 } 0)

	)

105 #ifde‡
WL_TRACE


106 #unde‡
WL_TRACE


108 
	#WL_TRACE
(
¨gs
) \

110 i‡(
wl_dbg_Àvñ
 & 
WL_DBG_TRACE
) { \

111 
	`¥ötk
(
KERN_INFO
 "CFG80211-TRACEË%†:", 
__func__
); \

112 
¥ötk
 
¨gs
; \

114 } 0)

	)

115 #ifde‡
WL_TRACE_HW4


116 #unde‡
WL_TRACE_HW4


118 
	#WL_TRACE_HW4
 
WL_TRACE


	)

119 #i‡(
WL_DBG_LEVEL
 > 0)

120 
	#WL_DBG
(
¨gs
) \

122 i‡(
wl_dbg_Àvñ
 & 
WL_DBG_DBG
) { \

123 
	`¥ötk
(
KERN_DEBUG
 "CFG80211-DEBUGË%†:", 
__func__
); \

124 
¥ötk
 
¨gs
; \

126 } 0)

	)

128 
	#WL_DBG
(
¨gs
)

	)

130 
	#WL_PNO
(
x
)

	)

131 
	#WL_SD
(
x
)

	)

134 
	#WL_SCAN_RETRY_MAX
 3

	)

135 
	#WL_NUM_PMKIDS_MAX
 
MAXPMKID


	)

136 
	#WL_SCAN_BUF_MAX
 (1024 * 8)

	)

137 
	#WL_TLV_INFO_MAX
 1500

	)

138 
	#WL_SCAN_IE_LEN_MAX
 2048

	)

139 
	#WL_BSS_INFO_MAX
 2048

	)

140 
	#WL_ASSOC_INFO_MAX
 512

	)

141 
	#WL_IOCTL_LEN_MAX
 1024

	)

142 
	#WL_EXTRA_BUF_MAX
 2048

	)

143 
	#WL_ISCAN_BUF_MAX
 2048

	)

144 
	#WL_ISCAN_TIMER_INTERVAL_MS
 3000

	)

145 
	#WL_SCAN_ERSULTS_LAST
 (
WL_SCAN_RESULTS_NO_MEM
+1)

	)

146 
	#WL_AP_MAX
 256

	)

147 
	#WL_FILE_NAME_MAX
 256

	)

148 
	#WL_DWELL_TIME
 200

	)

149 
	#WL_MED_DWELL_TIME
 400

	)

150 
	#WL_MIN_DWELL_TIME
 100

	)

151 
	#WL_LONG_DWELL_TIME
 1000

	)

152 
	#IFACE_MAX_CNT
 2

	)

153 
	#WL_SCAN_CONNECT_DWELL_TIME_MS
 200

	)

154 
	#WL_SCAN_JOIN_PROBE_INTERVAL_MS
 20

	)

155 
	#WL_SCAN_JOIN_ACTIVE_DWELL_TIME_MS
 320

	)

156 
	#WL_SCAN_JOIN_PASSIVE_DWELL_TIME_MS
 400

	)

157 
	#WL_AF_TX_MAX_RETRY
 5

	)

159 
	#WL_SCAN_TIMER_INTERVAL_MS
 8000

	)

160 
	#WL_CHANNEL_SYNC_RETRY
 5

	)

161 
	#WL_INVALID
 -1

	)

164 #i‚de‡
WL_SCB_TIMEOUT


165 
	#WL_SCB_TIMEOUT
 20

	)

169 
	#WL_SCAN_SUPPRESS_TIMEOUT
 31000

	)

170 
	#WL_SCAN_SUPPRESS_RETRY
 3000

	)

173 
	ewl_°©us
 {

174 
	mWL_STATUS_READY
 = 0,

175 
	mWL_STATUS_SCANNING
,

176 
	mWL_STATUS_SCAN_ABORTING
,

177 
	mWL_STATUS_CONNECTING
,

178 
	mWL_STATUS_CONNECTED
,

179 
	mWL_STATUS_DISCONNECTING
,

180 
	mWL_STATUS_AP_CREATING
,

181 
	mWL_STATUS_AP_CREATED
,

186 
	mWL_STATUS_SENDING_ACT_FRM
,

188 
	mWL_STATUS_FINDING_COMMON_CHANNEL
,

192 
	mWL_STATUS_WAITING_NEXT_ACT_FRM
,

193 #ifde‡
WL_CFG80211_SYNC_GON


195 
	mWL_STATUS_WAITING_NEXT_ACT_FRM_LISTEN
,

200 
	mWL_STATUS_REMAINING_ON_CHANNEL
,

201 #ifde‡
WL_CFG80211_VSDB_PRIORITIZE_SCAN_REQUEST


207 
	mWL_STATUS_FAKE_REMAINING_ON_CHANNEL


212 
	ewl_mode
 {

213 
	mWL_MODE_BSS
,

214 
	mWL_MODE_IBSS
,

215 
	mWL_MODE_AP


219 
	ewl_¥of_li°
 {

220 
	mWL_PROF_MODE
,

221 
	mWL_PROF_SSID
,

222 
	mWL_PROF_SEC
,

223 
	mWL_PROF_IBSS
,

224 
	mWL_PROF_BAND
,

225 
	mWL_PROF_CHAN
,

226 
	mWL_PROF_BSSID
,

227 
	mWL_PROF_ACT
,

228 
	mWL_PROF_BEACONINT
,

229 
	mWL_PROF_DTIMPERIOD


233 
	ewl_isˇn_°©e
 {

234 
	mWL_ISCAN_STATE_IDLE
,

235 
	mWL_ISCAN_STATE_SCANING


239 
	ewl_esˇn_°©e
 {

240 
	mWL_ESCAN_STATE_IDLE
,

241 
	mWL_ESCAN_STATE_SCANING


244 
	ewl_fw_°©us
 {

245 
	mWL_FW_LOADING_DONE
,

246 
	mWL_NVRAM_LOADING_DONE


249 
	ewl_m™agemít_ty≥
 {

250 
	mWL_BEACON
 = 0x1,

251 
	mWL_PROBE_RESP
 = 0x2,

252 
	mWL_ASSOC_RESP
 = 0x4

255 
	sbóc⁄_¥obîe•
 {

256 
__À64
 
	mtime°amp
;

257 
__À16
 
	mbóc⁄_öt
;

258 
__À16
 
	mˇ∑b_öfo
;

259 
u8
 
	mv¨übÀ
[0];

260 } 
__©åibuã__
 ((
∑cked
));

263 
	swl_c⁄f
 {

264 
u32
 
	m‰ag_thªshﬁd
;

265 
u32
 
	mπs_thªshﬁd
;

266 
u32
 
	mªåy_sh‹t
;

267 
u32
 
	mªåy_l⁄g
;

268 
s32
 
	mtx_powî
;

269 
õì80211_ch™√l
 
	mch™√l
;

272 
	$s32
(*
	tEVENT_HANDLER
Ë(
	twl_¥iv
 *
	twl
,

273 
	t√t_devi˚
 *
	tndev
, c⁄° 
	twl_evít_msg_t
 *
	te
, *
	td©a
);

276 
	swl_cfg80211_bss_öfo
 {

277 
u16
 
b™d
;

278 
u16
 
ch™√l
;

279 
s16
 
rssi
;

280 
u16
 
‰ame_Àn
;

281 
u8
 
‰ame_buf
[1];

285 
	swl_sˇn_ªq
 {

286 
wlc_ssid
 
ssid
;

290 
	swl_õ
 {

291 
u16
 
off£t
;

292 
u8
 
buf
[
WL_TLV_INFO_MAX
];

296 
	swl_evít_q
 {

297 
li°_hód
 
eq_li°
;

298 
u32
 
ëy≥
;

299 
wl_evít_msg_t
 
emsg
;

300 
s8
 
ed©a
[1];

304 
	swl_£curôy
 {

305 
u32
 
w∑_vîsi⁄s
;

306 
u32
 
auth_ty≥
;

307 
u32
 
cùhî_∑úwi£
;

308 
u32
 
cùhî_group
;

309 
u32
 
w∑_auth
;

310 
u32
 
auth_assoc_ªs_°©us
;

314 
	swl_ibss
 {

315 
u8
 
bóc⁄_öãrvÆ
;

316 
u8
 
©im
;

317 
s8
 
joö_⁄ly
;

318 
u8
 
b™d
;

319 
u8
 
ch™√l
;

323 
	swl_¥ofûe
 {

324 
u32
 
mode
;

325 
s32
 
b™d
;

326 
u32
 
ch™√l
;

327 
wlc_ssid
 
ssid
;

328 
wl_£curôy
 
£c
;

329 
wl_ibss
 
ibss
;

330 
u8
 
bssid
[
ETHER_ADDR_LEN
];

331 
u16
 
bóc⁄_öãrvÆ
;

332 
u8
 
dtim_≥riod
;

333 
boﬁ
 
a˘ive
;

336 
	s√t_öfo
 {

337 
√t_devi˚
 *
ndev
;

338 
wúñess_dev
 *
wdev
;

339 
wl_¥ofûe
 
¥ofûe
;

340 
s32
 
mode
;

341 
s32
 
rﬂm_off
;

342 
sme_°©e
;

343 
boﬁ
 
pm_ª°‹e
;

344 
boﬁ
 
pm_block
;

345 
s32
 
pm
;

346 
li°_hód
 
li°
;

348 
	$s32
(*
	tISCAN_HANDLER
Ë(
	twl_¥iv
 *
	twl
);

351 
	swl_isˇn_˘æ
 {

352 
√t_devi˚
 *
dev
;

353 
timî_li°
 
timî
;

354 
u32
 
timî_ms
;

355 
u32
 
timî_⁄
;

356 
s32
 
°©e
;

357 
èsk_°ru˘
 *
tsk
;

358 
£m≠h‹e
 
sync
;

359 
ISCAN_HANDLER
 
isˇn_h™dÀr
[
WL_SCAN_ERSULTS_LAST
];

360 *
d©a
;

361 
s8
 
io˘l_buf
[
WLC_IOCTL_SMLEN
];

362 
s8
 
sˇn_buf
[
WL_ISCAN_BUF_MAX
];

366 
	#MAX_REQ_LINE
 1024

	)

367 
	swl_c⁄√˘_öfo
 {

368 
u8
 
ªq_õ
[
MAX_REQ_LINE
];

369 
s32
 
ªq_õ_Àn
;

370 
u8
 
ª•_õ
[
MAX_REQ_LINE
];

371 
s32
 
ª•_õ_Àn
;

375 
	swl_fw_˘æ
 {

376 c⁄° 
fúmw¨e
 *
fw_íåy
;

377 
°©us
;

378 
u32
 
±r
;

379 
s8
 
fw_«me
[
WL_FILE_NAME_MAX
];

380 
s8
 
nvøm_«me
[
WL_FILE_NAME_MAX
];

384 
	swl_assoc_õÀn
 {

385 
u32
 
ªq_Àn
;

386 
u32
 
ª•_Àn
;

390 
	swl_pmk_li°
 {

391 
pmkid_li°_t
 
pmkids
;

392 
pmkid_t
 
foo
[
MAXPMKID
 - 1];

396 
	#ESCAN_BUF_SIZE
 (64 * 1024)

	)

398 
	sesˇn_öfo
 {

399 
u32
 
esˇn_°©e
;

400 #i‡
	`deföed
(
STATIC_WL_PRIV_STRUCT
)

401 #i‚de‡
CONFIG_DHD_USE_STATIC_BUF


402 #îr‹ 
STATIC_WL_PRIV_STRUCT
 
should
 
be
 
u£d
 
wôh
 
CONFIG_DHD_USE_STATIC_BUF


404 
u8
 *
esˇn_buf
;

406 
u8
 
esˇn_buf
[
ESCAN_BUF_SIZE
];

408 
wùhy
 *wiphy;

409 
√t_devi˚
 *
ndev
;

412 
	s≠_öfo
 {

414 
u8
 
¥obe_ªs_õ
[
VNDR_IES_MAX_BUF_LEN
];

415 
u8
 
bóc⁄_õ
[
VNDR_IES_MAX_BUF_LEN
];

416 
u32
 
¥obe_ªs_õ_Àn
;

417 
u32
 
bóc⁄_õ_Àn
;

418 
u8
 *
w∑_õ
;

419 
u8
 *
r¢_õ
;

420 
u8
 *
wps_õ
;

421 
boﬁ
 
£curôy_mode
;

423 
	sbtc€x_öfo
 {

424 
timî_li°
 
timî
;

425 
u32
 
timî_ms
;

426 
u32
 
timî_⁄
;

427 
u32
 
ts_dh˝_°¨t
;

428 
u32
 
ts_dh˝_ok
;

429 
boﬁ
 
dh˝_d⁄e
;

432 
s32
 
bt_°©e
;

433 
w‹k_°ru˘
 
w‹k
;

434 
√t_devi˚
 *
dev
;

437 
	s°a_öfo
 {

439 
u8
 
¥obe_ªq_õ
[
VNDR_IES_BUF_LEN
];

440 
u8
 
assoc_ªq_õ
[
VNDR_IES_BUF_LEN
];

441 
u32
 
¥obe_ªq_õ_Àn
;

442 
u32
 
assoc_ªq_õ_Àn
;

445 
	safx_hdl
 {

446 
wl_af_∑øms_t
 *
≥ndög_tx_a˘_‰m
;

447 
ëhî_addr
 
tx_d°_addr
;

448 
√t_devi˚
 *
dev
;

449 
w‹k_°ru˘
 
w‹k
;

450 
u32
 
bssidx
;

451 
u32
 
ªåy
;

452 
s32
 
≥î_ch™
;

453 
s32
 
≥î_li°í_ch™
;

454 
s32
 
my_li°í_ch™
;

455 
boﬁ
 
is_li°í
;

456 
boﬁ
 
ack_ªcv
;

457 
boﬁ
 
is_a˘ive
;

460 
	s∑r£d_õs
 {

461 
w∑_õ_fixed_t
 *
wps_õ
;

462 
u32
 
wps_õ_Àn
;

463 
w∑_õ_fixed_t
 *
w∑_õ
;

464 
u32
 
w∑_õ_Àn
;

465 
bcm_év_t
 *
w∑2_õ
;

466 
u32
 
w∑2_õ_Àn
;

470 #ifde‡
WL11U


472 
	#IW_IES_MAX_BUF_LEN
 9

	)

475 
	#MAX_EVENT_BUF_NUM
 16

	)

476 
	swl_evítmsg_buf
 {

477 
u16
 
num
;

479 
u16
 
ty≥
;

480 
boﬁ
 
£t
;

481 } 
evít
 [
MAX_EVENT_BUF_NUM
];

482 } 
	twl_evítmsg_buf_t
;

485 
	swl_¥iv
 {

486 
wúñess_dev
 *
wdev
;

488 
wúñess_dev
 *
p2p_wdev
;

489 
√t_devi˚
 *
p2p_√t
;

491 
wl_c⁄f
 *
c⁄f
;

492 
cfg80211_sˇn_ªque°
 *
sˇn_ªque°
;

493 
EVENT_HANDLER
 
evt_h™dÀr
[
WLC_E_LAST
];

494 
li°_hód
 
eq_li°
;

495 
li°_hód
 
√t_li°
;

496 
•ölock_t
 
eq_lock
;

497 
•ölock_t
 
cfgdrv_lock
;

498 
com∂ëi⁄
 
a˘_‰m_sˇn
;

499 
com∂ëi⁄
 
iÁ˚_dißbÀ
;

500 
com∂ëi⁄
 
waô_√xt_af
;

501 
muãx
 
u§_sync
;

502 
wl_sˇn_ªsu…s
 *
bss_li°
;

503 
wl_sˇn_ªsu…s
 *
sˇn_ªsu…s
;

506 
wl_sˇn_ªq
 *
sˇn_ªq_öt
;

508 #i‡
	`deföed
(
STATIC_WL_PRIV_STRUCT
)

509 
wl_õ
 *
õ
;

511 
wl_õ
 
õ
;

513 
wl_isˇn_˘æ
 *
isˇn
;

516 #i‡
	`deföed
(
STATIC_WL_PRIV_STRUCT
)

517 
wl_c⁄√˘_öfo
 *
c⁄n_öfo
;

519 
wl_c⁄√˘_öfo
 
c⁄n_öfo
;

522 
wl_pmk_li°
 *
pmk_li°
;

523 
tsk_˘l_t
 
evít_tsk
;

524 *
pub
;

525 
u32
 
iÁ˚_˙t
;

526 
u32
 
ch™√l
;

527 
u32
 
af_£¡_ch™√l
;

529 
u8
 
√xt_af_subty≥
;

530 #ifde‡
WL_CFG80211_SYNC_GON


531 
ul⁄g
 
af_tx_£¡_jiffõs
;

533 
boﬁ
 
isˇn_⁄
;

534 
boﬁ
 
isˇn_kick°¨t
;

535 
boﬁ
 
esˇn_⁄
;

536 
esˇn_öfo
Éscan_info;

537 
boﬁ
 
a˘ive_sˇn
;

538 
boﬁ
 
ibss_°¨ãr
;

539 
boﬁ
 
lök_up
;

542 
boﬁ
 
pwr_ßve
;

543 
boﬁ
 
rﬂm_⁄
;

544 
boﬁ
 
sˇn_åõd
;

545 
boﬁ
 
wlfc_⁄
;

546 
boﬁ
 
vsdb_mode
;

547 
boﬁ
 
rﬂmoff_⁄_c⁄cuºít
;

548 
u8
 *
io˘l_buf
;

549 
muãx
 
io˘l_buf_sync
;

550 
u8
 *
esˇn_io˘l_buf
;

551 
u8
 *
exåa_buf
;

552 
díåy
 *
debugfsdú
;

553 
rfkûl
 *rfkill;

554 
boﬁ
 
rf_blocked
;

555 
õì80211_ch™√l
 
ªmaö_⁄_ch™
;

556 
∆80211_ch™√l_ty≥
 
ªmaö_⁄_ch™_ty≥
;

557 
u64
 
£nd_a˘i⁄_id
;

558 
u64
 
œ°_roc_id
;

559 
waô_queue_hód_t
 
√tif_ch™ge_evít
;

560 
com∂ëi⁄
 
£nd_af_d⁄e
;

561 
afx_hdl
 *afx_hdl;

562 
≠_öfo
 *ap_info;

563 
°a_öfo
 *sta_info;

564 
p2p_öfo
 *
p2p
;

565 
boﬁ
 
p2p_suµ‹ãd
;

566 
btc€x_öfo
 *btcoex_info;

567 
timî_li°
 
sˇn_timeout
;

568 
	`s32
(*
°©e_nŸifõr
Ë(
wl_¥iv
 *
wl
,

569 
√t_öfo
 *
_√t_öfo
, 
wl_°©us
 
°©e
, 
boﬁ
 
£t
);

570 
öãºe°ed_°©e
;

571 
wlc_ssid_t
 
ho°≠d_ssid
;

572 #ifde‡
WL11U


573 
boﬁ
 
wl11u
;

574 
u8
 
iw_õ
[
IW_IES_MAX_BUF_LEN
];

575 
u32
 
iw_õ_Àn
;

577 
boﬁ
 
sched_sˇn_ru¬ög
;

578 #ifde‡
WL_SCHED_SCAN


579 
cfg80211_sched_sˇn_ªque°
 *
sched_sˇn_ªq
;

581 #ifde‡
WL_HOST_BAND_MGMT


582 
u8
 
cuº_b™d
;

584 
boﬁ
 
sˇn_suµªs£d
;

585 
timî_li°
 
sˇn_suµ_timî
;

586 
w‹k_°ru˘
 
wœn_w‹k
;

587 
muãx
 
evít_sync
;

591 
ölöe
 
wl_bss_öfo
 *
	$√xt_bss
(
wl_sˇn_ªsu…s
 *
li°
, 
wl_bss_öfo
 *
bss
)

593  
bss
 = bss ?

594 (
wl_bss_öfo
 *)((
uöçå
Ë
bss
 + 
	`dtoh32
(bss->
Àngth
)Ë: 
li°
->
bss_öfo
;

595 
	}
}

596 
ölöe
 
s32


597 
	$wl_Æloc_√töfo
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
,

598 
wúñess_dev
 * 
wdev
, 
s32
 
mode
, 
boﬁ
 
pm_block
)

600 
√t_öfo
 *
_√t_öfo
;

601 
s32
 
îr
 = 0;

602 i‡(
wl
->
iÁ˚_˙t
 =
IFACE_MAX_CNT
)

603  -
ENOMEM
;

604 
_√t_öfo
 = 
	`kzÆloc
((
√t_öfo
), 
GFP_KERNEL
);

605 i‡(!
_√t_öfo
)

606 
îr
 = -
ENOMEM
;

608 
_√t_öfo
->
mode
 = mode;

609 
_√t_öfo
->
ndev
 =Çdev;

610 
_√t_öfo
->
wdev
 = wdev;

611 
_√t_öfo
->
pm_ª°‹e
 = 0;

612 
_√t_öfo
->
pm
 = 0;

613 
_√t_öfo
->
pm_block
 =Öm_block;

614 
_√t_öfo
->
rﬂm_off
 = 
WL_INVALID
;

615 
wl
->
iÁ˚_˙t
++;

616 
	`li°_add
(&
_√t_öfo
->
li°
, &
wl
->
√t_li°
);

618  
îr
;

619 
	}
}

620 
ölöe
 

621 
	$wl_dóŒoc_√töfo
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
)

623 
√t_öfo
 *
_√t_öfo
, *
√xt
;

625 
	`li°_f‹_óch_íåy_ß„
(
_√t_öfo
, 
√xt
, &
wl
->
√t_li°
, 
li°
) {

626 i‡(
ndev
 && (
_√t_öfo
->ndev ==Çdev)) {

627 
	`li°_dñ
(&
_√t_öfo
->
li°
);

628 
wl
->
iÁ˚_˙t
--;

629 i‡(
_√t_öfo
->
wdev
) {

630 
	`k‰ì
(
_√t_öfo
->
wdev
);

631 
ndev
->
õì80211_±r
 = 
NULL
;

633 
	`k‰ì
(
_√t_öfo
);

637 
	}
}

638 
ölöe
 

639 
	$wl_dñëe_Æl_√töfo
(
wl_¥iv
 *
wl
)

641 
√t_öfo
 *
_√t_öfo
, *
√xt
;

643 
	`li°_f‹_óch_íåy_ß„
(
_√t_öfo
, 
√xt
, &
wl
->
√t_li°
, 
li°
) {

644 
	`li°_dñ
(&
_√t_öfo
->
li°
);

645 i‡(
_√t_öfo
->
wdev
)

646 
	`k‰ì
(
_√t_öfo
->
wdev
);

647 
	`k‰ì
(
_√t_öfo
);

649 
wl
->
iÁ˚_˙t
 = 0;

650 
	}
}

651 
ölöe
 
u32


652 
	$wl_gë_°©us_Æl
(
wl_¥iv
 *
wl
, 
s32
 
°©us
)

655 
√t_öfo
 *
_√t_öfo
, *
√xt
;

656 
u32
 
˙t
 = 0;

657 
	`li°_f‹_óch_íåy_ß„
(
_√t_öfo
, 
√xt
, &
wl
->
√t_li°
, 
li°
) {

658 i‡(
_√t_öfo
->
ndev
 &&

659 
	`ã°_bô
(
°©us
, &
_√t_öfo
->
sme_°©e
))

660 
˙t
++;

662  
˙t
;

663 
	}
}

664 
ölöe
 

665 
	$wl_£t_°©us_Æl
(
wl_¥iv
 *
wl
, 
s32
 
°©us
, 
u32
 
›
)

667 
√t_öfo
 *
_√t_öfo
, *
√xt
;

668 
	`li°_f‹_óch_íåy_ß„
(
_√t_öfo
, 
√xt
, &
wl
->
√t_li°
, 
li°
) {

669 
›
) {

673 
	`˛ór_bô
(
°©us
, &
_√t_öfo
->
sme_°©e
);

674 i‡(
wl
->
°©e_nŸifõr
 &&

675 
	`ã°_bô
(
°©us
, &(
wl
->
öãºe°ed_°©e
)))

676 
wl
->
	`°©e_nŸifõr
(wl, 
_√t_öfo
, 
°©us
, 
Ál£
);

684 
	}
}

685 
ölöe
 

686 
	$wl_£t_°©us_by_√tdev
(
wl_¥iv
 *
wl
, 
s32
 
°©us
,

687 
√t_devi˚
 *
ndev
, 
u32
 
›
)

690 
√t_öfo
 *
_√t_öfo
, *
√xt
;

692 
	`li°_f‹_óch_íåy_ß„
(
_√t_öfo
, 
√xt
, &
wl
->
√t_li°
, 
li°
) {

693 i‡(
ndev
 && (
_√t_öfo
->ndev ==Çdev)) {

694 
›
) {

696 
	`£t_bô
(
°©us
, &
_√t_öfo
->
sme_°©e
);

697 i‡(
wl
->
°©e_nŸifõr
 &&

698 
	`ã°_bô
(
°©us
, &(
wl
->
öãºe°ed_°©e
)))

699 
wl
->
	`°©e_nŸifõr
(wl, 
_√t_öfo
, 
°©us
, 
åue
);

702 
	`˛ór_bô
(
°©us
, &
_√t_öfo
->
sme_°©e
);

703 i‡(
wl
->
°©e_nŸifõr
 &&

704 
	`ã°_bô
(
°©us
, &(
wl
->
öãºe°ed_°©e
)))

705 
wl
->
	`°©e_nŸifõr
(wl, 
_√t_öfo
, 
°©us
, 
Ál£
);

708 
	`ch™ge_bô
(
°©us
, &
_√t_öfo
->
sme_°©e
);

715 
	}
}

717 
ölöe
 
u32


718 
	$wl_gë_°©us_by_√tdev
(
wl_¥iv
 *
wl
, 
s32
 
°©us
,

719 
√t_devi˚
 *
ndev
)

721 
√t_öfo
 *
_√t_öfo
, *
√xt
;

723 
	`li°_f‹_óch_íåy_ß„
(
_√t_öfo
, 
√xt
, &
wl
->
√t_li°
, 
li°
) {

724 i‡(
ndev
 && (
_√t_öfo
->ndev ==Çdev))

725  
	`ã°_bô
(
°©us
, &
_√t_öfo
->
sme_°©e
);

728 
	}
}

730 
ölöe
 
s32


731 
	$wl_gë_mode_by_√tdev
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
)

733 
√t_öfo
 *
_√t_öfo
, *
√xt
;

735 
	`li°_f‹_óch_íåy_ß„
(
_√t_öfo
, 
√xt
, &
wl
->
√t_li°
, 
li°
) {

736 i‡(
ndev
 && (
_√t_öfo
->ndev ==Çdev))

737  
_√t_öfo
->
mode
;

740 
	}
}

743 
ölöe
 

744 
	$wl_£t_mode_by_√tdev
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
,

745 
s32
 
mode
)

747 
√t_öfo
 *
_√t_öfo
, *
√xt
;

749 
	`li°_f‹_óch_íåy_ß„
(
_√t_öfo
, 
√xt
, &
wl
->
√t_li°
, 
li°
) {

750 i‡(
ndev
 && (
_√t_öfo
->ndev ==Çdev))

751 
_√t_öfo
->
mode
 = mode;

753 
	}
}

754 
ölöe
 
wl_¥ofûe
 *

755 
	$wl_gë_¥ofûe_by_√tdev
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
)

757 
√t_öfo
 *
_√t_öfo
, *
√xt
;

759 
	`li°_f‹_óch_íåy_ß„
(
_√t_öfo
, 
√xt
, &
wl
->
√t_li°
, 
li°
) {

760 i‡(
ndev
 && (
_√t_öfo
->ndev ==Çdev))

761  &
_√t_öfo
->
¥ofûe
;

763  
NULL
;

764 
	}
}

765 
ölöe
 
√t_öfo
 *

766 
	$wl_gë_√töfo_by_√tdev
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
)

768 
√t_öfo
 *
_√t_öfo
, *
√xt
;

770 
	`li°_f‹_óch_íåy_ß„
(
_√t_öfo
, 
√xt
, &
wl
->
√t_li°
, 
li°
) {

771 i‡(
ndev
 && (
_√t_öfo
->ndev ==Çdev))

772  
_√t_öfo
;

774  
NULL
;

775 
	}
}

776 
	#wl_to_wùhy
(
w
Ë(w->
wdev
->
wùhy
)

	)

777 
	#wl_to_¥mry_ndev
(
w
Ë(w->
wdev
->
√tdev
)

	)

778 
	#ndev_to_wl
(
n
Ë(
	`wdev_to_wl
“->
õì80211_±r
))

	)

779 
	#wl_to_§
(
w
Ë(w->
sˇn_ªq_öt
)

	)

780 #i‡
deföed
(
STATIC_WL_PRIV_STRUCT
)

781 
	#wl_to_õ
(
w
Ë(w->
õ
)

	)

782 
	#wl_to_c⁄n
(
w
Ë(w->
c⁄n_öfo
)

	)

784 
	#wl_to_õ
(
w
Ë(&w->
õ
)

	)

785 
	#wl_to_c⁄n
(
w
Ë(&w->
c⁄n_öfo
)

	)

787 
	#isˇn_to_wl
(
i
Ë((
wl_¥iv
 *)(i->
d©a
))

	)

788 
	#wl_to_isˇn
(
w
Ë(w->
isˇn
)

	)

789 
	#wùhy_‰om_sˇn
(
w
Ë(w->
esˇn_öfo
.
wùhy
)

	)

790 
	#wl_gë_drv_°©us_Æl
(
wl
, 
°©
) \

791 (
	`wl_gë_°©us_Æl
(
wl
, 
WL_STATUS_
 ## 
°©
))

	)

792 
	#wl_gë_drv_°©us
(
wl
, 
°©
, 
ndev
) \

793 (
	`wl_gë_°©us_by_√tdev
(
wl
, 
WL_STATUS_
 ## 
°©
, 
ndev
))

	)

794 
	#wl_£t_drv_°©us
(
wl
, 
°©
, 
ndev
) \

795 (
	`wl_£t_°©us_by_√tdev
(
wl
, 
WL_STATUS_
 ## 
°©
, 
ndev
, 1))

	)

796 
	#wl_˛r_drv_°©us
(
wl
, 
°©
, 
ndev
) \

797 (
	`wl_£t_°©us_by_√tdev
(
wl
, 
WL_STATUS_
 ## 
°©
, 
ndev
, 2))

	)

798 
	#wl_˛r_drv_°©us_Æl
(
wl
, 
°©
) \

799 (
	`wl_£t_°©us_Æl
(
wl
, 
WL_STATUS_
 ## 
°©
, 2))

	)

800 
	#wl_chg_drv_°©us
(
wl
, 
°©
, 
ndev
) \

801 (
	`wl_£t_°©us_by_√tdev
(
wl
, 
WL_STATUS_
 ## 
°©
, 
ndev
, 4))

	)

803 
	#f‹_óch_bss
(
li°
, 
bss
, 
__i
) \

804 
__i
 = 0; __ò< 
li°
->
cou¡
 && __ò< 
WL_AP_MAX
; __i++, 
bss
 = 
	`√xt_bss
÷i°, bss))

	)

806 
	#f‹_óch_ndev
(
wl
, 
ôî
, 
√xt
) \

807 
	`li°_f‹_óch_íåy_ß„
(
ôî
, 
√xt
, &
wl
->
√t_li°
, 
li°
)

	)

813 
	#is_wps_c⁄n
(
_sme
) \

814 ((
	`wl_cfgp2p_föd_wpsõ
((
u8
 *)
_sme
->
õ
, _sme->
õ_Àn
Ë!
NULL
) && \

815 (!
_sme
->
¸y±o
.
n_cùhîs_∑úwi£
) && \

816 (!
_sme
->
¸y±o
.
cùhî_group
))

	)

817 
s32
 
wl_cfg80211_©èch
(
√t_devi˚
 *
ndev
, *
d©a
);

818 
s32
 
wl_cfg80211_©èch_po°
(
√t_devi˚
 *
ndev
);

819 
wl_cfg80211_dëach
(*
∑ø
);

821 
wl_cfg80211_evít
(
√t_devi˚
 *
ndev
, c⁄° 
wl_evít_msg_t
 *
e
,

822 *
d©a
);

823 
wl_cfg80211_£t_∑ª¡_dev
(*
dev
);

824 
devi˚
 *
wl_cfg80211_gë_∑ª¡_dev
();

826 
s32
 
wl_cfg80211_up
(*
∑ø
);

827 
s32
 
wl_cfg80211_down
(*
∑ø
);

828 
s32
 
wl_cfg80211_nŸify_iÁdd
(
√t_devi˚
 *
ndev
, s32 
idx
, s32 
bssidx
,

829 * 
_√t_©èch
);

830 
s32
 
wl_cfg80211_ifdñ_›s
(
√t_devi˚
 *
√t
);

831 
s32
 
wl_cfg80211_nŸify_ifdñ
();

832 
s32
 
wl_cfg80211_is_¥ogªss_iÁdd
();

833 
s32
 
wl_cfg80211_is_¥ogªss_ifch™ge
();

834 
s32
 
wl_cfg80211_is_¥ogªss_iÁdd
();

835 
s32
 
wl_cfg80211_nŸify_ifch™ge
();

836 
wl_cfg80211_dbg_Àvñ
(
u32
 
Àvñ
);

837 
s32
 
wl_cfg80211_gë_p2p_dev_addr
(
√t_devi˚
 *
√t
, 
ëhî_addr
 *
p2pdev_addr
);

838 
s32
 
wl_cfg80211_£t_p2p_nﬂ
(
√t_devi˚
 *
√t
, * 
buf
, 
Àn
);

839 
s32
 
wl_cfg80211_gë_p2p_nﬂ
(
√t_devi˚
 *
√t
, * 
buf
, 
Àn
);

840 
s32
 
wl_cfg80211_£t_wps_p2p_õ
(
√t_devi˚
 *
√t
, *
buf
, 
Àn
,

841 
wl_m™agemít_ty≥
 
ty≥
);

842 
s32
 
wl_cfg80211_£t_p2p_ps
(
√t_devi˚
 *
√t
, * 
buf
, 
Àn
);

843 
wl_cfg80211_h™g
(
√t_devi˚
 *
dev
, 
u16
 
ªas⁄
);

844 
s32
 
wl_mode_to_∆80211_i·y≥
(s32 
mode
);

845 
wl_cfg80211_do_drivî_öô
(
√t_devi˚
 *
√t
);

846 
wl_cfg80211_íabÀ_åa˚
(
boﬁ
 
£t
, 
u32
 
Àvñ
);

847 
s32
 
wl_upd©e_wùhyb™ds
(
wl_¥iv
 *
wl
, 
boﬁ
 
nŸify
);

848 
s32
 
wl_cfg80211_if_is_group_ow√r
();

849 
ch™•ec_t
 
wl_ch_ho°_to_drivî
(
u16
 
ch™√l
);

850 
s32
 
wl_add_ªmove_evítmsg
(
√t_devi˚
 *
ndev
, 
u16
 
evít
, 
boﬁ
 
add
);

851 
wl_°›_waô_√xt_a˘i⁄_‰ame
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
);

852 
s32
 
wl_cfg80211_£t_b™d
(
√t_devi˚
 *
ndev
, 
b™d
);

853 
wl_cfg80211_upd©e_powî_mode
(
√t_devi˚
 *
dev
);

854 #i‡
deföed
(
DHCP_SCAN_SUPPRESS
)

855 
wl_cfg80211_sˇn_suµªss
(
√t_devi˚
 *
dev
, 
suµªss
);

857 
wl_cfg80211_add_to_evítbuf„r
(
wl_evítmsg_buf_t
 *
ev
, 
u16
 
evít
, 
boﬁ
 
£t
);

858 
s32
 
wl_cfg80211_≠∂y_evítbuf„r
(
√t_devi˚
 *
ndev
,

859 
wl_¥iv
 *
wl
, 
wl_evítmsg_buf_t
 *
ev
);

	@wl_cfgp2p.c

27 
	~<ty≥defs.h
>

28 
	~<löuxvî.h
>

29 
	~<o¶.h
>

30 
	~<löux/kî√l.h
>

31 
	~<löux/kthªad.h
>

32 
	~<löux/√tdevi˚.h
>

33 
	~<löux/ëhîdevi˚.h
>

34 
	~<löux/ty≥s.h
>

35 
	~<löux/°rög.h
>

36 
	~<löux/timî.h
>

37 
	~<löux/if_¨p.h
>

38 
	~<asm/uac˚ss.h
>

40 
	~<bcmutûs.h
>

41 
	~<bcmídün.h
>

42 
	~<¥Ÿo/ëhî√t.h
>

43 
	~<¥Ÿo/802.11.h
>

45 
	~<wl_cfg80211.h
>

46 
	~<wl_cfgp2p.h
>

47 
	~<wldev_comm⁄.h
>

48 
	~<wl_™droid.h
>

50 
s8
 
	gsˇ≈¨ambuf
[
WLC_IOCTL_SMLEN
];

51 
s8
 
	gg_mgmt_õ_buf
[2048];

52 
boﬁ


53 
wl_cfgp2p_has_õ
(
u8
 *
õ
, u8 **
évs
, 
u32
 *
évs_Àn
, c⁄° u8 *
oui
, u32 
oui_Àn
, u8 
ty≥
);

55 
u32


56 
wl_cfgp2p_vndr_õ
(
wl_¥iv
 *
wl
, 
u8
 *
õbuf
, 
s32
 
bssidx
, s32 
pktÊag
,

57 
s8
 *
oui
, 
s32
 
õ_id
, s8 *
d©a
, s32 
d©Æí
, c⁄° s8* 
add_dñ_cmd
);

59 
wl_cfgp2p_°¨t_xmô
(
sk_buff
 *
skb
, 
√t_devi˚
 *
ndev
);

60 
wl_cfgp2p_do_io˘l
(
√t_devi˚
 *
√t
, 
i‰eq
 *
i‰
, 
cmd
);

61 
wl_cfgp2p_if_›í
(
√t_devi˚
 *
√t
);

62 
wl_cfgp2p_if_°›
(
√t_devi˚
 *
√t
);

63 
s32
 
wl_cfgp2p_ˇn˚l_li°í
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
,

64 
boﬁ
 
nŸify
);

66 c⁄° 
√t_devi˚_›s
 
	gwl_cfgp2p_if_›s
 = {

67 .
ndo_›í
 = 
wl_cfgp2p_if_›í
,

68 .
	gndo_°›
 = 
wl_cfgp2p_if_°›
,

69 .
	gndo_do_io˘l
 = 
wl_cfgp2p_do_io˘l
,

70 .
	gndo_°¨t_xmô
 = 
wl_cfgp2p_°¨t_xmô
,

73 
boﬁ
 
	$wl_cfgp2p_is_pub_a˘i⁄
(*
‰ame
, 
u32
 
‰ame_Àn
)

75 
wifi_p2p_pub_a˘_‰ame_t
 *
∑˘_‰m
;

77 i‡(
‰ame
 =
NULL
)

78  
Ál£
;

79 
∑˘_‰m
 = (
wifi_p2p_pub_a˘_‰ame_t
 *)
‰ame
;

80 i‡(
‰ame_Àn
 < (
wifi_p2p_pub_a˘_‰ame_t
) -1)

81  
Ál£
;

83 i‡(
∑˘_‰m
->
ˇãg‹y
 =
P2P_PUB_AF_CATEGORY
 &&

84 
∑˘_‰m
->
a˘i⁄
 =
P2P_PUB_AF_ACTION
 &&

85 
∑˘_‰m
->
oui_ty≥
 =
P2P_VER
 &&

86 
	`memcmp
(
∑˘_‰m
->
oui
, 
P2P_OUI
, (pact_frm->oui)) == 0) {

87  
åue
;

90  
Ál£
;

91 
	}
}

93 
boﬁ
 
	$wl_cfgp2p_is_p2p_a˘i⁄
(*
‰ame
, 
u32
 
‰ame_Àn
)

95 
wifi_p2p_a˘i⁄_‰ame_t
 *
a˘_‰m
;

97 i‡(
‰ame
 =
NULL
)

98  
Ál£
;

99 
a˘_‰m
 = (
wifi_p2p_a˘i⁄_‰ame_t
 *)
‰ame
;

100 i‡(
‰ame_Àn
 < (
wifi_p2p_a˘i⁄_‰ame_t
) -1)

101  
Ál£
;

103 i‡(
a˘_‰m
->
ˇãg‹y
 =
P2P_AF_CATEGORY
 &&

104 
a˘_‰m
->
ty≥
 =
P2P_VER
 &&

105 
	`memcmp
(
a˘_‰m
->
OUI
, 
P2P_OUI
, 
DOT11_OUI_LEN
) == 0) {

106  
åue
;

109  
Ál£
;

110 
	}
}

117 #ifde‡
WL11U


118 
	#GAS_RESP_LEN
 2

	)

119 
	#DOUBLE_TLV_BODY_OFF
 4

	)

120 
	#GAS_RESP_OFFSET
 4

	)

121 
	#GAS_CRESP_OFFSET
 5

	)

123 
boﬁ
 
	$wl_cfgp2p_föd_gas_subty≥
(
u8
 
subty≥
, u8* 
d©a
, 
u32
 
Àn
)

125 
bcm_év_t
 *
õ
 = (bcm_év_à*)
d©a
;

126 
u8
 *
‰ame
 = 
NULL
;

127 
u16
 
id
, 
Êí
;

130 
õ
 = 
	`bcm_∑r£_évs
(õ, ()
Àn
, 
DOT11_MNG_ADVERTISEMENT_ID
);

132 i‡(
õ
 =
NULL
)

133  
Ál£
;

135 
‰ame
 = (
uöt8
 *)
õ
 + ie->
Àn
 + 
TLV_HDR_LEN
 + 
GAS_RESP_LEN
;

136 
id
 = ((
u16
Ë(((
‰ame
)[1] << 8) | (frame)[0]));

137 
Êí
 = ((
u16
Ë(((
‰ame
)[3] << 8) | (frame)[2]));

140 i‡(
Êí
 >
WFA_OUI_LEN
 + 1 &&

141 
id
 =
P2PSD_GAS_NQP_INFOID
 &&

142 !
	`bcmp
(&
‰ame
[
DOUBLE_TLV_BODY_OFF
], (c⁄° 
uöt8
*)
WFA_OUI
, 
WFA_OUI_LEN
) &&

143 
subty≥
 =
‰ame
[
DOUBLE_TLV_BODY_OFF
+
WFA_OUI_LEN
]) {

144  
åue
;

147  
Ál£
;

148 
	}
}

151 
boﬁ
 
	$wl_cfgp2p_is_gas_a˘i⁄
(*
‰ame
, 
u32
 
‰ame_Àn
)

154 
wifi_p2psd_gas_pub_a˘_‰ame_t
 *
sd_a˘_‰m
;

156 i‡(
‰ame
 =
NULL
)

157  
Ál£
;

159 
sd_a˘_‰m
 = (
wifi_p2psd_gas_pub_a˘_‰ame_t
 *)
‰ame
;

160 i‡(
‰ame_Àn
 < (
wifi_p2psd_gas_pub_a˘_‰ame_t
) - 1)

161  
Ál£
;

162 i‡(
sd_a˘_‰m
->
ˇãg‹y
 !
P2PSD_ACTION_CATEGORY
)

163  
Ál£
;

165 #ifde‡
WL11U


166 i‡(
sd_a˘_‰m
->
a˘i⁄
 =
P2PSD_ACTION_ID_GAS_IRESP
)

167  
	`wl_cfgp2p_föd_gas_subty≥
(
P2PSD_GAS_OUI_SUBTYPE
,

168 (
u8
 *)
sd_a˘_‰m
->
quîy_d©a
 + 
GAS_RESP_OFFSET
,

169 
‰ame_Àn
);

171 i‡(
sd_a˘_‰m
->
a˘i⁄
 =
P2PSD_ACTION_ID_GAS_CRESP
)

172  
	`wl_cfgp2p_föd_gas_subty≥
(
P2PSD_GAS_OUI_SUBTYPE
,

173 (
u8
 *)
sd_a˘_‰m
->
quîy_d©a
 + 
GAS_CRESP_OFFSET
,

174 
‰ame_Àn
);

175 i‡(
sd_a˘_‰m
->
a˘i⁄
 =
P2PSD_ACTION_ID_GAS_IREQ
 ||

176 
sd_a˘_‰m
->
a˘i⁄
 =
P2PSD_ACTION_ID_GAS_CREQ
)

177  
åue
;

179  
Ál£
;

181 i‡(
sd_a˘_‰m
->
a˘i⁄
 =
P2PSD_ACTION_ID_GAS_IREQ
 ||

182 
sd_a˘_‰m
->
a˘i⁄
 =
P2PSD_ACTION_ID_GAS_IRESP
 ||

183 
sd_a˘_‰m
->
a˘i⁄
 =
P2PSD_ACTION_ID_GAS_CREQ
 ||

184 
sd_a˘_‰m
->
a˘i⁄
 =
P2PSD_ACTION_ID_GAS_CRESP
)

185  
åue
;

187  
Ál£
;

189 
	}
}

190 
	$wl_cfgp2p_¥öt_a˘‰ame
(
boﬁ
 
tx
, *
‰ame
, 
u32
 
‰ame_Àn
)

192 
wifi_p2p_pub_a˘_‰ame_t
 *
∑˘_‰m
;

193 
wifi_p2p_a˘i⁄_‰ame_t
 *
a˘_‰m
;

194 
wifi_p2psd_gas_pub_a˘_‰ame_t
 *
sd_a˘_‰m
;

195 i‡(!
‰ame
 || 
‰ame_Àn
 <= 2)

198 i‡(
	`wl_cfgp2p_is_pub_a˘i⁄
(
‰ame
, 
‰ame_Àn
)) {

199 
∑˘_‰m
 = (
wifi_p2p_pub_a˘_‰ame_t
 *)
‰ame
;

200 
∑˘_‰m
->
subty≥
) {

201 
P2P_PAF_GON_REQ
:

202 
	`CFGP2P_ACTION
(("%s P2P Group Owner Negotiation Req Frame\n",

203 (
tx
)? "TX": "RX"));

205 
P2P_PAF_GON_RSP
:

206 
	`CFGP2P_ACTION
(("%s P2P Group Owner Negotiation Rsp Frame\n",

207 (
tx
)? "TX": "RX"));

209 
P2P_PAF_GON_CONF
:

210 
	`CFGP2P_ACTION
(("%s P2P Group Owner Negotiation Confirm Frame\n",

211 (
tx
)? "TX": "RX"));

213 
P2P_PAF_INVITE_REQ
:

214 
	`CFGP2P_ACTION
(("%s P2P Invitation Request Frame\n",

215 (
tx
)? "TX": "RX"));

217 
P2P_PAF_INVITE_RSP
:

218 
	`CFGP2P_ACTION
(("%s P2P Invitation Response Frame\n",

219 (
tx
)? "TX": "RX"));

221 
P2P_PAF_DEVDIS_REQ
:

222 
	`CFGP2P_ACTION
(("%s P2P Device Discoverability Request Frame\n",

223 (
tx
)? "TX": "RX"));

225 
P2P_PAF_DEVDIS_RSP
:

226 
	`CFGP2P_ACTION
(("%s P2P Device Discoverability Response Frame\n",

227 (
tx
)? "TX": "RX"));

229 
P2P_PAF_PROVDIS_REQ
:

230 
	`CFGP2P_ACTION
(("%s P2P Provision Discovery Request Frame\n",

231 (
tx
)? "TX": "RX"));

233 
P2P_PAF_PROVDIS_RSP
:

234 
	`CFGP2P_ACTION
(("%s P2P Provision Discovery Response Frame\n",

235 (
tx
)? "TX": "RX"));

238 
	`CFGP2P_ACTION
(("%s Unknown P2P Public Action Frame\n",

239 (
tx
)? "TX": "RX"));

243 } i‡(
	`wl_cfgp2p_is_p2p_a˘i⁄
(
‰ame
, 
‰ame_Àn
)) {

244 
a˘_‰m
 = (
wifi_p2p_a˘i⁄_‰ame_t
 *)
‰ame
;

245 
a˘_‰m
->
subty≥
) {

246 
P2P_AF_NOTICE_OF_ABSENCE
:

247 
	`CFGP2P_ACTION
(("%s P2P Notice of Absence Frame\n",

248 (
tx
)? "TX": "RX"));

250 
P2P_AF_PRESENCE_REQ
:

251 
	`CFGP2P_ACTION
(("%s P2P Presence Request Frame\n",

252 (
tx
)? "TX": "RX"));

254 
P2P_AF_PRESENCE_RSP
:

255 
	`CFGP2P_ACTION
(("%s P2P Presence Response Frame\n",

256 (
tx
)? "TX": "RX"));

258 
P2P_AF_GO_DISC_REQ
:

259 
	`CFGP2P_ACTION
(("%s P2P Discoverability Request Frame\n",

260 (
tx
)? "TX": "RX"));

263 
	`CFGP2P_ACTION
(("%s Unknown P2P Action Frame\n",

264 (
tx
)? "TX": "RX"));

267 } i‡(
	`wl_cfgp2p_is_gas_a˘i⁄
(
‰ame
, 
‰ame_Àn
)) {

268 
sd_a˘_‰m
 = (
wifi_p2psd_gas_pub_a˘_‰ame_t
 *)
‰ame
;

269 
sd_a˘_‰m
->
a˘i⁄
) {

270 
P2PSD_ACTION_ID_GAS_IREQ
:

271 
	`CFGP2P_ACTION
(("%s P2P GAS Initial Request\n",

272 (
tx
)? "TX" : "RX"));

274 
P2PSD_ACTION_ID_GAS_IRESP
:

275 
	`CFGP2P_ACTION
(("%s P2P GAS Initial Response\n",

276 (
tx
)? "TX" : "RX"));

278 
P2PSD_ACTION_ID_GAS_CREQ
:

279 
	`CFGP2P_ACTION
(("%s P2P GAS Comback Request\n",

280 (
tx
)? "TX" : "RX"));

282 
P2PSD_ACTION_ID_GAS_CRESP
:

283 
	`CFGP2P_ACTION
(("%s P2P GAS Comback Response\n",

284 (
tx
)? "TX" : "RX"));

287 
	`CFGP2P_ACTION
(("%s Unknown P2P GAS Frame\n",

288 (
tx
)? "TX" : "RX"));

293 
	}
}

299 
s32


300 
	$wl_cfgp2p_öô_¥iv
(
wl_¥iv
 *
wl
)

302 i‡(!(
wl
->
p2p
 = 
	`kzÆloc
((
p2p_öfo
), 
GFP_KERNEL
))) {

303 
	`CFGP2P_ERR
(("structÖ2p_infoállocation failed\n"));

304  -
ENOMEM
;

306 
	#INIT_IE
(
IE_TYPE
, 
BSS_TYPE
) \

308 
	`mem£t
(
	`wl_to_p2p_bss_ßved_õ
(
wl
, 
BSS_TYPE
).
p2p_
 ## 
IE_TYPE
 ## 
_õ
, 0, \

309 (
	`wl_to_p2p_bss_ßved_õ
(
wl
, 
BSS_TYPE
).
p2p_
 ## 
IE_TYPE
 ## 
_õ
)); \

310 
	`wl_to_p2p_bss_ßved_õ
(
wl
, 
BSS_TYPE
).
p2p_
 ## 
IE_TYPE
 ## 
_õ_Àn
 = 0; \

311 } 0);

	)

313 
	`INIT_IE
(
¥obe_ªq
, 
P2PAPI_BSSCFG_PRIMARY
);

314 
	`INIT_IE
(
¥obe_ªs
, 
P2PAPI_BSSCFG_PRIMARY
);

315 
	`INIT_IE
(
assoc_ªq
, 
P2PAPI_BSSCFG_PRIMARY
);

316 
	`INIT_IE
(
assoc_ªs
, 
P2PAPI_BSSCFG_PRIMARY
);

317 
	`INIT_IE
(
bóc⁄
, 
P2PAPI_BSSCFG_PRIMARY
);

318 
	`INIT_IE
(
¥obe_ªq
, 
P2PAPI_BSSCFG_DEVICE
);

319 
	`INIT_IE
(
¥obe_ªs
, 
P2PAPI_BSSCFG_DEVICE
);

320 
	`INIT_IE
(
assoc_ªq
, 
P2PAPI_BSSCFG_DEVICE
);

321 
	`INIT_IE
(
assoc_ªs
, 
P2PAPI_BSSCFG_DEVICE
);

322 
	`INIT_IE
(
bóc⁄
, 
P2PAPI_BSSCFG_DEVICE
);

323 
	`INIT_IE
(
¥obe_ªq
, 
P2PAPI_BSSCFG_CONNECTION
);

324 
	`INIT_IE
(
¥obe_ªs
, 
P2PAPI_BSSCFG_CONNECTION
);

325 
	`INIT_IE
(
assoc_ªq
, 
P2PAPI_BSSCFG_CONNECTION
);

326 
	`INIT_IE
(
assoc_ªs
, 
P2PAPI_BSSCFG_CONNECTION
);

327 
	`INIT_IE
(
bóc⁄
, 
P2PAPI_BSSCFG_CONNECTION
);

328 #unde‡
INIT_IE


329 
	`wl_to_p2p_bss_ndev
(
wl
, 
P2PAPI_BSSCFG_PRIMARY
Ë
	`wl_to_¥mry_ndev
(wl);

330 
	`wl_to_p2p_bss_bssidx
(
wl
, 
P2PAPI_BSSCFG_PRIMARY
) = 0;

331 
	`wl_to_p2p_bss_ndev
(
wl
, 
P2PAPI_BSSCFG_DEVICE
Ë
NULL
;

332 
	`wl_to_p2p_bss_bssidx
(
wl
, 
P2PAPI_BSSCFG_DEVICE
) = 0;

333 
	`wl_to_p2p_bss_ndev
(
wl
, 
P2PAPI_BSSCFG_CONNECTION
Ë
NULL
;

334 
	`wl_to_p2p_bss_bssidx
(
wl
, 
P2PAPI_BSSCFG_CONNECTION
) = 0;

335  
BCME_OK
;

337 
	}
}

343 
	$wl_cfgp2p_deöô_¥iv
(
wl_¥iv
 *
wl
)

345 
	`CFGP2P_DBG
(("In\n"));

346 i‡(
wl
->
p2p
) {

347 
	`k‰ì
(
wl
->
p2p
);

348 
wl
->
p2p
 = 
NULL
;

350 
wl
->
p2p_suµ‹ãd
 = 0;

351 
	}
}

355 
s32


356 
	$wl_cfgp2p_£t_fúm_p2p
(
wl_¥iv
 *
wl
)

358 
√t_devi˚
 *
ndev
 = 
	`wl_to_¥mry_ndev
(
wl
);

359 
ëhî_addr
 
nuŒ_ëh_addr
 = { { 0, 0, 0, 0, 0, 0 } };

360 
s32
 
ªt
 = 
BCME_OK
;

361 
s32
 
vÆ
 = 0;

363 
	`wldev_iov¨_gëöt
(
ndev
, "≠°a", &
vÆ
);

364 i‡(
vÆ
 == 0) {

365 
vÆ
 = 1;

366 
ªt
 = 
	`wldev_io˘l
(
ndev
, 
WLC_DOWN
, &
vÆ
, (
s32
), 
åue
);

367 i‡(
ªt
 < 0) {

368 
	`CFGP2P_ERR
(("WLC_DOWNÉº‹ %d\n", 
ªt
));

369  
ªt
;

371 
	`wldev_iov¨_£töt
(
ndev
, "≠°a", 
vÆ
);

372 
ªt
 = 
	`wldev_io˘l
(
ndev
, 
WLC_UP
, &
vÆ
, (
s32
), 
åue
);

373 i‡(
ªt
 < 0) {

374 
	`CFGP2P_ERR
(("WLC_UPÉº‹ %d\n", 
ªt
));

375  
ªt
;

383 
ªt
 = 
	`wldev_iov¨_£tbuf_bsscfg
(
ndev
, "p2p_da_ovîride", &
nuŒ_ëh_addr
,

384 (
nuŒ_ëh_addr
), 
wl
->
io˘l_buf
, 
WLC_IOCTL_MAXLEN
, 0, &wl->
io˘l_buf_sync
);

385 i‡(
ªt
 &&Ñë !
BCME_UNSUPPORTED
) {

386 
	`CFGP2P_ERR
(("ÁûedÅÿupd©êdevi˚áddªs†ªà%d\n", 
ªt
));

388  
ªt
;

389 
	}
}

398 
s32


399 
	$wl_cfgp2p_iÁdd
(
wl_¥iv
 *
wl
, 
ëhî_addr
 *
mac
, 
u8
 
if_ty≥
,

400 
ch™•ec_t
 
ch•ec
)

402 
wl_p2p_if_t
 
i‰eq
;

403 
s32
 
îr
;

404 
u32
 
scb_timeout
 = 
WL_SCB_TIMEOUT
;

405 
√t_devi˚
 *
ndev
 = 
	`wl_to_¥mry_ndev
(
wl
);

407 
i‰eq
.
ty≥
 = 
if_ty≥
;

408 
i‰eq
.
ch•ec
 = chspec;

409 
	`mem˝y
(
i‰eq
.
addr
.
o˘ë
, 
mac
->octet, (ifreq.addr.octet));

411 
	`CFGP2P_DBG
(("---w»p2p_iÁdd "
MACDBG
" %s %u\n",

412 
	`MAC2STRDBG
(
i‰eq
.
addr
.
o˘ë
),

413 (
if_ty≥
 =
WL_P2P_IF_GO
) ? "go" : "client",

414 (
ch•ec
 & 
WL_CHANSPEC_CHAN_MASK
Ë>> 
WL_CHANSPEC_CHAN_SHIFT
));

416 
îr
 = 
	`wldev_iov¨_£tbuf
(
ndev
, "p2p_iÁdd", &
i‰eq
, (ifreq),

417 
wl
->
io˘l_buf
, 
WLC_IOCTL_MAXLEN
, &wl->
io˘l_buf_sync
);

419 i‡(
	`u∆ikñy
(
îr
 < 0))

420 
	`¥ötk
("'w»p2p_iÁdd'Éº‹ %d\n", 
îr
);

421 i‡(
if_ty≥
 =
WL_P2P_IF_GO
) {

422 
îr
 = 
	`wldev_io˘l
(
ndev
, 
WLC_SET_SCB_TIMEOUT
, &
scb_timeout
, (
u32
), 
åue
);

423 i‡(
	`u∆ikñy
(
îr
 < 0))

424 
	`¥ötk
("'w»scb_timeout'Éº‹ %d\n", 
îr
);

426  
îr
;

427 
	}
}

434 
s32


435 
	$wl_cfgp2p_ifdißbÀ
(
wl_¥iv
 *
wl
, 
ëhî_addr
 *
mac
)

437 
s32
 
ªt
;

438 
√t_devi˚
 *
√tdev
 = 
	`wl_to_¥mry_ndev
(
wl
);

440 
	`CFGP2P_INFO
(("------¥im¨y idx %d : w»p2p_ifdi†"
MACDBG
"\n",

441 
√tdev
->
ifödex
, 
	`MAC2STRDBG
(
mac
->
o˘ë
)));

442 
ªt
 = 
	`wldev_iov¨_£tbuf
(
√tdev
, "p2p_ifdis", 
mac
, (*mac),

443 
wl
->
io˘l_buf
, 
WLC_IOCTL_MAXLEN
, &wl->
io˘l_buf_sync
);

444 i‡(
	`u∆ikñy
(
ªt
 < 0)) {

445 
	`¥ötk
("'w»p2p_ifdis'Éº‹ %d\n", 
ªt
);

447  
ªt
;

448 
	}
}

455 
s32


456 
	$wl_cfgp2p_ifdñ
(
wl_¥iv
 *
wl
, 
ëhî_addr
 *
mac
)

458 
s32
 
ªt
;

459 
√t_devi˚
 *
√tdev
 = 
	`wl_to_¥mry_ndev
(
wl
);

461 
	`CFGP2P_INFO
(("------¥im¨y idx %d : w»p2p_ifdñ "
MACDBG
"\n",

462 
√tdev
->
ifödex
, 
	`MAC2STRDBG
(
mac
->
o˘ë
)));

463 
ªt
 = 
	`wldev_iov¨_£tbuf
(
√tdev
, "p2p_ifdñ", 
mac
, (*mac),

464 
wl
->
io˘l_buf
, 
WLC_IOCTL_MAXLEN
, &wl->
io˘l_buf_sync
);

465 i‡(
	`u∆ikñy
(
ªt
 < 0)) {

466 
	`¥ötk
("'w»p2p_ifdñ'Éº‹ %d\n", 
ªt
);

468  
ªt
;

469 
	}
}

476 
s32


477 
	$wl_cfgp2p_ifch™ge
(
wl_¥iv
 *
wl
, 
ëhî_addr
 *
mac
, 
u8
 
if_ty≥
,

478 
ch™•ec_t
 
ch•ec
)

480 
wl_p2p_if_t
 
i‰eq
;

481 
s32
 
îr
;

482 
u32
 
scb_timeout
 = 
WL_SCB_TIMEOUT
;

484 
√t_devi˚
 *
√tdev
 = 
	`wl_to_p2p_bss_ndev
(
wl
, 
P2PAPI_BSSCFG_CONNECTION
);

486 
i‰eq
.
ty≥
 = 
if_ty≥
;

487 
i‰eq
.
ch•ec
 = chspec;

488 
	`mem˝y
(
i‰eq
.
addr
.
o˘ë
, 
mac
->octet, (ifreq.addr.octet));

490 
	`CFGP2P_INFO
(("---w»p2p_ifch™gê"
MACDBG
" %s %u"

491 " ch™•e¯0x%04x\n", 
	`MAC2STRDBG
(
i‰eq
.
addr
.
o˘ë
),

492 (
if_ty≥
 =
WL_P2P_IF_GO
) ? "go" : "client",

493 (
ch•ec
 & 
WL_CHANSPEC_CHAN_MASK
Ë>> 
WL_CHANSPEC_CHAN_SHIFT
,

494 
i‰eq
.
ch•ec
));

496 
îr
 = 
	`wldev_iov¨_£tbuf
(
√tdev
, "p2p_ifupd", &
i‰eq
, (ifreq),

497 
wl
->
io˘l_buf
, 
WLC_IOCTL_MAXLEN
, &wl->
io˘l_buf_sync
);

499 i‡(
	`u∆ikñy
(
îr
 < 0)) {

500 
	`¥ötk
("'w»p2p_ifupd'Éº‹ %d\n", 
îr
);

501 } i‡(
if_ty≥
 =
WL_P2P_IF_GO
) {

502 
îr
 = 
	`wldev_io˘l
(
√tdev
, 
WLC_SET_SCB_TIMEOUT
, &
scb_timeout
, (
u32
), 
åue
);

503 i‡(
	`u∆ikñy
(
îr
 < 0))

504 
	`¥ötk
("'w»scb_timeout'Éº‹ %d\n", 
îr
);

506  
îr
;

507 
	}
}

516 
s32


517 
	$wl_cfgp2p_ifidx
(
wl_¥iv
 *
wl
, 
ëhî_addr
 *
mac
, 
s32
 *
ödex
)

519 
s32
 
ªt
;

520 
u8
 
gëbuf
[64];

521 
√t_devi˚
 *
dev
 = 
	`wl_to_¥mry_ndev
(
wl
);

523 
	`CFGP2P_INFO
(("---w»p2p_i‡"
MACDBG
"\n", 
	`MAC2STRDBG
(
mac
->
o˘ë
)));

525 
ªt
 = 
	`wldev_iov¨_gëbuf_bsscfg
(
dev
, "p2p_if", 
mac
, (*mac), 
gëbuf
,

526 (
gëbuf
), 
	`wl_to_p2p_bss_bssidx
(
wl
, 
P2PAPI_BSSCFG_PRIMARY
), 
NULL
);

528 i‡(
ªt
 == 0) {

529 
	`mem˝y
(
ödex
, 
gëbuf
, (
s32
));

530 
	`CFGP2P_INFO
(("---w»p2p_i‡ ==> %d\n", *
ödex
));

533  
ªt
;

534 
	}
}

536 
s32


537 
	$wl_cfgp2p_£t_discovîy
(
wl_¥iv
 *
wl
, 
s32
 
⁄
)

539 
s32
 
ªt
 = 
BCME_OK
;

540 
√t_devi˚
 *
ndev
 = 
	`wl_to_¥mry_ndev
(
wl
);

541 
	`CFGP2P_DBG
(("enter\n"));

543 
ªt
 = 
	`wldev_iov¨_£töt
(
ndev
, "p2p_disc", 
⁄
);

545 i‡(
	`u∆ikñy
(
ªt
 < 0)) {

546 
	`CFGP2P_ERR
(("p2p_dis¯%dÉº‹ %d\n", 
⁄
, 
ªt
));

549  
ªt
;

550 
	}
}

561 
s32


562 
	$wl_cfgp2p_£t_p2p_mode
(
wl_¥iv
 *
wl
, 
u8
 
mode
, 
u32
 
ch™√l
, 
u16
 
li°í_ms
, 
bssidx
)

564 
wl_p2p_disc_°_t
 
discovîy_mode
;

565 
s32
 
ªt
;

566 
√t_devi˚
 *
dev
;

567 
	`CFGP2P_DBG
(("enter\n"));

569 i‡(
	`u∆ikñy
(
bssidx
 =
WL_INVALID
 || bssidx >
P2PAPI_BSSCFG_MAX
)) {

570 
	`CFGP2P_ERR
((" %d index ouào‡ønge\n", 
bssidx
));

574 
dev
 = 
	`wl_to_p2p_bss_ndev
(
wl
, 
bssidx
);

575 i‡(
	`u∆ikñy
(
dev
 =
NULL
)) {

576 
	`CFGP2P_ERR
(("bssidx %d i†nŸássig√d\n", 
bssidx
));

577  
BCME_NOTFOUND
;

581 
discovîy_mode
.
°©e
 = 
mode
;

582 
discovîy_mode
.
ch•ec
 = 
	`wl_ch_ho°_to_drivî
(
ch™√l
);

583 
discovîy_mode
.
dwñl
 = 
li°í_ms
;

584 
ªt
 = 
	`wldev_iov¨_£tbuf_bsscfg
(
dev
, "p2p_°©e", &
discovîy_mode
,

585 (
discovîy_mode
), 
wl
->
io˘l_buf
, 
WLC_IOCTL_MAXLEN
,

586 
bssidx
, &
wl
->
io˘l_buf_sync
);

588  
ªt
;

589 
	}
}

592 
s32


593 
	$wl_cfgp2p_gë_disc_idx
(
wl_¥iv
 *
wl
, 
s32
 *
ödex
)

595 
s32
 
ªt
;

596 
√t_devi˚
 *
dev
 = 
	`wl_to_p2p_bss_ndev
(
wl
, 
P2PAPI_BSSCFG_PRIMARY
);

598 
ªt
 = 
	`wldev_iov¨_gëöt
(
dev
, "p2p_dev", 
ödex
);

599 
	`CFGP2P_INFO
(("p2p_dev bsscfg_idx=%dÑë=%d\n", *
ödex
, 
ªt
));

601 i‡(
	`u∆ikñy
(
ªt
 < 0)) {

602 
	`CFGP2P_ERR
(("'p2p_dev'Éº‹ %d\n", 
ªt
));

603  
ªt
;

605  
ªt
;

606 
	}
}

608 
s32


609 
	$wl_cfgp2p_öô_discovîy
(
wl_¥iv
 *
wl
)

612 
s32
 
ödex
 = 0;

613 
s32
 
ªt
 = 
BCME_OK
;

615 
	`CFGP2P_DBG
(("enter\n"));

617 i‡(
	`wl_to_p2p_bss_bssidx
(
wl
, 
P2PAPI_BSSCFG_DEVICE
) != 0) {

618 
	`CFGP2P_ERR
(("doÇothing,álready initialized\n"));

619  
ªt
;

622 
ªt
 = 
	`wl_cfgp2p_£t_discovîy
(
wl
, 1);

623 i‡(
ªt
 < 0) {

624 
	`CFGP2P_ERR
(("set discoverÉrror\n"));

625  
ªt
;

628 
ªt
 = 
	`wl_cfgp2p_gë_disc_idx
(
wl
, &
ödex
);

630 i‡(
ªt
 < 0) {

631  
ªt
;

633 
	`wl_to_p2p_bss_ndev
(
wl
, 
P2PAPI_BSSCFG_DEVICE
) =

634 
	`wl_to_p2p_bss_ndev
(
wl
, 
P2PAPI_BSSCFG_PRIMARY
);

635 
	`wl_to_p2p_bss_bssidx
(
wl
, 
P2PAPI_BSSCFG_DEVICE
Ë
ödex
;

638 
ªt
 = 
	`wl_cfgp2p_£t_p2p_mode
(
wl
, 
WL_P2P_DISC_ST_SCAN
, 0, 0,

639 
	`wl_to_p2p_bss_bssidx
(
wl
, 
P2PAPI_BSSCFG_DEVICE
));

641 i‡(
	`u∆ikñy
(
ªt
 != 0)) {

642 
	`CFGP2P_ERR
(("unableÅo set WL_P2P_DISC_ST_SCAN\n"));

643 
	`wl_cfgp2p_£t_discovîy
(
wl
, 0);

644 
	`wl_to_p2p_bss_bssidx
(
wl
, 
P2PAPI_BSSCFG_DEVICE
) = 0;

645 
	`wl_to_p2p_bss_ndev
(
wl
, 
P2PAPI_BSSCFG_DEVICE
Ë
NULL
;

648  
ªt
;

649 
	}
}

656 
s32


657 
	$wl_cfgp2p_deöô_discovîy
(
wl_¥iv
 *
wl
)

659 
s32
 
ªt
 = 
BCME_OK
;

660 
	`CFGP2P_DBG
(("enter\n"));

662 i‡(
	`wl_to_p2p_bss_bssidx
(
wl
, 
P2PAPI_BSSCFG_DEVICE
) == 0) {

663 
	`CFGP2P_ERR
(("doÇothing,Çot initialized\n"));

667 
ªt
 = 
	`wl_cfgp2p_£t_p2p_mode
(
wl
, 
WL_P2P_DISC_ST_SCAN
, 0, 0,

668 
	`wl_to_p2p_bss_bssidx
(
wl
, 
P2PAPI_BSSCFG_DEVICE
));

670 
ªt
 = 
	`wl_cfgp2p_£t_discovîy
(
wl
, 0);

680 
	`wl_to_p2p_bss_bssidx
(
wl
, 
P2PAPI_BSSCFG_DEVICE
Ë
WL_INVALID
;

681 
	`wl_to_p2p_bss_ndev
(
wl
, 
P2PAPI_BSSCFG_DEVICE
Ë
NULL
;

683  
ªt
;

685 
	}
}

693 
s32


694 
	$wl_cfgp2p_íabÀ_discovîy
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
dev
,

695 c⁄° 
u8
 *
õ
, 
u32
 
õ_Àn
)

697 
s32
 
ªt
 = 
BCME_OK
;

698 
s32
 
bssidx
 = (
	`wl_to_¥mry_ndev
(
wl
Ë=
dev
) ?

699 
	`wl_to_p2p_bss_bssidx
(
wl
, 
P2PAPI_BSSCFG_DEVICE
Ë: 
	`wl_cfgp2p_föd_idx
(wl, 
dev
);

700 i‡(
	`wl_gë_p2p_°©us
(
wl
, 
DISCOVERY_ON
)) {

701 
	`CFGP2P_INFO
((" DISCOVERY isálready initialized, we haveÇothingÅo do\n"));

702 
£t_õ
;

705 
	`wl_£t_p2p_°©us
(
wl
, 
DISCOVERY_ON
);

707 
	`CFGP2P_DBG
(("enter\n"));

709 
ªt
 = 
	`wl_cfgp2p_öô_discovîy
(
wl
);

710 i‡(
	`u∆ikñy
(
ªt
 < 0)) {

711 
	`CFGP2P_ERR
((" inô discovîyÉº‹ %d\n", 
ªt
));

712 
exô
;

718 
ªt
 = 
	`wldev_iov¨_£töt_bsscfg
(
	`wl_to_p2p_bss_ndev
(
wl
, 
P2PAPI_BSSCFG_DEVICE
),

719 "w£c", 
AES_ENABLED
, 
	`wl_to_p2p_bss_bssidx
(
wl
, 
P2PAPI_BSSCFG_DEVICE
));

720 i‡(
	`u∆ikñy
(
ªt
 < 0)) {

721 
	`CFGP2P_ERR
((" w£¯îr‹ %d\n", 
ªt
));

723 
£t_õ
:

724 i‡(
õ_Àn
) {

725 
ªt
 = 
	`wl_cfgp2p_£t_m™agemít_õ
(
wl
, 
dev
,

726 
bssidx
,

727 
VNDR_IE_PRBREQ_FLAG
, 
õ
, 
õ_Àn
);

729 i‡(
	`u∆ikñy
(
ªt
 < 0)) {

730 
	`CFGP2P_ERR
(("£à¥obªq iêoccur†îr‹ %d\n", 
ªt
));

731 
exô
;

734 
exô
:

735  
ªt
;

736 
	}
}

743 
s32


744 
	$wl_cfgp2p_dißbÀ_discovîy
(
wl_¥iv
 *
wl
)

746 
s32
 
ªt
 = 
BCME_OK
;

747 
	`CFGP2P_DBG
(("Énter\n"));

748 
	`wl_˛r_p2p_°©us
(
wl
, 
DISCOVERY_ON
);

750 i‡(
	`wl_to_p2p_bss_bssidx
(
wl
, 
P2PAPI_BSSCFG_DEVICE
) == 0) {

751 
	`CFGP2P_ERR
((" doÇothing,Çot initialized\n"));

752 
exô
;

755 
ªt
 = 
	`wl_cfgp2p_£t_p2p_mode
(
wl
, 
WL_P2P_DISC_ST_SCAN
, 0, 0,

756 
	`wl_to_p2p_bss_bssidx
(
wl
, 
P2PAPI_BSSCFG_DEVICE
));

758 i‡(
	`u∆ikñy
(
ªt
 < 0)) {

760 
	`CFGP2P_ERR
(("unableÅo set WL_P2P_DISC_ST_SCAN\n"));

765 
	`wl_˛r_p2p_°©us
(
wl
, 
DISCOVERY_ON
);

766 
ªt
 = 
	`wl_cfgp2p_deöô_discovîy
(
wl
);

768 
exô
:

769  
ªt
;

770 
	}
}

772 
s32


773 
	$wl_cfgp2p_esˇn
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
dev
, 
u16
 
a˘ive
,

774 
u32
 
num_ch™s
, 
u16
 *
ch™√ls
,

775 
s32
 
£¨ch_°©e
, 
u16
 
a˘i⁄
, 
u32
 
bssidx
)

777 
s32
 
ªt
 = 
BCME_OK
;

778 
s32
 
memsize
;

779 
s32
 
ï¨ams_size
;

780 
u32
 
i
;

781 
s8
 *
memblk
;

782 
wl_p2p_sˇn_t
 *
p2p_∑øms
;

783 
wl_esˇn_∑øms_t
 *
ï¨ams
;

784 
wlc_ssid_t
 
ssid
;

786 
	#P2PAPI_SCAN_NPROBES
 1

	)

787 
	#P2PAPI_SCAN_DWELL_TIME_MS
 80

	)

788 
	#P2PAPI_SCAN_SOCIAL_DWELL_TIME_MS
 40

	)

789 
	#P2PAPI_SCAN_HOME_TIME_MS
 60

	)

790 
	#P2PAPI_SCAN_NPROBS_TIME_MS
 30

	)

791 
	#P2PAPI_SCAN_AF_SEARCH_DWELL_TIME_MS
 100

	)

793 
√t_devi˚
 *
¥i_dev
 = 
	`wl_to_p2p_bss_ndev
(
wl
, 
P2PAPI_BSSCFG_PRIMARY
);

795 
ï¨ams_size
 = (
WL_SCAN_PARAMS_FIXED_SIZE
 +

796 
	`OFFSETOF
(
wl_esˇn_∑øms_t
, 
∑øms
)) +

797 
num_ch™s
 * (
ï¨ams
->
∑øms
.
ch™√l_li°
[0]);

799 
memsize
 = (
wl_p2p_sˇn_t
Ë+ 
ï¨ams_size
;

800 
memblk
 = 
sˇ≈¨ambuf
;

801 i‡(
memsize
 > (
sˇ≈¨ambuf
)) {

802 
	`CFGP2P_ERR
((" scanpar bufÅoo small (%u > %u)\n",

803 
memsize
, (
sˇ≈¨ambuf
)));

806 
	`mem£t
(
memblk
, 0, 
memsize
);

807 
	`mem£t
(
wl
->
io˘l_buf
, 0, 
WLC_IOCTL_MAXLEN
);

808 i‡(
£¨ch_°©e
 =
WL_P2P_DISC_ST_SEARCH
) {

813 
	`wl_cfgp2p_£t_p2p_mode
(
wl
, 
WL_P2P_DISC_ST_SEARCH
, 0, 0, 
bssidx
);

814 
ssid
.
SSID_Àn
 = 
	`htod32
(0);

816 } i‡(
£¨ch_°©e
 =
WL_P2P_DISC_ST_SCAN
) {

823 
	`°∫˝y
(
ssid
.
SSID
, 
WL_P2P_WILDCARD_SSID
, (ssid.SSID) - 1);

824 
ssid
.
SSID
[(ssid.SSID) - 1] = 0;

825 
ssid
.
SSID_Àn
 = 
	`htod32
(
WL_P2P_WILDCARD_SSID_LEN
);

826 
	`wl_cfgp2p_£t_p2p_mode
(
wl
, 
WL_P2P_DISC_ST_SCAN
, 0, 0, 
bssidx
);

829 
	`CFGP2P_ERR
((" invÆid sórch sèã %d\n", 
£¨ch_°©e
));

835 
p2p_∑øms
 = (
wl_p2p_sˇn_t
*Ë
memblk
;

836 
p2p_∑øms
->
ty≥
 = 'E';

838 
ï¨ams
 = (
wl_esˇn_∑øms_t
*Ë(
p2p_∑øms
 + 1);

839 
ï¨ams
->
∑øms
.
bss_ty≥
 = 
DOT11_BSSTYPE_ANY
;

840 i‡(
a˘ive
)

841 
ï¨ams
->
∑øms
.
sˇn_ty≥
 = 
DOT11_SCANTYPE_ACTIVE
;

843 
ï¨ams
->
∑øms
.
sˇn_ty≥
 = 
DOT11_SCANTYPE_PASSIVE
;

845 
	`mem˝y
(&
ï¨ams
->
∑øms
.
bssid
, &
ëhî_bˇ°
, 
ETHER_ADDR_LEN
);

846 i‡(
ssid
.
SSID_Àn
)

847 
	`mem˝y
(&
ï¨ams
->
∑øms
.
ssid
, &ssid, (
wlc_ssid_t
));

849 
ï¨ams
->
∑øms
.
home_time
 = 
	`htod32
(
P2PAPI_SCAN_HOME_TIME_MS
);

854 i‡((
num_ch™s
 =
SOCIAL_CHAN_CNT
) || (num_chans == SOCIAL_CHAN_CNT + 1))

855 
ï¨ams
->
∑øms
.
a˘ive_time
 = 
	`htod32
(
P2PAPI_SCAN_SOCIAL_DWELL_TIME_MS
);

856 i‡(
num_ch™s
 =
AF_PEER_SEARCH_CNT
)

857 
ï¨ams
->
∑øms
.
a˘ive_time
 = 
	`htod32
(
P2PAPI_SCAN_AF_SEARCH_DWELL_TIME_MS
);

858 i‡(
	`wl_gë_drv_°©us_Æl
(
wl
, 
CONNECTED
))

859 
ï¨ams
->
∑øms
.
a˘ive_time
 = -1;

861 
ï¨ams
->
∑øms
.
a˘ive_time
 = 
	`htod32
(
P2PAPI_SCAN_DWELL_TIME_MS
);

862 
ï¨ams
->
∑øms
.
≈robes
 = 
	`htod32
(”∑øms->∑øms.
a˘ive_time
 /

863 
P2PAPI_SCAN_NPROBS_TIME_MS
));

866 i‡(
num_ch™s
 == 1) {

867 
ï¨ams
->
∑øms
.
a˘ive_time
 = 
	`htod32
(
WL_SCAN_CONNECT_DWELL_TIME_MS
);

868 
ï¨ams
->
∑øms
.
≈robes
 = 
	`htod32
”∑øms->∑øms.
a˘ive_time
 /

869 
WL_SCAN_JOIN_PROBE_INTERVAL_MS
);

872 i‡(
ï¨ams
->
∑øms
.
≈robes
 <= 0)

873 
ï¨ams
->
∑øms
.
≈robes
 = 1;

874 
	`CFGP2P_DBG
(("nprobes # %d,áctive_time %d\n",

875 
ï¨ams
->
∑øms
.
≈robes
,É∑øms->∑øms.
a˘ive_time
));

876 
ï¨ams
->
∑øms
.
∑ssive_time
 = 
	`htod32
(-1);

877 
ï¨ams
->
∑øms
.
ch™√l_num
 = 
	`htod32
((0 << 
WL_SCAN_PARAMS_NSSID_SHIFT
) |

878 (
num_ch™s
 & 
WL_SCAN_PARAMS_COUNT_MASK
));

880 
i
 = 0; i < 
num_ch™s
; i++) {

881 
ï¨ams
->
∑øms
.
ch™√l_li°
[
i
] = 
	`wl_ch_ho°_to_drivî
(
ch™√ls
[i]);

883 
ï¨ams
->
vîsi⁄
 = 
	`htod32
(
ESCAN_REQ_VERSION
);

884 
ï¨ams
->
a˘i⁄
 = 
	`htod16
(action);

885 
ï¨ams
->
sync_id
 = 
	`htod16
(0x1234);

886 
	`CFGP2P_INFO
(("SCAN CHANNELS : "));

888 
i
 = 0; i < 
num_ch™s
; i++) {

889 i‡(
i
 =0Ë
	`CFGP2P_INFO
(("%d", 
ch™√ls
[i]));

890 
	`CFGP2P_INFO
((",%d", 
ch™√ls
[
i
]));

893 
	`CFGP2P_INFO
(("\n"));

895 
ªt
 = 
	`wldev_iov¨_£tbuf_bsscfg
(
¥i_dev
, "p2p_scan",

896 
memblk
, 
memsize
, 
wl
->
io˘l_buf
, 
WLC_IOCTL_MAXLEN
, 
bssidx
, &wl->
io˘l_buf_sync
);

897 i‡(
ªt
 =
BCME_OK
)

898 
	`wl_£t_p2p_°©us
(
wl
, 
SCANNING
);

899  
ªt
;

900 
	}
}

909 
s32


910 
	$wl_cfgp2p_a˘_‰m_£¨ch
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
,

911 
s32
 
bssidx
, s32 
ch™√l
)

913 
s32
 
ªt
 = 0;

914 
u32
 
ch™_˙t
 = 0;

915 
u16
 *
deÁu…_ch™_li°
 = 
NULL
;

916 i‡(!
	`p2p_is_⁄
(
wl
Ë|| 
ndev
 =
NULL
 || 
bssidx
 =
WL_INVALID
)

917  -
BCME_ERROR
;

918 
	`CFGP2P_ERR
((" Enter\n"));

919 i‡(
bssidx
 =
P2PAPI_BSSCFG_PRIMARY
)

920 
bssidx
 = 
	`wl_to_p2p_bss_bssidx
(
wl
, 
P2PAPI_BSSCFG_DEVICE
);

921 i‡(
ch™√l
)

922 
ch™_˙t
 = 
AF_PEER_SEARCH_CNT
;

924 
ch™_˙t
 = 
SOCIAL_CHAN_CNT
;

925 
deÁu…_ch™_li°
 = 
	`kzÆloc
(
ch™_˙t
 * (*deÁu…_ch™_li°), 
GFP_KERNEL
);

926 i‡(
deÁu…_ch™_li°
 =
NULL
) {

927 
	`CFGP2P_ERR
(("channelÜistállocation failed \n"));

928 
ªt
 = -
ENOMEM
;

929 
exô
;

931 i‡(
ch™√l
) {

932 
u32
 
i
;

934 
i
 = 0; i < 
ch™_˙t
; i++) {

935 
deÁu…_ch™_li°
[
i
] = 
ch™√l
;

938 
deÁu…_ch™_li°
[0] = 
SOCIAL_CHAN_1
;

939 
deÁu…_ch™_li°
[1] = 
SOCIAL_CHAN_2
;

940 
deÁu…_ch™_li°
[2] = 
SOCIAL_CHAN_3
;

942 
ªt
 = 
	`wl_cfgp2p_esˇn
(
wl
, 
ndev
, 
åue
, 
ch™_˙t
,

943 
deÁu…_ch™_li°
, 
WL_P2P_DISC_ST_SEARCH
,

944 
WL_SCAN_ACTION_START
, 
bssidx
);

945 
	`k‰ì
(
deÁu…_ch™_li°
);

946 
exô
:

947  
ªt
;

948 
	}
}

951 
	#wl_cfgp2p_is_w∑_õ
(
õ
, 
évs
, 
Àn
Ë
	`wl_cfgp2p_has_õ
(ie,Ålvs,Üen, \

952 (c⁄° 
uöt8
 *)
WPS_OUI
, 
WPS_OUI_LEN
, 
WPA_OUI_TYPE
)

	)

954 
	#wl_cfgp2p_is_wps_õ
(
õ
, 
évs
, 
Àn
Ë
	`wl_cfgp2p_has_õ
(ie,Ålvs,Üen, \

955 (c⁄° 
uöt8
 *)
WPS_OUI
, 
WPS_OUI_LEN
, 
WPS_OUI_TYPE
)

	)

957 
	#wl_cfgp2p_is_p2p_õ
(
õ
, 
évs
, 
Àn
Ë
	`wl_cfgp2p_has_õ
(ie,Ålvs,Üen, \

958 (c⁄° 
uöt8
 *)
WFA_OUI
, 
WFA_OUI_LEN
, 
WFA_OUI_TYPE_P2P
)

	)

960 
	#WFA_OUI_TYPE_WFD
 0x0®

	)

961 
	#wl_cfgp2p_is_wfd_õ
(
õ
, 
évs
, 
Àn
Ë
	`wl_cfgp2p_has_õ
(ie,Ålvs,Üen, \

962 (c⁄° 
uöt8
 *)
WFA_OUI
, 
WFA_OUI_LEN
, 
WFA_OUI_TYPE_WFD
)

	)

964 
s32


965 
	$wl_cfgp2p_∑r£_vndr_õs
(
u8
 *
∑r£
, 
u32
 
Àn
,

966 
∑r£d_vndr_õs
 *
vndr_õs
)

968 
s32
 
îr
 = 
BCME_OK
;

969 
vndr_õ_t
 *
vndrõ
;

970 
bcm_év_t
 *
õ
;

971 
∑r£d_vndr_õ_öfo
 *
∑r£d_öfo
;

972 
u32
 
cou¡
 = 0;

973 
s32
 
ªmaöed_Àn
;

975 
ªmaöed_Àn
 = (
s32
)
Àn
;

976 
	`mem£t
(
vndr_õs
, 0, (*vndr_ies));

978 
	`WL_INFO
(("--->Üí %d\n", 
Àn
));

979 
õ
 = (
bcm_év_t
 *Ë
∑r£
;

980 i‡(!
	`bcm_vÆid_év
(
õ
, 
ªmaöed_Àn
))

981 
õ
 = 
NULL
;

982 
õ
) {

983 i‡(
cou¡
 >
MAX_VNDR_IE_NUMBER
)

985 i‡(
õ
->
id
 =
DOT11_MNG_VS_ID
) {

986 
vndrõ
 = (
vndr_õ_t
 *Ë
õ
;

988 i‡(
vndrõ
->
Àn
 < (
VNDR_IE_MIN_LEN
 + 1)) {

989 
	`CFGP2P_ERR
(("%s: invalid vndr ie.Üength isÅoo small %d\n",

990 
__FUNCTION__
, 
vndrõ
->
Àn
));

991 
íd
;

994 i‡(!
	`bcmp
(
vndrõ
->
oui
, (
u8
*)
WPA_OUI
, 
WPA_OUI_LEN
) &&

995 ((
vndrõ
->
d©a
[0] =
WPA_OUI_TYPE
) ||

996 (
vndrõ
->
d©a
[0] =
WME_OUI_TYPE
))) {

997 
	`CFGP2P_DBG
(("Found WPA/WME oui. DoÇotádd it\n"));

998 
íd
;

1001 
∑r£d_öfo
 = &
vndr_õs
->
õ_öfo
[
cou¡
++];

1004 
∑r£d_öfo
->
õ_±r
 = (*)
vndrõ
;

1005 
∑r£d_öfo
->
õ_Àn
 = (
vndrõ
->
Àn
 + 
TLV_HDR_LEN
);

1006 
	`mem˝y
(&
∑r£d_öfo
->
vndrõ
, vndrõ, (
vndr_õ_t
));

1008 
vndr_õs
->
cou¡
 = count;

1010 
	`CFGP2P_DBG
(("\t ** OUI %02x %02x %02x,Åype 0x%02x \n",

1011 
∑r£d_öfo
->
vndrõ
.
oui
[0],Öarsed_info->vndrie.oui[1],

1012 
∑r£d_öfo
->
vndrõ
.
oui
[2],Ö¨£d_öfo->vndrõ.
d©a
[0]));

1014 
íd
:

1015 
õ
 = 
	`bcm_√xt_év
(õ, &
ªmaöed_Àn
);

1017  
îr
;

1018 
	}
}

1033 
s32


1034 
	$wl_cfgp2p_£t_m™agemít_õ
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
, 
s32
 
bssidx
,

1035 
s32
 
pktÊag
, c⁄° 
u8
 *
vndr_õ
, 
u32
 
vndr_õ_Àn
)

1037 
s32
 
ªt
 = 
BCME_OK
;

1038 
u8
 *
cuº_õ_buf
 = 
NULL
;

1039 
u8
 *
mgmt_õ_buf
 = 
NULL
;

1040 
u32
 
mgmt_õ_buf_Àn
 = 0;

1041 
u32
 *
mgmt_õ_Àn
 = 0;

1042 
u32
 
dñ_add_õ_buf_Àn
 = 0;

1043 
u32
 
tŸÆ_õ_buf_Àn
 = 0;

1044 
u32
 
∑r£d_õ_buf_Àn
 = 0;

1045 
∑r£d_vndr_õs
 
ﬁd_vndr_õs
;

1046 
∑r£d_vndr_õs
 
√w_vndr_õs
;

1047 
s32
 
i
;

1048 
u8
 *
±r
;

1049 
s32
 
ªmaöed_buf_Àn
;

1051 
	#IE_TYPE
(
ty≥
, 
bs°y≥
Ë(
	`wl_to_p2p_bss_ßved_õ
(
wl
, bs°y≥).
p2p_
 ##Åy≥ ## 
_õ
)

	)

1052 
	#IE_TYPE_LEN
(
ty≥
, 
bs°y≥
Ë(
	`wl_to_p2p_bss_ßved_õ
(
wl
, bs°y≥).
p2p_
 ##Åy≥ ## 
_õ_Àn
)

	)

1053 
	`mem£t
(
g_mgmt_õ_buf
, 0, (g_mgmt_ie_buf));

1054 
cuº_õ_buf
 = 
g_mgmt_õ_buf
;

1055 
	`CFGP2P_DBG
((" bssidx %d,ÖktÊag : 0x%02X\n", 
bssidx
, 
pktÊag
));

1056 i‡(
wl
->
p2p
 !
NULL
) {

1057 
pktÊag
) {

1058 
VNDR_IE_PRBREQ_FLAG
 :

1059 
mgmt_õ_buf
 = 
	`IE_TYPE
(
¥obe_ªq
, 
bssidx
);

1060 
mgmt_õ_Àn
 = &
	`IE_TYPE_LEN
(
¥obe_ªq
, 
bssidx
);

1061 
mgmt_õ_buf_Àn
 = (
	`IE_TYPE
(
¥obe_ªq
, 
bssidx
));

1063 
VNDR_IE_PRBRSP_FLAG
 :

1064 
mgmt_õ_buf
 = 
	`IE_TYPE
(
¥obe_ªs
, 
bssidx
);

1065 
mgmt_õ_Àn
 = &
	`IE_TYPE_LEN
(
¥obe_ªs
, 
bssidx
);

1066 
mgmt_õ_buf_Àn
 = (
	`IE_TYPE
(
¥obe_ªs
, 
bssidx
));

1068 
VNDR_IE_ASSOCREQ_FLAG
 :

1069 
mgmt_õ_buf
 = 
	`IE_TYPE
(
assoc_ªq
, 
bssidx
);

1070 
mgmt_õ_Àn
 = &
	`IE_TYPE_LEN
(
assoc_ªq
, 
bssidx
);

1071 
mgmt_õ_buf_Àn
 = (
	`IE_TYPE
(
assoc_ªq
, 
bssidx
));

1073 
VNDR_IE_ASSOCRSP_FLAG
 :

1074 
mgmt_õ_buf
 = 
	`IE_TYPE
(
assoc_ªs
, 
bssidx
);

1075 
mgmt_õ_Àn
 = &
	`IE_TYPE_LEN
(
assoc_ªs
, 
bssidx
);

1076 
mgmt_õ_buf_Àn
 = (
	`IE_TYPE
(
assoc_ªs
, 
bssidx
));

1078 
VNDR_IE_BEACON_FLAG
 :

1079 
mgmt_õ_buf
 = 
	`IE_TYPE
(
bóc⁄
, 
bssidx
);

1080 
mgmt_õ_Àn
 = &
	`IE_TYPE_LEN
(
bóc⁄
, 
bssidx
);

1081 
mgmt_õ_buf_Àn
 = (
	`IE_TYPE
(
bóc⁄
, 
bssidx
));

1084 
mgmt_õ_buf
 = 
NULL
;

1085 
mgmt_õ_Àn
 = 
NULL
;

1086 
	`CFGP2P_ERR
(("not suitableÅype\n"));

1089 } i‡(
	`wl_gë_mode_by_√tdev
(
wl
, 
ndev
Ë=
WL_MODE_AP
) {

1090 
pktÊag
) {

1091 
VNDR_IE_PRBRSP_FLAG
 :

1092 
mgmt_õ_buf
 = 
wl
->
≠_öfo
->
¥obe_ªs_õ
;

1093 
mgmt_õ_Àn
 = &
wl
->
≠_öfo
->
¥obe_ªs_õ_Àn
;

1094 
mgmt_õ_buf_Àn
 = (
wl
->
≠_öfo
->
¥obe_ªs_õ
);

1096 
VNDR_IE_BEACON_FLAG
 :

1097 
mgmt_õ_buf
 = 
wl
->
≠_öfo
->
bóc⁄_õ
;

1098 
mgmt_õ_Àn
 = &
wl
->
≠_öfo
->
bóc⁄_õ_Àn
;

1099 
mgmt_õ_buf_Àn
 = (
wl
->
≠_öfo
->
bóc⁄_õ
);

1102 
mgmt_õ_buf
 = 
NULL
;

1103 
mgmt_õ_Àn
 = 
NULL
;

1104 
	`CFGP2P_ERR
(("not suitableÅype\n"));

1107 
bssidx
 = 0;

1108 } i‡(
	`wl_gë_mode_by_√tdev
(
wl
, 
ndev
Ë=
WL_MODE_BSS
) {

1109 
pktÊag
) {

1110 
VNDR_IE_PRBREQ_FLAG
 :

1111 
mgmt_õ_buf
 = 
wl
->
°a_öfo
->
¥obe_ªq_õ
;

1112 
mgmt_õ_Àn
 = &
wl
->
°a_öfo
->
¥obe_ªq_õ_Àn
;

1113 
mgmt_õ_buf_Àn
 = (
wl
->
°a_öfo
->
¥obe_ªq_õ
);

1115 
VNDR_IE_ASSOCREQ_FLAG
 :

1116 
mgmt_õ_buf
 = 
wl
->
°a_öfo
->
assoc_ªq_õ
;

1117 
mgmt_õ_Àn
 = &
wl
->
°a_öfo
->
assoc_ªq_õ_Àn
;

1118 
mgmt_õ_buf_Àn
 = (
wl
->
°a_öfo
->
assoc_ªq_õ
);

1121 
mgmt_õ_buf
 = 
NULL
;

1122 
mgmt_õ_Àn
 = 
NULL
;

1123 
	`CFGP2P_ERR
(("not suitableÅype\n"));

1126 
bssidx
 = 0;

1128 
	`CFGP2P_ERR
(("not suitableÅype\n"));

1132 i‡(
vndr_õ_Àn
 > 
mgmt_õ_buf_Àn
) {

1133 
	`CFGP2P_ERR
(("extra IE sizeÅoo big\n"));

1134 
ªt
 = -
ENOMEM
;

1137 i‡(
vndr_õ
 && 
vndr_õ_Àn
 && 
cuº_õ_buf
) {

1138 
±r
 = 
cuº_õ_buf
;

1140 
	`wl_cfgp2p_∑r£_vndr_õs
((
u8
*)
vndr_õ
,

1141 
vndr_õ_Àn
, &
√w_vndr_õs
);

1143 
i
 = 0; i < 
√w_vndr_õs
.
cou¡
; i++) {

1144 
∑r£d_vndr_õ_öfo
 *
vndrõ_öfo
 =

1145 &
√w_vndr_õs
.
õ_öfo
[
i
];

1147 
	`mem˝y
(
±r
 + 
∑r£d_õ_buf_Àn
, 
vndrõ_öfo
->
õ_±r
,

1148 
vndrõ_öfo
->
õ_Àn
);

1149 
∑r£d_õ_buf_Àn
 +
vndrõ_öfo
->
õ_Àn
;

1153 i‡(
mgmt_õ_buf
 !
NULL
) {

1154 i‡(
∑r£d_õ_buf_Àn
 && (∑r£d_õ_buf_À¿=*
mgmt_õ_Àn
) &&

1155 (
	`memcmp
(
mgmt_õ_buf
, 
cuº_õ_buf
, 
∑r£d_õ_buf_Àn
) == 0)) {

1156 
	`CFGP2P_INFO
(("Previous mgmt IE isÉqualsÅo current IE"));

1157 
exô
;

1161 
	`wl_cfgp2p_∑r£_vndr_õs
(
mgmt_õ_buf
, *
mgmt_õ_Àn
,

1162 &
ﬁd_vndr_õs
);

1165 
i
 = 0; i < 
ﬁd_vndr_õs
.
cou¡
; i++) {

1166 
∑r£d_vndr_õ_öfo
 *
vndrõ_öfo
 =

1167 &
ﬁd_vndr_õs
.
õ_öfo
[
i
];

1169 
	`CFGP2P_INFO
(("DELETED ID : %d, Len: %d , OUI:%02x:%02x:%02x\n",

1170 
vndrõ_öfo
->
vndrõ
.
id
, vndrõ_öfo->vndrõ.
Àn
,

1171 
vndrõ_öfo
->
vndrõ
.
oui
[0], vndrie_info->vndrie.oui[1],

1172 
vndrõ_öfo
->
vndrõ
.
oui
[2]));

1174 
dñ_add_õ_buf_Àn
 = 
	`wl_cfgp2p_vndr_õ
(
wl
, 
cuº_õ_buf
,

1175 
bssidx
, 
pktÊag
, 
vndrõ_öfo
->
vndrõ
.
oui
,

1176 
vndrõ_öfo
->
vndrõ
.
id
,

1177 
vndrõ_öfo
->
õ_±r
 + 
VNDR_IE_FIXED_LEN
,

1178 
vndrõ_öfo
->
õ_Àn
 - 
VNDR_IE_FIXED_LEN
,

1181 
cuº_õ_buf
 +
dñ_add_õ_buf_Àn
;

1182 
tŸÆ_õ_buf_Àn
 +
dñ_add_õ_buf_Àn
;

1186 *
mgmt_õ_Àn
 = 0;

1188 i‡(
mgmt_õ_buf
 && 
∑r£d_õ_buf_Àn
) {

1189 
±r
 = 
mgmt_õ_buf
;

1191 
ªmaöed_buf_Àn
 = 
mgmt_õ_buf_Àn
;

1194 
i
 = 0; i < 
√w_vndr_õs
.
cou¡
; i++) {

1195 
∑r£d_vndr_õ_öfo
 *
vndrõ_öfo
 =

1196 &
√w_vndr_õs
.
õ_öfo
[
i
];

1198 
	`CFGP2P_INFO
(("ADDED ID : %d, Len: %d(%d), OUI:%02x:%02x:%02x\n",

1199 
vndrõ_öfo
->
vndrõ
.
id
, vndrõ_öfo->vndrõ.
Àn
,

1200 
vndrõ_öfo
->
õ_Àn
 - 2,

1201 
vndrõ_öfo
->
vndrõ
.
oui
[0], vndrie_info->vndrie.oui[1],

1202 
vndrõ_öfo
->
vndrõ
.
oui
[2]));

1204 
dñ_add_õ_buf_Àn
 = 
	`wl_cfgp2p_vndr_õ
(
wl
, 
cuº_õ_buf
,

1205 
bssidx
, 
pktÊag
, 
vndrõ_öfo
->
vndrõ
.
oui
,

1206 
vndrõ_öfo
->
vndrõ
.
id
,

1207 
vndrõ_öfo
->
õ_±r
 + 
VNDR_IE_FIXED_LEN
,

1208 
vndrõ_öfo
->
õ_Àn
 - 
VNDR_IE_FIXED_LEN
,

1212 i‡(
ªmaöed_buf_Àn
 >
vndrõ_öfo
->
õ_Àn
) {

1213 
ªmaöed_buf_Àn
 -
vndrõ_öfo
->
õ_Àn
;

1215 
	`CFGP2P_ERR
(("no space in mgmt_ie_buf:Öktflag = %d, "

1218 
pktÊag
, 
√w_vndr_õs
.
cou¡
, 
i
, 
ªmaöed_buf_Àn
,

1219 *
mgmt_õ_Àn
, 
vndrõ_öfo
->
õ_Àn
));

1224 
	`mem˝y
(
±r
 + (*
mgmt_õ_Àn
), 
vndrõ_öfo
->
õ_±r
,

1225 
vndrõ_öfo
->
õ_Àn
);

1226 *
mgmt_õ_Àn
 +
vndrõ_öfo
->
õ_Àn
;

1228 
cuº_õ_buf
 +
dñ_add_õ_buf_Àn
;

1229 
tŸÆ_õ_buf_Àn
 +
dñ_add_õ_buf_Àn
;

1232 i‡(
tŸÆ_õ_buf_Àn
) {

1233 
ªt
 = 
	`wldev_iov¨_£tbuf_bsscfg
(
ndev
, "vndr_õ", 
g_mgmt_õ_buf
,

1234 
tŸÆ_õ_buf_Àn
, 
wl
->
io˘l_buf
, 
WLC_IOCTL_MAXLEN
,

1235 
bssidx
, &
wl
->
io˘l_buf_sync
);

1236 i‡(
ªt
)

1237 
	`CFGP2P_ERR
(("vnd∏õ sëÉº‹ : %d\n", 
ªt
));

1240 #unde‡
IE_TYPE


1241 #unde‡
IE_TYPE_LEN


1242 
exô
:

1243  
ªt
;

1244 
	}
}

1253 
s32


1254 
	$wl_cfgp2p_˛ór_m™agemít_õ
(
wl_¥iv
 *
wl
, 
s32
 
bssidx
)

1257 
s32
 
vndrõ_Êag
[] = {
VNDR_IE_BEACON_FLAG
, 
VNDR_IE_PRBRSP_FLAG
, 
VNDR_IE_ASSOCRSP_FLAG
,

1258 
VNDR_IE_PRBREQ_FLAG
, 
VNDR_IE_ASSOCREQ_FLAG
};

1259 
s32
 
ödex
 = -1;

1260 
√t_devi˚
 *
ndev
 = 
	`wl_cfgp2p_föd_ndev
(
wl
, 
bssidx
);

1261 
	#INIT_IE
(
IE_TYPE
, 
BSS_TYPE
) \

1263 
	`mem£t
(
	`wl_to_p2p_bss_ßved_õ
(
wl
, 
BSS_TYPE
).
p2p_
 ## 
IE_TYPE
 ## 
_õ
, 0, \

1264 (
	`wl_to_p2p_bss_ßved_õ
(
wl
, 
BSS_TYPE
).
p2p_
 ## 
IE_TYPE
 ## 
_õ
)); \

1265 
	`wl_to_p2p_bss_ßved_õ
(
wl
, 
BSS_TYPE
).
p2p_
 ## 
IE_TYPE
 ## 
_õ_Àn
 = 0; \

1266 } 0);

	)

1268 i‡(
bssidx
 < 0 || 
ndev
 =
NULL
) {

1269 
	`CFGP2P_ERR
(("övÆid %s\n", (
bssidx
 < 0) ? "bssidx" : "ndev"));

1270  
BCME_BADARG
;

1272 
ödex
 = 0; index < 
	`ARRAYSIZE
(
vndrõ_Êag
); index++) {

1274 
	`wl_cfgp2p_£t_m™agemít_õ
(
wl
, 
ndev
, 
bssidx
, 
vndrõ_Êag
[
ödex
], 
NULL
, 0);

1276 
	`INIT_IE
(
¥obe_ªq
, 
bssidx
);

1277 
	`INIT_IE
(
¥obe_ªs
, 
bssidx
);

1278 
	`INIT_IE
(
assoc_ªq
, 
bssidx
);

1279 
	`INIT_IE
(
assoc_ªs
, 
bssidx
);

1280 
	`INIT_IE
(
bóc⁄
, 
bssidx
);

1281  
BCME_OK
;

1282 
	}
}

1288 
boﬁ


1289 
	$wl_cfgp2p_has_õ
(
u8
 *
õ
, u8 **
évs
, 
u32
 *
évs_Àn
, c⁄° u8 *
oui
, u32 
oui_Àn
, u8 
ty≥
)

1292 i‡(
õ
[
TLV_LEN_OFF
] >
oui_Àn
 + 1 &&

1293 !
	`bcmp
(&
õ
[
TLV_BODY_OFF
], 
oui
, 
oui_Àn
) &&

1294 
ty≥
 =
õ
[
TLV_BODY_OFF
 + 
oui_Àn
]) {

1295  
TRUE
;

1298 i‡(
évs
 =
NULL
)

1299  
FALSE
;

1301 
õ
 +õ[
TLV_LEN_OFF
] + 
TLV_HDR_LEN
;

1303 *
évs_Àn
 -()(
õ
 - *
évs
);

1305 *
évs
 = 
õ
;

1307  
FALSE
;

1308 
	}
}

1310 
w∑_õ_fixed_t
 *

1311 
	$wl_cfgp2p_föd_w∑õ
(
u8
 *
∑r£
, 
u32
 
Àn
)

1313 
bcm_év_t
 *
õ
;

1315 (
õ
 = 
	`bcm_∑r£_évs
(
∑r£
, (
u32
)
Àn
, 
DOT11_MNG_VS_ID
))) {

1316 i‡(
	`wl_cfgp2p_is_w∑_õ
((
u8
*)
õ
, &
∑r£
, &
Àn
)) {

1317  (
w∑_õ_fixed_t
 *)
õ
;

1320  
NULL
;

1321 
	}
}

1323 
w∑_õ_fixed_t
 *

1324 
	$wl_cfgp2p_föd_wpsõ
(
u8
 *
∑r£
, 
u32
 
Àn
)

1326 
bcm_év_t
 *
õ
;

1328 (
õ
 = 
	`bcm_∑r£_évs
(
∑r£
, (
u32
)
Àn
, 
DOT11_MNG_VS_ID
))) {

1329 i‡(
	`wl_cfgp2p_is_wps_õ
((
u8
*)
õ
, &
∑r£
, &
Àn
)) {

1330  (
w∑_õ_fixed_t
 *)
õ
;

1333  
NULL
;

1334 
	}
}

1336 
wifi_p2p_õ_t
 *

1337 
	$wl_cfgp2p_föd_p2põ
(
u8
 *
∑r£
, 
u32
 
Àn
)

1339 
bcm_év_t
 *
õ
;

1341 (
õ
 = 
	`bcm_∑r£_évs
(
∑r£
, ()
Àn
, 
DOT11_MNG_VS_ID
))) {

1342 i‡(
	`wl_cfgp2p_is_p2p_õ
((
uöt8
*)
õ
, &
∑r£
, &
Àn
)) {

1343  (
wifi_p2p_õ_t
 *)
õ
;

1346  
NULL
;

1347 
	}
}

1349 
wifi_wfd_õ_t
 *

1350 
	$wl_cfgp2p_föd_wfdõ
(
u8
 *
∑r£
, 
u32
 
Àn
)

1352 
bcm_év_t
 *
õ
;

1354 (
õ
 = 
	`bcm_∑r£_évs
(
∑r£
, ()
Àn
, 
DOT11_MNG_VS_ID
))) {

1355 i‡(
	`wl_cfgp2p_is_wfd_õ
((
uöt8
*)
õ
, &
∑r£
, &
Àn
)) {

1356  (
wifi_wfd_õ_t
 *)
õ
;

1359  
NULL
;

1360 
	}
}

1361 
u32


1362 
	$wl_cfgp2p_vndr_õ
(
wl_¥iv
 *
wl
, 
u8
 *
õbuf
, 
s32
 
bssidx
, s32 
pktÊag
,

1363 
s8
 *
oui
, 
s32
 
õ_id
, s8 *
d©a
, s32 
d©Æí
, c⁄° s8* 
add_dñ_cmd
)

1365 
vndr_õ_£tbuf_t
 
hdr
;

1366 
s32
 
õcou¡
;

1367 
u32
 
d©a_off£t
;

1370 i‡((
pktÊag
 & ~(
VNDR_IE_BEACON_FLAG
 | 
VNDR_IE_PRBRSP_FLAG
 |

1371 
VNDR_IE_ASSOCRSP_FLAG
 | 
VNDR_IE_AUTHRSP_FLAG
 |

1372 
VNDR_IE_PRBREQ_FLAG
 | 
VNDR_IE_ASSOCREQ_FLAG
))) {

1373 
	`CFGP2P_ERR
(("p2pwl_vndr_õ: InvÆidÖackë fœg 0x%x\n", 
pktÊag
));

1378 
	`°∫˝y
(
hdr
.
cmd
, 
add_dñ_cmd
, 
VNDR_IE_CMD_LEN
 - 1);

1379 
hdr
.
cmd
[
VNDR_IE_CMD_LEN
 - 1] = '\0';

1382 
õcou¡
 = 
	`htod32
(1);

1383 
	`mem˝y
((*)&
hdr
.
vndr_õ_buf„r
.
õcou¡
, &õcou¡, (
s32
));

1386 
pktÊag
 = 
	`htod32
(pktflag);

1387 
	`mem˝y
((*)&
hdr
.
vndr_õ_buf„r
.
vndr_õ_li°
[0].
pktÊag
, &pktflag,

1388 (
u32
));

1391 
hdr
.
vndr_õ_buf„r
.
vndr_õ_li°
[0].
vndr_õ_d©a
.
id
 = 
õ_id
;

1394 
hdr
.
vndr_õ_buf„r
.
vndr_õ_li°
[0].
vndr_õ_d©a
.
Àn
 =

1395 (
uöt8
Ë
VNDR_IE_MIN_LEN
 + 
d©Æí
;

1398 
hdr
.
vndr_õ_buf„r
.
vndr_õ_li°
[0].
vndr_õ_d©a
.
oui
[0] = oui[0];

1399 
hdr
.
vndr_õ_buf„r
.
vndr_õ_li°
[0].
vndr_õ_d©a
.
oui
[1] = oui[1];

1400 
hdr
.
vndr_õ_buf„r
.
vndr_õ_li°
[0].
vndr_õ_d©a
.
oui
[2] = oui[2];

1403 
	`mem˝y
(
õbuf
, &
hdr
, (hdr) - 1);

1406 
d©a_off£t
 =

1407 (
u8
*)&
hdr
.
vndr_õ_buf„r
.
vndr_õ_li°
[0].
vndr_õ_d©a
.
d©a
[0] -

1408 (
u8
*)&
hdr
;

1409 
	`mem˝y
(
õbuf
 + 
d©a_off£t
, 
d©a
, 
d©Æí
);

1410  
d©a_off£t
 + 
d©Æí
;

1412 
	}
}

1421 
s32


1422 
	$wl_cfgp2p_föd_idx
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
)

1424 
u32
 
i
;

1425 
s32
 
ödex
 = -1;

1427 i‡(
ndev
 =
NULL
) {

1428 
	`CFGP2P_ERR
(("Çdev is NULL\n"));

1429 
exô
;

1431 i‡(!
wl
->
p2p_suµ‹ãd
) {

1432  
P2PAPI_BSSCFG_PRIMARY
;

1434 
i
 = 0; i < 
P2PAPI_BSSCFG_MAX
; i++) {

1435 i‡(
ndev
 =
	`wl_to_p2p_bss_ndev
(
wl
, 
i
)) {

1436 
ödex
 = 
	`wl_to_p2p_bss_bssidx
(
wl
, 
i
);

1440 i‡(
ödex
 == -1)

1441  
P2PAPI_BSSCFG_PRIMARY
;

1442 
exô
:

1443  
ödex
;

1444 
	}
}

1445 
√t_devi˚
 *

1446 
	$wl_cfgp2p_föd_ndev
(
wl_¥iv
 *
wl
, 
s32
 
bssidx
)

1448 
u32
 
i
;

1449 
√t_devi˚
 *
ndev
 = 
NULL
;

1450 i‡(
bssidx
 < 0) {

1451 
	`CFGP2P_ERR
((" bsscfg idx is invalid\n"));

1452 
exô
;

1455 
i
 = 0; i < 
P2PAPI_BSSCFG_MAX
; i++) {

1456 i‡(
bssidx
 =
	`wl_to_p2p_bss_bssidx
(
wl
, 
i
)) {

1457 
ndev
 = 
	`wl_to_p2p_bss_ndev
(
wl
, 
i
);

1462 
exô
:

1463  
ndev
;

1464 
	}
}

1469 
s32


1470 
	$wl_cfgp2p_li°í_com∂ëe
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
,

1471 c⁄° 
wl_evít_msg_t
 *
e
, *
d©a
)

1473 
s32
 
ªt
 = 
BCME_OK
;

1474 
√t_devi˚
 *
√tdev
;

1475 i‡(!
wl
 || !wl->
p2p
)

1476  
BCME_ERROR
;

1477 i‡(
wl
->
p2p_√t
 =
ndev
) {

1478 
√tdev
 = 
	`wl_to_¥mry_ndev
(
wl
);

1480 
√tdev
 = 
ndev
;

1482 
	`CFGP2P_DBG
((" Enter\n"));

1483 i‡(
	`wl_gë_p2p_°©us
(
wl
, 
LISTEN_EXPIRED
) == 0) {

1484 
	`wl_£t_p2p_°©us
(
wl
, 
LISTEN_EXPIRED
);

1485 i‡(
	`timî_≥ndög
(&
wl
->
p2p
->
li°í_timî
)) {

1486 
	`dñ_timî_sync
(&
wl
->
p2p
->
li°í_timî
);

1489 i‡(
wl
->
afx_hdl
->
is_li°í
 =
TRUE
 &&

1490 
	`wl_gë_drv_°©us_Æl
(
wl
, 
FINDING_COMMON_CHANNEL
)) {

1491 
	`WL_DBG
(("Listen DONE foráction frame\n"));

1492 
	`com∂ëe
(&
wl
->
a˘_‰m_sˇn
);

1494 #ifde‡
WL_CFG80211_SYNC_GON


1495 i‡(
	`wl_gë_drv_°©us_Æl
(
wl
, 
WAITING_NEXT_ACT_FRM_LISTEN
)) {

1496 
	`wl_˛r_drv_°©us
(
wl
, 
WAITING_NEXT_ACT_FRM_LISTEN
, 
√tdev
);

1497 
	`WL_DBG
(("Listen DONEánd wake up wait_next_af !!(%d)\n",

1498 
	`jiffõs_to_m£cs
(
jiffõs
 - 
wl
->
af_tx_£¡_jiffõs
)));

1500 i‡(
	`wl_gë_drv_°©us_Æl
(
wl
, 
WAITING_NEXT_ACT_FRM
))

1501 
	`wl_˛r_drv_°©us
(
wl
, 
WAITING_NEXT_ACT_FRM
, 
√tdev
);

1503 
	`com∂ëe
(&
wl
->
waô_√xt_af
);

1507 #i‚de‡
WL_CFG80211_VSDB_PRIORITIZE_SCAN_REQUEST


1508 i‡(
	`wl_gë_drv_°©us_Æl
(
wl
, 
REMAINING_ON_CHANNEL
)) {

1510 i‡(
	`wl_gë_drv_°©us_Æl
(
wl
, 
REMAINING_ON_CHANNEL
) ||

1511 
	`wl_gë_drv_°©us_Æl
(
wl
, 
FAKE_REMAINING_ON_CHANNEL
)) {

1513 
	`WL_DBG
(("Listen DONE forÑamain on channelÉxpired\n"));

1514 
	`wl_˛r_drv_°©us
(
wl
, 
REMAINING_ON_CHANNEL
, 
√tdev
);

1515 #ifde‡
WL_CFG80211_VSDB_PRIORITIZE_SCAN_REQUEST


1516 
	`wl_˛r_drv_°©us
(
wl
, 
FAKE_REMAINING_ON_CHANNEL
, 
√tdev
);

1518 i‡(
ndev
 && (ndev->
õì80211_±r
 !
NULL
)) {

1519 
	`cfg80211_ªmaö_⁄_ch™√l_expúed
(
ndev
, 
wl
->
œ°_roc_id
,

1520 &
wl
->
ªmaö_⁄_ch™
, wl->
ªmaö_⁄_ch™_ty≥
, 
GFP_KERNEL
);

1523 i‡(
	`wl_add_ªmove_evítmsg
(
	`wl_to_¥mry_ndev
(
wl
),

1524 
WLC_E_P2P_PROBREQ_MSG
, 
Ál£
Ë!
BCME_OK
) {

1525 
	`CFGP2P_ERR
((" failedÅo unset WLC_E_P2P_PROPREQ_MSG\n"));

1528 
	`wl_˛r_p2p_°©us
(
wl
, 
LISTEN_EXPIRED
);

1530  
ªt
;

1532 
	}
}

1540 
	$wl_cfgp2p_li°í_expúed
(
d©a
)

1542 
wl_evít_msg_t
 
msg
;

1543 
wl_¥iv
 *
wl
 = (wl_¥iv *Ë
d©a
;

1544 
	`CFGP2P_DBG
((" Enter\n"));

1545 
	`bzîo
(&
msg
, (
wl_evít_msg_t
));

1546 
msg
.
evít_ty≥
 = 
	`ht⁄32
(
WLC_E_P2P_DISC_LISTEN_COMPLETE
);

1547 
	`wl_cfg80211_evít
(
wl
->
p2p_√t
 ? wl->p2p_net :

1548 
	`wl_to_p2p_bss_ndev
(
wl
, 
P2PAPI_BSSCFG_DEVICE
), &
msg
, 
NULL
);

1549 
	}
}

1553 
s32


1554 
	$wl_cfgp2p_ˇn˚l_li°í
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
,

1555 
boﬁ
 
nŸify
)

1557 
	`WL_DBG
(("Enter \n"));

1561 i‡(
	`timî_≥ndög
(&
wl
->
p2p
->
li°í_timî
)) {

1562 
	`dñ_timî_sync
(&
wl
->
p2p
->
li°í_timî
);

1563 i‡(
nŸify
)

1564 i‡(
ndev
 &&Çdev->
õì80211_±r
) {

1565 
	`cfg80211_ªmaö_⁄_ch™√l_expúed
(
ndev
, 
wl
->
œ°_roc_id
,

1566 &
wl
->
ªmaö_⁄_ch™
, wl->
ªmaö_⁄_ch™_ty≥
,

1567 
GFP_KERNEL
);

1571 
	}
}

1583 
s32


1584 
	$wl_cfgp2p_discovî_li°í
(
wl_¥iv
 *
wl
, 
s32
 
ch™√l
, 
u32
 
duøti⁄_ms
)

1586 
	#EXTRA_DELAY_TIME
 100

	)

1587 
s32
 
ªt
 = 
BCME_OK
;

1588 
timî_li°
 *
_timî
;

1589 
s32
 
exåa_dñay
;

1590 
√t_devi˚
 *
√tdev
 = 
	`wl_to_¥mry_ndev
(
wl
);

1592 
	`CFGP2P_DBG
((" E¡î Li°í Ch™√»: %d, Duøti⁄ : %d\n", 
ch™√l
, 
duøti⁄_ms
));

1593 i‡(
	`u∆ikñy
(
	`wl_gë_p2p_°©us
(
wl
, 
DISCOVERY_ON
) == 0)) {

1595 
	`CFGP2P_ERR
((" Discovery isÇot set, so we haveÇotingÅo do\n"));

1597 
ªt
 = 
BCME_NOTREADY
;

1598 
exô
;

1600 i‡(
	`timî_≥ndög
(&
wl
->
p2p
->
li°í_timî
)) {

1601 
	`CFGP2P_DBG
(("previous LISTEN isÇot completed yet\n"));

1602 
exô
;

1605 #i‚de‡
WL_CFG80211_VSDB_PRIORITIZE_SCAN_REQUEST


1607 
	`wl_˛r_p2p_°©us
(
wl
, 
LISTEN_EXPIRED
);

1609 i‡(
	`wl_add_ªmove_evítmsg
(
√tdev
, 
WLC_E_P2P_PROBREQ_MSG
, 
åue
Ë!
BCME_OK
) {

1610 
	`CFGP2P_ERR
((" failedÅo set WLC_E_P2P_PROPREQ_MSG\n"));

1613 
ªt
 = 
	`wl_cfgp2p_£t_p2p_mode
(
wl
, 
WL_P2P_DISC_ST_LISTEN
, 
ch™√l
, (
u16
Ë
duøti⁄_ms
,

1614 
	`wl_to_p2p_bss_bssidx
(
wl
, 
P2PAPI_BSSCFG_DEVICE
));

1615 
_timî
 = &
wl
->
p2p
->
li°í_timî
;

1620 i‡(
ªt
 =
BCME_OK
) {

1621 
exåa_dñay
 = 
EXTRA_DELAY_TIME
 + (
duøti⁄_ms
 / 10);

1624 
duøti⁄_ms
 = 100 + duration_ms / 20;

1625 
exåa_dñay
 = 0;

1628 
	`INIT_TIMER
(
_timî
, 
wl_cfgp2p_li°í_expúed
, 
duøti⁄_ms
, 
exåa_dñay
);

1629 #ifde‡
WL_CFG80211_VSDB_PRIORITIZE_SCAN_REQUEST


1630 
	`wl_˛r_p2p_°©us
(
wl
, 
LISTEN_EXPIRED
);

1633 #unde‡
EXTRA_DELAY_TIME


1634 
exô
:

1635  
ªt
;

1636 
	}
}

1639 
s32


1640 
	$wl_cfgp2p_discovî_íabÀ_£¨ch
(
wl_¥iv
 *
wl
, 
u8
 
íabÀ
)

1642 
s32
 
ªt
 = 
BCME_OK
;

1643 
	`CFGP2P_DBG
((" Enter\n"));

1644 i‡(!
	`wl_gë_p2p_°©us
(
wl
, 
DISCOVERY_ON
)) {

1646 
	`CFGP2P_DBG
((" doÇothing, discovery is off\n"));

1647  
ªt
;

1649 i‡(
	`wl_gë_p2p_°©us
(
wl
, 
SEARCH_ENABLED
Ë=
íabÀ
) {

1650 
	`CFGP2P_DBG
(("Æªady : %d\n", 
íabÀ
));

1651  
ªt
;

1654 
	`wl_chg_p2p_°©us
(
wl
, 
SEARCH_ENABLED
);

1658 i‡(!
íabÀ
) {

1659 
	`wl_˛r_p2p_°©us
(
wl
, 
SCANNING
);

1660 
ªt
 = 
	`wl_cfgp2p_£t_p2p_mode
(
wl
, 
WL_P2P_DISC_ST_SCAN
, 0, 0,

1661 
	`wl_to_p2p_bss_bssidx
(
wl
, 
P2PAPI_BSSCFG_DEVICE
));

1664  
ªt
;

1665 
	}
}

1670 
s32


1671 
	$wl_cfgp2p_a˘i⁄_tx_com∂ëe
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
,

1672 c⁄° 
wl_evít_msg_t
 *
e
, *
d©a
)

1674 
s32
 
ªt
 = 
BCME_OK
;

1675 
u32
 
evít_ty≥
 = 
	`¡oh32
(
e
->event_type);

1676 
u32
 
°©us
 = 
	`¡oh32
(
e
->status);

1677 
	`CFGP2P_DBG
((" Enter\n"));

1678 i‡(
evít_ty≥
 =
WLC_E_ACTION_FRAME_COMPLETE
) {

1680 
	`CFGP2P_INFO
((" WLC_E_ACTION_FRAME_COMPLETE i†ª˚ived : %d\n", 
°©us
));

1681 i‡(
°©us
 =
WLC_E_STATUS_SUCCESS
) {

1682 
	`wl_£t_p2p_°©us
(
wl
, 
ACTION_TX_COMPLETED
);

1683 
	`CFGP2P_DBG
(("WLC_E_ACTION_FRAME_COMPLETE : ACK\n"));

1686 
	`wl_£t_p2p_°©us
(
wl
, 
ACTION_TX_NOACK
);

1687 
	`CFGP2P_INFO
(("WLC_E_ACTION_FRAME_COMPLETE : NO ACK\n"));

1688 
	`wl_°›_waô_√xt_a˘i⁄_‰ame
(
wl
, 
ndev
);

1691 
	`CFGP2P_INFO
((" WLC_E_ACTION_FRAME_OFFCHAN_COMPLETE isÑeceived,"

1692 "°©u†: %d\n", 
°©us
));

1694 i‡(
	`wl_gë_drv_°©us_Æl
(
wl
, 
SENDING_ACT_FRM
))

1695 
	`com∂ëe
(&
wl
->
£nd_af_d⁄e
);

1697  
ªt
;

1698 
	}
}

1707 
s32


1708 
	$wl_cfgp2p_tx_a˘i⁄_‰ame
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
dev
,

1709 
wl_af_∑øms_t
 *
af_∑øms
, 
s32
 
bssidx
)

1711 
s32
 
ªt
 = 
BCME_OK
;

1712 
s32
 
timeout
 = 0;

1713 
wl_evítmsg_buf_t
 
buf
;

1716 
	`CFGP2P_INFO
(("\n"));

1717 
	`CFGP2P_INFO
(("channel : %u , dwellÅime : %u\n",

1718 
af_∑øms
->
ch™√l
,áf_∑øms->
dwñl_time
));

1720 
	`wl_˛r_p2p_°©us
(
wl
, 
ACTION_TX_COMPLETED
);

1721 
	`wl_˛r_p2p_°©us
(
wl
, 
ACTION_TX_NOACK
);

1723 
	`bzîo
(&
buf
, (
wl_evítmsg_buf_t
));

1724 
	`wl_cfg80211_add_to_evítbuf„r
(&
buf
, 
WLC_E_ACTION_FRAME_OFF_CHAN_COMPLETE
, 
åue
);

1725 
	`wl_cfg80211_add_to_evítbuf„r
(&
buf
, 
WLC_E_ACTION_FRAME_COMPLETE
, 
åue
);

1726 i‡((
ªt
 = 
	`wl_cfg80211_≠∂y_evítbuf„r
(
	`wl_to_¥mry_ndev
(
wl
), wl, &
buf
)) < 0)

1727  
ªt
;

1729 
	#MAX_WAIT_TIME
 2000

	)

1730 i‡(
bssidx
 =
P2PAPI_BSSCFG_PRIMARY
)

1731 
bssidx
 = 
	`wl_to_p2p_bss_bssidx
(
wl
, 
P2PAPI_BSSCFG_DEVICE
);

1733 
wl
->
af_£¡_ch™√l
 = 
af_∑øms
->
ch™√l
;

1734 #ifde‡
WL_CFG80211_SYNC_GON


1735 
wl
->
af_tx_£¡_jiffõs
 = 
jiffõs
;

1738 
ªt
 = 
	`wldev_iov¨_£tbuf_bsscfg
(
dev
, "a˘‰ame", 
af_∑øms
, (*af_params),

1739 
wl
->
io˘l_buf
, 
WLC_IOCTL_MAXLEN
, 
bssidx
, &wl->
io˘l_buf_sync
);

1741 i‡(
ªt
 < 0) {

1742 
	`CFGP2P_ERR
((" sendingáction frame is failed\n"));

1743 
exô
;

1746 
timeout
 = 
	`waô_f‹_com∂ëi⁄_timeout
(&
wl
->
£nd_af_d⁄e
, 
	`m£cs_to_jiffõs
(
MAX_WAIT_TIME
));

1748 i‡(
timeout
 > 0 && 
	`wl_gë_p2p_°©us
(
wl
, 
ACTION_TX_COMPLETED
)) {

1749 
	`CFGP2P_INFO
(("txáction frame operation is completed\n"));

1750 
ªt
 = 
BCME_OK
;

1752 
ªt
 = 
BCME_ERROR
;

1753 
	`CFGP2P_INFO
(("txáction frame operation is failed\n"));

1756 
	`wl_˛r_p2p_°©us
(
wl
, 
ACTION_TX_COMPLETED
);

1757 
	`wl_˛r_p2p_°©us
(
wl
, 
ACTION_TX_NOACK
);

1759 
exô
:

1760 
	`CFGP2P_INFO
((" vüá˘ fømêiov¨ : sètu†%d\n", 
ªt
));

1762 
	`bzîo
(&
buf
, (
wl_evítmsg_buf_t
));

1763 
	`wl_cfg80211_add_to_evítbuf„r
(&
buf
, 
WLC_E_ACTION_FRAME_OFF_CHAN_COMPLETE
, 
Ál£
);

1764 
	`wl_cfg80211_add_to_evítbuf„r
(&
buf
, 
WLC_E_ACTION_FRAME_COMPLETE
, 
Ál£
);

1765 i‡((
ªt
 = 
	`wl_cfg80211_≠∂y_evítbuf„r
(
	`wl_to_¥mry_ndev
(
wl
), wl, &
buf
)) < 0)

1766 
	`WL_ERR
(("TX frameÉventsÑevert back failed \n"));

1768 #unde‡
MAX_WAIT_TIME


1769  
ªt
;

1770 
	}
}

1776 
	$wl_cfgp2p_gíî©e_bss_mac
(
ëhî_addr
 *
¥im¨y_addr
,

1777 
ëhî_addr
 *
out_dev_addr
, ëhî_add∏*
out_öt_addr
)

1779 
	`mem£t
(
out_dev_addr
, 0, (*out_dev_addr));

1780 
	`mem£t
(
out_öt_addr
, 0, (*out_int_addr));

1785 
	`mem˝y
(
out_dev_addr
, 
¥im¨y_addr
, (*out_dev_addr));

1786 
out_dev_addr
->
o˘ë
[0] |= 0x02;

1792 
	`mem˝y
(
out_öt_addr
, 
out_dev_addr
, (*out_int_addr));

1793 
out_öt_addr
->
o˘ë
[4] ^= 0x80;

1795 
	}
}

1799 
	$wl_cfg80211_ch™ge_iÁddr
(
u8
* 
buf
, 
ëhî_addr
 *
p2p_öt_addr
, u8 
ñemít_id
)

1801 
wifi_p2p_õ_t
 *
õ
 = (wifi_p2p_õ_t*Ë
buf
;

1802 
u16
 
Àn
 = 
õ
->len;

1803 
u8
 *
subñ
;

1804 
u8
 
subñt_id
;

1805 
u16
 
subñt_Àn
;

1806 
	`CFGP2P_DBG
((" Enter\n"));

1811 
subñ
 = 
õ
->
subñts
;

1812 
Àn
 -= 4;

1814 
Àn
 >= 3) {

1816 
subñt_id
 = *
subñ
;

1817 
subñ
 += 1;

1818 
Àn
 -= 1;

1821 
subñt_Àn
 = *
subñ
++;

1822 
subñt_Àn
 |*
subñ
++ << 8;

1824 
Àn
 -= 2;

1825 
Àn
 -
subñt_Àn
;

1827 i‡(
subñt_id
 =
ñemít_id
) {

1828 i‡(
subñt_id
 =
P2P_SEID_INTINTADDR
) {

1829 
	`mem˝y
(
subñ
, 
p2p_öt_addr
->
o˘ë
, 
ETHER_ADDR_LEN
);

1830 
	`CFGP2P_INFO
(("Intended P2P Interface Address ATTR FOUND\n"));

1831 } i‡(
subñt_id
 =
P2P_SEID_DEV_ID
) {

1832 
	`mem˝y
(
subñ
, 
p2p_öt_addr
->
o˘ë
, 
ETHER_ADDR_LEN
);

1833 
	`CFGP2P_INFO
(("Device ID ATTR FOUND\n"));

1834 } i‡(
subñt_id
 =
P2P_SEID_DEV_INFO
) {

1835 
	`mem˝y
(
subñ
, 
p2p_öt_addr
->
o˘ë
, 
ETHER_ADDR_LEN
);

1836 
	`CFGP2P_INFO
(("Device INFO ATTR FOUND\n"));

1837 } i‡(
subñt_id
 =
P2P_SEID_GROUP_ID
) {

1838 
	`mem˝y
(
subñ
, 
p2p_öt_addr
->
o˘ë
, 
ETHER_ADDR_LEN
);

1839 
	`CFGP2P_INFO
(("GROUP ID ATTR FOUND\n"));

1842 
	`CFGP2P_DBG
(("OTHER id : %d\n", 
subñt_id
));

1844 
subñ
 +
subñt_Àn
;

1846 
	}
}

1854 
boﬁ


1855 
	$wl_cfgp2p_bss_isup
(
√t_devi˚
 *
ndev
, 
bsscfg_idx
)

1857 
s32
 
ªsu…
, 
vÆ
;

1858 
boﬁ
 
isup
 = 
Ál£
;

1859 
s8
 
gëbuf
[64];

1862 *(*)
gëbuf
 = -1;

1863 
ªsu…
 = 
	`wldev_iov¨_gëbuf_bsscfg
(
ndev
, "bss", &
bsscfg_idx
,

1864 (
bsscfg_idx
), 
gëbuf
, (gëbuf), 0, 
NULL
);

1865 i‡(
ªsu…
 != 0) {

1866 
	`CFGP2P_ERR
(("'w»bs†-C %d' faûed: %d\n", 
bsscfg_idx
, 
ªsu…
));

1867 
	`CFGP2P_ERR
(("NOTE:Åhis ioctlÉrror isÇormal "

1870 
vÆ
 = *(*)
gëbuf
;

1871 
vÆ
 = 
	`dtoh32
(val);

1872 
	`CFGP2P_INFO
(("---w»bs†-C %d ==> %d\n", 
bsscfg_idx
, 
vÆ
));

1873 
isup
 = (
vÆ
 ? 
TRUE
 : 
FALSE
);

1875  
isup
;

1876 
	}
}

1880 
s32


1881 
	$wl_cfgp2p_bss
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
, 
s32
 
bsscfg_idx
, s32 
up
)

1883 
s32
 
ªt
 = 
BCME_OK
;

1884 
s32
 
vÆ
 = 
up
 ? 1 : 0;

1887 
s32
 
cfg
;

1888 
s32
 
vÆ
;

1889 } 
bss_£tbuf
;

1891 
bss_£tbuf
.
cfg
 = 
	`htod32
(
bsscfg_idx
);

1892 
bss_£tbuf
.
vÆ
 = 
	`htod32
(val);

1893 
	`CFGP2P_INFO
(("---w»bs†-C %d %s\n", 
bsscfg_idx
, 
up
 ? "up" : "down"));

1894 
ªt
 = 
	`wldev_iov¨_£tbuf
(
ndev
, "bss", &
bss_£tbuf
, (bss_setbuf),

1895 
wl
->
io˘l_buf
, 
WLC_IOCTL_MAXLEN
, &wl->
io˘l_buf_sync
);

1897 i‡(
ªt
 != 0) {

1898 
	`CFGP2P_ERR
(("'bs†%d' faûed wôh %d\n", 
up
, 
ªt
));

1901  
ªt
;

1902 
	}
}

1905 
s32


1906 
	$wl_cfgp2p_suµ‹ãd
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
)

1908 
s32
 
ªt
 = 
BCME_OK
;

1909 
s32
 
p2p_suµ‹ãd
 = 0;

1910 
ªt
 = 
	`wldev_iov¨_gëöt
(
ndev
, "p2p",

1911 &
p2p_suµ‹ãd
);

1912 i‡(
ªt
 < 0) {

1913 
	`CFGP2P_ERR
(("w»p2∞îr‹ %d\n", 
ªt
));

1916 i‡(
p2p_suµ‹ãd
 == 1) {

1917 
	`CFGP2P_INFO
(("p2p is supported\n"));

1919 
	`CFGP2P_INFO
(("p2p is unsupported\n"));

1920 
p2p_suµ‹ãd
 = 0;

1922  
p2p_suµ‹ãd
;

1923 
	}
}

1925 
s32


1926 
	$wl_cfgp2p_down
(
wl_¥iv
 *
wl
)

1928 
s32
 
i
 = 0, 
ödex
 = -1;

1929 
	`wl_cfgp2p_ˇn˚l_li°í
(
wl
,

1930 
wl
->
p2p_√t
 ? wl->p2p_√à: 
	`wl_to_¥mry_ndev
(wl), 
TRUE
);

1931 
i
 = 0; i < 
P2PAPI_BSSCFG_MAX
; i++) {

1932 
ödex
 = 
	`wl_to_p2p_bss_bssidx
(
wl
, 
i
);

1933 i‡(
ödex
 !
WL_INVALID
)

1934 
	`wl_cfgp2p_˛ór_m™agemít_õ
(
wl
, 
ödex
);

1936 
	`wl_cfgp2p_deöô_¥iv
(
wl
);

1938 
	}
}

1939 
s32


1940 
	$wl_cfgp2p_£t_p2p_nﬂ
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
, * 
buf
, 
Àn
)

1942 
s32
 
ªt
 = -1;

1943 
cou¡
, 
°¨t
, 
duøti⁄
;

1944 
wl_p2p_sched_t
 
d⁄gÀ_nﬂ
;

1946 
	`CFGP2P_DBG
((" Enter\n"));

1948 
	`mem£t
(&
d⁄gÀ_nﬂ
, 0, (dongle_noa));

1950 i‡(
wl
->
p2p
 && wl->p2p->
vif_¸óãd
) {

1952 
wl
->
p2p
->
nﬂ
.
desc
[0].
°¨t
 = 0;

1954 
	`ssˇnf
(
buf
, "%10d %10d %10d", &
cou¡
, &
°¨t
, &
duøti⁄
);

1955 
	`CFGP2P_DBG
(("set_p2p_noa count %d start %d duration %d\n",

1956 
cou¡
, 
°¨t
, 
duøti⁄
));

1957 i‡(
cou¡
 != -1)

1958 
wl
->
p2p
->
nﬂ
.
desc
[0].
cou¡
 = count;

1961 i‡(
°¨t
 != -1)

1962 
wl
->
p2p
->
nﬂ
.
desc
[0].
öãrvÆ
 = 
°¨t
;

1964 i‡(
duøti⁄
 != -1)

1965 
wl
->
p2p
->
nﬂ
.
desc
[0].
duøti⁄
 = duration;

1967 i‡(
wl
->
p2p
->
nﬂ
.
desc
[0].
cou¡
 != 255) {

1968 
wl
->
p2p
->
nﬂ
.
desc
[0].
°¨t
 = 200;

1969 
d⁄gÀ_nﬂ
.
ty≥
 = 
WL_P2P_SCHED_TYPE_REQ_ABS
;

1970 
d⁄gÀ_nﬂ
.
a˘i⁄
 = 
WL_P2P_SCHED_ACTION_GOOFF
;

1971 
d⁄gÀ_nﬂ
.
›ti⁄
 = 
WL_P2P_SCHED_OPTION_TSFOFS
;

1975 
d⁄gÀ_nﬂ
.
a˘i⁄
 = 
WL_P2P_SCHED_ACTION_NONE
;

1976 
d⁄gÀ_nﬂ
.
ty≥
 = 
WL_P2P_SCHED_TYPE_ABS
;

1977 i‡((
wl
->
p2p
->
nﬂ
.
desc
[0].
öãrvÆ
 == 102) ||

1978 (
wl
->
p2p
->
nﬂ
.
desc
[0].
öãrvÆ
 == 100)) {

1979 
wl
->
p2p
->
nﬂ
.
desc
[0].
°¨t
 = 100 -

1980 
wl
->
p2p
->
nﬂ
.
desc
[0].
duøti⁄
;

1981 
d⁄gÀ_nﬂ
.
›ti⁄
 = 
WL_P2P_SCHED_OPTION_BCNPCT
;

1984 
d⁄gÀ_nﬂ
.
›ti⁄
 = 
WL_P2P_SCHED_OPTION_NORMAL
;

1988 
d⁄gÀ_nﬂ
.
desc
[0].
cou¡
 = 
	`htod32
(
wl
->
p2p
->
nﬂ
.desc[0].count);

1989 i‡(
d⁄gÀ_nﬂ
.
›ti⁄
 =
WL_P2P_SCHED_OPTION_BCNPCT
) {

1990 
d⁄gÀ_nﬂ
.
desc
[0].
°¨t
 = 
	`htod32
(
wl
->
p2p
->
nﬂ
.desc[0].start);

1991 
d⁄gÀ_nﬂ
.
desc
[0].
duøti⁄
 = 
	`htod32
(
wl
->
p2p
->
nﬂ
.desc[0].duration);

1994 
d⁄gÀ_nﬂ
.
desc
[0].
°¨t
 = 
	`htod32
(
wl
->
p2p
->
nﬂ
.desc[0].start*1000);

1995 
d⁄gÀ_nﬂ
.
desc
[0].
duøti⁄
 = 
	`htod32
(
wl
->
p2p
->
nﬂ
.desc[0].duration*1000);

1997 
d⁄gÀ_nﬂ
.
desc
[0].
öãrvÆ
 = 
	`htod32
(
wl
->
p2p
->
nﬂ
.desc[0].interval*1000);

1999 
ªt
 = 
	`wldev_iov¨_£tbuf
(
	`wl_to_p2p_bss_ndev
(
wl
, 
P2PAPI_BSSCFG_CONNECTION
),

2000 "p2p_nﬂ", &
d⁄gÀ_nﬂ
, (d⁄gÀ_nﬂ), 
wl
->
io˘l_buf
, 
WLC_IOCTL_MAXLEN
,

2001 &
wl
->
io˘l_buf_sync
);

2003 i‡(
ªt
 < 0) {

2004 
	`CFGP2P_ERR
(("fw sëÖ2p_nﬂ faûed %d\n", 
ªt
));

2008 
	`CFGP2P_ERR
(("ERROR: set_noa inÇon-p2p mode\n"));

2010  
ªt
;

2011 
	}
}

2012 
s32


2013 
	$wl_cfgp2p_gë_p2p_nﬂ
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
, * 
buf
, 
buf_Àn
)

2016 
wifi_p2p_nﬂ_desc_t
 *
nﬂ_desc
;

2017 
Àn
 = 0, 
i
;

2018 
_buf
[200];

2020 
	`CFGP2P_DBG
((" Enter\n"));

2021 
buf
[0] = '\0';

2022 i‡(
wl
->
p2p
 && wl->p2p->
vif_¸óãd
) {

2023 i‡(
wl
->
p2p
->
nﬂ
.
desc
[0].
cou¡
 || wl->p2p->
›s
.ops) {

2024 
_buf
[0] = 1;

2025 
_buf
[1] = (
wl
->
p2p
->
›s
.ops ? 0x80: 0) |

2026 (
wl
->
p2p
->
›s
.
˘w
 & 0x7f);

2027 
Àn
 += 2;

2028 i‡(
wl
->
p2p
->
nﬂ
.
desc
[0].
cou¡
) {

2029 
nﬂ_desc
 = (
wifi_p2p_nﬂ_desc_t
*)&
_buf
[
Àn
];

2030 
nﬂ_desc
->
˙t_ty≥
 = 
wl
->
p2p
->
nﬂ
.
desc
[0].
cou¡
;

2031 
nﬂ_desc
->
duøti⁄
 = 
wl
->
p2p
->
nﬂ
.
desc
[0].duration;

2032 
nﬂ_desc
->
öãrvÆ
 = 
wl
->
p2p
->
nﬂ
.
desc
[0].interval;

2033 
nﬂ_desc
->
°¨t
 = 
wl
->
p2p
->
nﬂ
.
desc
[0].start;

2034 
Àn
 +(
wifi_p2p_nﬂ_desc_t
);

2036 i‡(
buf_Àn
 <
Àn
 * 2) {

2037 
	`CFGP2P_ERR
(("ERROR: buf_len %d inÇotÉnough for"

2038 "ªtu∫ögÇﬂ i¿°rög f‹m©\n", 
buf_Àn
));

2042 
i
 = 0; i < 
Àn
; i++) {

2043 
	`¢¥ötf
(
buf
, 3, "%02x", 
_buf
[
i
]);

2044 
buf
 += 2;

2046 
buf
[
i
*2] = '\0';

2050 
	`CFGP2P_ERR
(("ERROR: get_noa inÇon-p2p mode\n"));

2053  
Àn
 * 2;

2054 
	}
}

2055 
s32


2056 
	$wl_cfgp2p_£t_p2p_ps
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
, * 
buf
, 
Àn
)

2058 
ps
, 
˘w
;

2059 
ªt
 = -1;

2060 
s32
 
Àgacy_ps
;

2062 
	`CFGP2P_DBG
((" Enter\n"));

2063 i‡(
wl
->
p2p
 && wl->p2p->
vif_¸óãd
) {

2064 
	`ssˇnf
(
buf
, "%10d %10d %10d", &
Àgacy_ps
, &
ps
, &
˘w
);

2065 
	`CFGP2P_DBG
((" E¡îÜegacy_p†%dÖ†%d ctw %d\n", 
Àgacy_ps
, 
ps
, 
˘w
));

2066 i‡(
˘w
 != -1) {

2067 
wl
->
p2p
->
›s
.
˘w
 = ctw;

2068 
ªt
 = 0;

2070 i‡(
ps
 != -1) {

2071 
wl
->
p2p
->
›s
.›†
ps
;

2072 
ªt
 = 
	`wldev_iov¨_£tbuf
(
	`wl_to_p2p_bss_ndev
(
wl
, 
P2PAPI_BSSCFG_CONNECTION
),

2073 "p2p_›s", &
wl
->
p2p
->
›s
, (wl->p2p->ops),

2074 
wl
->
io˘l_buf
, 
WLC_IOCTL_MAXLEN
, &wl->
io˘l_buf_sync
);

2075 i‡(
ªt
 < 0) {

2076 
	`CFGP2P_ERR
(("fw sëÖ2p_›†Áûed %d\n", 
ªt
));

2080 i‡((
Àgacy_ps
 !-1Ë&& (÷egacy_p†=
PM_MAX
Ë|| (Àgacy_p†=
PM_OFF
))) {

2081 #i‡!
	`deföed
(
SUPPORT_PM2_ONLY
)

2082 i‡(
Àgacy_ps
 =
PM_MAX
)

2083 
Àgacy_ps
 = 
PM_FAST
;

2086 
ªt
 = 
	`wldev_io˘l
(
	`wl_to_p2p_bss_ndev
(
wl
, 
P2PAPI_BSSCFG_CONNECTION
),

2087 
WLC_SET_PM
, &
Àgacy_ps
, ÷egacy_ps), 
åue
);

2088 i‡(
	`u∆ikñy
(
ªt
)) {

2089 
	`CFGP2P_ERR
(("îr‹ (%d)\n", 
ªt
));

2091 
	`wl_cfg80211_upd©e_powî_mode
(
ndev
);

2095 
	`CFGP2P_ERR
(("ilegal setting\n"));

2098 
	`CFGP2P_ERR
(("ERROR: set_p2p_ps inÇon-p2p mode\n"));

2099 
ªt
 = -1;

2101  
ªt
;

2102 
	}
}

2104 
u8
 *

2105 
	$wl_cfgp2p_ªåeive_p2∑ârib
(*
buf
, 
u8
 
ñemít_id
)

2107 
wifi_p2p_õ_t
 *
õ
 = 
NULL
;

2108 
u16
 
Àn
 = 0;

2109 
u8
 *
subñ
;

2110 
u8
 
subñt_id
;

2111 
u16
 
subñt_Àn
;

2113 i‡(!
buf
) {

2114 
	`WL_ERR
(("P2P IEÇotÖresent"));

2118 
õ
 = (
wifi_p2p_õ_t
*Ë
buf
;

2119 
Àn
 = 
õ
->len;

2124 
subñ
 = 
õ
->
subñts
;

2125 
Àn
 -= 4;

2127 
Àn
 >= 3) {

2129 
subñt_id
 = *
subñ
;

2130 
subñ
 += 1;

2131 
Àn
 -= 1;

2134 
subñt_Àn
 = *
subñ
++;

2135 
subñt_Àn
 |*
subñ
++ << 8;

2137 
Àn
 -= 2;

2138 
Àn
 -
subñt_Àn
;

2140 i‡(
subñt_id
 =
ñemít_id
) {

2144  
subñ
;

2148 
subñ
 +
subñt_Àn
;

2152  
NULL
;

2153 
	}
}

2155 
	#P2P_GROUP_CAPAB_GO_BIT
 0x01

	)

2156 
u8
 *

2157 
	$wl_cfgp2p_ªåeive_p2p_dev_addr
(
wl_bss_öfo_t
 *
bi
, 
u32
 
bi_Àngth
)

2159 
wifi_p2p_õ_t
 * 
p2p_õ
 = 
NULL
;

2160 
u8
 *
ˇ∑bûôy
 = 
NULL
;

2161 
boﬁ
 
p2p_go
 = 0;

2162 
u8
 *
±r
 = 
NULL
;

2164 i‡(!(
p2p_õ
 = 
	`wl_cfgp2p_föd_p2põ
(((
u8
 *Ë
bi
Ë+ bi->
õ_off£t
, bi->
õ_Àngth
))) {

2165 
	`WL_ERR
(("P2P IEÇot found"));

2166  
NULL
;

2169 i‡(!(
ˇ∑bûôy
 = 
	`wl_cfgp2p_ªåeive_p2∑ârib
(
p2p_õ
, 
P2P_SEID_P2P_INFO
))) {

2170 
	`WL_ERR
(("P2P CapabilityáttributeÇot found"));

2171  
NULL
;

2175 
p2p_go
 = 
ˇ∑bûôy
[1] & 
P2P_GROUP_CAPAB_GO_BIT
;

2176 i‡(!
p2p_go
) {

2177  
bi
->
BSSID
.
o˘ë
;

2181 i‡(!(
±r
 = 
	`wl_cfgp2p_ªåeive_p2∑ârib
(
p2p_õ
, 
P2P_SEID_DEV_INFO
))) {

2185 
±r
 = 
	`wl_cfgp2p_ªåeive_p2∑ârib
(
p2p_õ
, 
P2P_SEID_DEV_ID
);

2188 i‡(!
±r
)

2189 
	`WL_ERR
((" Both DEVICE_ID & DEVICE_INFOáttributeÇotÖresent in P2P IE "));

2191  
±r
;

2192 
	}
}

2194 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 24)

2196 
	$wl_cfgp2p_ëhtoﬁ_gë_drvöfo
(
√t_devi˚
 *
√t
, 
ëhtoﬁ_drvöfo
 *
öfo
)

2198 
	`¢¥ötf
(
öfo
->
drivî
, (info->driver), "p2p");

2199 
	`¢¥ötf
(
öfo
->
vîsi⁄
, (info->version), "%lu", ()(0));

2200 
	}
}

2202 
ëhtoﬁ_›s
 
	gcfgp2p_ëhtoﬁ_›s
 = {

2203 .
gë_drvöfo
 = 
wl_cfgp2p_ëhtoﬁ_gë_drvöfo


2207 
s32


2208 
	$wl_cfgp2p_ªgi°î_ndev
(
wl_¥iv
 *
wl
)

2210 
ªt
 = 0;

2211 
√t_devi˚
* 
√t
 = 
NULL
;

2212 
wúñess_dev
 *
wdev
 = 
NULL
;

2213 
uöt8
 
ãmp_addr
[
ETHER_ADDR_LEN
] = { 0x00, 0x90, 0x4c, 0x33, 0x22, 0x11 };

2215 i‡(
wl
->
p2p_√t
) {

2216 
	`CFGP2P_ERR
(("p2p_net definedálready.\n"));

2217  -
EINVAL
;

2221 i‡(!(
√t
 = 
	`Æloc_ëhîdev
((
wl_¥iv
 *)))) {

2222 
	`CFGP2P_ERR
(("%s: OOM -áŒoc_ëhîdev\n", 
__FUNCTION__
));

2223  -
ENODEV
;

2226 
wdev
 = 
	`kzÆloc
((*wdev), 
GFP_KERNEL
);

2227 i‡(
	`u∆ikñy
(!
wdev
)) {

2228 
	`WL_ERR
(("CouldÇotállocate wireless device\n"));

2229 
	`‰ì_√tdev
(
√t
);

2230  -
ENOMEM
;

2233 
	`°∫˝y
(
√t
->
«me
, "p2p%d", (net->name) - 1);

2234 
√t
->
«me
[
IFNAMSIZ
 - 1] = '\0';

2237 
	`mem˝y
((*)
	`√tdev_¥iv
(
√t
), &
wl
, (
wl_¥iv
 *));

2239 #i‡(
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2, 6, 31))

2240 
	`ASSERT
(!
√t
->
›í
);

2241 
√t
->
do_io˘l
 = 
wl_cfgp2p_do_io˘l
;

2242 
√t
->
h¨d_°¨t_xmô
 = 
wl_cfgp2p_°¨t_xmô
;

2243 
√t
->
›í
 = 
wl_cfgp2p_if_›í
;

2244 
√t
->
°›
 = 
wl_cfgp2p_if_°›
;

2246 
	`ASSERT
(!
√t
->
√tdev_›s
);

2247 
√t
->
√tdev_›s
 = &
wl_cfgp2p_if_›s
;

2251 
	`mem˝y
(
√t
->
dev_addr
, 
ãmp_addr
, 
ETHER_ADDR_LEN
);

2253 
wdev
->
wùhy
 = 
wl
->wdev->wiphy;

2255 
wdev
->
i·y≥
 = 
	`wl_mode_to_∆80211_i·y≥
(
WL_MODE_BSS
);

2257 
√t
->
õì80211_±r
 = 
wdev
;

2259 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 24)

2260 
√t
->
ëhtoﬁ_›s
 = &
cfgp2p_ëhtoﬁ_›s
;

2263 
	`SET_NETDEV_DEV
(
√t
, 
	`wùhy_dev
(
wdev
->
wùhy
));

2266 
wdev
->
√tdev
 = 
√t
;

2268 
ªt
 = 
	`ªgi°î_√tdev
(
√t
);

2269 i‡(
ªt
) {

2270 
	`CFGP2P_ERR
(("Ñegi°î_√tdevi˚ faûed (%d)\n", 
ªt
));

2271 
	`‰ì_√tdev
(
√t
);

2272 
	`k‰ì
(
wdev
);

2273  -
ENODEV
;

2279 
wl
->
p2p_wdev
 = 
wdev
;

2280 
wl
->
p2p_√t
 = 
√t
;

2282 
	`¥ötk
("%s: P2P I¡îÁ˚ Regi°îed\n", 
√t
->
«me
);

2284  
ªt
;

2285 
	}
}

2287 
s32


2288 
	$wl_cfgp2p_uƒegi°î_ndev
(
wl_¥iv
 *
wl
)

2291 i‡(!
wl
 || !wl->
p2p_√t
) {

2292 
	`CFGP2P_ERR
(("Invalid Ptr\n"));

2293  -
EINVAL
;

2296 
	`uƒegi°î_√tdev
(
wl
->
p2p_√t
);

2297 
	`‰ì_√tdev
(
wl
->
p2p_√t
);

2300 
	}
}

2301 
	$wl_cfgp2p_°¨t_xmô
(
sk_buff
 *
skb
, 
√t_devi˚
 *
ndev
)

2303 i‡(
skb
)

2305 
	`CFGP2P_DBG
(("(%s) isÇot used for data operations.DropingÅheÖacket.\n",

2306 
ndev
->
«me
));

2307 
	`dev_k‰ì_skb_™y
(
skb
);

2311 
	}
}

2313 
	$wl_cfgp2p_do_io˘l
(
√t_devi˚
 *
√t
, 
i‰eq
 *
i‰
, 
cmd
)

2315 
ªt
 = 0;

2316 
wl_¥iv
 *
wl
 = *(wl_¥iv **)
	`√tdev_¥iv
(
√t
);

2317 
√t_devi˚
 *
ndev
 = 
	`wl_to_¥mry_ndev
(
wl
);

2323 i‡(
cmd
 =
SIOCDEVPRIVATE
+1) {

2324 
ªt
 = 
	`wl_™droid_¥iv_cmd
(
ndev
, 
i‰
, 
cmd
);

2327 
	`CFGP2P_ERR
(("%s: IOCTLÑeq 0x%x onÖ2p0 I/F. Ignoring. \n",

2328 
__FUNCTION__
, 
cmd
));

2332  
ªt
;

2333 
	}
}

2335 
	$wl_cfgp2p_if_›í
(
√t_devi˚
 *
√t
)

2337 
wl_¥iv
 *
wlcfg_drv_¥iv
;

2338 
wúñess_dev
 *
wdev
 = 
√t
->
õì80211_±r
;

2339 
wl_¥iv
 *
wl
 = 
NULL
;

2340 
wl
 = 
wlcfg_drv_¥iv
;

2341 i‡(!
wdev
 || !
wl
 || !wl->
p2p
)

2342  -
EINVAL
;

2343 
	`WL_TRACE
(("Enter\n"));

2350 
wdev
->
wùhy
->
öãrÁ˚_modes
 |(
	`BIT
(
NL80211_IFTYPE_P2P_CLIENT
)

2351 | 
	`BIT
(
NL80211_IFTYPE_P2P_GO
));

2352 
	`wl_cfg80211_do_drivî_öô
(
√t
);

2355 
	}
}

2357 
	$wl_cfgp2p_if_°›
(
√t_devi˚
 *
√t
)

2359 
wl_¥iv
 *
wlcfg_drv_¥iv
;

2360 
wl_¥iv
 *
wl
 = 
NULL
;

2361 
Êags
;

2362 
wúñess_dev
 *
wdev
 = 
√t
->
õì80211_±r
;

2363 
˛ór_Êag
 = 0;

2364 i‡(!
wdev
)

2365  -
EINVAL
;

2367 
	`WL_TRACE
(("Enter\n"));

2368 
wl
 = 
wlcfg_drv_¥iv
;

2369 i‡(!
wl
)

2370  -
EINVAL
;

2371 
	`•ö_lock_úqßve
(&
wl
->
cfgdrv_lock
, 
Êags
);

2372 i‡(
wl
->
sˇn_ªque°
 && wl->sˇn_ªque°->
dev
 =
√t
) {

2373 
	`cfg80211_sˇn_d⁄e
(
wl
->
sˇn_ªque°
, 
åue
);

2374 
wl
->
sˇn_ªque°
 = 
NULL
;

2375 
˛ór_Êag
 = 1;

2377 
	`•ö_u∆ock_úqª°‹e
(&
wl
->
cfgdrv_lock
, 
Êags
);

2378 i‡(
˛ór_Êag
)

2379 
	`wl_˛r_drv_°©us
(
wl
, 
SCANNING
, 
√t
);

2380 
wdev
->
wùhy
->
öãrÁ˚_modes
 = (wdev->wiphy->interface_modes)

2381 & (~(
	`BIT
(
NL80211_IFTYPE_P2P_CLIENT
)|

2382 
	`BIT
(
NL80211_IFTYPE_P2P_GO
)));

2384 
	}
}

2386 
boﬁ
 
	$wl_cfgp2p_is_if›s
(c⁄° 
√t_devi˚_›s
 *
if_›s
)

2388  (
if_›s
 =&
wl_cfgp2p_if_›s
);

2389 
	}
}

	@wl_cfgp2p.h

26 #i‚de‡
_wl_cfgp2p_h_


27 
	#_wl_cfgp2p_h_


	)

28 
	~<¥Ÿo/802.11.h
>

29 
	~<¥Ÿo/p2p.h
>

31 
	gwl_¥iv
;

32 
u32
 
wl_dbg_Àvñ
;

34 
wifi_p2p_õ
 
	twifi_wfd_õ_t
;

40 
	mP2PAPI_BSSCFG_PRIMARY
,

41 
	mP2PAPI_BSSCFG_DEVICE
,

42 
	mP2PAPI_BSSCFG_CONNECTION
,

43 
	mP2PAPI_BSSCFG_MAX


44 } 
	tp2p_bsscfg_ty≥_t
;

47 
	#VNDR_IES_MAX_BUF_LEN
 1400

	)

49 
	#VNDR_IES_BUF_LEN
 512

	)

52 
	sp2p_ßved_õ
 {

53 
u8
 
	mp2p_¥obe_ªq_õ
[
VNDR_IES_BUF_LEN
];

54 
u8
 
	mp2p_¥obe_ªs_õ
[
VNDR_IES_MAX_BUF_LEN
];

55 
u8
 
	mp2p_assoc_ªq_õ
[
VNDR_IES_BUF_LEN
];

56 
u8
 
	mp2p_assoc_ªs_õ
[
VNDR_IES_BUF_LEN
];

57 
u8
 
	mp2p_bóc⁄_õ
[
VNDR_IES_MAX_BUF_LEN
];

58 
u32
 
	mp2p_¥obe_ªq_õ_Àn
;

59 
u32
 
	mp2p_¥obe_ªs_õ_Àn
;

60 
u32
 
	mp2p_assoc_ªq_õ_Àn
;

61 
u32
 
	mp2p_assoc_ªs_õ_Àn
;

62 
u32
 
	mp2p_bóc⁄_õ_Àn
;

65 
	sp2p_bss
 {

66 
u32
 
	mbssidx
;

67 
√t_devi˚
 *
	mdev
;

68 
p2p_ßved_õ
 
	mßved_õ
;

69 *
	m¥iv©e_d©a
;

72 
	sp2p_öfo
 {

73 
boﬁ
 
	m⁄
;

74 
boﬁ
 
	msˇn
;

75 
boﬁ
 
	mvif_¸óãd
;

76 
s8
 
	mvú_i‚ame
[
IFNAMSIZ
];

77 
	m°©us
;

78 
ëhî_addr
 
	mdev_addr
;

79 
ëhî_addr
 
	möt_addr
;

80 
p2p_bss
 
	mbss_idx
[
P2PAPI_BSSCFG_MAX
];

81 
timî_li°
 
	mli°í_timî
;

82 
wl_p2p_sched_t
 
	mnﬂ
;

83 
wl_p2p_›s_t
 
	m›s
;

84 
wlc_ssid_t
 
	mssid
;

87 
	#MAX_VNDR_IE_NUMBER
 5

	)

89 
	s∑r£d_vndr_õ_öfo
 {

90 *
	mõ_±r
;

91 
u32
 
	mõ_Àn
;

92 
vndr_õ_t
 
	mvndrõ
;

95 
	s∑r£d_vndr_õs
 {

96 
u32
 
	mcou¡
;

97 
∑r£d_vndr_õ_öfo
 
	mõ_öfo
[
MAX_VNDR_IE_NUMBER
];

101 
	ewl_cfgp2p_°©us
 {

102 
	mWLP2P_STATUS_DISCOVERY_ON
 = 0,

103 
	mWLP2P_STATUS_SEARCH_ENABLED
,

104 
	mWLP2P_STATUS_IF_ADD
,

105 
	mWLP2P_STATUS_IF_DEL
,

106 
	mWLP2P_STATUS_IF_DELETING
,

107 
	mWLP2P_STATUS_IF_CHANGING
,

108 
	mWLP2P_STATUS_IF_CHANGED
,

109 
	mWLP2P_STATUS_LISTEN_EXPIRED
,

110 
	mWLP2P_STATUS_ACTION_TX_COMPLETED
,

111 
	mWLP2P_STATUS_ACTION_TX_NOACK
,

112 
	mWLP2P_STATUS_SCANNING
,

113 
	mWLP2P_STATUS_GO_NEG_PHASE
,

114 
	mWLP2P_STATUS_DISC_IN_PROGRESS


118 
	#wl_to_p2p_bss_ndev
(
wl
, 
ty≥
Ë((wl)->
p2p
->
bss_idx
[ty≥].
dev
)

	)

119 
	#wl_to_p2p_bss_bssidx
(
wl
, 
ty≥
Ë((wl)->
p2p
->
bss_idx
[ty≥].
bssidx
)

	)

120 
	#wl_to_p2p_bss_ßved_õ
(
wl
, 
ty≥
Ë((wl)->
p2p
->
bss_idx
[ty≥].
ßved_õ
)

	)

121 
	#wl_to_p2p_bss_¥iv©e
(
wl
, 
ty≥
Ë((wl)->
p2p
->
bss_idx
[ty≥].
¥iv©e_d©a
)

	)

122 
	#wl_to_p2p_bss
(
wl
, 
ty≥
Ë((wl)->
p2p
->
bss_idx
[ty≥])

	)

123 
	#wl_gë_p2p_°©us
(
wl
, 
°©
Ë((!(wl)->
p2p_suµ‹ãd
Ë? 0 : 
	`ã°_bô
(
WLP2P_STATUS_
 ## stat, \

124 &(
wl
)->
p2p
->
°©us
))

	)

125 
	#wl_£t_p2p_°©us
(
wl
, 
°©
Ë((!(wl)->
p2p_suµ‹ãd
Ë? 0 : 
	`£t_bô
(
WLP2P_STATUS_
 ## stat, \

126 &(
wl
)->
p2p
->
°©us
))

	)

127 
	#wl_˛r_p2p_°©us
(
wl
, 
°©
Ë((!(wl)->
p2p_suµ‹ãd
Ë? 0 : 
	`˛ór_bô
(
WLP2P_STATUS_
 ## stat, \

128 &(
wl
)->
p2p
->
°©us
))

	)

129 
	#wl_chg_p2p_°©us
(
wl
, 
°©
Ë((!(wl)->
p2p_suµ‹ãd
Ë? 0:
	`ch™ge_bô
(
WLP2P_STATUS_
 ## stat, \

130 &(
wl
)->
p2p
->
°©us
))

	)

131 
	#p2p_⁄
(
wl
Ë((wl)->
p2p
->
⁄
)

	)

132 
	#p2p_sˇn
(
wl
Ë((wl)->
p2p
->
sˇn
)

	)

133 
	#p2p_is_⁄
(
wl
Ë((wl)->
p2p
 && (wl)->p2p->
⁄
)

	)

136 
	#WLC_IOCTL_MAXLEN
 8192

	)

138 
	#CFGP2P_ERROR_TEXT
 "CFGP2P-ERRORË"

	)

141 
	#CFGP2P_ERR
(
¨gs
) \

143 i‡(
wl_dbg_Àvñ
 & 
WL_DBG_ERR
) { \

144 
	`¥ötk
(
KERN_INFO
 
CFGP2P_ERROR_TEXT
 "%†: ", 
__func__
); \

145 
¥ötk
 
¨gs
; \

147 } 0)

	)

148 
	#CFGP2P_INFO
(
¨gs
) \

150 i‡(
wl_dbg_Àvñ
 & 
WL_DBG_INFO
) { \

151 
	`¥ötk
(
KERN_INFO
 "CFGP2P-INFOË%†: ", 
__func__
); \

152 
¥ötk
 
¨gs
; \

154 } 0)

	)

155 
	#CFGP2P_DBG
(
¨gs
) \

157 i‡(
wl_dbg_Àvñ
 & 
WL_DBG_DBG
) { \

158 
	`¥ötk
(
KERN_DEBUG
 "CFGP2P-DEBUGË%†:", 
__func__
); \

159 
¥ötk
 
¨gs
; \

161 } 0)

	)

163 
	#CFGP2P_ACTION
(
¨gs
) \

165 i‡(
wl_dbg_Àvñ
 & 
WL_DBG_P2P_ACTION
) { \

166 
	`¥ötk
(
KERN_DEBUG
 "CFGP2P-ACTIONË%†:", 
__func__
); \

167 
¥ötk
 
¨gs
; \

169 } 0)

	)

170 
	#INIT_TIMER
(
timî
, 
func
, 
duøti⁄
, 
exåa_dñay
) \

172 
	`öô_timî
(
timî
); \

173 
timî
->
fun˘i⁄
 = 
func
; \

174 
timî
->
expúes
 = 
jiffõs
 + 
	`m£cs_to_jiffõs
(
duøti⁄
 + 
exåa_dñay
); \

175 
timî
->
d©a
 = (Ë
wl
; \

176 
	`add_timî
(
timî
); \

177 } 0);

	)

179 
wl_cfgp2p_li°í_expúed
(
d©a
);

180 
boﬁ


181 
wl_cfgp2p_is_pub_a˘i⁄
(*
‰ame
, 
u32
 
‰ame_Àn
);

182 
boﬁ


183 
wl_cfgp2p_is_p2p_a˘i⁄
(*
‰ame
, 
u32
 
‰ame_Àn
);

184 
boﬁ


185 
wl_cfgp2p_is_gas_a˘i⁄
(*
‰ame
, 
u32
 
‰ame_Àn
);

187 
wl_cfgp2p_¥öt_a˘‰ame
(
boﬁ
 
tx
, *
‰ame
, 
u32
 
‰ame_Àn
);

188 
s32


189 
wl_cfgp2p_öô_¥iv
(
wl_¥iv
 *
wl
);

191 
wl_cfgp2p_deöô_¥iv
(
wl_¥iv
 *
wl
);

192 
s32


193 
wl_cfgp2p_£t_fúm_p2p
(
wl_¥iv
 *
wl
);

194 
s32


195 
wl_cfgp2p_£t_p2p_mode
(
wl_¥iv
 *
wl
, 
u8
 
mode
,

196 
u32
 
ch™√l
, 
u16
 
li°í_ms
, 
bssidx
);

197 
s32


198 
wl_cfgp2p_iÁdd
(
wl_¥iv
 *
wl
, 
ëhî_addr
 *
mac
, 
u8
 
if_ty≥
,

199 
ch™•ec_t
 
ch•ec
);

200 
s32


201 
wl_cfgp2p_ifdißbÀ
(
wl_¥iv
 *
wl
, 
ëhî_addr
 *
mac
);

202 
s32


203 
wl_cfgp2p_ifdñ
(
wl_¥iv
 *
wl
, 
ëhî_addr
 *
mac
);

204 
s32


205 
wl_cfgp2p_ifch™ge
(
wl_¥iv
 *
wl
, 
ëhî_addr
 *
mac
, 
u8
 
if_ty≥
, 
ch™•ec_t
 
ch•ec
);

207 
s32


208 
wl_cfgp2p_ifidx
(
wl_¥iv
 *
wl
, 
ëhî_addr
 *
mac
, 
s32
 *
ödex
);

210 
s32


211 
wl_cfgp2p_öô_discovîy
(
wl_¥iv
 *
wl
);

212 
s32


213 
wl_cfgp2p_íabÀ_discovîy
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
dev
, c⁄° 
u8
 *
õ
, 
u32
 
õ_Àn
);

214 
s32


215 
wl_cfgp2p_dißbÀ_discovîy
(
wl_¥iv
 *
wl
);

216 
s32


217 
wl_cfgp2p_esˇn
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
dev
, 
u16
 
a˘ive
, 
u32
 
num_ch™s
,

218 
u16
 *
ch™√ls
,

219 
s32
 
£¨ch_°©e
, 
u16
 
a˘i⁄
, 
u32
 
bssidx
);

221 
s32


222 
wl_cfgp2p_a˘_‰m_£¨ch
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
,

223 
s32
 
bssidx
, s32 
ch™√l
);

225 
w∑_õ_fixed_t
 *

226 
wl_cfgp2p_föd_w∑õ
(
u8
 *
∑r£
, 
u32
 
Àn
);

228 
w∑_õ_fixed_t
 *

229 
wl_cfgp2p_föd_wpsõ
(
u8
 *
∑r£
, 
u32
 
Àn
);

231 
wifi_p2p_õ_t
 *

232 
wl_cfgp2p_föd_p2põ
(
u8
 *
∑r£
, 
u32
 
Àn
);

234 
wifi_wfd_õ_t
 *

235 
wl_cfgp2p_föd_wfdõ
(
u8
 *
∑r£
, 
u32
 
Àn
);

236 
s32


237 
wl_cfgp2p_£t_m™agemít_õ
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
, 
s32
 
bssidx
,

238 
s32
 
pktÊag
, c⁄° 
u8
 *
vndr_õ
, 
u32
 
vndr_õ_Àn
);

239 
s32


240 
wl_cfgp2p_˛ór_m™agemít_õ
(
wl_¥iv
 *
wl
, 
s32
 
bssidx
);

242 
s32


243 
wl_cfgp2p_föd_idx
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
);

244 
√t_devi˚
 *

245 
wl_cfgp2p_föd_ndev
(
wl_¥iv
 *
wl
, 
s32
 
bssidx
);

248 
s32


249 
wl_cfgp2p_li°í_com∂ëe
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
,

250 c⁄° 
wl_evít_msg_t
 *
e
, *
d©a
);

251 
s32


252 
wl_cfgp2p_discovî_li°í
(
wl_¥iv
 *
wl
, 
s32
 
ch™√l
, 
u32
 
duøti⁄_ms
);

254 
s32


255 
wl_cfgp2p_discovî_íabÀ_£¨ch
(
wl_¥iv
 *
wl
, 
u8
 
íabÀ
);

257 
s32


258 
wl_cfgp2p_a˘i⁄_tx_com∂ëe
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
,

259 c⁄° 
wl_evít_msg_t
 *
e
, *
d©a
);

260 
s32


261 
wl_cfgp2p_tx_a˘i⁄_‰ame
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
dev
,

262 
wl_af_∑øms_t
 *
af_∑øms
, 
s32
 
bssidx
);

265 
wl_cfgp2p_gíî©e_bss_mac
(
ëhî_addr
 *
¥im¨y_addr
, ëhî_add∏*
out_dev_addr
,

266 
ëhî_addr
 *
out_öt_addr
);

269 
wl_cfg80211_ch™ge_iÁddr
(
u8
* 
buf
, 
ëhî_addr
 *
p2p_öt_addr
, u8 
ñemít_id
);

270 
boﬁ


271 
wl_cfgp2p_bss_isup
(
√t_devi˚
 *
ndev
, 
bsscfg_idx
);

273 
s32


274 
wl_cfgp2p_bss
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
, 
s32
 
bsscfg_idx
, s32 
up
);

277 
s32


278 
wl_cfgp2p_suµ‹ãd
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
);

280 
s32


281 
wl_cfgp2p_down
(
wl_¥iv
 *
wl
);

283 
s32


284 
wl_cfgp2p_£t_p2p_nﬂ
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
, * 
buf
, 
Àn
);

286 
s32


287 
wl_cfgp2p_gë_p2p_nﬂ
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
, * 
buf
, 
Àn
);

289 
s32


290 
wl_cfgp2p_£t_p2p_ps
(
wl_¥iv
 *
wl
, 
√t_devi˚
 *
ndev
, * 
buf
, 
Àn
);

292 
u8
 *

293 
wl_cfgp2p_ªåeive_p2∑ârib
(*
buf
, 
u8
 
ñemít_id
);

295 
u8
 *

296 
wl_cfgp2p_ªåeive_p2p_dev_addr
(
wl_bss_öfo_t
 *
bi
, 
u32
 
bi_Àngth
);

298 
s32


299 
wl_cfgp2p_ªgi°î_ndev
(
wl_¥iv
 *
wl
);

301 
s32


302 
wl_cfgp2p_uƒegi°î_ndev
(
wl_¥iv
 *
wl
);

304 
boﬁ


305 
wl_cfgp2p_is_if›s
(c⁄° 
√t_devi˚_›s
 *
if_›s
);

308 
	#SOCIAL_CHAN_1
 1

	)

309 
	#SOCIAL_CHAN_2
 6

	)

310 
	#SOCIAL_CHAN_3
 11

	)

311 
	#IS_P2P_SOCIAL_CHANNEL
(
ch™√l
Ë((ch™√»=
SOCIAL_CHAN_1
) || \

312 (
ch™√l
 =
SOCIAL_CHAN_2
) || \

313 (
ch™√l
 =
SOCIAL_CHAN_3
))

	)

314 
	#SOCIAL_CHAN_CNT
 3

	)

315 
	#AF_PEER_SEARCH_CNT
 2

	)

316 
	#WL_P2P_WILDCARD_SSID
 "DIRECT-"

	)

317 
	#WL_P2P_WILDCARD_SSID_LEN
 7

	)

318 
	#WL_P2P_INTERFACE_PREFIX
 "p2p"

	)

319 
	#WL_P2P_TEMP_CHAN
 11

	)

324 
	#IS_PROV_DISC_WITHOUT_GROUP_ID
(
p2p_õ
, 
Àn
) \

325 (
	`wl_cfgp2p_ªåeive_p2∑ârib
(
p2p_õ
, 
P2P_SEID_GROUP_ID
Ë=
NULL
)

	)

327 
	#IS_GAS_REQ
(
‰ame
, 
Àn
Ë(
	`wl_cfgp2p_is_gas_a˘i⁄
(frame,Üen) && \

328 ((
‰ame
->
a˘i⁄
 =
P2PSD_ACTION_ID_GAS_IREQ
) || \

329 (
‰ame
->
a˘i⁄
 =
P2PSD_ACTION_ID_GAS_CREQ
)))

	)

330 
	#IS_P2P_PUB_ACT_REQ
(
‰ame
, 
p2p_õ
, 
Àn
) \

331 (
	`wl_cfgp2p_is_pub_a˘i⁄
(
‰ame
, 
Àn
) && \

332 ((
‰ame
->
subty≥
 =
P2P_PAF_GON_REQ
) || \

333 (
‰ame
->
subty≥
 =
P2P_PAF_INVITE_REQ
) || \

334 ((
‰ame
->
subty≥
 =
P2P_PAF_PROVDIS_REQ
) && \

335 
	`IS_PROV_DISC_WITHOUT_GROUP_ID
(
p2p_õ
, 
Àn
))))

	)

336 
	#IS_P2P_PUB_ACT_RSP_SUBTYPE
(
subty≥
Ë((subty≥ =
P2P_PAF_GON_RSP
) || \

337 ((
subty≥
 =
P2P_PAF_GON_CONF
) || \

338 (
subty≥
 =
P2P_PAF_INVITE_RSP
) || \

339 (
subty≥
 =
P2P_PAF_PROVDIS_RSP
)))

	)

340 
	#IS_P2P_SOCIAL
(
ch
Ë((ch =
SOCIAL_CHAN_1
Ë|| (ch =
SOCIAL_CHAN_2
Ë|| (ch =
SOCIAL_CHAN_3
))

	)

341 
	#IS_P2P_SSID
(
ssid
, 
Àn
Ë(!
	`memcmp
(ssid, 
WL_P2P_WILDCARD_SSID
, 
WL_P2P_WILDCARD_SSID_LEN
) && \

342 (
Àn
 =
WL_P2P_WILDCARD_SSID_LEN
))

	)

	@wl_dbg.h

29 #i‚de‡
_wl_dbg_h_


30 
	#_wl_dbg_h_


	)

33 
uöt32
 
wl_msg_Àvñ
;

34 
uöt32
 
wl_msg_Àvñ2
;

36 
	#WL_TIMESTAMP
()

	)

38 #i‡0 && (
VERSION_MAJOR
 > 9)

39 
	~<IOKô/≠∂e80211/IO8Log.h
>

40 
	#WL_PRINT
(
¨gs
Ëdÿ{ 
¥ötf
árgs; 
IO8Log
árgs; } 0)

	)

42 
	#WL_PRINT
(
¨gs
Ëdÿ{ 
	`WL_TIMESTAMP
(); 
¥ötf
árgs; } 0)

	)

47 
	#WL_NONE
(
¨gs
)

	)

49 
	#WL_ERROR
(
¨gs
)

	)

50 
	#WL_TRACE
(
¨gs
)

	)

51 
	#WL_APSTA_UPDN
(
¨gs
)

	)

52 
	#WL_APSTA_RX
(
¨gs
)

	)

53 #ifde‡
WLMSG_WSEC


54 
	#WL_WSEC
(
¨gs
Ë
	`WL_PRINT
◊rgs)

	)

55 
	#WL_WSEC_DUMP
(
¨gs
Ë
	`WL_PRINT
◊rgs)

	)

57 
	#WL_WSEC
(
¨gs
)

	)

58 
	#WL_WSEC_DUMP
(
¨gs
)

	)

61 
uöt32
 
wl_msg_Àvñ
;

62 
uöt32
 
wl_msg_Àvñ2
;

	@wl_iw.c

27 #i‡
deföed
(
USE_IW
)

28 
	#LINUX_PORT


	)

30 
	~<ty≥defs.h
>

31 
	~<löuxvî.h
>

32 
	~<o¶.h
>

34 
	~<bcmutûs.h
>

35 
	~<bcmídün.h
>

36 
	~<¥Ÿo/ëhî√t.h
>

38 
	~<löux/if_¨p.h
>

39 
	~<asm/uac˚ss.h
>

42 c⁄° 
	tsi_pub
 
	tsi_t
;

43 
	~<wlio˘l.h
>

46 
	~<wl_dbg.h
>

47 
	~<wl_iw.h
>

50 #i‡(
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 27))

51 
	~<löux/π√éök.h
>

53 #i‡
deföed
(
SOFTAP
)

54 
√t_devi˚
 *
	g≠_√t_dev
 = 
NULL
;

55 
tsk_˘l_t
 
	g≠_ëh_˘l
;

58 
boﬁ
 
wl_iw_c⁄n_°©us_°r
(
uöt32
 
evít_ty≥
, uöt32 
°©us
,

59 
uöt32
 
ªas⁄
, * 
°rögBuf
, 
uöt
 
buÊí
);

61 
uöt
 
	gwl_msg_Àvñ
 = 
WL_ERROR_VAL
;

63 
	#MAX_WLIW_IOCTL_LEN
 1024

	)

66 
	#htod32
(
i
Ë
	)
i

67 
	#htod16
(
i
Ë
	)
i

68 
	#dtoh32
(
i
Ë
	)
i

69 
	#dtoh16
(
i
Ë
	)
i

70 
	#htodch™•ec
(
i
Ë
	)
i

71 
	#dtohch™•ec
(
i
Ë
	)
i

73 
iw_°©i°ics
 *
dhd_gë_wúñess_°©s
(
√t_devi˚
 *
dev
);

74 
dhd_waô_≥nd8021x
(
√t_devi˚
 *
dev
);

76 #i‡
WIRELESS_EXT
 < 19

77 
	#IW_IOCTL_IDX
(
cmd
Ë((cmdË- 
SIOCIWFIRST
)

	)

78 
	#IW_EVENT_IDX
(
cmd
Ë((cmdË- 
IWEVFIRST
)

	)

82 #i‡(
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 0))

83 
	#DAEMONIZE
(
a
Ë
	`d´m⁄ize
(a); \

84 
	`Ælow_sig«l
(
SIGKILL
); \

85 
	`Ælow_sig«l
(
SIGTERM
);

	)

87 
	#RAISE_RX_SOFTIRQ
() \

88 
	`˝u_øi£_so·úq
(
	`smp_¥o˚ss‹_id
(), 
NET_RX_SOFTIRQ
)

	)

89 
	#DAEMONIZE
(
a
Ë
	`d´m⁄ize
(); \

90 dÿ{ i‡(
a
) \

91 
	`°∫˝y
(
cuºít
->
comm
, 
a
, 
	`MIN
((cuºít->comm), (
	`°æí
(a) + 1))); \

92 } 0);

	)

95 
	#ISCAN_STATE_IDLE
 0

	)

96 
	#ISCAN_STATE_SCANING
 1

	)

99 
	#WLC_IW_ISCAN_MAXLEN
 2048

	)

100 
	sisˇn_buf
 {

101 
isˇn_buf
 * 
	m√xt
;

102 
	misˇn_buf
[
WLC_IW_ISCAN_MAXLEN
];

103 } 
	tisˇn_buf_t
;

105 
	sisˇn_öfo
 {

106 
√t_devi˚
 *
	mdev
;

107 
timî_li°
 
	mtimî
;

108 
uöt32
 
	mtimî_ms
;

109 
uöt32
 
	mtimî_⁄
;

110 
	misˇn_°©e
;

111 
isˇn_buf_t
 * 
	mli°_hdr
;

112 
isˇn_buf_t
 * 
	mli°_cur
;

115 
	msysioc_pid
;

116 
£m≠h‹e
 
	msysioc_£m
;

117 
com∂ëi⁄
 
	msysioc_exôed
;

120 
	mio˘lbuf
[
WLC_IOCTL_SMLEN
];

121 } 
	tisˇn_öfo_t
;

122 
isˇn_öfo_t
 *
	gg_isˇn
 = 
NULL
;

123 
wl_iw_timîfunc
(
ul⁄g
 
d©a
);

124 
wl_iw_£t_evít_mask
(
√t_devi˚
 *
dev
);

125 
wl_iw_isˇn
(
isˇn_öfo_t
 *
isˇn
, 
wlc_ssid_t
 *
ssid
, 
uöt16
 
a˘i⁄
);

128 
	s¥iv_lök
 {

129 
wl_iw_t
 *
	mwliw
;

130 } 
	t¥iv_lök_t
;

133 #i‡(
LINUX_VERSION_CODE
 < 
KERNEL_VERSION
(2, 6, 24))

134 
	#WL_DEV_LINK
(
dev
Ë(
¥iv_lök_t
*)(dev->
¥iv
)

	)

136 
	#WL_DEV_LINK
(
dev
Ë(
¥iv_lök_t
*)
	`√tdev_¥iv
(dev)

	)

140 
	#IW_DEV_IF
(
dev
Ë((
wl_iw_t
*)(
	`WL_DEV_LINK
(dev))->
wliw
)

	)

142 
	$sw≠_key_‰om_BE
(

143 
wl_w£c_key_t
 *
key


146 
key
->
ödex
 = 
	`htod32
(key->index);

147 
key
->
Àn
 = 
	`htod32
(key->len);

148 
key
->
Ægo
 = 
	`htod32
(key->algo);

149 
key
->
Êags
 = 
	`htod32
(key->flags);

150 
key
->
rxiv
.
hi
 = 
	`htod32
(key->rxiv.hi);

151 
key
->
rxiv
.
lo
 = 
	`htod16
(key->rxiv.lo);

152 
key
->
iv_öôülized
 = 
	`htod32
(key->iv_initialized);

153 
	}
}

155 
	$sw≠_key_to_BE
(

156 
wl_w£c_key_t
 *
key


159 
key
->
ödex
 = 
	`dtoh32
(key->index);

160 
key
->
Àn
 = 
	`dtoh32
(key->len);

161 
key
->
Ægo
 = 
	`dtoh32
(key->algo);

162 
key
->
Êags
 = 
	`dtoh32
(key->flags);

163 
key
->
rxiv
.
hi
 = 
	`dtoh32
(key->rxiv.hi);

164 
key
->
rxiv
.
lo
 = 
	`dtoh16
(key->rxiv.lo);

165 
key
->
iv_öôülized
 = 
	`dtoh32
(key->iv_initialized);

166 
	}
}

169 
	$dev_wlc_io˘l
(

170 
√t_devi˚
 *
dev
,

171 
cmd
,

172 *
¨g
,

173 
Àn


176 
i‰eq
 
i‰
;

177 
wl_io˘l_t
 
ioc
;

178 
mm_£gmít_t
 
fs
;

179 
ªt
;

181 
	`mem£t
(&
ioc
, 0, (ioc));

182 
ioc
.
cmd
 = cmd;

183 
ioc
.
buf
 = 
¨g
;

184 
ioc
.
Àn
 =Üen;

186 
	`°r˝y
(
i‰
.
i‰_«me
, 
dev
->
«me
);

187 
i‰
.
i‰_d©a
 = (
ˇddr_t
Ë&
ioc
;

189 #i‚de‡
LINUX_HYBRID


193 
	`dev_›í
(
dev
);

196 
fs
 = 
	`gë_fs
();

197 
	`£t_fs
(
	`gë_ds
());

198 #i‡
	`deföed
(
WL_USE_NETDEV_OPS
)

199 
ªt
 = 
dev
->
√tdev_›s
->
	`ndo_do_io˘l
(dev, &
i‰
, 
SIOCDEVPRIVATE
);

201 
ªt
 = 
dev
->
	`do_io˘l
(dev, &
i‰
, 
SIOCDEVPRIVATE
);

203 
	`£t_fs
(
fs
);

205  
ªt
;

206 
	}
}

214 
	$dev_wlc_ötv¨_£t
(

215 
√t_devi˚
 *
dev
,

216 *
«me
,

217 
vÆ
)

219 
buf
[
WLC_IOCTL_SMLEN
];

220 
uöt
 
Àn
;

222 
vÆ
 = 
	`htod32
(val);

223 
Àn
 = 
	`bcm_mkiov¨
(
«me
, (*)(&
vÆ
), (vÆ), 
buf
, (buf));

224 
	`ASSERT
(
Àn
);

226  (
	`dev_wlc_io˘l
(
dev
, 
WLC_SET_VAR
, 
buf
, 
Àn
));

227 
	}
}

230 
	$dev_iw_iov¨_£tbuf
(

231 
√t_devi˚
 *
dev
,

232 *
iov¨
,

233 *
∑øm
,

234 
∑ømÀn
,

235 *
buÂå
,

236 
buÊí
)

238 
iﬁí
;

240 
iﬁí
 = 
	`bcm_mkiov¨
(
iov¨
, 
∑øm
, 
∑ømÀn
, 
buÂå
, 
buÊí
);

241 
	`ASSERT
(
iﬁí
);

242 
	`BCM_REFERENCE
(
iﬁí
);

244  (
	`dev_wlc_io˘l
(
dev
, 
WLC_SET_VAR
, 
buÂå
, 
iﬁí
));

245 
	}
}

248 
	$dev_iw_iov¨_gëbuf
(

249 
√t_devi˚
 *
dev
,

250 *
iov¨
,

251 *
∑øm
,

252 
∑ømÀn
,

253 *
buÂå
,

254 
buÊí
)

256 
iﬁí
;

258 
iﬁí
 = 
	`bcm_mkiov¨
(
iov¨
, 
∑øm
, 
∑ømÀn
, 
buÂå
, 
buÊí
);

259 
	`ASSERT
(
iﬁí
);

260 
	`BCM_REFERENCE
(
iﬁí
);

262  (
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_VAR
, 
buÂå
, 
buÊí
));

263 
	}
}

265 #i‡
WIRELESS_EXT
 > 17

267 
	$dev_wlc_bufv¨_£t
(

268 
√t_devi˚
 *
dev
,

269 *
«me
,

270 *
buf
, 
Àn
)

272 *
io˘lbuf
;

273 
uöt
 
buÊí
;

274 
îr‹
;

276 
io˘lbuf
 = 
	`kmÆloc
(
MAX_WLIW_IOCTL_LEN
, 
GFP_KERNEL
);

277 i‡(!
io˘lbuf
)

278  -
ENOMEM
;

280 
buÊí
 = 
	`bcm_mkiov¨
(
«me
, 
buf
, 
Àn
, 
io˘lbuf
, 
MAX_WLIW_IOCTL_LEN
);

281 
	`ASSERT
(
buÊí
);

282 
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_SET_VAR
, 
io˘lbuf
, 
buÊí
);

284 
	`k‰ì
(
io˘lbuf
);

285  
îr‹
;

286 
	}
}

295 
	$dev_wlc_bufv¨_gë
(

296 
√t_devi˚
 *
dev
,

297 *
«me
,

298 *
buf
, 
buÊí
)

300 *
io˘lbuf
;

301 
îr‹
;

303 
uöt
 
Àn
;

305 
io˘lbuf
 = 
	`kmÆloc
(
MAX_WLIW_IOCTL_LEN
, 
GFP_KERNEL
);

306 i‡(!
io˘lbuf
)

307  -
ENOMEM
;

308 
Àn
 = 
	`bcm_mkiov¨
(
«me
, 
NULL
, 0, 
io˘lbuf
, 
MAX_WLIW_IOCTL_LEN
);

309 
	`ASSERT
(
Àn
);

310 
	`BCM_REFERENCE
(
Àn
);

311 
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_VAR
, (*)
io˘lbuf
, 
MAX_WLIW_IOCTL_LEN
);

312 i‡(!
îr‹
)

313 
	`bc›y
(
io˘lbuf
, 
buf
, 
buÊí
);

315 
	`k‰ì
(
io˘lbuf
);

316  (
îr‹
);

317 
	}
}

325 
	$dev_wlc_ötv¨_gë
(

326 
√t_devi˚
 *
dev
,

327 *
«me
,

328 *
ªtvÆ
)

331 
buf
[
WLC_IOCTL_SMLEN
];

332 
vÆ
;

333 } 
v¨
;

334 
îr‹
;

336 
uöt
 
Àn
;

337 
uöt
 
d©a_nuŒ
;

339 
Àn
 = 
	`bcm_mkiov¨
(
«me
, (*)(&
d©a_nuŒ
), 0, (*)(&
v¨
), (v¨.
buf
));

340 
	`ASSERT
(
Àn
);

341 
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_VAR
, (*)&
v¨
, 
Àn
);

343 *
ªtvÆ
 = 
	`dtoh32
(
v¨
.
vÆ
);

345  (
îr‹
);

346 
	}
}

349 #i‡
WIRELESS_EXT
 < 13

350 
	siw_ªque°_öfo


352 
__u16
 
	mcmd
;

353 
__u16
 
	mÊags
;

356 (*
	tiw_h™dÀr
)(
	t√t_devi˚
 *
	tdev
, 
	tiw_ªque°_öfo
 *
	töfo
,

357 *
	twrqu
, *
	texåa
);

360 #i‡
WIRELESS_EXT
 > 12

362 
	$wl_iw_£t_Àddc
(

363 
√t_devi˚
 *
dev
,

364 
iw_ªque°_öfo
 *
öfo
,

365 
iwªq_d©a
 *
wrqu
,

366 *
exåa


369 
dc
 = *(*)
exåa
;

370 
îr‹
;

372 
îr‹
 = 
	`dev_wlc_ötv¨_£t
(
dev
, "Àddc", 
dc
);

373  
îr‹
;

374 
	}
}

377 
	$wl_iw_£t_vœnmode
(

378 
√t_devi˚
 *
dev
,

379 
iw_ªque°_öfo
 *
öfo
,

380 
iwªq_d©a
 *
wrqu
,

381 *
exåa


384 
mode
 = *(*)
exåa
;

385 
îr‹
;

387 
mode
 = 
	`htod32
(mode);

388 
îr‹
 = 
	`dev_wlc_ötv¨_£t
(
dev
, "vœn_mode", 
mode
);

389  
îr‹
;

390 
	}
}

393 
	$wl_iw_£t_pm
(

394 
√t_devi˚
 *
dev
,

395 
iw_ªque°_öfo
 *
öfo
,

396 
iwªq_d©a
 *
wrqu
,

397 *
exåa


400 
pm
 = *(*)
exåa
;

401 
îr‹
;

403 
pm
 = 
	`htod32
(pm);

404 
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_SET_PM
, &
pm
, (pm));

405  
îr‹
;

406 
	}
}

410 
	$wl_iw_£nd_¥iv_evít
(

411 
√t_devi˚
 *
dev
,

412 *
Êag


415 
iwªq_d©a
 
wrqu
;

416 
exåa
[
IW_CUSTOM_MAX
 + 1];

417 
cmd
;

419 
cmd
 = 
IWEVCUSTOM
;

420 
	`mem£t
(&
wrqu
, 0, (wrqu));

421 i‡(
	`°æí
(
Êag
Ë> (
exåa
))

424 
	`°r˝y
(
exåa
, 
Êag
);

425 
wrqu
.
d©a
.
Àngth
 = 
	`°æí
(
exåa
);

426 
	`wúñess_£nd_evít
(
dev
, 
cmd
, &
wrqu
, 
exåa
);

427 
	`WL_TRACE
(("Síd IWEVCUSTOM Evíàa†%s\n", 
exåa
));

430 
	}
}

433 
	$wl_iw_c⁄fig_commô
(

434 
√t_devi˚
 *
dev
,

435 
iw_ªque°_öfo
 *
öfo
,

436 *
zwrq
,

437 *
exåa


440 
wlc_ssid_t
 
ssid
;

441 
îr‹
;

442 
sockaddr
 
bssid
;

444 
	`WL_TRACE
(("%s: SIOCSIWCOMMIT\n", 
dev
->
«me
));

446 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_SSID
, &
ssid
, (ssid))))

447  
îr‹
;

449 
ssid
.
SSID_Àn
 = 
	`dtoh32
(ssid.SSID_len);

451 i‡(!
ssid
.
SSID_Àn
)

454 
	`bzîo
(&
bssid
, (
sockaddr
));

455 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_REASSOC
, &
bssid
, 
ETHER_ADDR_LEN
))) {

456 
	`WL_ERROR
(("%s: WLC_REASSOC faûed (%d)\n", 
__FUNCTION__
, 
îr‹
));

457  
îr‹
;

461 
	}
}

464 
	$wl_iw_gë_«me
(

465 
√t_devi˚
 *
dev
,

466 
iw_ªque°_öfo
 *
öfo
,

467 
iwªq_d©a
 *
cwrq
,

468 *
exåa


471 
phyty≥
, 
îr
;

472 
uöt
 
b™d
[3];

473 
ˇp
[5];

475 
	`WL_TRACE
(("%s: SIOCGIWNAME\n", 
dev
->
«me
));

477 
ˇp
[0] = 0;

478 i‡((
îr
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_PHYTYPE
, &
phyty≥
, (phytype))) < 0)

479 
d⁄e
;

480 i‡((
îr
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_BANDLIST
, 
b™d
, (band))) < 0)

481 
d⁄e
;

483 
b™d
[0] = 
	`dtoh32
(band[0]);

484 
phyty≥
) {

485 
WLC_PHY_TYPE_A
:

486 
	`°r˝y
(
ˇp
, "a");

488 
WLC_PHY_TYPE_B
:

489 
	`°r˝y
(
ˇp
, "b");

491 
WLC_PHY_TYPE_LP
:

492 
WLC_PHY_TYPE_G
:

493 i‡(
b™d
[0] >= 2)

494 
	`°r˝y
(
ˇp
, "abg");

496 
	`°r˝y
(
ˇp
, "bg");

498 
WLC_PHY_TYPE_N
:

499 i‡(
b™d
[0] >= 2)

500 
	`°r˝y
(
ˇp
, "abgn");

502 
	`°r˝y
(
ˇp
, "bgn");

505 
d⁄e
:

506 
	`¢¥ötf
(
cwrq
->
«me
, 
IFNAMSIZ
, "IEEE 802.11%s", 
ˇp
);

508 
	}
}

511 
	$wl_iw_£t_‰eq
(

512 
√t_devi˚
 *
dev
,

513 
iw_ªque°_öfo
 *
öfo
,

514 
iw_‰eq
 *
fwrq
,

515 *
exåa


518 
îr‹
, 
ch™
;

519 
uöt
 
sf
 = 0;

521 
	`WL_TRACE
(("%s: SIOCSIWFREQ\n", 
dev
->
«me
));

524 i‡(
fwrq
->
e
 =0 && fwrq->
m
 < 
MAXCHANNEL
) {

525 
ch™
 = 
fwrq
->
m
;

531 i‡(
fwrq
->
e
 >= 6) {

532 
fwrq
->
e
 -= 6;

533 
fwrq
->
e
--)

534 
fwrq
->
m
 *= 10;

535 } i‡(
fwrq
->
e
 < 6) {

536 
fwrq
->
e
++ < 6)

537 
fwrq
->
m
 /= 10;

540 i‡(
fwrq
->
m
 > 4000 && fwrq->m < 5000)

541 
sf
 = 
WF_CHAN_FACTOR_4_G
;

543 
ch™
 = 
	`wf_mhz2ch™√l
(
fwrq
->
m
, 
sf
);

545 
ch™
 = 
	`htod32
(chan);

546 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_SET_CHANNEL
, &
ch™
, (chan))))

547  
îr‹
;

550  -
EINPROGRESS
;

551 
	}
}

554 
	$wl_iw_gë_‰eq
(

555 
√t_devi˚
 *
dev
,

556 
iw_ªque°_öfo
 *
öfo
,

557 
iw_‰eq
 *
fwrq
,

558 *
exåa


561 
ch™√l_öfo_t
 
ci
;

562 
îr‹
;

564 
	`WL_TRACE
(("%s: SIOCGIWFREQ\n", 
dev
->
«me
));

566 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_CHANNEL
, &
ci
, (ci))))

567  
îr‹
;

570 
fwrq
->
m
 = 
	`dtoh32
(
ci
.
hw_ch™√l
);

571 
fwrq
->
e
 = 
	`dtoh32
(0);

573 
	}
}

576 
	$wl_iw_£t_mode
(

577 
√t_devi˚
 *
dev
,

578 
iw_ªque°_öfo
 *
öfo
,

579 
__u32
 *
uwrq
,

580 *
exåa


583 
ö‰a
 = 0, 
≠
 = 0, 
îr‹
 = 0;

585 
	`WL_TRACE
(("%s: SIOCSIWMODE\n", 
dev
->
«me
));

587 *
uwrq
) {

588 
IW_MODE_MASTER
:

589 
ö‰a
 = 
≠
 = 1;

591 
IW_MODE_ADHOC
:

592 
IW_MODE_AUTO
:

594 
IW_MODE_INFRA
:

595 
ö‰a
 = 1;

598  -
EINVAL
;

600 
ö‰a
 = 
	`htod32
(infra);

601 
≠
 = 
	`htod32
(ap);

603 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_SET_INFRA
, &
ö‰a
, (infra))) ||

604 (
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_SET_AP
, &
≠
, (ap))))

605  
îr‹
;

608  -
EINPROGRESS
;

609 
	}
}

612 
	$wl_iw_gë_mode
(

613 
√t_devi˚
 *
dev
,

614 
iw_ªque°_öfo
 *
öfo
,

615 
__u32
 *
uwrq
,

616 *
exåa


619 
îr‹
, 
ö‰a
 = 0, 
≠
 = 0;

621 
	`WL_TRACE
(("%s: SIOCGIWMODE\n", 
dev
->
«me
));

623 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_INFRA
, &
ö‰a
, (infra))) ||

624 (
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_AP
, &
≠
, (ap))))

625  
îr‹
;

627 
ö‰a
 = 
	`dtoh32
(infra);

628 
≠
 = 
	`dtoh32
(ap);

629 *
uwrq
 = 
ö‰a
 ? 
≠
 ? 
IW_MODE_MASTER
 : 
IW_MODE_INFRA
 : 
IW_MODE_ADHOC
;

632 
	}
}

635 
	$wl_iw_gë_ønge
(

636 
√t_devi˚
 *
dev
,

637 
iw_ªque°_öfo
 *
öfo
,

638 
iw_poöt
 *
dwrq
,

639 *
exåa


642 
iw_ønge
 *
ønge
 = (iw_øngê*Ë
exåa
;

643 
ch™√ls
[
MAXCHANNEL
+1];

644 
wl_uöt32_li°_t
 *
li°
 = (wl_uöt32_li°_à*Ë
ch™√ls
;

645 
wl_øã£t_t
 
øã£t
;

646 
îr‹
, 
i
, 
k
;

647 
uöt
 
sf
, 
ch
;

649 
phyty≥
;

650 
bw_ˇp
 = 0, 
sgi_tx
 = 0, 
nmode
 = 0;

651 
ch™√l_öfo_t
 
ci
;

652 
uöt8
 
ƒ©e_li°2c›y
 = 0;

653 
uöt16
 
ƒ©e_li°
[4][8] = { {13, 26, 39, 52, 78, 104, 117, 130},

658 
	`WL_TRACE
(("%s: SIOCGIWRANGE\n", 
dev
->
«me
));

660 i‡(!
exåa
)

661  -
EINVAL
;

663 
dwrq
->
Àngth
 = (
iw_ønge
);

664 
	`mem£t
(
ønge
, 0, (*range));

667 
ønge
->
mö_nwid
 =Ñ™ge->
max_nwid
 = 0;

670 
li°
->
cou¡
 = 
	`htod32
(
MAXCHANNEL
);

671 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_VALID_CHANNELS
, 
ch™√ls
, (channels))))

672  
îr‹
;

673 
i
 = 0; i < 
	`dtoh32
(
li°
->
cou¡
Ë&& i < 
IW_MAX_FREQUENCIES
; i++) {

674 
ønge
->
‰eq
[
i
].ò
	`dtoh32
(
li°
->
ñemít
[i]);

676 
ch
 = 
	`dtoh32
(
li°
->
ñemít
[
i
]);

677 i‡(
ch
 <
CH_MAX_2G_CHANNEL
)

678 
sf
 = 
WF_CHAN_FACTOR_2_4_G
;

680 
sf
 = 
WF_CHAN_FACTOR_5_G
;

682 
ønge
->
‰eq
[
i
].
m
 = 
	`wf_ch™√l2mhz
(
ch
, 
sf
);

683 
ønge
->
‰eq
[
i
].
e
 = 6;

685 
ønge
->
num_‰equícy
 =Ñ™ge->
num_ch™√ls
 = 
i
;

688 
ønge
->
max_quÆ
.
quÆ
 = 5;

690 
ønge
->
max_quÆ
.
Àvñ
 = 0x100 - 200;

692 
ønge
->
max_quÆ
.
noi£
 = 0x100 - 200;

694 
ønge
->
£nsôivôy
 = 65535;

696 #i‡
WIRELESS_EXT
 > 11

698 
ønge
->
avg_quÆ
.
quÆ
 = 3;

700 
ønge
->
avg_quÆ
.
Àvñ
 = 0x100 + 
WL_IW_RSSI_GOOD
;

702 
ønge
->
avg_quÆ
.
noi£
 = 0x100 - 75;

706 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_CURR_RATESET
, &
øã£t
, (rateset))))

707  
îr‹
;

708 
øã£t
.
cou¡
 = 
	`dtoh32
(rateset.count);

709 
ønge
->
num_bôøãs
 = 
øã£t
.
cou¡
;

710 
i
 = 0; i < 
øã£t
.
cou¡
 && i < 
IW_MAX_BITRATES
; i++)

711 
ønge
->
bôøã
[
i
] = (
øã£t
.
øãs
[i] & 0x7f) * 500000;

712 
	`dev_wlc_ötv¨_gë
(
dev
, "nmode", &
nmode
);

713 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_PHYTYPE
, &
phyty≥
, (phytype))))

714  
îr‹
;

716 i‡(
nmode
 =1 && ((
phyty≥
 =
WLC_PHY_TYPE_SSN
Ë|| (phyty≥ =
WLC_PHY_TYPE_LCN
) ||

717 (
phyty≥
 =
WLC_PHY_TYPE_LCN40
))) {

718 
	`dev_wlc_ötv¨_gë
(
dev
, "mimo_bw_ˇp", &
bw_ˇp
);

719 
	`dev_wlc_ötv¨_gë
(
dev
, "sgi_tx", &
sgi_tx
);

720 
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_CHANNEL
, &
ci
, (
ch™√l_öfo_t
));

721 
ci
.
hw_ch™√l
 = 
	`dtoh32
(ci.hw_channel);

723 i‡(
bw_ˇp
 == 0 ||

724 (
bw_ˇp
 =2 && 
ci
.
hw_ch™√l
 <= 14)) {

725 i‡(
sgi_tx
 == 0)

726 
ƒ©e_li°2c›y
 = 0;

728 
ƒ©e_li°2c›y
 = 1;

730 i‡(
bw_ˇp
 == 1 ||

731 (
bw_ˇp
 =2 && 
ci
.
hw_ch™√l
 >= 36)) {

732 i‡(
sgi_tx
 == 0)

733 
ƒ©e_li°2c›y
 = 2;

735 
ƒ©e_li°2c›y
 = 3;

737 
ønge
->
num_bôøãs
 += 8;

738 
k
 = 0; 
i
 < 
ønge
->
num_bôøãs
; k++, i++) {

740 
ønge
->
bôøã
[
i
] = (
ƒ©e_li°
[
ƒ©e_li°2c›y
][
k
]) * 500000;

748 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_PHYTYPE
, &
i
, (i))))

749  
îr‹
;

750 
i
 = 
	`dtoh32
(i);

751 i‡(
i
 =
WLC_PHY_TYPE_A
)

752 
ønge
->
throughput
 = 24000000;

754 
ønge
->
throughput
 = 1500000;

757 
ønge
->
mö_πs
 = 0;

758 
ønge
->
max_πs
 = 2347;

759 
ønge
->
mö_‰ag
 = 256;

760 
ønge
->
max_‰ag
 = 2346;

762 
ønge
->
max_ícodög_tokís
 = 
DOT11_MAX_DEFAULT_KEYS
;

763 
ønge
->
num_ícodög_sizes
 = 4;

764 
ønge
->
ícodög_size
[0] = 
WEP1_KEY_SIZE
;

765 
ønge
->
ícodög_size
[1] = 
WEP128_KEY_SIZE
;

766 #i‡
WIRELESS_EXT
 > 17

767 
ønge
->
ícodög_size
[2] = 
TKIP_KEY_SIZE
;

769 
ønge
->
ícodög_size
[2] = 0;

771 
ønge
->
ícodög_size
[3] = 
AES_KEY_SIZE
;

774 
ønge
->
mö_pmp
 = 0;

775 
ønge
->
max_pmp
 = 0;

776 
ønge
->
mö_pmt
 = 0;

777 
ønge
->
max_pmt
 = 0;

778 
ønge
->
pmp_Êags
 = 0;

779 
ønge
->
pm_ˇ∑
 = 0;

782 
ønge
->
num_txpowî
 = 2;

783 
ønge
->
txpowî
[0] = 1;

784 
ønge
->
txpowî
[1] = 255;

785 
ønge
->
txpowî_ˇ∑
 = 
IW_TXPOW_MWATT
;

787 #i‡
WIRELESS_EXT
 > 10

788 
ønge
->
we_vîsi⁄_compûed
 = 
WIRELESS_EXT
;

789 
ønge
->
we_vîsi⁄_sour˚
 = 19;

792 
ønge
->
ªåy_ˇ∑
 = 
IW_RETRY_LIMIT
;

793 
ønge
->
ªåy_Êags
 = 
IW_RETRY_LIMIT
;

794 
ønge
->
r_time_Êags
 = 0;

796 
ønge
->
mö_ªåy
 = 1;

797 
ønge
->
max_ªåy
 = 255;

799 
ønge
->
mö_r_time
 = 0;

800 
ønge
->
max_r_time
 = 0;

803 #i‡
WIRELESS_EXT
 > 17

804 
ønge
->
íc_ˇ∑
 = 
IW_ENC_CAPA_WPA
;

805 
ønge
->
íc_ˇ∑
 |
IW_ENC_CAPA_CIPHER_TKIP
;

806 
ønge
->
íc_ˇ∑
 |
IW_ENC_CAPA_CIPHER_CCMP
;

807 
ønge
->
íc_ˇ∑
 |
IW_ENC_CAPA_WPA2
;

808 #i‡(
	`deföed
(
BCMSUP_PSK
Ë&& deföed(
WLFBT
))

810 
ønge
->
íc_ˇ∑
 |
IW_ENC_CAPA_4WAY_HANDSHAKE
;

814 
	`IW_EVENT_CAPA_SET_KERNEL
(
ønge
->
evít_ˇ∑
);

816 
	`IW_EVENT_CAPA_SET
(
ønge
->
evít_ˇ∑
, 
SIOCGIWAP
);

817 
	`IW_EVENT_CAPA_SET
(
ønge
->
evít_ˇ∑
, 
SIOCGIWSCAN
);

818 
	`IW_EVENT_CAPA_SET
(
ønge
->
evít_ˇ∑
, 
IWEVTXDROP
);

819 
	`IW_EVENT_CAPA_SET
(
ønge
->
evít_ˇ∑
, 
IWEVMICHAELMICFAILURE
);

820 
	`IW_EVENT_CAPA_SET
(
ønge
->
evít_ˇ∑
, 
IWEVASSOCREQIE
);

821 
	`IW_EVENT_CAPA_SET
(
ønge
->
evít_ˇ∑
, 
IWEVASSOCRESPIE
);

822 
	`IW_EVENT_CAPA_SET
(
ønge
->
evít_ˇ∑
, 
IWEVPMKIDCAND
);

824 #i‡
WIRELESS_EXT
 >22 && 
	`deföed
(
IW_SCAN_CAPA_ESSID
)

826 
ønge
->
sˇn_ˇ∑
 = 
IW_SCAN_CAPA_ESSID
;

831 
	}
}

834 
	$rssi_to_quÆ
(
rssi
)

836 i‡(
rssi
 <
WL_IW_RSSI_NO_SIGNAL
)

838 i‡(
rssi
 <
WL_IW_RSSI_VERY_LOW
)

840 i‡(
rssi
 <
WL_IW_RSSI_LOW
)

842 i‡(
rssi
 <
WL_IW_RSSI_GOOD
)

844 i‡(
rssi
 <
WL_IW_RSSI_VERY_GOOD
)

848 
	}
}

851 
	$wl_iw_£t_•y
(

852 
√t_devi˚
 *
dev
,

853 
iw_ªque°_öfo
 *
öfo
,

854 
iw_poöt
 *
dwrq
,

855 *
exåa


858 
wl_iw_t
 *
iw
 = 
	`IW_DEV_IF
(
dev
);

859 
sockaddr
 *
addr
 = (sockadd∏*Ë
exåa
;

860 
i
;

862 
	`WL_TRACE
(("%s: SIOCSIWSPY\n", 
dev
->
«me
));

864 i‡(!
exåa
)

865  -
EINVAL
;

867 
iw
->
•y_num
 = 
	`MIN
(
	`ARRAYSIZE
(iw->
•y_addr
), 
dwrq
->
Àngth
);

868 
i
 = 0; i < 
iw
->
•y_num
; i++)

869 
	`mem˝y
(&
iw
->
•y_addr
[
i
], 
addr
[i].
ß_d©a
, 
ETHER_ADDR_LEN
);

870 
	`mem£t
(
iw
->
•y_quÆ
, 0, (iw->spy_qual));

873 
	}
}

876 
	$wl_iw_gë_•y
(

877 
√t_devi˚
 *
dev
,

878 
iw_ªque°_öfo
 *
öfo
,

879 
iw_poöt
 *
dwrq
,

880 *
exåa


883 
wl_iw_t
 *
iw
 = 
	`IW_DEV_IF
(
dev
);

884 
sockaddr
 *
addr
 = (sockadd∏*Ë
exåa
;

885 
iw_quÆôy
 *
quÆ
 = (iw_quÆôy *Ë&
addr
[
iw
->
•y_num
];

886 
i
;

888 
	`WL_TRACE
(("%s: SIOCGIWSPY\n", 
dev
->
«me
));

890 i‡(!
exåa
)

891  -
EINVAL
;

893 
dwrq
->
Àngth
 = 
iw
->
•y_num
;

894 
i
 = 0; i < 
iw
->
•y_num
; i++) {

895 
	`mem˝y
(
addr
[
i
].
ß_d©a
, &
iw
->
•y_addr
[i], 
ETHER_ADDR_LEN
);

896 
addr
[
i
].
ß_Ámûy
 = 
AF_UNIX
;

897 
	`mem˝y
(&
quÆ
[
i
], &
iw
->
•y_quÆ
[i], (
iw_quÆôy
));

898 
iw
->
•y_quÆ
[
i
].
upd©ed
 = 0;

902 
	}
}

905 
	$wl_iw_£t_w≠
(

906 
√t_devi˚
 *
dev
,

907 
iw_ªque°_öfo
 *
öfo
,

908 
sockaddr
 *
awrq
,

909 *
exåa


912 
îr‹
 = -
EINVAL
;

914 
	`WL_TRACE
(("%s: SIOCSIWAP\n", 
dev
->
«me
));

916 i‡(
awrq
->
ß_Ámûy
 !
ARPHRD_ETHER
) {

917 
	`WL_ERROR
(("%s: InvÆid Hódî...ß_Ámûy\n", 
__FUNCTION__
));

918  -
EINVAL
;

922 i‡(
	`ETHER_ISBCAST
(
awrq
->
ß_d©a
Ë|| 
	`ETHER_ISNULLADDR
(awrq->sa_data)) {

923 
scb_vÆ_t
 
scbvÆ
;

924 
	`bzîo
(&
scbvÆ
, (
scb_vÆ_t
));

925 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_DISASSOC
, &
scbvÆ
, (
scb_vÆ_t
)))) {

926 
	`WL_ERROR
(("%s: WLC_DISASSOC faûed (%d).\n", 
__FUNCTION__
, 
îr‹
));

934 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_REASSOC
, 
awrq
->
ß_d©a
, 
ETHER_ADDR_LEN
))) {

935 
	`WL_ERROR
(("%s: WLC_REASSOC faûed (%d).\n", 
__FUNCTION__
, 
îr‹
));

936  
îr‹
;

940 
	}
}

943 
	$wl_iw_gë_w≠
(

944 
√t_devi˚
 *
dev
,

945 
iw_ªque°_öfo
 *
öfo
,

946 
sockaddr
 *
awrq
,

947 *
exåa


950 
	`WL_TRACE
(("%s: SIOCGIWAP\n", 
dev
->
«me
));

952 
awrq
->
ß_Ámûy
 = 
ARPHRD_ETHER
;

953 
	`mem£t
(
awrq
->
ß_d©a
, 0, 
ETHER_ADDR_LEN
);

956 (Ë
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_BSSID
, 
awrq
->
ß_d©a
, 
ETHER_ADDR_LEN
);

959 
	}
}

961 #i‡
WIRELESS_EXT
 > 17

963 
	$wl_iw_mlme
(

964 
√t_devi˚
 *
dev
,

965 
iw_ªque°_öfo
 *
öfo
,

966 
sockaddr
 *
awrq
,

967 *
exåa


970 
iw_mlme
 *
mlme
;

971 
scb_vÆ_t
 
scbvÆ
;

972 
îr‹
 = -
EINVAL
;

974 
	`WL_TRACE
(("%s: SIOCSIWMLME\n", 
dev
->
«me
));

976 
mlme
 = (
iw_mlme
 *)
exåa
;

977 i‡(
mlme
 =
NULL
) {

978 
	`WL_ERROR
(("Invalid ioctl data.\n"));

979  
îr‹
;

982 
scbvÆ
.
vÆ
 = 
mlme
->
ªas⁄_code
;

983 
	`bc›y
(&
mlme
->
addr
.
ß_d©a
, &
scbvÆ
.
ó
, 
ETHER_ADDR_LEN
);

985 i‡(
mlme
->
cmd
 =
IW_MLME_DISASSOC
) {

986 
scbvÆ
.
vÆ
 = 
	`htod32
(scbval.val);

987 
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_DISASSOC
, &
scbvÆ
, (
scb_vÆ_t
));

989 i‡(
mlme
->
cmd
 =
IW_MLME_DEAUTH
) {

990 
scbvÆ
.
vÆ
 = 
	`htod32
(scbval.val);

991 
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_SCB_DEAUTHENTICATE_FOR_REASON
, &
scbvÆ
,

992 (
scb_vÆ_t
));

995 
	`WL_ERROR
(("%s: InvÆid io˘»d©a.\n", 
__FUNCTION__
));

996  
îr‹
;

999  
îr‹
;

1000 
	}
}

1004 
	$wl_iw_gë_≠li°
(

1005 
√t_devi˚
 *
dev
,

1006 
iw_ªque°_öfo
 *
öfo
,

1007 
iw_poöt
 *
dwrq
,

1008 *
exåa


1011 
wl_sˇn_ªsu…s_t
 *
li°
;

1012 
sockaddr
 *
addr
 = (sockadd∏*Ë
exåa
;

1013 
iw_quÆôy
 
quÆ
[
IW_MAX_AP
];

1014 
wl_bss_öfo_t
 *
bi
 = 
NULL
;

1015 
îr‹
, 
i
;

1016 
uöt
 
buÊí
 = 
dwrq
->
Àngth
;

1018 
	`WL_TRACE
(("%s: SIOCGIWAPLIST\n", 
dev
->
«me
));

1020 i‡(!
exåa
)

1021  -
EINVAL
;

1024 
li°
 = 
	`kmÆloc
(
buÊí
, 
GFP_KERNEL
);

1025 i‡(!
li°
)

1026  -
ENOMEM
;

1027 
	`mem£t
(
li°
, 0, 
buÊí
);

1028 
li°
->
buÊí
 = 
	`htod32
(buflen);

1029 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_SCAN_RESULTS
, 
li°
, 
buÊí
))) {

1030 
	`WL_ERROR
(("%d: Sˇ¿ªsu…†îr‹ %d\n", 
__LINE__
, 
îr‹
));

1031 
	`k‰ì
(
li°
);

1032  
îr‹
;

1034 
li°
->
buÊí
 = 
	`dtoh32
(list->buflen);

1035 
li°
->
vîsi⁄
 = 
	`dtoh32
(list->version);

1036 
li°
->
cou¡
 = 
	`dtoh32
(list->count);

1037 
	`ASSERT
(
li°
->
vîsi⁄
 =
WL_BSS_INFO_VERSION
);

1039 
i
 = 0, 
dwrq
->
Àngth
 = 0; i < 
li°
->
cou¡
 && dwrq->Àngth < 
IW_MAX_AP
; i++) {

1040 
bi
 = bò? (
wl_bss_öfo_t
 *)((
uöçå
)bò+ 
	`dtoh32
(bi->
Àngth
)Ë: 
li°
->
bss_öfo
;

1041 
	`ASSERT
(((
uöçå
)
bi
 + 
	`dtoh32
(bi->
Àngth
)Ë<((uöçå)
li°
 +

1042 
buÊí
));

1045 i‡(!(
	`dtoh16
(
bi
->
ˇ∑bûôy
Ë& 
DOT11_CAP_ESS
))

1049 
	`mem˝y
(
addr
[
dwrq
->
Àngth
].
ß_d©a
, &
bi
->
BSSID
, 
ETHER_ADDR_LEN
);

1050 
addr
[
dwrq
->
Àngth
].
ß_Ámûy
 = 
ARPHRD_ETHER
;

1051 
quÆ
[
dwrq
->
Àngth
].quÆ = 
	`rssi_to_quÆ
(
	`dtoh16
(
bi
->
RSSI
));

1052 
quÆ
[
dwrq
->
Àngth
].
Àvñ
 = 0x100 + 
	`dtoh16
(
bi
->
RSSI
);

1053 
quÆ
[
dwrq
->
Àngth
].
noi£
 = 0x100 + 
bi
->
phy_noi£
;

1056 #i‡
WIRELESS_EXT
 > 18

1057 
quÆ
[
dwrq
->
Àngth
].
upd©ed
 = 
IW_QUAL_ALL_UPDATED
 | 
IW_QUAL_DBM
;

1059 
quÆ
[
dwrq
->
Àngth
].
upd©ed
 = 7;

1062 
dwrq
->
Àngth
++;

1065 
	`k‰ì
(
li°
);

1067 i‡(
dwrq
->
Àngth
) {

1068 
	`mem˝y
(&
addr
[
dwrq
->
Àngth
], 
quÆ
, (
iw_quÆôy
) * dwrq->length);

1070 
dwrq
->
Êags
 = 1;

1074 
	}
}

1077 
	$wl_iw_isˇn_gë_≠li°
(

1078 
√t_devi˚
 *
dev
,

1079 
iw_ªque°_öfo
 *
öfo
,

1080 
iw_poöt
 *
dwrq
,

1081 *
exåa


1084 
wl_sˇn_ªsu…s_t
 *
li°
;

1085 
isˇn_buf_t
 * 
buf
;

1086 
isˇn_öfo_t
 *
isˇn
 = 
g_isˇn
;

1088 
sockaddr
 *
addr
 = (sockadd∏*Ë
exåa
;

1089 
iw_quÆôy
 
quÆ
[
IW_MAX_AP
];

1090 
wl_bss_öfo_t
 *
bi
 = 
NULL
;

1091 
i
;

1093 
	`WL_TRACE
(("%s: SIOCGIWAPLIST\n", 
dev
->
«me
));

1095 i‡(!
exåa
)

1096  -
EINVAL
;

1098 i‡((!
isˇn
Ë|| (isˇn->
sysioc_pid
 < 0)) {

1099  
	`wl_iw_gë_≠li°
(
dev
, 
öfo
, 
dwrq
, 
exåa
);

1102 
buf
 = 
isˇn
->
li°_hdr
;

1104 
buf
) {

1105 
li°
 = &((
wl_isˇn_ªsu…s_t
*)
buf
->
isˇn_buf
)->
ªsu…s
;

1106 
	`ASSERT
(
li°
->
vîsi⁄
 =
WL_BSS_INFO_VERSION
);

1108 
bi
 = 
NULL
;

1109 
i
 = 0, 
dwrq
->
Àngth
 = 0; i < 
li°
->
cou¡
 && dwrq->Àngth < 
IW_MAX_AP
; i++) {

1110 
bi
 = bò? (
wl_bss_öfo_t
 *)((
uöçå
)bò+ 
	`dtoh32
(bi->
Àngth
)Ë: 
li°
->
bss_öfo
;

1111 
	`ASSERT
(((
uöçå
)
bi
 + 
	`dtoh32
(bi->
Àngth
)Ë<((uöçå)
li°
 +

1112 
WLC_IW_ISCAN_MAXLEN
));

1115 i‡(!(
	`dtoh16
(
bi
->
ˇ∑bûôy
Ë& 
DOT11_CAP_ESS
))

1119 
	`mem˝y
(
addr
[
dwrq
->
Àngth
].
ß_d©a
, &
bi
->
BSSID
, 
ETHER_ADDR_LEN
);

1120 
addr
[
dwrq
->
Àngth
].
ß_Ámûy
 = 
ARPHRD_ETHER
;

1121 
quÆ
[
dwrq
->
Àngth
].quÆ = 
	`rssi_to_quÆ
(
	`dtoh16
(
bi
->
RSSI
));

1122 
quÆ
[
dwrq
->
Àngth
].
Àvñ
 = 0x100 + 
	`dtoh16
(
bi
->
RSSI
);

1123 
quÆ
[
dwrq
->
Àngth
].
noi£
 = 0x100 + 
bi
->
phy_noi£
;

1126 #i‡
WIRELESS_EXT
 > 18

1127 
quÆ
[
dwrq
->
Àngth
].
upd©ed
 = 
IW_QUAL_ALL_UPDATED
 | 
IW_QUAL_DBM
;

1129 
quÆ
[
dwrq
->
Àngth
].
upd©ed
 = 7;

1132 
dwrq
->
Àngth
++;

1134 
buf
 = buf->
√xt
;

1136 i‡(
dwrq
->
Àngth
) {

1137 
	`mem˝y
(&
addr
[
dwrq
->
Àngth
], 
quÆ
, (
iw_quÆôy
) * dwrq->length);

1139 
dwrq
->
Êags
 = 1;

1143 
	}
}

1145 #i‡
WIRELESS_EXT
 > 13

1147 
	$wl_iw_£t_sˇn
(

1148 
√t_devi˚
 *
dev
,

1149 
iw_ªque°_öfo
 *
öfo
,

1150 
iwªq_d©a
 *
wrqu
,

1151 *
exåa


1154 
wlc_ssid_t
 
ssid
;

1156 
	`WL_TRACE
(("%s: SIOCSIWSCAN\n", 
dev
->
«me
));

1159 
	`mem£t
(&
ssid
, 0, (ssid));

1161 #i‡
WIRELESS_EXT
 > 17

1163 i‡(
wrqu
->
d©a
.
Àngth
 =(
iw_sˇn_ªq
)) {

1164 i‡(
wrqu
->
d©a
.
Êags
 & 
IW_SCAN_THIS_ESSID
) {

1165 
iw_sˇn_ªq
 *
ªq
 = (iw_sˇn_ªq *)
exåa
;

1166 
ssid
.
SSID_Àn
 = 
	`MIN
((ssid.
SSID
), 
ªq
->
essid_Àn
);

1167 
	`mem˝y
(
ssid
.
SSID
, 
ªq
->
essid
, ssid.
SSID_Àn
);

1168 
ssid
.
SSID_Àn
 = 
	`htod32
(ssid.SSID_len);

1173 (Ë
	`dev_wlc_io˘l
(
dev
, 
WLC_SCAN
, &
ssid
, (ssid));

1176 
	}
}

1179 
	$wl_iw_isˇn_£t_sˇn
(

1180 
√t_devi˚
 *
dev
,

1181 
iw_ªque°_öfo
 *
öfo
,

1182 
iwªq_d©a
 *
wrqu
,

1183 *
exåa


1186 
wlc_ssid_t
 
ssid
;

1187 
isˇn_öfo_t
 *
isˇn
 = 
g_isˇn
;

1189 
	`WL_TRACE
(("%s: SIOCSIWSCAN\n", 
dev
->
«me
));

1192 i‡((!
isˇn
Ë|| (isˇn->
sysioc_pid
 < 0)) {

1193  
	`wl_iw_£t_sˇn
(
dev
, 
öfo
, 
wrqu
, 
exåa
);

1195 i‡(
isˇn
->
isˇn_°©e
 =
ISCAN_STATE_SCANING
) {

1200 
	`mem£t
(&
ssid
, 0, (ssid));

1202 #i‡
WIRELESS_EXT
 > 17

1204 i‡(
wrqu
->
d©a
.
Àngth
 =(
iw_sˇn_ªq
)) {

1205 i‡(
wrqu
->
d©a
.
Êags
 & 
IW_SCAN_THIS_ESSID
) {

1206 
iw_sˇn_ªq
 *
ªq
 = (iw_sˇn_ªq *)
exåa
;

1207 
ssid
.
SSID_Àn
 = 
	`MIN
((ssid.
SSID
), 
ªq
->
essid_Àn
);

1208 
	`mem˝y
(
ssid
.
SSID
, 
ªq
->
essid
, ssid.
SSID_Àn
);

1209 
ssid
.
SSID_Àn
 = 
	`htod32
(ssid.SSID_len);

1214 
isˇn
->
li°_cur
 = isˇn->
li°_hdr
;

1215 
isˇn
->
isˇn_°©e
 = 
ISCAN_STATE_SCANING
;

1218 
	`wl_iw_£t_evít_mask
(
dev
);

1219 
	`wl_iw_isˇn
(
isˇn
, &
ssid
, 
WL_SCAN_ACTION_START
);

1221 
isˇn
->
timî
.
expúes
 = 
jiffõs
 + 
	`m£cs_to_jiffõs
(isˇn->
timî_ms
);

1222 
	`add_timî
(&
isˇn
->
timî
);

1223 
isˇn
->
timî_⁄
 = 1;

1226 
	}
}

1228 #i‡
WIRELESS_EXT
 > 17

1229 
boﬁ


1230 
	$õ_is_w∑_õ
(
uöt8
 **
w∑õ
, uöt8 **
évs
, *
évs_Àn
)

1234 
uöt8
 *
õ
 = *
w∑õ
;

1237 i‡((
õ
[1] >= 6) &&

1238 !
	`bcmp
((c⁄° *)&
õ
[2], (c⁄° *)(
WPA_OUI
 "\x01"), 4)) {

1239  
TRUE
;

1243 
õ
 += ie[1] + 2;

1245 *
évs_Àn
 -()(
õ
 - *
évs
);

1247 *
évs
 = 
õ
;

1248  
FALSE
;

1249 
	}
}

1251 
boﬁ


1252 
	$õ_is_wps_õ
(
uöt8
 **
wpsõ
, uöt8 **
évs
, *
évs_Àn
)

1256 
uöt8
 *
õ
 = *
wpsõ
;

1259 i‡((
õ
[1] >= 4) &&

1260 !
	`bcmp
((c⁄° *)&
õ
[2], (c⁄° *)(
WPA_OUI
 "\x04"), 4)) {

1261  
TRUE
;

1265 
õ
 += ie[1] + 2;

1267 *
évs_Àn
 -()(
õ
 - *
évs
);

1269 *
évs
 = 
õ
;

1270  
FALSE
;

1271 
	}
}

1276 
	$wl_iw_h™dÀ_sˇƒesu…s_õs
(**
evít_p
, *
íd
,

1277 
iw_ªque°_öfo
 *
öfo
, 
wl_bss_öfo_t
 *
bi
)

1279 #i‡
WIRELESS_EXT
 > 17

1280 
iw_evít
 
iwe
;

1281 *
evít
;

1283 
evít
 = *
evít_p
;

1284 i‡(
bi
->
õ_Àngth
) {

1286 
bcm_év_t
 *
õ
;

1287 
uöt8
 *
±r
 = ((uöt8 *)
bi
Ë+ (
wl_bss_öfo_t
);

1288 
±r_Àn
 = 
bi
->
õ_Àngth
;

1290 i‡((
õ
 = 
	`bcm_∑r£_évs
(
±r
, 
±r_Àn
, 
DOT11_MNG_RSN_ID
))) {

1291 
iwe
.
cmd
 = 
IWEVGENIE
;

1292 
iwe
.
u
.
d©a
.
Àngth
 = 
õ
->
Àn
 + 2;

1293 
evít
 = 
	`IWE_STREAM_ADD_POINT
(
öfo
,Évít, 
íd
, &
iwe
, (*)
õ
);

1295 
±r
 = ((
uöt8
 *)
bi
Ë+ (
wl_bss_öfo_t
);

1297 #i‡
	`deföed
(
WLFBT
)

1298 i‡((
õ
 = 
	`bcm_∑r£_évs
(
±r
, 
±r_Àn
, 
DOT11_MNG_MDIE_ID
))) {

1299 
iwe
.
cmd
 = 
IWEVGENIE
;

1300 
iwe
.
u
.
d©a
.
Àngth
 = 
õ
->
Àn
 + 2;

1301 
evít
 = 
	`IWE_STREAM_ADD_POINT
(
öfo
,Évít, 
íd
, &
iwe
, (*)
õ
);

1303 
±r
 = ((
uöt8
 *)
bi
Ë+ (
wl_bss_öfo_t
);

1306 (
õ
 = 
	`bcm_∑r£_évs
(
±r
, 
±r_Àn
, 
DOT11_MNG_WPA_ID
))) {

1308 i‡(
	`õ_is_wps_õ
(((
uöt8
 **)&
õ
), &
±r
, &
±r_Àn
)) {

1309 
iwe
.
cmd
 = 
IWEVGENIE
;

1310 
iwe
.
u
.
d©a
.
Àngth
 = 
õ
->
Àn
 + 2;

1311 
evít
 = 
	`IWE_STREAM_ADD_POINT
(
öfo
,Évít, 
íd
, &
iwe
, (*)
õ
);

1316 
±r
 = ((
uöt8
 *)
bi
Ë+ (
wl_bss_öfo_t
);

1317 
±r_Àn
 = 
bi
->
õ_Àngth
;

1318 (
õ
 = 
	`bcm_∑r£_évs
(
±r
, 
±r_Àn
, 
DOT11_MNG_WPA_ID
))) {

1319 i‡(
	`õ_is_w∑_õ
(((
uöt8
 **)&
õ
), &
±r
, &
±r_Àn
)) {

1320 
iwe
.
cmd
 = 
IWEVGENIE
;

1321 
iwe
.
u
.
d©a
.
Àngth
 = 
õ
->
Àn
 + 2;

1322 
evít
 = 
	`IWE_STREAM_ADD_POINT
(
öfo
,Évít, 
íd
, &
iwe
, (*)
õ
);

1327 *
evít_p
 = 
evít
;

1332 
	}
}

1334 
	$wl_iw_gë_sˇn
(

1335 
√t_devi˚
 *
dev
,

1336 
iw_ªque°_öfo
 *
öfo
,

1337 
iw_poöt
 *
dwrq
,

1338 *
exåa


1341 
ch™√l_öfo_t
 
ci
;

1342 
wl_sˇn_ªsu…s_t
 *
li°
;

1343 
iw_evít
 
iwe
;

1344 
wl_bss_öfo_t
 *
bi
 = 
NULL
;

1345 
îr‹
, 
i
, 
j
;

1346 *
evít
 = 
exåa
, *
íd
 =Éxå®+ 
dwrq
->
Àngth
, *
vÆue
;

1347 
uöt
 
buÊí
 = 
dwrq
->
Àngth
;

1349 
	`WL_TRACE
(("%s: SIOCGIWSCAN\n", 
dev
->
«me
));

1351 i‡(!
exåa
)

1352  -
EINVAL
;

1355 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_CHANNEL
, &
ci
, (ci))))

1356  
îr‹
;

1357 
ci
.
sˇn_ch™√l
 = 
	`dtoh32
(ci.scan_channel);

1358 i‡(
ci
.
sˇn_ch™√l
)

1359  -
EAGAIN
;

1362 
li°
 = 
	`kmÆloc
(
buÊí
, 
GFP_KERNEL
);

1363 i‡(!
li°
)

1364  -
ENOMEM
;

1365 
	`mem£t
(
li°
, 0, 
buÊí
);

1366 
li°
->
buÊí
 = 
	`htod32
(buflen);

1367 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_SCAN_RESULTS
, 
li°
, 
buÊí
))) {

1368 
	`k‰ì
(
li°
);

1369  
îr‹
;

1371 
li°
->
buÊí
 = 
	`dtoh32
(list->buflen);

1372 
li°
->
vîsi⁄
 = 
	`dtoh32
(list->version);

1373 
li°
->
cou¡
 = 
	`dtoh32
(list->count);

1375 
	`ASSERT
(
li°
->
vîsi⁄
 =
WL_BSS_INFO_VERSION
);

1377 
i
 = 0; i < 
li°
->
cou¡
 && i < 
IW_MAX_AP
; i++) {

1378 
bi
 = bò? (
wl_bss_öfo_t
 *)((
uöçå
)bò+ 
	`dtoh32
(bi->
Àngth
)Ë: 
li°
->
bss_öfo
;

1379 
	`ASSERT
(((
uöçå
)
bi
 + 
	`dtoh32
(bi->
Àngth
)Ë<((uöçå)
li°
 +

1380 
buÊí
));

1383 
iwe
.
cmd
 = 
SIOCGIWAP
;

1384 
iwe
.
u
.
≠_addr
.
ß_Ámûy
 = 
ARPHRD_ETHER
;

1385 
	`mem˝y
(
iwe
.
u
.
≠_addr
.
ß_d©a
, &
bi
->
BSSID
, 
ETHER_ADDR_LEN
);

1386 
evít
 = 
	`IWE_STREAM_ADD_EVENT
(
öfo
,Évít, 
íd
, &
iwe
, 
IW_EV_ADDR_LEN
);

1389 
iwe
.
u
.
d©a
.
Àngth
 = 
	`dtoh32
(
bi
->
SSID_Àn
);

1390 
iwe
.
cmd
 = 
SIOCGIWESSID
;

1391 
iwe
.
u
.
d©a
.
Êags
 = 1;

1392 
evít
 = 
	`IWE_STREAM_ADD_POINT
(
öfo
,Évít, 
íd
, &
iwe
, 
bi
->
SSID
);

1395 i‡(
	`dtoh16
(
bi
->
ˇ∑bûôy
Ë& (
DOT11_CAP_ESS
 | 
DOT11_CAP_IBSS
)) {

1396 
iwe
.
cmd
 = 
SIOCGIWMODE
;

1397 i‡(
	`dtoh16
(
bi
->
ˇ∑bûôy
Ë& 
DOT11_CAP_ESS
)

1398 
iwe
.
u
.
mode
 = 
IW_MODE_INFRA
;

1400 
iwe
.
u
.
mode
 = 
IW_MODE_ADHOC
;

1401 
evít
 = 
	`IWE_STREAM_ADD_EVENT
(
öfo
,Évít, 
íd
, &
iwe
, 
IW_EV_UINT_LEN
);

1405 
iwe
.
cmd
 = 
SIOCGIWFREQ
;

1406 
iwe
.
u
.
‰eq
.
m
 = 
	`wf_ch™√l2mhz
(
	`CHSPEC_CHANNEL
(
bi
->
ch™•ec
),

1407 
	`CHSPEC_CHANNEL
(
bi
->
ch™•ec
Ë<
CH_MAX_2G_CHANNEL
 ?

1408 
WF_CHAN_FACTOR_2_4_G
 : 
WF_CHAN_FACTOR_5_G
);

1409 
iwe
.
u
.
‰eq
.
e
 = 6;

1410 
evít
 = 
	`IWE_STREAM_ADD_EVENT
(
öfo
,Évít, 
íd
, &
iwe
, 
IW_EV_FREQ_LEN
);

1413 
iwe
.
cmd
 = 
IWEVQUAL
;

1414 
iwe
.
u
.
quÆ
.quÆ = 
	`rssi_to_quÆ
(
	`dtoh16
(
bi
->
RSSI
));

1415 
iwe
.
u
.
quÆ
.
Àvñ
 = 0x100 + 
	`dtoh16
(
bi
->
RSSI
);

1416 
iwe
.
u
.
quÆ
.
noi£
 = 0x100 + 
bi
->
phy_noi£
;

1417 
evít
 = 
	`IWE_STREAM_ADD_EVENT
(
öfo
,Évít, 
íd
, &
iwe
, 
IW_EV_QUAL_LEN
);

1420 
	`wl_iw_h™dÀ_sˇƒesu…s_õs
(&
evít
, 
íd
, 
öfo
, 
bi
);

1423 
iwe
.
cmd
 = 
SIOCGIWENCODE
;

1424 i‡(
	`dtoh16
(
bi
->
ˇ∑bûôy
Ë& 
DOT11_CAP_PRIVACY
)

1425 
iwe
.
u
.
d©a
.
Êags
 = 
IW_ENCODE_ENABLED
 | 
IW_ENCODE_NOKEY
;

1427 
iwe
.
u
.
d©a
.
Êags
 = 
IW_ENCODE_DISABLED
;

1428 
iwe
.
u
.
d©a
.
Àngth
 = 0;

1429 
evít
 = 
	`IWE_STREAM_ADD_POINT
(
öfo
,Évít, 
íd
, &
iwe
, (*)event);

1432 i‡(
bi
->
øã£t
.
cou¡
) {

1433 
vÆue
 = 
evít
 + 
IW_EV_LCP_LEN
;

1434 
iwe
.
cmd
 = 
SIOCGIWRATE
;

1436 
iwe
.
u
.
bôøã
.
fixed
 = iwe.u.bôøã.
dißbÀd
 = 0;

1437 
j
 = 0; j < 
bi
->
øã£t
.
cou¡
 && j < 
IW_MAX_BITRATES
; j++) {

1438 
iwe
.
u
.
bôøã
.
vÆue
 = (
bi
->
øã£t
.
øãs
[
j
] & 0x7f) * 500000;

1439 
vÆue
 = 
	`IWE_STREAM_ADD_VALUE
(
öfo
, 
evít
, vÆue, 
íd
, &
iwe
,

1440 
IW_EV_PARAM_LEN
);

1442 
evít
 = 
vÆue
;

1446 
	`k‰ì
(
li°
);

1448 
dwrq
->
Àngth
 = 
evít
 - 
exåa
;

1449 
dwrq
->
Êags
 = 0;

1452 
	}
}

1455 
	$wl_iw_isˇn_gë_sˇn
(

1456 
√t_devi˚
 *
dev
,

1457 
iw_ªque°_öfo
 *
öfo
,

1458 
iw_poöt
 *
dwrq
,

1459 *
exåa


1462 
wl_sˇn_ªsu…s_t
 *
li°
;

1463 
iw_evít
 
iwe
;

1464 
wl_bss_öfo_t
 *
bi
 = 
NULL
;

1465 
ii
, 
j
;

1466 
≠˙t
;

1467 *
evít
 = 
exåa
, *
íd
 =Éxå®+ 
dwrq
->
Àngth
, *
vÆue
;

1468 
isˇn_öfo_t
 *
isˇn
 = 
g_isˇn
;

1469 
isˇn_buf_t
 * 
p_buf
;

1471 
	`WL_TRACE
(("%s: SIOCGIWSCAN\n", 
dev
->
«me
));

1473 i‡(!
exåa
)

1474  -
EINVAL
;

1477 i‡((!
isˇn
Ë|| (isˇn->
sysioc_pid
 < 0)) {

1478  
	`wl_iw_gë_sˇn
(
dev
, 
öfo
, 
dwrq
, 
exåa
);

1482 i‡(
isˇn
->
isˇn_°©e
 =
ISCAN_STATE_SCANING
)

1483  -
EAGAIN
;

1485 
≠˙t
 = 0;

1486 
p_buf
 = 
isˇn
->
li°_hdr
;

1488 
p_buf
 !
isˇn
->
li°_cur
) {

1489 
li°
 = &((
wl_isˇn_ªsu…s_t
*)
p_buf
->
isˇn_buf
)->
ªsu…s
;

1491 i‡(
li°
->
vîsi⁄
 !
WL_BSS_INFO_VERSION
) {

1492 
	`WL_ERROR
(("li°->vîsi⁄ %d !WL_BSS_INFO_VERSION\n", 
li°
->
vîsi⁄
));

1495 
bi
 = 
NULL
;

1496 
ii
 = 0; iò< 
li°
->
cou¡
 && 
≠˙t
 < 
IW_MAX_AP
;ápcnt++, ii++) {

1497 
bi
 = bò? (
wl_bss_öfo_t
 *)((
uöçå
)bò+ 
	`dtoh32
(bi->
Àngth
)Ë: 
li°
->
bss_öfo
;

1498 
	`ASSERT
(((
uöçå
)
bi
 + 
	`dtoh32
(bi->
Àngth
)Ë<((uöçå)
li°
 +

1499 
WLC_IW_ISCAN_MAXLEN
));

1502 i‡(
evít
 + 
ETHER_ADDR_LEN
 + 
bi
->
SSID_Àn
 + 
IW_EV_UINT_LEN
 + 
IW_EV_FREQ_LEN
 +

1503 
IW_EV_QUAL_LEN
 >
íd
)

1504  -
E2BIG
;

1506 
iwe
.
cmd
 = 
SIOCGIWAP
;

1507 
iwe
.
u
.
≠_addr
.
ß_Ámûy
 = 
ARPHRD_ETHER
;

1508 
	`mem˝y
(
iwe
.
u
.
≠_addr
.
ß_d©a
, &
bi
->
BSSID
, 
ETHER_ADDR_LEN
);

1509 
evít
 = 
	`IWE_STREAM_ADD_EVENT
(
öfo
,Évít, 
íd
, &
iwe
, 
IW_EV_ADDR_LEN
);

1512 
iwe
.
u
.
d©a
.
Àngth
 = 
	`dtoh32
(
bi
->
SSID_Àn
);

1513 
iwe
.
cmd
 = 
SIOCGIWESSID
;

1514 
iwe
.
u
.
d©a
.
Êags
 = 1;

1515 
evít
 = 
	`IWE_STREAM_ADD_POINT
(
öfo
,Évít, 
íd
, &
iwe
, 
bi
->
SSID
);

1518 i‡(
	`dtoh16
(
bi
->
ˇ∑bûôy
Ë& (
DOT11_CAP_ESS
 | 
DOT11_CAP_IBSS
)) {

1519 
iwe
.
cmd
 = 
SIOCGIWMODE
;

1520 i‡(
	`dtoh16
(
bi
->
ˇ∑bûôy
Ë& 
DOT11_CAP_ESS
)

1521 
iwe
.
u
.
mode
 = 
IW_MODE_INFRA
;

1523 
iwe
.
u
.
mode
 = 
IW_MODE_ADHOC
;

1524 
evít
 = 
	`IWE_STREAM_ADD_EVENT
(
öfo
,Évít, 
íd
, &
iwe
, 
IW_EV_UINT_LEN
);

1528 
iwe
.
cmd
 = 
SIOCGIWFREQ
;

1529 
iwe
.
u
.
‰eq
.
m
 = 
	`wf_ch™√l2mhz
(
	`CHSPEC_CHANNEL
(
bi
->
ch™•ec
),

1530 
	`CHSPEC_CHANNEL
(
bi
->
ch™•ec
Ë<
CH_MAX_2G_CHANNEL
 ?

1531 
WF_CHAN_FACTOR_2_4_G
 : 
WF_CHAN_FACTOR_5_G
);

1532 
iwe
.
u
.
‰eq
.
e
 = 6;

1533 
evít
 = 
	`IWE_STREAM_ADD_EVENT
(
öfo
,Évít, 
íd
, &
iwe
, 
IW_EV_FREQ_LEN
);

1536 
iwe
.
cmd
 = 
IWEVQUAL
;

1537 
iwe
.
u
.
quÆ
.quÆ = 
	`rssi_to_quÆ
(
	`dtoh16
(
bi
->
RSSI
));

1538 
iwe
.
u
.
quÆ
.
Àvñ
 = 0x100 + 
	`dtoh16
(
bi
->
RSSI
);

1539 
iwe
.
u
.
quÆ
.
noi£
 = 0x100 + 
bi
->
phy_noi£
;

1540 
evít
 = 
	`IWE_STREAM_ADD_EVENT
(
öfo
,Évít, 
íd
, &
iwe
, 
IW_EV_QUAL_LEN
);

1543 
	`wl_iw_h™dÀ_sˇƒesu…s_õs
(&
evít
, 
íd
, 
öfo
, 
bi
);

1546 
iwe
.
cmd
 = 
SIOCGIWENCODE
;

1547 i‡(
	`dtoh16
(
bi
->
ˇ∑bûôy
Ë& 
DOT11_CAP_PRIVACY
)

1548 
iwe
.
u
.
d©a
.
Êags
 = 
IW_ENCODE_ENABLED
 | 
IW_ENCODE_NOKEY
;

1550 
iwe
.
u
.
d©a
.
Êags
 = 
IW_ENCODE_DISABLED
;

1551 
iwe
.
u
.
d©a
.
Àngth
 = 0;

1552 
evít
 = 
	`IWE_STREAM_ADD_POINT
(
öfo
,Évít, 
íd
, &
iwe
, (*)event);

1555 i‡(
bi
->
øã£t
.
cou¡
 <(bi->øã£t.
øãs
)) {

1556 i‡(
evít
 + 
IW_MAX_BITRATES
*
IW_EV_PARAM_LEN
 >
íd
)

1557  -
E2BIG
;

1559 
vÆue
 = 
evít
 + 
IW_EV_LCP_LEN
;

1560 
iwe
.
cmd
 = 
SIOCGIWRATE
;

1562 
iwe
.
u
.
bôøã
.
fixed
 = iwe.u.bôøã.
dißbÀd
 = 0;

1563 
j
 = 0; j < 
bi
->
øã£t
.
cou¡
 && j < 
IW_MAX_BITRATES
; j++) {

1564 
iwe
.
u
.
bôøã
.
vÆue
 = (
bi
->
øã£t
.
øãs
[
j
] & 0x7f) * 500000;

1565 
vÆue
 = 
	`IWE_STREAM_ADD_VALUE
(
öfo
, 
evít
, vÆue, 
íd
, &
iwe
,

1566 
IW_EV_PARAM_LEN
);

1568 
evít
 = 
vÆue
;

1571 
p_buf
 =Ö_buf->
√xt
;

1574 
dwrq
->
Àngth
 = 
evít
 - 
exåa
;

1575 
dwrq
->
Êags
 = 0;

1578 
	}
}

1584 
	$wl_iw_£t_essid
(

1585 
√t_devi˚
 *
dev
,

1586 
iw_ªque°_öfo
 *
öfo
,

1587 
iw_poöt
 *
dwrq
,

1588 *
exåa


1591 
wlc_ssid_t
 
ssid
;

1592 
îr‹
;

1594 
	`WL_TRACE
(("%s: SIOCSIWESSID\n", 
dev
->
«me
));

1597 
	`mem£t
(&
ssid
, 0, (ssid));

1598 i‡(
dwrq
->
Àngth
 && 
exåa
) {

1599 #i‡
WIRELESS_EXT
 > 20

1600 
ssid
.
SSID_Àn
 = 
	`MIN
((ssid.
SSID
), 
dwrq
->
Àngth
);

1602 
ssid
.
SSID_Àn
 = 
	`MIN
((ssid.
SSID
), 
dwrq
->
Àngth
-1);

1604 
	`mem˝y
(
ssid
.
SSID
, 
exåa
, ssid.
SSID_Àn
);

1605 
ssid
.
SSID_Àn
 = 
	`htod32
(ssid.SSID_len);

1607 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_SET_SSID
, &
ssid
, (ssid))))

1608  
îr‹
;

1612 
scb_vÆ_t
 
scbvÆ
;

1613 
	`bzîo
(&
scbvÆ
, (
scb_vÆ_t
));

1614 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_DISASSOC
, &
scbvÆ
, (
scb_vÆ_t
))))

1615  
îr‹
;

1618 
	}
}

1621 
	$wl_iw_gë_essid
(

1622 
√t_devi˚
 *
dev
,

1623 
iw_ªque°_öfo
 *
öfo
,

1624 
iw_poöt
 *
dwrq
,

1625 *
exåa


1628 
wlc_ssid_t
 
ssid
;

1629 
îr‹
;

1631 
	`WL_TRACE
(("%s: SIOCGIWESSID\n", 
dev
->
«me
));

1633 i‡(!
exåa
)

1634  -
EINVAL
;

1636 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_SSID
, &
ssid
, (ssid)))) {

1637 
	`WL_ERROR
(("Error gettingÅhe SSID\n"));

1638  
îr‹
;

1641 
ssid
.
SSID_Àn
 = 
	`dtoh32
(ssid.SSID_len);

1644 
	`mem˝y
(
exåa
, 
ssid
.
SSID
, ssid.
SSID_Àn
);

1646 
dwrq
->
Àngth
 = 
ssid
.
SSID_Àn
;

1648 
dwrq
->
Êags
 = 1;

1651 
	}
}

1654 
	$wl_iw_£t_nick
(

1655 
√t_devi˚
 *
dev
,

1656 
iw_ªque°_öfo
 *
öfo
,

1657 
iw_poöt
 *
dwrq
,

1658 *
exåa


1661 
wl_iw_t
 *
iw
 = 
	`IW_DEV_IF
(
dev
);

1662 
	`WL_TRACE
(("%s: SIOCSIWNICKN\n", 
dev
->
«me
));

1664 i‡(!
exåa
)

1665  -
EINVAL
;

1668 i‡(
dwrq
->
Àngth
 > (
iw
->
nick«me
))

1669  -
E2BIG
;

1671 
	`mem˝y
(
iw
->
nick«me
, 
exåa
, 
dwrq
->
Àngth
);

1672 
iw
->
nick«me
[
dwrq
->
Àngth
 - 1] = '\0';

1675 
	}
}

1678 
	$wl_iw_gë_nick
(

1679 
√t_devi˚
 *
dev
,

1680 
iw_ªque°_öfo
 *
öfo
,

1681 
iw_poöt
 *
dwrq
,

1682 *
exåa


1685 
wl_iw_t
 *
iw
 = 
	`IW_DEV_IF
(
dev
);

1686 
	`WL_TRACE
(("%s: SIOCGIWNICKN\n", 
dev
->
«me
));

1688 i‡(!
exåa
)

1689  -
EINVAL
;

1691 
	`°r˝y
(
exåa
, 
iw
->
nick«me
);

1692 
dwrq
->
Àngth
 = 
	`°æí
(
exåa
) + 1;

1695 
	}
}

1697 
	$wl_iw_£t_øã
(

1698 
√t_devi˚
 *
dev
,

1699 
iw_ªque°_öfo
 *
öfo
,

1700 
iw_∑øm
 *
vwrq
,

1701 *
exåa


1704 
wl_øã£t_t
 
øã£t
;

1705 
îr‹
, 
øã
, 
i
, 
îr‹_bg
, 
îr‹_a
;

1707 
	`WL_TRACE
(("%s: SIOCSIWRATE\n", 
dev
->
«me
));

1710 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_CURR_RATESET
, &
øã£t
, (rateset))))

1711  
îr‹
;

1713 
øã£t
.
cou¡
 = 
	`dtoh32
(rateset.count);

1715 i‡(
vwrq
->
vÆue
 < 0) {

1717 
øã
 = 
øã£t
.
øãs
[øã£t.
cou¡
 - 1] & 0x7f;

1718 } i‡(
vwrq
->
vÆue
 < 
øã£t
.
cou¡
) {

1720 
øã
 = 
øã£t
.
øãs
[
vwrq
->
vÆue
] & 0x7f;

1723 
øã
 = 
vwrq
->
vÆue
 / 500000;

1726 i‡(
vwrq
->
fixed
) {

1731 
îr‹_bg
 = 
	`dev_wlc_ötv¨_£t
(
dev
, "bg_øã", 
øã
);

1732 
îr‹_a
 = 
	`dev_wlc_ötv¨_£t
(
dev
, "a_øã", 
øã
);

1734 i‡(
îr‹_bg
 && 
îr‹_a
)

1735  (
îr‹_bg
 | 
îr‹_a
);

1742 
îr‹_bg
 = 
	`dev_wlc_ötv¨_£t
(
dev
, "bg_rate", 0);

1744 
îr‹_a
 = 
	`dev_wlc_ötv¨_£t
(
dev
, "a_rate", 0);

1746 i‡(
îr‹_bg
 && 
îr‹_a
)

1747  (
îr‹_bg
 | 
îr‹_a
);

1750 
i
 = 0; i < 
øã£t
.
cou¡
; i++)

1751 i‡((
øã£t
.
øãs
[
i
] & 0x7fË> 
øã
)

1753 
øã£t
.
cou¡
 = 
	`htod32
(
i
);

1756 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_SET_RATESET
, &
øã£t
, (rateset))))

1757  
îr‹
;

1761 
	}
}

1763 
	$wl_iw_gë_øã
(

1764 
√t_devi˚
 *
dev
,

1765 
iw_ªque°_öfo
 *
öfo
,

1766 
iw_∑øm
 *
vwrq
,

1767 *
exåa


1770 
îr‹
, 
øã
;

1772 
	`WL_TRACE
(("%s: SIOCGIWRATE\n", 
dev
->
«me
));

1775 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_RATE
, &
øã
, (rate))))

1776  
îr‹
;

1777 
øã
 = 
	`dtoh32
(rate);

1778 
vwrq
->
vÆue
 = 
øã
 * 500000;

1781 
	}
}

1784 
	$wl_iw_£t_πs
(

1785 
√t_devi˚
 *
dev
,

1786 
iw_ªque°_öfo
 *
öfo
,

1787 
iw_∑øm
 *
vwrq
,

1788 *
exåa


1791 
îr‹
, 
πs
;

1793 
	`WL_TRACE
(("%s: SIOCSIWRTS\n", 
dev
->
«me
));

1795 i‡(
vwrq
->
dißbÀd
)

1796 
πs
 = 
DOT11_DEFAULT_RTS_LEN
;

1797 i‡(
vwrq
->
vÆue
 < 0 || vwrq->vÆuê> 
DOT11_DEFAULT_RTS_LEN
)

1798  -
EINVAL
;

1800 
πs
 = 
vwrq
->
vÆue
;

1802 i‡((
îr‹
 = 
	`dev_wlc_ötv¨_£t
(
dev
, "π°hªsh", 
πs
)))

1803  
îr‹
;

1806 
	}
}

1809 
	$wl_iw_gë_πs
(

1810 
√t_devi˚
 *
dev
,

1811 
iw_ªque°_öfo
 *
öfo
,

1812 
iw_∑øm
 *
vwrq
,

1813 *
exåa


1816 
îr‹
, 
πs
;

1818 
	`WL_TRACE
(("%s: SIOCGIWRTS\n", 
dev
->
«me
));

1820 i‡((
îr‹
 = 
	`dev_wlc_ötv¨_gë
(
dev
, "π°hªsh", &
πs
)))

1821  
îr‹
;

1823 
vwrq
->
vÆue
 = 
πs
;

1824 
vwrq
->
dißbÀd
 = (
πs
 >
DOT11_DEFAULT_RTS_LEN
);

1825 
vwrq
->
fixed
 = 1;

1828 
	}
}

1831 
	$wl_iw_£t_‰ag
(

1832 
√t_devi˚
 *
dev
,

1833 
iw_ªque°_öfo
 *
öfo
,

1834 
iw_∑øm
 *
vwrq
,

1835 *
exåa


1838 
îr‹
, 
‰ag
;

1840 
	`WL_TRACE
(("%s: SIOCSIWFRAG\n", 
dev
->
«me
));

1842 i‡(
vwrq
->
dißbÀd
)

1843 
‰ag
 = 
DOT11_DEFAULT_FRAG_LEN
;

1844 i‡(
vwrq
->
vÆue
 < 0 || vwrq->vÆuê> 
DOT11_DEFAULT_FRAG_LEN
)

1845  -
EINVAL
;

1847 
‰ag
 = 
vwrq
->
vÆue
;

1849 i‡((
îr‹
 = 
	`dev_wlc_ötv¨_£t
(
dev
, "‰agthªsh", 
‰ag
)))

1850  
îr‹
;

1853 
	}
}

1856 
	$wl_iw_gë_‰ag
(

1857 
√t_devi˚
 *
dev
,

1858 
iw_ªque°_öfo
 *
öfo
,

1859 
iw_∑øm
 *
vwrq
,

1860 *
exåa


1863 
îr‹
, 
‰agthªshﬁd
;

1865 
	`WL_TRACE
(("%s: SIOCGIWFRAG\n", 
dev
->
«me
));

1867 i‡((
îr‹
 = 
	`dev_wlc_ötv¨_gë
(
dev
, "‰agthªsh", &
‰agthªshﬁd
)))

1868  
îr‹
;

1870 
vwrq
->
vÆue
 = 
‰agthªshﬁd
;

1871 
vwrq
->
dißbÀd
 = (
‰agthªshﬁd
 >
DOT11_DEFAULT_FRAG_LEN
);

1872 
vwrq
->
fixed
 = 1;

1875 
	}
}

1878 
	$wl_iw_£t_txpow
(

1879 
√t_devi˚
 *
dev
,

1880 
iw_ªque°_öfo
 *
öfo
,

1881 
iw_∑øm
 *
vwrq
,

1882 *
exåa


1885 
îr‹
, 
dißbÀ
;

1886 
uöt16
 
txpwrmw
;

1887 
	`WL_TRACE
(("%s: SIOCSIWTXPOW\n", 
dev
->
«me
));

1890 
dißbÀ
 = 
vwrq
->
dißbÀd
 ? 
WL_RADIO_SW_DISABLE
 : 0;

1891 
dißbÀ
 +
WL_RADIO_SW_DISABLE
 << 16;

1893 
dißbÀ
 = 
	`htod32
(disable);

1894 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_SET_RADIO
, &
dißbÀ
, (disable))))

1895  
îr‹
;

1898 i‡(
dißbÀ
 & 
WL_RADIO_SW_DISABLE
)

1902 i‡(!(
vwrq
->
Êags
 & 
IW_TXPOW_MWATT
))

1903  -
EINVAL
;

1906 i‡(
vwrq
->
vÆue
 < 0)

1909 i‡(
vwrq
->
vÆue
 > 0xffffË
txpwrmw
 = 0xffff;

1910 
txpwrmw
 = (
uöt16
)
vwrq
->
vÆue
;

1913 
îr‹
 = 
	`dev_wlc_ötv¨_£t
(
dev
, "qtxpowî", ()(
	`bcm_mw_to_qdbm
(
txpwrmw
)));

1914  
îr‹
;

1915 
	}
}

1918 
	$wl_iw_gë_txpow
(

1919 
√t_devi˚
 *
dev
,

1920 
iw_ªque°_öfo
 *
öfo
,

1921 
iw_∑øm
 *
vwrq
,

1922 *
exåa


1925 
îr‹
, 
dißbÀ
, 
txpwrdbm
;

1926 
uöt8
 
ªsu…
;

1928 
	`WL_TRACE
(("%s: SIOCGIWTXPOW\n", 
dev
->
«me
));

1930 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_RADIO
, &
dißbÀ
, (disable))) ||

1931 (
îr‹
 = 
	`dev_wlc_ötv¨_gë
(
dev
, "qtxpowî", &
txpwrdbm
)))

1932  
îr‹
;

1934 
dißbÀ
 = 
	`dtoh32
(disable);

1935 
ªsu…
 = (
uöt8
)(
txpwrdbm
 & ~
WL_TXPWR_OVERRIDE
);

1936 
vwrq
->
vÆue
 = (
öt32
)
	`bcm_qdbm_to_mw
(
ªsu…
);

1937 
vwrq
->
fixed
 = 0;

1938 
vwrq
->
dißbÀd
 = (
dißbÀ
 & (
WL_RADIO_SW_DISABLE
 | 
WL_RADIO_HW_DISABLE
)) ? 1 : 0;

1939 
vwrq
->
Êags
 = 
IW_TXPOW_MWATT
;

1942 
	}
}

1944 #i‡
WIRELESS_EXT
 > 10

1946 
	$wl_iw_£t_ªåy
(

1947 
√t_devi˚
 *
dev
,

1948 
iw_ªque°_öfo
 *
öfo
,

1949 
iw_∑øm
 *
vwrq
,

1950 *
exåa


1953 
îr‹
, 
Ãl
, 
§l
;

1955 
	`WL_TRACE
(("%s: SIOCSIWRETRY\n", 
dev
->
«me
));

1958 i‡(
vwrq
->
dißbÀd
 || (vwrq->
Êags
 & 
IW_RETRY_LIFETIME
))

1959  -
EINVAL
;

1962 i‡(
vwrq
->
Êags
 & 
IW_RETRY_LIMIT
) {

1964 #i‡
WIRELESS_EXT
 > 20

1965 i‡((
vwrq
->
Êags
 & 
IW_RETRY_LONG
Ë||(vwrq->Êag†& 
IW_RETRY_MAX
) ||

1966 !((
vwrq
->
Êags
 & 
IW_RETRY_SHORT
Ë|| (vwrq->Êag†& 
IW_RETRY_MIN
))) {

1968 i‡((
vwrq
->
Êags
 & 
IW_RETRY_MAX
Ë|| !(vwrq->Êag†& 
IW_RETRY_MIN
)) {

1971 
Ãl
 = 
	`htod32
(
vwrq
->
vÆue
);

1972 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_SET_LRL
, &
Ãl
, (lrl))))

1973  
îr‹
;

1976 #i‡
WIRELESS_EXT
 > 20

1977 i‡((
vwrq
->
Êags
 & 
IW_RETRY_SHORT
Ë||(vwrq->Êag†& 
IW_RETRY_MIN
) ||

1978 !((
vwrq
->
Êags
 & 
IW_RETRY_LONG
Ë|| (vwrq->Êag†& 
IW_RETRY_MAX
))) {

1980 i‡((
vwrq
->
Êags
 & 
IW_RETRY_MIN
Ë|| !(vwrq->Êag†& 
IW_RETRY_MAX
)) {

1983 
§l
 = 
	`htod32
(
vwrq
->
vÆue
);

1984 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_SET_SRL
, &
§l
, (srl))))

1985  
îr‹
;

1990 
	}
}

1993 
	$wl_iw_gë_ªåy
(

1994 
√t_devi˚
 *
dev
,

1995 
iw_ªque°_öfo
 *
öfo
,

1996 
iw_∑øm
 *
vwrq
,

1997 *
exåa


2000 
îr‹
, 
Ãl
, 
§l
;

2002 
	`WL_TRACE
(("%s: SIOCGIWRETRY\n", 
dev
->
«me
));

2004 
vwrq
->
dißbÀd
 = 0;

2007 i‡((
vwrq
->
Êags
 & 
IW_RETRY_TYPE
Ë=
IW_RETRY_LIFETIME
)

2008  -
EINVAL
;

2011 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_LRL
, &
Ãl
, (lrl))) ||

2012 (
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_SRL
, &
§l
, (srl))))

2013  
îr‹
;

2015 
Ãl
 = 
	`dtoh32
(lrl);

2016 
§l
 = 
	`dtoh32
(srl);

2019 i‡(
vwrq
->
Êags
 & 
IW_RETRY_MAX
) {

2020 
vwrq
->
Êags
 = 
IW_RETRY_LIMIT
 | 
IW_RETRY_MAX
;

2021 
vwrq
->
vÆue
 = 
Ãl
;

2023 
vwrq
->
Êags
 = 
IW_RETRY_LIMIT
;

2024 
vwrq
->
vÆue
 = 
§l
;

2025 i‡(
§l
 !
Ãl
)

2026 
vwrq
->
Êags
 |
IW_RETRY_MIN
;

2030 
	}
}

2034 
	$wl_iw_£t_ícode
(

2035 
√t_devi˚
 *
dev
,

2036 
iw_ªque°_öfo
 *
öfo
,

2037 
iw_poöt
 *
dwrq
,

2038 *
exåa


2041 
wl_w£c_key_t
 
key
;

2042 
îr‹
, 
vÆ
, 
w£c
;

2044 
	`WL_TRACE
(("%s: SIOCSIWENCODE\n", 
dev
->
«me
));

2046 
	`mem£t
(&
key
, 0, (key));

2048 i‡((
dwrq
->
Êags
 & 
IW_ENCODE_INDEX
) == 0) {

2050 
key
.
ödex
 = 0; key.ödex < 
DOT11_MAX_DEFAULT_KEYS
; key.index++) {

2051 
vÆ
 = 
	`htod32
(
key
.
ödex
);

2052 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_KEY_PRIMARY
, &
vÆ
, (val))))

2053  
îr‹
;

2054 
vÆ
 = 
	`dtoh32
(val);

2055 i‡(
vÆ
)

2059 i‡(
key
.
ödex
 =
DOT11_MAX_DEFAULT_KEYS
)

2060 
key
.
ödex
 = 0;

2062 
key
.
ödex
 = (
dwrq
->
Êags
 & 
IW_ENCODE_INDEX
) - 1;

2063 i‡(
key
.
ödex
 >
DOT11_MAX_DEFAULT_KEYS
)

2064  -
EINVAL
;

2068 
w£c
 = (
dwrq
->
Êags
 & 
IW_ENCODE_DISABLED
Ë? 0 : 
WEP_ENABLED
;

2070 i‡((
îr‹
 = 
	`dev_wlc_ötv¨_£t
(
dev
, "w£c", 
w£c
)))

2071  
îr‹
;

2074 i‡(!
exåa
 || !
dwrq
->
Àngth
 || (dwrq->
Êags
 & 
IW_ENCODE_NOKEY
)) {

2076 
vÆ
 = 
	`htod32
(
key
.
ödex
);

2077 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_SET_KEY_PRIMARY
, &
vÆ
, (val))))

2078  
îr‹
;

2080 
key
.
Àn
 = 
dwrq
->
Àngth
;

2082 i‡(
dwrq
->
Àngth
 > (
key
.
d©a
))

2083  -
EINVAL
;

2085 
	`mem˝y
(
key
.
d©a
, 
exåa
, 
dwrq
->
Àngth
);

2087 
key
.
Êags
 = 
WL_PRIMARY_KEY
;

2088 
key
.
Àn
) {

2089 
WEP1_KEY_SIZE
:

2090 
key
.
Ægo
 = 
CRYPTO_ALGO_WEP1
;

2092 
WEP128_KEY_SIZE
:

2093 
key
.
Ægo
 = 
CRYPTO_ALGO_WEP128
;

2095 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 14)

2096 
TKIP_KEY_SIZE
:

2097 
key
.
Ægo
 = 
CRYPTO_ALGO_TKIP
;

2100 
AES_KEY_SIZE
:

2101 
key
.
Ægo
 = 
CRYPTO_ALGO_AES_CCM
;

2104  -
EINVAL
;

2108 
	`sw≠_key_‰om_BE
(&
key
);

2109 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_SET_KEY
, &
key
, (key))))

2110  
îr‹
;

2114 
vÆ
 = (
dwrq
->
Êags
 & 
IW_ENCODE_RESTRICTED
) ? 1 : 0;

2115 
vÆ
 = 
	`htod32
(val);

2116 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_SET_AUTH
, &
vÆ
, (val))))

2117  
îr‹
;

2120 
	}
}

2123 
	$wl_iw_gë_ícode
(

2124 
√t_devi˚
 *
dev
,

2125 
iw_ªque°_öfo
 *
öfo
,

2126 
iw_poöt
 *
dwrq
,

2127 *
exåa


2130 
wl_w£c_key_t
 
key
;

2131 
îr‹
, 
vÆ
, 
w£c
, 
auth
;

2133 
	`WL_TRACE
(("%s: SIOCGIWENCODE\n", 
dev
->
«me
));

2136 
	`bzîo
(&
key
, (
wl_w£c_key_t
));

2138 i‡((
dwrq
->
Êags
 & 
IW_ENCODE_INDEX
) == 0) {

2140 
key
.
ödex
 = 0; key.ödex < 
DOT11_MAX_DEFAULT_KEYS
; key.index++) {

2141 
vÆ
 = 
key
.
ödex
;

2142 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_KEY_PRIMARY
, &
vÆ
, (val))))

2143  
îr‹
;

2144 
vÆ
 = 
	`dtoh32
(val);

2145 i‡(
vÆ
)

2149 
key
.
ödex
 = (
dwrq
->
Êags
 & 
IW_ENCODE_INDEX
) - 1;

2151 i‡(
key
.
ödex
 >
DOT11_MAX_DEFAULT_KEYS
)

2152 
key
.
ödex
 = 0;

2156 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_WSEC
, &
w£c
, (wsec))) ||

2157 (
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_AUTH
, &
auth
, (auth))))

2158  
îr‹
;

2160 
	`sw≠_key_to_BE
(&
key
);

2162 
w£c
 = 
	`dtoh32
(wsec);

2163 
auth
 = 
	`dtoh32
(auth);

2165 
dwrq
->
Àngth
 = 
	`MIN
(
IW_ENCODING_TOKEN_MAX
, 
key
.
Àn
);

2168 
dwrq
->
Êags
 = 
key
.
ödex
 + 1;

2169 i‡(!(
w£c
 & (
WEP_ENABLED
 | 
TKIP_ENABLED
 | 
AES_ENABLED
))) {

2171 
dwrq
->
Êags
 |
IW_ENCODE_DISABLED
;

2173 i‡(
auth
) {

2175 
dwrq
->
Êags
 |
IW_ENCODE_RESTRICTED
;

2179 i‡(
dwrq
->
Àngth
 && 
exåa
)

2180 
	`mem˝y
(
exåa
, 
key
.
d©a
, 
dwrq
->
Àngth
);

2183 
	}
}

2186 
	$wl_iw_£t_powî
(

2187 
√t_devi˚
 *
dev
,

2188 
iw_ªque°_öfo
 *
öfo
,

2189 
iw_∑øm
 *
vwrq
,

2190 *
exåa


2193 
îr‹
, 
pm
;

2195 
	`WL_TRACE
(("%s: SIOCSIWPOWER\n", 
dev
->
«me
));

2197 
pm
 = 
vwrq
->
dißbÀd
 ? 
PM_OFF
 : 
PM_MAX
;

2199 
pm
 = 
	`htod32
(pm);

2200 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_SET_PM
, &
pm
, (pm))))

2201  
îr‹
;

2204 
	}
}

2207 
	$wl_iw_gë_powî
(

2208 
√t_devi˚
 *
dev
,

2209 
iw_ªque°_öfo
 *
öfo
,

2210 
iw_∑øm
 *
vwrq
,

2211 *
exåa


2214 
îr‹
, 
pm
;

2216 
	`WL_TRACE
(("%s: SIOCGIWPOWER\n", 
dev
->
«me
));

2218 i‡((
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_PM
, &
pm
, (pm))))

2219  
îr‹
;

2221 
pm
 = 
	`dtoh32
(pm);

2222 
vwrq
->
dißbÀd
 = 
pm
 ? 0 : 1;

2223 
vwrq
->
Êags
 = 
IW_POWER_ALL_R
;

2226 
	}
}

2228 #i‡
WIRELESS_EXT
 > 17

2230 
	$wl_iw_£t_w∑õ
(

2231 
√t_devi˚
 *
dev
,

2232 
iw_ªque°_öfo
 *
öfo
,

2233 
iw_poöt
 *
iwp
,

2234 *
exåa


2237 
	`dev_wlc_bufv¨_£t
(
dev
, "w∑õ", 
exåa
, 
iwp
->
Àngth
);

2240 
	}
}

2243 
	$wl_iw_gë_w∑õ
(

2244 
√t_devi˚
 *
dev
,

2245 
iw_ªque°_öfo
 *
öfo
,

2246 
iw_poöt
 *
iwp
,

2247 *
exåa


2250 
	`WL_TRACE
(("%s: SIOCGIWGENIE\n", 
dev
->
«me
));

2251 
iwp
->
Àngth
 = 64;

2252 
	`dev_wlc_bufv¨_gë
(
dev
, "w∑õ", 
exåa
, 
iwp
->
Àngth
);

2254 
	}
}

2257 
	$wl_iw_£t_ícodìxt
(

2258 
√t_devi˚
 *
dev
,

2259 
iw_ªque°_öfo
 *
öfo
,

2260 
iw_poöt
 *
dwrq
,

2261 *
exåa


2264 
wl_w£c_key_t
 
key
;

2265 
îr‹
;

2266 
iw_ícode_ext
 *
iwe
;

2268 
	`WL_TRACE
(("%s: SIOCSIWENCODEEXT\n", 
dev
->
«me
));

2270 
	`mem£t
(&
key
, 0, (key));

2271 
iwe
 = (
iw_ícode_ext
 *)
exåa
;

2274 i‡(
dwrq
->
Êags
 & 
IW_ENCODE_DISABLED
) {

2279 
key
.
ödex
 = 0;

2280 i‡(
dwrq
->
Êags
 & 
IW_ENCODE_INDEX
)

2281 
key
.
ödex
 = (
dwrq
->
Êags
 & 
IW_ENCODE_INDEX
) - 1;

2283 
key
.
Àn
 = 
iwe
->
key_Àn
;

2286 i‡(!
	`ETHER_ISMULTI
(
iwe
->
addr
.
ß_d©a
))

2287 
	`bc›y
((*)&
iwe
->
addr
.
ß_d©a
, (*)&
key
.
ó
, 
ETHER_ADDR_LEN
);

2290 i‡(
key
.
Àn
 == 0) {

2291 i‡(
iwe
->
ext_Êags
 & 
IW_ENCODE_EXT_SET_TX_KEY
) {

2292 
	`WL_WSEC
(("Ch™gögÅhêthê¥im¨y KeyÅÿ%d\n", 
key
.
ödex
));

2294 
key
.
ödex
 = 
	`htod32
(key.index);

2295 
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_SET_KEY_PRIMARY
,

2296 &
key
.
ödex
, (key.index));

2297 i‡(
îr‹
)

2298  
îr‹
;

2302 
	`sw≠_key_‰om_BE
(&
key
);

2303 
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_SET_KEY
, &
key
, (key));

2304 i‡(
îr‹
)

2305  
îr‹
;

2308 #i‡(
	`deföed
(
BCMSUP_PSK
Ë&& deföed(
WLFBT
))

2313 i‡(
iwe
->
Æg
 =
IW_ENCODE_ALG_PMK
) {

2314 
j
;

2315 
w£c_pmk_t
 
pmk
;

2316 
key°rög
[
WSEC_MAX_PSK_LEN
 + 1];

2317 * 
ch¨±r
 = 
key°rög
;

2318 
uöt
 
Àn
;

2321 
j
 = 0; j < (
WSEC_MAX_PSK_LEN
 / 2); j++) {

2322 
	`•rötf
(
ch¨±r
, "%02x", 
iwe
->
key
[
j
]);

2323 
ch¨±r
 += 2;

2325 
Àn
 = 
	`°æí
(
key°rög
);

2326 
pmk
.
key_Àn
 = 
	`htod16
(
Àn
);

2327 
	`bc›y
(
key°rög
, 
pmk
.
key
, 
Àn
);

2328 
pmk
.
Êags
 = 
	`htod16
(
WSEC_PASSPHRASE
);

2330 
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_SET_WSEC_PMK
, &
pmk
, (pmk));

2331 i‡(
îr‹
)

2332  
îr‹
;

2337 i‡(
iwe
->
key_Àn
 > (
key
.
d©a
))

2338  -
EINVAL
;

2340 
	`WL_WSEC
(("SëtögÅhêkey index %d\n", 
key
.
ödex
));

2341 i‡(
iwe
->
ext_Êags
 & 
IW_ENCODE_EXT_SET_TX_KEY
) {

2342 
	`WL_WSEC
(("key isá Primary Key\n"));

2343 
key
.
Êags
 = 
WL_PRIMARY_KEY
;

2346 
	`bc›y
((*)
iwe
->
key
, key.
d©a
, iwe->
key_Àn
);

2348 i‡(
iwe
->
Æg
 =
IW_ENCODE_ALG_TKIP
) {

2349 
uöt8
 
keybuf
[8];

2350 
	`bc›y
(&
key
.
d©a
[24], 
keybuf
, (keybuf));

2351 
	`bc›y
(&
key
.
d©a
[16], &key.d©a[24], (
keybuf
));

2352 
	`bc›y
(
keybuf
, &
key
.
d©a
[16], (keybuf));

2356 i‡(
iwe
->
ext_Êags
 & 
IW_ENCODE_EXT_RX_SEQ_VALID
) {

2357 
uch¨
 *
iv±r
;

2358 
iv±r
 = (
uch¨
 *)
iwe
->
rx_£q
;

2359 
key
.
rxiv
.
hi
 = (
iv±r
[5] << 24) | (ivptr[4] << 16) |

2360 (
iv±r
[3] << 8) | ivptr[2];

2361 
key
.
rxiv
.
lo
 = (
iv±r
[1] << 8) | ivptr[0];

2362 
key
.
iv_öôülized
 = 
TRUE
;

2365 
iwe
->
Æg
) {

2366 
IW_ENCODE_ALG_NONE
:

2367 
key
.
Ægo
 = 
CRYPTO_ALGO_OFF
;

2369 
IW_ENCODE_ALG_WEP
:

2370 i‡(
iwe
->
key_Àn
 =
WEP1_KEY_SIZE
)

2371 
key
.
Ægo
 = 
CRYPTO_ALGO_WEP1
;

2373 
key
.
Ægo
 = 
CRYPTO_ALGO_WEP128
;

2375 
IW_ENCODE_ALG_TKIP
:

2376 
key
.
Ægo
 = 
CRYPTO_ALGO_TKIP
;

2378 
IW_ENCODE_ALG_CCMP
:

2379 
key
.
Ægo
 = 
CRYPTO_ALGO_AES_CCM
;

2384 
	`sw≠_key_‰om_BE
(&
key
);

2386 
	`dhd_waô_≥nd8021x
(
dev
);

2388 
îr‹
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_SET_KEY
, &
key
, (key));

2389 i‡(
îr‹
)

2390  
îr‹
;

2393 
	}
}

2396 #i‡
WIRELESS_EXT
 > 17

2398 
pmkid_li°_t
 
	mpmkids
;

2399 
pmkid_t
 
	mfoo
[
MAXPMKID
-1];

2400 } 
	gpmkid_li°
;

2402 
	$wl_iw_£t_pmkß
(

2403 
√t_devi˚
 *
dev
,

2404 
iw_ªque°_öfo
 *
öfo
,

2405 
iw_∑øm
 *
vwrq
,

2406 *
exåa


2409 
iw_pmkß
 *
iwpmkß
;

2410 
uöt
 
i
;

2411 
óbuf
[
ETHER_ADDR_STR_LEN
];

2412 
pmkid_t
 * 
pmkid_¨øy
 = 
pmkid_li°
.
pmkids
.
pmkid
;

2414 
	`WL_TRACE
(("%s: SIOCSIWPMKSA\n", 
dev
->
«me
));

2415 
iwpmkß
 = (
iw_pmkß
 *)
exåa
;

2416 
	`bzîo
((*)
óbuf
, 
ETHER_ADDR_STR_LEN
);

2417 i‡(
iwpmkß
->
cmd
 =
IW_PMKSA_FLUSH
) {

2418 
	`WL_TRACE
(("wl_iw_set_pmksa - IW_PMKSA_FLUSH\n"));

2419 
	`bzîo
((*)&
pmkid_li°
, (pmkid_list));

2421 i‡(
iwpmkß
->
cmd
 =
IW_PMKSA_REMOVE
) {

2422 
pmkid_li°_t
 
pmkid
, *
pmkid±r
;

2423 
pmkid±r
 = &
pmkid
;

2424 
	`bc›y
(&
iwpmkß
->
bssid
.
ß_d©a
[0], &
pmkid±r
->
pmkid
[0].
BSSID
, 
ETHER_ADDR_LEN
);

2425 
	`bc›y
(&
iwpmkß
->
pmkid
[0], &
pmkid±r
->pmkid[0].
PMKID
, 
WPA2_PMKID_LEN
);

2427 
uöt
 
j
;

2428 
	`WL_TRACE
(("wl_iw_set_pmksa,IW_PMKSA_REMOVE - PMKID: %s = ",

2429 
	`bcm_ëhî_¡ﬂ
(&
pmkid±r
->
pmkid
[0].
BSSID
,

2430 
óbuf
)));

2431 
j
 = 0; j < 
WPA2_PMKID_LEN
; j++)

2432 
	`WL_TRACE
(("%02x ", 
pmkid±r
->
pmkid
[0].
PMKID
[
j
]));

2433 
	`WL_TRACE
(("\n"));

2435 
i
 = 0; i < 
pmkid_li°
.
pmkids
.
≈mkid
; i++)

2436 i‡(!
	`bcmp
(&
iwpmkß
->
bssid
.
ß_d©a
[0], &
pmkid_¨øy
[
i
].
BSSID
,

2437 
ETHER_ADDR_LEN
))

2439 ; 
i
 < 
pmkid_li°
.
pmkids
.
≈mkid
; i++) {

2440 
	`bc›y
(&
pmkid_¨øy
[
i
+1].
BSSID
,

2441 &
pmkid_¨øy
[
i
].
BSSID
,

2442 
ETHER_ADDR_LEN
);

2443 
	`bc›y
(&
pmkid_¨øy
[
i
+1].
PMKID
,

2444 &
pmkid_¨øy
[
i
].
PMKID
,

2445 
WPA2_PMKID_LEN
);

2447 
pmkid_li°
.
pmkids
.
≈mkid
--;

2449 i‡(
iwpmkß
->
cmd
 =
IW_PMKSA_ADD
) {

2450 
	`bc›y
(&
iwpmkß
->
bssid
.
ß_d©a
[0],

2451 &
pmkid_¨øy
[
pmkid_li°
.
pmkids
.
≈mkid
].
BSSID
,

2452 
ETHER_ADDR_LEN
);

2453 
	`bc›y
(&
iwpmkß
->
pmkid
[0], &
pmkid_¨øy
[
pmkid_li°
.
pmkids
.
≈mkid
].
PMKID
,

2454 
WPA2_PMKID_LEN
);

2456 
uöt
 
j
;

2457 
uöt
 
k
;

2458 
k
 = 
pmkid_li°
.
pmkids
.
≈mkid
;

2459 
	`BCM_REFERENCE
(
k
);

2460 
	`WL_TRACE
(("wl_iw_set_pmksa,IW_PMKSA_ADD - PMKID: %s = ",

2461 
	`bcm_ëhî_¡ﬂ
(&
pmkid_¨øy
[
k
].
BSSID
,

2462 
óbuf
)));

2463 
j
 = 0; j < 
WPA2_PMKID_LEN
; j++)

2464 
	`WL_TRACE
(("%02x ", 
pmkid_¨øy
[
k
].
PMKID
[
j
]));

2465 
	`WL_TRACE
(("\n"));

2467 
pmkid_li°
.
pmkids
.
≈mkid
++;

2469 
	`WL_TRACE
(("PRINTINGÖmkid LIST - Nÿo‡ñemít†%d\n", 
pmkid_li°
.
pmkids
.
≈mkid
));

2470 
i
 = 0; i < 
pmkid_li°
.
pmkids
.
≈mkid
; i++) {

2471 
uöt
 
j
;

2472 
	`WL_TRACE
(("PMKID[%d]: %†", 
i
,

2473 
	`bcm_ëhî_¡ﬂ
(&
pmkid_¨øy
[
i
].
BSSID
,

2474 
óbuf
)));

2475 
j
 = 0; j < 
WPA2_PMKID_LEN
; j++)

2476 
	`WL_TRACE
(("%02x ", 
pmkid_¨øy
[
i
].
PMKID
[
j
]));

2477 
	`¥ötf
("\n");

2479 
	`WL_TRACE
(("\n"));

2480 
	`dev_wlc_bufv¨_£t
(
dev
, "pmkid_öfo", (*)&
pmkid_li°
, (pmkid_list));

2482 
	}
}

2486 
	$wl_iw_gë_ícodìxt
(

2487 
√t_devi˚
 *
dev
,

2488 
iw_ªque°_öfo
 *
öfo
,

2489 
iw_∑øm
 *
vwrq
,

2490 *
exåa


2493 
	`WL_TRACE
(("%s: SIOCGIWENCODEEXT\n", 
dev
->
«me
));

2495 
	}
}

2498 
	$wl_iw_£t_w∑auth
(

2499 
√t_devi˚
 *
dev
,

2500 
iw_ªque°_öfo
 *
öfo
,

2501 
iw_∑øm
 *
vwrq
,

2502 *
exåa


2505 
îr‹
 = 0;

2506 
∑ømid
;

2507 
∑ømvÆ
;

2508 
uöt32
 
cùhî_comböed
;

2509 
vÆ
 = 0;

2510 
wl_iw_t
 *
iw
 = 
	`IW_DEV_IF
(
dev
);

2512 
	`WL_TRACE
(("%s: SIOCSIWAUTH\n", 
dev
->
«me
));

2514 
∑ømid
 = 
vwrq
->
Êags
 & 
IW_AUTH_INDEX
;

2515 
∑ømvÆ
 = 
vwrq
->
vÆue
;

2517 
	`WL_TRACE
(("%s: SIOCSIWAUTH,Öaramid = 0x%0x,Öaramval = 0x%0x\n",

2518 
dev
->
«me
, 
∑ømid
, 
∑ømvÆ
));

2520 
∑ømid
) {

2522 
IW_AUTH_WPA_VERSION
:

2524 i‡(
∑ømvÆ
 & 
IW_AUTH_WPA_VERSION_DISABLED
)

2525 
vÆ
 = 
WPA_AUTH_DISABLED
;

2526 i‡(
∑ømvÆ
 & (
IW_AUTH_WPA_VERSION_WPA
))

2527 
vÆ
 = 
WPA_AUTH_PSK
 | 
WPA_AUTH_UNSPECIFIED
;

2528 i‡(
∑ømvÆ
 & 
IW_AUTH_WPA_VERSION_WPA2
)

2529 
vÆ
 = 
WPA2_AUTH_PSK
 | 
WPA2_AUTH_UNSPECIFIED
;

2530 
	`WL_TRACE
(("%s: %d: sëtög w∑_authÅÿ0x%0x\n", 
__FUNCTION__
, 
__LINE__
, 
vÆ
));

2531 i‡((
îr‹
 = 
	`dev_wlc_ötv¨_£t
(
dev
, "w∑_auth", 
vÆ
)))

2532  
îr‹
;

2535 
IW_AUTH_CIPHER_PAIRWISE
:

2536 
IW_AUTH_CIPHER_GROUP
:

2538 i‡(
∑ømid
 =
IW_AUTH_CIPHER_PAIRWISE
) {

2539 
iw
->
pw£c
 = 
∑ømvÆ
;

2542 
iw
->
gw£c
 = 
∑ømvÆ
;

2545 i‡((
îr‹
 = 
	`dev_wlc_ötv¨_gë
(
dev
, "w£c", &
vÆ
)))

2546  
îr‹
;

2548 
cùhî_comböed
 = 
iw
->
gw£c
 | iw->
pw£c
;

2549 
vÆ
 &~(
WEP_ENABLED
 | 
TKIP_ENABLED
 | 
AES_ENABLED
);

2550 i‡(
cùhî_comböed
 & (
IW_AUTH_CIPHER_WEP40
 | 
IW_AUTH_CIPHER_WEP104
))

2551 
vÆ
 |
WEP_ENABLED
;

2552 i‡(
cùhî_comböed
 & 
IW_AUTH_CIPHER_TKIP
)

2553 
vÆ
 |
TKIP_ENABLED
;

2554 i‡(
cùhî_comböed
 & 
IW_AUTH_CIPHER_CCMP
)

2555 
vÆ
 |
AES_ENABLED
;

2557 i‡(
iw
->
¥ivacy_övoked
 && !
vÆ
) {

2558 
	`WL_WSEC
(("%s: %s: 'Privacy invoked' TRUE but clearing wsec,ássuming "

2559 "we'ªá WPSÉƒﬁÀe\n", 
dev
->
«me
, 
__FUNCTION__
));

2560 i‡((
îr‹
 = 
	`dev_wlc_ötv¨_£t
(
dev
, "is_WPS_írﬁÀe", 
TRUE
))) {

2561 
	`WL_WSEC
(("FailedÅo set iovar is_WPS_enrollee\n"));

2562  
îr‹
;

2564 } i‡(
vÆ
) {

2565 i‡((
îr‹
 = 
	`dev_wlc_ötv¨_£t
(
dev
, "is_WPS_írﬁÀe", 
FALSE
))) {

2566 
	`WL_WSEC
(("FailedÅo clear iovar is_WPS_enrollee\n"));

2567  
îr‹
;

2571 i‡((
îr‹
 = 
	`dev_wlc_ötv¨_£t
(
dev
, "w£c", 
vÆ
)))

2572  
îr‹
;

2573 #ifde‡
WLFBT


2574 i‡((
∑ømid
 =
IW_AUTH_CIPHER_PAIRWISE
Ë&& (
vÆ
 | 
AES_ENABLED
)) {

2575 i‡((
îr‹
 = 
	`dev_wlc_ötv¨_£t
(
dev
, "sup_wpa", 1)))

2576  
îr‹
;

2578 i‡(
vÆ
 == 0) {

2579 i‡((
îr‹
 = 
	`dev_wlc_ötv¨_£t
(
dev
, "sup_wpa", 0)))

2580  
îr‹
;

2585 
IW_AUTH_KEY_MGMT
:

2586 i‡((
îr‹
 = 
	`dev_wlc_ötv¨_gë
(
dev
, "w∑_auth", &
vÆ
)))

2587  
îr‹
;

2589 i‡(
vÆ
 & (
WPA_AUTH_PSK
 | 
WPA_AUTH_UNSPECIFIED
)) {

2590 i‡(
∑ømvÆ
 & 
IW_AUTH_KEY_MGMT_PSK
)

2591 
vÆ
 = 
WPA_AUTH_PSK
;

2593 
vÆ
 = 
WPA_AUTH_UNSPECIFIED
;

2595 i‡(
vÆ
 & (
WPA2_AUTH_PSK
 | 
WPA2_AUTH_UNSPECIFIED
)) {

2596 i‡(
∑ømvÆ
 & 
IW_AUTH_KEY_MGMT_PSK
)

2597 
vÆ
 = 
WPA2_AUTH_PSK
;

2599 
vÆ
 = 
WPA2_AUTH_UNSPECIFIED
;

2601 
	`WL_TRACE
(("%s: %d: sëtög w∑_authÅÿ%d\n", 
__FUNCTION__
, 
__LINE__
, 
vÆ
));

2602 i‡((
îr‹
 = 
	`dev_wlc_ötv¨_£t
(
dev
, "w∑_auth", 
vÆ
)))

2603  
îr‹
;

2606 
IW_AUTH_TKIP_COUNTERMEASURES
:

2607 
	`dev_wlc_bufv¨_£t
(
dev
, "tkù_cou¡îmósuªs", (*)&
∑ømvÆ
, 1);

2610 
IW_AUTH_80211_AUTH_ALG
:

2612 
	`WL_ERROR
(("SëtögÅhêD11auth %d\n", 
∑ømvÆ
));

2613 i‡(
∑ømvÆ
 & 
IW_AUTH_ALG_OPEN_SYSTEM
)

2614 
vÆ
 = 0;

2615 i‡(
∑ømvÆ
 & 
IW_AUTH_ALG_SHARED_KEY
)

2616 
vÆ
 = 1;

2618 
îr‹
 = 1;

2619 i‡(!
îr‹
 && (îr‹ = 
	`dev_wlc_ötv¨_£t
(
dev
, "auth", 
vÆ
)))

2620  
îr‹
;

2623 
IW_AUTH_WPA_ENABLED
:

2624 i‡(
∑ømvÆ
 == 0) {

2625 
vÆ
 = 0;

2626 
	`WL_TRACE
(("%s: %d: sëtög w∑_authÅÿ%d\n", 
__FUNCTION__
, 
__LINE__
, 
vÆ
));

2627 
îr‹
 = 
	`dev_wlc_ötv¨_£t
(
dev
, "w∑_auth", 
vÆ
);

2628  
îr‹
;

2635 
IW_AUTH_DROP_UNENCRYPTED
:

2636 
	`dev_wlc_bufv¨_£t
(
dev
, "w£c_ª°ri˘", (*)&
∑ømvÆ
, 1);

2639 
IW_AUTH_RX_UNENCRYPTED_EAPOL
:

2640 
	`dev_wlc_bufv¨_£t
(
dev
, "rx_u√n¸y±ed_ópﬁ", (*)&
∑ømvÆ
, 1);

2643 #i‡
WIRELESS_EXT
 > 17

2645 
IW_AUTH_ROAMING_CONTROL
:

2646 
	`WL_TRACE
(("%s: IW_AUTH_ROAMING_CONTROL\n", 
__FUNCTION__
));

2650 
IW_AUTH_PRIVACY_INVOKED
: {

2651 
w£c
;

2653 i‡(
∑ømvÆ
 == 0) {

2654 
iw
->
¥ivacy_övoked
 = 
FALSE
;

2655 i‡((
îr‹
 = 
	`dev_wlc_ötv¨_£t
(
dev
, "is_WPS_írﬁÀe", 
FALSE
))) {

2656 
	`WL_WSEC
(("FailedÅo clear iovar is_WPS_enrollee\n"));

2657  
îr‹
;

2660 
iw
->
¥ivacy_övoked
 = 
TRUE
;

2661 i‡((
îr‹
 = 
	`dev_wlc_ötv¨_gë
(
dev
, "w£c", &
w£c
)))

2662  
îr‹
;

2664 i‡(!
	`WSEC_ENABLED
(
w£c
)) {

2666 i‡((
îr‹
 = 
	`dev_wlc_ötv¨_£t
(
dev
, "is_WPS_írﬁÀe", 
TRUE
))) {

2667 
	`WL_WSEC
(("FailedÅo set iovar is_WPS_enrollee\n"));

2668  
îr‹
;

2671 i‡((
îr‹
 = 
	`dev_wlc_ötv¨_£t
(
dev
, "is_WPS_írﬁÀe", 
FALSE
))) {

2672 
	`WL_WSEC
(("FailedÅo clear iovar is_WPS_enrollee\n"));

2673  
îr‹
;

2688 
	}
}

2689 
	#VAL_PSK
(
_vÆ
Ë(((_vÆË& 
WPA_AUTH_PSK
Ë|| ((_vÆË& 
WPA2_AUTH_PSK
))

	)

2692 
	$wl_iw_gë_w∑auth
(

2693 
√t_devi˚
 *
dev
,

2694 
iw_ªque°_öfo
 *
öfo
,

2695 
iw_∑øm
 *
vwrq
,

2696 *
exåa


2699 
îr‹
;

2700 
∑ømid
;

2701 
∑ømvÆ
 = 0;

2702 
vÆ
;

2703 
wl_iw_t
 *
iw
 = 
	`IW_DEV_IF
(
dev
);

2705 
	`WL_TRACE
(("%s: SIOCGIWAUTH\n", 
dev
->
«me
));

2707 
∑ømid
 = 
vwrq
->
Êags
 & 
IW_AUTH_INDEX
;

2709 
∑ømid
) {

2710 
IW_AUTH_WPA_VERSION
:

2712 i‡((
îr‹
 = 
	`dev_wlc_ötv¨_gë
(
dev
, "w∑_auth", &
vÆ
)))

2713  
îr‹
;

2714 i‡(
vÆ
 & (
WPA_AUTH_NONE
 | 
WPA_AUTH_DISABLED
))

2715 
∑ømvÆ
 = 
IW_AUTH_WPA_VERSION_DISABLED
;

2716 i‡(
vÆ
 & (
WPA_AUTH_PSK
 | 
WPA_AUTH_UNSPECIFIED
))

2717 
∑ømvÆ
 = 
IW_AUTH_WPA_VERSION_WPA
;

2718 i‡(
vÆ
 & (
WPA2_AUTH_PSK
 | 
WPA2_AUTH_UNSPECIFIED
))

2719 
∑ømvÆ
 = 
IW_AUTH_WPA_VERSION_WPA2
;

2722 
IW_AUTH_CIPHER_PAIRWISE
:

2723 
∑ømvÆ
 = 
iw
->
pw£c
;

2726 
IW_AUTH_CIPHER_GROUP
:

2727 
∑ømvÆ
 = 
iw
->
gw£c
;

2730 
IW_AUTH_KEY_MGMT
:

2732 i‡((
îr‹
 = 
	`dev_wlc_ötv¨_gë
(
dev
, "w∑_auth", &
vÆ
)))

2733  
îr‹
;

2734 i‡(
	`VAL_PSK
(
vÆ
))

2735 
∑ømvÆ
 = 
IW_AUTH_KEY_MGMT_PSK
;

2737 
∑ømvÆ
 = 
IW_AUTH_KEY_MGMT_802_1X
;

2740 
IW_AUTH_TKIP_COUNTERMEASURES
:

2741 
	`dev_wlc_bufv¨_gë
(
dev
, "tkù_cou¡îmósuªs", (*)&
∑ømvÆ
, 1);

2744 
IW_AUTH_DROP_UNENCRYPTED
:

2745 
	`dev_wlc_bufv¨_gë
(
dev
, "w£c_ª°ri˘", (*)&
∑ømvÆ
, 1);

2748 
IW_AUTH_RX_UNENCRYPTED_EAPOL
:

2749 
	`dev_wlc_bufv¨_gë
(
dev
, "rx_u√n¸y±ed_ópﬁ", (*)&
∑ømvÆ
, 1);

2752 
IW_AUTH_80211_AUTH_ALG
:

2754 i‡((
îr‹
 = 
	`dev_wlc_ötv¨_gë
(
dev
, "auth", &
vÆ
)))

2755  
îr‹
;

2756 i‡(!
vÆ
)

2757 
∑ømvÆ
 = 
IW_AUTH_ALG_OPEN_SYSTEM
;

2759 
∑ømvÆ
 = 
IW_AUTH_ALG_SHARED_KEY
;

2761 
IW_AUTH_WPA_ENABLED
:

2762 i‡((
îr‹
 = 
	`dev_wlc_ötv¨_gë
(
dev
, "w∑_auth", &
vÆ
)))

2763  
îr‹
;

2764 i‡(
vÆ
)

2765 
∑ømvÆ
 = 
TRUE
;

2767 
∑ømvÆ
 = 
FALSE
;

2770 #i‡
WIRELESS_EXT
 > 17

2772 
IW_AUTH_ROAMING_CONTROL
:

2773 
	`WL_ERROR
(("%s: IW_AUTH_ROAMING_CONTROL\n", 
__FUNCTION__
));

2777 
IW_AUTH_PRIVACY_INVOKED
:

2778 
∑ømvÆ
 = 
iw
->
¥ivacy_övoked
;

2783 
vwrq
->
vÆue
 = 
∑ømvÆ
;

2785 
	}
}

2788 c⁄° 
iw_h™dÀr
 
	gwl_iw_h™dÀr
[] =

2790 (
iw_h™dÀr
Ë
wl_iw_c⁄fig_commô
,

2791 (
iw_h™dÀr
Ë
wl_iw_gë_«me
,

2792 (
iw_h™dÀr
Ë
NULL
,

2793 (
iw_h™dÀr
Ë
NULL
,

2794 (
iw_h™dÀr
Ë
wl_iw_£t_‰eq
,

2795 (
iw_h™dÀr
Ë
wl_iw_gë_‰eq
,

2796 (
iw_h™dÀr
Ë
wl_iw_£t_mode
,

2797 (
iw_h™dÀr
Ë
wl_iw_gë_mode
,

2798 (
iw_h™dÀr
Ë
NULL
,

2799 (
iw_h™dÀr
Ë
NULL
,

2800 (
iw_h™dÀr
Ë
NULL
,

2801 (
iw_h™dÀr
Ë
wl_iw_gë_ønge
,

2802 (
iw_h™dÀr
Ë
NULL
,

2803 (
iw_h™dÀr
Ë
NULL
,

2804 (
iw_h™dÀr
Ë
NULL
,

2805 (
iw_h™dÀr
Ë
NULL
,

2806 (
iw_h™dÀr
Ë
wl_iw_£t_•y
,

2807 (
iw_h™dÀr
Ë
wl_iw_gë_•y
,

2808 (
iw_h™dÀr
Ë
NULL
,

2809 (
iw_h™dÀr
Ë
NULL
,

2810 (
iw_h™dÀr
Ë
wl_iw_£t_w≠
,

2811 (
iw_h™dÀr
Ë
wl_iw_gë_w≠
,

2812 #i‡
WIRELESS_EXT
 > 17

2813 (
iw_h™dÀr
Ë
wl_iw_mlme
,

2815 (
iw_h™dÀr
Ë
NULL
,

2817 (
iw_h™dÀr
Ë
wl_iw_isˇn_gë_≠li°
,

2818 #i‡
WIRELESS_EXT
 > 13

2819 (
iw_h™dÀr
Ë
wl_iw_isˇn_£t_sˇn
,

2820 (
iw_h™dÀr
Ë
wl_iw_isˇn_gë_sˇn
,

2822 (
iw_h™dÀr
Ë
NULL
,

2823 (
iw_h™dÀr
Ë
NULL
,

2825 (
iw_h™dÀr
Ë
wl_iw_£t_essid
,

2826 (
iw_h™dÀr
Ë
wl_iw_gë_essid
,

2827 (
iw_h™dÀr
Ë
wl_iw_£t_nick
,

2828 (
iw_h™dÀr
Ë
wl_iw_gë_nick
,

2829 (
iw_h™dÀr
Ë
NULL
,

2830 (
iw_h™dÀr
Ë
NULL
,

2831 (
iw_h™dÀr
Ë
wl_iw_£t_øã
,

2832 (
iw_h™dÀr
Ë
wl_iw_gë_øã
,

2833 (
iw_h™dÀr
Ë
wl_iw_£t_πs
,

2834 (
iw_h™dÀr
Ë
wl_iw_gë_πs
,

2835 (
iw_h™dÀr
Ë
wl_iw_£t_‰ag
,

2836 (
iw_h™dÀr
Ë
wl_iw_gë_‰ag
,

2837 (
iw_h™dÀr
Ë
wl_iw_£t_txpow
,

2838 (
iw_h™dÀr
Ë
wl_iw_gë_txpow
,

2839 #i‡
WIRELESS_EXT
 > 10

2840 (
iw_h™dÀr
Ë
wl_iw_£t_ªåy
,

2841 (
iw_h™dÀr
Ë
wl_iw_gë_ªåy
,

2843 (
iw_h™dÀr
Ë
wl_iw_£t_ícode
,

2844 (
iw_h™dÀr
Ë
wl_iw_gë_ícode
,

2845 (
iw_h™dÀr
Ë
wl_iw_£t_powî
,

2846 (
iw_h™dÀr
Ë
wl_iw_gë_powî
,

2847 #i‡
WIRELESS_EXT
 > 17

2848 (
iw_h™dÀr
Ë
NULL
,

2849 (
iw_h™dÀr
Ë
NULL
,

2850 (
iw_h™dÀr
Ë
wl_iw_£t_w∑õ
,

2851 (
iw_h™dÀr
Ë
wl_iw_gë_w∑õ
,

2852 (
iw_h™dÀr
Ë
wl_iw_£t_w∑auth
,

2853 (
iw_h™dÀr
Ë
wl_iw_gë_w∑auth
,

2854 (
iw_h™dÀr
Ë
wl_iw_£t_ícodìxt
,

2855 (
iw_h™dÀr
Ë
wl_iw_gë_ícodìxt
,

2856 (
iw_h™dÀr
Ë
wl_iw_£t_pmkß
,

2860 #i‡
WIRELESS_EXT
 > 12

2862 
	mWL_IW_SET_LEDDC
 = 
SIOCIWFIRSTPRIV
,

2863 
	mWL_IW_SET_VLANMODE
,

2864 
	mWL_IW_SET_PM


2867 
iw_h™dÀr
 
	gwl_iw_¥iv_h™dÀr
[] = {

2868 
wl_iw_£t_Àddc
,

2869 
wl_iw_£t_vœnmode
,

2870 
wl_iw_£t_pm


2873 
iw_¥iv_¨gs
 
	gwl_iw_¥iv_¨gs
[] = {

2875 
WL_IW_SET_LEDDC
,

2876 
IW_PRIV_TYPE_INT
 | 
IW_PRIV_SIZE_FIXED
 | 1,

2881 
WL_IW_SET_VLANMODE
,

2882 
IW_PRIV_TYPE_INT
 | 
IW_PRIV_SIZE_FIXED
 | 1,

2887 
WL_IW_SET_PM
,

2888 
IW_PRIV_TYPE_INT
 | 
IW_PRIV_SIZE_FIXED
 | 1,

2894 c⁄° 
iw_h™dÀr_def
 
	gwl_iw_h™dÀr_def
 =

2896 .
num_°™d¨d
 = 
ARRAYSIZE
(
wl_iw_h™dÀr
),

2897 .
	gnum_¥iv©e
 = 
ARRAY_SIZE
(
wl_iw_¥iv_h™dÀr
),

2898 .
	gnum_¥iv©e_¨gs
 = 
ARRAY_SIZE
(
wl_iw_¥iv_¨gs
),

2899 .
	g°™d¨d
 = (
iw_h™dÀr
 *Ë
wl_iw_h™dÀr
,

2900 .
	g¥iv©e
 = 
wl_iw_¥iv_h™dÀr
,

2901 .
	g¥iv©e_¨gs
 = 
wl_iw_¥iv_¨gs
,

2902 #i‡
WIRELESS_EXT
 >= 19

2903 
	ggë_wúñess_°©s
: 
dhd_gë_wúñess_°©s
,

2909 
	$wl_iw_io˘l
(

2910 
√t_devi˚
 *
dev
,

2911 
i‰eq
 *
rq
,

2912 
cmd


2915 
iwªq
 *
wrq
 = (iwªq *Ë
rq
;

2916 
iw_ªque°_öfo
 
öfo
;

2917 
iw_h™dÀr
 
h™dÀr
;

2918 *
exåa
 = 
NULL
;

2919 
size_t
 
tokí_size
 = 1;

2920 
max_tokís
 = 0, 
ªt
 = 0;

2922 i‡(
cmd
 < 
SIOCIWFIRST
 ||

2923 
	`IW_IOCTL_IDX
(
cmd
Ë>
	`ARRAYSIZE
(
wl_iw_h™dÀr
) ||

2924 !(
h™dÀr
 = 
wl_iw_h™dÀr
[
	`IW_IOCTL_IDX
(
cmd
)]))

2925  -
EOPNOTSUPP
;

2927 
cmd
) {

2929 
SIOCSIWESSID
:

2930 
SIOCGIWESSID
:

2931 
SIOCSIWNICKN
:

2932 
SIOCGIWNICKN
:

2933 
max_tokís
 = 
IW_ESSID_MAX_SIZE
 + 1;

2936 
SIOCSIWENCODE
:

2937 
SIOCGIWENCODE
:

2938 #i‡
WIRELESS_EXT
 > 17

2939 
SIOCSIWENCODEEXT
:

2940 
SIOCGIWENCODEEXT
:

2942 
max_tokís
 = 
IW_ENCODING_TOKEN_MAX
;

2945 
SIOCGIWRANGE
:

2946 
max_tokís
 = (
iw_ønge
);

2949 
SIOCGIWAPLIST
:

2950 
tokí_size
 = (
sockaddr
Ë+ (
iw_quÆôy
);

2951 
max_tokís
 = 
IW_MAX_AP
;

2954 #i‡
WIRELESS_EXT
 > 13

2955 
SIOCGIWSCAN
:

2956 i‡(
g_isˇn
)

2957 
max_tokís
 = 
wrq
->
u
.
d©a
.
Àngth
;

2959 
max_tokís
 = 
IW_SCAN_MAX_DATA
;

2963 
SIOCSIWSPY
:

2964 
tokí_size
 = (
sockaddr
);

2965 
max_tokís
 = 
IW_MAX_SPY
;

2968 
SIOCGIWSPY
:

2969 
tokí_size
 = (
sockaddr
Ë+ (
iw_quÆôy
);

2970 
max_tokís
 = 
IW_MAX_SPY
;

2976 i‡(
max_tokís
 && 
wrq
->
u
.
d©a
.
poöãr
) {

2977 i‡(
wrq
->
u
.
d©a
.
Àngth
 > 
max_tokís
)

2978  -
E2BIG
;

2980 i‡(!(
exåa
 = 
	`kmÆloc
(
max_tokís
 * 
tokí_size
, 
GFP_KERNEL
)))

2981  -
ENOMEM
;

2983 i‡(
	`c›y_‰om_u£r
(
exåa
, 
wrq
->
u
.
d©a
.
poöãr
, wrq->u.d©a.
Àngth
 * 
tokí_size
)) {

2984 
	`k‰ì
(
exåa
);

2985  -
EFAULT
;

2989 
öfo
.
cmd
 = cmd;

2990 
öfo
.
Êags
 = 0;

2992 
ªt
 = 
	`h™dÀr
(
dev
, &
öfo
, &
wrq
->
u
, 
exåa
);

2994 i‡(
exåa
) {

2995 i‡(
	`c›y_to_u£r
(
wrq
->
u
.
d©a
.
poöãr
, 
exåa
, wrq->u.d©a.
Àngth
 * 
tokí_size
)) {

2996 
	`k‰ì
(
exåa
);

2997  -
EFAULT
;

3000 
	`k‰ì
(
exåa
);

3003  
ªt
;

3004 
	}
}

3009 
boﬁ


3010 
	$wl_iw_c⁄n_°©us_°r
(
uöt32
 
evít_ty≥
, uöt32 
°©us
, uöt32 
ªas⁄
,

3011 * 
°rögBuf
, 
uöt
 
buÊí
)

3013 
	sc⁄n_Áû_evít_m≠_t
 {

3014 
uöt32
 
öEvít
;

3015 
uöt32
 
öSètus
;

3016 
uöt32
 
öRós⁄
;

3017 c⁄° * 
outName
;

3018 c⁄° * 
outCau£
;

3019 } 
	tc⁄n_Áû_evít_m≠_t
;

3022 
	#WL_IW_DONT_CARE
 9999

	)

3023 c⁄° 
c⁄n_Áû_evít_m≠_t
 
evít_m≠
 [] = {

3026 {
WLC_E_SET_SSID
, 
WLC_E_STATUS_SUCCESS
, 
WL_IW_DONT_CARE
,

3028 {
WLC_E_SET_SSID
, 
WLC_E_STATUS_NO_NETWORKS
, 
WL_IW_DONT_CARE
,

3030 {
WLC_E_SET_SSID
, 
WLC_E_STATUS_FAIL
, 
WL_IW_DONT_CARE
,

3032 {
WLC_E_PRUNE
, 
WL_IW_DONT_CARE
, 
WLC_E_PRUNE_ENCR_MISMATCH
,

3034 {
WLC_E_PRUNE
, 
WL_IW_DONT_CARE
, 
WLC_E_RSN_MISMATCH
,

3036 {
WLC_E_AUTH
, 
WLC_E_STATUS_TIMEOUT
, 
WL_IW_DONT_CARE
,

3038 {
WLC_E_AUTH
, 
WLC_E_STATUS_FAIL
, 
WL_IW_DONT_CARE
,

3040 {
WLC_E_AUTH
, 
WLC_E_STATUS_NO_ACK
, 
WL_IW_DONT_CARE
,

3042 {
WLC_E_REASSOC
, 
WLC_E_STATUS_FAIL
, 
WL_IW_DONT_CARE
,

3044 {
WLC_E_REASSOC
, 
WLC_E_STATUS_TIMEOUT
, 
WL_IW_DONT_CARE
,

3046 {
WLC_E_REASSOC
, 
WLC_E_STATUS_ABORT
, 
WL_IW_DONT_CARE
,

3048 {
WLC_E_PSK_SUP
, 
WLC_SUP_KEYED
, 
WL_IW_DONT_CARE
,

3050 {
WLC_E_PSK_SUP
, 
WL_IW_DONT_CARE
, WL_IW_DONT_CARE,

3052 {
WLC_E_DEAUTH_IND
, 
WL_IW_DONT_CARE
, WL_IW_DONT_CARE,

3054 {
WLC_E_DISASSOC_IND
, 
WL_IW_DONT_CARE
, WL_IW_DONT_CARE,

3056 {
WLC_E_DISASSOC
, 
WL_IW_DONT_CARE
, WL_IW_DONT_CARE,

3060 c⁄° * 
«me
 = "";

3061 c⁄° * 
ˇu£
 = 
NULL
;

3062 
i
;

3065 
i
 = 0; i < (
evít_m≠
)/(event_map[0]); i++) {

3066 c⁄° 
c⁄n_Áû_evít_m≠_t
* 
row
 = &
evít_m≠
[
i
];

3067 i‡(
row
->
öEvít
 =
evít_ty≥
 &&

3068 (
row
->
öSètus
 =
°©us
 ||Ñow->öSètu†=
WL_IW_DONT_CARE
) &&

3069 (
row
->
öRós⁄
 =
ªas⁄
 ||Ñow->öRós⁄ =
WL_IW_DONT_CARE
)) {

3070 
«me
 = 
row
->
outName
;

3071 
ˇu£
 = 
row
->
outCau£
;

3077 i‡(
ˇu£
) {

3078 
	`mem£t
(
°rögBuf
, 0, 
buÊí
);

3079 
	`¢¥ötf
(
°rögBuf
, 
buÊí
, "%s %s %02d %02d",

3080 
«me
, 
ˇu£
, 
°©us
, 
ªas⁄
);

3081 
	`WL_TRACE
(("C⁄√˘i⁄ sètus: %s\n", 
°rögBuf
));

3082  
TRUE
;

3084  
FALSE
;

3086 
	}
}

3088 #i‡(
WIRELESS_EXT
 > 14)

3093 
boﬁ


3094 
	$wl_iw_check_c⁄n_Áû
(
wl_evít_msg_t
 *
e
, * 
°rögBuf
, 
uöt
 
buÊí
)

3096 
uöt32
 
evít
 = 
	`¡oh32
(
e
->
evít_ty≥
);

3097 
uöt32
 
°©us
 = 
	`¡oh32
(
e
->status);

3098 
uöt32
 
ªas⁄
 = 
	`¡oh32
(
e
->reason);

3100 i‡(
	`wl_iw_c⁄n_°©us_°r
(
evít
, 
°©us
, 
ªas⁄
, 
°rögBuf
, 
buÊí
)) {

3101  
TRUE
;

3104  
FALSE
;

3106 
	}
}

3109 #i‚de‡
IW_CUSTOM_MAX


3110 
	#IW_CUSTOM_MAX
 256

	)

3114 
	$wl_iw_evít
(
√t_devi˚
 *
dev
, 
wl_evít_msg_t
 *
e
, * 
d©a
)

3116 #i‡
WIRELESS_EXT
 > 13

3117 
iwªq_d©a
 
wrqu
;

3118 
exåa
[
IW_CUSTOM_MAX
 + 1];

3119 
cmd
 = 0;

3120 
uöt32
 
evít_ty≥
 = 
	`¡oh32
(
e
->event_type);

3121 
uöt16
 
Êags
 = 
	`¡oh16
(
e
->flags);

3122 
uöt32
 
d©Æí
 = 
	`¡oh32
(
e
->datalen);

3123 
uöt32
 
°©us
 = 
	`¡oh32
(
e
->status);

3125 
	`mem£t
(&
wrqu
, 0, (wrqu));

3126 
	`mem£t
(
exåa
, 0, (extra));

3128 
	`mem˝y
(
wrqu
.
addr
.
ß_d©a
, &
e
->addr, 
ETHER_ADDR_LEN
);

3129 
wrqu
.
addr
.
ß_Ámûy
 = 
ARPHRD_ETHER
;

3131 
evít_ty≥
) {

3132 
WLC_E_TXFAIL
:

3133 
cmd
 = 
IWEVTXDROP
;

3135 #i‡
WIRELESS_EXT
 > 14

3136 
WLC_E_JOIN
:

3137 
WLC_E_ASSOC_IND
:

3138 
WLC_E_REASSOC_IND
:

3139 
cmd
 = 
IWEVREGISTERED
;

3141 
WLC_E_DEAUTH_IND
:

3142 
WLC_E_DISASSOC_IND
:

3143 
cmd
 = 
SIOCGIWAP
;

3144 
wrqu
.
d©a
.
Àngth
 = 
	`°æí
(
exåa
);

3145 
	`bzîo
(
wrqu
.
addr
.
ß_d©a
, 
ETHER_ADDR_LEN
);

3146 
	`bzîo
(&
exåa
, 
ETHER_ADDR_LEN
);

3149 
WLC_E_LINK
:

3150 
WLC_E_NDIS_LINK
:

3151 
cmd
 = 
SIOCGIWAP
;

3152 
wrqu
.
d©a
.
Àngth
 = 
	`°æí
(
exåa
);

3153 i‡(!(
Êags
 & 
WLC_EVENT_MSG_LINK
)) {

3154 
	`bzîo
(
wrqu
.
addr
.
ß_d©a
, 
ETHER_ADDR_LEN
);

3155 
	`bzîo
(&
exåa
, 
ETHER_ADDR_LEN
);

3158 
WLC_E_ACTION_FRAME
:

3159 
cmd
 = 
IWEVCUSTOM
;

3160 i‡(
d©Æí
 + 1 <(
exåa
)) {

3161 
wrqu
.
d©a
.
Àngth
 = 
d©Æí
 + 1;

3162 
exåa
[0] = 
WLC_E_ACTION_FRAME
;

3163 
	`mem˝y
(&
exåa
[1], 
d©a
, 
d©Æí
);

3164 
	`WL_TRACE
(("WLC_E_ACTION_FRAMEÜí %d \n", 
wrqu
.
d©a
.
Àngth
));

3168 
WLC_E_ACTION_FRAME_COMPLETE
:

3169 
cmd
 = 
IWEVCUSTOM
;

3170 i‡((
°©us
Ë+ 1 <(
exåa
)) {

3171 
wrqu
.
d©a
.
Àngth
 = (
°©us
) + 1;

3172 
exåa
[0] = 
WLC_E_ACTION_FRAME_COMPLETE
;

3173 
	`mem˝y
(&
exåa
[1], &
°©us
, (status));

3174 
	`WL_TRACE
(("wl_iw_evíà°©u†%d \n", 
°©us
));

3178 #i‡
WIRELESS_EXT
 > 17

3179 
WLC_E_MIC_ERROR
: {

3180 
iw_mich´lmicÁûuª
 *
mi˚ºevt
 = (iw_mich´lmicÁûuª *)&
exåa
;

3181 
cmd
 = 
IWEVMICHAELMICFAILURE
;

3182 
wrqu
.
d©a
.
Àngth
 = (
iw_mich´lmicÁûuª
);

3183 i‡(
Êags
 & 
WLC_EVENT_MSG_GROUP
)

3184 
mi˚ºevt
->
Êags
 |
IW_MICFAILURE_GROUP
;

3186 
mi˚ºevt
->
Êags
 |
IW_MICFAILURE_PAIRWISE
;

3187 
	`mem˝y
(
mi˚ºevt
->
§c_addr
.
ß_d©a
, &
e
->
addr
, 
ETHER_ADDR_LEN
);

3188 
mi˚ºevt
->
§c_addr
.
ß_Ámûy
 = 
ARPHRD_ETHER
;

3193 
WLC_E_ASSOC_REQ_IE
:

3194 
cmd
 = 
IWEVASSOCREQIE
;

3195 
wrqu
.
d©a
.
Àngth
 = 
d©Æí
;

3196 i‡(
d©Æí
 < (
exåa
))

3197 
	`mem˝y
(
exåa
, 
d©a
, 
d©Æí
);

3200 
WLC_E_ASSOC_RESP_IE
:

3201 
cmd
 = 
IWEVASSOCRESPIE
;

3202 
wrqu
.
d©a
.
Àngth
 = 
d©Æí
;

3203 i‡(
d©Æí
 < (
exåa
))

3204 
	`mem˝y
(
exåa
, 
d©a
, 
d©Æí
);

3207 
WLC_E_PMKID_CACHE
: {

3208 
iw_pmkid_ˇnd
 *
iwpmkidˇnd
 = (iw_pmkid_ˇnd *)&
exåa
;

3209 
pmkid_ˇnd_li°_t
 *
pmkˇndli°
;

3210 
pmkid_ˇnd_t
 *
pmkidˇnd
;

3211 
cou¡
;

3213 i‡(
d©a
 =
NULL
)

3216 
cmd
 = 
IWEVPMKIDCAND
;

3217 
pmkˇndli°
 = 
d©a
;

3218 
cou¡
 = 
	`¡oh32_ua
((
uöt8
 *)&
pmkˇndli°
->
≈mkid_ˇnd
);

3219 
wrqu
.
d©a
.
Àngth
 = (
iw_pmkid_ˇnd
);

3220 
pmkidˇnd
 = 
pmkˇndli°
->
pmkid_ˇnd
;

3221 
cou¡
) {

3222 
	`bzîo
(
iwpmkidˇnd
, (
iw_pmkid_ˇnd
));

3223 i‡(
pmkidˇnd
->
¥óuth
)

3224 
iwpmkidˇnd
->
Êags
 |
IW_PMKID_CAND_PREAUTH
;

3225 
	`bc›y
(&
pmkidˇnd
->
BSSID
, &
iwpmkidˇnd
->
bssid
.
ß_d©a
,

3226 
ETHER_ADDR_LEN
);

3227 
	`wúñess_£nd_evít
(
dev
, 
cmd
, &
wrqu
, 
exåa
);

3228 
pmkidˇnd
++;

3229 
cou¡
--;

3235 
WLC_E_SCAN_COMPLETE
:

3236 #i‡
WIRELESS_EXT
 > 14

3237 
cmd
 = 
SIOCGIWSCAN
;

3239 
	`WL_TRACE
(("event WLC_E_SCAN_COMPLETE\n"));

3240 i‡((
g_isˇn
Ë&& (g_isˇn->
sysioc_pid
 >= 0) &&

3241 (
g_isˇn
->
isˇn_°©e
 !
ISCAN_STATE_IDLE
))

3242 
	`up
(&
g_isˇn
->
sysioc_£m
);

3250 i‡(
cmd
) {

3251 i‡(
cmd
 =
SIOCGIWSCAN
)

3252 
	`wúñess_£nd_evít
(
dev
, 
cmd
, &
wrqu
, 
NULL
);

3254 
	`wúñess_£nd_evít
(
dev
, 
cmd
, &
wrqu
, 
exåa
);

3257 #i‡
WIRELESS_EXT
 > 14

3261 
	`mem£t
(
exåa
, 0, (extra));

3262 i‡(
	`wl_iw_check_c⁄n_Áû
(
e
, 
exåa
, (extra))) {

3263 
cmd
 = 
IWEVCUSTOM
;

3264 
wrqu
.
d©a
.
Àngth
 = 
	`°æí
(
exåa
);

3265 
	`wúñess_£nd_evít
(
dev
, 
cmd
, &
wrqu
, 
exåa
);

3270 
	}
}

3272 
	$wl_iw_gë_wúñess_°©s
(
√t_devi˚
 *
dev
, 
iw_°©i°ics
 *
w°©s
)

3274 
ªs
 = 0;

3275 
wl_˙t_t
 
˙t
;

3276 
phy_noi£
;

3277 
rssi
;

3278 
scb_vÆ_t
 
scb_vÆ
;

3280 
phy_noi£
 = 0;

3281 i‡((
ªs
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_PHY_NOISE
, &
phy_noi£
, (phy_noise))))

3282 
d⁄e
;

3284 
phy_noi£
 = 
	`dtoh32
(phy_noise);

3285 
	`WL_TRACE
(("wl_iw_gë_wúñess_°©†phyÇoi£=%d\¿*****", 
phy_noi£
));

3287 
scb_vÆ
.
vÆ
 = 0;

3288 i‡((
ªs
 = 
	`dev_wlc_io˘l
(
dev
, 
WLC_GET_RSSI
, &
scb_vÆ
, (
scb_vÆ_t
))))

3289 
d⁄e
;

3291 
rssi
 = 
	`dtoh32
(
scb_vÆ
.
vÆ
);

3292 
	`WL_TRACE
(("wl_iw_gë_wúñess_°©†rssi=%d ****** \n", 
rssi
));

3293 i‡(
rssi
 <
WL_IW_RSSI_NO_SIGNAL
)

3294 
w°©s
->
quÆ
.qual = 0;

3295 i‡(
rssi
 <
WL_IW_RSSI_VERY_LOW
)

3296 
w°©s
->
quÆ
.qual = 1;

3297 i‡(
rssi
 <
WL_IW_RSSI_LOW
)

3298 
w°©s
->
quÆ
.qual = 2;

3299 i‡(
rssi
 <
WL_IW_RSSI_GOOD
)

3300 
w°©s
->
quÆ
.qual = 3;

3301 i‡(
rssi
 <
WL_IW_RSSI_VERY_GOOD
)

3302 
w°©s
->
quÆ
.qual = 4;

3304 
w°©s
->
quÆ
.qual = 5;

3307 
w°©s
->
quÆ
.
Àvñ
 = 0x100 + 
rssi
;

3308 
w°©s
->
quÆ
.
noi£
 = 0x100 + 
phy_noi£
;

3309 #i‡
WIRELESS_EXT
 > 18

3310 
w°©s
->
quÆ
.
upd©ed
 |(
IW_QUAL_ALL_UPDATED
 | 
IW_QUAL_DBM
);

3312 
w°©s
->
quÆ
.
upd©ed
 |= 7;

3315 #i‡
WIRELESS_EXT
 > 11

3316 
	`WL_TRACE
(("wl_iw_gë_wúñess_°©†cou¡îs=%d\¿*****", ()(
wl_˙t_t
)));

3318 
	`mem£t
(&
˙t
, 0, (
wl_˙t_t
));

3319 
ªs
 = 
	`dev_wlc_bufv¨_gë
(
dev
, "cou¡îs", (*)&
˙t
, (
wl_˙t_t
));

3320 i‡(
ªs
)

3322 
	`WL_ERROR
(("wl_iw_gë_wúñess_°©†cou¡î†ÁûedÉº‹=%d ****** \n", 
ªs
));

3323 
d⁄e
;

3326 
˙t
.
vîsi⁄
 = 
	`dtoh16
(cnt.version);

3327 i‡(
˙t
.
vîsi⁄
 !
WL_CNT_T_VERSION
) {

3328 
	`WL_TRACE
(("\tIncorrect version of counters struct:Éxpected %d; got %d\n",

3329 
WL_CNT_T_VERSION
, 
˙t
.
vîsi⁄
));

3330 
d⁄e
;

3333 
w°©s
->
disˇrd
.
nwid
 = 0;

3334 
w°©s
->
disˇrd
.
code
 = 
	`dtoh32
(
˙t
.
rxundec
);

3335 
w°©s
->
disˇrd
.
‰agmít
 = 
	`dtoh32
(
˙t
.
rx‰agîr
);

3336 
w°©s
->
disˇrd
.
ªåõs
 = 
	`dtoh32
(
˙t
.
txÁû
);

3337 
w°©s
->
disˇrd
.
misc
 = 
	`dtoh32
(
˙t
.
rxru¡
Ë+ dtoh32(˙t.
rxgü¡
);

3338 
w°©s
->
miss
.
bóc⁄
 = 0;

3340 
	`WL_TRACE
(("wl_iw_get_wireless_stats countersÅxframe=%dÅxbyte=%d\n",

3341 
	`dtoh32
(
˙t
.
tx‰ame
), dtoh32(˙t.
txbyã
)));

3342 
	`WL_TRACE
(("wl_iw_gë_wúñess_°©†cou¡î†rx‰mtoﬁ⁄g=%d\n", 
	`dtoh32
(
˙t
.
rx‰mtoﬁ⁄g
)));

3343 
	`WL_TRACE
(("wl_iw_gë_wúñess_°©†cou¡î†rxbad∂˝=%d\n", 
	`dtoh32
(
˙t
.
rxbad∂˝
)));

3344 
	`WL_TRACE
(("wl_iw_gë_wúñess_°©†cou¡î†rxundec=%d\n", 
	`dtoh32
(
˙t
.
rxundec
)));

3345 
	`WL_TRACE
(("wl_iw_gë_wúñess_°©†cou¡î†rx‰agîr=%d\n", 
	`dtoh32
(
˙t
.
rx‰agîr
)));

3346 
	`WL_TRACE
(("wl_iw_gë_wúñess_°©†cou¡î†txÁû=%d\n", 
	`dtoh32
(
˙t
.
txÁû
)));

3347 
	`WL_TRACE
(("wl_iw_gë_wúñess_°©†cou¡î†rxru¡=%d\n", 
	`dtoh32
(
˙t
.
rxru¡
)));

3348 
	`WL_TRACE
(("wl_iw_gë_wúñess_°©†cou¡î†rxgü¡=%d\n", 
	`dtoh32
(
˙t
.
rxgü¡
)));

3352 
d⁄e
:

3353  
ªs
;

3354 
	}
}

3357 
	$wl_iw_timîfunc
(
ul⁄g
 
d©a
)

3359 
isˇn_öfo_t
 *
isˇn
 = (isˇn_öfo_à*)
d©a
;

3360 
isˇn
->
timî_⁄
 = 0;

3361 i‡(
isˇn
->
isˇn_°©e
 !
ISCAN_STATE_IDLE
) {

3362 
	`WL_TRACE
(("timerÅrigger\n"));

3363 
	`up
(&
isˇn
->
sysioc_£m
);

3365 
	}
}

3368 
	$wl_iw_£t_evít_mask
(
√t_devi˚
 *
dev
)

3370 
evítmask
[
WL_EVENTING_MASK_LEN
];

3371 
iovbuf
[
WL_EVENTING_MASK_LEN
 + 12];

3373 
	`dev_iw_iov¨_gëbuf
(
dev
, "evít_msgs", "", 0, 
iovbuf
, (iovbuf));

3374 
	`bc›y
(
iovbuf
, 
evítmask
, 
WL_EVENTING_MASK_LEN
);

3375 
	`£tbô
(
evítmask
, 
WLC_E_SCAN_COMPLETE
);

3376 
	`dev_iw_iov¨_£tbuf
(
dev
, "evít_msgs", 
evítmask
, 
WL_EVENTING_MASK_LEN
,

3377 
iovbuf
, (iovbuf));

3379 
	}
}

3382 
	$wl_iw_isˇn_¥ï
(
wl_sˇn_∑øms_t
 *
∑øms
, 
wlc_ssid_t
 *
ssid
)

3384 
îr
 = 0;

3386 
	`mem˝y
(&
∑øms
->
bssid
, &
ëhî_bˇ°
, 
ETHER_ADDR_LEN
);

3387 
∑øms
->
bss_ty≥
 = 
DOT11_BSSTYPE_ANY
;

3388 
∑øms
->
sˇn_ty≥
 = 0;

3389 
∑øms
->
≈robes
 = -1;

3390 
∑øms
->
a˘ive_time
 = -1;

3391 
∑øms
->
∑ssive_time
 = -1;

3392 
∑øms
->
home_time
 = -1;

3393 
∑øms
->
ch™√l_num
 = 0;

3395 
∑øms
->
≈robes
 = 
	`htod32
(params->nprobes);

3396 
∑øms
->
a˘ive_time
 = 
	`htod32
(params->active_time);

3397 
∑øms
->
∑ssive_time
 = 
	`htod32
(params->passive_time);

3398 
∑øms
->
home_time
 = 
	`htod32
(params->home_time);

3399 i‡(
ssid
 && ssid->
SSID_Àn
)

3400 
	`mem˝y
(&
∑øms
->
ssid
, ssid, (
wlc_ssid_t
));

3402  
îr
;

3403 
	}
}

3406 
	$wl_iw_isˇn
(
isˇn_öfo_t
 *
isˇn
, 
wlc_ssid_t
 *
ssid
, 
uöt16
 
a˘i⁄
)

3408 
∑øms_size
 = (
WL_SCAN_PARAMS_FIXED_SIZE
 + 
	`OFFSETOF
(
wl_isˇn_∑øms_t
, 
∑øms
));

3409 
wl_isˇn_∑øms_t
 *
∑øms
;

3410 
îr
 = 0;

3412 i‡(
ssid
 && ssid->
SSID_Àn
) {

3413 
∑øms_size
 +(
wlc_ssid_t
);

3415 
∑øms
 = (
wl_isˇn_∑øms_t
*)
	`kmÆloc
(
∑øms_size
, 
GFP_KERNEL
);

3416 i‡(
∑øms
 =
NULL
) {

3417  -
ENOMEM
;

3419 
	`mem£t
(
∑øms
, 0, 
∑øms_size
);

3420 
	`ASSERT
(
∑øms_size
 < 
WLC_IOCTL_SMLEN
);

3422 
îr
 = 
	`wl_iw_isˇn_¥ï
(&
∑øms
->∑øms, 
ssid
);

3424 i‡(!
îr
) {

3425 
∑øms
->
vîsi⁄
 = 
	`htod32
(
ISCAN_REQ_VERSION
);

3426 
∑øms
->
a˘i⁄
 = 
	`htod16
(action);

3427 
∑øms
->
sˇn_duøti⁄
 = 
	`htod16
(0);

3430 (Ë
	`dev_iw_iov¨_£tbuf
(
isˇn
->
dev
, "isˇn", 
∑øms
, 
∑øms_size
,

3431 
isˇn
->
io˘lbuf
, 
WLC_IOCTL_SMLEN
);

3434 
	`k‰ì
(
∑øms
);

3435  
îr
;

3436 
	}
}

3438 
uöt32


3439 
	$wl_iw_isˇn_gë
(
isˇn_öfo_t
 *
isˇn
)

3441 
isˇn_buf_t
 * 
buf
;

3442 
isˇn_buf_t
 * 
±r
;

3443 
wl_isˇn_ªsu…s_t
 * 
li°_buf
;

3444 
wl_isˇn_ªsu…s_t
 
li°
;

3445 
wl_sˇn_ªsu…s_t
 *
ªsu…s
;

3446 
uöt32
 
°©us
;

3449 i‡(
isˇn
->
li°_cur
) {

3450 
buf
 = 
isˇn
->
li°_cur
;

3451 
isˇn
->
li°_cur
 = 
buf
->
√xt
;

3454 
buf
 = 
	`kmÆloc
((
isˇn_buf_t
), 
GFP_KERNEL
);

3455 i‡(!
buf
)

3456  
WL_SCAN_RESULTS_ABORTED
;

3457 
buf
->
√xt
 = 
NULL
;

3458 i‡(!
isˇn
->
li°_hdr
)

3459 
isˇn
->
li°_hdr
 = 
buf
;

3461 
±r
 = 
isˇn
->
li°_hdr
;

3462 
±r
->
√xt
) {

3463 
±r
 =Öå->
√xt
;

3465 
±r
->
√xt
 = 
buf
;

3468 
	`mem£t
(
buf
->
isˇn_buf
, 0, 
WLC_IW_ISCAN_MAXLEN
);

3469 
li°_buf
 = (
wl_isˇn_ªsu…s_t
*)
buf
->
isˇn_buf
;

3470 
ªsu…s
 = &
li°_buf
->results;

3471 
ªsu…s
->
buÊí
 = 
WL_ISCAN_RESULTS_FIXED_SIZE
;

3472 
ªsu…s
->
vîsi⁄
 = 0;

3473 
ªsu…s
->
cou¡
 = 0;

3475 
	`mem£t
(&
li°
, 0, (list));

3476 
li°
.
ªsu…s
.
buÊí
 = 
	`htod32
(
WLC_IW_ISCAN_MAXLEN
);

3477 (Ë
	`dev_iw_iov¨_gëbuf
(

3478 
isˇn
->
dev
,

3480 &
li°
,

3481 
WL_ISCAN_RESULTS_FIXED_SIZE
,

3482 
buf
->
isˇn_buf
,

3483 
WLC_IW_ISCAN_MAXLEN
);

3484 
ªsu…s
->
buÊí
 = 
	`dtoh32
(results->buflen);

3485 
ªsu…s
->
vîsi⁄
 = 
	`dtoh32
(results->version);

3486 
ªsu…s
->
cou¡
 = 
	`dtoh32
(results->count);

3487 
	`WL_TRACE
(("ªsu…s->cou¡ = %d\n", 
ªsu…s
->
cou¡
));

3489 
	`WL_TRACE
(("ªsu…s->buÊí = %d\n", 
ªsu…s
->
buÊí
));

3490 
°©us
 = 
	`dtoh32
(
li°_buf
->status);

3491  
°©us
;

3492 
	}
}

3494 
	$wl_iw_£nd_sˇn_com∂ëe
(
isˇn_öfo_t
 *
isˇn
)

3496 
iwªq_d©a
 
wrqu
;

3498 
	`mem£t
(&
wrqu
, 0, (wrqu));

3501 
	`wúñess_£nd_evít
(
isˇn
->
dev
, 
SIOCGIWSCAN
, &
wrqu
, 
NULL
);

3502 
	}
}

3505 
	$_isˇn_sysioc_thªad
(*
d©a
)

3507 
uöt32
 
°©us
;

3508 
isˇn_öfo_t
 *
isˇn
 = (isˇn_öfo_à*)
d©a
;

3510 
	`DAEMONIZE
("iscan_sysioc");

3512 
°©us
 = 
WL_SCAN_RESULTS_PARTIAL
;

3513 
	`down_öãºu±ibÀ
(&
isˇn
->
sysioc_£m
) == 0) {

3514 i‡(
isˇn
->
timî_⁄
) {

3515 
	`dñ_timî
(&
isˇn
->
timî
);

3516 
isˇn
->
timî_⁄
 = 0;

3519 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27))

3520 
	`π∆_lock
();

3522 
°©us
 = 
	`wl_iw_isˇn_gë
(
isˇn
);

3523 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27))

3524 
	`π∆_u∆ock
();

3527 
°©us
) {

3528 
WL_SCAN_RESULTS_PARTIAL
:

3529 
	`WL_TRACE
(("iscanresults incomplete\n"));

3530 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27))

3531 
	`π∆_lock
();

3534 
	`wl_iw_isˇn
(
isˇn
, 
NULL
, 
WL_SCAN_ACTION_CONTINUE
);

3535 #i‡(
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2, 6, 27))

3536 
	`π∆_u∆ock
();

3539 
isˇn
->
timî
.
expúes
 = 
jiffõs
 + 
	`m£cs_to_jiffõs
(isˇn->
timî_ms
);

3540 
	`add_timî
(&
isˇn
->
timî
);

3541 
isˇn
->
timî_⁄
 = 1;

3543 
WL_SCAN_RESULTS_SUCCESS
:

3544 
	`WL_TRACE
(("iscanresults complete\n"));

3545 
isˇn
->
isˇn_°©e
 = 
ISCAN_STATE_IDLE
;

3546 
	`wl_iw_£nd_sˇn_com∂ëe
(
isˇn
);

3548 
WL_SCAN_RESULTS_PENDING
:

3549 
	`WL_TRACE
(("iscanresultsÖending\n"));

3551 
isˇn
->
timî
.
expúes
 = 
jiffõs
 + 
	`m£cs_to_jiffõs
(isˇn->
timî_ms
);

3552 
	`add_timî
(&
isˇn
->
timî
);

3553 
isˇn
->
timî_⁄
 = 1;

3555 
WL_SCAN_RESULTS_ABORTED
:

3556 
	`WL_TRACE
(("iscanresultsáborted\n"));

3557 
isˇn
->
isˇn_°©e
 = 
ISCAN_STATE_IDLE
;

3558 
	`wl_iw_£nd_sˇn_com∂ëe
(
isˇn
);

3561 
	`WL_TRACE
(("isˇƒesu…†ªtu∫ed unknow¿°©u†%d\n", 
°©us
));

3565 
	`com∂ëe_™d_exô
(&
isˇn
->
sysioc_exôed
, 0);

3566 
	}
}

3569 
	$wl_iw_©èch
(
√t_devi˚
 *
dev
, * 
dhdp
)

3571 
isˇn_öfo_t
 *
isˇn
 = 
NULL
;

3573 i‡(!
dev
)

3576 
isˇn
 = 
	`kmÆloc
((
isˇn_öfo_t
), 
GFP_KERNEL
);

3577 i‡(!
isˇn
)

3578  -
ENOMEM
;

3579 
	`mem£t
(
isˇn
, 0, (
isˇn_öfo_t
));

3580 
isˇn
->
sysioc_pid
 = -1;

3582 
g_isˇn
 = 
isˇn
;

3583 
isˇn
->
dev
 = dev;

3584 
isˇn
->
isˇn_°©e
 = 
ISCAN_STATE_IDLE
;

3588 
isˇn
->
timî_ms
 = 2000;

3589 
	`öô_timî
(&
isˇn
->
timî
);

3590 
isˇn
->
timî
.
d©a
 = (
ul⁄g
)iscan;

3591 
isˇn
->
timî
.
fun˘i⁄
 = 
wl_iw_timîfunc
;

3593 
	`£ma_öô
(&
isˇn
->
sysioc_£m
, 0);

3594 
	`öô_com∂ëi⁄
(&
isˇn
->
sysioc_exôed
);

3595 
isˇn
->
sysioc_pid
 = 
	`kî√l_thªad
(
_isˇn_sysioc_thªad
, iscan, 0);

3596 i‡(
isˇn
->
sysioc_pid
 < 0)

3597  -
ENOMEM
;

3599 
	}
}

3601 
	$wl_iw_dëach
()

3603 
isˇn_buf_t
 *
buf
;

3604 
isˇn_öfo_t
 *
isˇn
 = 
g_isˇn
;

3605 i‡(!
isˇn
)

3607 i‡(
isˇn
->
sysioc_pid
 >= 0) {

3608 
	`KILL_PROC
(
isˇn
->
sysioc_pid
, 
SIGTERM
);

3609 
	`waô_f‹_com∂ëi⁄
(&
isˇn
->
sysioc_exôed
);

3612 
isˇn
->
li°_hdr
) {

3613 
buf
 = 
isˇn
->
li°_hdr
->
√xt
;

3614 
	`k‰ì
(
isˇn
->
li°_hdr
);

3615 
isˇn
->
li°_hdr
 = 
buf
;

3617 
	`k‰ì
(
isˇn
);

3618 
g_isˇn
 = 
NULL
;

3619 
	}
}

	@wl_iw.h

27 #i‚de‡
_wl_iw_h_


28 
	#_wl_iw_h_


	)

30 
	~<löux/wúñess.h
>

32 
	~<ty≥defs.h
>

33 
	~<¥Ÿo/ëhî√t.h
>

34 
	~<wlio˘l.h
>

36 
	#WL_SCAN_PARAMS_SSID_MAX
 10

	)

37 
	#GET_SSID
 "SSID="

	)

38 
	#GET_CHANNEL
 "CH="

	)

39 
	#GET_NPROBE
 "NPROBE="

	)

40 
	#GET_ACTIVE_ASSOC_DWELL
 "ACTIVE="

	)

41 
	#GET_PASSIVE_ASSOC_DWELL
 "PASSIVE="

	)

42 
	#GET_HOME_DWELL
 "HOME="

	)

43 
	#GET_SCAN_TYPE
 "TYPE="

	)

45 
	#BAND_GET_CMD
 "GETBAND"

	)

46 
	#BAND_SET_CMD
 "SETBAND"

	)

47 
	#DTIM_SKIP_GET_CMD
 "DTIMSKIPGET"

	)

48 
	#DTIM_SKIP_SET_CMD
 "DTIMSKIPSET"

	)

49 
	#SETSUSPEND_CMD
 "SETSUSPENDOPT"

	)

50 
	#PNOSSIDCLR_SET_CMD
 "PNOSSIDCLR"

	)

52 
	#PNOSETUP_SET_CMD
 "PNOSETUP "

	)

53 
	#PNOENABLE_SET_CMD
 "PNOFORCE"

	)

54 
	#PNODEBUG_SET_CMD
 "PNODEBUG"

	)

55 
	#TXPOWER_SET_CMD
 "TXPOWER"

	)

57 
	#MAC2STR
(
a
Ë◊)[0], (a)[1], (a)[2], (a)[3], (a)[4], (a)[5]

	)

58 
	#MACSTR
 "%02x:%02x:%02x:%02x:%02x:%02x"

	)

61 
	swl_iw_exåa_∑øms
 {

62 
	mèrgë_ch™√l
;

63 } 
	twl_iw_exåa_∑øms_t
;

65 
	s˙åy_loˇÀs_cu°om
 {

66 
	miso_abbªv
[
WLC_CNTRY_BUF_SZ
];

67 
	mcu°om_loˇÀ
[
WLC_CNTRY_BUF_SZ
];

68 
öt32
 
	mcu°om_loˇÀ_ªv
;

72 
	#WL_IW_RSSI_MINVAL
 -200

	)

73 
	#WL_IW_RSSI_NO_SIGNAL
 -91

	)

74 
	#WL_IW_RSSI_VERY_LOW
 -80

	)

75 
	#WL_IW_RSSI_LOW
 -70

	)

76 
	#WL_IW_RSSI_GOOD
 -68

	)

77 
	#WL_IW_RSSI_VERY_GOOD
 -58

	)

78 
	#WL_IW_RSSI_EXCELLENT
 -57

	)

79 
	#WL_IW_RSSI_INVALID
 0

	)

80 
	#MAX_WX_STRING
 80

	)

81 
	#SSID_FMT_BUF_LEN
 ((4 * 32Ë+ 1)

	)

82 
	#i•röt
(
c
Ë
	`bcm_i•röt
(c)

	)

83 
	#WL_IW_SET_ACTIVE_SCAN
 (
SIOCIWFIRSTPRIV
+1)

	)

84 
	#WL_IW_GET_RSSI
 (
SIOCIWFIRSTPRIV
+3)

	)

85 
	#WL_IW_SET_PASSIVE_SCAN
 (
SIOCIWFIRSTPRIV
+5)

	)

86 
	#WL_IW_GET_LINK_SPEED
 (
SIOCIWFIRSTPRIV
+7)

	)

87 
	#WL_IW_GET_CURR_MACADDR
 (
SIOCIWFIRSTPRIV
+9)

	)

88 
	#WL_IW_SET_STOP
 (
SIOCIWFIRSTPRIV
+11)

	)

89 
	#WL_IW_SET_START
 (
SIOCIWFIRSTPRIV
+13)

	)

91 
	#G_SCAN_RESULTS
 8*1024

	)

92 
	#WE_ADD_EVENT_FIX
 0x80

	)

93 
	#G_WLAN_SET_ON
 0

	)

94 
	#G_WLAN_SET_OFF
 1

	)

97 
	swl_iw
 {

98 
	mnick«me
[
IW_ESSID_MAX_SIZE
];

100 
iw_°©i°ics
 
	mw°©s
;

102 
	m•y_num
;

103 
uöt32
 
	mpw£c
;

104 
uöt32
 
	mgw£c
;

105 
boﬁ
 
	m¥ivacy_övoked
;

106 
ëhî_addr
 
	m•y_addr
[
IW_MAX_SPY
];

107 
iw_quÆôy
 
	m•y_quÆ
[
IW_MAX_SPY
];

108 *
	mwlöfo
;

109 } 
	twl_iw_t
;

111 
	swl_˘æ
 {

112 
timî_li°
 *
	mtimî
;

113 
√t_devi˚
 *
	mdev
;

114 
	msysioc_pid
;

115 
£m≠h‹e
 
	msysioc_£m
;

116 
com∂ëi⁄
 
	msysioc_exôed
;

120 #i‡
WIRELESS_EXT
 > 12

121 
	~<√t/iw_h™dÀr.h
>

122 c⁄° 
iw_h™dÀr_def
 
wl_iw_h™dÀr_def
;

125 
wl_iw_io˘l
(
√t_devi˚
 *
dev
, 
i‰eq
 *
rq
, 
cmd
);

126 
wl_iw_evít
(
√t_devi˚
 *
dev
, 
wl_evít_msg_t
 *
e
, * 
d©a
);

127 
wl_iw_gë_wúñess_°©s
(
√t_devi˚
 *
dev
, 
iw_°©i°ics
 *
w°©s
);

128 
wl_iw_©èch
(
√t_devi˚
 *
dev
, * 
dhdp
);

129 
wl_iw_£nd_¥iv_evít
(
√t_devi˚
 *
dev
, *
Êag
);

131 
wl_iw_dëach
();

133 
	#CSCAN_COMMAND
 "CSCAN "

	)

134 
	#CSCAN_TLV_PREFIX
 'S'

	)

135 
	#CSCAN_TLV_VERSION
 1

	)

136 
	#CSCAN_TLV_SUBVERSION
 0

	)

137 
	#CSCAN_TLV_TYPE_SSID_IE
 'S'

	)

138 
	#CSCAN_TLV_TYPE_CHANNEL_IE
 'C'

	)

139 
	#CSCAN_TLV_TYPE_NPROBE_IE
 'N'

	)

140 
	#CSCAN_TLV_TYPE_ACTIVE_IE
 'A'

	)

141 
	#CSCAN_TLV_TYPE_PASSIVE_IE
 'P'

	)

142 
	#CSCAN_TLV_TYPE_HOME_IE
 'H'

	)

143 
	#CSCAN_TLV_TYPE_STYPE_IE
 'T'

	)

145 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2, 6, 27)

146 
	#IWE_STREAM_ADD_EVENT
(
öfo
, 
°ªam
, 
íds
, 
iwe
, 
exåa
) \

147 
	`iwe_°ªam_add_evít
(
öfo
, 
°ªam
, 
íds
, 
iwe
, 
exåa
)

	)

148 
	#IWE_STREAM_ADD_VALUE
(
öfo
, 
evít
, 
vÆue
, 
íds
, 
iwe
, 
evít_Àn
) \

149 
	`iwe_°ªam_add_vÆue
(
öfo
, 
evít
, 
vÆue
, 
íds
, 
iwe
, 
evít_Àn
)

	)

150 
	#IWE_STREAM_ADD_POINT
(
öfo
, 
°ªam
, 
íds
, 
iwe
, 
exåa
) \

151 
	`iwe_°ªam_add_poöt
(
öfo
, 
°ªam
, 
íds
, 
iwe
, 
exåa
)

	)

153 
	#IWE_STREAM_ADD_EVENT
(
öfo
, 
°ªam
, 
íds
, 
iwe
, 
exåa
) \

154 
	`iwe_°ªam_add_evít
(
°ªam
, 
íds
, 
iwe
, 
exåa
)

	)

155 
	#IWE_STREAM_ADD_VALUE
(
öfo
, 
evít
, 
vÆue
, 
íds
, 
iwe
, 
evít_Àn
) \

156 
	`iwe_°ªam_add_vÆue
(
evít
, 
vÆue
, 
íds
, 
iwe
, 
evít_Àn
)

	)

157 
	#IWE_STREAM_ADD_POINT
(
öfo
, 
°ªam
, 
íds
, 
iwe
, 
exåa
) \

158 
	`iwe_°ªam_add_poöt
(
°ªam
, 
íds
, 
iwe
, 
exåa
)

	)

	@wl_linux_mon.c

27 
	~<o¶.h
>

28 
	~<löux/°rög.h
>

29 
	~<löux/moduÀ.h
>

30 
	~<löux/√tdevi˚.h
>

31 
	~<löux/ëhîdevi˚.h
>

32 
	~<löux/if_¨p.h
>

33 
	~<löux/õì80211.h
>

34 
	~<löux/π√éök.h
>

35 
	~<√t/õì80211_ødiŸ≠.h
>

37 
	~<wlio˘l.h
>

38 
	~<bcmutûs.h
>

39 
	~<dhd_dbg.h
>

40 
	~<dngl_°©s.h
>

41 
	~<dhd.h
>

43 
	em⁄ô‹_°©es


45 
	mMONITOR_STATE_DEINIT
 = 0x0,

46 
	mMONITOR_STATE_INIT
 = 0x1,

47 
	mMONITOR_STATE_INTERFACE_ADDED
 = 0x2,

48 
	mMONITOR_STATE_INTERFACE_DELETED
 = 0x4

49 } 
	tm⁄ô‹_°©es_t
;

50 
dhd_add_m⁄ô‹
(*
«me
, 
√t_devi˚
 **
√w_ndev
);

51 
dhd_°¨t_xmô
(
sk_buff
 *
skb
, 
√t_devi˚
 *
√t
);

52 
dhd_dñ_m⁄ô‹
(
√t_devi˚
 *
ndev
);

53 
dhd_m⁄ô‹_öô
(*
dhd_pub
);

54 
dhd_m⁄ô‹_unöô
();

59 #i‚de‡
DHD_MAX_IFS


60 
	#DHD_MAX_IFS
 16

	)

62 
	#MON_PRINT
(
f‹m©
, ...Ë
	`¥ötk
("DHD-MON: %†" f‹m©, 
__func__
, ##
__VA_ARGS__
)

	)

63 
	#MON_TRACE
 
MON_PRINT


	)

65 
	sm⁄ô‹_öãrÁ˚
 {

66 
	mødiŸ≠_íabÀd
;

67 
√t_devi˚
* 
	mªÆ_ndev
;

68 
√t_devi˚
* 
	mm⁄_ndev
;

69 } 
	tm⁄ô‹_öãrÁ˚
;

71 
	sdhd_löux_m⁄ô‹
 {

72 *
	mdhd_pub
;

73 
m⁄ô‹_°©es_t
 
	mm⁄ô‹_°©e
;

74 
m⁄ô‹_öãrÁ˚
 
	mm⁄_if
[
DHD_MAX_IFS
];

75 
muãx
 
	mlock
;

76 } 
	tdhd_löux_m⁄ô‹_t
;

78 
dhd_löux_m⁄ô‹_t
 
	gg_m⁄ô‹
;

80 
√t_devi˚
* 
lookup_ªÆ_√tdev
(*
«me
);

81 
m⁄ô‹_öãrÁ˚
* 
ndev_to_m⁄if
(
√t_devi˚
 *
ndev
);

82 
dhd_m⁄_if_›í
(
√t_devi˚
 *
ndev
);

83 
dhd_m⁄_if_°›
(
√t_devi˚
 *
ndev
);

84 
dhd_m⁄_if_subif_°¨t_xmô
(
sk_buff
 *
skb
, 
√t_devi˚
 *
ndev
);

85 
dhd_m⁄_if_£t_mu…iˇ°_li°
(
√t_devi˚
 *
ndev
);

86 
dhd_m⁄_if_ch™ge_mac
(
√t_devi˚
 *
ndev
, *
addr
);

88 c⁄° 
√t_devi˚_›s
 
	gdhd_m⁄_if_›s
 = {

89 .
ndo_›í
 = 
dhd_m⁄_if_›í
,

90 .
	gndo_°›
 = 
dhd_m⁄_if_°›
,

91 .
	gndo_°¨t_xmô
 = 
dhd_m⁄_if_subif_°¨t_xmô
,

92 #i‡(
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(3, 2, 0))

93 .
	gndo_£t_rx_mode
 = 
dhd_m⁄_if_£t_mu…iˇ°_li°
,

95 .
	gndo_£t_mu…iˇ°_li°
 = 
dhd_m⁄_if_£t_mu…iˇ°_li°
,

97 .
	gndo_£t_mac_addªss
 = 
dhd_m⁄_if_ch™ge_mac
,

107 
√t_devi˚
* 
	$lookup_ªÆ_√tdev
(*
«me
)

109 
√t_devi˚
 *
ndev_found
 = 
NULL
;

111 
i
;

112 
Àn
 = 0;

113 
œ°_«me_Àn
 = 0;

114 
√t_devi˚
 *
ndev
;

120 
i
 = 0; i < 
DHD_MAX_IFS
; i++) {

121 
ndev
 = 
	`dhd_idx2√t
(
g_m⁄ô‹
.
dhd_pub
, 
i
);

126 i‡(
ndev
 && 
	`°r°r
“dev->
«me
, "p2p-p2p0")) {

127 
Àn
 = 
	`°æí
("p2p");

132 
Àn
 = 0;

134 i‡(
ndev
 && 
	`°r°r
(
«me
, (ndev->«mê+ 
Àn
))) {

135 i‡(
	`°æí
(
ndev
->
«me
Ë> 
œ°_«me_Àn
) {

136 
ndev_found
 = 
ndev
;

137 
œ°_«me_Àn
 = 
	`°æí
(
ndev
->
«me
);

142  
ndev_found
;

143 
	}
}

145 
m⁄ô‹_öãrÁ˚
* 
	$ndev_to_m⁄if
(
√t_devi˚
 *
ndev
)

147 
i
;

149 
i
 = 0; i < 
DHD_MAX_IFS
; i++) {

150 i‡(
g_m⁄ô‹
.
m⁄_if
[
i
].
m⁄_ndev
 =
ndev
)

151  &
g_m⁄ô‹
.
m⁄_if
[
i
];

154  
NULL
;

155 
	}
}

157 
	$dhd_m⁄_if_›í
(
√t_devi˚
 *
ndev
)

159 
ªt
 = 0;

161 
	`MON_PRINT
("enter\n");

162  
ªt
;

163 
	}
}

165 
	$dhd_m⁄_if_°›
(
√t_devi˚
 *
ndev
)

167 
ªt
 = 0;

169 
	`MON_PRINT
("enter\n");

170  
ªt
;

171 
	}
}

173 
	$dhd_m⁄_if_subif_°¨t_xmô
(
sk_buff
 *
skb
, 
√t_devi˚
 *
ndev
)

175 
ªt
 = 0;

176 
π≠_Àn
;

177 
qos_Àn
 = 0;

178 
dŸ11_hdr_Àn
 = 24;

179 
¢≠_Àn
 = 6;

180 *
pd©a
;

181 
‰ame_˘l
;

182 
§c_mac_addr
[6];

183 
d°_mac_addr
[6];

184 
õì80211_hdr
 *
dŸ11_hdr
;

185 
õì80211_ødiŸ≠_hódî
 *
π≠_hdr
;

186 
m⁄ô‹_öãrÁ˚
* 
m⁄_if
;

188 
	`MON_PRINT
("enter\n");

190 
m⁄_if
 = 
	`ndev_to_m⁄if
(
ndev
);

191 i‡(
m⁄_if
 =
NULL
 || m⁄_if->
ªÆ_ndev
 == NULL) {

192 
	`MON_PRINT
(" cannot find matchedÇet dev, skipÅheÖacket\n");

193 
Áû
;

196 i‡(
	`u∆ikñy
(
skb
->
Àn
 < (
õì80211_ødiŸ≠_hódî
)))

197 
Áû
;

199 
π≠_hdr
 = (
õì80211_ødiŸ≠_hódî
 *)
skb
->
d©a
;

200 i‡(
	`u∆ikñy
(
π≠_hdr
->
ô_vîsi⁄
))

201 
Áû
;

203 
π≠_Àn
 = 
	`õì80211_gë_ødiŸ≠_Àn
(
skb
->
d©a
);

204 i‡(
	`u∆ikñy
(
skb
->
Àn
 < 
π≠_Àn
))

205 
Áû
;

207 
	`MON_PRINT
("ødiŸ≠Üí (should bê14): %d\n", 
π≠_Àn
);

210 
	`skb_puŒ
(
skb
, 
π≠_Àn
);

212 
dŸ11_hdr
 = (
õì80211_hdr
 *)
skb
->
d©a
;

213 
‰ame_˘l
 = 
	`À16_to_˝u
(
dŸ11_hdr
->
‰ame_c⁄åﬁ
);

215 i‡((
‰ame_˘l
 & 
IEEE80211_FCTL_FTYPE
Ë=
IEEE80211_FTYPE_DATA
) {

219 i‡(
dŸ11_hdr
->
‰ame_c⁄åﬁ
 & 0x0080)

220 
qos_Àn
 = 2;

221 i‡((
dŸ11_hdr
->
‰ame_c⁄åﬁ
 & 0x0300) == 0x0300)

222 
dŸ11_hdr_Àn
 += 6;

224 
	`mem˝y
(
d°_mac_addr
, 
dŸ11_hdr
->
addr1
, (dst_mac_addr));

225 
	`mem˝y
(
§c_mac_addr
, 
dŸ11_hdr
->
addr2
, (src_mac_addr));

230 
	`skb_puŒ
(
skb
, 
dŸ11_hdr_Àn
 + 
qos_Àn
 + 
¢≠_Àn
 - (
§c_mac_addr
) * 2);

231 
pd©a
 = (*)
skb
->
d©a
;

232 
	`mem˝y
(
pd©a
, 
d°_mac_addr
, (dst_mac_addr));

233 
	`mem˝y
(
pd©a
 + (
d°_mac_addr
), 
§c_mac_addr
, (src_mac_addr));

234 
	`PKTSETPRIO
(
skb
, 0);

236 
	`MON_PRINT
("i‡«me: %s, m©ched i‡«mê%s\n", 
ndev
->
«me
, 
m⁄_if
->
ªÆ_ndev
->name);

239 
ªt
 = 
	`dhd_°¨t_xmô
(
skb
, 
m⁄_if
->
ªÆ_ndev
);

241  
ªt
;

243 
Áû
:

244 
	`dev_k‰ì_skb
(
skb
);

246 
	}
}

248 
	$dhd_m⁄_if_£t_mu…iˇ°_li°
(
√t_devi˚
 *
ndev
)

250 
m⁄ô‹_öãrÁ˚
* 
m⁄_if
;

252 
m⁄_if
 = 
	`ndev_to_m⁄if
(
ndev
);

253 i‡(
m⁄_if
 =
NULL
 || m⁄_if->
ªÆ_ndev
 == NULL) {

254 
	`MON_PRINT
(" cannot find matchedÇet dev, skipÅheÖacket\n");

256 
	`MON_PRINT
("enter, ifÇame: %s, matched ifÇame %s\n",

257 
ndev
->
«me
, 
m⁄_if
->
ªÆ_ndev
->name);

259 
	}
}

261 
	$dhd_m⁄_if_ch™ge_mac
(
√t_devi˚
 *
ndev
, *
addr
)

263 
ªt
 = 0;

264 
m⁄ô‹_öãrÁ˚
* 
m⁄_if
;

266 
m⁄_if
 = 
	`ndev_to_m⁄if
(
ndev
);

267 i‡(
m⁄_if
 =
NULL
 || m⁄_if->
ªÆ_ndev
 == NULL) {

268 
	`MON_PRINT
(" cannot find matchedÇet dev, skipÅheÖacket\n");

270 
	`MON_PRINT
("enter, ifÇame: %s, matched ifÇame %s\n",

271 
ndev
->
«me
, 
m⁄_if
->
ªÆ_ndev
->name);

273  
ªt
;

274 
	}
}

280 
	$dhd_add_m⁄ô‹
(*
«me
, 
√t_devi˚
 **
√w_ndev
)

282 
i
;

283 
idx
 = -1;

284 
ªt
 = 0;

285 
√t_devi˚
* 
ndev
 = 
NULL
;

286 
dhd_löux_m⁄ô‹_t
 **
dhd_m⁄
;

288 
	`muãx_lock
(&
g_m⁄ô‹
.
lock
);

290 
	`MON_TRACE
("íãr, i‡«me: %s\n", 
«me
);

291 i‡(!
«me
 || !
√w_ndev
) {

292 
	`MON_PRINT
("invalidÖarameters\n");

293 
ªt
 = -
EINVAL
;

294 
out
;

300 
i
 = 0; i < 
DHD_MAX_IFS
; i++)

301 i‡(
g_m⁄ô‹
.
m⁄_if
[
i
].
m⁄_ndev
 =
NULL
) {

302 
idx
 = 
i
;

305 i‡(
idx
 == -1) {

306 
	`MON_PRINT
("exceeds maximum interfaces\n");

307 
ªt
 = -
EFAULT
;

308 
out
;

311 
ndev
 = 
	`Æloc_ëhîdev
((
dhd_löux_m⁄ô‹_t
*));

312 i‡(!
ndev
) {

313 
	`MON_PRINT
("failedÅoállocate memory\n");

314 
ªt
 = -
ENOMEM
;

315 
out
;

318 
ndev
->
ty≥
 = 
ARPHRD_IEEE80211_RADIOTAP
;

319 
	`°∫˝y
(
ndev
->
«me
,Çame, 
IFNAMSIZ
);

320 
ndev
->
«me
[
IFNAMSIZ
 - 1] = 0;

321 
ndev
->
√tdev_›s
 = &
dhd_m⁄_if_›s
;

323 
ªt
 = 
	`ªgi°î_√tdevi˚
(
ndev
);

324 i‡(
ªt
) {

325 
	`MON_PRINT
("Ñegi°î_√tdevi˚ faûed (%d)\n", 
ªt
);

326 
out
;

329 *
√w_ndev
 = 
ndev
;

330 
g_m⁄ô‹
.
m⁄_if
[
idx
].
ødiŸ≠_íabÀd
 = 
TRUE
;

331 
g_m⁄ô‹
.
m⁄_if
[
idx
].
m⁄_ndev
 = 
ndev
;

332 
g_m⁄ô‹
.
m⁄_if
[
idx
].
ªÆ_ndev
 = 
	`lookup_ªÆ_√tdev
(
«me
);

333 
dhd_m⁄
 = (
dhd_löux_m⁄ô‹_t
 **)
	`√tdev_¥iv
(
ndev
);

334 *
dhd_m⁄
 = &
g_m⁄ô‹
;

335 
g_m⁄ô‹
.
m⁄ô‹_°©e
 = 
MONITOR_STATE_INTERFACE_ADDED
;

336 
	`MON_PRINT
("√àdevi˚Ñëu∫ed: 0x%p\n", 
ndev
);

337 
	`MON_PRINT
("foundá m©chedÇë devi˚,Çamê%s\n", 
g_m⁄ô‹
.
m⁄_if
[
idx
].
ªÆ_ndev
->
«me
);

339 
out
:

340 i‡(
ªt
 && 
ndev
)

341 
	`‰ì_√tdev
(
ndev
);

343 
	`muãx_u∆ock
(&
g_m⁄ô‹
.
lock
);

344  
ªt
;

346 
	}
}

348 
	$dhd_dñ_m⁄ô‹
(
√t_devi˚
 *
ndev
)

350 
i
;

351 
boﬁ
 
rﬁlback_lock
 = 
Ál£
;

352 i‡(!
ndev
)

353  -
EINVAL
;

354 
	`muãx_lock
(&
g_m⁄ô‹
.
lock
);

355 
i
 = 0; i < 
DHD_MAX_IFS
; i++) {

356 i‡(
g_m⁄ô‹
.
m⁄_if
[
i
].
m⁄_ndev
 =
ndev
 ||

357 
g_m⁄ô‹
.
m⁄_if
[
i
].
ªÆ_ndev
 =
ndev
) {

358 
g_m⁄ô‹
.
m⁄_if
[
i
].
ªÆ_ndev
 = 
NULL
;

359 i‡(
	`π∆_is_locked
()) {

360 
	`π∆_u∆ock
();

361 
rﬁlback_lock
 = 
åue
;

363 
	`uƒegi°î_√tdev
(
g_m⁄ô‹
.
m⁄_if
[
i
].
m⁄_ndev
);

364 
	`‰ì_√tdev
(
g_m⁄ô‹
.
m⁄_if
[
i
].
m⁄_ndev
);

365 
g_m⁄ô‹
.
m⁄_if
[
i
].
m⁄_ndev
 = 
NULL
;

366 
g_m⁄ô‹
.
m⁄ô‹_°©e
 = 
MONITOR_STATE_INTERFACE_DELETED
;

370 i‡(
rﬁlback_lock
) {

371 
	`π∆_lock
();

372 
rﬁlback_lock
 = 
Ál£
;

375 i‡(
g_m⁄ô‹
.
m⁄ô‹_°©e
 !=

376 
MONITOR_STATE_INTERFACE_DELETED
)

377 
	`MON_PRINT
("interfaceÇot found in monitor IFárray, isÅhisá monitor IF? 0x%p\n",

378 
ndev
);

379 
	`muãx_u∆ock
(&
g_m⁄ô‹
.
lock
);

382 
	}
}

384 
	$dhd_m⁄ô‹_öô
(*
dhd_pub
)

386 i‡(
g_m⁄ô‹
.
m⁄ô‹_°©e
 =
MONITOR_STATE_DEINIT
) {

387 
g_m⁄ô‹
.
dhd_pub
 = dhd_pub;

388 
	`muãx_öô
(&
g_m⁄ô‹
.
lock
);

389 
g_m⁄ô‹
.
m⁄ô‹_°©e
 = 
MONITOR_STATE_INIT
;

392 
	}
}

394 
	$dhd_m⁄ô‹_unöô
()

396 
i
;

397 
√t_devi˚
 *
ndev
;

398 
boﬁ
 
rﬁlback_lock
 = 
Ál£
;

399 
	`muãx_lock
(&
g_m⁄ô‹
.
lock
);

400 i‡(
g_m⁄ô‹
.
m⁄ô‹_°©e
 !
MONITOR_STATE_DEINIT
) {

401 
i
 = 0; i < 
DHD_MAX_IFS
; i++) {

402 
ndev
 = 
g_m⁄ô‹
.
m⁄_if
[
i
].
m⁄_ndev
;

403 i‡(
ndev
) {

404 i‡(
	`π∆_is_locked
()) {

405 
	`π∆_u∆ock
();

406 
rﬁlback_lock
 = 
åue
;

408 
	`uƒegi°î_√tdev
(
ndev
);

409 
	`‰ì_√tdev
(
ndev
);

410 
g_m⁄ô‹
.
m⁄_if
[
i
].
ªÆ_ndev
 = 
NULL
;

411 
g_m⁄ô‹
.
m⁄_if
[
i
].
m⁄_ndev
 = 
NULL
;

412 i‡(
rﬁlback_lock
) {

413 
	`π∆_lock
();

414 
rﬁlback_lock
 = 
Ál£
;

418 
g_m⁄ô‹
.
m⁄ô‹_°©e
 = 
MONITOR_STATE_DEINIT
;

420 
	`muãx_u∆ock
(&
g_m⁄ô‹
.
lock
);

422 
	}
}

	@wldev_common.c

27 
	~<o¶.h
>

28 
	~<löux/kî√l.h
>

29 
	~<löux/kthªad.h
>

30 
	~<löux/√tdevi˚.h
>

32 
	~<wldev_comm⁄.h
>

33 
	~<bcmutûs.h
>

35 
	#htod32
(
i
Ë
	)
i

36 
	#htod16
(
i
Ë
	)
i

37 
	#dtoh32
(
i
Ë
	)
i

38 
	#dtoh16
(
i
Ë
	)
i

39 
	#htodch™•ec
(
i
Ë
	)
i

40 
	#dtohch™•ec
(
i
Ë
	)
i

42 
	#WLDEV_ERROR
(
¨gs
) \

44 
	`¥ötk
(
KERN_ERR
 "WLDEV-ERRORË%†: ", 
__func__
); \

45 
¥ötk
 
¨gs
; \

46 } 0)

	)

48 
dhd_io˘l_íåy_loˇl
(
√t_devi˚
 *
√t
, 
wl_io˘l_t
 *
ioc
, 
cmd
);

50 
s32
 
	$wldev_io˘l
(

51 
√t_devi˚
 *
dev
, 
u32
 
cmd
, *
¨g
, u32 
Àn
, u32 
£t
)

53 
s32
 
ªt
 = 0;

54 
wl_io˘l
 
ioc
;

57 
	`mem£t
(&
ioc
, 0, (ioc));

58 
ioc
.
cmd
 = cmd;

59 
ioc
.
buf
 = 
¨g
;

60 
ioc
.
Àn
 =Üen;

61 
ioc
.
£t
 = set;

63 
ªt
 = 
	`dhd_io˘l_íåy_loˇl
(
dev
, &
ioc
, 
cmd
);

65  
ªt
;

66 
	}
}

72 
s32
 
	$wldev_mkiov¨
(

73 
s8
 *
iov¨_«me
, s8 *
∑øm
, 
s32
 
∑ømÀn
,

74 
s8
 *
iov¨_buf
, 
u32
 
buÊí
)

76 
s32
 
iﬁí
 = 0;

78 
iﬁí
 = 
	`bcm_mkiov¨
(
iov¨_«me
, 
∑øm
, 
∑ømÀn
, 
iov¨_buf
, 
buÊí
);

79  
iﬁí
;

80 
	}
}

82 
s32
 
	$wldev_iov¨_gëbuf
(

83 
√t_devi˚
 *
dev
, 
s8
 *
iov¨_«me
,

84 *
∑øm
, 
s32
 
∑ømÀn
, *
buf
, s32 
buÊí
, 
muãx
* 
buf_sync
)

86 
s32
 
ªt
 = 0;

87 i‡(
buf_sync
) {

88 
	`muãx_lock
(
buf_sync
);

90 
	`wldev_mkiov¨
(
iov¨_«me
, 
∑øm
, 
∑ømÀn
, 
buf
, 
buÊí
);

91 
ªt
 = 
	`wldev_io˘l
(
dev
, 
WLC_GET_VAR
, 
buf
, 
buÊí
, 
FALSE
);

92 i‡(
buf_sync
)

93 
	`muãx_u∆ock
(
buf_sync
);

94  
ªt
;

95 
	}
}

98 
s32
 
	$wldev_iov¨_£tbuf
(

99 
√t_devi˚
 *
dev
, 
s8
 *
iov¨_«me
,

100 *
∑øm
, 
s32
 
∑ømÀn
, *
buf
, s32 
buÊí
, 
muãx
* 
buf_sync
)

102 
s32
 
ªt
 = 0;

103 
s32
 
iov¨_Àn
;

104 i‡(
buf_sync
) {

105 
	`muãx_lock
(
buf_sync
);

107 
iov¨_Àn
 = 
	`wldev_mkiov¨
(
iov¨_«me
, 
∑øm
, 
∑ømÀn
, 
buf
, 
buÊí
);

108 i‡(
iov¨_Àn
 > 0)

109 
ªt
 = 
	`wldev_io˘l
(
dev
, 
WLC_SET_VAR
, 
buf
, 
iov¨_Àn
, 
TRUE
);

111 
ªt
 = 
BCME_BUFTOOSHORT
;

112 i‡(
buf_sync
)

113 
	`muãx_u∆ock
(
buf_sync
);

114  
ªt
;

115 
	}
}

117 
s32
 
	$wldev_iov¨_£töt
(

118 
√t_devi˚
 *
dev
, 
s8
 *
iov¨
, 
s32
 
vÆ
)

120 
s8
 
iov¨_buf
[
WLC_IOCTL_SMLEN
];

122 
vÆ
 = 
	`htod32
(val);

123 
	`mem£t
(
iov¨_buf
, 0, (iovar_buf));

124  
	`wldev_iov¨_£tbuf
(
dev
, 
iov¨
, &
vÆ
, (vÆ), 
iov¨_buf
,

125 (
iov¨_buf
), 
NULL
);

126 
	}
}

129 
s32
 
	$wldev_iov¨_gëöt
(

130 
√t_devi˚
 *
dev
, 
s8
 *
iov¨
, 
s32
 *
pvÆ
)

132 
s8
 
iov¨_buf
[
WLC_IOCTL_SMLEN
];

133 
s32
 
îr
;

135 
	`mem£t
(
iov¨_buf
, 0, (iovar_buf));

136 
îr
 = 
	`wldev_iov¨_gëbuf
(
dev
, 
iov¨
, 
pvÆ
, (*pvÆ), 
iov¨_buf
,

137 (
iov¨_buf
), 
NULL
);

138 i‡(
îr
 == 0)

140 
	`mem˝y
(
pvÆ
, 
iov¨_buf
, (*pval));

141 *
pvÆ
 = 
	`dtoh32
(*pval);

143  
îr
;

144 
	}
}

150 
s32
 
	$wldev_mkiov¨_bsscfg
(

151 c⁄° 
s8
 *
iov¨_«me
, s8 *
∑øm
, 
s32
 
∑ømÀn
,

152 
s8
 *
iov¨_buf
, 
s32
 
buÊí
, s32 
bssidx
)

154 c⁄° 
s8
 *
¥efix
 = "bsscfg:";

155 
s8
 *
p
;

156 
u32
 
¥efixÀn
;

157 
u32
 
«mñí
;

158 
u32
 
iﬁí
;

160 i‡(
bssidx
 == 0) {

161  
	`wldev_mkiov¨
((
s8
*)
iov¨_«me
, (s8 *)
∑øm
, 
∑ømÀn
,

162 (
s8
 *Ë
iov¨_buf
, 
buÊí
);

165 
¥efixÀn
 = (
u32
Ë
	`°æí
(
¥efix
);

166 
«mñí
 = (
u32
Ë
	`°æí
(
iov¨_«me
) + 1;

167 
iﬁí
 = 
¥efixÀn
 + 
«mñí
 + (
u32
Ë+ 
∑ømÀn
;

169 i‡(
buÊí
 < 0 || 
iﬁí
 > (
u32
)buflen)

171 
	`WLDEV_ERROR
(("%s: buf„∏i†toÿsh‹t\n", 
__FUNCTION__
));

172  
BCME_BUFTOOSHORT
;

175 
p
 = (
s8
 *)
iov¨_buf
;

178 
	`mem˝y
(
p
, 
¥efix
, 
¥efixÀn
);

179 
p
 +
¥efixÀn
;

182 
	`mem˝y
(
p
, 
iov¨_«me
, 
«mñí
);

183 
p
 +
«mñí
;

186 
bssidx
 = 
	`htod32
(bssidx);

187 
	`mem˝y
(
p
, &
bssidx
, (
u32
));

188 
p
 +(
u32
);

191 i‡(
∑ømÀn
)

192 
	`mem˝y
(
p
, 
∑øm
, 
∑ømÀn
);

194  
iﬁí
;

196 
	}
}

198 
s32
 
	$wldev_iov¨_gëbuf_bsscfg
(

199 
√t_devi˚
 *
dev
, 
s8
 *
iov¨_«me
,

200 *
∑øm
, 
s32
 
∑ømÀn
, *
buf
, s32 
buÊí
, s32 
bsscfg_idx
, 
muãx
* 
buf_sync
)

202 
s32
 
ªt
 = 0;

203 i‡(
buf_sync
) {

204 
	`muãx_lock
(
buf_sync
);

207 
	`wldev_mkiov¨_bsscfg
(
iov¨_«me
, 
∑øm
, 
∑ømÀn
, 
buf
, 
buÊí
, 
bsscfg_idx
);

208 
ªt
 = 
	`wldev_io˘l
(
dev
, 
WLC_GET_VAR
, 
buf
, 
buÊí
, 
FALSE
);

209 i‡(
buf_sync
) {

210 
	`muãx_u∆ock
(
buf_sync
);

212  
ªt
;

214 
	}
}

216 
s32
 
	$wldev_iov¨_£tbuf_bsscfg
(

217 
√t_devi˚
 *
dev
, 
s8
 *
iov¨_«me
,

218 *
∑øm
, 
s32
 
∑ømÀn
, *
buf
, s32 
buÊí
, s32 
bsscfg_idx
, 
muãx
* 
buf_sync
)

220 
s32
 
ªt
 = 0;

221 
s32
 
iov¨_Àn
;

222 i‡(
buf_sync
) {

223 
	`muãx_lock
(
buf_sync
);

225 
iov¨_Àn
 = 
	`wldev_mkiov¨_bsscfg
(
iov¨_«me
, 
∑øm
, 
∑ømÀn
, 
buf
, 
buÊí
, 
bsscfg_idx
);

226 i‡(
iov¨_Àn
 > 0)

227 
ªt
 = 
	`wldev_io˘l
(
dev
, 
WLC_SET_VAR
, 
buf
, 
iov¨_Àn
, 
TRUE
);

229 
ªt
 = 
BCME_BUFTOOSHORT
;

232 i‡(
buf_sync
) {

233 
	`muãx_u∆ock
(
buf_sync
);

235  
ªt
;

236 
	}
}

238 
s32
 
	$wldev_iov¨_£töt_bsscfg
(

239 
√t_devi˚
 *
dev
, 
s8
 *
iov¨
, 
s32
 
vÆ
, s32 
bssidx
)

241 
s8
 
iov¨_buf
[
WLC_IOCTL_SMLEN
];

243 
vÆ
 = 
	`htod32
(val);

244 
	`mem£t
(
iov¨_buf
, 0, (iovar_buf));

245  
	`wldev_iov¨_£tbuf_bsscfg
(
dev
, 
iov¨
, &
vÆ
, (vÆ), 
iov¨_buf
,

246 (
iov¨_buf
), 
bssidx
, 
NULL
);

247 
	}
}

250 
s32
 
	$wldev_iov¨_gëöt_bsscfg
(

251 
√t_devi˚
 *
dev
, 
s8
 *
iov¨
, 
s32
 *
pvÆ
, s32 
bssidx
)

253 
s8
 
iov¨_buf
[
WLC_IOCTL_SMLEN
];

254 
s32
 
îr
;

256 
	`mem£t
(
iov¨_buf
, 0, (iovar_buf));

257 
îr
 = 
	`wldev_iov¨_gëbuf_bsscfg
(
dev
, 
iov¨
, 
pvÆ
, (*pvÆ), 
iov¨_buf
,

258 (
iov¨_buf
), 
bssidx
, 
NULL
);

259 i‡(
îr
 == 0)

261 
	`mem˝y
(
pvÆ
, 
iov¨_buf
, (*pval));

262 *
pvÆ
 = 
	`dtoh32
(*pval);

264  
îr
;

265 
	}
}

267 
	$wldev_gë_lök_•ìd
(

268 
√t_devi˚
 *
dev
, *
∂ök_•ìd
)

270 
îr‹
;

272 i‡(!
∂ök_•ìd
)

273  -
ENOMEM
;

274 
îr‹
 = 
	`wldev_io˘l
(
dev
, 
WLC_GET_RATE
, 
∂ök_•ìd
, (), 0);

275 i‡(
	`u∆ikñy
(
îr‹
))

276  
îr‹
;

279 *
∂ök_•ìd
 *= 500;

280  
îr‹
;

281 
	}
}

283 
	$wldev_gë_rssi
(

284 
√t_devi˚
 *
dev
, *
¥ssi
)

286 
scb_vÆ_t
 
scb_vÆ
;

287 
îr‹
;

289 i‡(!
¥ssi
)

290  -
ENOMEM
;

291 
	`bzîo
(&
scb_vÆ
, (
scb_vÆ_t
));

293 
îr‹
 = 
	`wldev_io˘l
(
dev
, 
WLC_GET_RSSI
, &
scb_vÆ
, (
scb_vÆ_t
), 0);

294 i‡(
	`u∆ikñy
(
îr‹
))

295  
îr‹
;

297 *
¥ssi
 = 
	`dtoh32
(
scb_vÆ
.
vÆ
);

298  
îr‹
;

299 
	}
}

301 
	$wldev_gë_ssid
(

302 
√t_devi˚
 *
dev
, 
wlc_ssid_t
 *
pssid
)

304 
îr‹
;

306 i‡(!
pssid
)

307  -
ENOMEM
;

308 
îr‹
 = 
	`wldev_io˘l
(
dev
, 
WLC_GET_SSID
, 
pssid
, (
wlc_ssid_t
), 0);

309 i‡(
	`u∆ikñy
(
îr‹
))

310  
îr‹
;

311 
pssid
->
SSID_Àn
 = 
	`dtoh32
(pssid->SSID_len);

312  
îr‹
;

313 
	}
}

315 
	$wldev_gë_b™d
(

316 
√t_devi˚
 *
dev
, 
uöt
 *
pb™d
)

318 
îr‹
;

320 
îr‹
 = 
	`wldev_io˘l
(
dev
, 
WLC_GET_BAND
, 
pb™d
, (
uöt
), 0);

321  
îr‹
;

322 
	}
}

324 
	$wldev_£t_b™d
(

325 
√t_devi˚
 *
dev
, 
uöt
 
b™d
)

327 
îr‹
 = -1;

329 i‡((
b™d
 =
WLC_BAND_AUTO
Ë|| (b™d =
WLC_BAND_5G
Ë|| (b™d =
WLC_BAND_2G
)) {

330 
îr‹
 = 
	`wldev_io˘l
(
dev
, 
WLC_SET_BAND
, &
b™d
, (b™d), 
åue
);

331 i‡(!
îr‹
)

332 
	`dhd_bus_b™d_£t
(
dev
, 
b™d
);

334  
îr‹
;

335 
	}
}

337 
	$wldev_£t_cou¡ry
(

338 
√t_devi˚
 *
dev
, *
cou¡ry_code
)

340 
îr‹
 = -1;

341 
wl_cou¡ry_t
 
c•ec
 = {{0}, 0, {0}};

342 
scb_vÆ_t
 
scbvÆ
;

343 
smbuf
[
WLC_IOCTL_SMLEN
];

345 i‡(!
cou¡ry_code
)

346  
îr‹
;

348 
îr‹
 = 
	`wldev_iov¨_gëbuf
(
dev
, "cou¡ry", &
c•ec
, (cspec),

349 
smbuf
, (smbuf), 
NULL
);

350 i‡(
îr‹
 < 0)

351 
	`WLDEV_ERROR
(("%s: gë cou¡ry faûed = %d\n", 
__FUNCTION__
, 
îr‹
));

353 i‡((
îr‹
 < 0) ||

354 (
	`°∫cmp
(
cou¡ry_code
, 
smbuf
, 
WLC_CNTRY_BUF_SZ
) != 0)) {

355 
	`bzîo
(&
scbvÆ
, (
scb_vÆ_t
));

356 
îr‹
 = 
	`wldev_io˘l
(
dev
, 
WLC_DISASSOC
, &
scbvÆ
, (
scb_vÆ_t
), 
åue
);

357 i‡(
îr‹
 < 0) {

358 
	`WLDEV_ERROR
(("%s: set country failed dueÅo DisassocÉrror %d\n",

359 
__FUNCTION__
, 
îr‹
));

360  
îr‹
;

362 
c•ec
.
ªv
 = -1;

363 
	`mem˝y
(
c•ec
.
cou¡ry_abbªv
, 
cou¡ry_code
, 
WLC_CNTRY_BUF_SZ
);

364 
	`mem˝y
(
c•ec
.
ccode
, 
cou¡ry_code
, 
WLC_CNTRY_BUF_SZ
);

365 
	`gë_cu°omized_cou¡ry_code
((*)&
c•ec
.
cou¡ry_abbªv
, &cspec);

366 
îr‹
 = 
	`wldev_iov¨_£tbuf
(
dev
, "cou¡ry", &
c•ec
, (cspec),

367 
smbuf
, (smbuf), 
NULL
);

368 i‡(
îr‹
 < 0) {

369 
	`WLDEV_ERROR
(("%s: set country for %sás %sÑev %d failed\n",

370 
__FUNCTION__
, 
cou¡ry_code
, 
c•ec
.
ccode
, c•ec.
ªv
));

371  
îr‹
;

373 
	`dhd_bus_cou¡ry_£t
(
dev
, &
c•ec
);

374 
	`WLDEV_ERROR
(("%s: set country for %sás %sÑev %d\n",

375 
__FUNCTION__
, 
cou¡ry_code
, 
c•ec
.
ccode
, c•ec.
ªv
));

378 
	}
}

	@wldev_common.h

26 #i‚de‡
__WLDEV_COMMON_H__


27 
	#__WLDEV_COMMON_H__


	)

29 
	~<wlio˘l.h
>

35 
s32
 
wldev_io˘l
(

36 
√t_devi˚
 *
dev
, 
u32
 
cmd
, *
¨g
, u32 
Àn
, u32 
£t
);

41 
s32
 
wldev_iov¨_gëbuf
(

42 
√t_devi˚
 *
dev
, 
s8
 *
iov¨_«me
,

43 *
∑øm
, 
s32
 
∑ømÀn
, *
buf
, s32 
buÊí
, 
muãx
* 
buf_sync
);

48 
s32
 
wldev_iov¨_£tbuf
(

49 
√t_devi˚
 *
dev
, 
s8
 *
iov¨_«me
,

50 *
∑øm
, 
s32
 
∑ømÀn
, *
buf
, s32 
buÊí
, 
muãx
* 
buf_sync
);

52 
s32
 
wldev_iov¨_£töt
(

53 
√t_devi˚
 *
dev
, 
s8
 *
iov¨
, 
s32
 
vÆ
);

55 
s32
 
wldev_iov¨_gëöt
(

56 
√t_devi˚
 *
dev
, 
s8
 *
iov¨
, 
s32
 *
pvÆ
);

62 
s32
 
wldev_mkiov¨_bsscfg
(

63 c⁄° 
s8
 *
iov¨_«me
, s8 *
∑øm
, 
s32
 
∑ømÀn
,

64 
s8
 *
iov¨_buf
, 
s32
 
buÊí
, s32 
bssidx
);

69 
s32
 
wldev_iov¨_gëbuf_bsscfg
(

70 
√t_devi˚
 *
dev
, 
s8
 *
iov¨_«me
, *
∑øm
, 
s32
 
∑ømÀn
,

71 *
buf
, 
s32
 
buÊí
, s32 
bsscfg_idx
, 
muãx
* 
buf_sync
);

76 
s32
 
wldev_iov¨_£tbuf_bsscfg
(

77 
√t_devi˚
 *
dev
, 
s8
 *
iov¨_«me
, *
∑øm
, 
s32
 
∑ømÀn
,

78 *
buf
, 
s32
 
buÊí
, s32 
bsscfg_idx
, 
muãx
* 
buf_sync
);

80 
s32
 
wldev_iov¨_gëöt_bsscfg
(

81 
√t_devi˚
 *
dev
, 
s8
 *
iov¨
, 
s32
 *
pvÆ
, s32 
bssidx
);

83 
s32
 
wldev_iov¨_£töt_bsscfg
(

84 
√t_devi˚
 *
dev
, 
s8
 *
iov¨
, 
s32
 
vÆ
, s32 
bssidx
);

86 
gë_cu°omized_cou¡ry_code
(*
cou¡ry_iso_code
, 
wl_cou¡ry_t
 *
c•ec
);

87 
dhd_bus_cou¡ry_£t
(
√t_devi˚
 *
dev
, 
wl_cou¡ry_t
 *
c•ec
);

88 
dhd_bus_b™d_£t
(
√t_devi˚
 *
dev
, 
uöt
 
b™d
);

89 
wldev_£t_cou¡ry
(
√t_devi˚
 *
dev
, *
cou¡ry_code
);

90 
√t_os_wake_lock
(
√t_devi˚
 *
dev
);

91 
√t_os_wake_u∆ock
(
√t_devi˚
 *
dev
);

92 
√t_os_wake_lock_timeout
(
√t_devi˚
 *
dev
);

93 
√t_os_wake_lock_timeout_íabÀ
(
√t_devi˚
 *
dev
, 
vÆ
);

94 
√t_os_£t_dtim_skù
(
√t_devi˚
 *
dev
, 
vÆ
);

95 
√t_os_£t_su•íd_dißbÀ
(
√t_devi˚
 *
dev
, 
vÆ
);

96 
√t_os_£t_su•íd
(
√t_devi˚
 *
dev
, 
vÆ
, 
f‹˚
);

97 
wl_iw_∑r£_ssid_li°_év
(** 
li°_°r
, 
wlc_ssid_t
* 
ssid
,

98 
max
, *
byãs_À·
);

101 
wldev_gë_lök_•ìd
(
√t_devi˚
 *
dev
, *
∂ök_•ìd
);

103 
wldev_gë_rssi
(
√t_devi˚
 *
dev
, *
¥ssi
);

105 
wldev_gë_ssid
(
√t_devi˚
 *
dev
, 
wlc_ssid_t
 *
pssid
);

107 
wldev_gë_b™d
(
√t_devi˚
 *
dev
, 
uöt
 *
pb™d
);

109 
wldev_£t_b™d
(
√t_devi˚
 *
dev
, 
uöt
 
b™d
);

	@
1
.
0
106
1805
aiutils.c
bcmevent.c
bcmsdh.c
bcmsdh_linux.c
bcmsdh_sdmmc.c
bcmsdh_sdmmc_linux.c
bcmutils.c
bcmwifi_channels.c
dhd.h
dhd_bta.c
dhd_bta.h
dhd_bus.h
dhd_cdc.c
dhd_cfg80211.c
dhd_cfg80211.h
dhd_common.c
dhd_custom_gpio.c
dhd_dbg.h
dhd_linux.c
dhd_linux_sched.c
dhd_proto.h
dhd_sdio.c
dhd_wlfc.h
dngl_stats.h
dngl_wlhdr.h
hndpmu.c
include/aidmp.h
include/bcm_cfg.h
include/bcm_mpool_pub.h
include/bcmcdc.h
include/bcmdefs.h
include/bcmdevs.h
include/bcmendian.h
include/bcmpcispi.h
include/bcmperf.h
include/bcmsdbus.h
include/bcmsdh.h
include/bcmsdh_sdmmc.h
include/bcmsdpcm.h
include/bcmsdspi.h
include/bcmsdstd.h
include/bcmspi.h
include/bcmutils.h
include/bcmwifi_channels.h
include/bcmwifi_rates.h
include/dhdioctl.h
include/epivers.h
include/hndpmu.h
include/hndrte_armtrap.h
include/hndrte_cons.h
include/hndsoc.h
include/linux_osl.h
include/linuxver.h
include/miniopt.h
include/msgtrace.h
include/osl.h
include/packed_section_end.h
include/packed_section_start.h
include/pcicfg.h
include/proto/802.11.h
include/proto/802.11_bta.h
include/proto/802.11e.h
include/proto/802.1d.h
include/proto/bcmeth.h
include/proto/bcmevent.h
include/proto/bcmip.h
include/proto/bt_amp_hci.h
include/proto/eapol.h
include/proto/ethernet.h
include/proto/p2p.h
include/proto/sdspi.h
include/proto/vlan.h
include/proto/wpa.h
include/sbchipc.h
include/sbconfig.h
include/sbhnddma.h
include/sbpcmcia.h
include/sbsdio.h
include/sbsdpcmdev.h
include/sbsocram.h
include/sdio.h
include/sdioh.h
include/sdiovar.h
include/siutils.h
include/trxhdr.h
include/typedefs.h
include/usbrdl.h
include/wlfc_proto.h
include/wlioctl.h
linux_osl.c
sbutils.c
siutils.c
siutils_priv.h
uamp_api.h
wl_android.c
wl_android.h
wl_cfg80211.c
wl_cfg80211.h
wl_cfgp2p.c
wl_cfgp2p.h
wl_dbg.h
wl_iw.c
wl_iw.h
wl_linux_mon.c
wldev_common.c
wldev_common.h
